syntax = "proto2";

package nio.proto;

message TrajectoryBoundsDecider {
  optional double map_size_x = 1 [default = 250.0];
  optional double map_size_y = 2 [default = 71];
  optional double map_size_z = 3 [default = 41];
  optional int32 infl_x_p = 4 [default = 5];
  optional int32 infl_x_n = 5 [default = 5];
  optional int32 infl_y_p = 6 [default = 5];
  optional int32 infl_y_n = 7 [default = 5];
  optional int32 infl_z_p = 8 [default = 1];
  optional int32 infl_z_n = 9 [default = 1];
  optional double map_resl_x = 10 [default = 1.0];
  optional double map_resl_y = 11 [default = 0.2];
  optional double map_resl_z = 12 [default = 0.2];
  optional double s_back_len = 13 [default = 20.0];
  optional double max_lon_vel = 14 [default = 50.0];
  optional double min_lon_vel = 15 [default = 0.0];
  optional double max_lon_acc = 16 [default = 3.0];
  optional double max_lon_dec = 17 [default = -6.0];
  optional double max_lat_vel = 18 [default = 2.5];
  optional double max_lat_acc = 19 [default = 1.25];
  optional double max_grids_along_time = 20[default = 2];
  optional double velocity_singularity_eps = 21 [default = 0.01];
  optional double horizon = 22 [default = 100];
  optional double obs_length_buffer = 23 [default = 0.0];
  optional double obs_width_buffer = 24 [default = 0.0];
  optional double init_forward_extend_time = 25 [default = 2.0];
  optional double ego_min_pass_width = 26 [default = 0.2];
  optional double nudge_hard_buffer = 27 [default = 0.0];
  optional double nudge_soft_buffer = 28 [default = 0.5];
}

message PathBoundsDecider {
  optional double default_boundary_buffer = 1 [default = 0.1];
  optional double obstacle_lat_buffer = 2 [default = 0.4];
  optional double obstacle_lon_start_buffer = 3 [default = 3.0];
  optional double obstacle_lon_end_buffer = 4 [default = 2.0];
  optional double horizon = 5 [default = 100.0];
  optional double resolution = 6 [default = 0.5];
  optional double extra_tail_bound_point = 7 [default = 20.0];
  optional double start_planning_lon_buffer = 8 [default = 7.0];
  optional double start_planning_lat_buffer = 9 [default = 0.4];
  optional bool is_extend_lane_bounds_to_include_adc = 10 [default = true];
}

message SpeedBoundsDecider {
  optional double total_time = 1 [ default = 7.0 ];
  optional double boundary_buffer = 2 [ default = 0.1 ];
  optional double max_centric_acceleration_limit = 3 [ default = 2.0 ];
  optional double minimal_kappa = 4 [ default = 0.00001 ];
  optional double point_extension = 5 [ default = 0.0 ];
  optional double lowest_speed = 6 [ default = 2.5 ];
  optional double collision_safety_range = 7 [ default = 1.0 ];
  optional double static_obs_nudge_speed_ratio = 8;
  optional double dynamic_obs_nudge_speed_ratio = 9;
  optional double overlap_buffer = 10 [default = 0.4];
}

message PathTimeHeuristicOptimizer {
  optional double unit_t = 1 [ default = 1.0 ];
  optional int32 dense_dimension_s = 2 [ default = 41 ];
  optional double dense_unit_s = 3 [ default = 0.5 ];
  optional double sparse_unit_s = 4 [ default = 1.0 ];

  optional double speed_weight = 10 [ default = 0.0 ];
  optional double accel_weight = 11 [ default = 10.0 ];
  optional double jerk_weight = 12 [ default = 10.0 ];
  optional double obstacle_weight = 13 [ default = 1.0 ];
  optional double reference_weight = 14 [ default = 0.0 ];
  optional double go_down_buffer = 15 [ default = 5.0 ];
  optional double go_up_buffer = 16 [ default = 5.0 ];
  optional double speed_lon_decision_horizon = 17 [default = 200.0];
  // obstacle cost config
  optional double default_obstacle_cost = 20 [ default = 1e4 ];

  // speed cost config
  optional double default_speed_cost = 31 [ default = 1.0 ];
  optional double exceed_speed_penalty = 32 [ default = 10.0 ];
  optional double low_speed_penalty = 33 [ default = 2.5 ];
  optional double reference_speed_penalty = 34 [ default = 1.0 ];
  optional double keep_clear_low_speed_penalty = 35 [ default = 10.0 ];

  // accel cost config
  optional double accel_penalty = 40 [ default = 2.0 ];
  optional double decel_penalty = 41 [ default = 2.0 ];

  // jerk cost config
  optional double positive_jerk_coeff = 50 [ default = 1.0 ];
  optional double negative_jerk_coeff = 51 [ default = 300.0 ];

  // other constraint
  optional double max_acceleration = 60 [ default = 4.5 ];
  optional double max_deceleration = 61 [ default = -4.5 ];

  // buffer
  optional double safe_time_buffer = 70 [ default = 3.0 ];
  optional double follow_safe_distance = 71 [ default = 4.0 ];
  optional double overtake_safe_distance = 72 [ default = 20.0 ];

  // spatial potential cost config for minimal time traversal
  optional double spatial_potential_penalty = 80 [ default = 1.0 ];

  optional bool is_lane_changing = 81 [ default = false ];
}

message PiecewiseJerkPathOptimizer {
  optional double lateral_derivative_bound_default = 1 [default = 2.0];
  optional double l_weight = 2 [default = 1.0];
  optional double dl_weight = 3 [default = 20.0];
  optional double ddl_weight = 4 [default = 1000.0];
  optional double dddl_weight = 5 [default = 50000.0];
  optional double crossable_bound_weight = 6 [default = 3.0];
  optional double nudge_bound_weight = 7 [default = 100.0];
  optional int32 max_iter = 8 [default = 4000];
  optional double path_reference_l_weight = 9 [default = 0.0];
  optional double path_slack_length = 10 [default = 10.0];
  optional double lane_change_time = 11 [default = 8.0];
  optional double sigmoid_k = 12 [default = 7.0];
}

message EudmPathOptimizer {
  optional double max_constraint_interval = 1 [default = 5];
  optional double longitudinal_boundary_bound = 2 [default = 1.0];
  optional double max_lateral_boundary_bound = 3 [default = 0.5];
  optional double min_lateral_boundary_bound = 4 [default = 0.2];
  // The output resolution for qp smoother reference line.
  optional uint32 num_of_total_points = 5 [default = 500];
  optional double curb_shift = 6 [default = 0.2];
  optional double lateral_buffer = 7 [default = 0.2];
  // The output resolution for spiral smoother reference line.
  optional double resolution = 8 [default = 0.02];
  optional uint32 spline_order = 9 [default = 5];
  optional double max_spline_length = 10 [default = 25];
  optional double regularization_weight = 11 [default = 0.1];
  optional double second_derivative_weight = 12 [default = 0.0];
  optional double third_derivative_weight = 13 [default = 100];
}

message PiecewiseJerkSpeedOptimizer {
  optional double longitudinal_jerk_lower_bound = 1 [default = -4.0];
  optional double longitudinal_jerk_upper_bound = 2 [default = 2.0];
  optional double default_cruise_speed = 3 [default = 5.0];
  optional double planning_upper_speed_limit = 4 [default = 11.0];
  optional double acc_weight = 5 [default = 1.0];
  optional double jerk_weight = 6 [default = 3.0];
  optional double kappa_penalty_weight = 7 [default = 2000.0];
  optional double dkappa_penalty_weight = 8 [default = 2000.0];
  optional double ref_s_weight = 9 [default = 10.0];
  optional double ref_v_weight = 10 [default = 10.0];
  optional double ref_a_weight = 11 [default = 10.0];
  optional double following_buffer_weight = 12 [default = 10.0];
  optional double follow_safe_distance = 13 [default = 3.0];
  optional double soft_spd_limit_weight = 14 [deprecated = true];
  optional double stop_speed = 15 [default = 0.1];
  optional double acceleration_limit = 16 [default = 0.6];
  optional double deceleration_limit = 17 [default = -4.0];
  optional double ref_acc_time = 18 [default = 2.0];
  optional double min_spd_for_cost = 19 [default = 3.0];
  optional double following_base_thw = 20 [default = 1.0];
  optional double following_extra_ttc = 21 [default = 2.0];
  optional double ref_v_max_diff = 22 [default = 8.0];
  optional double comfort_speed_limit_weight = 23 [default = 100.0];
  optional double map_speed_limit_weight = 24 [default = 100.0];
}

message SpeedDecider {
  optional double follow_min_obs_lat_distance = 1 [default = 2.5];
  optional double follow_time_epsilon = 2 [default = 1e-3];
  optional double follow_cut_off_time = 3 [default = 0.5];
  optional double follow_min_time_sec = 4 [default = 2.0];
}

message ReferenceLineDecider {}

message SpeedFallBackPlanner {
  optional double delta_t = 1;
  optional double jerk_min = 2;
  optional double acc_min = 3;
  optional uint32 max_spd_pts_len = 4;
}

message PathFallBackPlanner {
}

message LaneChangeDecider{

}
message TaskConfig {
  enum TaskType {
    PATH_BOUNDS_DECIDER = 0;
    SPEED_BOUNDS_DECIDER = 1;
    PATH_TIME_HEURISTIC_OPTIMIZER = 2;
    PIECEWISE_JERK_PATH_OPTIMIZER = 3;
    PIECEWISE_JERK_SPEED_OPTIMIZER = 4;
    SPEED_DECIDER = 5;
    REFERENCE_LINE_DECIDER = 6;
    EUDM_PATH_OPTIMIZER = 7;
    TRAJECTORY_BOUNDS_DECIDER = 8;
    LANE_CHANGE_DECIDER = 9;
    SPEED_FALL_BACK_PLANNER = 10;
    PATH_FALL_BACK_PLANNER = 11;
  };
  optional TaskType task_type = 1;

  oneof type {
    PathBoundsDecider path_bounds_decider = 2;
    SpeedBoundsDecider speed_bounds_decider = 3;
    PathTimeHeuristicOptimizer path_time_heuristic_optimizer = 4;
    PiecewiseJerkPathOptimizer piecewise_jerk_path_optimizer = 5;
    PiecewiseJerkSpeedOptimizer piecewise_jerk_speed_optimizer = 6;
    SpeedDecider speed_decider = 7;
    ReferenceLineDecider reference_line_decider = 8;
    EudmPathOptimizer eudm_path_optimizer = 9;
    TrajectoryBoundsDecider trajectory_bounds_decider = 10;
    LaneChangeDecider lane_change_decider = 11;
    SpeedFallBackPlanner speed_fall_back_planner = 12;
    PathFallBackPlanner path_fall_back_planner = 13;
  }
}
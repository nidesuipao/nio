
syntax = "proto2";

package nio.proto;

import "config_car.proto";
import "config_control.proto";

message ConfigControlManager {
  optional ConfigCar config_car = 1;
  optional ConfigLateralControl config_lateral_control = 2;
  repeated ConfigLongitudinalControl config_longitudinal_control = 3;
  optional ConfigModeControl config_mode_control = 4;
  optional bool use_simulator = 5 [default = false];
  optional bool lon_trajectory_control_enable = 6[default = false];
  optional ConfigSimulation config_simulation = 7;
}

message GainScheduler {
  repeated GainSchedulerInfo scheduler = 1;
}

message GainSchedulerInfo {
  optional double speed = 1;  // m/s
  optional double ratio = 2;
}

message ConfigLateralControl {

    message LateralControlPid {
    message PreviewPoint {
      optional double slope = 1;
      optional double slope_high_speed = 2;
      optional double vel_low = 3;
      optional double vel_up = 4;
    }

    optional double forward_len = 1; //main to tune looking forward distance
    // feedback preview points
    repeated PreviewPoint fb_preview_points = 2; //modify current
    // feedforward preview points
    repeated PreviewPoint ff_preview_points = 3; //look future
    optional PidParam fb_pid_param = 4;
    optional double ff_gain = 5;
    optional double fb_gain = 6;
    optional double fb_gain_high_speed = 7;
    optional double slope_slew_rate = 8;
    optional double gain_slew_rate = 9;
    optional double speed_mode_threshold = 10 [default = 7.0];
    optional double speed_mode_deadzone = 11 [default = 1.0];
    optional bool enable_steer_fb_gain_scheduler = 12 [default = false];
    optional GainScheduler steer_fb_gain_scheduler = 13;
    optional bool enable_steer_rate_gain_scheduler = 14 [default = false];
    optional GainScheduler steer_rate_gain_scheduler = 15;
    optional bool pid_feedback_enable = 16[default = true];
    // if disable pid,the param != 0
    optional double preview_distance_k = 17[default = 0.1];
    optional double min_distance = 18[default = 5.0];
    optional double max_distance = 19[default = 20.0];
  }
   message ConfigYawRateObserver{
    repeated double noise_matrix_q = 1;
    repeated double noise_matrix_r_chassis = 2;
    repeated double noise_matrix_r_imu = 3;
    repeated double init_p = 4;
    optional double road_tire_friction_coefficient = 5 [default = 1.0];
    optional double lf = 6;
    optional double lr = 7; 
  }

  message SteerRateLimiter {
    repeated SteerRateLimiterEle scheduler = 1;
  }

  message SteerRateLimiterEle {
    optional double speed = 1;
    optional double limit = 2;
  }

  message LateralControlLqr {
    optional int32 preview_window = 2;
    optional double cf = 3;
    optional double cr = 4;  // N/rad
    optional int32 mass_fl = 5;
    optional int32 mass_fr = 6;
    optional int32 mass_rl = 7;
    optional int32 mass_rr = 8;
    optional double eps = 9;          // converge threshold for lqr solver
    repeated double matrix_q = 10;    // matrix_q size = 4 + preview_window
    repeated double reverse_matrix_q = 11;    // matrix_q size = 4 + preview_window for reverse gear
    optional int32 cutoff_freq = 12;  // cutoff frequency
    optional int32 mean_filter_window_size = 13;  // window size of mean filter
    // for a normal car, it should be in range[16, 18]
    optional int32 max_iteration = 14;  // maximum iteration for lqr solve
    optional double max_lateral_acceleration = 15;  // limit aggressive steering
    optional GainScheduler lat_err_gain_scheduler = 16;
    optional GainScheduler heading_err_gain_scheduler = 17;
    // optional LeadlagConf reverse_leadlag_conf = 18;
    optional bool enable_reverse_leadlag_compensation = 19 [default = false];
    optional bool enable_look_ahead_back_control = 20 [default = false];
    optional double lookahead_station = 21 [default = 0.0];
    optional double lookback_station = 22 [default = 0.0];
    optional double query_relative_time = 23;
    optional double minimum_speed_protection = 24;
    optional bool enable_gain_scheduler = 25;
    optional bool set_steer_limit = 26;
    optional bool reverse_heading_control = 27;
    optional double switch_speed = 28;
    optional bool path_move_forward_enable = 29[default = false];
    optional int32 path_move_forward_point_num = 30;
    optional double path_move_delta_theta = 31;
    optional double steer_angle_cut_off_freq = 32 [default = 3.0];
    optional double lateral_error_cut_off_freq = 33 [default = 3.0];
    optional double heading_error_cut_off_freq = 34 [default = 3.0];
    optional double curvature_cut_off_freq = 35 [default = 3.0];
    optional double lateral_error_rate_cut_off_freq = 37 [default = 3.0];
    optional double heading_error_rate_cut_off_freq = 38 [default = 3.0];

    // use feedback gain scheduler
    optional GainScheduler lateral_error_integrator_scheduler = 39;
    optional GainScheduler lateral_error_scheduler = 40;
    optional GainScheduler lateral_error_dot_scheduler = 41;
    optional GainScheduler heading_error_scheduler = 42;
    optional GainScheduler heading_error_dot_scheduler = 43;

    // open integrator or not
    optional bool enable_lateral_error_integrator = 44;
  }

    message LateralControlKdc {
      message KDCGainScheduler {
        repeated KDCGainSchedulerInfo kdc_scheduler = 1;
      }

      message KDCGainSchedulerInfo {
        optional double speed = 1;  // m/s
        optional double kinematic_pole = 2;
        optional double kinematic_rho = 3;
        optional double kinematic_sigma = 4;
        optional double kinematic_epsion = 5;
        optional double dynamic_k = 6;
        optional double dynamic_pole = 7;
        optional double dynamic_zero = 8;
        optional double dynamic_ki = 9;
        optional double max_dynamic_integration_limit = 10;
      }

      // car physics parameters
      optional double cf = 1;
      optional double cr = 2;
      optional double mass_fl = 3;
      optional double mass_fr = 4;
      optional double mass_rl = 5;
      optional double mass_rr = 6;
      optional double wheel_base_length = 7;
      optional double steering_ratio = 8;

      // boundary parameters
      optional double min_speed_protection = 9 [default = 1.0];
      optional double max_speed_bound = 10 [default = 33.3];
      optional double min_k_protection = 11 [default = 0.3];
      optional double max_lateral_acc_bound = 12;
      optional double max_ref_kappa_bound = 13;
      optional double max_lateral_error_bound = 14;
      optional double max_heading_error_bound = 15;
      optional double max_yaw_rate_error_bound = 16;

      // control parameters
      optional double preview_time = 17 [default = 0.2];
      optional double min_preview_dist = 18 [default = 0.25];
      optional double max_preview_dist = 19 [default = 30];
      optional double vehicle_speed_cut_off_freq = 20 [default = 3.0];
      optional double yaw_rate_cut_off_freq = 21 [default = 3.0];
      optional double ref_yaw_rate_cut_off_freq = 22 [default = 3.0];
      optional double ref_kappa_cut_off_freq = 23 [default = 3.0];
      optional double lateral_error_cut_off_freq = 24 [default = 3.0];
      optional double heading_error_cut_off_freq = 25 [default = 3.0];
      optional double front_wheel_angle_cmd_cut_off_freq = 26 [default = 3.0];
      optional double kinematic_ff_gain = 27 [default = 1.0];
      optional double kinematic_pole = 28 [default = -0.5];
      optional double kinematic_rho = 29 [default = 0.0];
      optional double kinematic_sigma = 30 [default = 0.08];
      optional double kinematic_epsion = 31 [default = 0.05];
      optional double dynamic_ff_gain = 32 [default = 1.0];
      optional double dynamic_k = 33 [default = 1.0];
      optional double dynamic_pole = 34 [default = -1.0];
      optional double dynamic_zero = 35 [default = -1.0];
      optional bool use_observer_yawrate = 36;
      optional double dynamic_ki = 37 [default = 0.0];
      optional bool enable_kus_config = 38 [default = false];
      optional double kus_config = 39 [default = 0.0];
      optional bool enable_kdc_gain_scheduler = 40 [default = false];
      optional KDCGainScheduler kdc_gain_scheduler = 41;
      optional double max_dynamic_integration_limit = 42 [default = 0.01];
      optional bool enable_dynamic_integration = 43 [default = false];
      optional bool enable_data_record = 44 [deprecated = true];
      optional bool enable_kinematic_integration = 45 [default = false];
      optional double max_kinematic_integration_limit = 46 [default = 0.005];
      optional double hand_torque_limit = 47 [default = 0.6];
      optional double steer_protect_duration = 48;
      optional SteerRateLimiter steer_rate_limiter = 49;
      optional bool enable_steer_protection = 50 [default = false];
    }

    oneof type {
      LateralControlLqr lateral_control_lqr = 1;
      LateralControlPid lateral_control_pid = 2;
      LateralControlKdc lateral_control_kdc = 3;
  }

  message SteerTorqueControl {
    optional double ts = 1 [default = 0.02];
    optional double torque_limit = 2 [default = 3]; //uinit nm
    optional double angle_err_limit = 3 [default = 0.2]; //unit rad
    optional PidParam torque_high_speed_pid_param = 4;
    optional double torque_dead_zone = 5[default = 0.5]; //min torque to move steer steer wheel
    optional bool torque_ff_enable = 6[default = false];
    optional double torque_ff_gain = 7;
    optional double delta_torque_limit = 8[default = 0.06];
    optional double torque_fb_gain = 9;
    optional double angle_delay_max_torque = 10[default = 1.0]; //must be < 1.0
    optional double angle_delay_min_torque = 11[default = 0.1];
    optional double low_torque_n_root = 12[default = 2.0];
    optional bool straighten_torque_compensation_en = 13[default = false];
    optional double straighten_torque_compensation_gain = 14[default = 1.0];
    optional double torque_compensation_limit = 15[default = 0.5];
    optional double torque_ff_limit = 16[default = 3.0];
    optional double torque_pid_param_switch_speed = 17[default = 13.8]; //unit m/s
    optional PidParam torque_low_speed_pid_param = 18;
  }
  optional SteerTorqueControl steer_torque_control = 4;
  optional bool steer_torque_enable = 5 [default = false];

  optional double angle_slew_rate = 9;
  optional double lateral_acc_limit = 10;
  optional double ts = 11 [default = 0.02];  // sample time (dt) 0.02 now, configurable
  // preview window n, preview time = preview window * ts
  optional double heading_bias = 12 [default = 0.0]; // unit: deg
  optional ConfigYawRateObserver yaw_rate_observer = 13;
  optional bool enable_data_record = 14 [default = false];
  optional double hand_torque_cut_off_freq = 15 [default = 5.0];  // unit: hz
}

message ConfigCalibration {

  message AutoCalibration {
    message CarModel {
      message Anchor {
        optional double speed = 1;
        optional double longi = 2;
      }
      message ThrotParam {
        message SpeedIndex {
          message LongiIndex {
            repeated double param = 1;
          }
          repeated LongiIndex longi_index = 1;
        }
        repeated SpeedIndex speed_index = 1;
      }
      message DzoneParam {
        repeated double lo_speed = 1;
        repeated double hi_speed = 2;
      }
      message BrakeParam {
        repeated double lo_speed = 1;
        repeated double hi_speed = 2;
      }

      optional double dzone_ssp = 1;
      optional double brake_ssp = 2;
      optional double speed_scale = 3;
      optional double longi_scale = 4;
      optional Anchor anchor0 = 5;
      optional Anchor anchor1 = 6;
      optional ThrotParam throt_param = 7;
      optional DzoneParam dzone_param = 8;
      optional BrakeParam brake_param = 9;
    }
    optional CarModel car_model = 1;
    optional double ts = 2 [default = 0.02];
  }

  message ManualCalibration {
    optional PidParam acc_throttle_pid_param = 1;
    optional PidParam acc_brake_pid_param = 2;
    optional CurveFittingParam throttle_fitting_param = 3;
    repeated CurveFittingParam brake_fitting_param = 4;
    repeated CoastFittingParam coast_fitting_param = 5;
    optional bool enable_acc_compensation = 6 [default = false];
    // Throttle/brake deadzone
    optional double throttle_deadzone_low = 7;
    optional double throttle_deadzone_up = 8;
    optional double brake_deadzone_low = 9;
    optional double brake_deadzone_up = 10;
    optional double ts = 11 [default = 0.02];
  }

  oneof type {
   AutoCalibration auto_calibration = 1;
   ManualCalibration manual_calibration = 2;  
  }
}

message ConfigLongitudinalControl {
  message Cruise {
    optional PidParam vel_pid_param = 1;
    optional float acc_ff_gain = 2;
    optional float extra_stop_brake = 3 [default = 0.03];
    optional float stop_brake_time = 4 [default = 1.5];
  }

  message AdaptiveCruise {
    // determine the relative distance under dynamic case
    optional float headway_time = 1 [default = 1.5];
    // control parameters that determines the gain, cut-off frequency
    optional float k1 = 2 [default = 0.3];
    optional float k1_low_speed = 3 [default = 0.1];
    optional float k1_emergency = 4 [default = 0.4];
    optional float k2 = 5 [default = 0.042];
    optional float k3 = 6 [default = 12.0];
    optional float cd = 7 [default = 4.0];
    optional float cd_low_speed = 8 [default = 4.0];
    // the relative distance under stationary case
    optional float stand_still_vehicle = 9 [default = 4.0];
    optional float stand_still_stop_line = 10 [default = 1.0];
    // the emergency safety distance under stationary case
    optional float safety_region = 11 [default = 0.0];
    // the deceleration under emergency case
    optional float emergency_acc = 12 [default = -1.0];
    optional bool acc_function_on = 13 [default = false];
    optional float k1_slew_rate = 14 [default = 0.1];
    optional float cd_slew_rate = 15 [default = 0.5];
    optional float emergency_headway_time = 16 [default = 0.5];
    optional float emergency_headway_time_deadzone = 17 [default = 0.25];
    optional float extra_stop_brake = 18 [default = 0.03];
    optional float stop_brake_time = 19 [default = 1.5];
    optional float steep_stop_brake_time = 20 [default = 0.4];
  }

  message Acceleration {
    optional PidParam acc_throttle_pid_param = 1;
    optional PidParam acc_brake_pid_param = 2;
    optional CurveFittingParam throttle_fitting_param = 3;
    repeated CurveFittingParam brake_fitting_param = 4;
    repeated CoastFittingParam coast_fitting_param = 5;
  }

  message Trajectory {
    message Position {
      optional double fix_preview_window = 2;
      optional bool enable_position_preview = 3 [default = false];
      optional PidParam pos_pid_param = 4;
      optional double feedforward_gain = 5 [default = 1.0];
      optional double position_err_limit = 6 [default = 2.0];
      optional bool enable_dynamic_preview_window = 7 [default = false];
      optional double dynamic_preview_window_range = 8;
      // the value <= 0
      optional double dynamic_preview_dec_thrd = 9;
      optional double position_error_cut_off_freq = 10 [default = 3.0];
      optional double position_error_epsion = 11 [default = 3.0];
      optional double position_error_kc = 12 [default = 0.1];
    }

    message Speed {
      optional double speed_error_limit = 2;
      optional bool enable_acceleration_preview = 3 [default = false]; 
      optional PidParam speed_pid_param = 4;
      optional double acc_ff_gain = 5;
      optional double acc_cmd_cut_off_freq = 6 [default = 3.0];
      optional double speed_error_cut_off_freq = 7 [default = 3.0];
      optional double speed_error_epsion = 8 [default = 3.0];
    }

    optional Position position = 1;
    optional Speed speed = 2;
    optional double stopped_acc = 3 [default = -0.5];
    optional bool enable_hysteresis_regulator = 4 [default = false];
    optional double hysteresis_speed_limit = 5 [default = 3.0];
  }
  optional ConfigCalibration config_calibration = 1;
  oneof type {
    Cruise cruise = 2;
    AdaptiveCruise adaptive_cruise = 3;
    Trajectory trajectory = 4;
  }
  optional bool enable_gravity_compensation = 5 [default = false];
  optional double acceleration_limit = 6 [default = 1.0];
  optional double deceleration_limit = 7 [default = 3.0];
  optional double stop_line_acceleration_limit = 8 [default = 1.5];
  optional double stop_line_deceleration_limit = 9 [default = 5.0];
  optional double acceleration_jerk_limit = 10 [default = 1.5];
  optional double deceleration_jerk_limit = 11 [default = 2.5];
  optional double stop_line_acceleration_jerk_limit = 12 [default = 1.5];
  optional double stop_line_deceleration_jerk_limit = 13 [default = 4.0];
  optional double pitch_bias = 14 [default = 0.0];
  optional double ts = 15 [default = 0.02];
  optional bool enable_data_record = 16 [default = false];
}

message ConfigModeControl {
  enum Type {
    DEMO_MKZ = 0;
  }
  optional Type type = 1;
  enum Mode {
    AUTO = 0;
    LONG_AUTO = 1;
    LAT_AUTO = 2;
    MANUAL = 3;
  }
}

message ConfigSimulation {
  enum Mode {
    DISABLE = 0;
    LONGITUDINAL_ONLY = 1;
    LATERAL_ONLY = 2;
    BOTH_AUTO = 3;
    NUM = 4;
  }
  optional Mode simulation_mode = 1;
  optional bool enable_log_file = 2;
}

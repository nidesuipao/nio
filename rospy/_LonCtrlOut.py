# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LonCtrlOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LonCtrlOut(genpy.Message):
  _md5sum = "f8846030909645bcf155afe3b40c61ce"
  _type = "rospy_message_converter/LonCtrlOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ModeESP
int32 TauGapSet
bool ObjValid
float32 DsplVelocitySet
int32 GoNotfrReq
int32 TextInfo
int32 GoNotfrOnOffSts
int32 TSRSpdLimDataOnOffSts
int32 TakeOverReq
float32 TargetAccel
float32 CmftLowerAccl
float32 CmftUpprAccl
float32 MinJerkAccl
float32 MaxJerkAccl
int32 DecelToStopReq
int32 ShutdownModReq
int32 DrvOffReq
int32 BrkPreferReq
int32 MinBkrgReq
int32 ACCNPDrvMsg
int32 ClsObjTyp
float32 ClsObjDst
int32 TauGapChgDisp
bool DisplSetSpdEnbl
int32 VlcReqFct
uint32 SpdUnit
int32 DA_SetSpeedAnimation
uint32 DA_Inhibit
"""
  __slots__ = ['ModeESP','TauGapSet','ObjValid','DsplVelocitySet','GoNotfrReq','TextInfo','GoNotfrOnOffSts','TSRSpdLimDataOnOffSts','TakeOverReq','TargetAccel','CmftLowerAccl','CmftUpprAccl','MinJerkAccl','MaxJerkAccl','DecelToStopReq','ShutdownModReq','DrvOffReq','BrkPreferReq','MinBkrgReq','ACCNPDrvMsg','ClsObjTyp','ClsObjDst','TauGapChgDisp','DisplSetSpdEnbl','VlcReqFct','SpdUnit','DA_SetSpeedAnimation','DA_Inhibit']
  _slot_types = ['int32','int32','bool','float32','int32','int32','int32','int32','int32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','float32','int32','bool','int32','uint32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ModeESP,TauGapSet,ObjValid,DsplVelocitySet,GoNotfrReq,TextInfo,GoNotfrOnOffSts,TSRSpdLimDataOnOffSts,TakeOverReq,TargetAccel,CmftLowerAccl,CmftUpprAccl,MinJerkAccl,MaxJerkAccl,DecelToStopReq,ShutdownModReq,DrvOffReq,BrkPreferReq,MinBkrgReq,ACCNPDrvMsg,ClsObjTyp,ClsObjDst,TauGapChgDisp,DisplSetSpdEnbl,VlcReqFct,SpdUnit,DA_SetSpeedAnimation,DA_Inhibit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LonCtrlOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ModeESP is None:
        self.ModeESP = 0
      if self.TauGapSet is None:
        self.TauGapSet = 0
      if self.ObjValid is None:
        self.ObjValid = False
      if self.DsplVelocitySet is None:
        self.DsplVelocitySet = 0.
      if self.GoNotfrReq is None:
        self.GoNotfrReq = 0
      if self.TextInfo is None:
        self.TextInfo = 0
      if self.GoNotfrOnOffSts is None:
        self.GoNotfrOnOffSts = 0
      if self.TSRSpdLimDataOnOffSts is None:
        self.TSRSpdLimDataOnOffSts = 0
      if self.TakeOverReq is None:
        self.TakeOverReq = 0
      if self.TargetAccel is None:
        self.TargetAccel = 0.
      if self.CmftLowerAccl is None:
        self.CmftLowerAccl = 0.
      if self.CmftUpprAccl is None:
        self.CmftUpprAccl = 0.
      if self.MinJerkAccl is None:
        self.MinJerkAccl = 0.
      if self.MaxJerkAccl is None:
        self.MaxJerkAccl = 0.
      if self.DecelToStopReq is None:
        self.DecelToStopReq = 0
      if self.ShutdownModReq is None:
        self.ShutdownModReq = 0
      if self.DrvOffReq is None:
        self.DrvOffReq = 0
      if self.BrkPreferReq is None:
        self.BrkPreferReq = 0
      if self.MinBkrgReq is None:
        self.MinBkrgReq = 0
      if self.ACCNPDrvMsg is None:
        self.ACCNPDrvMsg = 0
      if self.ClsObjTyp is None:
        self.ClsObjTyp = 0
      if self.ClsObjDst is None:
        self.ClsObjDst = 0.
      if self.TauGapChgDisp is None:
        self.TauGapChgDisp = 0
      if self.DisplSetSpdEnbl is None:
        self.DisplSetSpdEnbl = False
      if self.VlcReqFct is None:
        self.VlcReqFct = 0
      if self.SpdUnit is None:
        self.SpdUnit = 0
      if self.DA_SetSpeedAnimation is None:
        self.DA_SetSpeedAnimation = 0
      if self.DA_Inhibit is None:
        self.DA_Inhibit = 0
    else:
      self.ModeESP = 0
      self.TauGapSet = 0
      self.ObjValid = False
      self.DsplVelocitySet = 0.
      self.GoNotfrReq = 0
      self.TextInfo = 0
      self.GoNotfrOnOffSts = 0
      self.TSRSpdLimDataOnOffSts = 0
      self.TakeOverReq = 0
      self.TargetAccel = 0.
      self.CmftLowerAccl = 0.
      self.CmftUpprAccl = 0.
      self.MinJerkAccl = 0.
      self.MaxJerkAccl = 0.
      self.DecelToStopReq = 0
      self.ShutdownModReq = 0
      self.DrvOffReq = 0
      self.BrkPreferReq = 0
      self.MinBkrgReq = 0
      self.ACCNPDrvMsg = 0
      self.ClsObjTyp = 0
      self.ClsObjDst = 0.
      self.TauGapChgDisp = 0
      self.DisplSetSpdEnbl = False
      self.VlcReqFct = 0
      self.SpdUnit = 0
      self.DA_SetSpeedAnimation = 0
      self.DA_Inhibit = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2iBf5i5f7ifiBiIiI().pack(_x.ModeESP, _x.TauGapSet, _x.ObjValid, _x.DsplVelocitySet, _x.GoNotfrReq, _x.TextInfo, _x.GoNotfrOnOffSts, _x.TSRSpdLimDataOnOffSts, _x.TakeOverReq, _x.TargetAccel, _x.CmftLowerAccl, _x.CmftUpprAccl, _x.MinJerkAccl, _x.MaxJerkAccl, _x.DecelToStopReq, _x.ShutdownModReq, _x.DrvOffReq, _x.BrkPreferReq, _x.MinBkrgReq, _x.ACCNPDrvMsg, _x.ClsObjTyp, _x.ClsObjDst, _x.TauGapChgDisp, _x.DisplSetSpdEnbl, _x.VlcReqFct, _x.SpdUnit, _x.DA_SetSpeedAnimation, _x.DA_Inhibit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 106
      (_x.ModeESP, _x.TauGapSet, _x.ObjValid, _x.DsplVelocitySet, _x.GoNotfrReq, _x.TextInfo, _x.GoNotfrOnOffSts, _x.TSRSpdLimDataOnOffSts, _x.TakeOverReq, _x.TargetAccel, _x.CmftLowerAccl, _x.CmftUpprAccl, _x.MinJerkAccl, _x.MaxJerkAccl, _x.DecelToStopReq, _x.ShutdownModReq, _x.DrvOffReq, _x.BrkPreferReq, _x.MinBkrgReq, _x.ACCNPDrvMsg, _x.ClsObjTyp, _x.ClsObjDst, _x.TauGapChgDisp, _x.DisplSetSpdEnbl, _x.VlcReqFct, _x.SpdUnit, _x.DA_SetSpeedAnimation, _x.DA_Inhibit,) = _get_struct_2iBf5i5f7ifiBiIiI().unpack(str[start:end])
      self.ObjValid = bool(self.ObjValid)
      self.DisplSetSpdEnbl = bool(self.DisplSetSpdEnbl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2iBf5i5f7ifiBiIiI().pack(_x.ModeESP, _x.TauGapSet, _x.ObjValid, _x.DsplVelocitySet, _x.GoNotfrReq, _x.TextInfo, _x.GoNotfrOnOffSts, _x.TSRSpdLimDataOnOffSts, _x.TakeOverReq, _x.TargetAccel, _x.CmftLowerAccl, _x.CmftUpprAccl, _x.MinJerkAccl, _x.MaxJerkAccl, _x.DecelToStopReq, _x.ShutdownModReq, _x.DrvOffReq, _x.BrkPreferReq, _x.MinBkrgReq, _x.ACCNPDrvMsg, _x.ClsObjTyp, _x.ClsObjDst, _x.TauGapChgDisp, _x.DisplSetSpdEnbl, _x.VlcReqFct, _x.SpdUnit, _x.DA_SetSpeedAnimation, _x.DA_Inhibit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 106
      (_x.ModeESP, _x.TauGapSet, _x.ObjValid, _x.DsplVelocitySet, _x.GoNotfrReq, _x.TextInfo, _x.GoNotfrOnOffSts, _x.TSRSpdLimDataOnOffSts, _x.TakeOverReq, _x.TargetAccel, _x.CmftLowerAccl, _x.CmftUpprAccl, _x.MinJerkAccl, _x.MaxJerkAccl, _x.DecelToStopReq, _x.ShutdownModReq, _x.DrvOffReq, _x.BrkPreferReq, _x.MinBkrgReq, _x.ACCNPDrvMsg, _x.ClsObjTyp, _x.ClsObjDst, _x.TauGapChgDisp, _x.DisplSetSpdEnbl, _x.VlcReqFct, _x.SpdUnit, _x.DA_SetSpeedAnimation, _x.DA_Inhibit,) = _get_struct_2iBf5i5f7ifiBiIiI().unpack(str[start:end])
      self.ObjValid = bool(self.ObjValid)
      self.DisplSetSpdEnbl = bool(self.DisplSetSpdEnbl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iBf5i5f7ifiBiIiI = None
def _get_struct_2iBf5i5f7ifiBiIiI():
    global _struct_2iBf5i5f7ifiBiIiI
    if _struct_2iBf5i5f7ifiBiIiI is None:
        _struct_2iBf5i5f7ifiBiIiI = struct.Struct("<2iBf5i5f7ifiBiIiI")
    return _struct_2iBf5i5f7ifiBiIiI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DLBOBFDebugMeas.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DLBOBFDebugMeas(genpy.Message):
  _md5sum = "ad1b866964345484a4d61a51472b2996"
  _type = "rospy_message_converter/DLBOBFDebugMeas"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 OBF_errorCamCal_mp
uint32 OBF_nDistr1CamCal_mp
uint32 OBF_nDistr2CamCal_mp
uint32 OBF_nDistr3CamCal_mp
uint32 OBF_nDistr4CamCal_mp
int32 Rdr_cntVldFrameCntInVyStats_mp
int32 Rdr_cntObjCnt0CntInVyStats_mp
int32 Rdr_cntObjCnt1CntInVyStats_mp
int32 Rdr_cntObjCnt2CntInVyStats_mp
int32 Rdr_cntObjCnt3CntInVyStats_mp
float32 Rdr_vAvgVy0InVyStats_mp
float32 Rdr_vAvgVy1InVyStats_mp
float32 Rdr_vAvgVy2InVyStats_mp
float32 Rdr_vAvgVy3InVyStats_mp
float32 Rdr_dstAvgFront_mp
float32 Rdr_dstAvgRear_mp
int32 Rdr_cntRadarStGridFrameCnt_mp
int32 Rdr_cntRadarStGridCntFL0_mp
int32 Rdr_cntRadarStGridCntFL2_mp
int32 Rdr_cntRadarStGridCntFL4_mp
int32 Rdr_cntRadarStGridCntFL6_mp
int32 Rdr_cntRadarStGridCntFL16_mp
int32 Rdr_cntRadarStGridCntFL18_mp
int32 Rdr_cntRadarStGridCntFL20_mp
int32 Rdr_cntRadarStGridCntFL22_mp
int32 Rdr_cntRadarStGridCntFL32_mp
int32 Rdr_cntRadarStGridCntFL34_mp
int32 Rdr_cntRadarStGridCntFL36_mp
int32 Rdr_cntRadarStGridCntFL38_mp
int32 Rdr_cntRadarStGridCntFL48_mp
int32 Rdr_cntRadarStGridCntFL50_mp
int32 Rdr_cntRadarStGridCntFL52_mp
int32 Rdr_cntRadarStGridCntFL54_mp
int32 Rdr_cntRadarStGridCntFR0_mp
int32 Rdr_cntRadarStGridCntFR2_mp
int32 Rdr_cntRadarStGridCntFR4_mp
int32 Rdr_cntRadarStGridCntFR6_mp
int32 Rdr_cntRadarStGridCntFR16_mp
int32 Rdr_cntRadarStGridCntFR18_mp
int32 Rdr_cntRadarStGridCntFR20_mp
int32 Rdr_cntRadarStGridCntFR22_mp
int32 Rdr_cntRadarStGridCntFR32_mp
int32 Rdr_cntRadarStGridCntFR34_mp
int32 Rdr_cntRadarStGridCntFR36_mp
int32 Rdr_cntRadarStGridCntFR38_mp
int32 Rdr_cntRadarStGridCntFR48_mp
int32 Rdr_cntRadarStGridCntFR50_mp
int32 Rdr_cntRadarStGridCntFR52_mp
int32 Rdr_cntRadarStGridCntFR54_mp
int32 Rdr_cntRadarStGridCntRL0_mp
int32 Rdr_cntRadarStGridCntRL2_mp
int32 Rdr_cntRadarStGridCntRL4_mp
int32 Rdr_cntRadarStGridCntRL6_mp
int32 Rdr_cntRadarStGridCntRL16_mp
int32 Rdr_cntRadarStGridCntRL18_mp
int32 Rdr_cntRadarStGridCntRL20_mp
int32 Rdr_cntRadarStGridCntRL22_mp
int32 Rdr_cntRadarStGridCntRL32_mp
int32 Rdr_cntRadarStGridCntRL34_mp
int32 Rdr_cntRadarStGridCntRL36_mp
int32 Rdr_cntRadarStGridCntRL38_mp
int32 Rdr_cntRadarStGridCntRL48_mp
int32 Rdr_cntRadarStGridCntRL50_mp
int32 Rdr_cntRadarStGridCntRL52_mp
int32 Rdr_cntRadarStGridCntRL54_mp
int32 Rdr_cntRadarStGridCntRR0_mp
int32 Rdr_cntRadarStGridCntRR2_mp
int32 Rdr_cntRadarStGridCntRR4_mp
int32 Rdr_cntRadarStGridCntRR6_mp
int32 Rdr_cntRadarStGridCntRR16_mp
int32 Rdr_cntRadarStGridCntRR18_mp
int32 Rdr_cntRadarStGridCntRR20_mp
int32 Rdr_cntRadarStGridCntRR22_mp
int32 Rdr_cntRadarStGridCntRR32_mp
int32 Rdr_cntRadarStGridCntRR34_mp
int32 Rdr_cntRadarStGridCntRR36_mp
int32 Rdr_cntRadarStGridCntRR38_mp
int32 Rdr_cntRadarStGridCntRR48_mp
int32 Rdr_cntRadarStGridCntRR50_mp
int32 Rdr_cntRadarStGridCntRR52_mp
int32 Rdr_cntRadarStGridCntRR54_mp
bool Rdr_flgParamIsValid_mp
int32 Rdr_numObjMatchActiveF_mp
int32 Rdr_numObjMatchActiveR_mp
float32 Rdr_dstObjMatchThrdF_mp
float32 Rdr_dstObjMatchThrdR_mp
float32 Rdr_rObjMatchLossThrdF_mp
float32 Rdr_rObjMatchLossThrdR_mp
int32 Rdr_frameObjCntActive_mp
float32 Rdr_numObjCntThrdF_mp
float32 Rdr_numObjCntThrdR_mp
int32 Rdr_numGridCntThrdF_mp
int32 Rdr_numGridCntThrdR_mp
float32 Rdr_rObjCntRatioThrdR_mp
float32 Rdr_rObjCntRatioThrdF_mp
bool OBF_stRearObjDet_mp
float32 OBF_dstRearObjDetX_mp
float32 OBF_dstRearObjDetY_mp
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['OBF_errorCamCal_mp','OBF_nDistr1CamCal_mp','OBF_nDistr2CamCal_mp','OBF_nDistr3CamCal_mp','OBF_nDistr4CamCal_mp','Rdr_cntVldFrameCntInVyStats_mp','Rdr_cntObjCnt0CntInVyStats_mp','Rdr_cntObjCnt1CntInVyStats_mp','Rdr_cntObjCnt2CntInVyStats_mp','Rdr_cntObjCnt3CntInVyStats_mp','Rdr_vAvgVy0InVyStats_mp','Rdr_vAvgVy1InVyStats_mp','Rdr_vAvgVy2InVyStats_mp','Rdr_vAvgVy3InVyStats_mp','Rdr_dstAvgFront_mp','Rdr_dstAvgRear_mp','Rdr_cntRadarStGridFrameCnt_mp','Rdr_cntRadarStGridCntFL0_mp','Rdr_cntRadarStGridCntFL2_mp','Rdr_cntRadarStGridCntFL4_mp','Rdr_cntRadarStGridCntFL6_mp','Rdr_cntRadarStGridCntFL16_mp','Rdr_cntRadarStGridCntFL18_mp','Rdr_cntRadarStGridCntFL20_mp','Rdr_cntRadarStGridCntFL22_mp','Rdr_cntRadarStGridCntFL32_mp','Rdr_cntRadarStGridCntFL34_mp','Rdr_cntRadarStGridCntFL36_mp','Rdr_cntRadarStGridCntFL38_mp','Rdr_cntRadarStGridCntFL48_mp','Rdr_cntRadarStGridCntFL50_mp','Rdr_cntRadarStGridCntFL52_mp','Rdr_cntRadarStGridCntFL54_mp','Rdr_cntRadarStGridCntFR0_mp','Rdr_cntRadarStGridCntFR2_mp','Rdr_cntRadarStGridCntFR4_mp','Rdr_cntRadarStGridCntFR6_mp','Rdr_cntRadarStGridCntFR16_mp','Rdr_cntRadarStGridCntFR18_mp','Rdr_cntRadarStGridCntFR20_mp','Rdr_cntRadarStGridCntFR22_mp','Rdr_cntRadarStGridCntFR32_mp','Rdr_cntRadarStGridCntFR34_mp','Rdr_cntRadarStGridCntFR36_mp','Rdr_cntRadarStGridCntFR38_mp','Rdr_cntRadarStGridCntFR48_mp','Rdr_cntRadarStGridCntFR50_mp','Rdr_cntRadarStGridCntFR52_mp','Rdr_cntRadarStGridCntFR54_mp','Rdr_cntRadarStGridCntRL0_mp','Rdr_cntRadarStGridCntRL2_mp','Rdr_cntRadarStGridCntRL4_mp','Rdr_cntRadarStGridCntRL6_mp','Rdr_cntRadarStGridCntRL16_mp','Rdr_cntRadarStGridCntRL18_mp','Rdr_cntRadarStGridCntRL20_mp','Rdr_cntRadarStGridCntRL22_mp','Rdr_cntRadarStGridCntRL32_mp','Rdr_cntRadarStGridCntRL34_mp','Rdr_cntRadarStGridCntRL36_mp','Rdr_cntRadarStGridCntRL38_mp','Rdr_cntRadarStGridCntRL48_mp','Rdr_cntRadarStGridCntRL50_mp','Rdr_cntRadarStGridCntRL52_mp','Rdr_cntRadarStGridCntRL54_mp','Rdr_cntRadarStGridCntRR0_mp','Rdr_cntRadarStGridCntRR2_mp','Rdr_cntRadarStGridCntRR4_mp','Rdr_cntRadarStGridCntRR6_mp','Rdr_cntRadarStGridCntRR16_mp','Rdr_cntRadarStGridCntRR18_mp','Rdr_cntRadarStGridCntRR20_mp','Rdr_cntRadarStGridCntRR22_mp','Rdr_cntRadarStGridCntRR32_mp','Rdr_cntRadarStGridCntRR34_mp','Rdr_cntRadarStGridCntRR36_mp','Rdr_cntRadarStGridCntRR38_mp','Rdr_cntRadarStGridCntRR48_mp','Rdr_cntRadarStGridCntRR50_mp','Rdr_cntRadarStGridCntRR52_mp','Rdr_cntRadarStGridCntRR54_mp','Rdr_flgParamIsValid_mp','Rdr_numObjMatchActiveF_mp','Rdr_numObjMatchActiveR_mp','Rdr_dstObjMatchThrdF_mp','Rdr_dstObjMatchThrdR_mp','Rdr_rObjMatchLossThrdF_mp','Rdr_rObjMatchLossThrdR_mp','Rdr_frameObjCntActive_mp','Rdr_numObjCntThrdF_mp','Rdr_numObjCntThrdR_mp','Rdr_numGridCntThrdF_mp','Rdr_numGridCntThrdR_mp','Rdr_rObjCntRatioThrdR_mp','Rdr_rObjCntRatioThrdF_mp','OBF_stRearObjDet_mp','OBF_dstRearObjDetX_mp','OBF_dstRearObjDetY_mp','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['float32','uint32','uint32','uint32','uint32','int32','int32','int32','int32','int32','float32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','bool','int32','int32','float32','float32','float32','float32','int32','float32','float32','int32','int32','float32','float32','bool','float32','float32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       OBF_errorCamCal_mp,OBF_nDistr1CamCal_mp,OBF_nDistr2CamCal_mp,OBF_nDistr3CamCal_mp,OBF_nDistr4CamCal_mp,Rdr_cntVldFrameCntInVyStats_mp,Rdr_cntObjCnt0CntInVyStats_mp,Rdr_cntObjCnt1CntInVyStats_mp,Rdr_cntObjCnt2CntInVyStats_mp,Rdr_cntObjCnt3CntInVyStats_mp,Rdr_vAvgVy0InVyStats_mp,Rdr_vAvgVy1InVyStats_mp,Rdr_vAvgVy2InVyStats_mp,Rdr_vAvgVy3InVyStats_mp,Rdr_dstAvgFront_mp,Rdr_dstAvgRear_mp,Rdr_cntRadarStGridFrameCnt_mp,Rdr_cntRadarStGridCntFL0_mp,Rdr_cntRadarStGridCntFL2_mp,Rdr_cntRadarStGridCntFL4_mp,Rdr_cntRadarStGridCntFL6_mp,Rdr_cntRadarStGridCntFL16_mp,Rdr_cntRadarStGridCntFL18_mp,Rdr_cntRadarStGridCntFL20_mp,Rdr_cntRadarStGridCntFL22_mp,Rdr_cntRadarStGridCntFL32_mp,Rdr_cntRadarStGridCntFL34_mp,Rdr_cntRadarStGridCntFL36_mp,Rdr_cntRadarStGridCntFL38_mp,Rdr_cntRadarStGridCntFL48_mp,Rdr_cntRadarStGridCntFL50_mp,Rdr_cntRadarStGridCntFL52_mp,Rdr_cntRadarStGridCntFL54_mp,Rdr_cntRadarStGridCntFR0_mp,Rdr_cntRadarStGridCntFR2_mp,Rdr_cntRadarStGridCntFR4_mp,Rdr_cntRadarStGridCntFR6_mp,Rdr_cntRadarStGridCntFR16_mp,Rdr_cntRadarStGridCntFR18_mp,Rdr_cntRadarStGridCntFR20_mp,Rdr_cntRadarStGridCntFR22_mp,Rdr_cntRadarStGridCntFR32_mp,Rdr_cntRadarStGridCntFR34_mp,Rdr_cntRadarStGridCntFR36_mp,Rdr_cntRadarStGridCntFR38_mp,Rdr_cntRadarStGridCntFR48_mp,Rdr_cntRadarStGridCntFR50_mp,Rdr_cntRadarStGridCntFR52_mp,Rdr_cntRadarStGridCntFR54_mp,Rdr_cntRadarStGridCntRL0_mp,Rdr_cntRadarStGridCntRL2_mp,Rdr_cntRadarStGridCntRL4_mp,Rdr_cntRadarStGridCntRL6_mp,Rdr_cntRadarStGridCntRL16_mp,Rdr_cntRadarStGridCntRL18_mp,Rdr_cntRadarStGridCntRL20_mp,Rdr_cntRadarStGridCntRL22_mp,Rdr_cntRadarStGridCntRL32_mp,Rdr_cntRadarStGridCntRL34_mp,Rdr_cntRadarStGridCntRL36_mp,Rdr_cntRadarStGridCntRL38_mp,Rdr_cntRadarStGridCntRL48_mp,Rdr_cntRadarStGridCntRL50_mp,Rdr_cntRadarStGridCntRL52_mp,Rdr_cntRadarStGridCntRL54_mp,Rdr_cntRadarStGridCntRR0_mp,Rdr_cntRadarStGridCntRR2_mp,Rdr_cntRadarStGridCntRR4_mp,Rdr_cntRadarStGridCntRR6_mp,Rdr_cntRadarStGridCntRR16_mp,Rdr_cntRadarStGridCntRR18_mp,Rdr_cntRadarStGridCntRR20_mp,Rdr_cntRadarStGridCntRR22_mp,Rdr_cntRadarStGridCntRR32_mp,Rdr_cntRadarStGridCntRR34_mp,Rdr_cntRadarStGridCntRR36_mp,Rdr_cntRadarStGridCntRR38_mp,Rdr_cntRadarStGridCntRR48_mp,Rdr_cntRadarStGridCntRR50_mp,Rdr_cntRadarStGridCntRR52_mp,Rdr_cntRadarStGridCntRR54_mp,Rdr_flgParamIsValid_mp,Rdr_numObjMatchActiveF_mp,Rdr_numObjMatchActiveR_mp,Rdr_dstObjMatchThrdF_mp,Rdr_dstObjMatchThrdR_mp,Rdr_rObjMatchLossThrdF_mp,Rdr_rObjMatchLossThrdR_mp,Rdr_frameObjCntActive_mp,Rdr_numObjCntThrdF_mp,Rdr_numObjCntThrdR_mp,Rdr_numGridCntThrdF_mp,Rdr_numGridCntThrdR_mp,Rdr_rObjCntRatioThrdR_mp,Rdr_rObjCntRatioThrdF_mp,OBF_stRearObjDet_mp,OBF_dstRearObjDetX_mp,OBF_dstRearObjDetY_mp,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DLBOBFDebugMeas, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.OBF_errorCamCal_mp is None:
        self.OBF_errorCamCal_mp = 0.
      if self.OBF_nDistr1CamCal_mp is None:
        self.OBF_nDistr1CamCal_mp = 0
      if self.OBF_nDistr2CamCal_mp is None:
        self.OBF_nDistr2CamCal_mp = 0
      if self.OBF_nDistr3CamCal_mp is None:
        self.OBF_nDistr3CamCal_mp = 0
      if self.OBF_nDistr4CamCal_mp is None:
        self.OBF_nDistr4CamCal_mp = 0
      if self.Rdr_cntVldFrameCntInVyStats_mp is None:
        self.Rdr_cntVldFrameCntInVyStats_mp = 0
      if self.Rdr_cntObjCnt0CntInVyStats_mp is None:
        self.Rdr_cntObjCnt0CntInVyStats_mp = 0
      if self.Rdr_cntObjCnt1CntInVyStats_mp is None:
        self.Rdr_cntObjCnt1CntInVyStats_mp = 0
      if self.Rdr_cntObjCnt2CntInVyStats_mp is None:
        self.Rdr_cntObjCnt2CntInVyStats_mp = 0
      if self.Rdr_cntObjCnt3CntInVyStats_mp is None:
        self.Rdr_cntObjCnt3CntInVyStats_mp = 0
      if self.Rdr_vAvgVy0InVyStats_mp is None:
        self.Rdr_vAvgVy0InVyStats_mp = 0.
      if self.Rdr_vAvgVy1InVyStats_mp is None:
        self.Rdr_vAvgVy1InVyStats_mp = 0.
      if self.Rdr_vAvgVy2InVyStats_mp is None:
        self.Rdr_vAvgVy2InVyStats_mp = 0.
      if self.Rdr_vAvgVy3InVyStats_mp is None:
        self.Rdr_vAvgVy3InVyStats_mp = 0.
      if self.Rdr_dstAvgFront_mp is None:
        self.Rdr_dstAvgFront_mp = 0.
      if self.Rdr_dstAvgRear_mp is None:
        self.Rdr_dstAvgRear_mp = 0.
      if self.Rdr_cntRadarStGridFrameCnt_mp is None:
        self.Rdr_cntRadarStGridFrameCnt_mp = 0
      if self.Rdr_cntRadarStGridCntFL0_mp is None:
        self.Rdr_cntRadarStGridCntFL0_mp = 0
      if self.Rdr_cntRadarStGridCntFL2_mp is None:
        self.Rdr_cntRadarStGridCntFL2_mp = 0
      if self.Rdr_cntRadarStGridCntFL4_mp is None:
        self.Rdr_cntRadarStGridCntFL4_mp = 0
      if self.Rdr_cntRadarStGridCntFL6_mp is None:
        self.Rdr_cntRadarStGridCntFL6_mp = 0
      if self.Rdr_cntRadarStGridCntFL16_mp is None:
        self.Rdr_cntRadarStGridCntFL16_mp = 0
      if self.Rdr_cntRadarStGridCntFL18_mp is None:
        self.Rdr_cntRadarStGridCntFL18_mp = 0
      if self.Rdr_cntRadarStGridCntFL20_mp is None:
        self.Rdr_cntRadarStGridCntFL20_mp = 0
      if self.Rdr_cntRadarStGridCntFL22_mp is None:
        self.Rdr_cntRadarStGridCntFL22_mp = 0
      if self.Rdr_cntRadarStGridCntFL32_mp is None:
        self.Rdr_cntRadarStGridCntFL32_mp = 0
      if self.Rdr_cntRadarStGridCntFL34_mp is None:
        self.Rdr_cntRadarStGridCntFL34_mp = 0
      if self.Rdr_cntRadarStGridCntFL36_mp is None:
        self.Rdr_cntRadarStGridCntFL36_mp = 0
      if self.Rdr_cntRadarStGridCntFL38_mp is None:
        self.Rdr_cntRadarStGridCntFL38_mp = 0
      if self.Rdr_cntRadarStGridCntFL48_mp is None:
        self.Rdr_cntRadarStGridCntFL48_mp = 0
      if self.Rdr_cntRadarStGridCntFL50_mp is None:
        self.Rdr_cntRadarStGridCntFL50_mp = 0
      if self.Rdr_cntRadarStGridCntFL52_mp is None:
        self.Rdr_cntRadarStGridCntFL52_mp = 0
      if self.Rdr_cntRadarStGridCntFL54_mp is None:
        self.Rdr_cntRadarStGridCntFL54_mp = 0
      if self.Rdr_cntRadarStGridCntFR0_mp is None:
        self.Rdr_cntRadarStGridCntFR0_mp = 0
      if self.Rdr_cntRadarStGridCntFR2_mp is None:
        self.Rdr_cntRadarStGridCntFR2_mp = 0
      if self.Rdr_cntRadarStGridCntFR4_mp is None:
        self.Rdr_cntRadarStGridCntFR4_mp = 0
      if self.Rdr_cntRadarStGridCntFR6_mp is None:
        self.Rdr_cntRadarStGridCntFR6_mp = 0
      if self.Rdr_cntRadarStGridCntFR16_mp is None:
        self.Rdr_cntRadarStGridCntFR16_mp = 0
      if self.Rdr_cntRadarStGridCntFR18_mp is None:
        self.Rdr_cntRadarStGridCntFR18_mp = 0
      if self.Rdr_cntRadarStGridCntFR20_mp is None:
        self.Rdr_cntRadarStGridCntFR20_mp = 0
      if self.Rdr_cntRadarStGridCntFR22_mp is None:
        self.Rdr_cntRadarStGridCntFR22_mp = 0
      if self.Rdr_cntRadarStGridCntFR32_mp is None:
        self.Rdr_cntRadarStGridCntFR32_mp = 0
      if self.Rdr_cntRadarStGridCntFR34_mp is None:
        self.Rdr_cntRadarStGridCntFR34_mp = 0
      if self.Rdr_cntRadarStGridCntFR36_mp is None:
        self.Rdr_cntRadarStGridCntFR36_mp = 0
      if self.Rdr_cntRadarStGridCntFR38_mp is None:
        self.Rdr_cntRadarStGridCntFR38_mp = 0
      if self.Rdr_cntRadarStGridCntFR48_mp is None:
        self.Rdr_cntRadarStGridCntFR48_mp = 0
      if self.Rdr_cntRadarStGridCntFR50_mp is None:
        self.Rdr_cntRadarStGridCntFR50_mp = 0
      if self.Rdr_cntRadarStGridCntFR52_mp is None:
        self.Rdr_cntRadarStGridCntFR52_mp = 0
      if self.Rdr_cntRadarStGridCntFR54_mp is None:
        self.Rdr_cntRadarStGridCntFR54_mp = 0
      if self.Rdr_cntRadarStGridCntRL0_mp is None:
        self.Rdr_cntRadarStGridCntRL0_mp = 0
      if self.Rdr_cntRadarStGridCntRL2_mp is None:
        self.Rdr_cntRadarStGridCntRL2_mp = 0
      if self.Rdr_cntRadarStGridCntRL4_mp is None:
        self.Rdr_cntRadarStGridCntRL4_mp = 0
      if self.Rdr_cntRadarStGridCntRL6_mp is None:
        self.Rdr_cntRadarStGridCntRL6_mp = 0
      if self.Rdr_cntRadarStGridCntRL16_mp is None:
        self.Rdr_cntRadarStGridCntRL16_mp = 0
      if self.Rdr_cntRadarStGridCntRL18_mp is None:
        self.Rdr_cntRadarStGridCntRL18_mp = 0
      if self.Rdr_cntRadarStGridCntRL20_mp is None:
        self.Rdr_cntRadarStGridCntRL20_mp = 0
      if self.Rdr_cntRadarStGridCntRL22_mp is None:
        self.Rdr_cntRadarStGridCntRL22_mp = 0
      if self.Rdr_cntRadarStGridCntRL32_mp is None:
        self.Rdr_cntRadarStGridCntRL32_mp = 0
      if self.Rdr_cntRadarStGridCntRL34_mp is None:
        self.Rdr_cntRadarStGridCntRL34_mp = 0
      if self.Rdr_cntRadarStGridCntRL36_mp is None:
        self.Rdr_cntRadarStGridCntRL36_mp = 0
      if self.Rdr_cntRadarStGridCntRL38_mp is None:
        self.Rdr_cntRadarStGridCntRL38_mp = 0
      if self.Rdr_cntRadarStGridCntRL48_mp is None:
        self.Rdr_cntRadarStGridCntRL48_mp = 0
      if self.Rdr_cntRadarStGridCntRL50_mp is None:
        self.Rdr_cntRadarStGridCntRL50_mp = 0
      if self.Rdr_cntRadarStGridCntRL52_mp is None:
        self.Rdr_cntRadarStGridCntRL52_mp = 0
      if self.Rdr_cntRadarStGridCntRL54_mp is None:
        self.Rdr_cntRadarStGridCntRL54_mp = 0
      if self.Rdr_cntRadarStGridCntRR0_mp is None:
        self.Rdr_cntRadarStGridCntRR0_mp = 0
      if self.Rdr_cntRadarStGridCntRR2_mp is None:
        self.Rdr_cntRadarStGridCntRR2_mp = 0
      if self.Rdr_cntRadarStGridCntRR4_mp is None:
        self.Rdr_cntRadarStGridCntRR4_mp = 0
      if self.Rdr_cntRadarStGridCntRR6_mp is None:
        self.Rdr_cntRadarStGridCntRR6_mp = 0
      if self.Rdr_cntRadarStGridCntRR16_mp is None:
        self.Rdr_cntRadarStGridCntRR16_mp = 0
      if self.Rdr_cntRadarStGridCntRR18_mp is None:
        self.Rdr_cntRadarStGridCntRR18_mp = 0
      if self.Rdr_cntRadarStGridCntRR20_mp is None:
        self.Rdr_cntRadarStGridCntRR20_mp = 0
      if self.Rdr_cntRadarStGridCntRR22_mp is None:
        self.Rdr_cntRadarStGridCntRR22_mp = 0
      if self.Rdr_cntRadarStGridCntRR32_mp is None:
        self.Rdr_cntRadarStGridCntRR32_mp = 0
      if self.Rdr_cntRadarStGridCntRR34_mp is None:
        self.Rdr_cntRadarStGridCntRR34_mp = 0
      if self.Rdr_cntRadarStGridCntRR36_mp is None:
        self.Rdr_cntRadarStGridCntRR36_mp = 0
      if self.Rdr_cntRadarStGridCntRR38_mp is None:
        self.Rdr_cntRadarStGridCntRR38_mp = 0
      if self.Rdr_cntRadarStGridCntRR48_mp is None:
        self.Rdr_cntRadarStGridCntRR48_mp = 0
      if self.Rdr_cntRadarStGridCntRR50_mp is None:
        self.Rdr_cntRadarStGridCntRR50_mp = 0
      if self.Rdr_cntRadarStGridCntRR52_mp is None:
        self.Rdr_cntRadarStGridCntRR52_mp = 0
      if self.Rdr_cntRadarStGridCntRR54_mp is None:
        self.Rdr_cntRadarStGridCntRR54_mp = 0
      if self.Rdr_flgParamIsValid_mp is None:
        self.Rdr_flgParamIsValid_mp = False
      if self.Rdr_numObjMatchActiveF_mp is None:
        self.Rdr_numObjMatchActiveF_mp = 0
      if self.Rdr_numObjMatchActiveR_mp is None:
        self.Rdr_numObjMatchActiveR_mp = 0
      if self.Rdr_dstObjMatchThrdF_mp is None:
        self.Rdr_dstObjMatchThrdF_mp = 0.
      if self.Rdr_dstObjMatchThrdR_mp is None:
        self.Rdr_dstObjMatchThrdR_mp = 0.
      if self.Rdr_rObjMatchLossThrdF_mp is None:
        self.Rdr_rObjMatchLossThrdF_mp = 0.
      if self.Rdr_rObjMatchLossThrdR_mp is None:
        self.Rdr_rObjMatchLossThrdR_mp = 0.
      if self.Rdr_frameObjCntActive_mp is None:
        self.Rdr_frameObjCntActive_mp = 0
      if self.Rdr_numObjCntThrdF_mp is None:
        self.Rdr_numObjCntThrdF_mp = 0.
      if self.Rdr_numObjCntThrdR_mp is None:
        self.Rdr_numObjCntThrdR_mp = 0.
      if self.Rdr_numGridCntThrdF_mp is None:
        self.Rdr_numGridCntThrdF_mp = 0
      if self.Rdr_numGridCntThrdR_mp is None:
        self.Rdr_numGridCntThrdR_mp = 0
      if self.Rdr_rObjCntRatioThrdR_mp is None:
        self.Rdr_rObjCntRatioThrdR_mp = 0.
      if self.Rdr_rObjCntRatioThrdF_mp is None:
        self.Rdr_rObjCntRatioThrdF_mp = 0.
      if self.OBF_stRearObjDet_mp is None:
        self.OBF_stRearObjDet_mp = False
      if self.OBF_dstRearObjDetX_mp is None:
        self.OBF_dstRearObjDetX_mp = 0.
      if self.OBF_dstRearObjDetY_mp is None:
        self.OBF_dstRearObjDetY_mp = 0.
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.OBF_errorCamCal_mp = 0.
      self.OBF_nDistr1CamCal_mp = 0
      self.OBF_nDistr2CamCal_mp = 0
      self.OBF_nDistr3CamCal_mp = 0
      self.OBF_nDistr4CamCal_mp = 0
      self.Rdr_cntVldFrameCntInVyStats_mp = 0
      self.Rdr_cntObjCnt0CntInVyStats_mp = 0
      self.Rdr_cntObjCnt1CntInVyStats_mp = 0
      self.Rdr_cntObjCnt2CntInVyStats_mp = 0
      self.Rdr_cntObjCnt3CntInVyStats_mp = 0
      self.Rdr_vAvgVy0InVyStats_mp = 0.
      self.Rdr_vAvgVy1InVyStats_mp = 0.
      self.Rdr_vAvgVy2InVyStats_mp = 0.
      self.Rdr_vAvgVy3InVyStats_mp = 0.
      self.Rdr_dstAvgFront_mp = 0.
      self.Rdr_dstAvgRear_mp = 0.
      self.Rdr_cntRadarStGridFrameCnt_mp = 0
      self.Rdr_cntRadarStGridCntFL0_mp = 0
      self.Rdr_cntRadarStGridCntFL2_mp = 0
      self.Rdr_cntRadarStGridCntFL4_mp = 0
      self.Rdr_cntRadarStGridCntFL6_mp = 0
      self.Rdr_cntRadarStGridCntFL16_mp = 0
      self.Rdr_cntRadarStGridCntFL18_mp = 0
      self.Rdr_cntRadarStGridCntFL20_mp = 0
      self.Rdr_cntRadarStGridCntFL22_mp = 0
      self.Rdr_cntRadarStGridCntFL32_mp = 0
      self.Rdr_cntRadarStGridCntFL34_mp = 0
      self.Rdr_cntRadarStGridCntFL36_mp = 0
      self.Rdr_cntRadarStGridCntFL38_mp = 0
      self.Rdr_cntRadarStGridCntFL48_mp = 0
      self.Rdr_cntRadarStGridCntFL50_mp = 0
      self.Rdr_cntRadarStGridCntFL52_mp = 0
      self.Rdr_cntRadarStGridCntFL54_mp = 0
      self.Rdr_cntRadarStGridCntFR0_mp = 0
      self.Rdr_cntRadarStGridCntFR2_mp = 0
      self.Rdr_cntRadarStGridCntFR4_mp = 0
      self.Rdr_cntRadarStGridCntFR6_mp = 0
      self.Rdr_cntRadarStGridCntFR16_mp = 0
      self.Rdr_cntRadarStGridCntFR18_mp = 0
      self.Rdr_cntRadarStGridCntFR20_mp = 0
      self.Rdr_cntRadarStGridCntFR22_mp = 0
      self.Rdr_cntRadarStGridCntFR32_mp = 0
      self.Rdr_cntRadarStGridCntFR34_mp = 0
      self.Rdr_cntRadarStGridCntFR36_mp = 0
      self.Rdr_cntRadarStGridCntFR38_mp = 0
      self.Rdr_cntRadarStGridCntFR48_mp = 0
      self.Rdr_cntRadarStGridCntFR50_mp = 0
      self.Rdr_cntRadarStGridCntFR52_mp = 0
      self.Rdr_cntRadarStGridCntFR54_mp = 0
      self.Rdr_cntRadarStGridCntRL0_mp = 0
      self.Rdr_cntRadarStGridCntRL2_mp = 0
      self.Rdr_cntRadarStGridCntRL4_mp = 0
      self.Rdr_cntRadarStGridCntRL6_mp = 0
      self.Rdr_cntRadarStGridCntRL16_mp = 0
      self.Rdr_cntRadarStGridCntRL18_mp = 0
      self.Rdr_cntRadarStGridCntRL20_mp = 0
      self.Rdr_cntRadarStGridCntRL22_mp = 0
      self.Rdr_cntRadarStGridCntRL32_mp = 0
      self.Rdr_cntRadarStGridCntRL34_mp = 0
      self.Rdr_cntRadarStGridCntRL36_mp = 0
      self.Rdr_cntRadarStGridCntRL38_mp = 0
      self.Rdr_cntRadarStGridCntRL48_mp = 0
      self.Rdr_cntRadarStGridCntRL50_mp = 0
      self.Rdr_cntRadarStGridCntRL52_mp = 0
      self.Rdr_cntRadarStGridCntRL54_mp = 0
      self.Rdr_cntRadarStGridCntRR0_mp = 0
      self.Rdr_cntRadarStGridCntRR2_mp = 0
      self.Rdr_cntRadarStGridCntRR4_mp = 0
      self.Rdr_cntRadarStGridCntRR6_mp = 0
      self.Rdr_cntRadarStGridCntRR16_mp = 0
      self.Rdr_cntRadarStGridCntRR18_mp = 0
      self.Rdr_cntRadarStGridCntRR20_mp = 0
      self.Rdr_cntRadarStGridCntRR22_mp = 0
      self.Rdr_cntRadarStGridCntRR32_mp = 0
      self.Rdr_cntRadarStGridCntRR34_mp = 0
      self.Rdr_cntRadarStGridCntRR36_mp = 0
      self.Rdr_cntRadarStGridCntRR38_mp = 0
      self.Rdr_cntRadarStGridCntRR48_mp = 0
      self.Rdr_cntRadarStGridCntRR50_mp = 0
      self.Rdr_cntRadarStGridCntRR52_mp = 0
      self.Rdr_cntRadarStGridCntRR54_mp = 0
      self.Rdr_flgParamIsValid_mp = False
      self.Rdr_numObjMatchActiveF_mp = 0
      self.Rdr_numObjMatchActiveR_mp = 0
      self.Rdr_dstObjMatchThrdF_mp = 0.
      self.Rdr_dstObjMatchThrdR_mp = 0.
      self.Rdr_rObjMatchLossThrdF_mp = 0.
      self.Rdr_rObjMatchLossThrdR_mp = 0.
      self.Rdr_frameObjCntActive_mp = 0
      self.Rdr_numObjCntThrdF_mp = 0.
      self.Rdr_numObjCntThrdR_mp = 0.
      self.Rdr_numGridCntThrdF_mp = 0
      self.Rdr_numGridCntThrdR_mp = 0
      self.Rdr_rObjCntRatioThrdR_mp = 0.
      self.Rdr_rObjCntRatioThrdF_mp = 0.
      self.OBF_stRearObjDet_mp = False
      self.OBF_dstRearObjDetX_mp = 0.
      self.OBF_dstRearObjDetY_mp = 0.
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_f4I5i6f65iB2i4fi2f2i2fB2fQ().pack(_x.OBF_errorCamCal_mp, _x.OBF_nDistr1CamCal_mp, _x.OBF_nDistr2CamCal_mp, _x.OBF_nDistr3CamCal_mp, _x.OBF_nDistr4CamCal_mp, _x.Rdr_cntVldFrameCntInVyStats_mp, _x.Rdr_cntObjCnt0CntInVyStats_mp, _x.Rdr_cntObjCnt1CntInVyStats_mp, _x.Rdr_cntObjCnt2CntInVyStats_mp, _x.Rdr_cntObjCnt3CntInVyStats_mp, _x.Rdr_vAvgVy0InVyStats_mp, _x.Rdr_vAvgVy1InVyStats_mp, _x.Rdr_vAvgVy2InVyStats_mp, _x.Rdr_vAvgVy3InVyStats_mp, _x.Rdr_dstAvgFront_mp, _x.Rdr_dstAvgRear_mp, _x.Rdr_cntRadarStGridFrameCnt_mp, _x.Rdr_cntRadarStGridCntFL0_mp, _x.Rdr_cntRadarStGridCntFL2_mp, _x.Rdr_cntRadarStGridCntFL4_mp, _x.Rdr_cntRadarStGridCntFL6_mp, _x.Rdr_cntRadarStGridCntFL16_mp, _x.Rdr_cntRadarStGridCntFL18_mp, _x.Rdr_cntRadarStGridCntFL20_mp, _x.Rdr_cntRadarStGridCntFL22_mp, _x.Rdr_cntRadarStGridCntFL32_mp, _x.Rdr_cntRadarStGridCntFL34_mp, _x.Rdr_cntRadarStGridCntFL36_mp, _x.Rdr_cntRadarStGridCntFL38_mp, _x.Rdr_cntRadarStGridCntFL48_mp, _x.Rdr_cntRadarStGridCntFL50_mp, _x.Rdr_cntRadarStGridCntFL52_mp, _x.Rdr_cntRadarStGridCntFL54_mp, _x.Rdr_cntRadarStGridCntFR0_mp, _x.Rdr_cntRadarStGridCntFR2_mp, _x.Rdr_cntRadarStGridCntFR4_mp, _x.Rdr_cntRadarStGridCntFR6_mp, _x.Rdr_cntRadarStGridCntFR16_mp, _x.Rdr_cntRadarStGridCntFR18_mp, _x.Rdr_cntRadarStGridCntFR20_mp, _x.Rdr_cntRadarStGridCntFR22_mp, _x.Rdr_cntRadarStGridCntFR32_mp, _x.Rdr_cntRadarStGridCntFR34_mp, _x.Rdr_cntRadarStGridCntFR36_mp, _x.Rdr_cntRadarStGridCntFR38_mp, _x.Rdr_cntRadarStGridCntFR48_mp, _x.Rdr_cntRadarStGridCntFR50_mp, _x.Rdr_cntRadarStGridCntFR52_mp, _x.Rdr_cntRadarStGridCntFR54_mp, _x.Rdr_cntRadarStGridCntRL0_mp, _x.Rdr_cntRadarStGridCntRL2_mp, _x.Rdr_cntRadarStGridCntRL4_mp, _x.Rdr_cntRadarStGridCntRL6_mp, _x.Rdr_cntRadarStGridCntRL16_mp, _x.Rdr_cntRadarStGridCntRL18_mp, _x.Rdr_cntRadarStGridCntRL20_mp, _x.Rdr_cntRadarStGridCntRL22_mp, _x.Rdr_cntRadarStGridCntRL32_mp, _x.Rdr_cntRadarStGridCntRL34_mp, _x.Rdr_cntRadarStGridCntRL36_mp, _x.Rdr_cntRadarStGridCntRL38_mp, _x.Rdr_cntRadarStGridCntRL48_mp, _x.Rdr_cntRadarStGridCntRL50_mp, _x.Rdr_cntRadarStGridCntRL52_mp, _x.Rdr_cntRadarStGridCntRL54_mp, _x.Rdr_cntRadarStGridCntRR0_mp, _x.Rdr_cntRadarStGridCntRR2_mp, _x.Rdr_cntRadarStGridCntRR4_mp, _x.Rdr_cntRadarStGridCntRR6_mp, _x.Rdr_cntRadarStGridCntRR16_mp, _x.Rdr_cntRadarStGridCntRR18_mp, _x.Rdr_cntRadarStGridCntRR20_mp, _x.Rdr_cntRadarStGridCntRR22_mp, _x.Rdr_cntRadarStGridCntRR32_mp, _x.Rdr_cntRadarStGridCntRR34_mp, _x.Rdr_cntRadarStGridCntRR36_mp, _x.Rdr_cntRadarStGridCntRR38_mp, _x.Rdr_cntRadarStGridCntRR48_mp, _x.Rdr_cntRadarStGridCntRR50_mp, _x.Rdr_cntRadarStGridCntRR52_mp, _x.Rdr_cntRadarStGridCntRR54_mp, _x.Rdr_flgParamIsValid_mp, _x.Rdr_numObjMatchActiveF_mp, _x.Rdr_numObjMatchActiveR_mp, _x.Rdr_dstObjMatchThrdF_mp, _x.Rdr_dstObjMatchThrdR_mp, _x.Rdr_rObjMatchLossThrdF_mp, _x.Rdr_rObjMatchLossThrdR_mp, _x.Rdr_frameObjCntActive_mp, _x.Rdr_numObjCntThrdF_mp, _x.Rdr_numObjCntThrdR_mp, _x.Rdr_numGridCntThrdF_mp, _x.Rdr_numGridCntThrdR_mp, _x.Rdr_rObjCntRatioThrdR_mp, _x.Rdr_rObjCntRatioThrdF_mp, _x.OBF_stRearObjDet_mp, _x.OBF_dstRearObjDetX_mp, _x.OBF_dstRearObjDetY_mp, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 394
      (_x.OBF_errorCamCal_mp, _x.OBF_nDistr1CamCal_mp, _x.OBF_nDistr2CamCal_mp, _x.OBF_nDistr3CamCal_mp, _x.OBF_nDistr4CamCal_mp, _x.Rdr_cntVldFrameCntInVyStats_mp, _x.Rdr_cntObjCnt0CntInVyStats_mp, _x.Rdr_cntObjCnt1CntInVyStats_mp, _x.Rdr_cntObjCnt2CntInVyStats_mp, _x.Rdr_cntObjCnt3CntInVyStats_mp, _x.Rdr_vAvgVy0InVyStats_mp, _x.Rdr_vAvgVy1InVyStats_mp, _x.Rdr_vAvgVy2InVyStats_mp, _x.Rdr_vAvgVy3InVyStats_mp, _x.Rdr_dstAvgFront_mp, _x.Rdr_dstAvgRear_mp, _x.Rdr_cntRadarStGridFrameCnt_mp, _x.Rdr_cntRadarStGridCntFL0_mp, _x.Rdr_cntRadarStGridCntFL2_mp, _x.Rdr_cntRadarStGridCntFL4_mp, _x.Rdr_cntRadarStGridCntFL6_mp, _x.Rdr_cntRadarStGridCntFL16_mp, _x.Rdr_cntRadarStGridCntFL18_mp, _x.Rdr_cntRadarStGridCntFL20_mp, _x.Rdr_cntRadarStGridCntFL22_mp, _x.Rdr_cntRadarStGridCntFL32_mp, _x.Rdr_cntRadarStGridCntFL34_mp, _x.Rdr_cntRadarStGridCntFL36_mp, _x.Rdr_cntRadarStGridCntFL38_mp, _x.Rdr_cntRadarStGridCntFL48_mp, _x.Rdr_cntRadarStGridCntFL50_mp, _x.Rdr_cntRadarStGridCntFL52_mp, _x.Rdr_cntRadarStGridCntFL54_mp, _x.Rdr_cntRadarStGridCntFR0_mp, _x.Rdr_cntRadarStGridCntFR2_mp, _x.Rdr_cntRadarStGridCntFR4_mp, _x.Rdr_cntRadarStGridCntFR6_mp, _x.Rdr_cntRadarStGridCntFR16_mp, _x.Rdr_cntRadarStGridCntFR18_mp, _x.Rdr_cntRadarStGridCntFR20_mp, _x.Rdr_cntRadarStGridCntFR22_mp, _x.Rdr_cntRadarStGridCntFR32_mp, _x.Rdr_cntRadarStGridCntFR34_mp, _x.Rdr_cntRadarStGridCntFR36_mp, _x.Rdr_cntRadarStGridCntFR38_mp, _x.Rdr_cntRadarStGridCntFR48_mp, _x.Rdr_cntRadarStGridCntFR50_mp, _x.Rdr_cntRadarStGridCntFR52_mp, _x.Rdr_cntRadarStGridCntFR54_mp, _x.Rdr_cntRadarStGridCntRL0_mp, _x.Rdr_cntRadarStGridCntRL2_mp, _x.Rdr_cntRadarStGridCntRL4_mp, _x.Rdr_cntRadarStGridCntRL6_mp, _x.Rdr_cntRadarStGridCntRL16_mp, _x.Rdr_cntRadarStGridCntRL18_mp, _x.Rdr_cntRadarStGridCntRL20_mp, _x.Rdr_cntRadarStGridCntRL22_mp, _x.Rdr_cntRadarStGridCntRL32_mp, _x.Rdr_cntRadarStGridCntRL34_mp, _x.Rdr_cntRadarStGridCntRL36_mp, _x.Rdr_cntRadarStGridCntRL38_mp, _x.Rdr_cntRadarStGridCntRL48_mp, _x.Rdr_cntRadarStGridCntRL50_mp, _x.Rdr_cntRadarStGridCntRL52_mp, _x.Rdr_cntRadarStGridCntRL54_mp, _x.Rdr_cntRadarStGridCntRR0_mp, _x.Rdr_cntRadarStGridCntRR2_mp, _x.Rdr_cntRadarStGridCntRR4_mp, _x.Rdr_cntRadarStGridCntRR6_mp, _x.Rdr_cntRadarStGridCntRR16_mp, _x.Rdr_cntRadarStGridCntRR18_mp, _x.Rdr_cntRadarStGridCntRR20_mp, _x.Rdr_cntRadarStGridCntRR22_mp, _x.Rdr_cntRadarStGridCntRR32_mp, _x.Rdr_cntRadarStGridCntRR34_mp, _x.Rdr_cntRadarStGridCntRR36_mp, _x.Rdr_cntRadarStGridCntRR38_mp, _x.Rdr_cntRadarStGridCntRR48_mp, _x.Rdr_cntRadarStGridCntRR50_mp, _x.Rdr_cntRadarStGridCntRR52_mp, _x.Rdr_cntRadarStGridCntRR54_mp, _x.Rdr_flgParamIsValid_mp, _x.Rdr_numObjMatchActiveF_mp, _x.Rdr_numObjMatchActiveR_mp, _x.Rdr_dstObjMatchThrdF_mp, _x.Rdr_dstObjMatchThrdR_mp, _x.Rdr_rObjMatchLossThrdF_mp, _x.Rdr_rObjMatchLossThrdR_mp, _x.Rdr_frameObjCntActive_mp, _x.Rdr_numObjCntThrdF_mp, _x.Rdr_numObjCntThrdR_mp, _x.Rdr_numGridCntThrdF_mp, _x.Rdr_numGridCntThrdR_mp, _x.Rdr_rObjCntRatioThrdR_mp, _x.Rdr_rObjCntRatioThrdF_mp, _x.OBF_stRearObjDet_mp, _x.OBF_dstRearObjDetX_mp, _x.OBF_dstRearObjDetY_mp, _x.publish_ptp_ts,) = _get_struct_f4I5i6f65iB2i4fi2f2i2fB2fQ().unpack(str[start:end])
      self.Rdr_flgParamIsValid_mp = bool(self.Rdr_flgParamIsValid_mp)
      self.OBF_stRearObjDet_mp = bool(self.OBF_stRearObjDet_mp)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_f4I5i6f65iB2i4fi2f2i2fB2fQ().pack(_x.OBF_errorCamCal_mp, _x.OBF_nDistr1CamCal_mp, _x.OBF_nDistr2CamCal_mp, _x.OBF_nDistr3CamCal_mp, _x.OBF_nDistr4CamCal_mp, _x.Rdr_cntVldFrameCntInVyStats_mp, _x.Rdr_cntObjCnt0CntInVyStats_mp, _x.Rdr_cntObjCnt1CntInVyStats_mp, _x.Rdr_cntObjCnt2CntInVyStats_mp, _x.Rdr_cntObjCnt3CntInVyStats_mp, _x.Rdr_vAvgVy0InVyStats_mp, _x.Rdr_vAvgVy1InVyStats_mp, _x.Rdr_vAvgVy2InVyStats_mp, _x.Rdr_vAvgVy3InVyStats_mp, _x.Rdr_dstAvgFront_mp, _x.Rdr_dstAvgRear_mp, _x.Rdr_cntRadarStGridFrameCnt_mp, _x.Rdr_cntRadarStGridCntFL0_mp, _x.Rdr_cntRadarStGridCntFL2_mp, _x.Rdr_cntRadarStGridCntFL4_mp, _x.Rdr_cntRadarStGridCntFL6_mp, _x.Rdr_cntRadarStGridCntFL16_mp, _x.Rdr_cntRadarStGridCntFL18_mp, _x.Rdr_cntRadarStGridCntFL20_mp, _x.Rdr_cntRadarStGridCntFL22_mp, _x.Rdr_cntRadarStGridCntFL32_mp, _x.Rdr_cntRadarStGridCntFL34_mp, _x.Rdr_cntRadarStGridCntFL36_mp, _x.Rdr_cntRadarStGridCntFL38_mp, _x.Rdr_cntRadarStGridCntFL48_mp, _x.Rdr_cntRadarStGridCntFL50_mp, _x.Rdr_cntRadarStGridCntFL52_mp, _x.Rdr_cntRadarStGridCntFL54_mp, _x.Rdr_cntRadarStGridCntFR0_mp, _x.Rdr_cntRadarStGridCntFR2_mp, _x.Rdr_cntRadarStGridCntFR4_mp, _x.Rdr_cntRadarStGridCntFR6_mp, _x.Rdr_cntRadarStGridCntFR16_mp, _x.Rdr_cntRadarStGridCntFR18_mp, _x.Rdr_cntRadarStGridCntFR20_mp, _x.Rdr_cntRadarStGridCntFR22_mp, _x.Rdr_cntRadarStGridCntFR32_mp, _x.Rdr_cntRadarStGridCntFR34_mp, _x.Rdr_cntRadarStGridCntFR36_mp, _x.Rdr_cntRadarStGridCntFR38_mp, _x.Rdr_cntRadarStGridCntFR48_mp, _x.Rdr_cntRadarStGridCntFR50_mp, _x.Rdr_cntRadarStGridCntFR52_mp, _x.Rdr_cntRadarStGridCntFR54_mp, _x.Rdr_cntRadarStGridCntRL0_mp, _x.Rdr_cntRadarStGridCntRL2_mp, _x.Rdr_cntRadarStGridCntRL4_mp, _x.Rdr_cntRadarStGridCntRL6_mp, _x.Rdr_cntRadarStGridCntRL16_mp, _x.Rdr_cntRadarStGridCntRL18_mp, _x.Rdr_cntRadarStGridCntRL20_mp, _x.Rdr_cntRadarStGridCntRL22_mp, _x.Rdr_cntRadarStGridCntRL32_mp, _x.Rdr_cntRadarStGridCntRL34_mp, _x.Rdr_cntRadarStGridCntRL36_mp, _x.Rdr_cntRadarStGridCntRL38_mp, _x.Rdr_cntRadarStGridCntRL48_mp, _x.Rdr_cntRadarStGridCntRL50_mp, _x.Rdr_cntRadarStGridCntRL52_mp, _x.Rdr_cntRadarStGridCntRL54_mp, _x.Rdr_cntRadarStGridCntRR0_mp, _x.Rdr_cntRadarStGridCntRR2_mp, _x.Rdr_cntRadarStGridCntRR4_mp, _x.Rdr_cntRadarStGridCntRR6_mp, _x.Rdr_cntRadarStGridCntRR16_mp, _x.Rdr_cntRadarStGridCntRR18_mp, _x.Rdr_cntRadarStGridCntRR20_mp, _x.Rdr_cntRadarStGridCntRR22_mp, _x.Rdr_cntRadarStGridCntRR32_mp, _x.Rdr_cntRadarStGridCntRR34_mp, _x.Rdr_cntRadarStGridCntRR36_mp, _x.Rdr_cntRadarStGridCntRR38_mp, _x.Rdr_cntRadarStGridCntRR48_mp, _x.Rdr_cntRadarStGridCntRR50_mp, _x.Rdr_cntRadarStGridCntRR52_mp, _x.Rdr_cntRadarStGridCntRR54_mp, _x.Rdr_flgParamIsValid_mp, _x.Rdr_numObjMatchActiveF_mp, _x.Rdr_numObjMatchActiveR_mp, _x.Rdr_dstObjMatchThrdF_mp, _x.Rdr_dstObjMatchThrdR_mp, _x.Rdr_rObjMatchLossThrdF_mp, _x.Rdr_rObjMatchLossThrdR_mp, _x.Rdr_frameObjCntActive_mp, _x.Rdr_numObjCntThrdF_mp, _x.Rdr_numObjCntThrdR_mp, _x.Rdr_numGridCntThrdF_mp, _x.Rdr_numGridCntThrdR_mp, _x.Rdr_rObjCntRatioThrdR_mp, _x.Rdr_rObjCntRatioThrdF_mp, _x.OBF_stRearObjDet_mp, _x.OBF_dstRearObjDetX_mp, _x.OBF_dstRearObjDetY_mp, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 394
      (_x.OBF_errorCamCal_mp, _x.OBF_nDistr1CamCal_mp, _x.OBF_nDistr2CamCal_mp, _x.OBF_nDistr3CamCal_mp, _x.OBF_nDistr4CamCal_mp, _x.Rdr_cntVldFrameCntInVyStats_mp, _x.Rdr_cntObjCnt0CntInVyStats_mp, _x.Rdr_cntObjCnt1CntInVyStats_mp, _x.Rdr_cntObjCnt2CntInVyStats_mp, _x.Rdr_cntObjCnt3CntInVyStats_mp, _x.Rdr_vAvgVy0InVyStats_mp, _x.Rdr_vAvgVy1InVyStats_mp, _x.Rdr_vAvgVy2InVyStats_mp, _x.Rdr_vAvgVy3InVyStats_mp, _x.Rdr_dstAvgFront_mp, _x.Rdr_dstAvgRear_mp, _x.Rdr_cntRadarStGridFrameCnt_mp, _x.Rdr_cntRadarStGridCntFL0_mp, _x.Rdr_cntRadarStGridCntFL2_mp, _x.Rdr_cntRadarStGridCntFL4_mp, _x.Rdr_cntRadarStGridCntFL6_mp, _x.Rdr_cntRadarStGridCntFL16_mp, _x.Rdr_cntRadarStGridCntFL18_mp, _x.Rdr_cntRadarStGridCntFL20_mp, _x.Rdr_cntRadarStGridCntFL22_mp, _x.Rdr_cntRadarStGridCntFL32_mp, _x.Rdr_cntRadarStGridCntFL34_mp, _x.Rdr_cntRadarStGridCntFL36_mp, _x.Rdr_cntRadarStGridCntFL38_mp, _x.Rdr_cntRadarStGridCntFL48_mp, _x.Rdr_cntRadarStGridCntFL50_mp, _x.Rdr_cntRadarStGridCntFL52_mp, _x.Rdr_cntRadarStGridCntFL54_mp, _x.Rdr_cntRadarStGridCntFR0_mp, _x.Rdr_cntRadarStGridCntFR2_mp, _x.Rdr_cntRadarStGridCntFR4_mp, _x.Rdr_cntRadarStGridCntFR6_mp, _x.Rdr_cntRadarStGridCntFR16_mp, _x.Rdr_cntRadarStGridCntFR18_mp, _x.Rdr_cntRadarStGridCntFR20_mp, _x.Rdr_cntRadarStGridCntFR22_mp, _x.Rdr_cntRadarStGridCntFR32_mp, _x.Rdr_cntRadarStGridCntFR34_mp, _x.Rdr_cntRadarStGridCntFR36_mp, _x.Rdr_cntRadarStGridCntFR38_mp, _x.Rdr_cntRadarStGridCntFR48_mp, _x.Rdr_cntRadarStGridCntFR50_mp, _x.Rdr_cntRadarStGridCntFR52_mp, _x.Rdr_cntRadarStGridCntFR54_mp, _x.Rdr_cntRadarStGridCntRL0_mp, _x.Rdr_cntRadarStGridCntRL2_mp, _x.Rdr_cntRadarStGridCntRL4_mp, _x.Rdr_cntRadarStGridCntRL6_mp, _x.Rdr_cntRadarStGridCntRL16_mp, _x.Rdr_cntRadarStGridCntRL18_mp, _x.Rdr_cntRadarStGridCntRL20_mp, _x.Rdr_cntRadarStGridCntRL22_mp, _x.Rdr_cntRadarStGridCntRL32_mp, _x.Rdr_cntRadarStGridCntRL34_mp, _x.Rdr_cntRadarStGridCntRL36_mp, _x.Rdr_cntRadarStGridCntRL38_mp, _x.Rdr_cntRadarStGridCntRL48_mp, _x.Rdr_cntRadarStGridCntRL50_mp, _x.Rdr_cntRadarStGridCntRL52_mp, _x.Rdr_cntRadarStGridCntRL54_mp, _x.Rdr_cntRadarStGridCntRR0_mp, _x.Rdr_cntRadarStGridCntRR2_mp, _x.Rdr_cntRadarStGridCntRR4_mp, _x.Rdr_cntRadarStGridCntRR6_mp, _x.Rdr_cntRadarStGridCntRR16_mp, _x.Rdr_cntRadarStGridCntRR18_mp, _x.Rdr_cntRadarStGridCntRR20_mp, _x.Rdr_cntRadarStGridCntRR22_mp, _x.Rdr_cntRadarStGridCntRR32_mp, _x.Rdr_cntRadarStGridCntRR34_mp, _x.Rdr_cntRadarStGridCntRR36_mp, _x.Rdr_cntRadarStGridCntRR38_mp, _x.Rdr_cntRadarStGridCntRR48_mp, _x.Rdr_cntRadarStGridCntRR50_mp, _x.Rdr_cntRadarStGridCntRR52_mp, _x.Rdr_cntRadarStGridCntRR54_mp, _x.Rdr_flgParamIsValid_mp, _x.Rdr_numObjMatchActiveF_mp, _x.Rdr_numObjMatchActiveR_mp, _x.Rdr_dstObjMatchThrdF_mp, _x.Rdr_dstObjMatchThrdR_mp, _x.Rdr_rObjMatchLossThrdF_mp, _x.Rdr_rObjMatchLossThrdR_mp, _x.Rdr_frameObjCntActive_mp, _x.Rdr_numObjCntThrdF_mp, _x.Rdr_numObjCntThrdR_mp, _x.Rdr_numGridCntThrdF_mp, _x.Rdr_numGridCntThrdR_mp, _x.Rdr_rObjCntRatioThrdR_mp, _x.Rdr_rObjCntRatioThrdF_mp, _x.OBF_stRearObjDet_mp, _x.OBF_dstRearObjDetX_mp, _x.OBF_dstRearObjDetY_mp, _x.publish_ptp_ts,) = _get_struct_f4I5i6f65iB2i4fi2f2i2fB2fQ().unpack(str[start:end])
      self.Rdr_flgParamIsValid_mp = bool(self.Rdr_flgParamIsValid_mp)
      self.OBF_stRearObjDet_mp = bool(self.OBF_stRearObjDet_mp)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_f4I5i6f65iB2i4fi2f2i2fB2fQ = None
def _get_struct_f4I5i6f65iB2i4fi2f2i2fB2fQ():
    global _struct_f4I5i6f65iB2i4fi2f2i2fB2fQ
    if _struct_f4I5i6f65iB2i4fi2f2i2fB2fQ is None:
        _struct_f4I5i6f65iB2i4fi2f2i2fB2fQ = struct.Struct("<f4I5i6f65iB2i4fi2f2i2fB2fQ")
    return _struct_f4I5i6f65iB2i4fi2f2i2fB2fQ

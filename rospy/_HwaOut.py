# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HwaOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HwaOut(genpy.Message):
  _md5sum = "1273db6df35cf7994062dd143a511d82"
  _type = "rospy_message_converter/HwaOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 AccNpSts
int32 LongCtrlActv
int32 LatCtrlActv
int32 HodWarnReq
int32 HzrdLiReq
int32 DoorUnlckReq
int32 HodTakeOver
int32 NaNadSts
uint32 NaNadWTI
bool FreespaceIntrsn
bool ADC_VehDisp_Warn
bool DA_TurnIndctrLeTip
bool DA_TurnIndctrRiTip
bool DA_TurnIndctrLeLatch
bool DA_TurnIndctrRiLatch
bool DA_TurnIndctrLePush
bool DA_TurnIndctrRiPush
int32 DA_NOP_Avl
bool NeedNOPCtrl
uint32 DA_NOP_WTIs
uint32 DA_iACC_WTIs
uint32 DA_Pilot_WTIs
bool DA_SysFailSymbol
"""
  __slots__ = ['AccNpSts','LongCtrlActv','LatCtrlActv','HodWarnReq','HzrdLiReq','DoorUnlckReq','HodTakeOver','NaNadSts','NaNadWTI','FreespaceIntrsn','ADC_VehDisp_Warn','DA_TurnIndctrLeTip','DA_TurnIndctrRiTip','DA_TurnIndctrLeLatch','DA_TurnIndctrRiLatch','DA_TurnIndctrLePush','DA_TurnIndctrRiPush','DA_NOP_Avl','NeedNOPCtrl','DA_NOP_WTIs','DA_iACC_WTIs','DA_Pilot_WTIs','DA_SysFailSymbol']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','uint32','bool','bool','bool','bool','bool','bool','bool','bool','int32','bool','uint32','uint32','uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AccNpSts,LongCtrlActv,LatCtrlActv,HodWarnReq,HzrdLiReq,DoorUnlckReq,HodTakeOver,NaNadSts,NaNadWTI,FreespaceIntrsn,ADC_VehDisp_Warn,DA_TurnIndctrLeTip,DA_TurnIndctrRiTip,DA_TurnIndctrLeLatch,DA_TurnIndctrRiLatch,DA_TurnIndctrLePush,DA_TurnIndctrRiPush,DA_NOP_Avl,NeedNOPCtrl,DA_NOP_WTIs,DA_iACC_WTIs,DA_Pilot_WTIs,DA_SysFailSymbol

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HwaOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AccNpSts is None:
        self.AccNpSts = 0
      if self.LongCtrlActv is None:
        self.LongCtrlActv = 0
      if self.LatCtrlActv is None:
        self.LatCtrlActv = 0
      if self.HodWarnReq is None:
        self.HodWarnReq = 0
      if self.HzrdLiReq is None:
        self.HzrdLiReq = 0
      if self.DoorUnlckReq is None:
        self.DoorUnlckReq = 0
      if self.HodTakeOver is None:
        self.HodTakeOver = 0
      if self.NaNadSts is None:
        self.NaNadSts = 0
      if self.NaNadWTI is None:
        self.NaNadWTI = 0
      if self.FreespaceIntrsn is None:
        self.FreespaceIntrsn = False
      if self.ADC_VehDisp_Warn is None:
        self.ADC_VehDisp_Warn = False
      if self.DA_TurnIndctrLeTip is None:
        self.DA_TurnIndctrLeTip = False
      if self.DA_TurnIndctrRiTip is None:
        self.DA_TurnIndctrRiTip = False
      if self.DA_TurnIndctrLeLatch is None:
        self.DA_TurnIndctrLeLatch = False
      if self.DA_TurnIndctrRiLatch is None:
        self.DA_TurnIndctrRiLatch = False
      if self.DA_TurnIndctrLePush is None:
        self.DA_TurnIndctrLePush = False
      if self.DA_TurnIndctrRiPush is None:
        self.DA_TurnIndctrRiPush = False
      if self.DA_NOP_Avl is None:
        self.DA_NOP_Avl = 0
      if self.NeedNOPCtrl is None:
        self.NeedNOPCtrl = False
      if self.DA_NOP_WTIs is None:
        self.DA_NOP_WTIs = 0
      if self.DA_iACC_WTIs is None:
        self.DA_iACC_WTIs = 0
      if self.DA_Pilot_WTIs is None:
        self.DA_Pilot_WTIs = 0
      if self.DA_SysFailSymbol is None:
        self.DA_SysFailSymbol = False
    else:
      self.AccNpSts = 0
      self.LongCtrlActv = 0
      self.LatCtrlActv = 0
      self.HodWarnReq = 0
      self.HzrdLiReq = 0
      self.DoorUnlckReq = 0
      self.HodTakeOver = 0
      self.NaNadSts = 0
      self.NaNadWTI = 0
      self.FreespaceIntrsn = False
      self.ADC_VehDisp_Warn = False
      self.DA_TurnIndctrLeTip = False
      self.DA_TurnIndctrRiTip = False
      self.DA_TurnIndctrLeLatch = False
      self.DA_TurnIndctrRiLatch = False
      self.DA_TurnIndctrLePush = False
      self.DA_TurnIndctrRiPush = False
      self.DA_NOP_Avl = 0
      self.NeedNOPCtrl = False
      self.DA_NOP_WTIs = 0
      self.DA_iACC_WTIs = 0
      self.DA_Pilot_WTIs = 0
      self.DA_SysFailSymbol = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8iI8BiB3IB().pack(_x.AccNpSts, _x.LongCtrlActv, _x.LatCtrlActv, _x.HodWarnReq, _x.HzrdLiReq, _x.DoorUnlckReq, _x.HodTakeOver, _x.NaNadSts, _x.NaNadWTI, _x.FreespaceIntrsn, _x.ADC_VehDisp_Warn, _x.DA_TurnIndctrLeTip, _x.DA_TurnIndctrRiTip, _x.DA_TurnIndctrLeLatch, _x.DA_TurnIndctrRiLatch, _x.DA_TurnIndctrLePush, _x.DA_TurnIndctrRiPush, _x.DA_NOP_Avl, _x.NeedNOPCtrl, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 62
      (_x.AccNpSts, _x.LongCtrlActv, _x.LatCtrlActv, _x.HodWarnReq, _x.HzrdLiReq, _x.DoorUnlckReq, _x.HodTakeOver, _x.NaNadSts, _x.NaNadWTI, _x.FreespaceIntrsn, _x.ADC_VehDisp_Warn, _x.DA_TurnIndctrLeTip, _x.DA_TurnIndctrRiTip, _x.DA_TurnIndctrLeLatch, _x.DA_TurnIndctrRiLatch, _x.DA_TurnIndctrLePush, _x.DA_TurnIndctrRiPush, _x.DA_NOP_Avl, _x.NeedNOPCtrl, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol,) = _get_struct_8iI8BiB3IB().unpack(str[start:end])
      self.FreespaceIntrsn = bool(self.FreespaceIntrsn)
      self.ADC_VehDisp_Warn = bool(self.ADC_VehDisp_Warn)
      self.DA_TurnIndctrLeTip = bool(self.DA_TurnIndctrLeTip)
      self.DA_TurnIndctrRiTip = bool(self.DA_TurnIndctrRiTip)
      self.DA_TurnIndctrLeLatch = bool(self.DA_TurnIndctrLeLatch)
      self.DA_TurnIndctrRiLatch = bool(self.DA_TurnIndctrRiLatch)
      self.DA_TurnIndctrLePush = bool(self.DA_TurnIndctrLePush)
      self.DA_TurnIndctrRiPush = bool(self.DA_TurnIndctrRiPush)
      self.NeedNOPCtrl = bool(self.NeedNOPCtrl)
      self.DA_SysFailSymbol = bool(self.DA_SysFailSymbol)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8iI8BiB3IB().pack(_x.AccNpSts, _x.LongCtrlActv, _x.LatCtrlActv, _x.HodWarnReq, _x.HzrdLiReq, _x.DoorUnlckReq, _x.HodTakeOver, _x.NaNadSts, _x.NaNadWTI, _x.FreespaceIntrsn, _x.ADC_VehDisp_Warn, _x.DA_TurnIndctrLeTip, _x.DA_TurnIndctrRiTip, _x.DA_TurnIndctrLeLatch, _x.DA_TurnIndctrRiLatch, _x.DA_TurnIndctrLePush, _x.DA_TurnIndctrRiPush, _x.DA_NOP_Avl, _x.NeedNOPCtrl, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 62
      (_x.AccNpSts, _x.LongCtrlActv, _x.LatCtrlActv, _x.HodWarnReq, _x.HzrdLiReq, _x.DoorUnlckReq, _x.HodTakeOver, _x.NaNadSts, _x.NaNadWTI, _x.FreespaceIntrsn, _x.ADC_VehDisp_Warn, _x.DA_TurnIndctrLeTip, _x.DA_TurnIndctrRiTip, _x.DA_TurnIndctrLeLatch, _x.DA_TurnIndctrRiLatch, _x.DA_TurnIndctrLePush, _x.DA_TurnIndctrRiPush, _x.DA_NOP_Avl, _x.NeedNOPCtrl, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol,) = _get_struct_8iI8BiB3IB().unpack(str[start:end])
      self.FreespaceIntrsn = bool(self.FreespaceIntrsn)
      self.ADC_VehDisp_Warn = bool(self.ADC_VehDisp_Warn)
      self.DA_TurnIndctrLeTip = bool(self.DA_TurnIndctrLeTip)
      self.DA_TurnIndctrRiTip = bool(self.DA_TurnIndctrRiTip)
      self.DA_TurnIndctrLeLatch = bool(self.DA_TurnIndctrLeLatch)
      self.DA_TurnIndctrRiLatch = bool(self.DA_TurnIndctrRiLatch)
      self.DA_TurnIndctrLePush = bool(self.DA_TurnIndctrLePush)
      self.DA_TurnIndctrRiPush = bool(self.DA_TurnIndctrRiPush)
      self.NeedNOPCtrl = bool(self.NeedNOPCtrl)
      self.DA_SysFailSymbol = bool(self.DA_SysFailSymbol)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8iI8BiB3IB = None
def _get_struct_8iI8BiB3IB():
    global _struct_8iI8BiB3IB
    if _struct_8iI8BiB3IB is None:
        _struct_8iI8BiB3IB = struct.Struct("<8iI8BiB3IB")
    return _struct_8iI8BiB3IB

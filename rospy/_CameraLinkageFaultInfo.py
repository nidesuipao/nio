# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CameraLinkageFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class CameraLinkageFaultInfo(genpy.Message):
  _md5sum = "106dd48aa919d9678bf79985b6b231ee"
  _type = "rospy_message_converter/CameraLinkageFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """F120AdcFaultInfo f120_adc_fault_info
OMSAdcFaultInfo oms_adc_fault_info
DMSAdcFaultInfo dms_adc_fault_info
F30AdcFaultInfo f30_adc_fault_info
RearAdcFaultInfo rear_adc_fault_info
SideFLAdcFaultInfo sidefl_adc_fault_info
SideFRAdcFaultInfo sidefr_adc_fault_info
SideRLAdcFaultInfo siderl_adc_fault_info
SideRRAdcFaultInfo siderr_adc_fault_info
SVCFrontAdcFaultInfo svcfront_adc_fault_info
SVCLeftAdcFaultInfo svcleft_adc_fault_info
SVCRearAdcFaultInfo svcrear_adc_fault_info
SVCRightAdcFaultInfo svcright_adc_fault_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/F120AdcFaultInfo
bool F120_DES1_LinkNotLocked
bool F120_DES1_VideoNotLocked

================================================================================
MSG: rospy_message_converter/OMSAdcFaultInfo
bool OMS_DES2_LinkNotLocked
bool OMS_DES2_VideoNotLocked

================================================================================
MSG: rospy_message_converter/DMSAdcFaultInfo
bool DMS_DES3_LinkNotLocked
bool DMS_DES3_VideoNotLocked

================================================================================
MSG: rospy_message_converter/F30AdcFaultInfo
bool F30_DES3_LinkNotLocked
bool F30_DES3_VideoNotLocked

================================================================================
MSG: rospy_message_converter/RearAdcFaultInfo
bool Rear_DES3_LinkNotLocked
bool Rear_DES3_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SideFLAdcFaultInfo
bool SideFL_DES6_LinkNotLocked
bool SideFL_DES6_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SideFRAdcFaultInfo
bool SideFR_DES6_LinkNotLocked
bool SideFR_DES6_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SideRLAdcFaultInfo
bool SideRL_DES6_LinkNotLocked
bool SideRL_DES6_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SideRRAdcFaultInfo
bool SideRR_DES6_LinkNotLocked
bool SideRR_DES6_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SVCFrontAdcFaultInfo
bool SVCFront_DES4_LinkNotLocked
bool SVCFront_DES4_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SVCLeftAdcFaultInfo
bool SVCLeft_DES4_LinkNotLocked
bool SVCLeft_DES4_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SVCRearAdcFaultInfo
bool SVCRear_DES5_LinkNotLocked
bool SVCRear_DES5_VideoNotLocked

================================================================================
MSG: rospy_message_converter/SVCRightAdcFaultInfo
bool SVCRight_DES5_LinkNotLocked
bool SVCRight_DES5_VideoNotLocked
"""
  __slots__ = ['f120_adc_fault_info','oms_adc_fault_info','dms_adc_fault_info','f30_adc_fault_info','rear_adc_fault_info','sidefl_adc_fault_info','sidefr_adc_fault_info','siderl_adc_fault_info','siderr_adc_fault_info','svcfront_adc_fault_info','svcleft_adc_fault_info','svcrear_adc_fault_info','svcright_adc_fault_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/F120AdcFaultInfo','rospy_message_converter/OMSAdcFaultInfo','rospy_message_converter/DMSAdcFaultInfo','rospy_message_converter/F30AdcFaultInfo','rospy_message_converter/RearAdcFaultInfo','rospy_message_converter/SideFLAdcFaultInfo','rospy_message_converter/SideFRAdcFaultInfo','rospy_message_converter/SideRLAdcFaultInfo','rospy_message_converter/SideRRAdcFaultInfo','rospy_message_converter/SVCFrontAdcFaultInfo','rospy_message_converter/SVCLeftAdcFaultInfo','rospy_message_converter/SVCRearAdcFaultInfo','rospy_message_converter/SVCRightAdcFaultInfo','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       f120_adc_fault_info,oms_adc_fault_info,dms_adc_fault_info,f30_adc_fault_info,rear_adc_fault_info,sidefl_adc_fault_info,sidefr_adc_fault_info,siderl_adc_fault_info,siderr_adc_fault_info,svcfront_adc_fault_info,svcleft_adc_fault_info,svcrear_adc_fault_info,svcright_adc_fault_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraLinkageFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.f120_adc_fault_info is None:
        self.f120_adc_fault_info = rospy_message_converter.msg.F120AdcFaultInfo()
      if self.oms_adc_fault_info is None:
        self.oms_adc_fault_info = rospy_message_converter.msg.OMSAdcFaultInfo()
      if self.dms_adc_fault_info is None:
        self.dms_adc_fault_info = rospy_message_converter.msg.DMSAdcFaultInfo()
      if self.f30_adc_fault_info is None:
        self.f30_adc_fault_info = rospy_message_converter.msg.F30AdcFaultInfo()
      if self.rear_adc_fault_info is None:
        self.rear_adc_fault_info = rospy_message_converter.msg.RearAdcFaultInfo()
      if self.sidefl_adc_fault_info is None:
        self.sidefl_adc_fault_info = rospy_message_converter.msg.SideFLAdcFaultInfo()
      if self.sidefr_adc_fault_info is None:
        self.sidefr_adc_fault_info = rospy_message_converter.msg.SideFRAdcFaultInfo()
      if self.siderl_adc_fault_info is None:
        self.siderl_adc_fault_info = rospy_message_converter.msg.SideRLAdcFaultInfo()
      if self.siderr_adc_fault_info is None:
        self.siderr_adc_fault_info = rospy_message_converter.msg.SideRRAdcFaultInfo()
      if self.svcfront_adc_fault_info is None:
        self.svcfront_adc_fault_info = rospy_message_converter.msg.SVCFrontAdcFaultInfo()
      if self.svcleft_adc_fault_info is None:
        self.svcleft_adc_fault_info = rospy_message_converter.msg.SVCLeftAdcFaultInfo()
      if self.svcrear_adc_fault_info is None:
        self.svcrear_adc_fault_info = rospy_message_converter.msg.SVCRearAdcFaultInfo()
      if self.svcright_adc_fault_info is None:
        self.svcright_adc_fault_info = rospy_message_converter.msg.SVCRightAdcFaultInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.f120_adc_fault_info = rospy_message_converter.msg.F120AdcFaultInfo()
      self.oms_adc_fault_info = rospy_message_converter.msg.OMSAdcFaultInfo()
      self.dms_adc_fault_info = rospy_message_converter.msg.DMSAdcFaultInfo()
      self.f30_adc_fault_info = rospy_message_converter.msg.F30AdcFaultInfo()
      self.rear_adc_fault_info = rospy_message_converter.msg.RearAdcFaultInfo()
      self.sidefl_adc_fault_info = rospy_message_converter.msg.SideFLAdcFaultInfo()
      self.sidefr_adc_fault_info = rospy_message_converter.msg.SideFRAdcFaultInfo()
      self.siderl_adc_fault_info = rospy_message_converter.msg.SideRLAdcFaultInfo()
      self.siderr_adc_fault_info = rospy_message_converter.msg.SideRRAdcFaultInfo()
      self.svcfront_adc_fault_info = rospy_message_converter.msg.SVCFrontAdcFaultInfo()
      self.svcleft_adc_fault_info = rospy_message_converter.msg.SVCLeftAdcFaultInfo()
      self.svcrear_adc_fault_info = rospy_message_converter.msg.SVCRearAdcFaultInfo()
      self.svcright_adc_fault_info = rospy_message_converter.msg.SVCRightAdcFaultInfo()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_26BQ().pack(_x.f120_adc_fault_info.F120_DES1_LinkNotLocked, _x.f120_adc_fault_info.F120_DES1_VideoNotLocked, _x.oms_adc_fault_info.OMS_DES2_LinkNotLocked, _x.oms_adc_fault_info.OMS_DES2_VideoNotLocked, _x.dms_adc_fault_info.DMS_DES3_LinkNotLocked, _x.dms_adc_fault_info.DMS_DES3_VideoNotLocked, _x.f30_adc_fault_info.F30_DES3_LinkNotLocked, _x.f30_adc_fault_info.F30_DES3_VideoNotLocked, _x.rear_adc_fault_info.Rear_DES3_LinkNotLocked, _x.rear_adc_fault_info.Rear_DES3_VideoNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.f120_adc_fault_info is None:
        self.f120_adc_fault_info = rospy_message_converter.msg.F120AdcFaultInfo()
      if self.oms_adc_fault_info is None:
        self.oms_adc_fault_info = rospy_message_converter.msg.OMSAdcFaultInfo()
      if self.dms_adc_fault_info is None:
        self.dms_adc_fault_info = rospy_message_converter.msg.DMSAdcFaultInfo()
      if self.f30_adc_fault_info is None:
        self.f30_adc_fault_info = rospy_message_converter.msg.F30AdcFaultInfo()
      if self.rear_adc_fault_info is None:
        self.rear_adc_fault_info = rospy_message_converter.msg.RearAdcFaultInfo()
      if self.sidefl_adc_fault_info is None:
        self.sidefl_adc_fault_info = rospy_message_converter.msg.SideFLAdcFaultInfo()
      if self.sidefr_adc_fault_info is None:
        self.sidefr_adc_fault_info = rospy_message_converter.msg.SideFRAdcFaultInfo()
      if self.siderl_adc_fault_info is None:
        self.siderl_adc_fault_info = rospy_message_converter.msg.SideRLAdcFaultInfo()
      if self.siderr_adc_fault_info is None:
        self.siderr_adc_fault_info = rospy_message_converter.msg.SideRRAdcFaultInfo()
      if self.svcfront_adc_fault_info is None:
        self.svcfront_adc_fault_info = rospy_message_converter.msg.SVCFrontAdcFaultInfo()
      if self.svcleft_adc_fault_info is None:
        self.svcleft_adc_fault_info = rospy_message_converter.msg.SVCLeftAdcFaultInfo()
      if self.svcrear_adc_fault_info is None:
        self.svcrear_adc_fault_info = rospy_message_converter.msg.SVCRearAdcFaultInfo()
      if self.svcright_adc_fault_info is None:
        self.svcright_adc_fault_info = rospy_message_converter.msg.SVCRightAdcFaultInfo()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.f120_adc_fault_info.F120_DES1_LinkNotLocked, _x.f120_adc_fault_info.F120_DES1_VideoNotLocked, _x.oms_adc_fault_info.OMS_DES2_LinkNotLocked, _x.oms_adc_fault_info.OMS_DES2_VideoNotLocked, _x.dms_adc_fault_info.DMS_DES3_LinkNotLocked, _x.dms_adc_fault_info.DMS_DES3_VideoNotLocked, _x.f30_adc_fault_info.F30_DES3_LinkNotLocked, _x.f30_adc_fault_info.F30_DES3_VideoNotLocked, _x.rear_adc_fault_info.Rear_DES3_LinkNotLocked, _x.rear_adc_fault_info.Rear_DES3_VideoNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked, _x.publish_ptp_ts,) = _get_struct_26BQ().unpack(str[start:end])
      self.f120_adc_fault_info.F120_DES1_LinkNotLocked = bool(self.f120_adc_fault_info.F120_DES1_LinkNotLocked)
      self.f120_adc_fault_info.F120_DES1_VideoNotLocked = bool(self.f120_adc_fault_info.F120_DES1_VideoNotLocked)
      self.oms_adc_fault_info.OMS_DES2_LinkNotLocked = bool(self.oms_adc_fault_info.OMS_DES2_LinkNotLocked)
      self.oms_adc_fault_info.OMS_DES2_VideoNotLocked = bool(self.oms_adc_fault_info.OMS_DES2_VideoNotLocked)
      self.dms_adc_fault_info.DMS_DES3_LinkNotLocked = bool(self.dms_adc_fault_info.DMS_DES3_LinkNotLocked)
      self.dms_adc_fault_info.DMS_DES3_VideoNotLocked = bool(self.dms_adc_fault_info.DMS_DES3_VideoNotLocked)
      self.f30_adc_fault_info.F30_DES3_LinkNotLocked = bool(self.f30_adc_fault_info.F30_DES3_LinkNotLocked)
      self.f30_adc_fault_info.F30_DES3_VideoNotLocked = bool(self.f30_adc_fault_info.F30_DES3_VideoNotLocked)
      self.rear_adc_fault_info.Rear_DES3_LinkNotLocked = bool(self.rear_adc_fault_info.Rear_DES3_LinkNotLocked)
      self.rear_adc_fault_info.Rear_DES3_VideoNotLocked = bool(self.rear_adc_fault_info.Rear_DES3_VideoNotLocked)
      self.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked = bool(self.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked)
      self.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked = bool(self.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked)
      self.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked = bool(self.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked)
      self.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked = bool(self.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked)
      self.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked = bool(self.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked)
      self.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked = bool(self.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked)
      self.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked = bool(self.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked)
      self.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked = bool(self.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked)
      self.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked = bool(self.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked)
      self.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked = bool(self.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked)
      self.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked = bool(self.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked)
      self.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked = bool(self.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked)
      self.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked = bool(self.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked)
      self.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked = bool(self.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked)
      self.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked = bool(self.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked)
      self.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked = bool(self.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_26BQ().pack(_x.f120_adc_fault_info.F120_DES1_LinkNotLocked, _x.f120_adc_fault_info.F120_DES1_VideoNotLocked, _x.oms_adc_fault_info.OMS_DES2_LinkNotLocked, _x.oms_adc_fault_info.OMS_DES2_VideoNotLocked, _x.dms_adc_fault_info.DMS_DES3_LinkNotLocked, _x.dms_adc_fault_info.DMS_DES3_VideoNotLocked, _x.f30_adc_fault_info.F30_DES3_LinkNotLocked, _x.f30_adc_fault_info.F30_DES3_VideoNotLocked, _x.rear_adc_fault_info.Rear_DES3_LinkNotLocked, _x.rear_adc_fault_info.Rear_DES3_VideoNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.f120_adc_fault_info is None:
        self.f120_adc_fault_info = rospy_message_converter.msg.F120AdcFaultInfo()
      if self.oms_adc_fault_info is None:
        self.oms_adc_fault_info = rospy_message_converter.msg.OMSAdcFaultInfo()
      if self.dms_adc_fault_info is None:
        self.dms_adc_fault_info = rospy_message_converter.msg.DMSAdcFaultInfo()
      if self.f30_adc_fault_info is None:
        self.f30_adc_fault_info = rospy_message_converter.msg.F30AdcFaultInfo()
      if self.rear_adc_fault_info is None:
        self.rear_adc_fault_info = rospy_message_converter.msg.RearAdcFaultInfo()
      if self.sidefl_adc_fault_info is None:
        self.sidefl_adc_fault_info = rospy_message_converter.msg.SideFLAdcFaultInfo()
      if self.sidefr_adc_fault_info is None:
        self.sidefr_adc_fault_info = rospy_message_converter.msg.SideFRAdcFaultInfo()
      if self.siderl_adc_fault_info is None:
        self.siderl_adc_fault_info = rospy_message_converter.msg.SideRLAdcFaultInfo()
      if self.siderr_adc_fault_info is None:
        self.siderr_adc_fault_info = rospy_message_converter.msg.SideRRAdcFaultInfo()
      if self.svcfront_adc_fault_info is None:
        self.svcfront_adc_fault_info = rospy_message_converter.msg.SVCFrontAdcFaultInfo()
      if self.svcleft_adc_fault_info is None:
        self.svcleft_adc_fault_info = rospy_message_converter.msg.SVCLeftAdcFaultInfo()
      if self.svcrear_adc_fault_info is None:
        self.svcrear_adc_fault_info = rospy_message_converter.msg.SVCRearAdcFaultInfo()
      if self.svcright_adc_fault_info is None:
        self.svcright_adc_fault_info = rospy_message_converter.msg.SVCRightAdcFaultInfo()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.f120_adc_fault_info.F120_DES1_LinkNotLocked, _x.f120_adc_fault_info.F120_DES1_VideoNotLocked, _x.oms_adc_fault_info.OMS_DES2_LinkNotLocked, _x.oms_adc_fault_info.OMS_DES2_VideoNotLocked, _x.dms_adc_fault_info.DMS_DES3_LinkNotLocked, _x.dms_adc_fault_info.DMS_DES3_VideoNotLocked, _x.f30_adc_fault_info.F30_DES3_LinkNotLocked, _x.f30_adc_fault_info.F30_DES3_VideoNotLocked, _x.rear_adc_fault_info.Rear_DES3_LinkNotLocked, _x.rear_adc_fault_info.Rear_DES3_VideoNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked, _x.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked, _x.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked, _x.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked, _x.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked, _x.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked, _x.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked, _x.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked, _x.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked, _x.publish_ptp_ts,) = _get_struct_26BQ().unpack(str[start:end])
      self.f120_adc_fault_info.F120_DES1_LinkNotLocked = bool(self.f120_adc_fault_info.F120_DES1_LinkNotLocked)
      self.f120_adc_fault_info.F120_DES1_VideoNotLocked = bool(self.f120_adc_fault_info.F120_DES1_VideoNotLocked)
      self.oms_adc_fault_info.OMS_DES2_LinkNotLocked = bool(self.oms_adc_fault_info.OMS_DES2_LinkNotLocked)
      self.oms_adc_fault_info.OMS_DES2_VideoNotLocked = bool(self.oms_adc_fault_info.OMS_DES2_VideoNotLocked)
      self.dms_adc_fault_info.DMS_DES3_LinkNotLocked = bool(self.dms_adc_fault_info.DMS_DES3_LinkNotLocked)
      self.dms_adc_fault_info.DMS_DES3_VideoNotLocked = bool(self.dms_adc_fault_info.DMS_DES3_VideoNotLocked)
      self.f30_adc_fault_info.F30_DES3_LinkNotLocked = bool(self.f30_adc_fault_info.F30_DES3_LinkNotLocked)
      self.f30_adc_fault_info.F30_DES3_VideoNotLocked = bool(self.f30_adc_fault_info.F30_DES3_VideoNotLocked)
      self.rear_adc_fault_info.Rear_DES3_LinkNotLocked = bool(self.rear_adc_fault_info.Rear_DES3_LinkNotLocked)
      self.rear_adc_fault_info.Rear_DES3_VideoNotLocked = bool(self.rear_adc_fault_info.Rear_DES3_VideoNotLocked)
      self.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked = bool(self.sidefl_adc_fault_info.SideFL_DES6_LinkNotLocked)
      self.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked = bool(self.sidefl_adc_fault_info.SideFL_DES6_VideoNotLocked)
      self.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked = bool(self.sidefr_adc_fault_info.SideFR_DES6_LinkNotLocked)
      self.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked = bool(self.sidefr_adc_fault_info.SideFR_DES6_VideoNotLocked)
      self.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked = bool(self.siderl_adc_fault_info.SideRL_DES6_LinkNotLocked)
      self.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked = bool(self.siderl_adc_fault_info.SideRL_DES6_VideoNotLocked)
      self.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked = bool(self.siderr_adc_fault_info.SideRR_DES6_LinkNotLocked)
      self.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked = bool(self.siderr_adc_fault_info.SideRR_DES6_VideoNotLocked)
      self.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked = bool(self.svcfront_adc_fault_info.SVCFront_DES4_LinkNotLocked)
      self.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked = bool(self.svcfront_adc_fault_info.SVCFront_DES4_VideoNotLocked)
      self.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked = bool(self.svcleft_adc_fault_info.SVCLeft_DES4_LinkNotLocked)
      self.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked = bool(self.svcleft_adc_fault_info.SVCLeft_DES4_VideoNotLocked)
      self.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked = bool(self.svcrear_adc_fault_info.SVCRear_DES5_LinkNotLocked)
      self.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked = bool(self.svcrear_adc_fault_info.SVCRear_DES5_VideoNotLocked)
      self.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked = bool(self.svcright_adc_fault_info.SVCRight_DES5_LinkNotLocked)
      self.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked = bool(self.svcright_adc_fault_info.SVCRight_DES5_VideoNotLocked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26BQ = None
def _get_struct_26BQ():
    global _struct_26BQ
    if _struct_26BQ is None:
        _struct_26BQ = struct.Struct("<26BQ")
    return _struct_26BQ
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

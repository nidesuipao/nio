# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/IMUFrame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class IMUFrame(genpy.Message):
  _md5sum = "2dc38870e8c6723d3c914cb04b683ae9"
  _type = "rospy_message_converter/IMUFrame"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """IMUValidFlags valid_flags
int64 timestamp_us
float64[] orientation
Quaterniond orientationQuaternion
float64[] turnrate
float64[] acceleration
float64[] magnetometer
float64 heading
int32 headingType
uint64 timestamp_ptp_ns
float64 temperature
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/IMUValidFlags
bool imu_heading
bool imu_roll
bool imu_pitch
bool imu_yaw
bool imu_quaternion_x
bool imu_quaternion_y
bool imu_quaternion_z
bool imu_quaternion_w
bool imu_roll_rate
bool imu_pitch_rate
bool imu_yaw_rate
bool imu_acceleration_x
bool imu_acceleration_y
bool imu_acceleration_z
bool imu_magnetometer_x
bool imu_magnetometer_y
bool imu_magnetometer_z

================================================================================
MSG: rospy_message_converter/Quaterniond
float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['valid_flags','timestamp_us','orientation','orientationQuaternion','turnrate','acceleration','magnetometer','heading','headingType','timestamp_ptp_ns','temperature','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/IMUValidFlags','int64','float64[]','rospy_message_converter/Quaterniond','float64[]','float64[]','float64[]','float64','int32','uint64','float64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid_flags,timestamp_us,orientation,orientationQuaternion,turnrate,acceleration,magnetometer,heading,headingType,timestamp_ptp_ns,temperature,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUFrame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid_flags is None:
        self.valid_flags = rospy_message_converter.msg.IMUValidFlags()
      if self.timestamp_us is None:
        self.timestamp_us = 0
      if self.orientation is None:
        self.orientation = []
      if self.orientationQuaternion is None:
        self.orientationQuaternion = rospy_message_converter.msg.Quaterniond()
      if self.turnrate is None:
        self.turnrate = []
      if self.acceleration is None:
        self.acceleration = []
      if self.magnetometer is None:
        self.magnetometer = []
      if self.heading is None:
        self.heading = 0.
      if self.headingType is None:
        self.headingType = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
      if self.temperature is None:
        self.temperature = 0.
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.valid_flags = rospy_message_converter.msg.IMUValidFlags()
      self.timestamp_us = 0
      self.orientation = []
      self.orientationQuaternion = rospy_message_converter.msg.Quaterniond()
      self.turnrate = []
      self.acceleration = []
      self.magnetometer = []
      self.heading = 0.
      self.headingType = 0
      self.timestamp_ptp_ns = 0
      self.temperature = 0.
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17Bq().pack(_x.valid_flags.imu_heading, _x.valid_flags.imu_roll, _x.valid_flags.imu_pitch, _x.valid_flags.imu_yaw, _x.valid_flags.imu_quaternion_x, _x.valid_flags.imu_quaternion_y, _x.valid_flags.imu_quaternion_z, _x.valid_flags.imu_quaternion_w, _x.valid_flags.imu_roll_rate, _x.valid_flags.imu_pitch_rate, _x.valid_flags.imu_yaw_rate, _x.valid_flags.imu_acceleration_x, _x.valid_flags.imu_acceleration_y, _x.valid_flags.imu_acceleration_z, _x.valid_flags.imu_magnetometer_x, _x.valid_flags.imu_magnetometer_y, _x.valid_flags.imu_magnetometer_z, _x.timestamp_us))
      length = len(self.orientation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.orientation))
      _x = self
      buff.write(_get_struct_4d().pack(_x.orientationQuaternion.x, _x.orientationQuaternion.y, _x.orientationQuaternion.z, _x.orientationQuaternion.w))
      length = len(self.turnrate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.turnrate))
      length = len(self.acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.acceleration))
      length = len(self.magnetometer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.magnetometer))
      _x = self
      buff.write(_get_struct_diQdQ().pack(_x.heading, _x.headingType, _x.timestamp_ptp_ns, _x.temperature, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.valid_flags is None:
        self.valid_flags = rospy_message_converter.msg.IMUValidFlags()
      if self.orientationQuaternion is None:
        self.orientationQuaternion = rospy_message_converter.msg.Quaterniond()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.valid_flags.imu_heading, _x.valid_flags.imu_roll, _x.valid_flags.imu_pitch, _x.valid_flags.imu_yaw, _x.valid_flags.imu_quaternion_x, _x.valid_flags.imu_quaternion_y, _x.valid_flags.imu_quaternion_z, _x.valid_flags.imu_quaternion_w, _x.valid_flags.imu_roll_rate, _x.valid_flags.imu_pitch_rate, _x.valid_flags.imu_yaw_rate, _x.valid_flags.imu_acceleration_x, _x.valid_flags.imu_acceleration_y, _x.valid_flags.imu_acceleration_z, _x.valid_flags.imu_magnetometer_x, _x.valid_flags.imu_magnetometer_y, _x.valid_flags.imu_magnetometer_z, _x.timestamp_us,) = _get_struct_17Bq().unpack(str[start:end])
      self.valid_flags.imu_heading = bool(self.valid_flags.imu_heading)
      self.valid_flags.imu_roll = bool(self.valid_flags.imu_roll)
      self.valid_flags.imu_pitch = bool(self.valid_flags.imu_pitch)
      self.valid_flags.imu_yaw = bool(self.valid_flags.imu_yaw)
      self.valid_flags.imu_quaternion_x = bool(self.valid_flags.imu_quaternion_x)
      self.valid_flags.imu_quaternion_y = bool(self.valid_flags.imu_quaternion_y)
      self.valid_flags.imu_quaternion_z = bool(self.valid_flags.imu_quaternion_z)
      self.valid_flags.imu_quaternion_w = bool(self.valid_flags.imu_quaternion_w)
      self.valid_flags.imu_roll_rate = bool(self.valid_flags.imu_roll_rate)
      self.valid_flags.imu_pitch_rate = bool(self.valid_flags.imu_pitch_rate)
      self.valid_flags.imu_yaw_rate = bool(self.valid_flags.imu_yaw_rate)
      self.valid_flags.imu_acceleration_x = bool(self.valid_flags.imu_acceleration_x)
      self.valid_flags.imu_acceleration_y = bool(self.valid_flags.imu_acceleration_y)
      self.valid_flags.imu_acceleration_z = bool(self.valid_flags.imu_acceleration_z)
      self.valid_flags.imu_magnetometer_x = bool(self.valid_flags.imu_magnetometer_x)
      self.valid_flags.imu_magnetometer_y = bool(self.valid_flags.imu_magnetometer_y)
      self.valid_flags.imu_magnetometer_z = bool(self.valid_flags.imu_magnetometer_z)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.orientation = s.unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.orientationQuaternion.x, _x.orientationQuaternion.y, _x.orientationQuaternion.z, _x.orientationQuaternion.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.turnrate = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acceleration = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.magnetometer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 36
      (_x.heading, _x.headingType, _x.timestamp_ptp_ns, _x.temperature, _x.publish_ptp_ts,) = _get_struct_diQdQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17Bq().pack(_x.valid_flags.imu_heading, _x.valid_flags.imu_roll, _x.valid_flags.imu_pitch, _x.valid_flags.imu_yaw, _x.valid_flags.imu_quaternion_x, _x.valid_flags.imu_quaternion_y, _x.valid_flags.imu_quaternion_z, _x.valid_flags.imu_quaternion_w, _x.valid_flags.imu_roll_rate, _x.valid_flags.imu_pitch_rate, _x.valid_flags.imu_yaw_rate, _x.valid_flags.imu_acceleration_x, _x.valid_flags.imu_acceleration_y, _x.valid_flags.imu_acceleration_z, _x.valid_flags.imu_magnetometer_x, _x.valid_flags.imu_magnetometer_y, _x.valid_flags.imu_magnetometer_z, _x.timestamp_us))
      length = len(self.orientation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.orientation.tostring())
      _x = self
      buff.write(_get_struct_4d().pack(_x.orientationQuaternion.x, _x.orientationQuaternion.y, _x.orientationQuaternion.z, _x.orientationQuaternion.w))
      length = len(self.turnrate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.turnrate.tostring())
      length = len(self.acceleration)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.acceleration.tostring())
      length = len(self.magnetometer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.magnetometer.tostring())
      _x = self
      buff.write(_get_struct_diQdQ().pack(_x.heading, _x.headingType, _x.timestamp_ptp_ns, _x.temperature, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.valid_flags is None:
        self.valid_flags = rospy_message_converter.msg.IMUValidFlags()
      if self.orientationQuaternion is None:
        self.orientationQuaternion = rospy_message_converter.msg.Quaterniond()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.valid_flags.imu_heading, _x.valid_flags.imu_roll, _x.valid_flags.imu_pitch, _x.valid_flags.imu_yaw, _x.valid_flags.imu_quaternion_x, _x.valid_flags.imu_quaternion_y, _x.valid_flags.imu_quaternion_z, _x.valid_flags.imu_quaternion_w, _x.valid_flags.imu_roll_rate, _x.valid_flags.imu_pitch_rate, _x.valid_flags.imu_yaw_rate, _x.valid_flags.imu_acceleration_x, _x.valid_flags.imu_acceleration_y, _x.valid_flags.imu_acceleration_z, _x.valid_flags.imu_magnetometer_x, _x.valid_flags.imu_magnetometer_y, _x.valid_flags.imu_magnetometer_z, _x.timestamp_us,) = _get_struct_17Bq().unpack(str[start:end])
      self.valid_flags.imu_heading = bool(self.valid_flags.imu_heading)
      self.valid_flags.imu_roll = bool(self.valid_flags.imu_roll)
      self.valid_flags.imu_pitch = bool(self.valid_flags.imu_pitch)
      self.valid_flags.imu_yaw = bool(self.valid_flags.imu_yaw)
      self.valid_flags.imu_quaternion_x = bool(self.valid_flags.imu_quaternion_x)
      self.valid_flags.imu_quaternion_y = bool(self.valid_flags.imu_quaternion_y)
      self.valid_flags.imu_quaternion_z = bool(self.valid_flags.imu_quaternion_z)
      self.valid_flags.imu_quaternion_w = bool(self.valid_flags.imu_quaternion_w)
      self.valid_flags.imu_roll_rate = bool(self.valid_flags.imu_roll_rate)
      self.valid_flags.imu_pitch_rate = bool(self.valid_flags.imu_pitch_rate)
      self.valid_flags.imu_yaw_rate = bool(self.valid_flags.imu_yaw_rate)
      self.valid_flags.imu_acceleration_x = bool(self.valid_flags.imu_acceleration_x)
      self.valid_flags.imu_acceleration_y = bool(self.valid_flags.imu_acceleration_y)
      self.valid_flags.imu_acceleration_z = bool(self.valid_flags.imu_acceleration_z)
      self.valid_flags.imu_magnetometer_x = bool(self.valid_flags.imu_magnetometer_x)
      self.valid_flags.imu_magnetometer_y = bool(self.valid_flags.imu_magnetometer_y)
      self.valid_flags.imu_magnetometer_z = bool(self.valid_flags.imu_magnetometer_z)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.orientationQuaternion.x, _x.orientationQuaternion.y, _x.orientationQuaternion.z, _x.orientationQuaternion.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.turnrate = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acceleration = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.magnetometer = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 36
      (_x.heading, _x.headingType, _x.timestamp_ptp_ns, _x.temperature, _x.publish_ptp_ts,) = _get_struct_diQdQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17Bq = None
def _get_struct_17Bq():
    global _struct_17Bq
    if _struct_17Bq is None:
        _struct_17Bq = struct.Struct("<17Bq")
    return _struct_17Bq
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_diQdQ = None
def _get_struct_diQdQ():
    global _struct_diQdQ
    if _struct_diQdQ is None:
        _struct_diQdQ = struct.Struct("<diQdQ")
    return _struct_diQdQ

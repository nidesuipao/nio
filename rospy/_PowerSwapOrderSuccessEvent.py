# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PowerSwapOrderSuccessEvent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PowerSwapOrderSuccessEvent(genpy.Message):
  _md5sum = "845e42bf92a05008653e3008f527d602"
  _type = "rospy_message_converter/PowerSwapOrderSuccessEvent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string power_swap_station_uid
float64 lon
float64 lat
uint32 queue_number
float64 predict_waiting_time
"""
  __slots__ = ['power_swap_station_uid','lon','lat','queue_number','predict_waiting_time']
  _slot_types = ['string','float64','float64','uint32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       power_swap_station_uid,lon,lat,queue_number,predict_waiting_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerSwapOrderSuccessEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.power_swap_station_uid is None:
        self.power_swap_station_uid = ''
      if self.lon is None:
        self.lon = 0.
      if self.lat is None:
        self.lat = 0.
      if self.queue_number is None:
        self.queue_number = 0
      if self.predict_waiting_time is None:
        self.predict_waiting_time = 0.
    else:
      self.power_swap_station_uid = ''
      self.lon = 0.
      self.lat = 0.
      self.queue_number = 0
      self.predict_waiting_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.power_swap_station_uid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2dId().pack(_x.lon, _x.lat, _x.queue_number, _x.predict_waiting_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power_swap_station_uid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.power_swap_station_uid = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.lon, _x.lat, _x.queue_number, _x.predict_waiting_time,) = _get_struct_2dId().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.power_swap_station_uid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2dId().pack(_x.lon, _x.lat, _x.queue_number, _x.predict_waiting_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power_swap_station_uid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.power_swap_station_uid = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.lon, _x.lat, _x.queue_number, _x.predict_waiting_time,) = _get_struct_2dId().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dId = None
def _get_struct_2dId():
    global _struct_2dId
    if _struct_2dId is None:
        _struct_2dId = struct.Struct("<2dId")
    return _struct_2dId

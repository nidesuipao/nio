# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LidarInternalFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LidarInternalFaultInfo(genpy.Message):
  _md5sum = "30f10012f022a243ee7e83a21e075fae"
  _type = "rospy_message_converter/LidarInternalFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool INNO_LIDAR_IN_FAULT_POWER_LOW
bool INNO_LIDAR_IN_FAULT_POWER_HIGH
bool INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1
bool INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2
bool INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3
bool INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4
bool INNO_LIDAR_IN_FAULT_LASER_INTERLOCK
bool INNO_LIDAR_IN_FAULT_COMM_LASER
bool INNO_LIDAR_IN_FAULT_LASER
bool INNO_LIDAR_IN_FAULT_COMM_DSP
bool INNO_LIDAR_IN_FAULT_CANFD_DSP
bool INNO_LIDAR_IN_FAULT_DSP
bool INNO_LIDAR_IN_FAULT_POLYGON_CONTROL
bool INNO_LIDAR_IN_FAULT_POLYGON_SENSOR
bool INNO_LIDAR_IN_FAULT_GALVO_CONTROL
bool INNO_LIDAR_IN_FAULT_GALVO_SENSOR
bool INNO_LIDAR_IN_FAULT_OPTIC1
bool INNO_LIDAR_IN_FAULT_OPTIC2
bool INNO_LIDAR_IN_FAULT_IIC_DSP
bool INNO_LIDAR_IN_FAULT_IIC_SOC
bool INNO_LIDAR_IN_FAULT_DSP_EXTWD
bool INNO_LIDAR_IN_FAULT_DBTEMP
bool INNO_LIDAR_IN_FAULT_CHIPTEMP
bool INNO_LIDAR_IN_FAULT_HUMIDITY
bool INNO_LIDAR_IN_FAULT_COMM_ADC
bool INNO_LIDAR_IN_FAULT_FPGACLOCK
bool INNO_LIDAR_IN_FAULT_SOC
bool INNO_LIDAR_IN_FAULT_SOC_EXTWD
bool INNO_LIDAR_IN_FAULT_RAWDATA_STREAM
bool INNO_LIDAR_IN_FAULT_POLYGON_TO
bool INNO_LIDAR_IN_FAULT_GALVO_TO
bool INNO_LIDAR_IN_FAULT_TRIGGER_TO
bool INNO_LIDAR_IN_FAULT_POWSUPL1
bool INNO_LIDAR_IN_FAULT_POWSUPL2
bool INNO_LIDAR_IN_FAULT_LPDDR4
bool INNO_LIDAR_IN_FAULT_FLASH
bool INNO_LIDAR_IN_FAULT_NETWORK1
bool INNO_LIDAR_IN_FAULT_NETWORK2
bool INNO_LIDAR_IN_FAULT_OVERHEAT1
bool INNO_LIDAR_IN_FAULT_OVERHEAT2
bool INNO_LIDAR_IN_FAULT_OVERHEAT3
bool INNO_LIDAR_IN_FAULT_CONFIG1
bool INNO_LIDAR_IN_FAULT_CONFIG2
bool INNO_LIDAR_IN_FAULT_ASSERT_FAILURE
bool INNO_LIDAR_IN_FAULT_CPULOAD_HIGH
bool INNO_LIDAR_IN_FAULT_LATENCY_LONG
bool INNO_LIDAR_IN_FAULT_RESERVED07
bool INNO_LIDAR_IN_FAULT_RESERVED08
bool INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE
bool INNO_LIDAR_IN_FAULT_DATA_DROP1
bool INNO_LIDAR_IN_FAULT_DATA_DROP2
bool INNO_LIDAR_IN_FAULT_DATA_DROP3
bool INNO_LIDAR_TEMPHIGH_INHIBIT
bool INNO_LIDAR_IN_FAULT_RESERVED10
bool INNO_LIDAR_IN_FAULT_REFINTENSITY
bool INNO_LIDAR_IN_FAULT_REPROGRAMMING
bool INNO_LIDAR_IN_FAULT_GALVO_MIRROR
bool INNO_LIDAR_IN_FAULT_MAX_DISTANCE
bool INNO_LIDAR_IN_FAULT_RESERVED14
bool INNO_LIDAR_IN_FAULT_RESERVED15
bool INNO_LIDAR_IN_FAULT_RESERVED16
bool INNO_LIDAR_IN_FAULT_RESERVED17
bool INNO_LIDAR_IN_FAULT_RESERVED18
bool INNO_LIDAR_IN_FAULT_MAX
bool INNO_LIDAR_IN_FAULT_OTHER
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['INNO_LIDAR_IN_FAULT_POWER_LOW','INNO_LIDAR_IN_FAULT_POWER_HIGH','INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1','INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2','INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3','INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4','INNO_LIDAR_IN_FAULT_LASER_INTERLOCK','INNO_LIDAR_IN_FAULT_COMM_LASER','INNO_LIDAR_IN_FAULT_LASER','INNO_LIDAR_IN_FAULT_COMM_DSP','INNO_LIDAR_IN_FAULT_CANFD_DSP','INNO_LIDAR_IN_FAULT_DSP','INNO_LIDAR_IN_FAULT_POLYGON_CONTROL','INNO_LIDAR_IN_FAULT_POLYGON_SENSOR','INNO_LIDAR_IN_FAULT_GALVO_CONTROL','INNO_LIDAR_IN_FAULT_GALVO_SENSOR','INNO_LIDAR_IN_FAULT_OPTIC1','INNO_LIDAR_IN_FAULT_OPTIC2','INNO_LIDAR_IN_FAULT_IIC_DSP','INNO_LIDAR_IN_FAULT_IIC_SOC','INNO_LIDAR_IN_FAULT_DSP_EXTWD','INNO_LIDAR_IN_FAULT_DBTEMP','INNO_LIDAR_IN_FAULT_CHIPTEMP','INNO_LIDAR_IN_FAULT_HUMIDITY','INNO_LIDAR_IN_FAULT_COMM_ADC','INNO_LIDAR_IN_FAULT_FPGACLOCK','INNO_LIDAR_IN_FAULT_SOC','INNO_LIDAR_IN_FAULT_SOC_EXTWD','INNO_LIDAR_IN_FAULT_RAWDATA_STREAM','INNO_LIDAR_IN_FAULT_POLYGON_TO','INNO_LIDAR_IN_FAULT_GALVO_TO','INNO_LIDAR_IN_FAULT_TRIGGER_TO','INNO_LIDAR_IN_FAULT_POWSUPL1','INNO_LIDAR_IN_FAULT_POWSUPL2','INNO_LIDAR_IN_FAULT_LPDDR4','INNO_LIDAR_IN_FAULT_FLASH','INNO_LIDAR_IN_FAULT_NETWORK1','INNO_LIDAR_IN_FAULT_NETWORK2','INNO_LIDAR_IN_FAULT_OVERHEAT1','INNO_LIDAR_IN_FAULT_OVERHEAT2','INNO_LIDAR_IN_FAULT_OVERHEAT3','INNO_LIDAR_IN_FAULT_CONFIG1','INNO_LIDAR_IN_FAULT_CONFIG2','INNO_LIDAR_IN_FAULT_ASSERT_FAILURE','INNO_LIDAR_IN_FAULT_CPULOAD_HIGH','INNO_LIDAR_IN_FAULT_LATENCY_LONG','INNO_LIDAR_IN_FAULT_RESERVED07','INNO_LIDAR_IN_FAULT_RESERVED08','INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE','INNO_LIDAR_IN_FAULT_DATA_DROP1','INNO_LIDAR_IN_FAULT_DATA_DROP2','INNO_LIDAR_IN_FAULT_DATA_DROP3','INNO_LIDAR_TEMPHIGH_INHIBIT','INNO_LIDAR_IN_FAULT_RESERVED10','INNO_LIDAR_IN_FAULT_REFINTENSITY','INNO_LIDAR_IN_FAULT_REPROGRAMMING','INNO_LIDAR_IN_FAULT_GALVO_MIRROR','INNO_LIDAR_IN_FAULT_MAX_DISTANCE','INNO_LIDAR_IN_FAULT_RESERVED14','INNO_LIDAR_IN_FAULT_RESERVED15','INNO_LIDAR_IN_FAULT_RESERVED16','INNO_LIDAR_IN_FAULT_RESERVED17','INNO_LIDAR_IN_FAULT_RESERVED18','INNO_LIDAR_IN_FAULT_MAX','INNO_LIDAR_IN_FAULT_OTHER','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       INNO_LIDAR_IN_FAULT_POWER_LOW,INNO_LIDAR_IN_FAULT_POWER_HIGH,INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1,INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2,INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3,INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4,INNO_LIDAR_IN_FAULT_LASER_INTERLOCK,INNO_LIDAR_IN_FAULT_COMM_LASER,INNO_LIDAR_IN_FAULT_LASER,INNO_LIDAR_IN_FAULT_COMM_DSP,INNO_LIDAR_IN_FAULT_CANFD_DSP,INNO_LIDAR_IN_FAULT_DSP,INNO_LIDAR_IN_FAULT_POLYGON_CONTROL,INNO_LIDAR_IN_FAULT_POLYGON_SENSOR,INNO_LIDAR_IN_FAULT_GALVO_CONTROL,INNO_LIDAR_IN_FAULT_GALVO_SENSOR,INNO_LIDAR_IN_FAULT_OPTIC1,INNO_LIDAR_IN_FAULT_OPTIC2,INNO_LIDAR_IN_FAULT_IIC_DSP,INNO_LIDAR_IN_FAULT_IIC_SOC,INNO_LIDAR_IN_FAULT_DSP_EXTWD,INNO_LIDAR_IN_FAULT_DBTEMP,INNO_LIDAR_IN_FAULT_CHIPTEMP,INNO_LIDAR_IN_FAULT_HUMIDITY,INNO_LIDAR_IN_FAULT_COMM_ADC,INNO_LIDAR_IN_FAULT_FPGACLOCK,INNO_LIDAR_IN_FAULT_SOC,INNO_LIDAR_IN_FAULT_SOC_EXTWD,INNO_LIDAR_IN_FAULT_RAWDATA_STREAM,INNO_LIDAR_IN_FAULT_POLYGON_TO,INNO_LIDAR_IN_FAULT_GALVO_TO,INNO_LIDAR_IN_FAULT_TRIGGER_TO,INNO_LIDAR_IN_FAULT_POWSUPL1,INNO_LIDAR_IN_FAULT_POWSUPL2,INNO_LIDAR_IN_FAULT_LPDDR4,INNO_LIDAR_IN_FAULT_FLASH,INNO_LIDAR_IN_FAULT_NETWORK1,INNO_LIDAR_IN_FAULT_NETWORK2,INNO_LIDAR_IN_FAULT_OVERHEAT1,INNO_LIDAR_IN_FAULT_OVERHEAT2,INNO_LIDAR_IN_FAULT_OVERHEAT3,INNO_LIDAR_IN_FAULT_CONFIG1,INNO_LIDAR_IN_FAULT_CONFIG2,INNO_LIDAR_IN_FAULT_ASSERT_FAILURE,INNO_LIDAR_IN_FAULT_CPULOAD_HIGH,INNO_LIDAR_IN_FAULT_LATENCY_LONG,INNO_LIDAR_IN_FAULT_RESERVED07,INNO_LIDAR_IN_FAULT_RESERVED08,INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE,INNO_LIDAR_IN_FAULT_DATA_DROP1,INNO_LIDAR_IN_FAULT_DATA_DROP2,INNO_LIDAR_IN_FAULT_DATA_DROP3,INNO_LIDAR_TEMPHIGH_INHIBIT,INNO_LIDAR_IN_FAULT_RESERVED10,INNO_LIDAR_IN_FAULT_REFINTENSITY,INNO_LIDAR_IN_FAULT_REPROGRAMMING,INNO_LIDAR_IN_FAULT_GALVO_MIRROR,INNO_LIDAR_IN_FAULT_MAX_DISTANCE,INNO_LIDAR_IN_FAULT_RESERVED14,INNO_LIDAR_IN_FAULT_RESERVED15,INNO_LIDAR_IN_FAULT_RESERVED16,INNO_LIDAR_IN_FAULT_RESERVED17,INNO_LIDAR_IN_FAULT_RESERVED18,INNO_LIDAR_IN_FAULT_MAX,INNO_LIDAR_IN_FAULT_OTHER,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LidarInternalFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.INNO_LIDAR_IN_FAULT_POWER_LOW is None:
        self.INNO_LIDAR_IN_FAULT_POWER_LOW = False
      if self.INNO_LIDAR_IN_FAULT_POWER_HIGH is None:
        self.INNO_LIDAR_IN_FAULT_POWER_HIGH = False
      if self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1 is None:
        self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1 = False
      if self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2 is None:
        self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2 = False
      if self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3 is None:
        self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3 = False
      if self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4 is None:
        self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4 = False
      if self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK is None:
        self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK = False
      if self.INNO_LIDAR_IN_FAULT_COMM_LASER is None:
        self.INNO_LIDAR_IN_FAULT_COMM_LASER = False
      if self.INNO_LIDAR_IN_FAULT_LASER is None:
        self.INNO_LIDAR_IN_FAULT_LASER = False
      if self.INNO_LIDAR_IN_FAULT_COMM_DSP is None:
        self.INNO_LIDAR_IN_FAULT_COMM_DSP = False
      if self.INNO_LIDAR_IN_FAULT_CANFD_DSP is None:
        self.INNO_LIDAR_IN_FAULT_CANFD_DSP = False
      if self.INNO_LIDAR_IN_FAULT_DSP is None:
        self.INNO_LIDAR_IN_FAULT_DSP = False
      if self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL is None:
        self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL = False
      if self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR is None:
        self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR = False
      if self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL is None:
        self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL = False
      if self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR is None:
        self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR = False
      if self.INNO_LIDAR_IN_FAULT_OPTIC1 is None:
        self.INNO_LIDAR_IN_FAULT_OPTIC1 = False
      if self.INNO_LIDAR_IN_FAULT_OPTIC2 is None:
        self.INNO_LIDAR_IN_FAULT_OPTIC2 = False
      if self.INNO_LIDAR_IN_FAULT_IIC_DSP is None:
        self.INNO_LIDAR_IN_FAULT_IIC_DSP = False
      if self.INNO_LIDAR_IN_FAULT_IIC_SOC is None:
        self.INNO_LIDAR_IN_FAULT_IIC_SOC = False
      if self.INNO_LIDAR_IN_FAULT_DSP_EXTWD is None:
        self.INNO_LIDAR_IN_FAULT_DSP_EXTWD = False
      if self.INNO_LIDAR_IN_FAULT_DBTEMP is None:
        self.INNO_LIDAR_IN_FAULT_DBTEMP = False
      if self.INNO_LIDAR_IN_FAULT_CHIPTEMP is None:
        self.INNO_LIDAR_IN_FAULT_CHIPTEMP = False
      if self.INNO_LIDAR_IN_FAULT_HUMIDITY is None:
        self.INNO_LIDAR_IN_FAULT_HUMIDITY = False
      if self.INNO_LIDAR_IN_FAULT_COMM_ADC is None:
        self.INNO_LIDAR_IN_FAULT_COMM_ADC = False
      if self.INNO_LIDAR_IN_FAULT_FPGACLOCK is None:
        self.INNO_LIDAR_IN_FAULT_FPGACLOCK = False
      if self.INNO_LIDAR_IN_FAULT_SOC is None:
        self.INNO_LIDAR_IN_FAULT_SOC = False
      if self.INNO_LIDAR_IN_FAULT_SOC_EXTWD is None:
        self.INNO_LIDAR_IN_FAULT_SOC_EXTWD = False
      if self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM is None:
        self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM = False
      if self.INNO_LIDAR_IN_FAULT_POLYGON_TO is None:
        self.INNO_LIDAR_IN_FAULT_POLYGON_TO = False
      if self.INNO_LIDAR_IN_FAULT_GALVO_TO is None:
        self.INNO_LIDAR_IN_FAULT_GALVO_TO = False
      if self.INNO_LIDAR_IN_FAULT_TRIGGER_TO is None:
        self.INNO_LIDAR_IN_FAULT_TRIGGER_TO = False
      if self.INNO_LIDAR_IN_FAULT_POWSUPL1 is None:
        self.INNO_LIDAR_IN_FAULT_POWSUPL1 = False
      if self.INNO_LIDAR_IN_FAULT_POWSUPL2 is None:
        self.INNO_LIDAR_IN_FAULT_POWSUPL2 = False
      if self.INNO_LIDAR_IN_FAULT_LPDDR4 is None:
        self.INNO_LIDAR_IN_FAULT_LPDDR4 = False
      if self.INNO_LIDAR_IN_FAULT_FLASH is None:
        self.INNO_LIDAR_IN_FAULT_FLASH = False
      if self.INNO_LIDAR_IN_FAULT_NETWORK1 is None:
        self.INNO_LIDAR_IN_FAULT_NETWORK1 = False
      if self.INNO_LIDAR_IN_FAULT_NETWORK2 is None:
        self.INNO_LIDAR_IN_FAULT_NETWORK2 = False
      if self.INNO_LIDAR_IN_FAULT_OVERHEAT1 is None:
        self.INNO_LIDAR_IN_FAULT_OVERHEAT1 = False
      if self.INNO_LIDAR_IN_FAULT_OVERHEAT2 is None:
        self.INNO_LIDAR_IN_FAULT_OVERHEAT2 = False
      if self.INNO_LIDAR_IN_FAULT_OVERHEAT3 is None:
        self.INNO_LIDAR_IN_FAULT_OVERHEAT3 = False
      if self.INNO_LIDAR_IN_FAULT_CONFIG1 is None:
        self.INNO_LIDAR_IN_FAULT_CONFIG1 = False
      if self.INNO_LIDAR_IN_FAULT_CONFIG2 is None:
        self.INNO_LIDAR_IN_FAULT_CONFIG2 = False
      if self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE is None:
        self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE = False
      if self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH is None:
        self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH = False
      if self.INNO_LIDAR_IN_FAULT_LATENCY_LONG is None:
        self.INNO_LIDAR_IN_FAULT_LATENCY_LONG = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED07 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED07 = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED08 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED08 = False
      if self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE is None:
        self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE = False
      if self.INNO_LIDAR_IN_FAULT_DATA_DROP1 is None:
        self.INNO_LIDAR_IN_FAULT_DATA_DROP1 = False
      if self.INNO_LIDAR_IN_FAULT_DATA_DROP2 is None:
        self.INNO_LIDAR_IN_FAULT_DATA_DROP2 = False
      if self.INNO_LIDAR_IN_FAULT_DATA_DROP3 is None:
        self.INNO_LIDAR_IN_FAULT_DATA_DROP3 = False
      if self.INNO_LIDAR_TEMPHIGH_INHIBIT is None:
        self.INNO_LIDAR_TEMPHIGH_INHIBIT = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED10 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED10 = False
      if self.INNO_LIDAR_IN_FAULT_REFINTENSITY is None:
        self.INNO_LIDAR_IN_FAULT_REFINTENSITY = False
      if self.INNO_LIDAR_IN_FAULT_REPROGRAMMING is None:
        self.INNO_LIDAR_IN_FAULT_REPROGRAMMING = False
      if self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR is None:
        self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR = False
      if self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE is None:
        self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED14 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED14 = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED15 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED15 = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED16 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED16 = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED17 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED17 = False
      if self.INNO_LIDAR_IN_FAULT_RESERVED18 is None:
        self.INNO_LIDAR_IN_FAULT_RESERVED18 = False
      if self.INNO_LIDAR_IN_FAULT_MAX is None:
        self.INNO_LIDAR_IN_FAULT_MAX = False
      if self.INNO_LIDAR_IN_FAULT_OTHER is None:
        self.INNO_LIDAR_IN_FAULT_OTHER = False
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.INNO_LIDAR_IN_FAULT_POWER_LOW = False
      self.INNO_LIDAR_IN_FAULT_POWER_HIGH = False
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1 = False
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2 = False
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3 = False
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4 = False
      self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK = False
      self.INNO_LIDAR_IN_FAULT_COMM_LASER = False
      self.INNO_LIDAR_IN_FAULT_LASER = False
      self.INNO_LIDAR_IN_FAULT_COMM_DSP = False
      self.INNO_LIDAR_IN_FAULT_CANFD_DSP = False
      self.INNO_LIDAR_IN_FAULT_DSP = False
      self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL = False
      self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR = False
      self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL = False
      self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR = False
      self.INNO_LIDAR_IN_FAULT_OPTIC1 = False
      self.INNO_LIDAR_IN_FAULT_OPTIC2 = False
      self.INNO_LIDAR_IN_FAULT_IIC_DSP = False
      self.INNO_LIDAR_IN_FAULT_IIC_SOC = False
      self.INNO_LIDAR_IN_FAULT_DSP_EXTWD = False
      self.INNO_LIDAR_IN_FAULT_DBTEMP = False
      self.INNO_LIDAR_IN_FAULT_CHIPTEMP = False
      self.INNO_LIDAR_IN_FAULT_HUMIDITY = False
      self.INNO_LIDAR_IN_FAULT_COMM_ADC = False
      self.INNO_LIDAR_IN_FAULT_FPGACLOCK = False
      self.INNO_LIDAR_IN_FAULT_SOC = False
      self.INNO_LIDAR_IN_FAULT_SOC_EXTWD = False
      self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM = False
      self.INNO_LIDAR_IN_FAULT_POLYGON_TO = False
      self.INNO_LIDAR_IN_FAULT_GALVO_TO = False
      self.INNO_LIDAR_IN_FAULT_TRIGGER_TO = False
      self.INNO_LIDAR_IN_FAULT_POWSUPL1 = False
      self.INNO_LIDAR_IN_FAULT_POWSUPL2 = False
      self.INNO_LIDAR_IN_FAULT_LPDDR4 = False
      self.INNO_LIDAR_IN_FAULT_FLASH = False
      self.INNO_LIDAR_IN_FAULT_NETWORK1 = False
      self.INNO_LIDAR_IN_FAULT_NETWORK2 = False
      self.INNO_LIDAR_IN_FAULT_OVERHEAT1 = False
      self.INNO_LIDAR_IN_FAULT_OVERHEAT2 = False
      self.INNO_LIDAR_IN_FAULT_OVERHEAT3 = False
      self.INNO_LIDAR_IN_FAULT_CONFIG1 = False
      self.INNO_LIDAR_IN_FAULT_CONFIG2 = False
      self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE = False
      self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH = False
      self.INNO_LIDAR_IN_FAULT_LATENCY_LONG = False
      self.INNO_LIDAR_IN_FAULT_RESERVED07 = False
      self.INNO_LIDAR_IN_FAULT_RESERVED08 = False
      self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE = False
      self.INNO_LIDAR_IN_FAULT_DATA_DROP1 = False
      self.INNO_LIDAR_IN_FAULT_DATA_DROP2 = False
      self.INNO_LIDAR_IN_FAULT_DATA_DROP3 = False
      self.INNO_LIDAR_TEMPHIGH_INHIBIT = False
      self.INNO_LIDAR_IN_FAULT_RESERVED10 = False
      self.INNO_LIDAR_IN_FAULT_REFINTENSITY = False
      self.INNO_LIDAR_IN_FAULT_REPROGRAMMING = False
      self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR = False
      self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE = False
      self.INNO_LIDAR_IN_FAULT_RESERVED14 = False
      self.INNO_LIDAR_IN_FAULT_RESERVED15 = False
      self.INNO_LIDAR_IN_FAULT_RESERVED16 = False
      self.INNO_LIDAR_IN_FAULT_RESERVED17 = False
      self.INNO_LIDAR_IN_FAULT_RESERVED18 = False
      self.INNO_LIDAR_IN_FAULT_MAX = False
      self.INNO_LIDAR_IN_FAULT_OTHER = False
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_65BQ().pack(_x.INNO_LIDAR_IN_FAULT_POWER_LOW, _x.INNO_LIDAR_IN_FAULT_POWER_HIGH, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4, _x.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK, _x.INNO_LIDAR_IN_FAULT_COMM_LASER, _x.INNO_LIDAR_IN_FAULT_LASER, _x.INNO_LIDAR_IN_FAULT_COMM_DSP, _x.INNO_LIDAR_IN_FAULT_CANFD_DSP, _x.INNO_LIDAR_IN_FAULT_DSP, _x.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL, _x.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR, _x.INNO_LIDAR_IN_FAULT_GALVO_CONTROL, _x.INNO_LIDAR_IN_FAULT_GALVO_SENSOR, _x.INNO_LIDAR_IN_FAULT_OPTIC1, _x.INNO_LIDAR_IN_FAULT_OPTIC2, _x.INNO_LIDAR_IN_FAULT_IIC_DSP, _x.INNO_LIDAR_IN_FAULT_IIC_SOC, _x.INNO_LIDAR_IN_FAULT_DSP_EXTWD, _x.INNO_LIDAR_IN_FAULT_DBTEMP, _x.INNO_LIDAR_IN_FAULT_CHIPTEMP, _x.INNO_LIDAR_IN_FAULT_HUMIDITY, _x.INNO_LIDAR_IN_FAULT_COMM_ADC, _x.INNO_LIDAR_IN_FAULT_FPGACLOCK, _x.INNO_LIDAR_IN_FAULT_SOC, _x.INNO_LIDAR_IN_FAULT_SOC_EXTWD, _x.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM, _x.INNO_LIDAR_IN_FAULT_POLYGON_TO, _x.INNO_LIDAR_IN_FAULT_GALVO_TO, _x.INNO_LIDAR_IN_FAULT_TRIGGER_TO, _x.INNO_LIDAR_IN_FAULT_POWSUPL1, _x.INNO_LIDAR_IN_FAULT_POWSUPL2, _x.INNO_LIDAR_IN_FAULT_LPDDR4, _x.INNO_LIDAR_IN_FAULT_FLASH, _x.INNO_LIDAR_IN_FAULT_NETWORK1, _x.INNO_LIDAR_IN_FAULT_NETWORK2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT1, _x.INNO_LIDAR_IN_FAULT_OVERHEAT2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT3, _x.INNO_LIDAR_IN_FAULT_CONFIG1, _x.INNO_LIDAR_IN_FAULT_CONFIG2, _x.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE, _x.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH, _x.INNO_LIDAR_IN_FAULT_LATENCY_LONG, _x.INNO_LIDAR_IN_FAULT_RESERVED07, _x.INNO_LIDAR_IN_FAULT_RESERVED08, _x.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE, _x.INNO_LIDAR_IN_FAULT_DATA_DROP1, _x.INNO_LIDAR_IN_FAULT_DATA_DROP2, _x.INNO_LIDAR_IN_FAULT_DATA_DROP3, _x.INNO_LIDAR_TEMPHIGH_INHIBIT, _x.INNO_LIDAR_IN_FAULT_RESERVED10, _x.INNO_LIDAR_IN_FAULT_REFINTENSITY, _x.INNO_LIDAR_IN_FAULT_REPROGRAMMING, _x.INNO_LIDAR_IN_FAULT_GALVO_MIRROR, _x.INNO_LIDAR_IN_FAULT_MAX_DISTANCE, _x.INNO_LIDAR_IN_FAULT_RESERVED14, _x.INNO_LIDAR_IN_FAULT_RESERVED15, _x.INNO_LIDAR_IN_FAULT_RESERVED16, _x.INNO_LIDAR_IN_FAULT_RESERVED17, _x.INNO_LIDAR_IN_FAULT_RESERVED18, _x.INNO_LIDAR_IN_FAULT_MAX, _x.INNO_LIDAR_IN_FAULT_OTHER, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.INNO_LIDAR_IN_FAULT_POWER_LOW, _x.INNO_LIDAR_IN_FAULT_POWER_HIGH, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4, _x.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK, _x.INNO_LIDAR_IN_FAULT_COMM_LASER, _x.INNO_LIDAR_IN_FAULT_LASER, _x.INNO_LIDAR_IN_FAULT_COMM_DSP, _x.INNO_LIDAR_IN_FAULT_CANFD_DSP, _x.INNO_LIDAR_IN_FAULT_DSP, _x.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL, _x.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR, _x.INNO_LIDAR_IN_FAULT_GALVO_CONTROL, _x.INNO_LIDAR_IN_FAULT_GALVO_SENSOR, _x.INNO_LIDAR_IN_FAULT_OPTIC1, _x.INNO_LIDAR_IN_FAULT_OPTIC2, _x.INNO_LIDAR_IN_FAULT_IIC_DSP, _x.INNO_LIDAR_IN_FAULT_IIC_SOC, _x.INNO_LIDAR_IN_FAULT_DSP_EXTWD, _x.INNO_LIDAR_IN_FAULT_DBTEMP, _x.INNO_LIDAR_IN_FAULT_CHIPTEMP, _x.INNO_LIDAR_IN_FAULT_HUMIDITY, _x.INNO_LIDAR_IN_FAULT_COMM_ADC, _x.INNO_LIDAR_IN_FAULT_FPGACLOCK, _x.INNO_LIDAR_IN_FAULT_SOC, _x.INNO_LIDAR_IN_FAULT_SOC_EXTWD, _x.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM, _x.INNO_LIDAR_IN_FAULT_POLYGON_TO, _x.INNO_LIDAR_IN_FAULT_GALVO_TO, _x.INNO_LIDAR_IN_FAULT_TRIGGER_TO, _x.INNO_LIDAR_IN_FAULT_POWSUPL1, _x.INNO_LIDAR_IN_FAULT_POWSUPL2, _x.INNO_LIDAR_IN_FAULT_LPDDR4, _x.INNO_LIDAR_IN_FAULT_FLASH, _x.INNO_LIDAR_IN_FAULT_NETWORK1, _x.INNO_LIDAR_IN_FAULT_NETWORK2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT1, _x.INNO_LIDAR_IN_FAULT_OVERHEAT2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT3, _x.INNO_LIDAR_IN_FAULT_CONFIG1, _x.INNO_LIDAR_IN_FAULT_CONFIG2, _x.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE, _x.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH, _x.INNO_LIDAR_IN_FAULT_LATENCY_LONG, _x.INNO_LIDAR_IN_FAULT_RESERVED07, _x.INNO_LIDAR_IN_FAULT_RESERVED08, _x.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE, _x.INNO_LIDAR_IN_FAULT_DATA_DROP1, _x.INNO_LIDAR_IN_FAULT_DATA_DROP2, _x.INNO_LIDAR_IN_FAULT_DATA_DROP3, _x.INNO_LIDAR_TEMPHIGH_INHIBIT, _x.INNO_LIDAR_IN_FAULT_RESERVED10, _x.INNO_LIDAR_IN_FAULT_REFINTENSITY, _x.INNO_LIDAR_IN_FAULT_REPROGRAMMING, _x.INNO_LIDAR_IN_FAULT_GALVO_MIRROR, _x.INNO_LIDAR_IN_FAULT_MAX_DISTANCE, _x.INNO_LIDAR_IN_FAULT_RESERVED14, _x.INNO_LIDAR_IN_FAULT_RESERVED15, _x.INNO_LIDAR_IN_FAULT_RESERVED16, _x.INNO_LIDAR_IN_FAULT_RESERVED17, _x.INNO_LIDAR_IN_FAULT_RESERVED18, _x.INNO_LIDAR_IN_FAULT_MAX, _x.INNO_LIDAR_IN_FAULT_OTHER, _x.publish_ptp_ts,) = _get_struct_65BQ().unpack(str[start:end])
      self.INNO_LIDAR_IN_FAULT_POWER_LOW = bool(self.INNO_LIDAR_IN_FAULT_POWER_LOW)
      self.INNO_LIDAR_IN_FAULT_POWER_HIGH = bool(self.INNO_LIDAR_IN_FAULT_POWER_HIGH)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4)
      self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK = bool(self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK)
      self.INNO_LIDAR_IN_FAULT_COMM_LASER = bool(self.INNO_LIDAR_IN_FAULT_COMM_LASER)
      self.INNO_LIDAR_IN_FAULT_LASER = bool(self.INNO_LIDAR_IN_FAULT_LASER)
      self.INNO_LIDAR_IN_FAULT_COMM_DSP = bool(self.INNO_LIDAR_IN_FAULT_COMM_DSP)
      self.INNO_LIDAR_IN_FAULT_CANFD_DSP = bool(self.INNO_LIDAR_IN_FAULT_CANFD_DSP)
      self.INNO_LIDAR_IN_FAULT_DSP = bool(self.INNO_LIDAR_IN_FAULT_DSP)
      self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL = bool(self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL)
      self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR = bool(self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR)
      self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL = bool(self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL)
      self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR = bool(self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR)
      self.INNO_LIDAR_IN_FAULT_OPTIC1 = bool(self.INNO_LIDAR_IN_FAULT_OPTIC1)
      self.INNO_LIDAR_IN_FAULT_OPTIC2 = bool(self.INNO_LIDAR_IN_FAULT_OPTIC2)
      self.INNO_LIDAR_IN_FAULT_IIC_DSP = bool(self.INNO_LIDAR_IN_FAULT_IIC_DSP)
      self.INNO_LIDAR_IN_FAULT_IIC_SOC = bool(self.INNO_LIDAR_IN_FAULT_IIC_SOC)
      self.INNO_LIDAR_IN_FAULT_DSP_EXTWD = bool(self.INNO_LIDAR_IN_FAULT_DSP_EXTWD)
      self.INNO_LIDAR_IN_FAULT_DBTEMP = bool(self.INNO_LIDAR_IN_FAULT_DBTEMP)
      self.INNO_LIDAR_IN_FAULT_CHIPTEMP = bool(self.INNO_LIDAR_IN_FAULT_CHIPTEMP)
      self.INNO_LIDAR_IN_FAULT_HUMIDITY = bool(self.INNO_LIDAR_IN_FAULT_HUMIDITY)
      self.INNO_LIDAR_IN_FAULT_COMM_ADC = bool(self.INNO_LIDAR_IN_FAULT_COMM_ADC)
      self.INNO_LIDAR_IN_FAULT_FPGACLOCK = bool(self.INNO_LIDAR_IN_FAULT_FPGACLOCK)
      self.INNO_LIDAR_IN_FAULT_SOC = bool(self.INNO_LIDAR_IN_FAULT_SOC)
      self.INNO_LIDAR_IN_FAULT_SOC_EXTWD = bool(self.INNO_LIDAR_IN_FAULT_SOC_EXTWD)
      self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM = bool(self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM)
      self.INNO_LIDAR_IN_FAULT_POLYGON_TO = bool(self.INNO_LIDAR_IN_FAULT_POLYGON_TO)
      self.INNO_LIDAR_IN_FAULT_GALVO_TO = bool(self.INNO_LIDAR_IN_FAULT_GALVO_TO)
      self.INNO_LIDAR_IN_FAULT_TRIGGER_TO = bool(self.INNO_LIDAR_IN_FAULT_TRIGGER_TO)
      self.INNO_LIDAR_IN_FAULT_POWSUPL1 = bool(self.INNO_LIDAR_IN_FAULT_POWSUPL1)
      self.INNO_LIDAR_IN_FAULT_POWSUPL2 = bool(self.INNO_LIDAR_IN_FAULT_POWSUPL2)
      self.INNO_LIDAR_IN_FAULT_LPDDR4 = bool(self.INNO_LIDAR_IN_FAULT_LPDDR4)
      self.INNO_LIDAR_IN_FAULT_FLASH = bool(self.INNO_LIDAR_IN_FAULT_FLASH)
      self.INNO_LIDAR_IN_FAULT_NETWORK1 = bool(self.INNO_LIDAR_IN_FAULT_NETWORK1)
      self.INNO_LIDAR_IN_FAULT_NETWORK2 = bool(self.INNO_LIDAR_IN_FAULT_NETWORK2)
      self.INNO_LIDAR_IN_FAULT_OVERHEAT1 = bool(self.INNO_LIDAR_IN_FAULT_OVERHEAT1)
      self.INNO_LIDAR_IN_FAULT_OVERHEAT2 = bool(self.INNO_LIDAR_IN_FAULT_OVERHEAT2)
      self.INNO_LIDAR_IN_FAULT_OVERHEAT3 = bool(self.INNO_LIDAR_IN_FAULT_OVERHEAT3)
      self.INNO_LIDAR_IN_FAULT_CONFIG1 = bool(self.INNO_LIDAR_IN_FAULT_CONFIG1)
      self.INNO_LIDAR_IN_FAULT_CONFIG2 = bool(self.INNO_LIDAR_IN_FAULT_CONFIG2)
      self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE = bool(self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE)
      self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH = bool(self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH)
      self.INNO_LIDAR_IN_FAULT_LATENCY_LONG = bool(self.INNO_LIDAR_IN_FAULT_LATENCY_LONG)
      self.INNO_LIDAR_IN_FAULT_RESERVED07 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED07)
      self.INNO_LIDAR_IN_FAULT_RESERVED08 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED08)
      self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE = bool(self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE)
      self.INNO_LIDAR_IN_FAULT_DATA_DROP1 = bool(self.INNO_LIDAR_IN_FAULT_DATA_DROP1)
      self.INNO_LIDAR_IN_FAULT_DATA_DROP2 = bool(self.INNO_LIDAR_IN_FAULT_DATA_DROP2)
      self.INNO_LIDAR_IN_FAULT_DATA_DROP3 = bool(self.INNO_LIDAR_IN_FAULT_DATA_DROP3)
      self.INNO_LIDAR_TEMPHIGH_INHIBIT = bool(self.INNO_LIDAR_TEMPHIGH_INHIBIT)
      self.INNO_LIDAR_IN_FAULT_RESERVED10 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED10)
      self.INNO_LIDAR_IN_FAULT_REFINTENSITY = bool(self.INNO_LIDAR_IN_FAULT_REFINTENSITY)
      self.INNO_LIDAR_IN_FAULT_REPROGRAMMING = bool(self.INNO_LIDAR_IN_FAULT_REPROGRAMMING)
      self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR = bool(self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR)
      self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE = bool(self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE)
      self.INNO_LIDAR_IN_FAULT_RESERVED14 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED14)
      self.INNO_LIDAR_IN_FAULT_RESERVED15 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED15)
      self.INNO_LIDAR_IN_FAULT_RESERVED16 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED16)
      self.INNO_LIDAR_IN_FAULT_RESERVED17 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED17)
      self.INNO_LIDAR_IN_FAULT_RESERVED18 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED18)
      self.INNO_LIDAR_IN_FAULT_MAX = bool(self.INNO_LIDAR_IN_FAULT_MAX)
      self.INNO_LIDAR_IN_FAULT_OTHER = bool(self.INNO_LIDAR_IN_FAULT_OTHER)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_65BQ().pack(_x.INNO_LIDAR_IN_FAULT_POWER_LOW, _x.INNO_LIDAR_IN_FAULT_POWER_HIGH, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4, _x.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK, _x.INNO_LIDAR_IN_FAULT_COMM_LASER, _x.INNO_LIDAR_IN_FAULT_LASER, _x.INNO_LIDAR_IN_FAULT_COMM_DSP, _x.INNO_LIDAR_IN_FAULT_CANFD_DSP, _x.INNO_LIDAR_IN_FAULT_DSP, _x.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL, _x.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR, _x.INNO_LIDAR_IN_FAULT_GALVO_CONTROL, _x.INNO_LIDAR_IN_FAULT_GALVO_SENSOR, _x.INNO_LIDAR_IN_FAULT_OPTIC1, _x.INNO_LIDAR_IN_FAULT_OPTIC2, _x.INNO_LIDAR_IN_FAULT_IIC_DSP, _x.INNO_LIDAR_IN_FAULT_IIC_SOC, _x.INNO_LIDAR_IN_FAULT_DSP_EXTWD, _x.INNO_LIDAR_IN_FAULT_DBTEMP, _x.INNO_LIDAR_IN_FAULT_CHIPTEMP, _x.INNO_LIDAR_IN_FAULT_HUMIDITY, _x.INNO_LIDAR_IN_FAULT_COMM_ADC, _x.INNO_LIDAR_IN_FAULT_FPGACLOCK, _x.INNO_LIDAR_IN_FAULT_SOC, _x.INNO_LIDAR_IN_FAULT_SOC_EXTWD, _x.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM, _x.INNO_LIDAR_IN_FAULT_POLYGON_TO, _x.INNO_LIDAR_IN_FAULT_GALVO_TO, _x.INNO_LIDAR_IN_FAULT_TRIGGER_TO, _x.INNO_LIDAR_IN_FAULT_POWSUPL1, _x.INNO_LIDAR_IN_FAULT_POWSUPL2, _x.INNO_LIDAR_IN_FAULT_LPDDR4, _x.INNO_LIDAR_IN_FAULT_FLASH, _x.INNO_LIDAR_IN_FAULT_NETWORK1, _x.INNO_LIDAR_IN_FAULT_NETWORK2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT1, _x.INNO_LIDAR_IN_FAULT_OVERHEAT2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT3, _x.INNO_LIDAR_IN_FAULT_CONFIG1, _x.INNO_LIDAR_IN_FAULT_CONFIG2, _x.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE, _x.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH, _x.INNO_LIDAR_IN_FAULT_LATENCY_LONG, _x.INNO_LIDAR_IN_FAULT_RESERVED07, _x.INNO_LIDAR_IN_FAULT_RESERVED08, _x.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE, _x.INNO_LIDAR_IN_FAULT_DATA_DROP1, _x.INNO_LIDAR_IN_FAULT_DATA_DROP2, _x.INNO_LIDAR_IN_FAULT_DATA_DROP3, _x.INNO_LIDAR_TEMPHIGH_INHIBIT, _x.INNO_LIDAR_IN_FAULT_RESERVED10, _x.INNO_LIDAR_IN_FAULT_REFINTENSITY, _x.INNO_LIDAR_IN_FAULT_REPROGRAMMING, _x.INNO_LIDAR_IN_FAULT_GALVO_MIRROR, _x.INNO_LIDAR_IN_FAULT_MAX_DISTANCE, _x.INNO_LIDAR_IN_FAULT_RESERVED14, _x.INNO_LIDAR_IN_FAULT_RESERVED15, _x.INNO_LIDAR_IN_FAULT_RESERVED16, _x.INNO_LIDAR_IN_FAULT_RESERVED17, _x.INNO_LIDAR_IN_FAULT_RESERVED18, _x.INNO_LIDAR_IN_FAULT_MAX, _x.INNO_LIDAR_IN_FAULT_OTHER, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.INNO_LIDAR_IN_FAULT_POWER_LOW, _x.INNO_LIDAR_IN_FAULT_POWER_HIGH, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3, _x.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4, _x.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK, _x.INNO_LIDAR_IN_FAULT_COMM_LASER, _x.INNO_LIDAR_IN_FAULT_LASER, _x.INNO_LIDAR_IN_FAULT_COMM_DSP, _x.INNO_LIDAR_IN_FAULT_CANFD_DSP, _x.INNO_LIDAR_IN_FAULT_DSP, _x.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL, _x.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR, _x.INNO_LIDAR_IN_FAULT_GALVO_CONTROL, _x.INNO_LIDAR_IN_FAULT_GALVO_SENSOR, _x.INNO_LIDAR_IN_FAULT_OPTIC1, _x.INNO_LIDAR_IN_FAULT_OPTIC2, _x.INNO_LIDAR_IN_FAULT_IIC_DSP, _x.INNO_LIDAR_IN_FAULT_IIC_SOC, _x.INNO_LIDAR_IN_FAULT_DSP_EXTWD, _x.INNO_LIDAR_IN_FAULT_DBTEMP, _x.INNO_LIDAR_IN_FAULT_CHIPTEMP, _x.INNO_LIDAR_IN_FAULT_HUMIDITY, _x.INNO_LIDAR_IN_FAULT_COMM_ADC, _x.INNO_LIDAR_IN_FAULT_FPGACLOCK, _x.INNO_LIDAR_IN_FAULT_SOC, _x.INNO_LIDAR_IN_FAULT_SOC_EXTWD, _x.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM, _x.INNO_LIDAR_IN_FAULT_POLYGON_TO, _x.INNO_LIDAR_IN_FAULT_GALVO_TO, _x.INNO_LIDAR_IN_FAULT_TRIGGER_TO, _x.INNO_LIDAR_IN_FAULT_POWSUPL1, _x.INNO_LIDAR_IN_FAULT_POWSUPL2, _x.INNO_LIDAR_IN_FAULT_LPDDR4, _x.INNO_LIDAR_IN_FAULT_FLASH, _x.INNO_LIDAR_IN_FAULT_NETWORK1, _x.INNO_LIDAR_IN_FAULT_NETWORK2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT1, _x.INNO_LIDAR_IN_FAULT_OVERHEAT2, _x.INNO_LIDAR_IN_FAULT_OVERHEAT3, _x.INNO_LIDAR_IN_FAULT_CONFIG1, _x.INNO_LIDAR_IN_FAULT_CONFIG2, _x.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE, _x.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH, _x.INNO_LIDAR_IN_FAULT_LATENCY_LONG, _x.INNO_LIDAR_IN_FAULT_RESERVED07, _x.INNO_LIDAR_IN_FAULT_RESERVED08, _x.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE, _x.INNO_LIDAR_IN_FAULT_DATA_DROP1, _x.INNO_LIDAR_IN_FAULT_DATA_DROP2, _x.INNO_LIDAR_IN_FAULT_DATA_DROP3, _x.INNO_LIDAR_TEMPHIGH_INHIBIT, _x.INNO_LIDAR_IN_FAULT_RESERVED10, _x.INNO_LIDAR_IN_FAULT_REFINTENSITY, _x.INNO_LIDAR_IN_FAULT_REPROGRAMMING, _x.INNO_LIDAR_IN_FAULT_GALVO_MIRROR, _x.INNO_LIDAR_IN_FAULT_MAX_DISTANCE, _x.INNO_LIDAR_IN_FAULT_RESERVED14, _x.INNO_LIDAR_IN_FAULT_RESERVED15, _x.INNO_LIDAR_IN_FAULT_RESERVED16, _x.INNO_LIDAR_IN_FAULT_RESERVED17, _x.INNO_LIDAR_IN_FAULT_RESERVED18, _x.INNO_LIDAR_IN_FAULT_MAX, _x.INNO_LIDAR_IN_FAULT_OTHER, _x.publish_ptp_ts,) = _get_struct_65BQ().unpack(str[start:end])
      self.INNO_LIDAR_IN_FAULT_POWER_LOW = bool(self.INNO_LIDAR_IN_FAULT_POWER_LOW)
      self.INNO_LIDAR_IN_FAULT_POWER_HIGH = bool(self.INNO_LIDAR_IN_FAULT_POWER_HIGH)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE1)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE2)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE3)
      self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4 = bool(self.INNO_LIDAR_IN_FAULT_WINDOW_BLOCKAGE4)
      self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK = bool(self.INNO_LIDAR_IN_FAULT_LASER_INTERLOCK)
      self.INNO_LIDAR_IN_FAULT_COMM_LASER = bool(self.INNO_LIDAR_IN_FAULT_COMM_LASER)
      self.INNO_LIDAR_IN_FAULT_LASER = bool(self.INNO_LIDAR_IN_FAULT_LASER)
      self.INNO_LIDAR_IN_FAULT_COMM_DSP = bool(self.INNO_LIDAR_IN_FAULT_COMM_DSP)
      self.INNO_LIDAR_IN_FAULT_CANFD_DSP = bool(self.INNO_LIDAR_IN_FAULT_CANFD_DSP)
      self.INNO_LIDAR_IN_FAULT_DSP = bool(self.INNO_LIDAR_IN_FAULT_DSP)
      self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL = bool(self.INNO_LIDAR_IN_FAULT_POLYGON_CONTROL)
      self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR = bool(self.INNO_LIDAR_IN_FAULT_POLYGON_SENSOR)
      self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL = bool(self.INNO_LIDAR_IN_FAULT_GALVO_CONTROL)
      self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR = bool(self.INNO_LIDAR_IN_FAULT_GALVO_SENSOR)
      self.INNO_LIDAR_IN_FAULT_OPTIC1 = bool(self.INNO_LIDAR_IN_FAULT_OPTIC1)
      self.INNO_LIDAR_IN_FAULT_OPTIC2 = bool(self.INNO_LIDAR_IN_FAULT_OPTIC2)
      self.INNO_LIDAR_IN_FAULT_IIC_DSP = bool(self.INNO_LIDAR_IN_FAULT_IIC_DSP)
      self.INNO_LIDAR_IN_FAULT_IIC_SOC = bool(self.INNO_LIDAR_IN_FAULT_IIC_SOC)
      self.INNO_LIDAR_IN_FAULT_DSP_EXTWD = bool(self.INNO_LIDAR_IN_FAULT_DSP_EXTWD)
      self.INNO_LIDAR_IN_FAULT_DBTEMP = bool(self.INNO_LIDAR_IN_FAULT_DBTEMP)
      self.INNO_LIDAR_IN_FAULT_CHIPTEMP = bool(self.INNO_LIDAR_IN_FAULT_CHIPTEMP)
      self.INNO_LIDAR_IN_FAULT_HUMIDITY = bool(self.INNO_LIDAR_IN_FAULT_HUMIDITY)
      self.INNO_LIDAR_IN_FAULT_COMM_ADC = bool(self.INNO_LIDAR_IN_FAULT_COMM_ADC)
      self.INNO_LIDAR_IN_FAULT_FPGACLOCK = bool(self.INNO_LIDAR_IN_FAULT_FPGACLOCK)
      self.INNO_LIDAR_IN_FAULT_SOC = bool(self.INNO_LIDAR_IN_FAULT_SOC)
      self.INNO_LIDAR_IN_FAULT_SOC_EXTWD = bool(self.INNO_LIDAR_IN_FAULT_SOC_EXTWD)
      self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM = bool(self.INNO_LIDAR_IN_FAULT_RAWDATA_STREAM)
      self.INNO_LIDAR_IN_FAULT_POLYGON_TO = bool(self.INNO_LIDAR_IN_FAULT_POLYGON_TO)
      self.INNO_LIDAR_IN_FAULT_GALVO_TO = bool(self.INNO_LIDAR_IN_FAULT_GALVO_TO)
      self.INNO_LIDAR_IN_FAULT_TRIGGER_TO = bool(self.INNO_LIDAR_IN_FAULT_TRIGGER_TO)
      self.INNO_LIDAR_IN_FAULT_POWSUPL1 = bool(self.INNO_LIDAR_IN_FAULT_POWSUPL1)
      self.INNO_LIDAR_IN_FAULT_POWSUPL2 = bool(self.INNO_LIDAR_IN_FAULT_POWSUPL2)
      self.INNO_LIDAR_IN_FAULT_LPDDR4 = bool(self.INNO_LIDAR_IN_FAULT_LPDDR4)
      self.INNO_LIDAR_IN_FAULT_FLASH = bool(self.INNO_LIDAR_IN_FAULT_FLASH)
      self.INNO_LIDAR_IN_FAULT_NETWORK1 = bool(self.INNO_LIDAR_IN_FAULT_NETWORK1)
      self.INNO_LIDAR_IN_FAULT_NETWORK2 = bool(self.INNO_LIDAR_IN_FAULT_NETWORK2)
      self.INNO_LIDAR_IN_FAULT_OVERHEAT1 = bool(self.INNO_LIDAR_IN_FAULT_OVERHEAT1)
      self.INNO_LIDAR_IN_FAULT_OVERHEAT2 = bool(self.INNO_LIDAR_IN_FAULT_OVERHEAT2)
      self.INNO_LIDAR_IN_FAULT_OVERHEAT3 = bool(self.INNO_LIDAR_IN_FAULT_OVERHEAT3)
      self.INNO_LIDAR_IN_FAULT_CONFIG1 = bool(self.INNO_LIDAR_IN_FAULT_CONFIG1)
      self.INNO_LIDAR_IN_FAULT_CONFIG2 = bool(self.INNO_LIDAR_IN_FAULT_CONFIG2)
      self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE = bool(self.INNO_LIDAR_IN_FAULT_ASSERT_FAILURE)
      self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH = bool(self.INNO_LIDAR_IN_FAULT_CPULOAD_HIGH)
      self.INNO_LIDAR_IN_FAULT_LATENCY_LONG = bool(self.INNO_LIDAR_IN_FAULT_LATENCY_LONG)
      self.INNO_LIDAR_IN_FAULT_RESERVED07 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED07)
      self.INNO_LIDAR_IN_FAULT_RESERVED08 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED08)
      self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE = bool(self.INNO_LIDAR_IN_FAULT_EXCESSIVE_NOISE)
      self.INNO_LIDAR_IN_FAULT_DATA_DROP1 = bool(self.INNO_LIDAR_IN_FAULT_DATA_DROP1)
      self.INNO_LIDAR_IN_FAULT_DATA_DROP2 = bool(self.INNO_LIDAR_IN_FAULT_DATA_DROP2)
      self.INNO_LIDAR_IN_FAULT_DATA_DROP3 = bool(self.INNO_LIDAR_IN_FAULT_DATA_DROP3)
      self.INNO_LIDAR_TEMPHIGH_INHIBIT = bool(self.INNO_LIDAR_TEMPHIGH_INHIBIT)
      self.INNO_LIDAR_IN_FAULT_RESERVED10 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED10)
      self.INNO_LIDAR_IN_FAULT_REFINTENSITY = bool(self.INNO_LIDAR_IN_FAULT_REFINTENSITY)
      self.INNO_LIDAR_IN_FAULT_REPROGRAMMING = bool(self.INNO_LIDAR_IN_FAULT_REPROGRAMMING)
      self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR = bool(self.INNO_LIDAR_IN_FAULT_GALVO_MIRROR)
      self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE = bool(self.INNO_LIDAR_IN_FAULT_MAX_DISTANCE)
      self.INNO_LIDAR_IN_FAULT_RESERVED14 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED14)
      self.INNO_LIDAR_IN_FAULT_RESERVED15 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED15)
      self.INNO_LIDAR_IN_FAULT_RESERVED16 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED16)
      self.INNO_LIDAR_IN_FAULT_RESERVED17 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED17)
      self.INNO_LIDAR_IN_FAULT_RESERVED18 = bool(self.INNO_LIDAR_IN_FAULT_RESERVED18)
      self.INNO_LIDAR_IN_FAULT_MAX = bool(self.INNO_LIDAR_IN_FAULT_MAX)
      self.INNO_LIDAR_IN_FAULT_OTHER = bool(self.INNO_LIDAR_IN_FAULT_OTHER)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_65BQ = None
def _get_struct_65BQ():
    global _struct_65BQ
    if _struct_65BQ is None:
        _struct_65BQ = struct.Struct("<65BQ")
    return _struct_65BQ

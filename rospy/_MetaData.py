# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/MetaData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MetaData(genpy.Message):
  _md5sum = "9c1be345d10bf5850f7b47c8f705e9c6"
  _type = "rospy_message_converter/MetaData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 analogGain
float32 conversionGain
float32 digitalGain
float32 exposureTime
int32 flags
uint32 frameSeq
uint32 msbPosition
float32[] wbGain
"""
  __slots__ = ['analogGain','conversionGain','digitalGain','exposureTime','flags','frameSeq','msbPosition','wbGain']
  _slot_types = ['float32','float32','float32','float32','int32','uint32','uint32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       analogGain,conversionGain,digitalGain,exposureTime,flags,frameSeq,msbPosition,wbGain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MetaData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.analogGain is None:
        self.analogGain = 0.
      if self.conversionGain is None:
        self.conversionGain = 0.
      if self.digitalGain is None:
        self.digitalGain = 0.
      if self.exposureTime is None:
        self.exposureTime = 0.
      if self.flags is None:
        self.flags = 0
      if self.frameSeq is None:
        self.frameSeq = 0
      if self.msbPosition is None:
        self.msbPosition = 0
      if self.wbGain is None:
        self.wbGain = []
    else:
      self.analogGain = 0.
      self.conversionGain = 0.
      self.digitalGain = 0.
      self.exposureTime = 0.
      self.flags = 0
      self.frameSeq = 0
      self.msbPosition = 0
      self.wbGain = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fi2I().pack(_x.analogGain, _x.conversionGain, _x.digitalGain, _x.exposureTime, _x.flags, _x.frameSeq, _x.msbPosition))
      length = len(self.wbGain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.wbGain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.analogGain, _x.conversionGain, _x.digitalGain, _x.exposureTime, _x.flags, _x.frameSeq, _x.msbPosition,) = _get_struct_4fi2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wbGain = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fi2I().pack(_x.analogGain, _x.conversionGain, _x.digitalGain, _x.exposureTime, _x.flags, _x.frameSeq, _x.msbPosition))
      length = len(self.wbGain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.wbGain.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.analogGain, _x.conversionGain, _x.digitalGain, _x.exposureTime, _x.flags, _x.frameSeq, _x.msbPosition,) = _get_struct_4fi2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wbGain = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fi2I = None
def _get_struct_4fi2I():
    global _struct_4fi2I
    if _struct_4fi2I is None:
        _struct_4fi2I = struct.Struct("<4fi2I")
    return _struct_4fi2I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehicleLight.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehicleLight(genpy.Message):
  _md5sum = "2cf51f7d8babce2cdbb5cf9393acb015"
  _type = "rospy_message_converter/VehicleLight"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 VL_ID
uint32 VL_Num_Of_Vehicles
uint32 VL_Brightness
int32 VL_Type
float32 VL_Width
float32 VL_Width_STD
float32 VL_Height
float32 VL_Height_STD
float32 VL_Top_Angle
float32 VL_Bottom_Angle
float32 VL_Right_Angle
float32 VL_Left_Angle
float32 VL_Top_Angle_Velocity
float32 VL_Bottom_Velocity_Angle
float32 VL_Right_Velocity_Angle
float32 VL_Left_Velocity_Angle
float32 VL_Confidnece
bool VL_Is_SingleBar
bool VL_Is_New
"""
  __slots__ = ['VL_ID','VL_Num_Of_Vehicles','VL_Brightness','VL_Type','VL_Width','VL_Width_STD','VL_Height','VL_Height_STD','VL_Top_Angle','VL_Bottom_Angle','VL_Right_Angle','VL_Left_Angle','VL_Top_Angle_Velocity','VL_Bottom_Velocity_Angle','VL_Right_Velocity_Angle','VL_Left_Velocity_Angle','VL_Confidnece','VL_Is_SingleBar','VL_Is_New']
  _slot_types = ['uint32','uint32','uint32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VL_ID,VL_Num_Of_Vehicles,VL_Brightness,VL_Type,VL_Width,VL_Width_STD,VL_Height,VL_Height_STD,VL_Top_Angle,VL_Bottom_Angle,VL_Right_Angle,VL_Left_Angle,VL_Top_Angle_Velocity,VL_Bottom_Velocity_Angle,VL_Right_Velocity_Angle,VL_Left_Velocity_Angle,VL_Confidnece,VL_Is_SingleBar,VL_Is_New

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleLight, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VL_ID is None:
        self.VL_ID = 0
      if self.VL_Num_Of_Vehicles is None:
        self.VL_Num_Of_Vehicles = 0
      if self.VL_Brightness is None:
        self.VL_Brightness = 0
      if self.VL_Type is None:
        self.VL_Type = 0
      if self.VL_Width is None:
        self.VL_Width = 0.
      if self.VL_Width_STD is None:
        self.VL_Width_STD = 0.
      if self.VL_Height is None:
        self.VL_Height = 0.
      if self.VL_Height_STD is None:
        self.VL_Height_STD = 0.
      if self.VL_Top_Angle is None:
        self.VL_Top_Angle = 0.
      if self.VL_Bottom_Angle is None:
        self.VL_Bottom_Angle = 0.
      if self.VL_Right_Angle is None:
        self.VL_Right_Angle = 0.
      if self.VL_Left_Angle is None:
        self.VL_Left_Angle = 0.
      if self.VL_Top_Angle_Velocity is None:
        self.VL_Top_Angle_Velocity = 0.
      if self.VL_Bottom_Velocity_Angle is None:
        self.VL_Bottom_Velocity_Angle = 0.
      if self.VL_Right_Velocity_Angle is None:
        self.VL_Right_Velocity_Angle = 0.
      if self.VL_Left_Velocity_Angle is None:
        self.VL_Left_Velocity_Angle = 0.
      if self.VL_Confidnece is None:
        self.VL_Confidnece = 0.
      if self.VL_Is_SingleBar is None:
        self.VL_Is_SingleBar = False
      if self.VL_Is_New is None:
        self.VL_Is_New = False
    else:
      self.VL_ID = 0
      self.VL_Num_Of_Vehicles = 0
      self.VL_Brightness = 0
      self.VL_Type = 0
      self.VL_Width = 0.
      self.VL_Width_STD = 0.
      self.VL_Height = 0.
      self.VL_Height_STD = 0.
      self.VL_Top_Angle = 0.
      self.VL_Bottom_Angle = 0.
      self.VL_Right_Angle = 0.
      self.VL_Left_Angle = 0.
      self.VL_Top_Angle_Velocity = 0.
      self.VL_Bottom_Velocity_Angle = 0.
      self.VL_Right_Velocity_Angle = 0.
      self.VL_Left_Velocity_Angle = 0.
      self.VL_Confidnece = 0.
      self.VL_Is_SingleBar = False
      self.VL_Is_New = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Ii13f2B().pack(_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 70
      (_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New,) = _get_struct_3Ii13f2B().unpack(str[start:end])
      self.VL_Is_SingleBar = bool(self.VL_Is_SingleBar)
      self.VL_Is_New = bool(self.VL_Is_New)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Ii13f2B().pack(_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 70
      (_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New,) = _get_struct_3Ii13f2B().unpack(str[start:end])
      self.VL_Is_SingleBar = bool(self.VL_Is_SingleBar)
      self.VL_Is_New = bool(self.VL_Is_New)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Ii13f2B = None
def _get_struct_3Ii13f2B():
    global _struct_3Ii13f2B
    if _struct_3Ii13f2B is None:
        _struct_3Ii13f2B = struct.Struct("<3Ii13f2B")
    return _struct_3Ii13f2B

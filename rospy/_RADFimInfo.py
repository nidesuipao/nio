# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RADFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RADFimInfo(genpy.Message):
  _md5sum = "fde5b80af489e52dbdb9536ea3474a05"
  _type = "rospy_message_converter/RADFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool FIM_RAD_Error
bool FIM_RAD_Blindness
bool FIM_RAD_MRR_MsgError
bool FIM_RAD_MRR_Header_AlignmentState_MsgError
bool FIM_RAD_MRR_Header_SensorCoverage_MsgError
bool FIM_RAD_MRR_Header_Timestamps_MsgError
bool FIM_RAD_MRR_CANVersion_MsgError
bool FIM_RAD_MRR_Status_Radar_MsgError
"""
  __slots__ = ['FIM_RAD_Error','FIM_RAD_Blindness','FIM_RAD_MRR_MsgError','FIM_RAD_MRR_Header_AlignmentState_MsgError','FIM_RAD_MRR_Header_SensorCoverage_MsgError','FIM_RAD_MRR_Header_Timestamps_MsgError','FIM_RAD_MRR_CANVersion_MsgError','FIM_RAD_MRR_Status_Radar_MsgError']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FIM_RAD_Error,FIM_RAD_Blindness,FIM_RAD_MRR_MsgError,FIM_RAD_MRR_Header_AlignmentState_MsgError,FIM_RAD_MRR_Header_SensorCoverage_MsgError,FIM_RAD_MRR_Header_Timestamps_MsgError,FIM_RAD_MRR_CANVersion_MsgError,FIM_RAD_MRR_Status_Radar_MsgError

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RADFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FIM_RAD_Error is None:
        self.FIM_RAD_Error = False
      if self.FIM_RAD_Blindness is None:
        self.FIM_RAD_Blindness = False
      if self.FIM_RAD_MRR_MsgError is None:
        self.FIM_RAD_MRR_MsgError = False
      if self.FIM_RAD_MRR_Header_AlignmentState_MsgError is None:
        self.FIM_RAD_MRR_Header_AlignmentState_MsgError = False
      if self.FIM_RAD_MRR_Header_SensorCoverage_MsgError is None:
        self.FIM_RAD_MRR_Header_SensorCoverage_MsgError = False
      if self.FIM_RAD_MRR_Header_Timestamps_MsgError is None:
        self.FIM_RAD_MRR_Header_Timestamps_MsgError = False
      if self.FIM_RAD_MRR_CANVersion_MsgError is None:
        self.FIM_RAD_MRR_CANVersion_MsgError = False
      if self.FIM_RAD_MRR_Status_Radar_MsgError is None:
        self.FIM_RAD_MRR_Status_Radar_MsgError = False
    else:
      self.FIM_RAD_Error = False
      self.FIM_RAD_Blindness = False
      self.FIM_RAD_MRR_MsgError = False
      self.FIM_RAD_MRR_Header_AlignmentState_MsgError = False
      self.FIM_RAD_MRR_Header_SensorCoverage_MsgError = False
      self.FIM_RAD_MRR_Header_Timestamps_MsgError = False
      self.FIM_RAD_MRR_CANVersion_MsgError = False
      self.FIM_RAD_MRR_Status_Radar_MsgError = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.FIM_RAD_Error, _x.FIM_RAD_Blindness, _x.FIM_RAD_MRR_MsgError, _x.FIM_RAD_MRR_Header_AlignmentState_MsgError, _x.FIM_RAD_MRR_Header_SensorCoverage_MsgError, _x.FIM_RAD_MRR_Header_Timestamps_MsgError, _x.FIM_RAD_MRR_CANVersion_MsgError, _x.FIM_RAD_MRR_Status_Radar_MsgError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.FIM_RAD_Error, _x.FIM_RAD_Blindness, _x.FIM_RAD_MRR_MsgError, _x.FIM_RAD_MRR_Header_AlignmentState_MsgError, _x.FIM_RAD_MRR_Header_SensorCoverage_MsgError, _x.FIM_RAD_MRR_Header_Timestamps_MsgError, _x.FIM_RAD_MRR_CANVersion_MsgError, _x.FIM_RAD_MRR_Status_Radar_MsgError,) = _get_struct_8B().unpack(str[start:end])
      self.FIM_RAD_Error = bool(self.FIM_RAD_Error)
      self.FIM_RAD_Blindness = bool(self.FIM_RAD_Blindness)
      self.FIM_RAD_MRR_MsgError = bool(self.FIM_RAD_MRR_MsgError)
      self.FIM_RAD_MRR_Header_AlignmentState_MsgError = bool(self.FIM_RAD_MRR_Header_AlignmentState_MsgError)
      self.FIM_RAD_MRR_Header_SensorCoverage_MsgError = bool(self.FIM_RAD_MRR_Header_SensorCoverage_MsgError)
      self.FIM_RAD_MRR_Header_Timestamps_MsgError = bool(self.FIM_RAD_MRR_Header_Timestamps_MsgError)
      self.FIM_RAD_MRR_CANVersion_MsgError = bool(self.FIM_RAD_MRR_CANVersion_MsgError)
      self.FIM_RAD_MRR_Status_Radar_MsgError = bool(self.FIM_RAD_MRR_Status_Radar_MsgError)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.FIM_RAD_Error, _x.FIM_RAD_Blindness, _x.FIM_RAD_MRR_MsgError, _x.FIM_RAD_MRR_Header_AlignmentState_MsgError, _x.FIM_RAD_MRR_Header_SensorCoverage_MsgError, _x.FIM_RAD_MRR_Header_Timestamps_MsgError, _x.FIM_RAD_MRR_CANVersion_MsgError, _x.FIM_RAD_MRR_Status_Radar_MsgError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.FIM_RAD_Error, _x.FIM_RAD_Blindness, _x.FIM_RAD_MRR_MsgError, _x.FIM_RAD_MRR_Header_AlignmentState_MsgError, _x.FIM_RAD_MRR_Header_SensorCoverage_MsgError, _x.FIM_RAD_MRR_Header_Timestamps_MsgError, _x.FIM_RAD_MRR_CANVersion_MsgError, _x.FIM_RAD_MRR_Status_Radar_MsgError,) = _get_struct_8B().unpack(str[start:end])
      self.FIM_RAD_Error = bool(self.FIM_RAD_Error)
      self.FIM_RAD_Blindness = bool(self.FIM_RAD_Blindness)
      self.FIM_RAD_MRR_MsgError = bool(self.FIM_RAD_MRR_MsgError)
      self.FIM_RAD_MRR_Header_AlignmentState_MsgError = bool(self.FIM_RAD_MRR_Header_AlignmentState_MsgError)
      self.FIM_RAD_MRR_Header_SensorCoverage_MsgError = bool(self.FIM_RAD_MRR_Header_SensorCoverage_MsgError)
      self.FIM_RAD_MRR_Header_Timestamps_MsgError = bool(self.FIM_RAD_MRR_Header_Timestamps_MsgError)
      self.FIM_RAD_MRR_CANVersion_MsgError = bool(self.FIM_RAD_MRR_CANVersion_MsgError)
      self.FIM_RAD_MRR_Status_Radar_MsgError = bool(self.FIM_RAD_MRR_Status_Radar_MsgError)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DataFilterEventResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DataFilterEventResponse(genpy.Message):
  _md5sum = "c21f8c282d2a317c594e58180cc0fac3"
  _type = "rospy_message_converter/DataFilterEventResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """DlbResponse[] dds_resp
DlbResponse[] camera_resp
DlbResponse[] lidar_resp
DlbResponse[] log_resp
string uuid
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/DlbResponse
string[] req_uuid
string req_event
int32 dlb_state
string key
uint64 recorder_timestamp_utc
uint64 recorder_timestamp_ptp
string file_name
string fail_reason
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['dds_resp','camera_resp','lidar_resp','log_resp','uuid','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/DlbResponse[]','rospy_message_converter/DlbResponse[]','rospy_message_converter/DlbResponse[]','rospy_message_converter/DlbResponse[]','string','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dds_resp,camera_resp,lidar_resp,log_resp,uuid,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataFilterEventResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dds_resp is None:
        self.dds_resp = []
      if self.camera_resp is None:
        self.camera_resp = []
      if self.lidar_resp is None:
        self.lidar_resp = []
      if self.log_resp is None:
        self.log_resp = []
      if self.uuid is None:
        self.uuid = ''
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.dds_resp = []
      self.camera_resp = []
      self.lidar_resp = []
      self.log_resp = []
      self.uuid = ''
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.dds_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.dds_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      length = len(self.camera_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      length = len(self.lidar_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidar_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      length = len(self.log_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.log_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dds_resp is None:
        self.dds_resp = None
      if self.camera_resp is None:
        self.camera_resp = None
      if self.lidar_resp is None:
        self.lidar_resp = None
      if self.log_resp is None:
        self.log_resp = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dds_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.dds_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.camera_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidar_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.lidar_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.log_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.log_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.dds_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.dds_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      length = len(self.camera_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      length = len(self.lidar_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidar_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      length = len(self.log_resp)
      buff.write(_struct_I.pack(length))
      for val1 in self.log_resp:
        length = len(val1.req_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.req_uuid:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.req_event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.dlb_state
        buff.write(_get_struct_i().pack(_x))
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp))
        _x = val1.file_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.fail_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.publish_ptp_ts
        buff.write(_get_struct_Q().pack(_x))
        _x = val1.publisher_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dds_resp is None:
        self.dds_resp = None
      if self.camera_resp is None:
        self.camera_resp = None
      if self.lidar_resp is None:
        self.lidar_resp = None
      if self.log_resp is None:
        self.log_resp = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dds_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.dds_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.camera_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidar_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.lidar_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.log_resp = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DlbResponse()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.req_uuid = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.req_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.req_event = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.req_event = str[start:end]
        start = end
        end += 4
        (val1.dlb_state,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.recorder_timestamp_utc, _x.recorder_timestamp_ptp,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.file_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.file_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.fail_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.fail_reason = str[start:end]
        start = end
        end += 8
        (val1.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.publisher_id = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
        self.log_resp.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

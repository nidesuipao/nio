# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehCtrlIfInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VehCtrlIfInfo(genpy.Message):
  _md5sum = "ab3fc3cee9630b65d8aad32551d642e2"
  _type = "rospy_message_converter/VehCtrlIfInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LngCtrlFun LngCtrlIf
StrCtrlInfo LatCtrlIf

================================================================================
MSG: rospy_message_converter/LngCtrlFun
bool VLCAvl
bool VLCActv
float32 VLCTarDecel
int32 LLCFctSt
int32 LLCIntrrptErrTyp
bool AutoBrkgAvl
bool AutoBrkgActv
int32 ADTSts
int32 HldLampReq
bool FCC1_ForceFctEna
bool FCC1_BrkReqEna
float32 FCC1_TarBrkFReq
bool FCC1_VehHldReq
bool FCC1_VLCActv
float32 RVMCLgtDecCp
uint32 RVMCLgtSts
int32 VCUCruiseCtrlMod
int32 VMCBrkOvrd
float32 VMCLgtAccCp
float32 VMCLgtDecCp
uint32 VMCLgtSts
uint64[] timestamp_ptp_ns
float32 FCC1_VLCTarDecel
bool FCC1_VMCBrkOvrd

================================================================================
MSG: rospy_message_converter/StrCtrlInfo
int32 ActvExtIf
bool HIAvl
bool TOIAvl
bool DAIAvl
bool PAIAvl
uint64 timestamp_ptp_ns
"""
  __slots__ = ['LngCtrlIf','LatCtrlIf']
  _slot_types = ['rospy_message_converter/LngCtrlFun','rospy_message_converter/StrCtrlInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LngCtrlIf,LatCtrlIf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehCtrlIfInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LngCtrlIf is None:
        self.LngCtrlIf = rospy_message_converter.msg.LngCtrlFun()
      if self.LatCtrlIf is None:
        self.LatCtrlIf = rospy_message_converter.msg.StrCtrlInfo()
    else:
      self.LngCtrlIf = rospy_message_converter.msg.LngCtrlFun()
      self.LatCtrlIf = rospy_message_converter.msg.StrCtrlInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.LngCtrlIf.VLCAvl, _x.LngCtrlIf.VLCActv, _x.LngCtrlIf.VLCTarDecel, _x.LngCtrlIf.LLCFctSt, _x.LngCtrlIf.LLCIntrrptErrTyp, _x.LngCtrlIf.AutoBrkgAvl, _x.LngCtrlIf.AutoBrkgActv, _x.LngCtrlIf.ADTSts, _x.LngCtrlIf.HldLampReq, _x.LngCtrlIf.FCC1_ForceFctEna, _x.LngCtrlIf.FCC1_BrkReqEna, _x.LngCtrlIf.FCC1_TarBrkFReq, _x.LngCtrlIf.FCC1_VehHldReq, _x.LngCtrlIf.FCC1_VLCActv, _x.LngCtrlIf.RVMCLgtDecCp, _x.LngCtrlIf.RVMCLgtSts, _x.LngCtrlIf.VCUCruiseCtrlMod, _x.LngCtrlIf.VMCBrkOvrd, _x.LngCtrlIf.VMCLgtAccCp, _x.LngCtrlIf.VMCLgtDecCp, _x.LngCtrlIf.VMCLgtSts))
      length = len(self.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.LngCtrlIf.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_fBi4BQ().pack(_x.LngCtrlIf.FCC1_VLCTarDecel, _x.LngCtrlIf.FCC1_VMCBrkOvrd, _x.LatCtrlIf.ActvExtIf, _x.LatCtrlIf.HIAvl, _x.LatCtrlIf.TOIAvl, _x.LatCtrlIf.DAIAvl, _x.LatCtrlIf.PAIAvl, _x.LatCtrlIf.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LngCtrlIf is None:
        self.LngCtrlIf = rospy_message_converter.msg.LngCtrlFun()
      if self.LatCtrlIf is None:
        self.LatCtrlIf = rospy_message_converter.msg.StrCtrlInfo()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.LngCtrlIf.VLCAvl, _x.LngCtrlIf.VLCActv, _x.LngCtrlIf.VLCTarDecel, _x.LngCtrlIf.LLCFctSt, _x.LngCtrlIf.LLCIntrrptErrTyp, _x.LngCtrlIf.AutoBrkgAvl, _x.LngCtrlIf.AutoBrkgActv, _x.LngCtrlIf.ADTSts, _x.LngCtrlIf.HldLampReq, _x.LngCtrlIf.FCC1_ForceFctEna, _x.LngCtrlIf.FCC1_BrkReqEna, _x.LngCtrlIf.FCC1_TarBrkFReq, _x.LngCtrlIf.FCC1_VehHldReq, _x.LngCtrlIf.FCC1_VLCActv, _x.LngCtrlIf.RVMCLgtDecCp, _x.LngCtrlIf.RVMCLgtSts, _x.LngCtrlIf.VCUCruiseCtrlMod, _x.LngCtrlIf.VMCBrkOvrd, _x.LngCtrlIf.VMCLgtAccCp, _x.LngCtrlIf.VMCLgtDecCp, _x.LngCtrlIf.VMCLgtSts,) = _get_struct_2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.LngCtrlIf.VLCAvl = bool(self.LngCtrlIf.VLCAvl)
      self.LngCtrlIf.VLCActv = bool(self.LngCtrlIf.VLCActv)
      self.LngCtrlIf.AutoBrkgAvl = bool(self.LngCtrlIf.AutoBrkgAvl)
      self.LngCtrlIf.AutoBrkgActv = bool(self.LngCtrlIf.AutoBrkgActv)
      self.LngCtrlIf.FCC1_ForceFctEna = bool(self.LngCtrlIf.FCC1_ForceFctEna)
      self.LngCtrlIf.FCC1_BrkReqEna = bool(self.LngCtrlIf.FCC1_BrkReqEna)
      self.LngCtrlIf.FCC1_VehHldReq = bool(self.LngCtrlIf.FCC1_VehHldReq)
      self.LngCtrlIf.FCC1_VLCActv = bool(self.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LngCtrlIf.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 21
      (_x.LngCtrlIf.FCC1_VLCTarDecel, _x.LngCtrlIf.FCC1_VMCBrkOvrd, _x.LatCtrlIf.ActvExtIf, _x.LatCtrlIf.HIAvl, _x.LatCtrlIf.TOIAvl, _x.LatCtrlIf.DAIAvl, _x.LatCtrlIf.PAIAvl, _x.LatCtrlIf.timestamp_ptp_ns,) = _get_struct_fBi4BQ().unpack(str[start:end])
      self.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.LatCtrlIf.HIAvl = bool(self.LatCtrlIf.HIAvl)
      self.LatCtrlIf.TOIAvl = bool(self.LatCtrlIf.TOIAvl)
      self.LatCtrlIf.DAIAvl = bool(self.LatCtrlIf.DAIAvl)
      self.LatCtrlIf.PAIAvl = bool(self.LatCtrlIf.PAIAvl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.LngCtrlIf.VLCAvl, _x.LngCtrlIf.VLCActv, _x.LngCtrlIf.VLCTarDecel, _x.LngCtrlIf.LLCFctSt, _x.LngCtrlIf.LLCIntrrptErrTyp, _x.LngCtrlIf.AutoBrkgAvl, _x.LngCtrlIf.AutoBrkgActv, _x.LngCtrlIf.ADTSts, _x.LngCtrlIf.HldLampReq, _x.LngCtrlIf.FCC1_ForceFctEna, _x.LngCtrlIf.FCC1_BrkReqEna, _x.LngCtrlIf.FCC1_TarBrkFReq, _x.LngCtrlIf.FCC1_VehHldReq, _x.LngCtrlIf.FCC1_VLCActv, _x.LngCtrlIf.RVMCLgtDecCp, _x.LngCtrlIf.RVMCLgtSts, _x.LngCtrlIf.VCUCruiseCtrlMod, _x.LngCtrlIf.VMCBrkOvrd, _x.LngCtrlIf.VMCLgtAccCp, _x.LngCtrlIf.VMCLgtDecCp, _x.LngCtrlIf.VMCLgtSts))
      length = len(self.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.LngCtrlIf.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_fBi4BQ().pack(_x.LngCtrlIf.FCC1_VLCTarDecel, _x.LngCtrlIf.FCC1_VMCBrkOvrd, _x.LatCtrlIf.ActvExtIf, _x.LatCtrlIf.HIAvl, _x.LatCtrlIf.TOIAvl, _x.LatCtrlIf.DAIAvl, _x.LatCtrlIf.PAIAvl, _x.LatCtrlIf.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LngCtrlIf is None:
        self.LngCtrlIf = rospy_message_converter.msg.LngCtrlFun()
      if self.LatCtrlIf is None:
        self.LatCtrlIf = rospy_message_converter.msg.StrCtrlInfo()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.LngCtrlIf.VLCAvl, _x.LngCtrlIf.VLCActv, _x.LngCtrlIf.VLCTarDecel, _x.LngCtrlIf.LLCFctSt, _x.LngCtrlIf.LLCIntrrptErrTyp, _x.LngCtrlIf.AutoBrkgAvl, _x.LngCtrlIf.AutoBrkgActv, _x.LngCtrlIf.ADTSts, _x.LngCtrlIf.HldLampReq, _x.LngCtrlIf.FCC1_ForceFctEna, _x.LngCtrlIf.FCC1_BrkReqEna, _x.LngCtrlIf.FCC1_TarBrkFReq, _x.LngCtrlIf.FCC1_VehHldReq, _x.LngCtrlIf.FCC1_VLCActv, _x.LngCtrlIf.RVMCLgtDecCp, _x.LngCtrlIf.RVMCLgtSts, _x.LngCtrlIf.VCUCruiseCtrlMod, _x.LngCtrlIf.VMCBrkOvrd, _x.LngCtrlIf.VMCLgtAccCp, _x.LngCtrlIf.VMCLgtDecCp, _x.LngCtrlIf.VMCLgtSts,) = _get_struct_2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.LngCtrlIf.VLCAvl = bool(self.LngCtrlIf.VLCAvl)
      self.LngCtrlIf.VLCActv = bool(self.LngCtrlIf.VLCActv)
      self.LngCtrlIf.AutoBrkgAvl = bool(self.LngCtrlIf.AutoBrkgAvl)
      self.LngCtrlIf.AutoBrkgActv = bool(self.LngCtrlIf.AutoBrkgActv)
      self.LngCtrlIf.FCC1_ForceFctEna = bool(self.LngCtrlIf.FCC1_ForceFctEna)
      self.LngCtrlIf.FCC1_BrkReqEna = bool(self.LngCtrlIf.FCC1_BrkReqEna)
      self.LngCtrlIf.FCC1_VehHldReq = bool(self.LngCtrlIf.FCC1_VehHldReq)
      self.LngCtrlIf.FCC1_VLCActv = bool(self.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LngCtrlIf.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 21
      (_x.LngCtrlIf.FCC1_VLCTarDecel, _x.LngCtrlIf.FCC1_VMCBrkOvrd, _x.LatCtrlIf.ActvExtIf, _x.LatCtrlIf.HIAvl, _x.LatCtrlIf.TOIAvl, _x.LatCtrlIf.DAIAvl, _x.LatCtrlIf.PAIAvl, _x.LatCtrlIf.timestamp_ptp_ns,) = _get_struct_fBi4BQ().unpack(str[start:end])
      self.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.LatCtrlIf.HIAvl = bool(self.LatCtrlIf.HIAvl)
      self.LatCtrlIf.TOIAvl = bool(self.LatCtrlIf.TOIAvl)
      self.LatCtrlIf.DAIAvl = bool(self.LatCtrlIf.DAIAvl)
      self.LatCtrlIf.PAIAvl = bool(self.LatCtrlIf.PAIAvl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf2i2B2i2Bf2BfI2i2fI = None
def _get_struct_2Bf2i2B2i2Bf2BfI2i2fI():
    global _struct_2Bf2i2B2i2Bf2BfI2i2fI
    if _struct_2Bf2i2B2i2Bf2BfI2i2fI is None:
        _struct_2Bf2i2B2i2Bf2BfI2i2fI = struct.Struct("<2Bf2i2B2i2Bf2BfI2i2fI")
    return _struct_2Bf2i2B2i2Bf2BfI2i2fI
_struct_fBi4BQ = None
def _get_struct_fBi4BQ():
    global _struct_fBi4BQ
    if _struct_fBi4BQ is None:
        _struct_fBi4BQ = struct.Struct("<fBi4BQ")
    return _struct_fBi4BQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BrkSysInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class BrkSysInfo(genpy.Message):
  _md5sum = "8dc889ddda4da579b338bf2207c11999"
  _type = "rospy_message_converter/BrkSysInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """BrkPdlInfo BrkPdl
BrkPrsInfos BrkPrsInfo
PrkBrkInfos PrkBrk
int32 BrkOverHeat
int32 BrkHAZReq
int32 BCUBrkLiReq
uint32 StstSts
int32 NoBrkF
int32 SupInfo
int32 BrkFldLvl
int32 BrkPadWearSts
BrkFunInfo BrkFunSt
bool ExtBrkActv
float32 ExtBrkCp
uint32 ExtBrkSts
float32 MbRegenFrntAxleTar
uint32 MbRegenFrntAxleTarQ
float32 MbRegenReAxleTar
uint32 MbRegenReAxleTarQ
uint32 StabyMagin
uint32 StabyMaginQ
int32 BrkFldWarnReq
int32 BrkPadWearWarnReq
uint32 FCC1_StandstillStatus

================================================================================
MSG: rospy_message_converter/BrkPdlInfo
int32 TrvlCalSts
float32 Trvl
int32 BrkPedlSts
bool BrkpedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkPrsInfos
int32 BrkPrsVld
float32 BrkPrs
int32 BrkPrsOffsetVld
float32 BrkPrsOffset
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/PrkBrkInfos
int32 EPBSwtSts
int32 EPBSts
int32 EPBMod
bool CDPReq
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkFunInfo
bool BDWActv
bool ABAAvl
bool ABAActv
bool ABPAvl
bool ABPActv
bool ABSActv
int32 AVHSts
bool DTCActv
bool DWTActv
bool EBAAvl
bool EBAActv
bool EBDActv
bool HBAActv
int32 HDCSts
bool HHCAvl
bool HHCActv
bool TCSActv
bool TCSDeactv
bool VDCActv
bool VDCDeactv
bool EBDFailLampReq
bool VDCTCSLampInfo
bool VDCTCSFailLampReq
bool ABSFailLampReq
bool VDCTCSOnOfflampReq
bool AWBActv
bool AWBAvl
bool EBPActv
bool HBCActv
int32 ARPCfgSts
bool CDPActv
bool CDPAvail
bool ARPActv
bool DTCAvl
uint64 timestamp_ptp_ns
"""
  __slots__ = ['BrkPdl','BrkPrsInfo','PrkBrk','BrkOverHeat','BrkHAZReq','BCUBrkLiReq','StstSts','NoBrkF','SupInfo','BrkFldLvl','BrkPadWearSts','BrkFunSt','ExtBrkActv','ExtBrkCp','ExtBrkSts','MbRegenFrntAxleTar','MbRegenFrntAxleTarQ','MbRegenReAxleTar','MbRegenReAxleTarQ','StabyMagin','StabyMaginQ','BrkFldWarnReq','BrkPadWearWarnReq','FCC1_StandstillStatus']
  _slot_types = ['rospy_message_converter/BrkPdlInfo','rospy_message_converter/BrkPrsInfos','rospy_message_converter/PrkBrkInfos','int32','int32','int32','uint32','int32','int32','int32','int32','rospy_message_converter/BrkFunInfo','bool','float32','uint32','float32','uint32','float32','uint32','uint32','uint32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       BrkPdl,BrkPrsInfo,PrkBrk,BrkOverHeat,BrkHAZReq,BCUBrkLiReq,StstSts,NoBrkF,SupInfo,BrkFldLvl,BrkPadWearSts,BrkFunSt,ExtBrkActv,ExtBrkCp,ExtBrkSts,MbRegenFrntAxleTar,MbRegenFrntAxleTarQ,MbRegenReAxleTar,MbRegenReAxleTarQ,StabyMagin,StabyMaginQ,BrkFldWarnReq,BrkPadWearWarnReq,FCC1_StandstillStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BrkSysInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.BrkPdl is None:
        self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      if self.BrkPrsInfo is None:
        self.BrkPrsInfo = rospy_message_converter.msg.BrkPrsInfos()
      if self.PrkBrk is None:
        self.PrkBrk = rospy_message_converter.msg.PrkBrkInfos()
      if self.BrkOverHeat is None:
        self.BrkOverHeat = 0
      if self.BrkHAZReq is None:
        self.BrkHAZReq = 0
      if self.BCUBrkLiReq is None:
        self.BCUBrkLiReq = 0
      if self.StstSts is None:
        self.StstSts = 0
      if self.NoBrkF is None:
        self.NoBrkF = 0
      if self.SupInfo is None:
        self.SupInfo = 0
      if self.BrkFldLvl is None:
        self.BrkFldLvl = 0
      if self.BrkPadWearSts is None:
        self.BrkPadWearSts = 0
      if self.BrkFunSt is None:
        self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      if self.ExtBrkActv is None:
        self.ExtBrkActv = False
      if self.ExtBrkCp is None:
        self.ExtBrkCp = 0.
      if self.ExtBrkSts is None:
        self.ExtBrkSts = 0
      if self.MbRegenFrntAxleTar is None:
        self.MbRegenFrntAxleTar = 0.
      if self.MbRegenFrntAxleTarQ is None:
        self.MbRegenFrntAxleTarQ = 0
      if self.MbRegenReAxleTar is None:
        self.MbRegenReAxleTar = 0.
      if self.MbRegenReAxleTarQ is None:
        self.MbRegenReAxleTarQ = 0
      if self.StabyMagin is None:
        self.StabyMagin = 0
      if self.StabyMaginQ is None:
        self.StabyMaginQ = 0
      if self.BrkFldWarnReq is None:
        self.BrkFldWarnReq = 0
      if self.BrkPadWearWarnReq is None:
        self.BrkPadWearWarnReq = 0
      if self.FCC1_StandstillStatus is None:
        self.FCC1_StandstillStatus = 0
    else:
      self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      self.BrkPrsInfo = rospy_message_converter.msg.BrkPrsInfos()
      self.PrkBrk = rospy_message_converter.msg.PrkBrkInfos()
      self.BrkOverHeat = 0
      self.BrkHAZReq = 0
      self.BCUBrkLiReq = 0
      self.StstSts = 0
      self.NoBrkF = 0
      self.SupInfo = 0
      self.BrkFldLvl = 0
      self.BrkPadWearSts = 0
      self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      self.ExtBrkActv = False
      self.ExtBrkCp = 0.
      self.ExtBrkSts = 0
      self.MbRegenFrntAxleTar = 0.
      self.MbRegenFrntAxleTarQ = 0
      self.MbRegenReAxleTar = 0.
      self.MbRegenReAxleTarQ = 0
      self.StabyMagin = 0
      self.StabyMaginQ = 0
      self.BrkFldWarnReq = 0
      self.BrkPadWearWarnReq = 0
      self.FCC1_StandstillStatus = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI().pack(_x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkPrsInfo.BrkPrsVld, _x.BrkPrsInfo.BrkPrs, _x.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkPrsInfo.BrkPrsOffset, _x.BrkPrsInfo.timestamp_ptp_ns, _x.PrkBrk.EPBSwtSts, _x.PrkBrk.EPBSts, _x.PrkBrk.EPBMod, _x.PrkBrk.CDPReq, _x.PrkBrk.timestamp_ptp_ns, _x.BrkOverHeat, _x.BrkHAZReq, _x.BCUBrkLiReq, _x.StstSts, _x.NoBrkF, _x.SupInfo, _x.BrkFldLvl, _x.BrkPadWearSts, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.ExtBrkActv, _x.ExtBrkCp, _x.ExtBrkSts, _x.MbRegenFrntAxleTar, _x.MbRegenFrntAxleTarQ, _x.MbRegenReAxleTar, _x.MbRegenReAxleTarQ, _x.StabyMagin, _x.StabyMaginQ, _x.BrkFldWarnReq, _x.BrkPadWearWarnReq, _x.FCC1_StandstillStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.BrkPdl is None:
        self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      if self.BrkPrsInfo is None:
        self.BrkPrsInfo = rospy_message_converter.msg.BrkPrsInfos()
      if self.PrkBrk is None:
        self.PrkBrk = rospy_message_converter.msg.PrkBrkInfos()
      if self.BrkFunSt is None:
        self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      end = 0
      _x = self
      start = end
      end += 194
      (_x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkPrsInfo.BrkPrsVld, _x.BrkPrsInfo.BrkPrs, _x.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkPrsInfo.BrkPrsOffset, _x.BrkPrsInfo.timestamp_ptp_ns, _x.PrkBrk.EPBSwtSts, _x.PrkBrk.EPBSts, _x.PrkBrk.EPBMod, _x.PrkBrk.CDPReq, _x.PrkBrk.timestamp_ptp_ns, _x.BrkOverHeat, _x.BrkHAZReq, _x.BCUBrkLiReq, _x.StstSts, _x.NoBrkF, _x.SupInfo, _x.BrkFldLvl, _x.BrkPadWearSts, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.ExtBrkActv, _x.ExtBrkCp, _x.ExtBrkSts, _x.MbRegenFrntAxleTar, _x.MbRegenFrntAxleTarQ, _x.MbRegenReAxleTar, _x.MbRegenReAxleTarQ, _x.StabyMagin, _x.StabyMaginQ, _x.BrkFldWarnReq, _x.BrkPadWearWarnReq, _x.FCC1_StandstillStatus,) = _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI().unpack(str[start:end])
      self.BrkPdl.BrkpedlOvrd = bool(self.BrkPdl.BrkpedlOvrd)
      self.PrkBrk.CDPReq = bool(self.PrkBrk.CDPReq)
      self.BrkFunSt.BDWActv = bool(self.BrkFunSt.BDWActv)
      self.BrkFunSt.ABAAvl = bool(self.BrkFunSt.ABAAvl)
      self.BrkFunSt.ABAActv = bool(self.BrkFunSt.ABAActv)
      self.BrkFunSt.ABPAvl = bool(self.BrkFunSt.ABPAvl)
      self.BrkFunSt.ABPActv = bool(self.BrkFunSt.ABPActv)
      self.BrkFunSt.ABSActv = bool(self.BrkFunSt.ABSActv)
      self.BrkFunSt.DTCActv = bool(self.BrkFunSt.DTCActv)
      self.BrkFunSt.DWTActv = bool(self.BrkFunSt.DWTActv)
      self.BrkFunSt.EBAAvl = bool(self.BrkFunSt.EBAAvl)
      self.BrkFunSt.EBAActv = bool(self.BrkFunSt.EBAActv)
      self.BrkFunSt.EBDActv = bool(self.BrkFunSt.EBDActv)
      self.BrkFunSt.HBAActv = bool(self.BrkFunSt.HBAActv)
      self.BrkFunSt.HHCAvl = bool(self.BrkFunSt.HHCAvl)
      self.BrkFunSt.HHCActv = bool(self.BrkFunSt.HHCActv)
      self.BrkFunSt.TCSActv = bool(self.BrkFunSt.TCSActv)
      self.BrkFunSt.TCSDeactv = bool(self.BrkFunSt.TCSDeactv)
      self.BrkFunSt.VDCActv = bool(self.BrkFunSt.VDCActv)
      self.BrkFunSt.VDCDeactv = bool(self.BrkFunSt.VDCDeactv)
      self.BrkFunSt.EBDFailLampReq = bool(self.BrkFunSt.EBDFailLampReq)
      self.BrkFunSt.VDCTCSLampInfo = bool(self.BrkFunSt.VDCTCSLampInfo)
      self.BrkFunSt.VDCTCSFailLampReq = bool(self.BrkFunSt.VDCTCSFailLampReq)
      self.BrkFunSt.ABSFailLampReq = bool(self.BrkFunSt.ABSFailLampReq)
      self.BrkFunSt.VDCTCSOnOfflampReq = bool(self.BrkFunSt.VDCTCSOnOfflampReq)
      self.BrkFunSt.AWBActv = bool(self.BrkFunSt.AWBActv)
      self.BrkFunSt.AWBAvl = bool(self.BrkFunSt.AWBAvl)
      self.BrkFunSt.EBPActv = bool(self.BrkFunSt.EBPActv)
      self.BrkFunSt.HBCActv = bool(self.BrkFunSt.HBCActv)
      self.BrkFunSt.CDPActv = bool(self.BrkFunSt.CDPActv)
      self.BrkFunSt.CDPAvail = bool(self.BrkFunSt.CDPAvail)
      self.BrkFunSt.ARPActv = bool(self.BrkFunSt.ARPActv)
      self.BrkFunSt.DTCAvl = bool(self.BrkFunSt.DTCAvl)
      self.ExtBrkActv = bool(self.ExtBrkActv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI().pack(_x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkPrsInfo.BrkPrsVld, _x.BrkPrsInfo.BrkPrs, _x.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkPrsInfo.BrkPrsOffset, _x.BrkPrsInfo.timestamp_ptp_ns, _x.PrkBrk.EPBSwtSts, _x.PrkBrk.EPBSts, _x.PrkBrk.EPBMod, _x.PrkBrk.CDPReq, _x.PrkBrk.timestamp_ptp_ns, _x.BrkOverHeat, _x.BrkHAZReq, _x.BCUBrkLiReq, _x.StstSts, _x.NoBrkF, _x.SupInfo, _x.BrkFldLvl, _x.BrkPadWearSts, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.ExtBrkActv, _x.ExtBrkCp, _x.ExtBrkSts, _x.MbRegenFrntAxleTar, _x.MbRegenFrntAxleTarQ, _x.MbRegenReAxleTar, _x.MbRegenReAxleTarQ, _x.StabyMagin, _x.StabyMaginQ, _x.BrkFldWarnReq, _x.BrkPadWearWarnReq, _x.FCC1_StandstillStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.BrkPdl is None:
        self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      if self.BrkPrsInfo is None:
        self.BrkPrsInfo = rospy_message_converter.msg.BrkPrsInfos()
      if self.PrkBrk is None:
        self.PrkBrk = rospy_message_converter.msg.PrkBrkInfos()
      if self.BrkFunSt is None:
        self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      end = 0
      _x = self
      start = end
      end += 194
      (_x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkPrsInfo.BrkPrsVld, _x.BrkPrsInfo.BrkPrs, _x.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkPrsInfo.BrkPrsOffset, _x.BrkPrsInfo.timestamp_ptp_ns, _x.PrkBrk.EPBSwtSts, _x.PrkBrk.EPBSts, _x.PrkBrk.EPBMod, _x.PrkBrk.CDPReq, _x.PrkBrk.timestamp_ptp_ns, _x.BrkOverHeat, _x.BrkHAZReq, _x.BCUBrkLiReq, _x.StstSts, _x.NoBrkF, _x.SupInfo, _x.BrkFldLvl, _x.BrkPadWearSts, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.ExtBrkActv, _x.ExtBrkCp, _x.ExtBrkSts, _x.MbRegenFrntAxleTar, _x.MbRegenFrntAxleTarQ, _x.MbRegenReAxleTar, _x.MbRegenReAxleTarQ, _x.StabyMagin, _x.StabyMaginQ, _x.BrkFldWarnReq, _x.BrkPadWearWarnReq, _x.FCC1_StandstillStatus,) = _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI().unpack(str[start:end])
      self.BrkPdl.BrkpedlOvrd = bool(self.BrkPdl.BrkpedlOvrd)
      self.PrkBrk.CDPReq = bool(self.PrkBrk.CDPReq)
      self.BrkFunSt.BDWActv = bool(self.BrkFunSt.BDWActv)
      self.BrkFunSt.ABAAvl = bool(self.BrkFunSt.ABAAvl)
      self.BrkFunSt.ABAActv = bool(self.BrkFunSt.ABAActv)
      self.BrkFunSt.ABPAvl = bool(self.BrkFunSt.ABPAvl)
      self.BrkFunSt.ABPActv = bool(self.BrkFunSt.ABPActv)
      self.BrkFunSt.ABSActv = bool(self.BrkFunSt.ABSActv)
      self.BrkFunSt.DTCActv = bool(self.BrkFunSt.DTCActv)
      self.BrkFunSt.DWTActv = bool(self.BrkFunSt.DWTActv)
      self.BrkFunSt.EBAAvl = bool(self.BrkFunSt.EBAAvl)
      self.BrkFunSt.EBAActv = bool(self.BrkFunSt.EBAActv)
      self.BrkFunSt.EBDActv = bool(self.BrkFunSt.EBDActv)
      self.BrkFunSt.HBAActv = bool(self.BrkFunSt.HBAActv)
      self.BrkFunSt.HHCAvl = bool(self.BrkFunSt.HHCAvl)
      self.BrkFunSt.HHCActv = bool(self.BrkFunSt.HHCActv)
      self.BrkFunSt.TCSActv = bool(self.BrkFunSt.TCSActv)
      self.BrkFunSt.TCSDeactv = bool(self.BrkFunSt.TCSDeactv)
      self.BrkFunSt.VDCActv = bool(self.BrkFunSt.VDCActv)
      self.BrkFunSt.VDCDeactv = bool(self.BrkFunSt.VDCDeactv)
      self.BrkFunSt.EBDFailLampReq = bool(self.BrkFunSt.EBDFailLampReq)
      self.BrkFunSt.VDCTCSLampInfo = bool(self.BrkFunSt.VDCTCSLampInfo)
      self.BrkFunSt.VDCTCSFailLampReq = bool(self.BrkFunSt.VDCTCSFailLampReq)
      self.BrkFunSt.ABSFailLampReq = bool(self.BrkFunSt.ABSFailLampReq)
      self.BrkFunSt.VDCTCSOnOfflampReq = bool(self.BrkFunSt.VDCTCSOnOfflampReq)
      self.BrkFunSt.AWBActv = bool(self.BrkFunSt.AWBActv)
      self.BrkFunSt.AWBAvl = bool(self.BrkFunSt.AWBAvl)
      self.BrkFunSt.EBPActv = bool(self.BrkFunSt.EBPActv)
      self.BrkFunSt.HBCActv = bool(self.BrkFunSt.HBCActv)
      self.BrkFunSt.CDPActv = bool(self.BrkFunSt.CDPActv)
      self.BrkFunSt.CDPAvail = bool(self.BrkFunSt.CDPAvail)
      self.BrkFunSt.ARPActv = bool(self.BrkFunSt.ARPActv)
      self.BrkFunSt.DTCAvl = bool(self.BrkFunSt.DTCAvl)
      self.ExtBrkActv = bool(self.ExtBrkActv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI = None
def _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI():
    global _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI
    if _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI is None:
        _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI = struct.Struct("<ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI")
    return _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iI

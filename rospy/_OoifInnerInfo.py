# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/OoifInnerInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class OoifInnerInfo(genpy.Message):
  _md5sum = "4f3214cc9ca744b430c97487f32c5831"
  _type = "rospy_message_converter/OoifInnerInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 allObjNum
uint32 objPlausNum
uint32 carCandiNum
uint32 vruCandiNum
ObjPlausCheckStru[] objPlausStatus
ObjRelevanceStru[] objPlausVec
float32[] reserved
uint32[] objPlausIds
CarRelevanceMonitorStru[] carCandidatesVec
VruRelevanceMonitorStru[] vruCandidatesVec

================================================================================
MSG: rospy_message_converter/ObjPlausCheckStru
uint32 id
uint32 codeWord
float32 reserved

================================================================================
MSG: rospy_message_converter/ObjRelevanceStru
uint32 id
float32 tClose
float32 rangeClose
float32 objSensorErrorExt
float32 objSensorFluctExt
float32 egoFrontEndExt
float32 egoWidthExt
float32 overlapRate
bool flgOverlap
float32 collisionRelevance
ObjBoxStru egoBoxBase
ObjBoxStru egoBoxLengthExt
ObjBoxStru egoBoxExt
ObjBoxStru objBoxBase
ObjBoxStru ObjBoxExt
float32[] reserved
float32 objSensorTotalExt

================================================================================
MSG: rospy_message_converter/ObjBoxStru
float32[] x
float32[] y
float32[] reserved

================================================================================
MSG: rospy_message_converter/CarRelevanceMonitorStru
uint32 id
uint32 type
uint32 laneLoc
float32 curThw
float32 ttcLgt
float32 tFuture
float32 futRelevance
float32 curLgtDistCorr
float32 curLatDistCorr
float32 futLgtDistCorr
float32 futLatDistCorr
float32 futPosRelevance
float32 corridorHalfWidth
float32 adjLaneBoundary
float32 curPoseLgtDist
float32 curPoseLatDist
float32 curPoseRange
float32 curPoseHeading
float32 futPoseLgtDist
float32 futPoseLatDist
float32 futPoseRange
float32 futPoseHeading

================================================================================
MSG: rospy_message_converter/VruRelevanceMonitorStru
uint32 id
uint32 type
uint32 laneLoc
float32 futRelevance
float32 futRelevanceThld
float32 ttcLgtRear
float32 ttcLgtFront
float32 tFutureFront
float32 tFutureRear
float32 curLgtDistCorr
float32 curLatDistCorr
float32 dangerousZoneHalfWidth
float32 transitZoneHalftWidth
float32 zoneLength
float32 curPosRelevance
float32 corridorHalfWidth
float32 corridorMarginHalfWidth
float32 escapeHalfWidth
float32 escapeMarginHalfWidth
float32 objFutFrontLatDistMin
float32 objFutFrontLatDistMax
float32 objFutRearLatDistMin
float32 objFutRearLatDistMax
float32 pEscapeLeft
float32 pEscapeRight
float32 pEenterLeft
float32 pEnterRight
float32 pEnter
float32 pEscape
float32 curPoseLgtDist
float32 curPoseLatDist
float32 curPoseRange
float32 curPoseHeading
float32 futPoseToEgoFrontLgtDist
float32 futPoseToEgoFrontLatDist
float32 futPoseToEgoFrontRange
float32 futPoseToEgoFrontHeading
float32 futPoseToEgoRearLgtDist
float32 futPoseToEgoRearLatDist
float32 futPoseToEgoRearRange
float32 futPoseToEgoRearHeading
bool flgMoveForward
bool flgMoveBackward
bool flgMoveLeft
bool flgMoveRight
bool flgLatch
"""
  __slots__ = ['allObjNum','objPlausNum','carCandiNum','vruCandiNum','objPlausStatus','objPlausVec','reserved','objPlausIds','carCandidatesVec','vruCandidatesVec']
  _slot_types = ['uint32','uint32','uint32','uint32','rospy_message_converter/ObjPlausCheckStru[]','rospy_message_converter/ObjRelevanceStru[]','float32[]','uint32[]','rospy_message_converter/CarRelevanceMonitorStru[]','rospy_message_converter/VruRelevanceMonitorStru[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       allObjNum,objPlausNum,carCandiNum,vruCandiNum,objPlausStatus,objPlausVec,reserved,objPlausIds,carCandidatesVec,vruCandidatesVec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OoifInnerInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.allObjNum is None:
        self.allObjNum = 0
      if self.objPlausNum is None:
        self.objPlausNum = 0
      if self.carCandiNum is None:
        self.carCandiNum = 0
      if self.vruCandiNum is None:
        self.vruCandiNum = 0
      if self.objPlausStatus is None:
        self.objPlausStatus = []
      if self.objPlausVec is None:
        self.objPlausVec = []
      if self.reserved is None:
        self.reserved = []
      if self.objPlausIds is None:
        self.objPlausIds = []
      if self.carCandidatesVec is None:
        self.carCandidatesVec = []
      if self.vruCandidatesVec is None:
        self.vruCandidatesVec = []
    else:
      self.allObjNum = 0
      self.objPlausNum = 0
      self.carCandiNum = 0
      self.vruCandiNum = 0
      self.objPlausStatus = []
      self.objPlausVec = []
      self.reserved = []
      self.objPlausIds = []
      self.carCandidatesVec = []
      self.vruCandidatesVec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I().pack(_x.allObjNum, _x.objPlausNum, _x.carCandiNum, _x.vruCandiNum))
      length = len(self.objPlausStatus)
      buff.write(_struct_I.pack(length))
      for val1 in self.objPlausStatus:
        _x = val1
        buff.write(_get_struct_2If().pack(_x.id, _x.codeWord, _x.reserved))
      length = len(self.objPlausVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.objPlausVec:
        _x = val1
        buff.write(_get_struct_I7fBf().pack(_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance))
        _v1 = val1.egoBoxBase
        length = len(_v1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v1.x))
        length = len(_v1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v1.y))
        length = len(_v1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v1.reserved))
        _v2 = val1.egoBoxLengthExt
        length = len(_v2.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v2.x))
        length = len(_v2.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v2.y))
        length = len(_v2.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v2.reserved))
        _v3 = val1.egoBoxExt
        length = len(_v3.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v3.x))
        length = len(_v3.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v3.y))
        length = len(_v3.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v3.reserved))
        _v4 = val1.objBoxBase
        length = len(_v4.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v4.x))
        length = len(_v4.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v4.y))
        length = len(_v4.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v4.reserved))
        _v5 = val1.ObjBoxExt
        length = len(_v5.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v5.x))
        length = len(_v5.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v5.y))
        length = len(_v5.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v5.reserved))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
        _x = val1.objSensorTotalExt
        buff.write(_get_struct_f().pack(_x))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
      length = len(self.objPlausIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.objPlausIds))
      length = len(self.carCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.carCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I19f().pack(_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading))
      length = len(self.vruCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.vruCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I38f5B().pack(_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objPlausStatus is None:
        self.objPlausStatus = None
      if self.objPlausVec is None:
        self.objPlausVec = None
      if self.carCandidatesVec is None:
        self.carCandidatesVec = None
      if self.vruCandidatesVec is None:
        self.vruCandidatesVec = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.allObjNum, _x.objPlausNum, _x.carCandiNum, _x.vruCandiNum,) = _get_struct_4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objPlausStatus = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjPlausCheckStru()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.codeWord, _x.reserved,) = _get_struct_2If().unpack(str[start:end])
        self.objPlausStatus.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objPlausVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelevanceStru()
        _x = val1
        start = end
        end += 37
        (_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance,) = _get_struct_I7fBf().unpack(str[start:end])
        val1.flgOverlap = bool(val1.flgOverlap)
        _v6 = val1.egoBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v6.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v6.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v6.reserved = s.unpack(str[start:end])
        _v7 = val1.egoBoxLengthExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v7.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v7.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v7.reserved = s.unpack(str[start:end])
        _v8 = val1.egoBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v8.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v8.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v8.reserved = s.unpack(str[start:end])
        _v9 = val1.objBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v9.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v9.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v9.reserved = s.unpack(str[start:end])
        _v10 = val1.ObjBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v10.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v10.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v10.reserved = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.objSensorTotalExt,) = _get_struct_f().unpack(str[start:end])
        self.objPlausVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objPlausIds = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.carCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CarRelevanceMonitorStru()
        _x = val1
        start = end
        end += 88
        (_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading,) = _get_struct_3I19f().unpack(str[start:end])
        self.carCandidatesVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vruCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VruRelevanceMonitorStru()
        _x = val1
        start = end
        end += 169
        (_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch,) = _get_struct_3I38f5B().unpack(str[start:end])
        val1.flgMoveForward = bool(val1.flgMoveForward)
        val1.flgMoveBackward = bool(val1.flgMoveBackward)
        val1.flgMoveLeft = bool(val1.flgMoveLeft)
        val1.flgMoveRight = bool(val1.flgMoveRight)
        val1.flgLatch = bool(val1.flgLatch)
        self.vruCandidatesVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I().pack(_x.allObjNum, _x.objPlausNum, _x.carCandiNum, _x.vruCandiNum))
      length = len(self.objPlausStatus)
      buff.write(_struct_I.pack(length))
      for val1 in self.objPlausStatus:
        _x = val1
        buff.write(_get_struct_2If().pack(_x.id, _x.codeWord, _x.reserved))
      length = len(self.objPlausVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.objPlausVec:
        _x = val1
        buff.write(_get_struct_I7fBf().pack(_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance))
        _v11 = val1.egoBoxBase
        length = len(_v11.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v11.x.tostring())
        length = len(_v11.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v11.y.tostring())
        length = len(_v11.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v11.reserved.tostring())
        _v12 = val1.egoBoxLengthExt
        length = len(_v12.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v12.x.tostring())
        length = len(_v12.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v12.y.tostring())
        length = len(_v12.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v12.reserved.tostring())
        _v13 = val1.egoBoxExt
        length = len(_v13.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v13.x.tostring())
        length = len(_v13.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v13.y.tostring())
        length = len(_v13.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v13.reserved.tostring())
        _v14 = val1.objBoxBase
        length = len(_v14.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v14.x.tostring())
        length = len(_v14.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v14.y.tostring())
        length = len(_v14.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v14.reserved.tostring())
        _v15 = val1.ObjBoxExt
        length = len(_v15.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v15.x.tostring())
        length = len(_v15.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v15.y.tostring())
        length = len(_v15.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v15.reserved.tostring())
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
        _x = val1.objSensorTotalExt
        buff.write(_get_struct_f().pack(_x))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reserved.tostring())
      length = len(self.objPlausIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.objPlausIds.tostring())
      length = len(self.carCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.carCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I19f().pack(_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading))
      length = len(self.vruCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.vruCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I38f5B().pack(_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objPlausStatus is None:
        self.objPlausStatus = None
      if self.objPlausVec is None:
        self.objPlausVec = None
      if self.carCandidatesVec is None:
        self.carCandidatesVec = None
      if self.vruCandidatesVec is None:
        self.vruCandidatesVec = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.allObjNum, _x.objPlausNum, _x.carCandiNum, _x.vruCandiNum,) = _get_struct_4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objPlausStatus = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjPlausCheckStru()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.codeWord, _x.reserved,) = _get_struct_2If().unpack(str[start:end])
        self.objPlausStatus.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objPlausVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelevanceStru()
        _x = val1
        start = end
        end += 37
        (_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance,) = _get_struct_I7fBf().unpack(str[start:end])
        val1.flgOverlap = bool(val1.flgOverlap)
        _v16 = val1.egoBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v16.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v16.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v16.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v17 = val1.egoBoxLengthExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v17.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v17.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v17.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v18 = val1.egoBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v18.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v18.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v18.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v19 = val1.objBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v19.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v19.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v19.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v20 = val1.ObjBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v20.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v20.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v20.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.objSensorTotalExt,) = _get_struct_f().unpack(str[start:end])
        self.objPlausVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objPlausIds = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.carCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CarRelevanceMonitorStru()
        _x = val1
        start = end
        end += 88
        (_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading,) = _get_struct_3I19f().unpack(str[start:end])
        self.carCandidatesVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vruCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VruRelevanceMonitorStru()
        _x = val1
        start = end
        end += 169
        (_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch,) = _get_struct_3I38f5B().unpack(str[start:end])
        val1.flgMoveForward = bool(val1.flgMoveForward)
        val1.flgMoveBackward = bool(val1.flgMoveBackward)
        val1.flgMoveLeft = bool(val1.flgMoveLeft)
        val1.flgMoveRight = bool(val1.flgMoveRight)
        val1.flgLatch = bool(val1.flgLatch)
        self.vruCandidatesVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If = None
def _get_struct_2If():
    global _struct_2If
    if _struct_2If is None:
        _struct_2If = struct.Struct("<2If")
    return _struct_2If
_struct_3I19f = None
def _get_struct_3I19f():
    global _struct_3I19f
    if _struct_3I19f is None:
        _struct_3I19f = struct.Struct("<3I19f")
    return _struct_3I19f
_struct_3I38f5B = None
def _get_struct_3I38f5B():
    global _struct_3I38f5B
    if _struct_3I38f5B is None:
        _struct_3I38f5B = struct.Struct("<3I38f5B")
    return _struct_3I38f5B
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
_struct_I7fBf = None
def _get_struct_I7fBf():
    global _struct_I7fBf
    if _struct_I7fBf is None:
        _struct_I7fBf = struct.Struct("<I7fBf")
    return _struct_I7fBf
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

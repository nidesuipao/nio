# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParkingControlSts.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParkingControlSts(genpy.Message):
  _md5sum = "9c92f3ae0007aca766d5f4dd3a9ead59"
  _type = "rospy_message_converter/ParkingControlSts"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 control_status
LngLwSpdCtrlIf long_control_out
LatCtrlIf lat_control_out
NodeInfo node_info
uint64 timestamp
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LngLwSpdCtrlIf
int32 FctSeln
int32 CntrlModReq
int32 LLCSt
int32 TarGearReq
float32 TarSpdKph
float32 StopDst
int32 ShutdownModReq
int32 EPBReq
float32 VehDstToVSlot
float32 SlopeDstOffset
int32 VCU_ObjModTyp
float32 VCU_ObjModLonDst
float32 VCU_ObjModLatDst

================================================================================
MSG: rospy_message_converter/LatCtrlIf
int32 ACIReqVld
float32 ACIReqSAE
float32 ACISafLimAngDyn
uint32 ACISafLimAngRM
float32 ACISafLimAngDynOffs
uint32 ACISafLimRate
uint32 ACIRampRate
uint32 ACISafLimAngLM
uint32 ACISafLimMode
int32 CTIReqVal
float32 CTIReqSAE
int32 StrIFReq
uint32 HVIReq
int32 HVIReqVld
int32 ACITsuSup
int32 ACIOvrdThr

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer
"""
  __slots__ = ['control_status','long_control_out','lat_control_out','node_info','timestamp','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['int32','rospy_message_converter/LngLwSpdCtrlIf','rospy_message_converter/LatCtrlIf','rospy_message_converter/NodeInfo','uint64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_status,long_control_out,lat_control_out,node_info,timestamp,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkingControlSts, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_status is None:
        self.control_status = 0
      if self.long_control_out is None:
        self.long_control_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.lat_control_out is None:
        self.lat_control_out = rospy_message_converter.msg.LatCtrlIf()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.timestamp is None:
        self.timestamp = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.control_status = 0
      self.long_control_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      self.lat_control_out = rospy_message_converter.msg.LatCtrlIf()
      self.node_info = rospy_message_converter.msg.NodeInfo()
      self.timestamp = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i2f2i2fi2fi2fIf4IifiI5i().pack(_x.control_status, _x.long_control_out.FctSeln, _x.long_control_out.CntrlModReq, _x.long_control_out.LLCSt, _x.long_control_out.TarGearReq, _x.long_control_out.TarSpdKph, _x.long_control_out.StopDst, _x.long_control_out.ShutdownModReq, _x.long_control_out.EPBReq, _x.long_control_out.VehDstToVSlot, _x.long_control_out.SlopeDstOffset, _x.long_control_out.VCU_ObjModTyp, _x.long_control_out.VCU_ObjModLonDst, _x.long_control_out.VCU_ObjModLatDst, _x.lat_control_out.ACIReqVld, _x.lat_control_out.ACIReqSAE, _x.lat_control_out.ACISafLimAngDyn, _x.lat_control_out.ACISafLimAngRM, _x.lat_control_out.ACISafLimAngDynOffs, _x.lat_control_out.ACISafLimRate, _x.lat_control_out.ACIRampRate, _x.lat_control_out.ACISafLimAngLM, _x.lat_control_out.ACISafLimMode, _x.lat_control_out.CTIReqVal, _x.lat_control_out.CTIReqSAE, _x.lat_control_out.StrIFReq, _x.lat_control_out.HVIReq, _x.lat_control_out.HVIReqVld, _x.lat_control_out.ACITsuSup, _x.lat_control_out.ACIOvrdThr, _x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.node_info.buffer))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.timestamp, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.long_control_out is None:
        self.long_control_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.lat_control_out is None:
        self.lat_control_out = rospy_message_converter.msg.LatCtrlIf()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.control_status, _x.long_control_out.FctSeln, _x.long_control_out.CntrlModReq, _x.long_control_out.LLCSt, _x.long_control_out.TarGearReq, _x.long_control_out.TarSpdKph, _x.long_control_out.StopDst, _x.long_control_out.ShutdownModReq, _x.long_control_out.EPBReq, _x.long_control_out.VehDstToVSlot, _x.long_control_out.SlopeDstOffset, _x.long_control_out.VCU_ObjModTyp, _x.long_control_out.VCU_ObjModLonDst, _x.long_control_out.VCU_ObjModLatDst, _x.lat_control_out.ACIReqVld, _x.lat_control_out.ACIReqSAE, _x.lat_control_out.ACISafLimAngDyn, _x.lat_control_out.ACISafLimAngRM, _x.lat_control_out.ACISafLimAngDynOffs, _x.lat_control_out.ACISafLimRate, _x.lat_control_out.ACIRampRate, _x.lat_control_out.ACISafLimAngLM, _x.lat_control_out.ACISafLimMode, _x.lat_control_out.CTIReqVal, _x.lat_control_out.CTIReqSAE, _x.lat_control_out.StrIFReq, _x.lat_control_out.HVIReq, _x.lat_control_out.HVIReqVld, _x.lat_control_out.ACITsuSup, _x.lat_control_out.ACIOvrdThr, _x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_5i2f2i2fi2fi2fIf4IifiI5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.publish_ptp_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i2f2i2fi2fi2fIf4IifiI5i().pack(_x.control_status, _x.long_control_out.FctSeln, _x.long_control_out.CntrlModReq, _x.long_control_out.LLCSt, _x.long_control_out.TarGearReq, _x.long_control_out.TarSpdKph, _x.long_control_out.StopDst, _x.long_control_out.ShutdownModReq, _x.long_control_out.EPBReq, _x.long_control_out.VehDstToVSlot, _x.long_control_out.SlopeDstOffset, _x.long_control_out.VCU_ObjModTyp, _x.long_control_out.VCU_ObjModLonDst, _x.long_control_out.VCU_ObjModLatDst, _x.lat_control_out.ACIReqVld, _x.lat_control_out.ACIReqSAE, _x.lat_control_out.ACISafLimAngDyn, _x.lat_control_out.ACISafLimAngRM, _x.lat_control_out.ACISafLimAngDynOffs, _x.lat_control_out.ACISafLimRate, _x.lat_control_out.ACIRampRate, _x.lat_control_out.ACISafLimAngLM, _x.lat_control_out.ACISafLimMode, _x.lat_control_out.CTIReqVal, _x.lat_control_out.CTIReqSAE, _x.lat_control_out.StrIFReq, _x.lat_control_out.HVIReq, _x.lat_control_out.HVIReqVld, _x.lat_control_out.ACITsuSup, _x.lat_control_out.ACIOvrdThr, _x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_2Q().pack(_x.timestamp, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.long_control_out is None:
        self.long_control_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.lat_control_out is None:
        self.lat_control_out = rospy_message_converter.msg.LatCtrlIf()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.control_status, _x.long_control_out.FctSeln, _x.long_control_out.CntrlModReq, _x.long_control_out.LLCSt, _x.long_control_out.TarGearReq, _x.long_control_out.TarSpdKph, _x.long_control_out.StopDst, _x.long_control_out.ShutdownModReq, _x.long_control_out.EPBReq, _x.long_control_out.VehDstToVSlot, _x.long_control_out.SlopeDstOffset, _x.long_control_out.VCU_ObjModTyp, _x.long_control_out.VCU_ObjModLonDst, _x.long_control_out.VCU_ObjModLatDst, _x.lat_control_out.ACIReqVld, _x.lat_control_out.ACIReqSAE, _x.lat_control_out.ACISafLimAngDyn, _x.lat_control_out.ACISafLimAngRM, _x.lat_control_out.ACISafLimAngDynOffs, _x.lat_control_out.ACISafLimRate, _x.lat_control_out.ACIRampRate, _x.lat_control_out.ACISafLimAngLM, _x.lat_control_out.ACISafLimMode, _x.lat_control_out.CTIReqVal, _x.lat_control_out.CTIReqSAE, _x.lat_control_out.StrIFReq, _x.lat_control_out.HVIReq, _x.lat_control_out.HVIReqVld, _x.lat_control_out.ACITsuSup, _x.lat_control_out.ACIOvrdThr, _x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_5i2f2i2fi2fi2fIf4IifiI5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.publish_ptp_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_5i2f2i2fi2fi2fIf4IifiI5i = None
def _get_struct_5i2f2i2fi2fi2fIf4IifiI5i():
    global _struct_5i2f2i2fi2fi2fIf4IifiI5i
    if _struct_5i2f2i2fi2fi2fIf4IifiI5i is None:
        _struct_5i2f2i2fi2fi2fIf4IifiI5i = struct.Struct("<5i2f2i2fi2fi2fIf4IifiI5i")
    return _struct_5i2f2i2fi2fi2fIf4IifiI5i

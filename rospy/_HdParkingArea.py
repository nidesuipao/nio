# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdParkingArea.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdParkingArea(genpy.Message):
  _md5sum = "ae48cba4ed83d6978739c52f19d721cd"
  _type = "rospy_message_converter/HdParkingArea"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 id
MapPolygon surface
int32 marking_type
int32 parking_type
float64 heading
LinkFeaturePoint[] link_feature_points
uint64[] link_ids
uint64[] lane_ids

================================================================================
MSG: rospy_message_converter/MapPolygon
float64[] x
float64[] y
float64[] z

================================================================================
MSG: rospy_message_converter/LinkFeaturePoint
int32 type
float32 offset
MapPoint position
uint64 link_id

================================================================================
MSG: rospy_message_converter/MapPoint
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','surface','marking_type','parking_type','heading','link_feature_points','link_ids','lane_ids']
  _slot_types = ['uint64','rospy_message_converter/MapPolygon','int32','int32','float64','rospy_message_converter/LinkFeaturePoint[]','uint64[]','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,surface,marking_type,parking_type,heading,link_feature_points,link_ids,lane_ids

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdParkingArea, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.surface is None:
        self.surface = rospy_message_converter.msg.MapPolygon()
      if self.marking_type is None:
        self.marking_type = 0
      if self.parking_type is None:
        self.parking_type = 0
      if self.heading is None:
        self.heading = 0.
      if self.link_feature_points is None:
        self.link_feature_points = []
      if self.link_ids is None:
        self.link_ids = []
      if self.lane_ids is None:
        self.lane_ids = []
    else:
      self.id = 0
      self.surface = rospy_message_converter.msg.MapPolygon()
      self.marking_type = 0
      self.parking_type = 0
      self.heading = 0.
      self.link_feature_points = []
      self.link_ids = []
      self.lane_ids = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.surface.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.surface.x))
      length = len(self.surface.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.surface.y))
      length = len(self.surface.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.surface.z))
      _x = self
      buff.write(_get_struct_2id().pack(_x.marking_type, _x.parking_type, _x.heading))
      length = len(self.link_feature_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_feature_points:
        _x = val1
        buff.write(_get_struct_if().pack(_x.type, _x.offset))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.link_id
        buff.write(_get_struct_Q().pack(_x))
      length = len(self.link_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.link_ids))
      length = len(self.lane_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.lane_ids))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.surface is None:
        self.surface = rospy_message_converter.msg.MapPolygon()
      if self.link_feature_points is None:
        self.link_feature_points = None
      end = 0
      start = end
      end += 8
      (self.id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.z = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.marking_type, _x.parking_type, _x.heading,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_feature_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LinkFeaturePoint()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.offset,) = _get_struct_if().unpack(str[start:end])
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.link_id,) = _get_struct_Q().unpack(str[start:end])
        self.link_feature_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.link_ids = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lane_ids = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.surface.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.surface.x.tostring())
      length = len(self.surface.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.surface.y.tostring())
      length = len(self.surface.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.surface.z.tostring())
      _x = self
      buff.write(_get_struct_2id().pack(_x.marking_type, _x.parking_type, _x.heading))
      length = len(self.link_feature_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_feature_points:
        _x = val1
        buff.write(_get_struct_if().pack(_x.type, _x.offset))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.link_id
        buff.write(_get_struct_Q().pack(_x))
      length = len(self.link_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.link_ids.tostring())
      length = len(self.lane_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.lane_ids.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.surface is None:
        self.surface = rospy_message_converter.msg.MapPolygon()
      if self.link_feature_points is None:
        self.link_feature_points = None
      end = 0
      start = end
      end += 8
      (self.id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.marking_type, _x.parking_type, _x.heading,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_feature_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LinkFeaturePoint()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.offset,) = _get_struct_if().unpack(str[start:end])
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.link_id,) = _get_struct_Q().unpack(str[start:end])
        self.link_feature_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.link_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lane_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2id = None
def _get_struct_2id():
    global _struct_2id
    if _struct_2id is None:
        _struct_2id = struct.Struct("<2id")
    return _struct_2id
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AdFunCfgInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AdFunCfgInfo(genpy.Message):
  _md5sum = "4e2f91dabda2126e6667493fb975745a"
  _type = "rospy_message_converter/AdFunCfgInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 AEBOnOffReq
int32 DASTactileOnOff
int32 DrvAlertSysOnOff
int32 FCTAOnOffCmd
int32 FCWSetReq
int32 LnAssistTctlOnOff
int32 LCAOnOff
int32 LCATctlWarnOnOff
int32 RCTAReq
int32 SetHMA
int32 SetLnAssiAidTyp
int32 SetLaneAssiSnvty
int32 RCTABReq
int32 SAPAPrkgModReq
int32 CDCFailSts
int32 Set360AP
int32 SetDA_ALCS
int32 SetDA_SpeedAssist
int32 SetDA_SteerAssist
int32 SetSWF
int32 ELKOnOff
int32 SdowOnOffReq
int32 GoNotifierSnvty
int32 DrowsinessSwtSts
int32 ELKSwtSts
int32 DistractionSwtSts
int32 SetDA_NOP
int32 SetSpeedCtrlSts
int32 CurveSpeedAssist
int32 TowModActv
int32 GoNotifierOnOff
bool AESOnOffSts
bool SwtichDA_NOP
int32 SetDA_NOPALC
bool ManHornSwtSts
bool TLNotifierOnOff
int32 SetDA_SetSpdOffs
int32 CfgTaskSwitch
int32 SetDA_SetSpdOffsValue
"""
  __slots__ = ['AEBOnOffReq','DASTactileOnOff','DrvAlertSysOnOff','FCTAOnOffCmd','FCWSetReq','LnAssistTctlOnOff','LCAOnOff','LCATctlWarnOnOff','RCTAReq','SetHMA','SetLnAssiAidTyp','SetLaneAssiSnvty','RCTABReq','SAPAPrkgModReq','CDCFailSts','Set360AP','SetDA_ALCS','SetDA_SpeedAssist','SetDA_SteerAssist','SetSWF','ELKOnOff','SdowOnOffReq','GoNotifierSnvty','DrowsinessSwtSts','ELKSwtSts','DistractionSwtSts','SetDA_NOP','SetSpeedCtrlSts','CurveSpeedAssist','TowModActv','GoNotifierOnOff','AESOnOffSts','SwtichDA_NOP','SetDA_NOPALC','ManHornSwtSts','TLNotifierOnOff','SetDA_SetSpdOffs','CfgTaskSwitch','SetDA_SetSpdOffsValue']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','bool','bool','int32','bool','bool','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AEBOnOffReq,DASTactileOnOff,DrvAlertSysOnOff,FCTAOnOffCmd,FCWSetReq,LnAssistTctlOnOff,LCAOnOff,LCATctlWarnOnOff,RCTAReq,SetHMA,SetLnAssiAidTyp,SetLaneAssiSnvty,RCTABReq,SAPAPrkgModReq,CDCFailSts,Set360AP,SetDA_ALCS,SetDA_SpeedAssist,SetDA_SteerAssist,SetSWF,ELKOnOff,SdowOnOffReq,GoNotifierSnvty,DrowsinessSwtSts,ELKSwtSts,DistractionSwtSts,SetDA_NOP,SetSpeedCtrlSts,CurveSpeedAssist,TowModActv,GoNotifierOnOff,AESOnOffSts,SwtichDA_NOP,SetDA_NOPALC,ManHornSwtSts,TLNotifierOnOff,SetDA_SetSpdOffs,CfgTaskSwitch,SetDA_SetSpdOffsValue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdFunCfgInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AEBOnOffReq is None:
        self.AEBOnOffReq = 0
      if self.DASTactileOnOff is None:
        self.DASTactileOnOff = 0
      if self.DrvAlertSysOnOff is None:
        self.DrvAlertSysOnOff = 0
      if self.FCTAOnOffCmd is None:
        self.FCTAOnOffCmd = 0
      if self.FCWSetReq is None:
        self.FCWSetReq = 0
      if self.LnAssistTctlOnOff is None:
        self.LnAssistTctlOnOff = 0
      if self.LCAOnOff is None:
        self.LCAOnOff = 0
      if self.LCATctlWarnOnOff is None:
        self.LCATctlWarnOnOff = 0
      if self.RCTAReq is None:
        self.RCTAReq = 0
      if self.SetHMA is None:
        self.SetHMA = 0
      if self.SetLnAssiAidTyp is None:
        self.SetLnAssiAidTyp = 0
      if self.SetLaneAssiSnvty is None:
        self.SetLaneAssiSnvty = 0
      if self.RCTABReq is None:
        self.RCTABReq = 0
      if self.SAPAPrkgModReq is None:
        self.SAPAPrkgModReq = 0
      if self.CDCFailSts is None:
        self.CDCFailSts = 0
      if self.Set360AP is None:
        self.Set360AP = 0
      if self.SetDA_ALCS is None:
        self.SetDA_ALCS = 0
      if self.SetDA_SpeedAssist is None:
        self.SetDA_SpeedAssist = 0
      if self.SetDA_SteerAssist is None:
        self.SetDA_SteerAssist = 0
      if self.SetSWF is None:
        self.SetSWF = 0
      if self.ELKOnOff is None:
        self.ELKOnOff = 0
      if self.SdowOnOffReq is None:
        self.SdowOnOffReq = 0
      if self.GoNotifierSnvty is None:
        self.GoNotifierSnvty = 0
      if self.DrowsinessSwtSts is None:
        self.DrowsinessSwtSts = 0
      if self.ELKSwtSts is None:
        self.ELKSwtSts = 0
      if self.DistractionSwtSts is None:
        self.DistractionSwtSts = 0
      if self.SetDA_NOP is None:
        self.SetDA_NOP = 0
      if self.SetSpeedCtrlSts is None:
        self.SetSpeedCtrlSts = 0
      if self.CurveSpeedAssist is None:
        self.CurveSpeedAssist = 0
      if self.TowModActv is None:
        self.TowModActv = 0
      if self.GoNotifierOnOff is None:
        self.GoNotifierOnOff = 0
      if self.AESOnOffSts is None:
        self.AESOnOffSts = False
      if self.SwtichDA_NOP is None:
        self.SwtichDA_NOP = False
      if self.SetDA_NOPALC is None:
        self.SetDA_NOPALC = 0
      if self.ManHornSwtSts is None:
        self.ManHornSwtSts = False
      if self.TLNotifierOnOff is None:
        self.TLNotifierOnOff = False
      if self.SetDA_SetSpdOffs is None:
        self.SetDA_SetSpdOffs = 0
      if self.CfgTaskSwitch is None:
        self.CfgTaskSwitch = 0
      if self.SetDA_SetSpdOffsValue is None:
        self.SetDA_SetSpdOffsValue = 0
    else:
      self.AEBOnOffReq = 0
      self.DASTactileOnOff = 0
      self.DrvAlertSysOnOff = 0
      self.FCTAOnOffCmd = 0
      self.FCWSetReq = 0
      self.LnAssistTctlOnOff = 0
      self.LCAOnOff = 0
      self.LCATctlWarnOnOff = 0
      self.RCTAReq = 0
      self.SetHMA = 0
      self.SetLnAssiAidTyp = 0
      self.SetLaneAssiSnvty = 0
      self.RCTABReq = 0
      self.SAPAPrkgModReq = 0
      self.CDCFailSts = 0
      self.Set360AP = 0
      self.SetDA_ALCS = 0
      self.SetDA_SpeedAssist = 0
      self.SetDA_SteerAssist = 0
      self.SetSWF = 0
      self.ELKOnOff = 0
      self.SdowOnOffReq = 0
      self.GoNotifierSnvty = 0
      self.DrowsinessSwtSts = 0
      self.ELKSwtSts = 0
      self.DistractionSwtSts = 0
      self.SetDA_NOP = 0
      self.SetSpeedCtrlSts = 0
      self.CurveSpeedAssist = 0
      self.TowModActv = 0
      self.GoNotifierOnOff = 0
      self.AESOnOffSts = False
      self.SwtichDA_NOP = False
      self.SetDA_NOPALC = 0
      self.ManHornSwtSts = False
      self.TLNotifierOnOff = False
      self.SetDA_SetSpdOffs = 0
      self.CfgTaskSwitch = 0
      self.SetDA_SetSpdOffsValue = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_31i2Bi2B3i().pack(_x.AEBOnOffReq, _x.DASTactileOnOff, _x.DrvAlertSysOnOff, _x.FCTAOnOffCmd, _x.FCWSetReq, _x.LnAssistTctlOnOff, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTAReq, _x.SetHMA, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.RCTABReq, _x.SAPAPrkgModReq, _x.CDCFailSts, _x.Set360AP, _x.SetDA_ALCS, _x.SetDA_SpeedAssist, _x.SetDA_SteerAssist, _x.SetSWF, _x.ELKOnOff, _x.SdowOnOffReq, _x.GoNotifierSnvty, _x.DrowsinessSwtSts, _x.ELKSwtSts, _x.DistractionSwtSts, _x.SetDA_NOP, _x.SetSpeedCtrlSts, _x.CurveSpeedAssist, _x.TowModActv, _x.GoNotifierOnOff, _x.AESOnOffSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.ManHornSwtSts, _x.TLNotifierOnOff, _x.SetDA_SetSpdOffs, _x.CfgTaskSwitch, _x.SetDA_SetSpdOffsValue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.AEBOnOffReq, _x.DASTactileOnOff, _x.DrvAlertSysOnOff, _x.FCTAOnOffCmd, _x.FCWSetReq, _x.LnAssistTctlOnOff, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTAReq, _x.SetHMA, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.RCTABReq, _x.SAPAPrkgModReq, _x.CDCFailSts, _x.Set360AP, _x.SetDA_ALCS, _x.SetDA_SpeedAssist, _x.SetDA_SteerAssist, _x.SetSWF, _x.ELKOnOff, _x.SdowOnOffReq, _x.GoNotifierSnvty, _x.DrowsinessSwtSts, _x.ELKSwtSts, _x.DistractionSwtSts, _x.SetDA_NOP, _x.SetSpeedCtrlSts, _x.CurveSpeedAssist, _x.TowModActv, _x.GoNotifierOnOff, _x.AESOnOffSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.ManHornSwtSts, _x.TLNotifierOnOff, _x.SetDA_SetSpdOffs, _x.CfgTaskSwitch, _x.SetDA_SetSpdOffsValue,) = _get_struct_31i2Bi2B3i().unpack(str[start:end])
      self.AESOnOffSts = bool(self.AESOnOffSts)
      self.SwtichDA_NOP = bool(self.SwtichDA_NOP)
      self.ManHornSwtSts = bool(self.ManHornSwtSts)
      self.TLNotifierOnOff = bool(self.TLNotifierOnOff)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_31i2Bi2B3i().pack(_x.AEBOnOffReq, _x.DASTactileOnOff, _x.DrvAlertSysOnOff, _x.FCTAOnOffCmd, _x.FCWSetReq, _x.LnAssistTctlOnOff, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTAReq, _x.SetHMA, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.RCTABReq, _x.SAPAPrkgModReq, _x.CDCFailSts, _x.Set360AP, _x.SetDA_ALCS, _x.SetDA_SpeedAssist, _x.SetDA_SteerAssist, _x.SetSWF, _x.ELKOnOff, _x.SdowOnOffReq, _x.GoNotifierSnvty, _x.DrowsinessSwtSts, _x.ELKSwtSts, _x.DistractionSwtSts, _x.SetDA_NOP, _x.SetSpeedCtrlSts, _x.CurveSpeedAssist, _x.TowModActv, _x.GoNotifierOnOff, _x.AESOnOffSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.ManHornSwtSts, _x.TLNotifierOnOff, _x.SetDA_SetSpdOffs, _x.CfgTaskSwitch, _x.SetDA_SetSpdOffsValue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.AEBOnOffReq, _x.DASTactileOnOff, _x.DrvAlertSysOnOff, _x.FCTAOnOffCmd, _x.FCWSetReq, _x.LnAssistTctlOnOff, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTAReq, _x.SetHMA, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.RCTABReq, _x.SAPAPrkgModReq, _x.CDCFailSts, _x.Set360AP, _x.SetDA_ALCS, _x.SetDA_SpeedAssist, _x.SetDA_SteerAssist, _x.SetSWF, _x.ELKOnOff, _x.SdowOnOffReq, _x.GoNotifierSnvty, _x.DrowsinessSwtSts, _x.ELKSwtSts, _x.DistractionSwtSts, _x.SetDA_NOP, _x.SetSpeedCtrlSts, _x.CurveSpeedAssist, _x.TowModActv, _x.GoNotifierOnOff, _x.AESOnOffSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.ManHornSwtSts, _x.TLNotifierOnOff, _x.SetDA_SetSpdOffs, _x.CfgTaskSwitch, _x.SetDA_SetSpdOffsValue,) = _get_struct_31i2Bi2B3i().unpack(str[start:end])
      self.AESOnOffSts = bool(self.AESOnOffSts)
      self.SwtichDA_NOP = bool(self.SwtichDA_NOP)
      self.ManHornSwtSts = bool(self.ManHornSwtSts)
      self.TLNotifierOnOff = bool(self.TLNotifierOnOff)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_31i2Bi2B3i = None
def _get_struct_31i2Bi2B3i():
    global _struct_31i2Bi2B3i
    if _struct_31i2Bi2B3i is None:
        _struct_31i2Bi2B3i = struct.Struct("<31i2Bi2B3i")
    return _struct_31i2Bi2B3i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SdowBsdIfInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SdowBsdIfInfo(genpy.Message):
  _md5sum = "4a3ebdfa52c501e8a83582b623e771be"
  _type = "rospy_message_converter/SdowBsdIfInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool SDOWOnOffSts
bool LCAHapticOnOffSts
bool BSDLCAOnOffSts
int32[] SDOWWarnSts
int32 ExtReqRAD_RR
int32[] SDOWWarnReq
int32[] BSDLCASts
int32[] BSDLCAReWarnReq
int32[] FrntRSDSDisp
int32 ReRiRSDSDisp
"""
  __slots__ = ['SDOWOnOffSts','LCAHapticOnOffSts','BSDLCAOnOffSts','SDOWWarnSts','ExtReqRAD_RR','SDOWWarnReq','BSDLCASts','BSDLCAReWarnReq','FrntRSDSDisp','ReRiRSDSDisp']
  _slot_types = ['bool','bool','bool','int32[]','int32','int32[]','int32[]','int32[]','int32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SDOWOnOffSts,LCAHapticOnOffSts,BSDLCAOnOffSts,SDOWWarnSts,ExtReqRAD_RR,SDOWWarnReq,BSDLCASts,BSDLCAReWarnReq,FrntRSDSDisp,ReRiRSDSDisp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SdowBsdIfInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SDOWOnOffSts is None:
        self.SDOWOnOffSts = False
      if self.LCAHapticOnOffSts is None:
        self.LCAHapticOnOffSts = False
      if self.BSDLCAOnOffSts is None:
        self.BSDLCAOnOffSts = False
      if self.SDOWWarnSts is None:
        self.SDOWWarnSts = []
      if self.ExtReqRAD_RR is None:
        self.ExtReqRAD_RR = 0
      if self.SDOWWarnReq is None:
        self.SDOWWarnReq = []
      if self.BSDLCASts is None:
        self.BSDLCASts = []
      if self.BSDLCAReWarnReq is None:
        self.BSDLCAReWarnReq = []
      if self.FrntRSDSDisp is None:
        self.FrntRSDSDisp = []
      if self.ReRiRSDSDisp is None:
        self.ReRiRSDSDisp = 0
    else:
      self.SDOWOnOffSts = False
      self.LCAHapticOnOffSts = False
      self.BSDLCAOnOffSts = False
      self.SDOWWarnSts = []
      self.ExtReqRAD_RR = 0
      self.SDOWWarnReq = []
      self.BSDLCASts = []
      self.BSDLCAReWarnReq = []
      self.FrntRSDSDisp = []
      self.ReRiRSDSDisp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.SDOWOnOffSts, _x.LCAHapticOnOffSts, _x.BSDLCAOnOffSts))
      length = len(self.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SDOWWarnSts))
      _x = self.ExtReqRAD_RR
      buff.write(_get_struct_i().pack(_x))
      length = len(self.SDOWWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SDOWWarnReq))
      length = len(self.BSDLCASts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.BSDLCASts))
      length = len(self.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.BSDLCAReWarnReq))
      length = len(self.FrntRSDSDisp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.FrntRSDSDisp))
      _x = self.ReRiRSDSDisp
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.SDOWOnOffSts, _x.LCAHapticOnOffSts, _x.BSDLCAOnOffSts,) = _get_struct_3B().unpack(str[start:end])
      self.SDOWOnOffSts = bool(self.SDOWOnOffSts)
      self.LCAHapticOnOffSts = bool(self.LCAHapticOnOffSts)
      self.BSDLCAOnOffSts = bool(self.BSDLCAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SDOWWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.ExtReqRAD_RR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SDOWWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BSDLCASts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BSDLCAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FrntRSDSDisp = s.unpack(str[start:end])
      start = end
      end += 4
      (self.ReRiRSDSDisp,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.SDOWOnOffSts, _x.LCAHapticOnOffSts, _x.BSDLCAOnOffSts))
      length = len(self.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SDOWWarnSts.tostring())
      _x = self.ExtReqRAD_RR
      buff.write(_get_struct_i().pack(_x))
      length = len(self.SDOWWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SDOWWarnReq.tostring())
      length = len(self.BSDLCASts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.BSDLCASts.tostring())
      length = len(self.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.BSDLCAReWarnReq.tostring())
      length = len(self.FrntRSDSDisp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.FrntRSDSDisp.tostring())
      _x = self.ReRiRSDSDisp
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.SDOWOnOffSts, _x.LCAHapticOnOffSts, _x.BSDLCAOnOffSts,) = _get_struct_3B().unpack(str[start:end])
      self.SDOWOnOffSts = bool(self.SDOWOnOffSts)
      self.LCAHapticOnOffSts = bool(self.LCAHapticOnOffSts)
      self.BSDLCAOnOffSts = bool(self.BSDLCAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SDOWWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.ExtReqRAD_RR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SDOWWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BSDLCASts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BSDLCAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FrntRSDSDisp = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.ReRiRSDSDisp,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

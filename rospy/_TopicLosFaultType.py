# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TopicLosFaultType.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TopicLosFaultType(genpy.Message):
  _md5sum = "4be48803cda2aefc071e0945befe0873"
  _type = "rospy_message_converter/TopicLosFaultType"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool Veh_In_10ms
bool Veh_In_50ms
bool Vision_OD
bool Vision_Road
bool Vision_FreeSpace
bool Vision_FailSafe
bool Radar_Obj
bool MAP
bool Ehy_Out
bool Fct_Out
bool Fcts_Out
bool Parking_Out
bool Parking_Perception
bool Ads_Out
bool FM_Out
bool Global_Loc
bool Global_HD_Routes
bool Static_Map
bool Traffic_Info
bool Car_State
bool Ehy_TSE
bool Ehy_TSI
bool Ehy_TPP
bool Ehy_LPP
"""
  __slots__ = ['Veh_In_10ms','Veh_In_50ms','Vision_OD','Vision_Road','Vision_FreeSpace','Vision_FailSafe','Radar_Obj','MAP','Ehy_Out','Fct_Out','Fcts_Out','Parking_Out','Parking_Perception','Ads_Out','FM_Out','Global_Loc','Global_HD_Routes','Static_Map','Traffic_Info','Car_State','Ehy_TSE','Ehy_TSI','Ehy_TPP','Ehy_LPP']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Veh_In_10ms,Veh_In_50ms,Vision_OD,Vision_Road,Vision_FreeSpace,Vision_FailSafe,Radar_Obj,MAP,Ehy_Out,Fct_Out,Fcts_Out,Parking_Out,Parking_Perception,Ads_Out,FM_Out,Global_Loc,Global_HD_Routes,Static_Map,Traffic_Info,Car_State,Ehy_TSE,Ehy_TSI,Ehy_TPP,Ehy_LPP

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TopicLosFaultType, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Veh_In_10ms is None:
        self.Veh_In_10ms = False
      if self.Veh_In_50ms is None:
        self.Veh_In_50ms = False
      if self.Vision_OD is None:
        self.Vision_OD = False
      if self.Vision_Road is None:
        self.Vision_Road = False
      if self.Vision_FreeSpace is None:
        self.Vision_FreeSpace = False
      if self.Vision_FailSafe is None:
        self.Vision_FailSafe = False
      if self.Radar_Obj is None:
        self.Radar_Obj = False
      if self.MAP is None:
        self.MAP = False
      if self.Ehy_Out is None:
        self.Ehy_Out = False
      if self.Fct_Out is None:
        self.Fct_Out = False
      if self.Fcts_Out is None:
        self.Fcts_Out = False
      if self.Parking_Out is None:
        self.Parking_Out = False
      if self.Parking_Perception is None:
        self.Parking_Perception = False
      if self.Ads_Out is None:
        self.Ads_Out = False
      if self.FM_Out is None:
        self.FM_Out = False
      if self.Global_Loc is None:
        self.Global_Loc = False
      if self.Global_HD_Routes is None:
        self.Global_HD_Routes = False
      if self.Static_Map is None:
        self.Static_Map = False
      if self.Traffic_Info is None:
        self.Traffic_Info = False
      if self.Car_State is None:
        self.Car_State = False
      if self.Ehy_TSE is None:
        self.Ehy_TSE = False
      if self.Ehy_TSI is None:
        self.Ehy_TSI = False
      if self.Ehy_TPP is None:
        self.Ehy_TPP = False
      if self.Ehy_LPP is None:
        self.Ehy_LPP = False
    else:
      self.Veh_In_10ms = False
      self.Veh_In_50ms = False
      self.Vision_OD = False
      self.Vision_Road = False
      self.Vision_FreeSpace = False
      self.Vision_FailSafe = False
      self.Radar_Obj = False
      self.MAP = False
      self.Ehy_Out = False
      self.Fct_Out = False
      self.Fcts_Out = False
      self.Parking_Out = False
      self.Parking_Perception = False
      self.Ads_Out = False
      self.FM_Out = False
      self.Global_Loc = False
      self.Global_HD_Routes = False
      self.Static_Map = False
      self.Traffic_Info = False
      self.Car_State = False
      self.Ehy_TSE = False
      self.Ehy_TSI = False
      self.Ehy_TPP = False
      self.Ehy_LPP = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_24B().pack(_x.Veh_In_10ms, _x.Veh_In_50ms, _x.Vision_OD, _x.Vision_Road, _x.Vision_FreeSpace, _x.Vision_FailSafe, _x.Radar_Obj, _x.MAP, _x.Ehy_Out, _x.Fct_Out, _x.Fcts_Out, _x.Parking_Out, _x.Parking_Perception, _x.Ads_Out, _x.FM_Out, _x.Global_Loc, _x.Global_HD_Routes, _x.Static_Map, _x.Traffic_Info, _x.Car_State, _x.Ehy_TSE, _x.Ehy_TSI, _x.Ehy_TPP, _x.Ehy_LPP))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.Veh_In_10ms, _x.Veh_In_50ms, _x.Vision_OD, _x.Vision_Road, _x.Vision_FreeSpace, _x.Vision_FailSafe, _x.Radar_Obj, _x.MAP, _x.Ehy_Out, _x.Fct_Out, _x.Fcts_Out, _x.Parking_Out, _x.Parking_Perception, _x.Ads_Out, _x.FM_Out, _x.Global_Loc, _x.Global_HD_Routes, _x.Static_Map, _x.Traffic_Info, _x.Car_State, _x.Ehy_TSE, _x.Ehy_TSI, _x.Ehy_TPP, _x.Ehy_LPP,) = _get_struct_24B().unpack(str[start:end])
      self.Veh_In_10ms = bool(self.Veh_In_10ms)
      self.Veh_In_50ms = bool(self.Veh_In_50ms)
      self.Vision_OD = bool(self.Vision_OD)
      self.Vision_Road = bool(self.Vision_Road)
      self.Vision_FreeSpace = bool(self.Vision_FreeSpace)
      self.Vision_FailSafe = bool(self.Vision_FailSafe)
      self.Radar_Obj = bool(self.Radar_Obj)
      self.MAP = bool(self.MAP)
      self.Ehy_Out = bool(self.Ehy_Out)
      self.Fct_Out = bool(self.Fct_Out)
      self.Fcts_Out = bool(self.Fcts_Out)
      self.Parking_Out = bool(self.Parking_Out)
      self.Parking_Perception = bool(self.Parking_Perception)
      self.Ads_Out = bool(self.Ads_Out)
      self.FM_Out = bool(self.FM_Out)
      self.Global_Loc = bool(self.Global_Loc)
      self.Global_HD_Routes = bool(self.Global_HD_Routes)
      self.Static_Map = bool(self.Static_Map)
      self.Traffic_Info = bool(self.Traffic_Info)
      self.Car_State = bool(self.Car_State)
      self.Ehy_TSE = bool(self.Ehy_TSE)
      self.Ehy_TSI = bool(self.Ehy_TSI)
      self.Ehy_TPP = bool(self.Ehy_TPP)
      self.Ehy_LPP = bool(self.Ehy_LPP)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_24B().pack(_x.Veh_In_10ms, _x.Veh_In_50ms, _x.Vision_OD, _x.Vision_Road, _x.Vision_FreeSpace, _x.Vision_FailSafe, _x.Radar_Obj, _x.MAP, _x.Ehy_Out, _x.Fct_Out, _x.Fcts_Out, _x.Parking_Out, _x.Parking_Perception, _x.Ads_Out, _x.FM_Out, _x.Global_Loc, _x.Global_HD_Routes, _x.Static_Map, _x.Traffic_Info, _x.Car_State, _x.Ehy_TSE, _x.Ehy_TSI, _x.Ehy_TPP, _x.Ehy_LPP))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.Veh_In_10ms, _x.Veh_In_50ms, _x.Vision_OD, _x.Vision_Road, _x.Vision_FreeSpace, _x.Vision_FailSafe, _x.Radar_Obj, _x.MAP, _x.Ehy_Out, _x.Fct_Out, _x.Fcts_Out, _x.Parking_Out, _x.Parking_Perception, _x.Ads_Out, _x.FM_Out, _x.Global_Loc, _x.Global_HD_Routes, _x.Static_Map, _x.Traffic_Info, _x.Car_State, _x.Ehy_TSE, _x.Ehy_TSI, _x.Ehy_TPP, _x.Ehy_LPP,) = _get_struct_24B().unpack(str[start:end])
      self.Veh_In_10ms = bool(self.Veh_In_10ms)
      self.Veh_In_50ms = bool(self.Veh_In_50ms)
      self.Vision_OD = bool(self.Vision_OD)
      self.Vision_Road = bool(self.Vision_Road)
      self.Vision_FreeSpace = bool(self.Vision_FreeSpace)
      self.Vision_FailSafe = bool(self.Vision_FailSafe)
      self.Radar_Obj = bool(self.Radar_Obj)
      self.MAP = bool(self.MAP)
      self.Ehy_Out = bool(self.Ehy_Out)
      self.Fct_Out = bool(self.Fct_Out)
      self.Fcts_Out = bool(self.Fcts_Out)
      self.Parking_Out = bool(self.Parking_Out)
      self.Parking_Perception = bool(self.Parking_Perception)
      self.Ads_Out = bool(self.Ads_Out)
      self.FM_Out = bool(self.FM_Out)
      self.Global_Loc = bool(self.Global_Loc)
      self.Global_HD_Routes = bool(self.Global_HD_Routes)
      self.Static_Map = bool(self.Static_Map)
      self.Traffic_Info = bool(self.Traffic_Info)
      self.Car_State = bool(self.Car_State)
      self.Ehy_TSE = bool(self.Ehy_TSE)
      self.Ehy_TSI = bool(self.Ehy_TSI)
      self.Ehy_TPP = bool(self.Ehy_TPP)
      self.Ehy_LPP = bool(self.Ehy_LPP)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24B = None
def _get_struct_24B():
    global _struct_24B
    if _struct_24B is None:
        _struct_24B = struct.Struct("<24B")
    return _struct_24B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarTracker.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RadarTracker(genpy.Message):
  _md5sum = "4c0a1c3d3479b92a41a6c7a33bc2662c"
  _type = "rospy_message_converter/RadarTracker"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
uint32 sync_bit
RadarObject[] objects

================================================================================
MSG: rospy_message_converter/RadarObject
RadarObjectValidStatus valid_status
uint32 source
ObjMotion motion
ObjMotionState motion_state
int32 classification
uint32 sub_class
float32 class_prob
float32 obstacle_prob
float32 conf
uint32 age
uint32 id
int32 ref_point
float32 object_rcs
float32 assoc_det_max_height
float32 assoc_det_min_height
float32 assoc_det_height_std
uint32 assoc_number_of_det
bool f_multi_measures
bool f_overhead_suspicious
uint32 unique_id
bool f_crossing

================================================================================
MSG: rospy_message_converter/RadarObjectValidStatus
bool flag_valid
bool flag_measured
bool flag_hist

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std

================================================================================
MSG: rospy_message_converter/ObjMotionState
bool is_valid
bool is_moving
bool is_movable
bool direction
bool was_moved
bool is_crossing
"""
  __slots__ = ['timestamp','sync_bit','objects']
  _slot_types = ['uint64','uint32','rospy_message_converter/RadarObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,sync_bit,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarTracker, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.sync_bit is None:
        self.sync_bit = 0
      if self.objects is None:
        self.objects = []
    else:
      self.timestamp = 0
      self.sync_bit = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.valid_status
        _x = _v1
        buff.write(_get_struct_3B().pack(_x.flag_valid, _x.flag_measured, _x.flag_hist))
        _x = val1.source
        buff.write(_get_struct_I().pack(_x))
        _v2 = val1.motion
        _v3 = _v2.pos
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v4 = _v2.pos_std
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
        _v5 = _v2.vel
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v6 = _v2.vel_std
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
        _v7 = _v2.acc
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _v8 = _v2.acc_std
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
        _v9 = _v2.size
        _x = _v9
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v10 = _v2.size_std
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
        _x = _v2
        buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
        _v11 = val1.motion_state
        _x = _v11
        buff.write(_get_struct_6B().pack(_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing))
        _x = val1
        buff.write(_get_struct_iI3f2Ii4fI2BIB().pack(_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarObject()
        _v12 = val1.valid_status
        _x = _v12
        start = end
        end += 3
        (_x.flag_valid, _x.flag_measured, _x.flag_hist,) = _get_struct_3B().unpack(str[start:end])
        _v12.flag_valid = bool(_v12.flag_valid)
        _v12.flag_measured = bool(_v12.flag_measured)
        _v12.flag_hist = bool(_v12.flag_hist)
        start = end
        end += 4
        (val1.source,) = _get_struct_I().unpack(str[start:end])
        _v13 = val1.motion
        _v14 = _v13.pos
        _x = _v14
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v15 = _v13.pos_std
        _x = _v15
        start = end
        end += 12
        (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
        _v16 = _v13.vel
        _x = _v16
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v17 = _v13.vel_std
        _x = _v17
        start = end
        end += 12
        (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
        _v18 = _v13.acc
        _x = _v18
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _v19 = _v13.acc_std
        _x = _v19
        start = end
        end += 12
        (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
        _v20 = _v13.size
        _x = _v20
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v21 = _v13.size_std
        _x = _v21
        start = end
        end += 12
        (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
        _x = _v13
        start = end
        end += 12
        (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
        _v22 = val1.motion_state
        _x = _v22
        start = end
        end += 6
        (_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing,) = _get_struct_6B().unpack(str[start:end])
        _v22.is_valid = bool(_v22.is_valid)
        _v22.is_moving = bool(_v22.is_moving)
        _v22.is_movable = bool(_v22.is_movable)
        _v22.direction = bool(_v22.direction)
        _v22.was_moved = bool(_v22.was_moved)
        _v22.is_crossing = bool(_v22.is_crossing)
        _x = val1
        start = end
        end += 59
        (_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_iI3f2Ii4fI2BIB().unpack(str[start:end])
        val1.f_multi_measures = bool(val1.f_multi_measures)
        val1.f_overhead_suspicious = bool(val1.f_overhead_suspicious)
        val1.f_crossing = bool(val1.f_crossing)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v23 = val1.valid_status
        _x = _v23
        buff.write(_get_struct_3B().pack(_x.flag_valid, _x.flag_measured, _x.flag_hist))
        _x = val1.source
        buff.write(_get_struct_I().pack(_x))
        _v24 = val1.motion
        _v25 = _v24.pos
        _x = _v25
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v26 = _v24.pos_std
        _x = _v26
        buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
        _v27 = _v24.vel
        _x = _v27
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v28 = _v24.vel_std
        _x = _v28
        buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
        _v29 = _v24.acc
        _x = _v29
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _v30 = _v24.acc_std
        _x = _v30
        buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
        _v31 = _v24.size
        _x = _v31
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v32 = _v24.size_std
        _x = _v32
        buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
        _x = _v24
        buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
        _v33 = val1.motion_state
        _x = _v33
        buff.write(_get_struct_6B().pack(_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing))
        _x = val1
        buff.write(_get_struct_iI3f2Ii4fI2BIB().pack(_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarObject()
        _v34 = val1.valid_status
        _x = _v34
        start = end
        end += 3
        (_x.flag_valid, _x.flag_measured, _x.flag_hist,) = _get_struct_3B().unpack(str[start:end])
        _v34.flag_valid = bool(_v34.flag_valid)
        _v34.flag_measured = bool(_v34.flag_measured)
        _v34.flag_hist = bool(_v34.flag_hist)
        start = end
        end += 4
        (val1.source,) = _get_struct_I().unpack(str[start:end])
        _v35 = val1.motion
        _v36 = _v35.pos
        _x = _v36
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v37 = _v35.pos_std
        _x = _v37
        start = end
        end += 12
        (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
        _v38 = _v35.vel
        _x = _v38
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v39 = _v35.vel_std
        _x = _v39
        start = end
        end += 12
        (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
        _v40 = _v35.acc
        _x = _v40
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _v41 = _v35.acc_std
        _x = _v41
        start = end
        end += 12
        (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
        _v42 = _v35.size
        _x = _v42
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v43 = _v35.size_std
        _x = _v43
        start = end
        end += 12
        (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
        _x = _v35
        start = end
        end += 12
        (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
        _v44 = val1.motion_state
        _x = _v44
        start = end
        end += 6
        (_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing,) = _get_struct_6B().unpack(str[start:end])
        _v44.is_valid = bool(_v44.is_valid)
        _v44.is_moving = bool(_v44.is_moving)
        _v44.is_movable = bool(_v44.is_movable)
        _v44.direction = bool(_v44.direction)
        _v44.was_moved = bool(_v44.was_moved)
        _v44.is_crossing = bool(_v44.is_crossing)
        _x = val1
        start = end
        end += 59
        (_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_iI3f2Ii4fI2BIB().unpack(str[start:end])
        val1.f_multi_measures = bool(val1.f_multi_measures)
        val1.f_overhead_suspicious = bool(val1.f_overhead_suspicious)
        val1.f_crossing = bool(val1.f_crossing)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_QI = None
def _get_struct_QI():
    global _struct_QI
    if _struct_QI is None:
        _struct_QI = struct.Struct("<QI")
    return _struct_QI
_struct_fif = None
def _get_struct_fif():
    global _struct_fif
    if _struct_fif is None:
        _struct_fif = struct.Struct("<fif")
    return _struct_fif
_struct_iI3f2Ii4fI2BIB = None
def _get_struct_iI3f2Ii4fI2BIB():
    global _struct_iI3f2Ii4fI2BIB
    if _struct_iI3f2Ii4fI2BIB is None:
        _struct_iI3f2Ii4fI2BIB = struct.Struct("<iI3f2Ii4fI2BIB")
    return _struct_iI3f2Ii4fI2BIB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DataFilterEvent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DataFilterEvent(genpy.Message):
  _md5sum = "3af560209df7a1e829d37c5fbe720d34"
  _type = "rospy_message_converter/DataFilterEvent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string meta
uint32 priority
uint64 expiration_time
DdsDlbEvent dds_event
CamDlbEvent camera_event
LidarDlbEvent lidar_event
LogDlbEvent log_event
string uuid
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/DdsDlbEvent
string uuid
string event
uint32 preWindow
uint32 postWindow
string[] topics
string storage_folder
uint64 timestamp_utc
uint64 timestamp_ptp
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/CamDlbEvent
string uuid
string event
string storage_folder
int32 record_type
CameraDLBProperty[] cameras_prop
uint64 timestamp_utc
uint64 timestamp_ptp
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/CameraDLBProperty
uint32 pre_window
uint32 post_window
string camera
string datamask_conf

================================================================================
MSG: rospy_message_converter/LidarDlbEvent
string uuid
string event
uint32 preWindow
uint32 postWindow
string storage_folder
int32 record_type
uint64 timestamp_utc
uint64 timestamp_ptp
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LogDlbEvent
string uuid
string event
uint32 pre_window
uint32 post_window
string[] app_list
string storage_folder
uint64 timestamp_utc
uint64 timestamp_ptp
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['meta','priority','expiration_time','dds_event','camera_event','lidar_event','log_event','uuid','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['string','uint32','uint64','rospy_message_converter/DdsDlbEvent','rospy_message_converter/CamDlbEvent','rospy_message_converter/LidarDlbEvent','rospy_message_converter/LogDlbEvent','string','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       meta,priority,expiration_time,dds_event,camera_event,lidar_event,log_event,uuid,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataFilterEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.meta is None:
        self.meta = ''
      if self.priority is None:
        self.priority = 0
      if self.expiration_time is None:
        self.expiration_time = 0
      if self.dds_event is None:
        self.dds_event = rospy_message_converter.msg.DdsDlbEvent()
      if self.camera_event is None:
        self.camera_event = rospy_message_converter.msg.CamDlbEvent()
      if self.lidar_event is None:
        self.lidar_event = rospy_message_converter.msg.LidarDlbEvent()
      if self.log_event is None:
        self.log_event = rospy_message_converter.msg.LogDlbEvent()
      if self.uuid is None:
        self.uuid = ''
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.meta = ''
      self.priority = 0
      self.expiration_time = 0
      self.dds_event = rospy_message_converter.msg.DdsDlbEvent()
      self.camera_event = rospy_message_converter.msg.CamDlbEvent()
      self.lidar_event = rospy_message_converter.msg.LidarDlbEvent()
      self.log_event = rospy_message_converter.msg.LogDlbEvent()
      self.uuid = ''
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.meta
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.priority, _x.expiration_time))
      _x = self.dds_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dds_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.dds_event.preWindow, _x.dds_event.postWindow))
      length = len(self.dds_event.topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.dds_event.topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.dds_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.dds_event.timestamp_utc, _x.dds_event.timestamp_ptp, _x.dds_event.publish_ptp_ts))
      _x = self.dds_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dds_event.counter, _x.dds_event.publish_ts))
      _x = self.camera_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_event.record_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.camera_event.cameras_prop)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_event.cameras_prop:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.pre_window, _x.post_window))
        _x = val1.camera
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.datamask_conf
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.camera_event.timestamp_utc, _x.camera_event.timestamp_ptp, _x.camera_event.publish_ptp_ts))
      _x = self.camera_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.camera_event.counter, _x.camera_event.publish_ts))
      _x = self.lidar_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lidar_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.lidar_event.preWindow, _x.lidar_event.postWindow))
      _x = self.lidar_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3Q().pack(_x.lidar_event.record_type, _x.lidar_event.timestamp_utc, _x.lidar_event.timestamp_ptp, _x.lidar_event.publish_ptp_ts))
      _x = self.lidar_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.lidar_event.counter, _x.lidar_event.publish_ts))
      _x = self.log_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.log_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.log_event.pre_window, _x.log_event.post_window))
      length = len(self.log_event.app_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.log_event.app_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.log_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.log_event.timestamp_utc, _x.log_event.timestamp_ptp, _x.log_event.publish_ptp_ts))
      _x = self.log_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.log_event.counter, _x.log_event.publish_ts))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dds_event is None:
        self.dds_event = rospy_message_converter.msg.DdsDlbEvent()
      if self.camera_event is None:
        self.camera_event = rospy_message_converter.msg.CamDlbEvent()
      if self.lidar_event is None:
        self.lidar_event = rospy_message_converter.msg.LidarDlbEvent()
      if self.log_event is None:
        self.log_event = rospy_message_converter.msg.LogDlbEvent()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.meta = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.meta = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.priority, _x.expiration_time,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.event = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.dds_event.preWindow, _x.dds_event.postWindow,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dds_event.topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.dds_event.topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.storage_folder = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.dds_event.timestamp_utc, _x.dds_event.timestamp_ptp, _x.dds_event.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dds_event.counter, _x.dds_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.event = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.storage_folder = str[start:end]
      start = end
      end += 4
      (self.camera_event.record_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_event.cameras_prop = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CameraDLBProperty()
        _x = val1
        start = end
        end += 8
        (_x.pre_window, _x.post_window,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.datamask_conf = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.datamask_conf = str[start:end]
        self.camera_event.cameras_prop.append(val1)
      _x = self
      start = end
      end += 24
      (_x.camera_event.timestamp_utc, _x.camera_event.timestamp_ptp, _x.camera_event.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.camera_event.counter, _x.camera_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.event = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.lidar_event.preWindow, _x.lidar_event.postWindow,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.storage_folder = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.lidar_event.record_type, _x.lidar_event.timestamp_utc, _x.lidar_event.timestamp_ptp, _x.lidar_event.publish_ptp_ts,) = _get_struct_i3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.lidar_event.counter, _x.lidar_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.event = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.log_event.pre_window, _x.log_event.post_window,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.log_event.app_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.log_event.app_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.storage_folder = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.log_event.timestamp_utc, _x.log_event.timestamp_ptp, _x.log_event.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.log_event.counter, _x.log_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.meta
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.priority, _x.expiration_time))
      _x = self.dds_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dds_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.dds_event.preWindow, _x.dds_event.postWindow))
      length = len(self.dds_event.topics)
      buff.write(_struct_I.pack(length))
      for val1 in self.dds_event.topics:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.dds_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.dds_event.timestamp_utc, _x.dds_event.timestamp_ptp, _x.dds_event.publish_ptp_ts))
      _x = self.dds_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dds_event.counter, _x.dds_event.publish_ts))
      _x = self.camera_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_event.record_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.camera_event.cameras_prop)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_event.cameras_prop:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.pre_window, _x.post_window))
        _x = val1.camera
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.datamask_conf
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.camera_event.timestamp_utc, _x.camera_event.timestamp_ptp, _x.camera_event.publish_ptp_ts))
      _x = self.camera_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.camera_event.counter, _x.camera_event.publish_ts))
      _x = self.lidar_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lidar_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.lidar_event.preWindow, _x.lidar_event.postWindow))
      _x = self.lidar_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3Q().pack(_x.lidar_event.record_type, _x.lidar_event.timestamp_utc, _x.lidar_event.timestamp_ptp, _x.lidar_event.publish_ptp_ts))
      _x = self.lidar_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.lidar_event.counter, _x.lidar_event.publish_ts))
      _x = self.log_event.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.log_event.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.log_event.pre_window, _x.log_event.post_window))
      length = len(self.log_event.app_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.log_event.app_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.log_event.storage_folder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.log_event.timestamp_utc, _x.log_event.timestamp_ptp, _x.log_event.publish_ptp_ts))
      _x = self.log_event.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.log_event.counter, _x.log_event.publish_ts))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dds_event is None:
        self.dds_event = rospy_message_converter.msg.DdsDlbEvent()
      if self.camera_event is None:
        self.camera_event = rospy_message_converter.msg.CamDlbEvent()
      if self.lidar_event is None:
        self.lidar_event = rospy_message_converter.msg.LidarDlbEvent()
      if self.log_event is None:
        self.log_event = rospy_message_converter.msg.LogDlbEvent()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.meta = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.meta = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.priority, _x.expiration_time,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.event = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.dds_event.preWindow, _x.dds_event.postWindow,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dds_event.topics = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.dds_event.topics.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.storage_folder = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.dds_event.timestamp_utc, _x.dds_event.timestamp_ptp, _x.dds_event.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dds_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dds_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dds_event.counter, _x.dds_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.event = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.storage_folder = str[start:end]
      start = end
      end += 4
      (self.camera_event.record_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_event.cameras_prop = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CameraDLBProperty()
        _x = val1
        start = end
        end += 8
        (_x.pre_window, _x.post_window,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.camera = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.camera = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.datamask_conf = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.datamask_conf = str[start:end]
        self.camera_event.cameras_prop.append(val1)
      _x = self
      start = end
      end += 24
      (_x.camera_event.timestamp_utc, _x.camera_event.timestamp_ptp, _x.camera_event.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.camera_event.counter, _x.camera_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.event = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.lidar_event.preWindow, _x.lidar_event.postWindow,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.storage_folder = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.lidar_event.record_type, _x.lidar_event.timestamp_utc, _x.lidar_event.timestamp_ptp, _x.lidar_event.publish_ptp_ts,) = _get_struct_i3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.lidar_event.counter, _x.lidar_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.event = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.log_event.pre_window, _x.log_event.post_window,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.log_event.app_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.log_event.app_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.storage_folder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.storage_folder = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.log_event.timestamp_utc, _x.log_event.timestamp_ptp, _x.log_event.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.log_event.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.log_event.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.log_event.counter, _x.log_event.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3Q = None
def _get_struct_3Q():
    global _struct_3Q
    if _struct_3Q is None:
        _struct_3Q = struct.Struct("<3Q")
    return _struct_3Q
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i3Q = None
def _get_struct_i3Q():
    global _struct_i3Q
    if _struct_i3Q is None:
        _struct_i3Q = struct.Struct("<i3Q")
    return _struct_i3Q

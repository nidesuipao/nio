# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/GOFOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GOFOut(genpy.Message):
  _md5sum = "c59c565ac9aa22a84ea8e4b9691c8ce4"
  _type = "rospy_message_converter/GOFOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 checkID
bool checkvalid
bool classcheck
bool fustcheck
bool agecheck
bool predcheck
bool frespacheck
"""
  __slots__ = ['checkID','checkvalid','classcheck','fustcheck','agecheck','predcheck','frespacheck']
  _slot_types = ['uint32','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       checkID,checkvalid,classcheck,fustcheck,agecheck,predcheck,frespacheck

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GOFOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.checkID is None:
        self.checkID = 0
      if self.checkvalid is None:
        self.checkvalid = False
      if self.classcheck is None:
        self.classcheck = False
      if self.fustcheck is None:
        self.fustcheck = False
      if self.agecheck is None:
        self.agecheck = False
      if self.predcheck is None:
        self.predcheck = False
      if self.frespacheck is None:
        self.frespacheck = False
    else:
      self.checkID = 0
      self.checkvalid = False
      self.classcheck = False
      self.fustcheck = False
      self.agecheck = False
      self.predcheck = False
      self.frespacheck = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I6B().pack(_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck,) = _get_struct_I6B().unpack(str[start:end])
      self.checkvalid = bool(self.checkvalid)
      self.classcheck = bool(self.classcheck)
      self.fustcheck = bool(self.fustcheck)
      self.agecheck = bool(self.agecheck)
      self.predcheck = bool(self.predcheck)
      self.frespacheck = bool(self.frespacheck)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I6B().pack(_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck,) = _get_struct_I6B().unpack(str[start:end])
      self.checkvalid = bool(self.checkvalid)
      self.classcheck = bool(self.classcheck)
      self.fustcheck = bool(self.fustcheck)
      self.agecheck = bool(self.agecheck)
      self.predcheck = bool(self.predcheck)
      self.frespacheck = bool(self.frespacheck)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I6B = None
def _get_struct_I6B():
    global _struct_I6B
    if _struct_I6B is None:
        _struct_I6B = struct.Struct("<I6B")
    return _struct_I6B

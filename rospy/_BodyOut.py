# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BodyOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BodyOut(genpy.Message):
  _md5sum = "244d57aee1c67278dbad82d96cef0b17"
  _type = "rospy_message_converter/BodyOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 TurnLightReq1
int32 horn_request
int32 door_unlock_request
int32 rear_view_mirror_request
int32 auxilary_lighting_request
int32 ad_drive_state
int32 wind_shield_wiper_req
int32 parking_platform_error
int32 parking_feature_error
int32 parking_feature_status
int32 parking_feature_type
"""
  __slots__ = ['TurnLightReq1','horn_request','door_unlock_request','rear_view_mirror_request','auxilary_lighting_request','ad_drive_state','wind_shield_wiper_req','parking_platform_error','parking_feature_error','parking_feature_status','parking_feature_type']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TurnLightReq1,horn_request,door_unlock_request,rear_view_mirror_request,auxilary_lighting_request,ad_drive_state,wind_shield_wiper_req,parking_platform_error,parking_feature_error,parking_feature_status,parking_feature_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.TurnLightReq1 is None:
        self.TurnLightReq1 = 0
      if self.horn_request is None:
        self.horn_request = 0
      if self.door_unlock_request is None:
        self.door_unlock_request = 0
      if self.rear_view_mirror_request is None:
        self.rear_view_mirror_request = 0
      if self.auxilary_lighting_request is None:
        self.auxilary_lighting_request = 0
      if self.ad_drive_state is None:
        self.ad_drive_state = 0
      if self.wind_shield_wiper_req is None:
        self.wind_shield_wiper_req = 0
      if self.parking_platform_error is None:
        self.parking_platform_error = 0
      if self.parking_feature_error is None:
        self.parking_feature_error = 0
      if self.parking_feature_status is None:
        self.parking_feature_status = 0
      if self.parking_feature_type is None:
        self.parking_feature_type = 0
    else:
      self.TurnLightReq1 = 0
      self.horn_request = 0
      self.door_unlock_request = 0
      self.rear_view_mirror_request = 0
      self.auxilary_lighting_request = 0
      self.ad_drive_state = 0
      self.wind_shield_wiper_req = 0
      self.parking_platform_error = 0
      self.parking_feature_error = 0
      self.parking_feature_status = 0
      self.parking_feature_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11i().pack(_x.TurnLightReq1, _x.horn_request, _x.door_unlock_request, _x.rear_view_mirror_request, _x.auxilary_lighting_request, _x.ad_drive_state, _x.wind_shield_wiper_req, _x.parking_platform_error, _x.parking_feature_error, _x.parking_feature_status, _x.parking_feature_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.TurnLightReq1, _x.horn_request, _x.door_unlock_request, _x.rear_view_mirror_request, _x.auxilary_lighting_request, _x.ad_drive_state, _x.wind_shield_wiper_req, _x.parking_platform_error, _x.parking_feature_error, _x.parking_feature_status, _x.parking_feature_type,) = _get_struct_11i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11i().pack(_x.TurnLightReq1, _x.horn_request, _x.door_unlock_request, _x.rear_view_mirror_request, _x.auxilary_lighting_request, _x.ad_drive_state, _x.wind_shield_wiper_req, _x.parking_platform_error, _x.parking_feature_error, _x.parking_feature_status, _x.parking_feature_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.TurnLightReq1, _x.horn_request, _x.door_unlock_request, _x.rear_view_mirror_request, _x.auxilary_lighting_request, _x.ad_drive_state, _x.wind_shield_wiper_req, _x.parking_platform_error, _x.parking_feature_error, _x.parking_feature_status, _x.parking_feature_type,) = _get_struct_11i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11i = None
def _get_struct_11i():
    global _struct_11i
    if _struct_11i is None:
        _struct_11i = struct.Struct("<11i")
    return _struct_11i

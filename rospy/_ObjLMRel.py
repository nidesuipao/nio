# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ObjLMRel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ObjLMRel(genpy.Message):
  _md5sum = "0a2afca4f826c95ee818643b4b38daa8"
  _type = "rospy_message_converter/ObjLMRel"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RoadDetection road_detection
ObjRelRes[] pos_relation

================================================================================
MSG: rospy_message_converter/RoadDetection
uint64 timestamp
LaneDetection laneline
RoadSlop slop
LaneLPP lpp
Roadedge[] roadedge
StopLine[] stopline
GuidePoint guidepoint
LaneSemantic[] lanesemantic
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LaneDetection
float32 LD_Lane_Width
bool LD_Crossing_Flag
LaneLine[] line

================================================================================
MSG: rospy_message_converter/LaneLine
int32 LD_Role
LineProperty LD_First_Line
bool LD_Is_Multi_Clothoid
LineProperty LD_Second_Line
bool LD_Special_Point_Is_Detected
int32 LD_Special_Point_Type
Point LD_Special_Point
Point[] LD_Point
float32 LD_Dash_Average_Gap
float32 LD_Dash_Average_Length
bool LD_Crossing
uint32 LD_Crossing_ID
int32 LD_Measuring_Status
int32 LD_Prediction_Reason
uint32 LD_Track_ID
uint32 LD_Track_Age
int32 LD_Quality
float32 LD_Confidence
float32 LD_Marker_Width

================================================================================
MSG: rospy_message_converter/LineProperty
int32 LD_Type
int32 LD_Color
PolyLine LD_Line
float32 LD_Start
float32 LD_End
int32 LD_End_Reason

================================================================================
MSG: rospy_message_converter/PolyLine
float32 line_C0
float32 line_C1
float32 line_C2
float32 line_C3

================================================================================
MSG: rospy_message_converter/Point
float32 LD_Point_Lat
float32 LD_Point_Long
float32 LD_Point_Alti

================================================================================
MSG: rospy_message_converter/RoadSlop
bool LD_Road_Vertical_Surface_Available
float32 LD_Road_Vertical_Surface_Start
float32 LD_Road_Vertical_Surface_End
PolyLine LD_Road_Vertical_Surface

================================================================================
MSG: rospy_message_converter/LaneLPP
bool LPP_Available
int32 LPP_Source
float32 LPP_Ctrl_Point_Lat
float32 LPP_Ctrl_Point_Long
float32 LPP_Confidence
bool LPP_First_Valid
float32 LPP_First_VR_End
PolyLine LPP_First
bool LPP_Second_Valid
float32 LPP_Second_VR_End
PolyLine LPP_Second

================================================================================
MSG: rospy_message_converter/Roadedge
int32 LD_RE_Type
int32 LD_RE_Side
int32 LD_RE_From_Host_Index
uint32 LD_RE_ID
uint32 LD_RE_Age
float32 LD_RE_Height
float32 LD_RE_VR_Start
float32 LD_RE_VR_End
PolyLine LD_RE_Line
float32 LD_RE_Confidence
int32 LDRE_Class

================================================================================
MSG: rospy_message_converter/StopLine
bool SL_Zebra_Is_Detected
float32 SL_Zebra_Lat_0
float32 SL_Zebra_Long_0
float32 SL_Zebra_Lat_1
float32 SL_Zebra_Long_1
float32 SL_Zebra_Lat_2
float32 SL_Zebra_Long_2
float32 SL_Zebra_Lat_3
float32 SL_Zebra_Long_3
bool SL_Is_Detected
uint32 SL_ID
int32 SL_Type
int32 SL_Measure_Status
float32 SL_Probability
float32 SL_Long_Dist_L
float32 SL_Long_Dist_R
float32 SL_Lat_Dist_L
float32 SL_Lat_Dist_R
int32 SL_Lane_Assessment

================================================================================
MSG: rospy_message_converter/GuidePoint
bool INTP_Is_Highway_Merge_Left
bool INTP_Is_Highway_Merge_Right
bool INTP_Is_Highway_Exit_Left
bool INTP_Is_Highway_Exit_Right
InterestPoint[] INTP_Point

================================================================================
MSG: rospy_message_converter/InterestPoint
int32 INTP_Type
uint32 INTP_ID
uint32 INTP_Age
int32 INTP_Line_Role
float32 INTP_Long_Distance
float32 INTP_Lat_Distance
float32 INTP_Exist_Probability

================================================================================
MSG: rospy_message_converter/LaneSemantic
int32 SLD_Direction
uint32 SLD_ID
uint32 SLD_Count
float32 SLD_Lat
float32 SLD_Long
int32 SLD_Orientation
float32 SLD_Orientation_Probability
float32 SLD_Direction_Probability
int32 SLD_Role
int32 SLD_Type
float32 SLD_No_Park_Zone_Lat_0
float32 SLD_No_Park_Zone_Long_0
float32 SLD_No_Park_Zone_Lat_1
float32 SLD_No_Park_Zone_Long_1
float32 SLD_No_Park_Zone_Lat_2
float32 SLD_No_Park_Zone_Long_2
float32 SLD_No_Park_Zone_Lat_3
float32 SLD_No_Park_Zone_Long_3
int32 SLD_Road_Status

================================================================================
MSG: rospy_message_converter/ObjRelRes
uint32 obj_id
LMRelRes[] lm_relation

================================================================================
MSG: rospy_message_converter/LMRelRes
uint32 lm_id
int32 relative_pos
float32 dist
float32 conf
"""
  __slots__ = ['road_detection','pos_relation']
  _slot_types = ['rospy_message_converter/RoadDetection','rospy_message_converter/ObjRelRes[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       road_detection,pos_relation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjLMRel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.road_detection is None:
        self.road_detection = rospy_message_converter.msg.RoadDetection()
      if self.pos_relation is None:
        self.pos_relation = []
    else:
      self.road_detection = rospy_message_converter.msg.RoadDetection()
      self.pos_relation = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QfB().pack(_x.road_detection.timestamp, _x.road_detection.laneline.LD_Lane_Width, _x.road_detection.laneline.LD_Crossing_Flag))
      length = len(self.road_detection.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.LD_First_Line
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v2 = _v1.LD_Line
        _x = _v2
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v1
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v3 = val1.LD_Second_Line
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v4 = _v3.LD_Line
        _x = _v4
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v3
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v5 = val1.LD_Special_Point
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.road_detection.slop.LD_Road_Vertical_Surface_End, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.road_detection.lpp.LPP_Available, _x.road_detection.lpp.LPP_Source, _x.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.road_detection.lpp.LPP_Ctrl_Point_Long, _x.road_detection.lpp.LPP_Confidence, _x.road_detection.lpp.LPP_First_Valid, _x.road_detection.lpp.LPP_First_VR_End, _x.road_detection.lpp.LPP_First.line_C0, _x.road_detection.lpp.LPP_First.line_C1, _x.road_detection.lpp.LPP_First.line_C2, _x.road_detection.lpp.LPP_First.line_C3, _x.road_detection.lpp.LPP_Second_Valid, _x.road_detection.lpp.LPP_Second_VR_End, _x.road_detection.lpp.LPP_Second.line_C0, _x.road_detection.lpp.LPP_Second.line_C1, _x.road_detection.lpp.LPP_Second.line_C2, _x.road_detection.lpp.LPP_Second.line_C3))
      length = len(self.road_detection.roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End))
        _v6 = val1.LD_RE_Line
        _x = _v6
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = val1
        buff.write(_get_struct_fi().pack(_x.LD_RE_Confidence, _x.LDRE_Class))
      length = len(self.road_detection.stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Right))
      length = len(self.road_detection.guidepoint.INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.guidepoint.INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
      length = len(self.road_detection.lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status))
      _x = self.road_detection.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.road_detection.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.road_detection.counter, _x.road_detection.publish_ts))
      length = len(self.pos_relation)
      buff.write(_struct_I.pack(length))
      for val1 in self.pos_relation:
        _x = val1.obj_id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.lm_relation)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lm_relation:
          _x = val2
          buff.write(_get_struct_Ii2f().pack(_x.lm_id, _x.relative_pos, _x.dist, _x.conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.road_detection is None:
        self.road_detection = rospy_message_converter.msg.RoadDetection()
      if self.pos_relation is None:
        self.pos_relation = None
      end = 0
      _x = self
      start = end
      end += 13
      (_x.road_detection.timestamp, _x.road_detection.laneline.LD_Lane_Width, _x.road_detection.laneline.LD_Crossing_Flag,) = _get_struct_QfB().unpack(str[start:end])
      self.road_detection.laneline.LD_Crossing_Flag = bool(self.road_detection.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.LD_First_Line
        _x = _v7
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v8 = _v7.LD_Line
        _x = _v8
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v7
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v9 = val1.LD_Second_Line
        _x = _v9
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v10 = _v9.LD_Line
        _x = _v10
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v9
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v11 = val1.LD_Special_Point
        _x = _v11
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.road_detection.laneline.line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.road_detection.slop.LD_Road_Vertical_Surface_End, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.road_detection.lpp.LPP_Available, _x.road_detection.lpp.LPP_Source, _x.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.road_detection.lpp.LPP_Ctrl_Point_Long, _x.road_detection.lpp.LPP_Confidence, _x.road_detection.lpp.LPP_First_Valid, _x.road_detection.lpp.LPP_First_VR_End, _x.road_detection.lpp.LPP_First.line_C0, _x.road_detection.lpp.LPP_First.line_C1, _x.road_detection.lpp.LPP_First.line_C2, _x.road_detection.lpp.LPP_First.line_C3, _x.road_detection.lpp.LPP_Second_Valid, _x.road_detection.lpp.LPP_Second_VR_End, _x.road_detection.lpp.LPP_Second.line_C0, _x.road_detection.lpp.LPP_Second.line_C1, _x.road_detection.lpp.LPP_Second.line_C2, _x.road_detection.lpp.LPP_Second.line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.road_detection.slop.LD_Road_Vertical_Surface_Available = bool(self.road_detection.slop.LD_Road_Vertical_Surface_Available)
      self.road_detection.lpp.LPP_Available = bool(self.road_detection.lpp.LPP_Available)
      self.road_detection.lpp.LPP_First_Valid = bool(self.road_detection.lpp.LPP_First_Valid)
      self.road_detection.lpp.LPP_Second_Valid = bool(self.road_detection.lpp.LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v12 = val1.LD_RE_Line
        _x = _v12
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.LD_RE_Confidence, _x.LDRE_Class,) = _get_struct_fi().unpack(str[start:end])
        self.road_detection.roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StopLine()
        _x = val1
        start = end
        end += 70
        (_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.SL_Zebra_Is_Detected = bool(val1.SL_Zebra_Is_Detected)
        val1.SL_Is_Detected = bool(val1.SL_Is_Detected)
        self.road_detection.stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.road_detection.guidepoint.INTP_Is_Highway_Merge_Left = bool(self.road_detection.guidepoint.INTP_Is_Highway_Merge_Left)
      self.road_detection.guidepoint.INTP_Is_Highway_Merge_Right = bool(self.road_detection.guidepoint.INTP_Is_Highway_Merge_Right)
      self.road_detection.guidepoint.INTP_Is_Highway_Exit_Left = bool(self.road_detection.guidepoint.INTP_Is_Highway_Exit_Left)
      self.road_detection.guidepoint.INTP_Is_Highway_Exit_Right = bool(self.road_detection.guidepoint.INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.guidepoint.INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.road_detection.guidepoint.INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.road_detection.lanesemantic.append(val1)
      start = end
      end += 8
      (self.road_detection.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.road_detection.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.road_detection.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.road_detection.counter, _x.road_detection.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pos_relation = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelRes()
        start = end
        end += 4
        (val1.obj_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lm_relation = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.LMRelRes()
          _x = val2
          start = end
          end += 16
          (_x.lm_id, _x.relative_pos, _x.dist, _x.conf,) = _get_struct_Ii2f().unpack(str[start:end])
          val1.lm_relation.append(val2)
        self.pos_relation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QfB().pack(_x.road_detection.timestamp, _x.road_detection.laneline.LD_Lane_Width, _x.road_detection.laneline.LD_Crossing_Flag))
      length = len(self.road_detection.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v13 = val1.LD_First_Line
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v14 = _v13.LD_Line
        _x = _v14
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v13
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v15 = val1.LD_Second_Line
        _x = _v15
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v16 = _v15.LD_Line
        _x = _v16
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v15
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v17 = val1.LD_Special_Point
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.road_detection.slop.LD_Road_Vertical_Surface_End, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.road_detection.lpp.LPP_Available, _x.road_detection.lpp.LPP_Source, _x.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.road_detection.lpp.LPP_Ctrl_Point_Long, _x.road_detection.lpp.LPP_Confidence, _x.road_detection.lpp.LPP_First_Valid, _x.road_detection.lpp.LPP_First_VR_End, _x.road_detection.lpp.LPP_First.line_C0, _x.road_detection.lpp.LPP_First.line_C1, _x.road_detection.lpp.LPP_First.line_C2, _x.road_detection.lpp.LPP_First.line_C3, _x.road_detection.lpp.LPP_Second_Valid, _x.road_detection.lpp.LPP_Second_VR_End, _x.road_detection.lpp.LPP_Second.line_C0, _x.road_detection.lpp.LPP_Second.line_C1, _x.road_detection.lpp.LPP_Second.line_C2, _x.road_detection.lpp.LPP_Second.line_C3))
      length = len(self.road_detection.roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End))
        _v18 = val1.LD_RE_Line
        _x = _v18
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = val1
        buff.write(_get_struct_fi().pack(_x.LD_RE_Confidence, _x.LDRE_Class))
      length = len(self.road_detection.stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Right))
      length = len(self.road_detection.guidepoint.INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.guidepoint.INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
      length = len(self.road_detection.lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.road_detection.lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status))
      _x = self.road_detection.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.road_detection.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.road_detection.counter, _x.road_detection.publish_ts))
      length = len(self.pos_relation)
      buff.write(_struct_I.pack(length))
      for val1 in self.pos_relation:
        _x = val1.obj_id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.lm_relation)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lm_relation:
          _x = val2
          buff.write(_get_struct_Ii2f().pack(_x.lm_id, _x.relative_pos, _x.dist, _x.conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.road_detection is None:
        self.road_detection = rospy_message_converter.msg.RoadDetection()
      if self.pos_relation is None:
        self.pos_relation = None
      end = 0
      _x = self
      start = end
      end += 13
      (_x.road_detection.timestamp, _x.road_detection.laneline.LD_Lane_Width, _x.road_detection.laneline.LD_Crossing_Flag,) = _get_struct_QfB().unpack(str[start:end])
      self.road_detection.laneline.LD_Crossing_Flag = bool(self.road_detection.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v19 = val1.LD_First_Line
        _x = _v19
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v20 = _v19.LD_Line
        _x = _v20
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v19
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v21 = val1.LD_Second_Line
        _x = _v21
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v22 = _v21.LD_Line
        _x = _v22
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v21
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v23 = val1.LD_Special_Point
        _x = _v23
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.road_detection.laneline.line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.road_detection.slop.LD_Road_Vertical_Surface_End, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.road_detection.lpp.LPP_Available, _x.road_detection.lpp.LPP_Source, _x.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.road_detection.lpp.LPP_Ctrl_Point_Long, _x.road_detection.lpp.LPP_Confidence, _x.road_detection.lpp.LPP_First_Valid, _x.road_detection.lpp.LPP_First_VR_End, _x.road_detection.lpp.LPP_First.line_C0, _x.road_detection.lpp.LPP_First.line_C1, _x.road_detection.lpp.LPP_First.line_C2, _x.road_detection.lpp.LPP_First.line_C3, _x.road_detection.lpp.LPP_Second_Valid, _x.road_detection.lpp.LPP_Second_VR_End, _x.road_detection.lpp.LPP_Second.line_C0, _x.road_detection.lpp.LPP_Second.line_C1, _x.road_detection.lpp.LPP_Second.line_C2, _x.road_detection.lpp.LPP_Second.line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.road_detection.slop.LD_Road_Vertical_Surface_Available = bool(self.road_detection.slop.LD_Road_Vertical_Surface_Available)
      self.road_detection.lpp.LPP_Available = bool(self.road_detection.lpp.LPP_Available)
      self.road_detection.lpp.LPP_First_Valid = bool(self.road_detection.lpp.LPP_First_Valid)
      self.road_detection.lpp.LPP_Second_Valid = bool(self.road_detection.lpp.LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v24 = val1.LD_RE_Line
        _x = _v24
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.LD_RE_Confidence, _x.LDRE_Class,) = _get_struct_fi().unpack(str[start:end])
        self.road_detection.roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StopLine()
        _x = val1
        start = end
        end += 70
        (_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.SL_Zebra_Is_Detected = bool(val1.SL_Zebra_Is_Detected)
        val1.SL_Is_Detected = bool(val1.SL_Is_Detected)
        self.road_detection.stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.road_detection.guidepoint.INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.road_detection.guidepoint.INTP_Is_Highway_Merge_Left = bool(self.road_detection.guidepoint.INTP_Is_Highway_Merge_Left)
      self.road_detection.guidepoint.INTP_Is_Highway_Merge_Right = bool(self.road_detection.guidepoint.INTP_Is_Highway_Merge_Right)
      self.road_detection.guidepoint.INTP_Is_Highway_Exit_Left = bool(self.road_detection.guidepoint.INTP_Is_Highway_Exit_Left)
      self.road_detection.guidepoint.INTP_Is_Highway_Exit_Right = bool(self.road_detection.guidepoint.INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.guidepoint.INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.road_detection.guidepoint.INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.road_detection.lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.road_detection.lanesemantic.append(val1)
      start = end
      end += 8
      (self.road_detection.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.road_detection.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.road_detection.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.road_detection.counter, _x.road_detection.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pos_relation = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelRes()
        start = end
        end += 4
        (val1.obj_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lm_relation = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.LMRelRes()
          _x = val2
          start = end
          end += 16
          (_x.lm_id, _x.relative_pos, _x.dist, _x.conf,) = _get_struct_Ii2f().unpack(str[start:end])
          val1.lm_relation.append(val2)
        self.pos_relation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i2I3f = None
def _get_struct_3i2I3f():
    global _struct_3i2I3f
    if _struct_3i2I3f is None:
        _struct_3i2I3f = struct.Struct("<3i2I3f")
    return _struct_3i2I3f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B6fBi3fB5fB5f = None
def _get_struct_B6fBi3fB5fB5f():
    global _struct_B6fBi3fB5fB5f
    if _struct_B6fBi3fB5fB5f is None:
        _struct_B6fBi3fB5fB5f = struct.Struct("<B6fBi3fB5fB5f")
    return _struct_B6fBi3fB5fB5f
_struct_B8fBI2i5fi = None
def _get_struct_B8fBI2i5fi():
    global _struct_B8fBI2i5fi
    if _struct_B8fBI2i5fi is None:
        _struct_B8fBI2i5fi = struct.Struct("<B8fBI2i5fi")
    return _struct_B8fBI2i5fi
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_Ii2f = None
def _get_struct_Ii2f():
    global _struct_Ii2f
    if _struct_Ii2f is None:
        _struct_Ii2f = struct.Struct("<Ii2f")
    return _struct_Ii2f
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_QfB = None
def _get_struct_QfB():
    global _struct_QfB
    if _struct_QfB is None:
        _struct_QfB = struct.Struct("<QfB")
    return _struct_QfB
_struct_fi = None
def _get_struct_fi():
    global _struct_fi
    if _struct_fi is None:
        _struct_fi = struct.Struct("<fi")
    return _struct_fi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2I2fi2f2i8fi = None
def _get_struct_i2I2fi2f2i8fi():
    global _struct_i2I2fi2f2i8fi
    if _struct_i2I2fi2f2i8fi is None:
        _struct_i2I2fi2f2i8fi = struct.Struct("<i2I2fi2f2i8fi")
    return _struct_i2I2fi2f2i8fi
_struct_i2Ii3f = None
def _get_struct_i2Ii3f():
    global _struct_i2Ii3f
    if _struct_i2Ii3f is None:
        _struct_i2Ii3f = struct.Struct("<i2Ii3f")
    return _struct_i2Ii3f

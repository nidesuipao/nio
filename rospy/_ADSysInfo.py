# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ADSysInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ADSysInfo(genpy.Message):
  _md5sum = "da818041151e2b6eb176df9939cca64b"
  _type = "rospy_message_converter/ADSysInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 AD_SysSts
int32 ADCUSSMode
int32 ADCsts
int32 ADC_SystemState
int32 LidarSts
int32 Camera_FrntWideSts
int32 SnsrCamera_SurroundLeSts
int32 SnsrCamera_ReSts
int32 SnsrCamera_SideFrntRiSts
int32 SnsrCamera_SurroundRiSts
int32 SnsrCamera_SideReRiSts
int32 SnsrCamera_FrntNarrowSts
int32 SnsrCamera_SideReLeSts
int32 SnsrCamera_SurroundFrntSts
int32 SnsrCamera_SurroundReSts
int32 SnsrCamera_SideFrntLeSts
"""
  __slots__ = ['AD_SysSts','ADCUSSMode','ADCsts','ADC_SystemState','LidarSts','Camera_FrntWideSts','SnsrCamera_SurroundLeSts','SnsrCamera_ReSts','SnsrCamera_SideFrntRiSts','SnsrCamera_SurroundRiSts','SnsrCamera_SideReRiSts','SnsrCamera_FrntNarrowSts','SnsrCamera_SideReLeSts','SnsrCamera_SurroundFrntSts','SnsrCamera_SurroundReSts','SnsrCamera_SideFrntLeSts']
  _slot_types = ['uint32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AD_SysSts,ADCUSSMode,ADCsts,ADC_SystemState,LidarSts,Camera_FrntWideSts,SnsrCamera_SurroundLeSts,SnsrCamera_ReSts,SnsrCamera_SideFrntRiSts,SnsrCamera_SurroundRiSts,SnsrCamera_SideReRiSts,SnsrCamera_FrntNarrowSts,SnsrCamera_SideReLeSts,SnsrCamera_SurroundFrntSts,SnsrCamera_SurroundReSts,SnsrCamera_SideFrntLeSts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADSysInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AD_SysSts is None:
        self.AD_SysSts = 0
      if self.ADCUSSMode is None:
        self.ADCUSSMode = 0
      if self.ADCsts is None:
        self.ADCsts = 0
      if self.ADC_SystemState is None:
        self.ADC_SystemState = 0
      if self.LidarSts is None:
        self.LidarSts = 0
      if self.Camera_FrntWideSts is None:
        self.Camera_FrntWideSts = 0
      if self.SnsrCamera_SurroundLeSts is None:
        self.SnsrCamera_SurroundLeSts = 0
      if self.SnsrCamera_ReSts is None:
        self.SnsrCamera_ReSts = 0
      if self.SnsrCamera_SideFrntRiSts is None:
        self.SnsrCamera_SideFrntRiSts = 0
      if self.SnsrCamera_SurroundRiSts is None:
        self.SnsrCamera_SurroundRiSts = 0
      if self.SnsrCamera_SideReRiSts is None:
        self.SnsrCamera_SideReRiSts = 0
      if self.SnsrCamera_FrntNarrowSts is None:
        self.SnsrCamera_FrntNarrowSts = 0
      if self.SnsrCamera_SideReLeSts is None:
        self.SnsrCamera_SideReLeSts = 0
      if self.SnsrCamera_SurroundFrntSts is None:
        self.SnsrCamera_SurroundFrntSts = 0
      if self.SnsrCamera_SurroundReSts is None:
        self.SnsrCamera_SurroundReSts = 0
      if self.SnsrCamera_SideFrntLeSts is None:
        self.SnsrCamera_SideFrntLeSts = 0
    else:
      self.AD_SysSts = 0
      self.ADCUSSMode = 0
      self.ADCsts = 0
      self.ADC_SystemState = 0
      self.LidarSts = 0
      self.Camera_FrntWideSts = 0
      self.SnsrCamera_SurroundLeSts = 0
      self.SnsrCamera_ReSts = 0
      self.SnsrCamera_SideFrntRiSts = 0
      self.SnsrCamera_SurroundRiSts = 0
      self.SnsrCamera_SideReRiSts = 0
      self.SnsrCamera_FrntNarrowSts = 0
      self.SnsrCamera_SideReLeSts = 0
      self.SnsrCamera_SurroundFrntSts = 0
      self.SnsrCamera_SurroundReSts = 0
      self.SnsrCamera_SideFrntLeSts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I15i().pack(_x.AD_SysSts, _x.ADCUSSMode, _x.ADCsts, _x.ADC_SystemState, _x.LidarSts, _x.Camera_FrntWideSts, _x.SnsrCamera_SurroundLeSts, _x.SnsrCamera_ReSts, _x.SnsrCamera_SideFrntRiSts, _x.SnsrCamera_SurroundRiSts, _x.SnsrCamera_SideReRiSts, _x.SnsrCamera_FrntNarrowSts, _x.SnsrCamera_SideReLeSts, _x.SnsrCamera_SurroundFrntSts, _x.SnsrCamera_SurroundReSts, _x.SnsrCamera_SideFrntLeSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.AD_SysSts, _x.ADCUSSMode, _x.ADCsts, _x.ADC_SystemState, _x.LidarSts, _x.Camera_FrntWideSts, _x.SnsrCamera_SurroundLeSts, _x.SnsrCamera_ReSts, _x.SnsrCamera_SideFrntRiSts, _x.SnsrCamera_SurroundRiSts, _x.SnsrCamera_SideReRiSts, _x.SnsrCamera_FrntNarrowSts, _x.SnsrCamera_SideReLeSts, _x.SnsrCamera_SurroundFrntSts, _x.SnsrCamera_SurroundReSts, _x.SnsrCamera_SideFrntLeSts,) = _get_struct_I15i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I15i().pack(_x.AD_SysSts, _x.ADCUSSMode, _x.ADCsts, _x.ADC_SystemState, _x.LidarSts, _x.Camera_FrntWideSts, _x.SnsrCamera_SurroundLeSts, _x.SnsrCamera_ReSts, _x.SnsrCamera_SideFrntRiSts, _x.SnsrCamera_SurroundRiSts, _x.SnsrCamera_SideReRiSts, _x.SnsrCamera_FrntNarrowSts, _x.SnsrCamera_SideReLeSts, _x.SnsrCamera_SurroundFrntSts, _x.SnsrCamera_SurroundReSts, _x.SnsrCamera_SideFrntLeSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.AD_SysSts, _x.ADCUSSMode, _x.ADCsts, _x.ADC_SystemState, _x.LidarSts, _x.Camera_FrntWideSts, _x.SnsrCamera_SurroundLeSts, _x.SnsrCamera_ReSts, _x.SnsrCamera_SideFrntRiSts, _x.SnsrCamera_SurroundRiSts, _x.SnsrCamera_SideReRiSts, _x.SnsrCamera_FrntNarrowSts, _x.SnsrCamera_SideReLeSts, _x.SnsrCamera_SurroundFrntSts, _x.SnsrCamera_SurroundReSts, _x.SnsrCamera_SideFrntLeSts,) = _get_struct_I15i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I15i = None
def _get_struct_I15i():
    global _struct_I15i
    if _struct_I15i is None:
        _struct_I15i = struct.Struct("<I15i")
    return _struct_I15i

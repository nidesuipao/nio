# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_LaneLPP.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class esd_LaneLPP(genpy.Message):
  _md5sum = "c633ca712d78e047437c2b3e35249f0a"
  _type = "rospy_message_converter/esd_LaneLPP"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool esd_LPP_Available
int32 esd_LPP_Source
float32 esd_LPP_Ctrl_Point_Lat
float32 esd_LPP_Ctrl_Point_Long
float32 esd_LPP_Confidence
bool esd_LPP_First_Valid
float32 esd_LPP_First_VR_End
esd_PolyLine esd_LPP_First
bool esd_LPP_Second_Valid
float32 esd_LPP_Second_VR_End
esd_PolyLine esd_LPP_Second

================================================================================
MSG: rospy_message_converter/esd_PolyLine
float32 esd_line_C0
float32 esd_line_C1
float32 esd_line_C2
float32 esd_line_C3
"""
  __slots__ = ['esd_LPP_Available','esd_LPP_Source','esd_LPP_Ctrl_Point_Lat','esd_LPP_Ctrl_Point_Long','esd_LPP_Confidence','esd_LPP_First_Valid','esd_LPP_First_VR_End','esd_LPP_First','esd_LPP_Second_Valid','esd_LPP_Second_VR_End','esd_LPP_Second']
  _slot_types = ['bool','int32','float32','float32','float32','bool','float32','rospy_message_converter/esd_PolyLine','bool','float32','rospy_message_converter/esd_PolyLine']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_LPP_Available,esd_LPP_Source,esd_LPP_Ctrl_Point_Lat,esd_LPP_Ctrl_Point_Long,esd_LPP_Confidence,esd_LPP_First_Valid,esd_LPP_First_VR_End,esd_LPP_First,esd_LPP_Second_Valid,esd_LPP_Second_VR_End,esd_LPP_Second

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_LaneLPP, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_LPP_Available is None:
        self.esd_LPP_Available = False
      if self.esd_LPP_Source is None:
        self.esd_LPP_Source = 0
      if self.esd_LPP_Ctrl_Point_Lat is None:
        self.esd_LPP_Ctrl_Point_Lat = 0.
      if self.esd_LPP_Ctrl_Point_Long is None:
        self.esd_LPP_Ctrl_Point_Long = 0.
      if self.esd_LPP_Confidence is None:
        self.esd_LPP_Confidence = 0.
      if self.esd_LPP_First_Valid is None:
        self.esd_LPP_First_Valid = False
      if self.esd_LPP_First_VR_End is None:
        self.esd_LPP_First_VR_End = 0.
      if self.esd_LPP_First is None:
        self.esd_LPP_First = rospy_message_converter.msg.esd_PolyLine()
      if self.esd_LPP_Second_Valid is None:
        self.esd_LPP_Second_Valid = False
      if self.esd_LPP_Second_VR_End is None:
        self.esd_LPP_Second_VR_End = 0.
      if self.esd_LPP_Second is None:
        self.esd_LPP_Second = rospy_message_converter.msg.esd_PolyLine()
    else:
      self.esd_LPP_Available = False
      self.esd_LPP_Source = 0
      self.esd_LPP_Ctrl_Point_Lat = 0.
      self.esd_LPP_Ctrl_Point_Long = 0.
      self.esd_LPP_Confidence = 0.
      self.esd_LPP_First_Valid = False
      self.esd_LPP_First_VR_End = 0.
      self.esd_LPP_First = rospy_message_converter.msg.esd_PolyLine()
      self.esd_LPP_Second_Valid = False
      self.esd_LPP_Second_VR_End = 0.
      self.esd_LPP_Second = rospy_message_converter.msg.esd_PolyLine()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi3fB5fB5f().pack(_x.esd_LPP_Available, _x.esd_LPP_Source, _x.esd_LPP_Ctrl_Point_Lat, _x.esd_LPP_Ctrl_Point_Long, _x.esd_LPP_Confidence, _x.esd_LPP_First_Valid, _x.esd_LPP_First_VR_End, _x.esd_LPP_First.esd_line_C0, _x.esd_LPP_First.esd_line_C1, _x.esd_LPP_First.esd_line_C2, _x.esd_LPP_First.esd_line_C3, _x.esd_LPP_Second_Valid, _x.esd_LPP_Second_VR_End, _x.esd_LPP_Second.esd_line_C0, _x.esd_LPP_Second.esd_line_C1, _x.esd_LPP_Second.esd_line_C2, _x.esd_LPP_Second.esd_line_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_LPP_First is None:
        self.esd_LPP_First = rospy_message_converter.msg.esd_PolyLine()
      if self.esd_LPP_Second is None:
        self.esd_LPP_Second = rospy_message_converter.msg.esd_PolyLine()
      end = 0
      _x = self
      start = end
      end += 59
      (_x.esd_LPP_Available, _x.esd_LPP_Source, _x.esd_LPP_Ctrl_Point_Lat, _x.esd_LPP_Ctrl_Point_Long, _x.esd_LPP_Confidence, _x.esd_LPP_First_Valid, _x.esd_LPP_First_VR_End, _x.esd_LPP_First.esd_line_C0, _x.esd_LPP_First.esd_line_C1, _x.esd_LPP_First.esd_line_C2, _x.esd_LPP_First.esd_line_C3, _x.esd_LPP_Second_Valid, _x.esd_LPP_Second_VR_End, _x.esd_LPP_Second.esd_line_C0, _x.esd_LPP_Second.esd_line_C1, _x.esd_LPP_Second.esd_line_C2, _x.esd_LPP_Second.esd_line_C3,) = _get_struct_Bi3fB5fB5f().unpack(str[start:end])
      self.esd_LPP_Available = bool(self.esd_LPP_Available)
      self.esd_LPP_First_Valid = bool(self.esd_LPP_First_Valid)
      self.esd_LPP_Second_Valid = bool(self.esd_LPP_Second_Valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi3fB5fB5f().pack(_x.esd_LPP_Available, _x.esd_LPP_Source, _x.esd_LPP_Ctrl_Point_Lat, _x.esd_LPP_Ctrl_Point_Long, _x.esd_LPP_Confidence, _x.esd_LPP_First_Valid, _x.esd_LPP_First_VR_End, _x.esd_LPP_First.esd_line_C0, _x.esd_LPP_First.esd_line_C1, _x.esd_LPP_First.esd_line_C2, _x.esd_LPP_First.esd_line_C3, _x.esd_LPP_Second_Valid, _x.esd_LPP_Second_VR_End, _x.esd_LPP_Second.esd_line_C0, _x.esd_LPP_Second.esd_line_C1, _x.esd_LPP_Second.esd_line_C2, _x.esd_LPP_Second.esd_line_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_LPP_First is None:
        self.esd_LPP_First = rospy_message_converter.msg.esd_PolyLine()
      if self.esd_LPP_Second is None:
        self.esd_LPP_Second = rospy_message_converter.msg.esd_PolyLine()
      end = 0
      _x = self
      start = end
      end += 59
      (_x.esd_LPP_Available, _x.esd_LPP_Source, _x.esd_LPP_Ctrl_Point_Lat, _x.esd_LPP_Ctrl_Point_Long, _x.esd_LPP_Confidence, _x.esd_LPP_First_Valid, _x.esd_LPP_First_VR_End, _x.esd_LPP_First.esd_line_C0, _x.esd_LPP_First.esd_line_C1, _x.esd_LPP_First.esd_line_C2, _x.esd_LPP_First.esd_line_C3, _x.esd_LPP_Second_Valid, _x.esd_LPP_Second_VR_End, _x.esd_LPP_Second.esd_line_C0, _x.esd_LPP_Second.esd_line_C1, _x.esd_LPP_Second.esd_line_C2, _x.esd_LPP_Second.esd_line_C3,) = _get_struct_Bi3fB5fB5f().unpack(str[start:end])
      self.esd_LPP_Available = bool(self.esd_LPP_Available)
      self.esd_LPP_First_Valid = bool(self.esd_LPP_First_Valid)
      self.esd_LPP_Second_Valid = bool(self.esd_LPP_Second_Valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bi3fB5fB5f = None
def _get_struct_Bi3fB5fB5f():
    global _struct_Bi3fB5fB5f
    if _struct_Bi3fB5fB5f is None:
        _struct_Bi3fB5fB5f = struct.Struct("<Bi3fB5fB5f")
    return _struct_Bi3fB5fB5f

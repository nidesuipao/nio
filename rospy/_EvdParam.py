# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EvdParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EvdParam(genpy.Message):
  _md5sum = "a29a19cf214a75ee018990d551ada842"
  _type = "rospy_message_converter/EvdParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EvdParamLaneChange lane_change
EvdParamPathSelect path_select
EvdParamLeading leading
EvdParamTakeover takeover
EvdParamHW2Ramp hw2ramp

================================================================================
MSG: rospy_message_converter/EvdParamLaneChange
int32 change_dir
int32 lane_change_reason

================================================================================
MSG: rospy_message_converter/EvdParamPathSelect
int32 path_dir

================================================================================
MSG: rospy_message_converter/EvdParamLeading
int32 leading_dir

================================================================================
MSG: rospy_message_converter/EvdParamTakeover
uint32 takeover_src

================================================================================
MSG: rospy_message_converter/EvdParamHW2Ramp
int32 ramp_dir
float32 dst2leading
"""
  __slots__ = ['lane_change','path_select','leading','takeover','hw2ramp']
  _slot_types = ['rospy_message_converter/EvdParamLaneChange','rospy_message_converter/EvdParamPathSelect','rospy_message_converter/EvdParamLeading','rospy_message_converter/EvdParamTakeover','rospy_message_converter/EvdParamHW2Ramp']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_change,path_select,leading,takeover,hw2ramp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvdParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane_change is None:
        self.lane_change = rospy_message_converter.msg.EvdParamLaneChange()
      if self.path_select is None:
        self.path_select = rospy_message_converter.msg.EvdParamPathSelect()
      if self.leading is None:
        self.leading = rospy_message_converter.msg.EvdParamLeading()
      if self.takeover is None:
        self.takeover = rospy_message_converter.msg.EvdParamTakeover()
      if self.hw2ramp is None:
        self.hw2ramp = rospy_message_converter.msg.EvdParamHW2Ramp()
    else:
      self.lane_change = rospy_message_converter.msg.EvdParamLaneChange()
      self.path_select = rospy_message_converter.msg.EvdParamPathSelect()
      self.leading = rospy_message_converter.msg.EvdParamLeading()
      self.takeover = rospy_message_converter.msg.EvdParamTakeover()
      self.hw2ramp = rospy_message_converter.msg.EvdParamHW2Ramp()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4iIif().pack(_x.lane_change.change_dir, _x.lane_change.lane_change_reason, _x.path_select.path_dir, _x.leading.leading_dir, _x.takeover.takeover_src, _x.hw2ramp.ramp_dir, _x.hw2ramp.dst2leading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_change is None:
        self.lane_change = rospy_message_converter.msg.EvdParamLaneChange()
      if self.path_select is None:
        self.path_select = rospy_message_converter.msg.EvdParamPathSelect()
      if self.leading is None:
        self.leading = rospy_message_converter.msg.EvdParamLeading()
      if self.takeover is None:
        self.takeover = rospy_message_converter.msg.EvdParamTakeover()
      if self.hw2ramp is None:
        self.hw2ramp = rospy_message_converter.msg.EvdParamHW2Ramp()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.lane_change.change_dir, _x.lane_change.lane_change_reason, _x.path_select.path_dir, _x.leading.leading_dir, _x.takeover.takeover_src, _x.hw2ramp.ramp_dir, _x.hw2ramp.dst2leading,) = _get_struct_4iIif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4iIif().pack(_x.lane_change.change_dir, _x.lane_change.lane_change_reason, _x.path_select.path_dir, _x.leading.leading_dir, _x.takeover.takeover_src, _x.hw2ramp.ramp_dir, _x.hw2ramp.dst2leading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_change is None:
        self.lane_change = rospy_message_converter.msg.EvdParamLaneChange()
      if self.path_select is None:
        self.path_select = rospy_message_converter.msg.EvdParamPathSelect()
      if self.leading is None:
        self.leading = rospy_message_converter.msg.EvdParamLeading()
      if self.takeover is None:
        self.takeover = rospy_message_converter.msg.EvdParamTakeover()
      if self.hw2ramp is None:
        self.hw2ramp = rospy_message_converter.msg.EvdParamHW2Ramp()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.lane_change.change_dir, _x.lane_change.lane_change_reason, _x.path_select.path_dir, _x.leading.leading_dir, _x.takeover.takeover_src, _x.hw2ramp.ramp_dir, _x.hw2ramp.dst2leading,) = _get_struct_4iIif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4iIif = None
def _get_struct_4iIif():
    global _struct_4iIif
    if _struct_4iIif is None:
        _struct_4iIif = struct.Struct("<4iIif")
    return _struct_4iIif

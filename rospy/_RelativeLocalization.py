# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RelativeLocalization.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RelativeLocalization(genpy.Message):
  _md5sum = "2fae1f6cd1b1eae6cbaa9365272ac49b"
  _type = "rospy_message_converter/RelativeLocalization"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 timestamp
int32 status
LocEulerAngle euler_angle
LocVector3 position
LocVector3 velocity
LocQuaternion quaternion
LocVector3 linear_acc
LocVector3 angular_vel
float32 confidence
string status_message
uint64 timestamp_ptp_ns
float32[] dim_confidence
float64[] online_parameters
LocEulerAngle attitude_ref
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LocEulerAngle
float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: rospy_message_converter/LocVector3
float64 x
float64 y
float64 z

================================================================================
MSG: rospy_message_converter/LocQuaternion
float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['timestamp','status','euler_angle','position','velocity','quaternion','linear_acc','angular_vel','confidence','status_message','timestamp_ptp_ns','dim_confidence','online_parameters','attitude_ref','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['float64','int32','rospy_message_converter/LocEulerAngle','rospy_message_converter/LocVector3','rospy_message_converter/LocVector3','rospy_message_converter/LocQuaternion','rospy_message_converter/LocVector3','rospy_message_converter/LocVector3','float32','string','uint64','float32[]','float64[]','rospy_message_converter/LocEulerAngle','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,status,euler_angle,position,velocity,quaternion,linear_acc,angular_vel,confidence,status_message,timestamp_ptp_ns,dim_confidence,online_parameters,attitude_ref,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelativeLocalization, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.status is None:
        self.status = 0
      if self.euler_angle is None:
        self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      if self.position is None:
        self.position = rospy_message_converter.msg.LocVector3()
      if self.velocity is None:
        self.velocity = rospy_message_converter.msg.LocVector3()
      if self.quaternion is None:
        self.quaternion = rospy_message_converter.msg.LocQuaternion()
      if self.linear_acc is None:
        self.linear_acc = rospy_message_converter.msg.LocVector3()
      if self.angular_vel is None:
        self.angular_vel = rospy_message_converter.msg.LocVector3()
      if self.confidence is None:
        self.confidence = 0.
      if self.status_message is None:
        self.status_message = ''
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
      if self.dim_confidence is None:
        self.dim_confidence = []
      if self.online_parameters is None:
        self.online_parameters = []
      if self.attitude_ref is None:
        self.attitude_ref = rospy_message_converter.msg.LocEulerAngle()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.timestamp = 0.
      self.status = 0
      self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      self.position = rospy_message_converter.msg.LocVector3()
      self.velocity = rospy_message_converter.msg.LocVector3()
      self.quaternion = rospy_message_converter.msg.LocQuaternion()
      self.linear_acc = rospy_message_converter.msg.LocVector3()
      self.angular_vel = rospy_message_converter.msg.LocVector3()
      self.confidence = 0.
      self.status_message = ''
      self.timestamp_ptp_ns = 0
      self.dim_confidence = []
      self.online_parameters = []
      self.attitude_ref = rospy_message_converter.msg.LocEulerAngle()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di19df().pack(_x.timestamp, _x.status, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acc.x, _x.linear_acc.y, _x.linear_acc.z, _x.angular_vel.x, _x.angular_vel.y, _x.angular_vel.z, _x.confidence))
      _x = self.status_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp_ptp_ns
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.dim_confidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.dim_confidence))
      length = len(self.online_parameters)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.online_parameters))
      _x = self
      buff.write(_get_struct_3dQ().pack(_x.attitude_ref.roll, _x.attitude_ref.pitch, _x.attitude_ref.yaw, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.euler_angle is None:
        self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      if self.position is None:
        self.position = rospy_message_converter.msg.LocVector3()
      if self.velocity is None:
        self.velocity = rospy_message_converter.msg.LocVector3()
      if self.quaternion is None:
        self.quaternion = rospy_message_converter.msg.LocQuaternion()
      if self.linear_acc is None:
        self.linear_acc = rospy_message_converter.msg.LocVector3()
      if self.angular_vel is None:
        self.angular_vel = rospy_message_converter.msg.LocVector3()
      if self.attitude_ref is None:
        self.attitude_ref = rospy_message_converter.msg.LocEulerAngle()
      end = 0
      _x = self
      start = end
      end += 168
      (_x.timestamp, _x.status, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acc.x, _x.linear_acc.y, _x.linear_acc.z, _x.angular_vel.x, _x.angular_vel.y, _x.angular_vel.z, _x.confidence,) = _get_struct_di19df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status_message = str[start:end]
      start = end
      end += 8
      (self.timestamp_ptp_ns,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dim_confidence = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.online_parameters = s.unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.attitude_ref.roll, _x.attitude_ref.pitch, _x.attitude_ref.yaw, _x.publish_ptp_ts,) = _get_struct_3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di19df().pack(_x.timestamp, _x.status, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acc.x, _x.linear_acc.y, _x.linear_acc.z, _x.angular_vel.x, _x.angular_vel.y, _x.angular_vel.z, _x.confidence))
      _x = self.status_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp_ptp_ns
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.dim_confidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.dim_confidence.tostring())
      length = len(self.online_parameters)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.online_parameters.tostring())
      _x = self
      buff.write(_get_struct_3dQ().pack(_x.attitude_ref.roll, _x.attitude_ref.pitch, _x.attitude_ref.yaw, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.euler_angle is None:
        self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      if self.position is None:
        self.position = rospy_message_converter.msg.LocVector3()
      if self.velocity is None:
        self.velocity = rospy_message_converter.msg.LocVector3()
      if self.quaternion is None:
        self.quaternion = rospy_message_converter.msg.LocQuaternion()
      if self.linear_acc is None:
        self.linear_acc = rospy_message_converter.msg.LocVector3()
      if self.angular_vel is None:
        self.angular_vel = rospy_message_converter.msg.LocVector3()
      if self.attitude_ref is None:
        self.attitude_ref = rospy_message_converter.msg.LocEulerAngle()
      end = 0
      _x = self
      start = end
      end += 168
      (_x.timestamp, _x.status, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.position.x, _x.position.y, _x.position.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acc.x, _x.linear_acc.y, _x.linear_acc.z, _x.angular_vel.x, _x.angular_vel.y, _x.angular_vel.z, _x.confidence,) = _get_struct_di19df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status_message = str[start:end]
      start = end
      end += 8
      (self.timestamp_ptp_ns,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dim_confidence = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.online_parameters = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.attitude_ref.roll, _x.attitude_ref.pitch, _x.attitude_ref.yaw, _x.publish_ptp_ts,) = _get_struct_3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3dQ = None
def _get_struct_3dQ():
    global _struct_3dQ
    if _struct_3dQ is None:
        _struct_3dQ = struct.Struct("<3dQ")
    return _struct_3dQ
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_di19df = None
def _get_struct_di19df():
    global _struct_di19df
    if _struct_di19df is None:
        _struct_di19df = struct.Struct("<di19df")
    return _struct_di19df

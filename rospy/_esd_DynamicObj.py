# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_DynamicObj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class esd_DynamicObj(genpy.Message):
  _md5sum = "19435e03deecefec8c49512c62e07e27"
  _type = "rospy_message_converter/esd_DynamicObj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 esd_OBJ_Object_Class
uint32 esd_OBJ_Age_Frame
uint32 esd_OBJ_Object_ID
int32 esd_OBJ_Color
float32 esd_OBJ_Existence_Probability
bool esd_OBJ_Is_Very_Close
int32 esd_OBJ_Lane_Assignment
uint32 esd_OBJ_Measuring_Status
int32 esd_OBJ_Motion_Status
int32 esd_OBJ_Motion_Category
uint32 esd_OBJ_Is_Blocked_Parts
float32 esd_OBJ_Heading
float32 esd_OBJ_Heading_STD
float32 esd_OBJ_Angle_Rate
float32 esd_OBJ_Angle_Rate_STD
int32 esd_OBJ_Brake_Light
int32 esd_OBJ_Turn_Indicator
int32 esd_OBJ_HB_Status
float32 esd_OBJ_Dst_Left_Line
float32 esd_OBJ_Dst_Right_Line
bool esd_OBJ_Is_Blocked_Left
bool esd_OBJ_Is_Blocked_Right
esd_Position esd_OBJ_Distance
esd_Velocity esd_OBJ_Abs_Velocity
esd_Acceleration esd_OBJ_Abs_Acc
esd_Dimension esd_OBJ_Dimension
int32 esd_source
uint32 esd_OBJ_Relate_ID
int32 esd_OBJ_Object_Door_Left_Status
int32 esd_OBJ_Object_Door_Right_Status
float32 esd_OBJ_Cut_In_Lat_Distance
float32 esd_OBJ_Cut_In_Lat_Distance_STD
float32 esd_OBJ_Cut_In_Long_Distance
float32 esd_OBJ_Cut_In_Long_Distance_STD
float32 esd_OBJ_Cut_In_Angle
float32 esd_OBJ_Cut_In_Angle_STD
float32 esd_OBJ_Age_Second
float32 esd_OBJ_Missing_Age_Second

================================================================================
MSG: rospy_message_converter/esd_Position
float32 esd_Long_Position
float32 esd_Long_Position_STD
float32 esd_Lat_Position
float32 esd_Lat_Position_STD
float32 esd_Vertical_Position
float32 esd_Vertical_Position_STD

================================================================================
MSG: rospy_message_converter/esd_Velocity
float32 esd_Long_Velocity
float32 esd_Long_Velocity_STD
float32 esd_Lat_Velocity
float32 esd_Lat_Velocity_STD
float32 esd_Up_Velocity
float32 esd_Up_Velocity_STD

================================================================================
MSG: rospy_message_converter/esd_Acceleration
float32 esd_Long_Acc
float32 esd_Long_Acc_STD
float32 esd_Lat_Acc
float32 esd_Lat_Acc_STD
float32 esd_Up_Acc
float32 esd_Up_Acc_STD

================================================================================
MSG: rospy_message_converter/esd_Dimension
float32 esd_OBJ_Length
float32 esd_OBJ_Length_STD
float32 esd_OBJ_Width
float32 esd_OBJ_Width_STD
float32 esd_OBJ_Height
float32 esd_OBJ_Height_STD
"""
  __slots__ = ['esd_OBJ_Object_Class','esd_OBJ_Age_Frame','esd_OBJ_Object_ID','esd_OBJ_Color','esd_OBJ_Existence_Probability','esd_OBJ_Is_Very_Close','esd_OBJ_Lane_Assignment','esd_OBJ_Measuring_Status','esd_OBJ_Motion_Status','esd_OBJ_Motion_Category','esd_OBJ_Is_Blocked_Parts','esd_OBJ_Heading','esd_OBJ_Heading_STD','esd_OBJ_Angle_Rate','esd_OBJ_Angle_Rate_STD','esd_OBJ_Brake_Light','esd_OBJ_Turn_Indicator','esd_OBJ_HB_Status','esd_OBJ_Dst_Left_Line','esd_OBJ_Dst_Right_Line','esd_OBJ_Is_Blocked_Left','esd_OBJ_Is_Blocked_Right','esd_OBJ_Distance','esd_OBJ_Abs_Velocity','esd_OBJ_Abs_Acc','esd_OBJ_Dimension','esd_source','esd_OBJ_Relate_ID','esd_OBJ_Object_Door_Left_Status','esd_OBJ_Object_Door_Right_Status','esd_OBJ_Cut_In_Lat_Distance','esd_OBJ_Cut_In_Lat_Distance_STD','esd_OBJ_Cut_In_Long_Distance','esd_OBJ_Cut_In_Long_Distance_STD','esd_OBJ_Cut_In_Angle','esd_OBJ_Cut_In_Angle_STD','esd_OBJ_Age_Second','esd_OBJ_Missing_Age_Second']
  _slot_types = ['int32','uint32','uint32','int32','float32','bool','int32','uint32','int32','int32','uint32','float32','float32','float32','float32','int32','int32','int32','float32','float32','bool','bool','rospy_message_converter/esd_Position','rospy_message_converter/esd_Velocity','rospy_message_converter/esd_Acceleration','rospy_message_converter/esd_Dimension','int32','uint32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_OBJ_Object_Class,esd_OBJ_Age_Frame,esd_OBJ_Object_ID,esd_OBJ_Color,esd_OBJ_Existence_Probability,esd_OBJ_Is_Very_Close,esd_OBJ_Lane_Assignment,esd_OBJ_Measuring_Status,esd_OBJ_Motion_Status,esd_OBJ_Motion_Category,esd_OBJ_Is_Blocked_Parts,esd_OBJ_Heading,esd_OBJ_Heading_STD,esd_OBJ_Angle_Rate,esd_OBJ_Angle_Rate_STD,esd_OBJ_Brake_Light,esd_OBJ_Turn_Indicator,esd_OBJ_HB_Status,esd_OBJ_Dst_Left_Line,esd_OBJ_Dst_Right_Line,esd_OBJ_Is_Blocked_Left,esd_OBJ_Is_Blocked_Right,esd_OBJ_Distance,esd_OBJ_Abs_Velocity,esd_OBJ_Abs_Acc,esd_OBJ_Dimension,esd_source,esd_OBJ_Relate_ID,esd_OBJ_Object_Door_Left_Status,esd_OBJ_Object_Door_Right_Status,esd_OBJ_Cut_In_Lat_Distance,esd_OBJ_Cut_In_Lat_Distance_STD,esd_OBJ_Cut_In_Long_Distance,esd_OBJ_Cut_In_Long_Distance_STD,esd_OBJ_Cut_In_Angle,esd_OBJ_Cut_In_Angle_STD,esd_OBJ_Age_Second,esd_OBJ_Missing_Age_Second

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_DynamicObj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_OBJ_Object_Class is None:
        self.esd_OBJ_Object_Class = 0
      if self.esd_OBJ_Age_Frame is None:
        self.esd_OBJ_Age_Frame = 0
      if self.esd_OBJ_Object_ID is None:
        self.esd_OBJ_Object_ID = 0
      if self.esd_OBJ_Color is None:
        self.esd_OBJ_Color = 0
      if self.esd_OBJ_Existence_Probability is None:
        self.esd_OBJ_Existence_Probability = 0.
      if self.esd_OBJ_Is_Very_Close is None:
        self.esd_OBJ_Is_Very_Close = False
      if self.esd_OBJ_Lane_Assignment is None:
        self.esd_OBJ_Lane_Assignment = 0
      if self.esd_OBJ_Measuring_Status is None:
        self.esd_OBJ_Measuring_Status = 0
      if self.esd_OBJ_Motion_Status is None:
        self.esd_OBJ_Motion_Status = 0
      if self.esd_OBJ_Motion_Category is None:
        self.esd_OBJ_Motion_Category = 0
      if self.esd_OBJ_Is_Blocked_Parts is None:
        self.esd_OBJ_Is_Blocked_Parts = 0
      if self.esd_OBJ_Heading is None:
        self.esd_OBJ_Heading = 0.
      if self.esd_OBJ_Heading_STD is None:
        self.esd_OBJ_Heading_STD = 0.
      if self.esd_OBJ_Angle_Rate is None:
        self.esd_OBJ_Angle_Rate = 0.
      if self.esd_OBJ_Angle_Rate_STD is None:
        self.esd_OBJ_Angle_Rate_STD = 0.
      if self.esd_OBJ_Brake_Light is None:
        self.esd_OBJ_Brake_Light = 0
      if self.esd_OBJ_Turn_Indicator is None:
        self.esd_OBJ_Turn_Indicator = 0
      if self.esd_OBJ_HB_Status is None:
        self.esd_OBJ_HB_Status = 0
      if self.esd_OBJ_Dst_Left_Line is None:
        self.esd_OBJ_Dst_Left_Line = 0.
      if self.esd_OBJ_Dst_Right_Line is None:
        self.esd_OBJ_Dst_Right_Line = 0.
      if self.esd_OBJ_Is_Blocked_Left is None:
        self.esd_OBJ_Is_Blocked_Left = False
      if self.esd_OBJ_Is_Blocked_Right is None:
        self.esd_OBJ_Is_Blocked_Right = False
      if self.esd_OBJ_Distance is None:
        self.esd_OBJ_Distance = rospy_message_converter.msg.esd_Position()
      if self.esd_OBJ_Abs_Velocity is None:
        self.esd_OBJ_Abs_Velocity = rospy_message_converter.msg.esd_Velocity()
      if self.esd_OBJ_Abs_Acc is None:
        self.esd_OBJ_Abs_Acc = rospy_message_converter.msg.esd_Acceleration()
      if self.esd_OBJ_Dimension is None:
        self.esd_OBJ_Dimension = rospy_message_converter.msg.esd_Dimension()
      if self.esd_source is None:
        self.esd_source = 0
      if self.esd_OBJ_Relate_ID is None:
        self.esd_OBJ_Relate_ID = 0
      if self.esd_OBJ_Object_Door_Left_Status is None:
        self.esd_OBJ_Object_Door_Left_Status = 0
      if self.esd_OBJ_Object_Door_Right_Status is None:
        self.esd_OBJ_Object_Door_Right_Status = 0
      if self.esd_OBJ_Cut_In_Lat_Distance is None:
        self.esd_OBJ_Cut_In_Lat_Distance = 0.
      if self.esd_OBJ_Cut_In_Lat_Distance_STD is None:
        self.esd_OBJ_Cut_In_Lat_Distance_STD = 0.
      if self.esd_OBJ_Cut_In_Long_Distance is None:
        self.esd_OBJ_Cut_In_Long_Distance = 0.
      if self.esd_OBJ_Cut_In_Long_Distance_STD is None:
        self.esd_OBJ_Cut_In_Long_Distance_STD = 0.
      if self.esd_OBJ_Cut_In_Angle is None:
        self.esd_OBJ_Cut_In_Angle = 0.
      if self.esd_OBJ_Cut_In_Angle_STD is None:
        self.esd_OBJ_Cut_In_Angle_STD = 0.
      if self.esd_OBJ_Age_Second is None:
        self.esd_OBJ_Age_Second = 0.
      if self.esd_OBJ_Missing_Age_Second is None:
        self.esd_OBJ_Missing_Age_Second = 0.
    else:
      self.esd_OBJ_Object_Class = 0
      self.esd_OBJ_Age_Frame = 0
      self.esd_OBJ_Object_ID = 0
      self.esd_OBJ_Color = 0
      self.esd_OBJ_Existence_Probability = 0.
      self.esd_OBJ_Is_Very_Close = False
      self.esd_OBJ_Lane_Assignment = 0
      self.esd_OBJ_Measuring_Status = 0
      self.esd_OBJ_Motion_Status = 0
      self.esd_OBJ_Motion_Category = 0
      self.esd_OBJ_Is_Blocked_Parts = 0
      self.esd_OBJ_Heading = 0.
      self.esd_OBJ_Heading_STD = 0.
      self.esd_OBJ_Angle_Rate = 0.
      self.esd_OBJ_Angle_Rate_STD = 0.
      self.esd_OBJ_Brake_Light = 0
      self.esd_OBJ_Turn_Indicator = 0
      self.esd_OBJ_HB_Status = 0
      self.esd_OBJ_Dst_Left_Line = 0.
      self.esd_OBJ_Dst_Right_Line = 0.
      self.esd_OBJ_Is_Blocked_Left = False
      self.esd_OBJ_Is_Blocked_Right = False
      self.esd_OBJ_Distance = rospy_message_converter.msg.esd_Position()
      self.esd_OBJ_Abs_Velocity = rospy_message_converter.msg.esd_Velocity()
      self.esd_OBJ_Abs_Acc = rospy_message_converter.msg.esd_Acceleration()
      self.esd_OBJ_Dimension = rospy_message_converter.msg.esd_Dimension()
      self.esd_source = 0
      self.esd_OBJ_Relate_ID = 0
      self.esd_OBJ_Object_Door_Left_Status = 0
      self.esd_OBJ_Object_Door_Right_Status = 0
      self.esd_OBJ_Cut_In_Lat_Distance = 0.
      self.esd_OBJ_Cut_In_Lat_Distance_STD = 0.
      self.esd_OBJ_Cut_In_Long_Distance = 0.
      self.esd_OBJ_Cut_In_Long_Distance_STD = 0.
      self.esd_OBJ_Cut_In_Angle = 0.
      self.esd_OBJ_Cut_In_Angle_STD = 0.
      self.esd_OBJ_Age_Second = 0.
      self.esd_OBJ_Missing_Age_Second = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().pack(_x.esd_OBJ_Object_Class, _x.esd_OBJ_Age_Frame, _x.esd_OBJ_Object_ID, _x.esd_OBJ_Color, _x.esd_OBJ_Existence_Probability, _x.esd_OBJ_Is_Very_Close, _x.esd_OBJ_Lane_Assignment, _x.esd_OBJ_Measuring_Status, _x.esd_OBJ_Motion_Status, _x.esd_OBJ_Motion_Category, _x.esd_OBJ_Is_Blocked_Parts, _x.esd_OBJ_Heading, _x.esd_OBJ_Heading_STD, _x.esd_OBJ_Angle_Rate, _x.esd_OBJ_Angle_Rate_STD, _x.esd_OBJ_Brake_Light, _x.esd_OBJ_Turn_Indicator, _x.esd_OBJ_HB_Status, _x.esd_OBJ_Dst_Left_Line, _x.esd_OBJ_Dst_Right_Line, _x.esd_OBJ_Is_Blocked_Left, _x.esd_OBJ_Is_Blocked_Right, _x.esd_OBJ_Distance.esd_Long_Position, _x.esd_OBJ_Distance.esd_Long_Position_STD, _x.esd_OBJ_Distance.esd_Lat_Position, _x.esd_OBJ_Distance.esd_Lat_Position_STD, _x.esd_OBJ_Distance.esd_Vertical_Position, _x.esd_OBJ_Distance.esd_Vertical_Position_STD, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity_STD, _x.esd_OBJ_Abs_Acc.esd_Long_Acc, _x.esd_OBJ_Abs_Acc.esd_Long_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Up_Acc, _x.esd_OBJ_Abs_Acc.esd_Up_Acc_STD, _x.esd_OBJ_Dimension.esd_OBJ_Length, _x.esd_OBJ_Dimension.esd_OBJ_Length_STD, _x.esd_OBJ_Dimension.esd_OBJ_Width, _x.esd_OBJ_Dimension.esd_OBJ_Width_STD, _x.esd_OBJ_Dimension.esd_OBJ_Height, _x.esd_OBJ_Dimension.esd_OBJ_Height_STD, _x.esd_source, _x.esd_OBJ_Relate_ID, _x.esd_OBJ_Object_Door_Left_Status, _x.esd_OBJ_Object_Door_Right_Status, _x.esd_OBJ_Cut_In_Lat_Distance, _x.esd_OBJ_Cut_In_Lat_Distance_STD, _x.esd_OBJ_Cut_In_Long_Distance, _x.esd_OBJ_Cut_In_Long_Distance_STD, _x.esd_OBJ_Cut_In_Angle, _x.esd_OBJ_Cut_In_Angle_STD, _x.esd_OBJ_Age_Second, _x.esd_OBJ_Missing_Age_Second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_OBJ_Distance is None:
        self.esd_OBJ_Distance = rospy_message_converter.msg.esd_Position()
      if self.esd_OBJ_Abs_Velocity is None:
        self.esd_OBJ_Abs_Velocity = rospy_message_converter.msg.esd_Velocity()
      if self.esd_OBJ_Abs_Acc is None:
        self.esd_OBJ_Abs_Acc = rospy_message_converter.msg.esd_Acceleration()
      if self.esd_OBJ_Dimension is None:
        self.esd_OBJ_Dimension = rospy_message_converter.msg.esd_Dimension()
      end = 0
      _x = self
      start = end
      end += 223
      (_x.esd_OBJ_Object_Class, _x.esd_OBJ_Age_Frame, _x.esd_OBJ_Object_ID, _x.esd_OBJ_Color, _x.esd_OBJ_Existence_Probability, _x.esd_OBJ_Is_Very_Close, _x.esd_OBJ_Lane_Assignment, _x.esd_OBJ_Measuring_Status, _x.esd_OBJ_Motion_Status, _x.esd_OBJ_Motion_Category, _x.esd_OBJ_Is_Blocked_Parts, _x.esd_OBJ_Heading, _x.esd_OBJ_Heading_STD, _x.esd_OBJ_Angle_Rate, _x.esd_OBJ_Angle_Rate_STD, _x.esd_OBJ_Brake_Light, _x.esd_OBJ_Turn_Indicator, _x.esd_OBJ_HB_Status, _x.esd_OBJ_Dst_Left_Line, _x.esd_OBJ_Dst_Right_Line, _x.esd_OBJ_Is_Blocked_Left, _x.esd_OBJ_Is_Blocked_Right, _x.esd_OBJ_Distance.esd_Long_Position, _x.esd_OBJ_Distance.esd_Long_Position_STD, _x.esd_OBJ_Distance.esd_Lat_Position, _x.esd_OBJ_Distance.esd_Lat_Position_STD, _x.esd_OBJ_Distance.esd_Vertical_Position, _x.esd_OBJ_Distance.esd_Vertical_Position_STD, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity_STD, _x.esd_OBJ_Abs_Acc.esd_Long_Acc, _x.esd_OBJ_Abs_Acc.esd_Long_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Up_Acc, _x.esd_OBJ_Abs_Acc.esd_Up_Acc_STD, _x.esd_OBJ_Dimension.esd_OBJ_Length, _x.esd_OBJ_Dimension.esd_OBJ_Length_STD, _x.esd_OBJ_Dimension.esd_OBJ_Width, _x.esd_OBJ_Dimension.esd_OBJ_Width_STD, _x.esd_OBJ_Dimension.esd_OBJ_Height, _x.esd_OBJ_Dimension.esd_OBJ_Height_STD, _x.esd_source, _x.esd_OBJ_Relate_ID, _x.esd_OBJ_Object_Door_Left_Status, _x.esd_OBJ_Object_Door_Right_Status, _x.esd_OBJ_Cut_In_Lat_Distance, _x.esd_OBJ_Cut_In_Lat_Distance_STD, _x.esd_OBJ_Cut_In_Long_Distance, _x.esd_OBJ_Cut_In_Long_Distance_STD, _x.esd_OBJ_Cut_In_Angle, _x.esd_OBJ_Cut_In_Angle_STD, _x.esd_OBJ_Age_Second, _x.esd_OBJ_Missing_Age_Second,) = _get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().unpack(str[start:end])
      self.esd_OBJ_Is_Very_Close = bool(self.esd_OBJ_Is_Very_Close)
      self.esd_OBJ_Is_Blocked_Left = bool(self.esd_OBJ_Is_Blocked_Left)
      self.esd_OBJ_Is_Blocked_Right = bool(self.esd_OBJ_Is_Blocked_Right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().pack(_x.esd_OBJ_Object_Class, _x.esd_OBJ_Age_Frame, _x.esd_OBJ_Object_ID, _x.esd_OBJ_Color, _x.esd_OBJ_Existence_Probability, _x.esd_OBJ_Is_Very_Close, _x.esd_OBJ_Lane_Assignment, _x.esd_OBJ_Measuring_Status, _x.esd_OBJ_Motion_Status, _x.esd_OBJ_Motion_Category, _x.esd_OBJ_Is_Blocked_Parts, _x.esd_OBJ_Heading, _x.esd_OBJ_Heading_STD, _x.esd_OBJ_Angle_Rate, _x.esd_OBJ_Angle_Rate_STD, _x.esd_OBJ_Brake_Light, _x.esd_OBJ_Turn_Indicator, _x.esd_OBJ_HB_Status, _x.esd_OBJ_Dst_Left_Line, _x.esd_OBJ_Dst_Right_Line, _x.esd_OBJ_Is_Blocked_Left, _x.esd_OBJ_Is_Blocked_Right, _x.esd_OBJ_Distance.esd_Long_Position, _x.esd_OBJ_Distance.esd_Long_Position_STD, _x.esd_OBJ_Distance.esd_Lat_Position, _x.esd_OBJ_Distance.esd_Lat_Position_STD, _x.esd_OBJ_Distance.esd_Vertical_Position, _x.esd_OBJ_Distance.esd_Vertical_Position_STD, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity_STD, _x.esd_OBJ_Abs_Acc.esd_Long_Acc, _x.esd_OBJ_Abs_Acc.esd_Long_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Up_Acc, _x.esd_OBJ_Abs_Acc.esd_Up_Acc_STD, _x.esd_OBJ_Dimension.esd_OBJ_Length, _x.esd_OBJ_Dimension.esd_OBJ_Length_STD, _x.esd_OBJ_Dimension.esd_OBJ_Width, _x.esd_OBJ_Dimension.esd_OBJ_Width_STD, _x.esd_OBJ_Dimension.esd_OBJ_Height, _x.esd_OBJ_Dimension.esd_OBJ_Height_STD, _x.esd_source, _x.esd_OBJ_Relate_ID, _x.esd_OBJ_Object_Door_Left_Status, _x.esd_OBJ_Object_Door_Right_Status, _x.esd_OBJ_Cut_In_Lat_Distance, _x.esd_OBJ_Cut_In_Lat_Distance_STD, _x.esd_OBJ_Cut_In_Long_Distance, _x.esd_OBJ_Cut_In_Long_Distance_STD, _x.esd_OBJ_Cut_In_Angle, _x.esd_OBJ_Cut_In_Angle_STD, _x.esd_OBJ_Age_Second, _x.esd_OBJ_Missing_Age_Second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_OBJ_Distance is None:
        self.esd_OBJ_Distance = rospy_message_converter.msg.esd_Position()
      if self.esd_OBJ_Abs_Velocity is None:
        self.esd_OBJ_Abs_Velocity = rospy_message_converter.msg.esd_Velocity()
      if self.esd_OBJ_Abs_Acc is None:
        self.esd_OBJ_Abs_Acc = rospy_message_converter.msg.esd_Acceleration()
      if self.esd_OBJ_Dimension is None:
        self.esd_OBJ_Dimension = rospy_message_converter.msg.esd_Dimension()
      end = 0
      _x = self
      start = end
      end += 223
      (_x.esd_OBJ_Object_Class, _x.esd_OBJ_Age_Frame, _x.esd_OBJ_Object_ID, _x.esd_OBJ_Color, _x.esd_OBJ_Existence_Probability, _x.esd_OBJ_Is_Very_Close, _x.esd_OBJ_Lane_Assignment, _x.esd_OBJ_Measuring_Status, _x.esd_OBJ_Motion_Status, _x.esd_OBJ_Motion_Category, _x.esd_OBJ_Is_Blocked_Parts, _x.esd_OBJ_Heading, _x.esd_OBJ_Heading_STD, _x.esd_OBJ_Angle_Rate, _x.esd_OBJ_Angle_Rate_STD, _x.esd_OBJ_Brake_Light, _x.esd_OBJ_Turn_Indicator, _x.esd_OBJ_HB_Status, _x.esd_OBJ_Dst_Left_Line, _x.esd_OBJ_Dst_Right_Line, _x.esd_OBJ_Is_Blocked_Left, _x.esd_OBJ_Is_Blocked_Right, _x.esd_OBJ_Distance.esd_Long_Position, _x.esd_OBJ_Distance.esd_Long_Position_STD, _x.esd_OBJ_Distance.esd_Lat_Position, _x.esd_OBJ_Distance.esd_Lat_Position_STD, _x.esd_OBJ_Distance.esd_Vertical_Position, _x.esd_OBJ_Distance.esd_Vertical_Position_STD, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Long_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Lat_Velocity_STD, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity, _x.esd_OBJ_Abs_Velocity.esd_Up_Velocity_STD, _x.esd_OBJ_Abs_Acc.esd_Long_Acc, _x.esd_OBJ_Abs_Acc.esd_Long_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc, _x.esd_OBJ_Abs_Acc.esd_Lat_Acc_STD, _x.esd_OBJ_Abs_Acc.esd_Up_Acc, _x.esd_OBJ_Abs_Acc.esd_Up_Acc_STD, _x.esd_OBJ_Dimension.esd_OBJ_Length, _x.esd_OBJ_Dimension.esd_OBJ_Length_STD, _x.esd_OBJ_Dimension.esd_OBJ_Width, _x.esd_OBJ_Dimension.esd_OBJ_Width_STD, _x.esd_OBJ_Dimension.esd_OBJ_Height, _x.esd_OBJ_Dimension.esd_OBJ_Height_STD, _x.esd_source, _x.esd_OBJ_Relate_ID, _x.esd_OBJ_Object_Door_Left_Status, _x.esd_OBJ_Object_Door_Right_Status, _x.esd_OBJ_Cut_In_Lat_Distance, _x.esd_OBJ_Cut_In_Lat_Distance_STD, _x.esd_OBJ_Cut_In_Long_Distance, _x.esd_OBJ_Cut_In_Long_Distance_STD, _x.esd_OBJ_Cut_In_Angle, _x.esd_OBJ_Cut_In_Angle_STD, _x.esd_OBJ_Age_Second, _x.esd_OBJ_Missing_Age_Second,) = _get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().unpack(str[start:end])
      self.esd_OBJ_Is_Very_Close = bool(self.esd_OBJ_Is_Very_Close)
      self.esd_OBJ_Is_Blocked_Left = bool(self.esd_OBJ_Is_Blocked_Left)
      self.esd_OBJ_Is_Blocked_Right = bool(self.esd_OBJ_Is_Blocked_Right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f = None
def _get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f():
    global _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f
    if _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f is None:
        _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f = struct.Struct("<i2IifBiI2iI4f3i2f2B24fiI2i8f")
    return _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f

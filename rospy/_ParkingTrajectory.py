# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParkingTrajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParkingTrajectory(genpy.Message):
  _md5sum = "e2b34c6d3ae19da95b992186f733fae2"
  _type = "rospy_message_converter/ParkingTrajectory"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SlotTrajectory[] slot_trajectory
NodeInfo node_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SlotTrajectory
ADCTrajectory trajectory
SlotBase slot
ParkSlot park_slot
uint64 timestamp

================================================================================
MSG: rospy_message_converter/ADCTrajectory
float64 total_path_length
float64 total_path_time
EStop estop
bool is_replan
string replan_reason
TrajectoryPoint[] trajectory_point
int32 trajectory_type
bool is_finished
string stage
string info
int32 stage_info

================================================================================
MSG: rospy_message_converter/EStop
bool is_estop
string reason

================================================================================
MSG: rospy_message_converter/TrajectoryPoint
PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a

================================================================================
MSG: rospy_message_converter/SlotBase
int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ParkSlot
SlotBase slot
bool left_corner_exist
ParPoint left_corner_pt1
ParPoint left_corner_pt2
bool right_corner_exist
ParPoint right_corner_pt1
ParPoint right_corner_pt2
bool curb_exist
ParPoint curb_pt1
ParPoint curb_pt2
bool slot_bumper
ParPoint slot_bumper_pt1
ParPoint slot_bumper_pt2
ParPoint left_corner_pt3
ParPoint right_corner_pt3
bool corner_pt3_exist
ParPoint virtual_channel_pt1
ParPoint virtual_channel_pt2
bool virtual_channel_exist
int32 left_corner_type
int32 right_corner_type
uint32 slot_update_count
bool replan_suggest

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer
"""
  __slots__ = ['slot_trajectory','node_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/SlotTrajectory[]','rospy_message_converter/NodeInfo','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       slot_trajectory,node_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkingTrajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.slot_trajectory is None:
        self.slot_trajectory = []
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.slot_trajectory = []
      self.node_info = rospy_message_converter.msg.NodeInfo()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.slot_trajectory:
        _v1 = val1.trajectory
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v2 = _v1.estop
        _x = _v2.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v2.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v1.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.trajectory_point:
          _v3 = val3.path_point
          _x = _v3
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v3.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v3
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v4 = val3.gaussian_info
          _x = _v4
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v1
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v1.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v5 = val1.slot
        _x = _v5
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v6 = _v5.pt1
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v7 = _v5.pt2
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v8 = _v5.pt3
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v9 = _v5.pt4
        _x = _v9
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v5
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v10 = _v5.VehPos
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v5
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v11 = val1.park_slot
        _v12 = _v11.slot
        _x = _v12
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v13 = _v12.pt1
        _x = _v13
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.pt2
        _x = _v14
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v15 = _v12.pt3
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v16 = _v12.pt4
        _x = _v16
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v12
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v17 = _v12.VehPos
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v12
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v11.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v18 = _v11.left_corner_pt1
        _x = _v18
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v19 = _v11.left_corner_pt2
        _x = _v19
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v20 = _v11.right_corner_pt1
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v21 = _v11.right_corner_pt2
        _x = _v21
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v22 = _v11.curb_pt1
        _x = _v22
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v23 = _v11.curb_pt2
        _x = _v23
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v24 = _v11.slot_bumper_pt1
        _x = _v24
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v25 = _v11.slot_bumper_pt2
        _x = _v25
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v26 = _v11.left_corner_pt3
        _x = _v26
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v27 = _v11.right_corner_pt3
        _x = _v27
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v28 = _v11.virtual_channel_pt1
        _x = _v28
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v29 = _v11.virtual_channel_pt2
        _x = _v29
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.node_info.buffer))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slot_trajectory is None:
        self.slot_trajectory = None
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v30 = val1.trajectory
        _x = _v30
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v31 = _v30.estop
        start = end
        end += 1
        (_v31.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v31.is_estop = bool(_v31.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.reason = str[start:end]
        start = end
        end += 1
        (_v30.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v30.is_replan = bool(_v30.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v30.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v32 = val3.path_point
          _x = _v32
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v32.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v32.lane_id = str[start:end]
          _x = _v32
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v33 = val3.gaussian_info
          _x = _v33
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v30.trajectory_point.append(val3)
        _x = _v30
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v30.is_finished = bool(_v30.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.info = str[start:end]
        start = end
        end += 4
        (_v30.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v34 = val1.slot
        _x = _v34
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v35 = _v34.pt1
        _x = _v35
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v36 = _v34.pt2
        _x = _v36
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v37 = _v34.pt3
        _x = _v37
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v38 = _v34.pt4
        _x = _v38
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v34
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v39 = _v34.VehPos
        _x = _v39
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v34
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v40 = val1.park_slot
        _v41 = _v40.slot
        _x = _v41
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v42 = _v41.pt1
        _x = _v42
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v43 = _v41.pt2
        _x = _v43
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v44 = _v41.pt3
        _x = _v44
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v45 = _v41.pt4
        _x = _v45
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v41
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v46 = _v41.VehPos
        _x = _v46
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v41
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v40.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v40.left_corner_exist = bool(_v40.left_corner_exist)
        _v47 = _v40.left_corner_pt1
        _x = _v47
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v48 = _v40.left_corner_pt2
        _x = _v48
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v40.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v40.right_corner_exist = bool(_v40.right_corner_exist)
        _v49 = _v40.right_corner_pt1
        _x = _v49
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v50 = _v40.right_corner_pt2
        _x = _v50
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v40.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v40.curb_exist = bool(_v40.curb_exist)
        _v51 = _v40.curb_pt1
        _x = _v51
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v52 = _v40.curb_pt2
        _x = _v52
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v40.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v40.slot_bumper = bool(_v40.slot_bumper)
        _v53 = _v40.slot_bumper_pt1
        _x = _v53
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v54 = _v40.slot_bumper_pt2
        _x = _v54
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v55 = _v40.left_corner_pt3
        _x = _v55
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v56 = _v40.right_corner_pt3
        _x = _v56
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v40.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v40.corner_pt3_exist = bool(_v40.corner_pt3_exist)
        _v57 = _v40.virtual_channel_pt1
        _x = _v57
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v58 = _v40.virtual_channel_pt2
        _x = _v58
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v40
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v40.virtual_channel_exist = bool(_v40.virtual_channel_exist)
        _v40.replan_suggest = bool(_v40.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.slot_trajectory:
        _v59 = val1.trajectory
        _x = _v59
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v60 = _v59.estop
        _x = _v60.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v60.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v59.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v59.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v59.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v59.trajectory_point:
          _v61 = val3.path_point
          _x = _v61
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v61.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v61
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v62 = val3.gaussian_info
          _x = _v62
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v59
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v59.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v59.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v59.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v63 = val1.slot
        _x = _v63
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v64 = _v63.pt1
        _x = _v64
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v65 = _v63.pt2
        _x = _v65
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v66 = _v63.pt3
        _x = _v66
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v67 = _v63.pt4
        _x = _v67
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v63
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v68 = _v63.VehPos
        _x = _v68
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v63
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v69 = val1.park_slot
        _v70 = _v69.slot
        _x = _v70
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v71 = _v70.pt1
        _x = _v71
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v72 = _v70.pt2
        _x = _v72
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v73 = _v70.pt3
        _x = _v73
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v74 = _v70.pt4
        _x = _v74
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v70
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v75 = _v70.VehPos
        _x = _v75
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v70
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v69.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v76 = _v69.left_corner_pt1
        _x = _v76
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v77 = _v69.left_corner_pt2
        _x = _v77
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v78 = _v69.right_corner_pt1
        _x = _v78
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v79 = _v69.right_corner_pt2
        _x = _v79
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v80 = _v69.curb_pt1
        _x = _v80
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v81 = _v69.curb_pt2
        _x = _v81
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v82 = _v69.slot_bumper_pt1
        _x = _v82
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v83 = _v69.slot_bumper_pt2
        _x = _v83
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v84 = _v69.left_corner_pt3
        _x = _v84
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v85 = _v69.right_corner_pt3
        _x = _v85
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v86 = _v69.virtual_channel_pt1
        _x = _v86
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v87 = _v69.virtual_channel_pt2
        _x = _v87
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.node_info.buffer.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slot_trajectory is None:
        self.slot_trajectory = None
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v88 = val1.trajectory
        _x = _v88
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v89 = _v88.estop
        start = end
        end += 1
        (_v89.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v89.is_estop = bool(_v89.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v89.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v89.reason = str[start:end]
        start = end
        end += 1
        (_v88.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v88.is_replan = bool(_v88.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v88.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v90 = val3.path_point
          _x = _v90
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v90.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v90.lane_id = str[start:end]
          _x = _v90
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v91 = val3.gaussian_info
          _x = _v91
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v88.trajectory_point.append(val3)
        _x = _v88
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v88.is_finished = bool(_v88.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.info = str[start:end]
        start = end
        end += 4
        (_v88.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v92 = val1.slot
        _x = _v92
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v93 = _v92.pt1
        _x = _v93
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v94 = _v92.pt2
        _x = _v94
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v95 = _v92.pt3
        _x = _v95
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v96 = _v92.pt4
        _x = _v96
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v92
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v97 = _v92.VehPos
        _x = _v97
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v92
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v98 = val1.park_slot
        _v99 = _v98.slot
        _x = _v99
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v100 = _v99.pt1
        _x = _v100
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v101 = _v99.pt2
        _x = _v101
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v102 = _v99.pt3
        _x = _v102
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v103 = _v99.pt4
        _x = _v103
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v99
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v104 = _v99.VehPos
        _x = _v104
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v99
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v98.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.left_corner_exist = bool(_v98.left_corner_exist)
        _v105 = _v98.left_corner_pt1
        _x = _v105
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v106 = _v98.left_corner_pt2
        _x = _v106
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.right_corner_exist = bool(_v98.right_corner_exist)
        _v107 = _v98.right_corner_pt1
        _x = _v107
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v108 = _v98.right_corner_pt2
        _x = _v108
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.curb_exist = bool(_v98.curb_exist)
        _v109 = _v98.curb_pt1
        _x = _v109
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v110 = _v98.curb_pt2
        _x = _v110
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v98.slot_bumper = bool(_v98.slot_bumper)
        _v111 = _v98.slot_bumper_pt1
        _x = _v111
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v112 = _v98.slot_bumper_pt2
        _x = _v112
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v113 = _v98.left_corner_pt3
        _x = _v113
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v114 = _v98.right_corner_pt3
        _x = _v114
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.corner_pt3_exist = bool(_v98.corner_pt3_exist)
        _v115 = _v98.virtual_channel_pt1
        _x = _v115
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v116 = _v98.virtual_channel_pt2
        _x = _v116
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v98
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v98.virtual_channel_exist = bool(_v98.virtual_channel_exist)
        _v98.replan_suggest = bool(_v98.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i2f = None
def _get_struct_2i2f():
    global _struct_2i2f
    if _struct_2i2f is None:
        _struct_2i2f = struct.Struct("<2i2f")
    return _struct_2i2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2iIB = None
def _get_struct_B2iIB():
    global _struct_B2iIB
    if _struct_B2iIB is None:
        _struct_B2iIB = struct.Struct("<B2iIB")
    return _struct_B2iIB
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_f3if = None
def _get_struct_f3if():
    global _struct_f3if
    if _struct_f3if is None:
        _struct_f3if = struct.Struct("<f3if")
    return _struct_f3if
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB

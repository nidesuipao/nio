# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VariantCodeInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VariantCodeInfo(genpy.Message):
  _md5sum = "971e69a783feab471e94231174756591"
  _type = "rospy_message_converter/VariantCodeInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 nad_pkg
int32 sales_region
int32 wheel_size
int32 sales_country
int32 vehicle_generation
int32 vehicle_project
int32 drive_hand
bool nop_plus_subscribe_avail
"""
  __slots__ = ['nad_pkg','sales_region','wheel_size','sales_country','vehicle_generation','vehicle_project','drive_hand','nop_plus_subscribe_avail']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nad_pkg,sales_region,wheel_size,sales_country,vehicle_generation,vehicle_project,drive_hand,nop_plus_subscribe_avail

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VariantCodeInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.nad_pkg is None:
        self.nad_pkg = 0
      if self.sales_region is None:
        self.sales_region = 0
      if self.wheel_size is None:
        self.wheel_size = 0
      if self.sales_country is None:
        self.sales_country = 0
      if self.vehicle_generation is None:
        self.vehicle_generation = 0
      if self.vehicle_project is None:
        self.vehicle_project = 0
      if self.drive_hand is None:
        self.drive_hand = 0
      if self.nop_plus_subscribe_avail is None:
        self.nop_plus_subscribe_avail = False
    else:
      self.nad_pkg = 0
      self.sales_region = 0
      self.wheel_size = 0
      self.sales_country = 0
      self.vehicle_generation = 0
      self.vehicle_project = 0
      self.drive_hand = 0
      self.nop_plus_subscribe_avail = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7iB().pack(_x.nad_pkg, _x.sales_region, _x.wheel_size, _x.sales_country, _x.vehicle_generation, _x.vehicle_project, _x.drive_hand, _x.nop_plus_subscribe_avail))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.nad_pkg, _x.sales_region, _x.wheel_size, _x.sales_country, _x.vehicle_generation, _x.vehicle_project, _x.drive_hand, _x.nop_plus_subscribe_avail,) = _get_struct_7iB().unpack(str[start:end])
      self.nop_plus_subscribe_avail = bool(self.nop_plus_subscribe_avail)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7iB().pack(_x.nad_pkg, _x.sales_region, _x.wheel_size, _x.sales_country, _x.vehicle_generation, _x.vehicle_project, _x.drive_hand, _x.nop_plus_subscribe_avail))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.nad_pkg, _x.sales_region, _x.wheel_size, _x.sales_country, _x.vehicle_generation, _x.vehicle_project, _x.drive_hand, _x.nop_plus_subscribe_avail,) = _get_struct_7iB().unpack(str[start:end])
      self.nop_plus_subscribe_avail = bool(self.nop_plus_subscribe_avail)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7iB = None
def _get_struct_7iB():
    global _struct_7iB
    if _struct_7iB is None:
        _struct_7iB = struct.Struct("<7iB")
    return _struct_7iB

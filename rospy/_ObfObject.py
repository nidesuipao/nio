# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ObfObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ObfObject(genpy.Message):
  _md5sum = "8a8175aea8f8308c21d7a28b296c04e1"
  _type = "rospy_message_converter/ObfObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FusObject fuseobj
CameraObjSup cam_sup_info
RadarObjSup rdr_sup_info
FusObjSup fus_sup_info

================================================================================
MSG: rospy_message_converter/FusObject
uint32 id
ObjPos pos_vcs
ObjPos pos_ccs
ObjVel vel_vcs
ObjVel vel_ccs
ObjAcc acc
int32 object_status
int32 valid_status
ObfClassification type
int32 blinker_info
int32 brake_info
uint32 age
uint32 age_ms
ObjSize size
float32 heading
float32 heading_rate
float32 dist_from_left_lane
float32 dist_from_right_lane
uint32 tracklet_match_list_len
uint32[] tracklet_match_list
uint32[] tracket_loss_match_cnt_list
uint32 vision_match_id
uint32 vision_match_idx
uint32 fusion_source
uint32 lost_cnt
float32 angle
uint32 moving_cnt
uint32 merged_obj_idx_list_length
uint32[] merged_obj_idx_list
uint32 motion_category
uint32 fusion_source_his
float32 vision_exist_prob
uint32 vision_match_cnt
uint32 radar_match_cnt
uint32 move_status
ObjLaneLoc lane_location
float32 confidence
float32[] type_prob
PredictionTrajectory[] pred_traj
ObstacleIntent intent
Point3D[] polygon_point
bool is_predicted_cutin

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObfClassification
int32 obj_main_class
uint32 obj_sub_class

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjLaneLoc
uint32 lane_index
int32 lane_id
int32 lane_id_debounced
uint32 debounced_cnt
float32 vx_ccs
float32 vy_ccs
float32 dy_ccs
float32 hd_angle_2_lane
float32 dy_min
float32 dy_max

================================================================================
MSG: rospy_message_converter/PredictionTrajectory
PredictionPathPoint[] trajectory
float32 probability

================================================================================
MSG: rospy_message_converter/PredictionPathPoint
float32 x
float32 y
int32 time_delta
float32 speed
float32 heading

================================================================================
MSG: rospy_message_converter/ObstacleIntent
int32 type

================================================================================
MSG: rospy_message_converter/Point3D
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/CameraObjSup
float32 mature_to_coast_lon_dst
float32 start_dx
uint32 age_frame
uint32 age_second
uint32 color
bool is_very_close
float32 ttc_inverse
bool is_blocked_parts
bool is_blocked_left
bool is_blocked_right
int32 hb_status
float32 cut_angle
float32 cut_distance
int32 measuring_status

================================================================================
MSG: rospy_message_converter/RadarObjSup
int32 radar_src
float32 start_dx
float32 rcs

================================================================================
MSG: rospy_message_converter/FusObjSup
uint32[] track_cnt
uint32 moving_cnt
bool fsp_cam_obj_disagree
MatchInfo[] radar_match_list
MatchInfo vision_match
ObjMotion[] meas_motion
int32[] merged_idx
uint32 debug_reserved

================================================================================
MSG: rospy_message_converter/MatchInfo
uint32 id
uint32 idx
uint32 loose_match_cnt

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std
"""
  __slots__ = ['fuseobj','cam_sup_info','rdr_sup_info','fus_sup_info']
  _slot_types = ['rospy_message_converter/FusObject','rospy_message_converter/CameraObjSup','rospy_message_converter/RadarObjSup','rospy_message_converter/FusObjSup']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fuseobj,cam_sup_info,rdr_sup_info,fus_sup_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObfObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fuseobj is None:
        self.fuseobj = rospy_message_converter.msg.FusObject()
      if self.cam_sup_info is None:
        self.cam_sup_info = rospy_message_converter.msg.CameraObjSup()
      if self.rdr_sup_info is None:
        self.rdr_sup_info = rospy_message_converter.msg.RadarObjSup()
      if self.fus_sup_info is None:
        self.fus_sup_info = rospy_message_converter.msg.FusObjSup()
    else:
      self.fuseobj = rospy_message_converter.msg.FusObject()
      self.cam_sup_info = rospy_message_converter.msg.CameraObjSup()
      self.rdr_sup_info = rospy_message_converter.msg.RadarObjSup()
      self.fus_sup_info = rospy_message_converter.msg.FusObjSup()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I15f3iI2i2I7fI().pack(_x.fuseobj.id, _x.fuseobj.pos_vcs.x, _x.fuseobj.pos_vcs.y, _x.fuseobj.pos_vcs.z, _x.fuseobj.pos_ccs.x, _x.fuseobj.pos_ccs.y, _x.fuseobj.pos_ccs.z, _x.fuseobj.vel_vcs.vx, _x.fuseobj.vel_vcs.vy, _x.fuseobj.vel_vcs.vz, _x.fuseobj.vel_ccs.vx, _x.fuseobj.vel_ccs.vy, _x.fuseobj.vel_ccs.vz, _x.fuseobj.acc.ax, _x.fuseobj.acc.ay, _x.fuseobj.acc.az, _x.fuseobj.object_status, _x.fuseobj.valid_status, _x.fuseobj.type.obj_main_class, _x.fuseobj.type.obj_sub_class, _x.fuseobj.blinker_info, _x.fuseobj.brake_info, _x.fuseobj.age, _x.fuseobj.age_ms, _x.fuseobj.size.length, _x.fuseobj.size.width, _x.fuseobj.size.height, _x.fuseobj.heading, _x.fuseobj.heading_rate, _x.fuseobj.dist_from_left_lane, _x.fuseobj.dist_from_right_lane, _x.fuseobj.tracklet_match_list_len))
      length = len(self.fuseobj.tracklet_match_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fuseobj.tracklet_match_list))
      length = len(self.fuseobj.tracket_loss_match_cnt_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fuseobj.tracket_loss_match_cnt_list))
      _x = self
      buff.write(_get_struct_4If2I().pack(_x.fuseobj.vision_match_id, _x.fuseobj.vision_match_idx, _x.fuseobj.fusion_source, _x.fuseobj.lost_cnt, _x.fuseobj.angle, _x.fuseobj.moving_cnt, _x.fuseobj.merged_obj_idx_list_length))
      length = len(self.fuseobj.merged_obj_idx_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fuseobj.merged_obj_idx_list))
      _x = self
      buff.write(_get_struct_2If4I2iI7f().pack(_x.fuseobj.motion_category, _x.fuseobj.fusion_source_his, _x.fuseobj.vision_exist_prob, _x.fuseobj.vision_match_cnt, _x.fuseobj.radar_match_cnt, _x.fuseobj.move_status, _x.fuseobj.lane_location.lane_index, _x.fuseobj.lane_location.lane_id, _x.fuseobj.lane_location.lane_id_debounced, _x.fuseobj.lane_location.debounced_cnt, _x.fuseobj.lane_location.vx_ccs, _x.fuseobj.lane_location.vy_ccs, _x.fuseobj.lane_location.dy_ccs, _x.fuseobj.lane_location.hd_angle_2_lane, _x.fuseobj.lane_location.dy_min, _x.fuseobj.lane_location.dy_max, _x.fuseobj.confidence))
      length = len(self.fuseobj.type_prob)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fuseobj.type_prob))
      length = len(self.fuseobj.pred_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fuseobj.pred_traj:
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2
          buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self.fuseobj.intent.type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.fuseobj.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.fuseobj.polygon_point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_B2f3IBf3Bi2f2i2f().pack(_x.fuseobj.is_predicted_cutin, _x.cam_sup_info.mature_to_coast_lon_dst, _x.cam_sup_info.start_dx, _x.cam_sup_info.age_frame, _x.cam_sup_info.age_second, _x.cam_sup_info.color, _x.cam_sup_info.is_very_close, _x.cam_sup_info.ttc_inverse, _x.cam_sup_info.is_blocked_parts, _x.cam_sup_info.is_blocked_left, _x.cam_sup_info.is_blocked_right, _x.cam_sup_info.hb_status, _x.cam_sup_info.cut_angle, _x.cam_sup_info.cut_distance, _x.cam_sup_info.measuring_status, _x.rdr_sup_info.radar_src, _x.rdr_sup_info.start_dx, _x.rdr_sup_info.rcs))
      length = len(self.fus_sup_info.track_cnt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fus_sup_info.track_cnt))
      _x = self
      buff.write(_get_struct_IB().pack(_x.fus_sup_info.moving_cnt, _x.fus_sup_info.fsp_cam_obj_disagree))
      length = len(self.fus_sup_info.radar_match_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.fus_sup_info.radar_match_list:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
      _x = self
      buff.write(_get_struct_3I().pack(_x.fus_sup_info.vision_match.id, _x.fus_sup_info.vision_match.idx, _x.fus_sup_info.vision_match.loose_match_cnt))
      length = len(self.fus_sup_info.meas_motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.fus_sup_info.meas_motion:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v2 = val1.pos_std
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
        _v3 = val1.vel
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v4 = val1.vel_std
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
        _v5 = val1.acc
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _v6 = val1.acc_std
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
        _v7 = val1.size
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v8 = val1.size_std
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
        _x = val1
        buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
      length = len(self.fus_sup_info.merged_idx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.fus_sup_info.merged_idx))
      _x = self.fus_sup_info.debug_reserved
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fuseobj is None:
        self.fuseobj = rospy_message_converter.msg.FusObject()
      if self.cam_sup_info is None:
        self.cam_sup_info = rospy_message_converter.msg.CameraObjSup()
      if self.rdr_sup_info is None:
        self.rdr_sup_info = rospy_message_converter.msg.RadarObjSup()
      if self.fus_sup_info is None:
        self.fus_sup_info = rospy_message_converter.msg.FusObjSup()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.fuseobj.id, _x.fuseobj.pos_vcs.x, _x.fuseobj.pos_vcs.y, _x.fuseobj.pos_vcs.z, _x.fuseobj.pos_ccs.x, _x.fuseobj.pos_ccs.y, _x.fuseobj.pos_ccs.z, _x.fuseobj.vel_vcs.vx, _x.fuseobj.vel_vcs.vy, _x.fuseobj.vel_vcs.vz, _x.fuseobj.vel_ccs.vx, _x.fuseobj.vel_ccs.vy, _x.fuseobj.vel_ccs.vz, _x.fuseobj.acc.ax, _x.fuseobj.acc.ay, _x.fuseobj.acc.az, _x.fuseobj.object_status, _x.fuseobj.valid_status, _x.fuseobj.type.obj_main_class, _x.fuseobj.type.obj_sub_class, _x.fuseobj.blinker_info, _x.fuseobj.brake_info, _x.fuseobj.age, _x.fuseobj.age_ms, _x.fuseobj.size.length, _x.fuseobj.size.width, _x.fuseobj.size.height, _x.fuseobj.heading, _x.fuseobj.heading_rate, _x.fuseobj.dist_from_left_lane, _x.fuseobj.dist_from_right_lane, _x.fuseobj.tracklet_match_list_len,) = _get_struct_I15f3iI2i2I7fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.tracklet_match_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.tracket_loss_match_cnt_list = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.fuseobj.vision_match_id, _x.fuseobj.vision_match_idx, _x.fuseobj.fusion_source, _x.fuseobj.lost_cnt, _x.fuseobj.angle, _x.fuseobj.moving_cnt, _x.fuseobj.merged_obj_idx_list_length,) = _get_struct_4If2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.merged_obj_idx_list = s.unpack(str[start:end])
      _x = self
      start = end
      end += 68
      (_x.fuseobj.motion_category, _x.fuseobj.fusion_source_his, _x.fuseobj.vision_exist_prob, _x.fuseobj.vision_match_cnt, _x.fuseobj.radar_match_cnt, _x.fuseobj.move_status, _x.fuseobj.lane_location.lane_index, _x.fuseobj.lane_location.lane_id, _x.fuseobj.lane_location.lane_id_debounced, _x.fuseobj.lane_location.debounced_cnt, _x.fuseobj.lane_location.vx_ccs, _x.fuseobj.lane_location.vy_ccs, _x.fuseobj.lane_location.dy_ccs, _x.fuseobj.lane_location.hd_angle_2_lane, _x.fuseobj.lane_location.dy_min, _x.fuseobj.lane_location.dy_max, _x.fuseobj.confidence,) = _get_struct_2If4I2iI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.type_prob = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fuseobj.pred_traj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionPathPoint()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
          val1.trajectory.append(val2)
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.fuseobj.pred_traj.append(val1)
      start = end
      end += 4
      (self.fuseobj.intent.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fuseobj.polygon_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point3D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.fuseobj.polygon_point.append(val1)
      _x = self
      start = end
      end += 57
      (_x.fuseobj.is_predicted_cutin, _x.cam_sup_info.mature_to_coast_lon_dst, _x.cam_sup_info.start_dx, _x.cam_sup_info.age_frame, _x.cam_sup_info.age_second, _x.cam_sup_info.color, _x.cam_sup_info.is_very_close, _x.cam_sup_info.ttc_inverse, _x.cam_sup_info.is_blocked_parts, _x.cam_sup_info.is_blocked_left, _x.cam_sup_info.is_blocked_right, _x.cam_sup_info.hb_status, _x.cam_sup_info.cut_angle, _x.cam_sup_info.cut_distance, _x.cam_sup_info.measuring_status, _x.rdr_sup_info.radar_src, _x.rdr_sup_info.start_dx, _x.rdr_sup_info.rcs,) = _get_struct_B2f3IBf3Bi2f2i2f().unpack(str[start:end])
      self.fuseobj.is_predicted_cutin = bool(self.fuseobj.is_predicted_cutin)
      self.cam_sup_info.is_very_close = bool(self.cam_sup_info.is_very_close)
      self.cam_sup_info.is_blocked_parts = bool(self.cam_sup_info.is_blocked_parts)
      self.cam_sup_info.is_blocked_left = bool(self.cam_sup_info.is_blocked_left)
      self.cam_sup_info.is_blocked_right = bool(self.cam_sup_info.is_blocked_right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fus_sup_info.track_cnt = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.fus_sup_info.moving_cnt, _x.fus_sup_info.fsp_cam_obj_disagree,) = _get_struct_IB().unpack(str[start:end])
      self.fus_sup_info.fsp_cam_obj_disagree = bool(self.fus_sup_info.fsp_cam_obj_disagree)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fus_sup_info.radar_match_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MatchInfo()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
        self.fus_sup_info.radar_match_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.fus_sup_info.vision_match.id, _x.fus_sup_info.vision_match.idx, _x.fus_sup_info.vision_match.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fus_sup_info.meas_motion = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjMotion()
        _v9 = val1.pos
        _x = _v9
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v10 = val1.pos_std
        _x = _v10
        start = end
        end += 12
        (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
        _v11 = val1.vel
        _x = _v11
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v12 = val1.vel_std
        _x = _v12
        start = end
        end += 12
        (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
        _v13 = val1.acc
        _x = _v13
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _v14 = val1.acc_std
        _x = _v14
        start = end
        end += 12
        (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
        _v15 = val1.size
        _x = _v15
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v16 = val1.size_std
        _x = _v16
        start = end
        end += 12
        (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
        self.fus_sup_info.meas_motion.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fus_sup_info.merged_idx = s.unpack(str[start:end])
      start = end
      end += 4
      (self.fus_sup_info.debug_reserved,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I15f3iI2i2I7fI().pack(_x.fuseobj.id, _x.fuseobj.pos_vcs.x, _x.fuseobj.pos_vcs.y, _x.fuseobj.pos_vcs.z, _x.fuseobj.pos_ccs.x, _x.fuseobj.pos_ccs.y, _x.fuseobj.pos_ccs.z, _x.fuseobj.vel_vcs.vx, _x.fuseobj.vel_vcs.vy, _x.fuseobj.vel_vcs.vz, _x.fuseobj.vel_ccs.vx, _x.fuseobj.vel_ccs.vy, _x.fuseobj.vel_ccs.vz, _x.fuseobj.acc.ax, _x.fuseobj.acc.ay, _x.fuseobj.acc.az, _x.fuseobj.object_status, _x.fuseobj.valid_status, _x.fuseobj.type.obj_main_class, _x.fuseobj.type.obj_sub_class, _x.fuseobj.blinker_info, _x.fuseobj.brake_info, _x.fuseobj.age, _x.fuseobj.age_ms, _x.fuseobj.size.length, _x.fuseobj.size.width, _x.fuseobj.size.height, _x.fuseobj.heading, _x.fuseobj.heading_rate, _x.fuseobj.dist_from_left_lane, _x.fuseobj.dist_from_right_lane, _x.fuseobj.tracklet_match_list_len))
      length = len(self.fuseobj.tracklet_match_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fuseobj.tracklet_match_list.tostring())
      length = len(self.fuseobj.tracket_loss_match_cnt_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fuseobj.tracket_loss_match_cnt_list.tostring())
      _x = self
      buff.write(_get_struct_4If2I().pack(_x.fuseobj.vision_match_id, _x.fuseobj.vision_match_idx, _x.fuseobj.fusion_source, _x.fuseobj.lost_cnt, _x.fuseobj.angle, _x.fuseobj.moving_cnt, _x.fuseobj.merged_obj_idx_list_length))
      length = len(self.fuseobj.merged_obj_idx_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fuseobj.merged_obj_idx_list.tostring())
      _x = self
      buff.write(_get_struct_2If4I2iI7f().pack(_x.fuseobj.motion_category, _x.fuseobj.fusion_source_his, _x.fuseobj.vision_exist_prob, _x.fuseobj.vision_match_cnt, _x.fuseobj.radar_match_cnt, _x.fuseobj.move_status, _x.fuseobj.lane_location.lane_index, _x.fuseobj.lane_location.lane_id, _x.fuseobj.lane_location.lane_id_debounced, _x.fuseobj.lane_location.debounced_cnt, _x.fuseobj.lane_location.vx_ccs, _x.fuseobj.lane_location.vy_ccs, _x.fuseobj.lane_location.dy_ccs, _x.fuseobj.lane_location.hd_angle_2_lane, _x.fuseobj.lane_location.dy_min, _x.fuseobj.lane_location.dy_max, _x.fuseobj.confidence))
      length = len(self.fuseobj.type_prob)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fuseobj.type_prob.tostring())
      length = len(self.fuseobj.pred_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fuseobj.pred_traj:
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2
          buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self.fuseobj.intent.type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.fuseobj.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.fuseobj.polygon_point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_B2f3IBf3Bi2f2i2f().pack(_x.fuseobj.is_predicted_cutin, _x.cam_sup_info.mature_to_coast_lon_dst, _x.cam_sup_info.start_dx, _x.cam_sup_info.age_frame, _x.cam_sup_info.age_second, _x.cam_sup_info.color, _x.cam_sup_info.is_very_close, _x.cam_sup_info.ttc_inverse, _x.cam_sup_info.is_blocked_parts, _x.cam_sup_info.is_blocked_left, _x.cam_sup_info.is_blocked_right, _x.cam_sup_info.hb_status, _x.cam_sup_info.cut_angle, _x.cam_sup_info.cut_distance, _x.cam_sup_info.measuring_status, _x.rdr_sup_info.radar_src, _x.rdr_sup_info.start_dx, _x.rdr_sup_info.rcs))
      length = len(self.fus_sup_info.track_cnt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fus_sup_info.track_cnt.tostring())
      _x = self
      buff.write(_get_struct_IB().pack(_x.fus_sup_info.moving_cnt, _x.fus_sup_info.fsp_cam_obj_disagree))
      length = len(self.fus_sup_info.radar_match_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.fus_sup_info.radar_match_list:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
      _x = self
      buff.write(_get_struct_3I().pack(_x.fus_sup_info.vision_match.id, _x.fus_sup_info.vision_match.idx, _x.fus_sup_info.vision_match.loose_match_cnt))
      length = len(self.fus_sup_info.meas_motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.fus_sup_info.meas_motion:
        _v17 = val1.pos
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v18 = val1.pos_std
        _x = _v18
        buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
        _v19 = val1.vel
        _x = _v19
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v20 = val1.vel_std
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
        _v21 = val1.acc
        _x = _v21
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _v22 = val1.acc_std
        _x = _v22
        buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
        _v23 = val1.size
        _x = _v23
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v24 = val1.size_std
        _x = _v24
        buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
        _x = val1
        buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
      length = len(self.fus_sup_info.merged_idx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.fus_sup_info.merged_idx.tostring())
      _x = self.fus_sup_info.debug_reserved
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fuseobj is None:
        self.fuseobj = rospy_message_converter.msg.FusObject()
      if self.cam_sup_info is None:
        self.cam_sup_info = rospy_message_converter.msg.CameraObjSup()
      if self.rdr_sup_info is None:
        self.rdr_sup_info = rospy_message_converter.msg.RadarObjSup()
      if self.fus_sup_info is None:
        self.fus_sup_info = rospy_message_converter.msg.FusObjSup()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.fuseobj.id, _x.fuseobj.pos_vcs.x, _x.fuseobj.pos_vcs.y, _x.fuseobj.pos_vcs.z, _x.fuseobj.pos_ccs.x, _x.fuseobj.pos_ccs.y, _x.fuseobj.pos_ccs.z, _x.fuseobj.vel_vcs.vx, _x.fuseobj.vel_vcs.vy, _x.fuseobj.vel_vcs.vz, _x.fuseobj.vel_ccs.vx, _x.fuseobj.vel_ccs.vy, _x.fuseobj.vel_ccs.vz, _x.fuseobj.acc.ax, _x.fuseobj.acc.ay, _x.fuseobj.acc.az, _x.fuseobj.object_status, _x.fuseobj.valid_status, _x.fuseobj.type.obj_main_class, _x.fuseobj.type.obj_sub_class, _x.fuseobj.blinker_info, _x.fuseobj.brake_info, _x.fuseobj.age, _x.fuseobj.age_ms, _x.fuseobj.size.length, _x.fuseobj.size.width, _x.fuseobj.size.height, _x.fuseobj.heading, _x.fuseobj.heading_rate, _x.fuseobj.dist_from_left_lane, _x.fuseobj.dist_from_right_lane, _x.fuseobj.tracklet_match_list_len,) = _get_struct_I15f3iI2i2I7fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.tracklet_match_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.tracket_loss_match_cnt_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 28
      (_x.fuseobj.vision_match_id, _x.fuseobj.vision_match_idx, _x.fuseobj.fusion_source, _x.fuseobj.lost_cnt, _x.fuseobj.angle, _x.fuseobj.moving_cnt, _x.fuseobj.merged_obj_idx_list_length,) = _get_struct_4If2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.merged_obj_idx_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 68
      (_x.fuseobj.motion_category, _x.fuseobj.fusion_source_his, _x.fuseobj.vision_exist_prob, _x.fuseobj.vision_match_cnt, _x.fuseobj.radar_match_cnt, _x.fuseobj.move_status, _x.fuseobj.lane_location.lane_index, _x.fuseobj.lane_location.lane_id, _x.fuseobj.lane_location.lane_id_debounced, _x.fuseobj.lane_location.debounced_cnt, _x.fuseobj.lane_location.vx_ccs, _x.fuseobj.lane_location.vy_ccs, _x.fuseobj.lane_location.dy_ccs, _x.fuseobj.lane_location.hd_angle_2_lane, _x.fuseobj.lane_location.dy_min, _x.fuseobj.lane_location.dy_max, _x.fuseobj.confidence,) = _get_struct_2If4I2iI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fuseobj.type_prob = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fuseobj.pred_traj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionPathPoint()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
          val1.trajectory.append(val2)
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.fuseobj.pred_traj.append(val1)
      start = end
      end += 4
      (self.fuseobj.intent.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fuseobj.polygon_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point3D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.fuseobj.polygon_point.append(val1)
      _x = self
      start = end
      end += 57
      (_x.fuseobj.is_predicted_cutin, _x.cam_sup_info.mature_to_coast_lon_dst, _x.cam_sup_info.start_dx, _x.cam_sup_info.age_frame, _x.cam_sup_info.age_second, _x.cam_sup_info.color, _x.cam_sup_info.is_very_close, _x.cam_sup_info.ttc_inverse, _x.cam_sup_info.is_blocked_parts, _x.cam_sup_info.is_blocked_left, _x.cam_sup_info.is_blocked_right, _x.cam_sup_info.hb_status, _x.cam_sup_info.cut_angle, _x.cam_sup_info.cut_distance, _x.cam_sup_info.measuring_status, _x.rdr_sup_info.radar_src, _x.rdr_sup_info.start_dx, _x.rdr_sup_info.rcs,) = _get_struct_B2f3IBf3Bi2f2i2f().unpack(str[start:end])
      self.fuseobj.is_predicted_cutin = bool(self.fuseobj.is_predicted_cutin)
      self.cam_sup_info.is_very_close = bool(self.cam_sup_info.is_very_close)
      self.cam_sup_info.is_blocked_parts = bool(self.cam_sup_info.is_blocked_parts)
      self.cam_sup_info.is_blocked_left = bool(self.cam_sup_info.is_blocked_left)
      self.cam_sup_info.is_blocked_right = bool(self.cam_sup_info.is_blocked_right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fus_sup_info.track_cnt = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 5
      (_x.fus_sup_info.moving_cnt, _x.fus_sup_info.fsp_cam_obj_disagree,) = _get_struct_IB().unpack(str[start:end])
      self.fus_sup_info.fsp_cam_obj_disagree = bool(self.fus_sup_info.fsp_cam_obj_disagree)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fus_sup_info.radar_match_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MatchInfo()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
        self.fus_sup_info.radar_match_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.fus_sup_info.vision_match.id, _x.fus_sup_info.vision_match.idx, _x.fus_sup_info.vision_match.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fus_sup_info.meas_motion = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjMotion()
        _v25 = val1.pos
        _x = _v25
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v26 = val1.pos_std
        _x = _v26
        start = end
        end += 12
        (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
        _v27 = val1.vel
        _x = _v27
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v28 = val1.vel_std
        _x = _v28
        start = end
        end += 12
        (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
        _v29 = val1.acc
        _x = _v29
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _v30 = val1.acc_std
        _x = _v30
        start = end
        end += 12
        (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
        _v31 = val1.size
        _x = _v31
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v32 = val1.size_std
        _x = _v32
        start = end
        end += 12
        (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
        self.fus_sup_info.meas_motion.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fus_sup_info.merged_idx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.fus_sup_info.debug_reserved,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If4I2iI7f = None
def _get_struct_2If4I2iI7f():
    global _struct_2If4I2iI7f
    if _struct_2If4I2iI7f is None:
        _struct_2If4I2iI7f = struct.Struct("<2If4I2iI7f")
    return _struct_2If4I2iI7f
_struct_2fi2f = None
def _get_struct_2fi2f():
    global _struct_2fi2f
    if _struct_2fi2f is None:
        _struct_2fi2f = struct.Struct("<2fi2f")
    return _struct_2fi2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4If2I = None
def _get_struct_4If2I():
    global _struct_4If2I
    if _struct_4If2I is None:
        _struct_4If2I = struct.Struct("<4If2I")
    return _struct_4If2I
_struct_B2f3IBf3Bi2f2i2f = None
def _get_struct_B2f3IBf3Bi2f2i2f():
    global _struct_B2f3IBf3Bi2f2i2f
    if _struct_B2f3IBf3Bi2f2i2f is None:
        _struct_B2f3IBf3Bi2f2i2f = struct.Struct("<B2f3IBf3Bi2f2i2f")
    return _struct_B2f3IBf3Bi2f2i2f
_struct_I15f3iI2i2I7fI = None
def _get_struct_I15f3iI2i2I7fI():
    global _struct_I15f3iI2i2I7fI
    if _struct_I15f3iI2i2I7fI is None:
        _struct_I15f3iI2i2I7fI = struct.Struct("<I15f3iI2i2I7fI")
    return _struct_I15f3iI2i2I7fI
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fif = None
def _get_struct_fif():
    global _struct_fif
    if _struct_fif is None:
        _struct_fif = struct.Struct("<fif")
    return _struct_fif
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

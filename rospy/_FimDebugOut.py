# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FimDebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FimDebugOut(genpy.Message):
  _md5sum = "b0f5306217e8a8986f67db13fa21c1d8"
  _type = "rospy_message_converter/FimDebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32[] lka_fault
uint32[] ldw_fault
uint32[] elk_fault
uint32[] ahc_fault
uint32[] pilot_eps_fault
uint32[] pilot_acm_fault
uint32[] pilot_bcm_fault
uint32[] pilot_bcu_fault
uint32[] pilot_scm_fault
uint32[] pilot_can_bus_off
uint32[] pilot_vcu_fault
uint32[] pilot_swc_fault
uint32[] pilot_dms_fault
uint32[] pilot_f30_fault
uint32[] pilot_f120_fault
uint32[] pilot_radfc_fault
uint32[] pilot_radfs_fault
uint32[] pilot_radrs_fault
uint32[] pilot_camfs_fault
uint32[] pilot_camrs_fault
uint32[] pilot_svc_fault
uint32[] pilot_apa_fault
uint32[] pilot_bgw_fault
uint32[] pilot_cdc_fault
uint32[] pilot_np_fault
uint32[] pilot_lidar_fault
uint32[] pilot_power_fault
uint32[] pilot_soc1adp_fault
uint32[] pilot_soc2dcb_fault
uint32[] pilot_soc3adb_fault
uint32[] pilot_soc4ads_fault
uint32[] pilot_awb_fault
uint32[] pilot_failsafefc_fault
uint32[] pilot_failsafelidar_fault
uint32[] pilot_othercan_fault
uint32[] pilot_aaapp_fault
uint32[] pilot_mcu_fault
uint32[] pilot_windcalibra_fault
uint32[] pilot_vcuvehdispspd_fault
uint32[] pilot_aba_fault
uint32[] pilot_abp_fault
uint32[] pilot_brkoverheat_fault
uint32[] pilot_vdctcsfail_fault
uint32[] pilot_hodsensor_fault
uint32[] pilot_percepapp_fault
uint32[] pilot_lidar_failsafe
uint32[] pilot_camfw_failsafe
uint32[] pilot_camfn_failsafe
uint32[] pilot_camfl_failsafe
uint32[] pilot_camfr_failsafe
uint32[] pilot_camr_failsafe
uint32[] pilot_camrl_failsafe
uint32[] pilot_camrr_failsafe
uint32[] pilot_camsvfft_failsafe
uint32[] pilot_camsvcrr_failsafe
uint32[] pilot_camsvclf_failsafe
uint32[] pilot_camsvcrt_failsafe
uint32[] eas_fault
uint32[] heater_fault
uint32[] alcs_fim
uint32[] alcs_failsafe
"""
  __slots__ = ['lka_fault','ldw_fault','elk_fault','ahc_fault','pilot_eps_fault','pilot_acm_fault','pilot_bcm_fault','pilot_bcu_fault','pilot_scm_fault','pilot_can_bus_off','pilot_vcu_fault','pilot_swc_fault','pilot_dms_fault','pilot_f30_fault','pilot_f120_fault','pilot_radfc_fault','pilot_radfs_fault','pilot_radrs_fault','pilot_camfs_fault','pilot_camrs_fault','pilot_svc_fault','pilot_apa_fault','pilot_bgw_fault','pilot_cdc_fault','pilot_np_fault','pilot_lidar_fault','pilot_power_fault','pilot_soc1adp_fault','pilot_soc2dcb_fault','pilot_soc3adb_fault','pilot_soc4ads_fault','pilot_awb_fault','pilot_failsafefc_fault','pilot_failsafelidar_fault','pilot_othercan_fault','pilot_aaapp_fault','pilot_mcu_fault','pilot_windcalibra_fault','pilot_vcuvehdispspd_fault','pilot_aba_fault','pilot_abp_fault','pilot_brkoverheat_fault','pilot_vdctcsfail_fault','pilot_hodsensor_fault','pilot_percepapp_fault','pilot_lidar_failsafe','pilot_camfw_failsafe','pilot_camfn_failsafe','pilot_camfl_failsafe','pilot_camfr_failsafe','pilot_camr_failsafe','pilot_camrl_failsafe','pilot_camrr_failsafe','pilot_camsvfft_failsafe','pilot_camsvcrr_failsafe','pilot_camsvclf_failsafe','pilot_camsvcrt_failsafe','eas_fault','heater_fault','alcs_fim','alcs_failsafe']
  _slot_types = ['uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lka_fault,ldw_fault,elk_fault,ahc_fault,pilot_eps_fault,pilot_acm_fault,pilot_bcm_fault,pilot_bcu_fault,pilot_scm_fault,pilot_can_bus_off,pilot_vcu_fault,pilot_swc_fault,pilot_dms_fault,pilot_f30_fault,pilot_f120_fault,pilot_radfc_fault,pilot_radfs_fault,pilot_radrs_fault,pilot_camfs_fault,pilot_camrs_fault,pilot_svc_fault,pilot_apa_fault,pilot_bgw_fault,pilot_cdc_fault,pilot_np_fault,pilot_lidar_fault,pilot_power_fault,pilot_soc1adp_fault,pilot_soc2dcb_fault,pilot_soc3adb_fault,pilot_soc4ads_fault,pilot_awb_fault,pilot_failsafefc_fault,pilot_failsafelidar_fault,pilot_othercan_fault,pilot_aaapp_fault,pilot_mcu_fault,pilot_windcalibra_fault,pilot_vcuvehdispspd_fault,pilot_aba_fault,pilot_abp_fault,pilot_brkoverheat_fault,pilot_vdctcsfail_fault,pilot_hodsensor_fault,pilot_percepapp_fault,pilot_lidar_failsafe,pilot_camfw_failsafe,pilot_camfn_failsafe,pilot_camfl_failsafe,pilot_camfr_failsafe,pilot_camr_failsafe,pilot_camrl_failsafe,pilot_camrr_failsafe,pilot_camsvfft_failsafe,pilot_camsvcrr_failsafe,pilot_camsvclf_failsafe,pilot_camsvcrt_failsafe,eas_fault,heater_fault,alcs_fim,alcs_failsafe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FimDebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lka_fault is None:
        self.lka_fault = []
      if self.ldw_fault is None:
        self.ldw_fault = []
      if self.elk_fault is None:
        self.elk_fault = []
      if self.ahc_fault is None:
        self.ahc_fault = []
      if self.pilot_eps_fault is None:
        self.pilot_eps_fault = []
      if self.pilot_acm_fault is None:
        self.pilot_acm_fault = []
      if self.pilot_bcm_fault is None:
        self.pilot_bcm_fault = []
      if self.pilot_bcu_fault is None:
        self.pilot_bcu_fault = []
      if self.pilot_scm_fault is None:
        self.pilot_scm_fault = []
      if self.pilot_can_bus_off is None:
        self.pilot_can_bus_off = []
      if self.pilot_vcu_fault is None:
        self.pilot_vcu_fault = []
      if self.pilot_swc_fault is None:
        self.pilot_swc_fault = []
      if self.pilot_dms_fault is None:
        self.pilot_dms_fault = []
      if self.pilot_f30_fault is None:
        self.pilot_f30_fault = []
      if self.pilot_f120_fault is None:
        self.pilot_f120_fault = []
      if self.pilot_radfc_fault is None:
        self.pilot_radfc_fault = []
      if self.pilot_radfs_fault is None:
        self.pilot_radfs_fault = []
      if self.pilot_radrs_fault is None:
        self.pilot_radrs_fault = []
      if self.pilot_camfs_fault is None:
        self.pilot_camfs_fault = []
      if self.pilot_camrs_fault is None:
        self.pilot_camrs_fault = []
      if self.pilot_svc_fault is None:
        self.pilot_svc_fault = []
      if self.pilot_apa_fault is None:
        self.pilot_apa_fault = []
      if self.pilot_bgw_fault is None:
        self.pilot_bgw_fault = []
      if self.pilot_cdc_fault is None:
        self.pilot_cdc_fault = []
      if self.pilot_np_fault is None:
        self.pilot_np_fault = []
      if self.pilot_lidar_fault is None:
        self.pilot_lidar_fault = []
      if self.pilot_power_fault is None:
        self.pilot_power_fault = []
      if self.pilot_soc1adp_fault is None:
        self.pilot_soc1adp_fault = []
      if self.pilot_soc2dcb_fault is None:
        self.pilot_soc2dcb_fault = []
      if self.pilot_soc3adb_fault is None:
        self.pilot_soc3adb_fault = []
      if self.pilot_soc4ads_fault is None:
        self.pilot_soc4ads_fault = []
      if self.pilot_awb_fault is None:
        self.pilot_awb_fault = []
      if self.pilot_failsafefc_fault is None:
        self.pilot_failsafefc_fault = []
      if self.pilot_failsafelidar_fault is None:
        self.pilot_failsafelidar_fault = []
      if self.pilot_othercan_fault is None:
        self.pilot_othercan_fault = []
      if self.pilot_aaapp_fault is None:
        self.pilot_aaapp_fault = []
      if self.pilot_mcu_fault is None:
        self.pilot_mcu_fault = []
      if self.pilot_windcalibra_fault is None:
        self.pilot_windcalibra_fault = []
      if self.pilot_vcuvehdispspd_fault is None:
        self.pilot_vcuvehdispspd_fault = []
      if self.pilot_aba_fault is None:
        self.pilot_aba_fault = []
      if self.pilot_abp_fault is None:
        self.pilot_abp_fault = []
      if self.pilot_brkoverheat_fault is None:
        self.pilot_brkoverheat_fault = []
      if self.pilot_vdctcsfail_fault is None:
        self.pilot_vdctcsfail_fault = []
      if self.pilot_hodsensor_fault is None:
        self.pilot_hodsensor_fault = []
      if self.pilot_percepapp_fault is None:
        self.pilot_percepapp_fault = []
      if self.pilot_lidar_failsafe is None:
        self.pilot_lidar_failsafe = []
      if self.pilot_camfw_failsafe is None:
        self.pilot_camfw_failsafe = []
      if self.pilot_camfn_failsafe is None:
        self.pilot_camfn_failsafe = []
      if self.pilot_camfl_failsafe is None:
        self.pilot_camfl_failsafe = []
      if self.pilot_camfr_failsafe is None:
        self.pilot_camfr_failsafe = []
      if self.pilot_camr_failsafe is None:
        self.pilot_camr_failsafe = []
      if self.pilot_camrl_failsafe is None:
        self.pilot_camrl_failsafe = []
      if self.pilot_camrr_failsafe is None:
        self.pilot_camrr_failsafe = []
      if self.pilot_camsvfft_failsafe is None:
        self.pilot_camsvfft_failsafe = []
      if self.pilot_camsvcrr_failsafe is None:
        self.pilot_camsvcrr_failsafe = []
      if self.pilot_camsvclf_failsafe is None:
        self.pilot_camsvclf_failsafe = []
      if self.pilot_camsvcrt_failsafe is None:
        self.pilot_camsvcrt_failsafe = []
      if self.eas_fault is None:
        self.eas_fault = []
      if self.heater_fault is None:
        self.heater_fault = []
      if self.alcs_fim is None:
        self.alcs_fim = []
      if self.alcs_failsafe is None:
        self.alcs_failsafe = []
    else:
      self.lka_fault = []
      self.ldw_fault = []
      self.elk_fault = []
      self.ahc_fault = []
      self.pilot_eps_fault = []
      self.pilot_acm_fault = []
      self.pilot_bcm_fault = []
      self.pilot_bcu_fault = []
      self.pilot_scm_fault = []
      self.pilot_can_bus_off = []
      self.pilot_vcu_fault = []
      self.pilot_swc_fault = []
      self.pilot_dms_fault = []
      self.pilot_f30_fault = []
      self.pilot_f120_fault = []
      self.pilot_radfc_fault = []
      self.pilot_radfs_fault = []
      self.pilot_radrs_fault = []
      self.pilot_camfs_fault = []
      self.pilot_camrs_fault = []
      self.pilot_svc_fault = []
      self.pilot_apa_fault = []
      self.pilot_bgw_fault = []
      self.pilot_cdc_fault = []
      self.pilot_np_fault = []
      self.pilot_lidar_fault = []
      self.pilot_power_fault = []
      self.pilot_soc1adp_fault = []
      self.pilot_soc2dcb_fault = []
      self.pilot_soc3adb_fault = []
      self.pilot_soc4ads_fault = []
      self.pilot_awb_fault = []
      self.pilot_failsafefc_fault = []
      self.pilot_failsafelidar_fault = []
      self.pilot_othercan_fault = []
      self.pilot_aaapp_fault = []
      self.pilot_mcu_fault = []
      self.pilot_windcalibra_fault = []
      self.pilot_vcuvehdispspd_fault = []
      self.pilot_aba_fault = []
      self.pilot_abp_fault = []
      self.pilot_brkoverheat_fault = []
      self.pilot_vdctcsfail_fault = []
      self.pilot_hodsensor_fault = []
      self.pilot_percepapp_fault = []
      self.pilot_lidar_failsafe = []
      self.pilot_camfw_failsafe = []
      self.pilot_camfn_failsafe = []
      self.pilot_camfl_failsafe = []
      self.pilot_camfr_failsafe = []
      self.pilot_camr_failsafe = []
      self.pilot_camrl_failsafe = []
      self.pilot_camrr_failsafe = []
      self.pilot_camsvfft_failsafe = []
      self.pilot_camsvcrr_failsafe = []
      self.pilot_camsvclf_failsafe = []
      self.pilot_camsvcrt_failsafe = []
      self.eas_fault = []
      self.heater_fault = []
      self.alcs_fim = []
      self.alcs_failsafe = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lka_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.lka_fault))
      length = len(self.ldw_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.ldw_fault))
      length = len(self.elk_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.elk_fault))
      length = len(self.ahc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.ahc_fault))
      length = len(self.pilot_eps_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_eps_fault))
      length = len(self.pilot_acm_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_acm_fault))
      length = len(self.pilot_bcm_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_bcm_fault))
      length = len(self.pilot_bcu_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_bcu_fault))
      length = len(self.pilot_scm_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_scm_fault))
      length = len(self.pilot_can_bus_off)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_can_bus_off))
      length = len(self.pilot_vcu_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_vcu_fault))
      length = len(self.pilot_swc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_swc_fault))
      length = len(self.pilot_dms_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_dms_fault))
      length = len(self.pilot_f30_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_f30_fault))
      length = len(self.pilot_f120_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_f120_fault))
      length = len(self.pilot_radfc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_radfc_fault))
      length = len(self.pilot_radfs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_radfs_fault))
      length = len(self.pilot_radrs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_radrs_fault))
      length = len(self.pilot_camfs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camfs_fault))
      length = len(self.pilot_camrs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camrs_fault))
      length = len(self.pilot_svc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_svc_fault))
      length = len(self.pilot_apa_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_apa_fault))
      length = len(self.pilot_bgw_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_bgw_fault))
      length = len(self.pilot_cdc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_cdc_fault))
      length = len(self.pilot_np_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_np_fault))
      length = len(self.pilot_lidar_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_lidar_fault))
      length = len(self.pilot_power_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_power_fault))
      length = len(self.pilot_soc1adp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_soc1adp_fault))
      length = len(self.pilot_soc2dcb_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_soc2dcb_fault))
      length = len(self.pilot_soc3adb_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_soc3adb_fault))
      length = len(self.pilot_soc4ads_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_soc4ads_fault))
      length = len(self.pilot_awb_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_awb_fault))
      length = len(self.pilot_failsafefc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_failsafefc_fault))
      length = len(self.pilot_failsafelidar_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_failsafelidar_fault))
      length = len(self.pilot_othercan_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_othercan_fault))
      length = len(self.pilot_aaapp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_aaapp_fault))
      length = len(self.pilot_mcu_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_mcu_fault))
      length = len(self.pilot_windcalibra_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_windcalibra_fault))
      length = len(self.pilot_vcuvehdispspd_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_vcuvehdispspd_fault))
      length = len(self.pilot_aba_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_aba_fault))
      length = len(self.pilot_abp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_abp_fault))
      length = len(self.pilot_brkoverheat_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_brkoverheat_fault))
      length = len(self.pilot_vdctcsfail_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_vdctcsfail_fault))
      length = len(self.pilot_hodsensor_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_hodsensor_fault))
      length = len(self.pilot_percepapp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_percepapp_fault))
      length = len(self.pilot_lidar_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_lidar_failsafe))
      length = len(self.pilot_camfw_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camfw_failsafe))
      length = len(self.pilot_camfn_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camfn_failsafe))
      length = len(self.pilot_camfl_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camfl_failsafe))
      length = len(self.pilot_camfr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camfr_failsafe))
      length = len(self.pilot_camr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camr_failsafe))
      length = len(self.pilot_camrl_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camrl_failsafe))
      length = len(self.pilot_camrr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camrr_failsafe))
      length = len(self.pilot_camsvfft_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camsvfft_failsafe))
      length = len(self.pilot_camsvcrr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camsvcrr_failsafe))
      length = len(self.pilot_camsvclf_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camsvclf_failsafe))
      length = len(self.pilot_camsvcrt_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.pilot_camsvcrt_failsafe))
      length = len(self.eas_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.eas_fault))
      length = len(self.heater_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.heater_fault))
      length = len(self.alcs_fim)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.alcs_fim))
      length = len(self.alcs_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.alcs_failsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lka_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ldw_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.elk_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ahc_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_eps_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_acm_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_bcm_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_bcu_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_scm_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_can_bus_off = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_vcu_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_swc_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_dms_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_f30_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_f120_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_radfc_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_radfs_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_radrs_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfs_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camrs_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_svc_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_apa_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_bgw_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_cdc_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_np_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_lidar_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_power_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc1adp_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc2dcb_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc3adb_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc4ads_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_awb_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_failsafefc_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_failsafelidar_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_othercan_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_aaapp_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_mcu_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_windcalibra_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_vcuvehdispspd_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_aba_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_abp_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_brkoverheat_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_vdctcsfail_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_hodsensor_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_percepapp_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_lidar_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfw_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfn_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfl_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfr_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camr_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camrl_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camrr_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvfft_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvcrr_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvclf_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvcrt_failsafe = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eas_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.heater_fault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.alcs_fim = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.alcs_failsafe = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lka_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.lka_fault.tostring())
      length = len(self.ldw_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.ldw_fault.tostring())
      length = len(self.elk_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.elk_fault.tostring())
      length = len(self.ahc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.ahc_fault.tostring())
      length = len(self.pilot_eps_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_eps_fault.tostring())
      length = len(self.pilot_acm_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_acm_fault.tostring())
      length = len(self.pilot_bcm_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_bcm_fault.tostring())
      length = len(self.pilot_bcu_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_bcu_fault.tostring())
      length = len(self.pilot_scm_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_scm_fault.tostring())
      length = len(self.pilot_can_bus_off)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_can_bus_off.tostring())
      length = len(self.pilot_vcu_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_vcu_fault.tostring())
      length = len(self.pilot_swc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_swc_fault.tostring())
      length = len(self.pilot_dms_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_dms_fault.tostring())
      length = len(self.pilot_f30_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_f30_fault.tostring())
      length = len(self.pilot_f120_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_f120_fault.tostring())
      length = len(self.pilot_radfc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_radfc_fault.tostring())
      length = len(self.pilot_radfs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_radfs_fault.tostring())
      length = len(self.pilot_radrs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_radrs_fault.tostring())
      length = len(self.pilot_camfs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camfs_fault.tostring())
      length = len(self.pilot_camrs_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camrs_fault.tostring())
      length = len(self.pilot_svc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_svc_fault.tostring())
      length = len(self.pilot_apa_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_apa_fault.tostring())
      length = len(self.pilot_bgw_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_bgw_fault.tostring())
      length = len(self.pilot_cdc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_cdc_fault.tostring())
      length = len(self.pilot_np_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_np_fault.tostring())
      length = len(self.pilot_lidar_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_lidar_fault.tostring())
      length = len(self.pilot_power_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_power_fault.tostring())
      length = len(self.pilot_soc1adp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_soc1adp_fault.tostring())
      length = len(self.pilot_soc2dcb_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_soc2dcb_fault.tostring())
      length = len(self.pilot_soc3adb_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_soc3adb_fault.tostring())
      length = len(self.pilot_soc4ads_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_soc4ads_fault.tostring())
      length = len(self.pilot_awb_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_awb_fault.tostring())
      length = len(self.pilot_failsafefc_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_failsafefc_fault.tostring())
      length = len(self.pilot_failsafelidar_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_failsafelidar_fault.tostring())
      length = len(self.pilot_othercan_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_othercan_fault.tostring())
      length = len(self.pilot_aaapp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_aaapp_fault.tostring())
      length = len(self.pilot_mcu_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_mcu_fault.tostring())
      length = len(self.pilot_windcalibra_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_windcalibra_fault.tostring())
      length = len(self.pilot_vcuvehdispspd_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_vcuvehdispspd_fault.tostring())
      length = len(self.pilot_aba_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_aba_fault.tostring())
      length = len(self.pilot_abp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_abp_fault.tostring())
      length = len(self.pilot_brkoverheat_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_brkoverheat_fault.tostring())
      length = len(self.pilot_vdctcsfail_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_vdctcsfail_fault.tostring())
      length = len(self.pilot_hodsensor_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_hodsensor_fault.tostring())
      length = len(self.pilot_percepapp_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_percepapp_fault.tostring())
      length = len(self.pilot_lidar_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_lidar_failsafe.tostring())
      length = len(self.pilot_camfw_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camfw_failsafe.tostring())
      length = len(self.pilot_camfn_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camfn_failsafe.tostring())
      length = len(self.pilot_camfl_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camfl_failsafe.tostring())
      length = len(self.pilot_camfr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camfr_failsafe.tostring())
      length = len(self.pilot_camr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camr_failsafe.tostring())
      length = len(self.pilot_camrl_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camrl_failsafe.tostring())
      length = len(self.pilot_camrr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camrr_failsafe.tostring())
      length = len(self.pilot_camsvfft_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camsvfft_failsafe.tostring())
      length = len(self.pilot_camsvcrr_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camsvcrr_failsafe.tostring())
      length = len(self.pilot_camsvclf_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camsvclf_failsafe.tostring())
      length = len(self.pilot_camsvcrt_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pilot_camsvcrt_failsafe.tostring())
      length = len(self.eas_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.eas_fault.tostring())
      length = len(self.heater_fault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.heater_fault.tostring())
      length = len(self.alcs_fim)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.alcs_fim.tostring())
      length = len(self.alcs_failsafe)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.alcs_failsafe.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lka_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ldw_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.elk_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ahc_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_eps_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_acm_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_bcm_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_bcu_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_scm_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_can_bus_off = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_vcu_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_swc_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_dms_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_f30_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_f120_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_radfc_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_radfs_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_radrs_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfs_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camrs_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_svc_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_apa_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_bgw_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_cdc_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_np_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_lidar_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_power_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc1adp_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc2dcb_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc3adb_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_soc4ads_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_awb_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_failsafefc_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_failsafelidar_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_othercan_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_aaapp_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_mcu_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_windcalibra_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_vcuvehdispspd_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_aba_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_abp_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_brkoverheat_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_vdctcsfail_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_hodsensor_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_percepapp_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_lidar_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfw_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfn_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfl_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camfr_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camr_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camrl_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camrr_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvfft_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvcrr_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvclf_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pilot_camsvcrt_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eas_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.heater_fault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.alcs_fim = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.alcs_failsafe = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I

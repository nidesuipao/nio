# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AdasMapTrafficSign.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AdasMapTrafficSign(genpy.Message):
  _md5sum = "eae650ff791d1dbbd465c916c7d7c970"
  _type = "rospy_message_converter/AdasMapTrafficSign"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 offset
uint64 index
uint64 path_idx
uint64 sign_type
uint64 value
uint32 lane
uint32 vehicle_specific
uint32 time_specific
uint64 condition
uint32 sign_location
bool position_valid
AdasMapPoint2d position_pt
float64 height

================================================================================
MSG: rospy_message_converter/AdasMapPoint2d
float64 longitude
float64 latitude
float64 utm_x
float64 utm_y
"""
  __slots__ = ['offset','index','path_idx','sign_type','value','lane','vehicle_specific','time_specific','condition','sign_location','position_valid','position_pt','height']
  _slot_types = ['uint64','uint64','uint64','uint64','uint64','uint32','uint32','uint32','uint64','uint32','bool','rospy_message_converter/AdasMapPoint2d','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       offset,index,path_idx,sign_type,value,lane,vehicle_specific,time_specific,condition,sign_location,position_valid,position_pt,height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdasMapTrafficSign, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.offset is None:
        self.offset = 0
      if self.index is None:
        self.index = 0
      if self.path_idx is None:
        self.path_idx = 0
      if self.sign_type is None:
        self.sign_type = 0
      if self.value is None:
        self.value = 0
      if self.lane is None:
        self.lane = 0
      if self.vehicle_specific is None:
        self.vehicle_specific = 0
      if self.time_specific is None:
        self.time_specific = 0
      if self.condition is None:
        self.condition = 0
      if self.sign_location is None:
        self.sign_location = 0
      if self.position_valid is None:
        self.position_valid = False
      if self.position_pt is None:
        self.position_pt = rospy_message_converter.msg.AdasMapPoint2d()
      if self.height is None:
        self.height = 0.
    else:
      self.offset = 0
      self.index = 0
      self.path_idx = 0
      self.sign_type = 0
      self.value = 0
      self.lane = 0
      self.vehicle_specific = 0
      self.time_specific = 0
      self.condition = 0
      self.sign_location = 0
      self.position_valid = False
      self.position_pt = rospy_message_converter.msg.AdasMapPoint2d()
      self.height = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5Q3IQIB5d().pack(_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid, _x.position_pt.longitude, _x.position_pt.latitude, _x.position_pt.utm_x, _x.position_pt.utm_y, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position_pt is None:
        self.position_pt = rospy_message_converter.msg.AdasMapPoint2d()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid, _x.position_pt.longitude, _x.position_pt.latitude, _x.position_pt.utm_x, _x.position_pt.utm_y, _x.height,) = _get_struct_5Q3IQIB5d().unpack(str[start:end])
      self.position_valid = bool(self.position_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5Q3IQIB5d().pack(_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid, _x.position_pt.longitude, _x.position_pt.latitude, _x.position_pt.utm_x, _x.position_pt.utm_y, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position_pt is None:
        self.position_pt = rospy_message_converter.msg.AdasMapPoint2d()
      end = 0
      _x = self
      start = end
      end += 105
      (_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid, _x.position_pt.longitude, _x.position_pt.latitude, _x.position_pt.utm_x, _x.position_pt.utm_y, _x.height,) = _get_struct_5Q3IQIB5d().unpack(str[start:end])
      self.position_valid = bool(self.position_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5Q3IQIB5d = None
def _get_struct_5Q3IQIB5d():
    global _struct_5Q3IQIB5d
    if _struct_5Q3IQIB5d is None:
        _struct_5Q3IQIB5d = struct.Struct("<5Q3IQIB5d")
    return _struct_5Q3IQIB5d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/Bind_PSAP_DebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Bind_PSAP_DebugOut(genpy.Message):
  _md5sum = "c54e22ab17e067b620e4635f511dac1a"
  _type = "rospy_message_converter/Bind_PSAP_DebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 Bitmask_off_to_standby
uint32 Bitmask_standby_to_localization
uint32 Bitmask_standby_to_localization_internal
uint32 Bitmask_search_on
uint32 Bitmask_search_on_fault
uint32 Bitmask_localization_to_preguidance
uint32 Bitmask_planning_status
uint32 Bitmask_preguidance_to_guidance_active
uint32 Bitmask_guidance_to_finish
uint32 Bitmask_control_finish
uint32 Bitmask_finish_to_standby
uint32 Bitmask_guidance_active_to_suspend
uint32 Bitmask_suspend_to_guidance_active
uint32 Bitmask_guidance_to_irr_abort
uint32 Bitmask_irr_abort_to_standby
uint32 Bitmask_guidance_to_takeover_abort
uint32 Bitmask_takeover_abort_to_standby
uint32 Bitmask_localization_to_takeover_abort
uint32 Bitmask_localization_to_standby
uint32 Bitmask_standby_to_fault
uint32 Bitmask_fault_to_standby
uint32 Bitmask_preguidance_to_localization
uint32 Bitmask_irr_abort_to_takeover_abort
uint32 Bitmask_IrrAbort_eps_fault
uint32 Bitmask_IrrAbort_service_system_fault
uint32 Bitmask_IrrAbort_none_fault
uint32 Bitmask_TakeoverAbort_service_system_fault_in_guidance
uint32 Bitmask_TakeoverAbort_eps_fault_in_localization
uint32 Bitmask_TakeoverAbort_service_system_fault_in_localization
uint32 Bitmask_TakeoverAbort_non_fault
uint32 abort_reason
"""
  __slots__ = ['Bitmask_off_to_standby','Bitmask_standby_to_localization','Bitmask_standby_to_localization_internal','Bitmask_search_on','Bitmask_search_on_fault','Bitmask_localization_to_preguidance','Bitmask_planning_status','Bitmask_preguidance_to_guidance_active','Bitmask_guidance_to_finish','Bitmask_control_finish','Bitmask_finish_to_standby','Bitmask_guidance_active_to_suspend','Bitmask_suspend_to_guidance_active','Bitmask_guidance_to_irr_abort','Bitmask_irr_abort_to_standby','Bitmask_guidance_to_takeover_abort','Bitmask_takeover_abort_to_standby','Bitmask_localization_to_takeover_abort','Bitmask_localization_to_standby','Bitmask_standby_to_fault','Bitmask_fault_to_standby','Bitmask_preguidance_to_localization','Bitmask_irr_abort_to_takeover_abort','Bitmask_IrrAbort_eps_fault','Bitmask_IrrAbort_service_system_fault','Bitmask_IrrAbort_none_fault','Bitmask_TakeoverAbort_service_system_fault_in_guidance','Bitmask_TakeoverAbort_eps_fault_in_localization','Bitmask_TakeoverAbort_service_system_fault_in_localization','Bitmask_TakeoverAbort_non_fault','abort_reason']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Bitmask_off_to_standby,Bitmask_standby_to_localization,Bitmask_standby_to_localization_internal,Bitmask_search_on,Bitmask_search_on_fault,Bitmask_localization_to_preguidance,Bitmask_planning_status,Bitmask_preguidance_to_guidance_active,Bitmask_guidance_to_finish,Bitmask_control_finish,Bitmask_finish_to_standby,Bitmask_guidance_active_to_suspend,Bitmask_suspend_to_guidance_active,Bitmask_guidance_to_irr_abort,Bitmask_irr_abort_to_standby,Bitmask_guidance_to_takeover_abort,Bitmask_takeover_abort_to_standby,Bitmask_localization_to_takeover_abort,Bitmask_localization_to_standby,Bitmask_standby_to_fault,Bitmask_fault_to_standby,Bitmask_preguidance_to_localization,Bitmask_irr_abort_to_takeover_abort,Bitmask_IrrAbort_eps_fault,Bitmask_IrrAbort_service_system_fault,Bitmask_IrrAbort_none_fault,Bitmask_TakeoverAbort_service_system_fault_in_guidance,Bitmask_TakeoverAbort_eps_fault_in_localization,Bitmask_TakeoverAbort_service_system_fault_in_localization,Bitmask_TakeoverAbort_non_fault,abort_reason

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Bind_PSAP_DebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Bitmask_off_to_standby is None:
        self.Bitmask_off_to_standby = 0
      if self.Bitmask_standby_to_localization is None:
        self.Bitmask_standby_to_localization = 0
      if self.Bitmask_standby_to_localization_internal is None:
        self.Bitmask_standby_to_localization_internal = 0
      if self.Bitmask_search_on is None:
        self.Bitmask_search_on = 0
      if self.Bitmask_search_on_fault is None:
        self.Bitmask_search_on_fault = 0
      if self.Bitmask_localization_to_preguidance is None:
        self.Bitmask_localization_to_preguidance = 0
      if self.Bitmask_planning_status is None:
        self.Bitmask_planning_status = 0
      if self.Bitmask_preguidance_to_guidance_active is None:
        self.Bitmask_preguidance_to_guidance_active = 0
      if self.Bitmask_guidance_to_finish is None:
        self.Bitmask_guidance_to_finish = 0
      if self.Bitmask_control_finish is None:
        self.Bitmask_control_finish = 0
      if self.Bitmask_finish_to_standby is None:
        self.Bitmask_finish_to_standby = 0
      if self.Bitmask_guidance_active_to_suspend is None:
        self.Bitmask_guidance_active_to_suspend = 0
      if self.Bitmask_suspend_to_guidance_active is None:
        self.Bitmask_suspend_to_guidance_active = 0
      if self.Bitmask_guidance_to_irr_abort is None:
        self.Bitmask_guidance_to_irr_abort = 0
      if self.Bitmask_irr_abort_to_standby is None:
        self.Bitmask_irr_abort_to_standby = 0
      if self.Bitmask_guidance_to_takeover_abort is None:
        self.Bitmask_guidance_to_takeover_abort = 0
      if self.Bitmask_takeover_abort_to_standby is None:
        self.Bitmask_takeover_abort_to_standby = 0
      if self.Bitmask_localization_to_takeover_abort is None:
        self.Bitmask_localization_to_takeover_abort = 0
      if self.Bitmask_localization_to_standby is None:
        self.Bitmask_localization_to_standby = 0
      if self.Bitmask_standby_to_fault is None:
        self.Bitmask_standby_to_fault = 0
      if self.Bitmask_fault_to_standby is None:
        self.Bitmask_fault_to_standby = 0
      if self.Bitmask_preguidance_to_localization is None:
        self.Bitmask_preguidance_to_localization = 0
      if self.Bitmask_irr_abort_to_takeover_abort is None:
        self.Bitmask_irr_abort_to_takeover_abort = 0
      if self.Bitmask_IrrAbort_eps_fault is None:
        self.Bitmask_IrrAbort_eps_fault = 0
      if self.Bitmask_IrrAbort_service_system_fault is None:
        self.Bitmask_IrrAbort_service_system_fault = 0
      if self.Bitmask_IrrAbort_none_fault is None:
        self.Bitmask_IrrAbort_none_fault = 0
      if self.Bitmask_TakeoverAbort_service_system_fault_in_guidance is None:
        self.Bitmask_TakeoverAbort_service_system_fault_in_guidance = 0
      if self.Bitmask_TakeoverAbort_eps_fault_in_localization is None:
        self.Bitmask_TakeoverAbort_eps_fault_in_localization = 0
      if self.Bitmask_TakeoverAbort_service_system_fault_in_localization is None:
        self.Bitmask_TakeoverAbort_service_system_fault_in_localization = 0
      if self.Bitmask_TakeoverAbort_non_fault is None:
        self.Bitmask_TakeoverAbort_non_fault = 0
      if self.abort_reason is None:
        self.abort_reason = 0
    else:
      self.Bitmask_off_to_standby = 0
      self.Bitmask_standby_to_localization = 0
      self.Bitmask_standby_to_localization_internal = 0
      self.Bitmask_search_on = 0
      self.Bitmask_search_on_fault = 0
      self.Bitmask_localization_to_preguidance = 0
      self.Bitmask_planning_status = 0
      self.Bitmask_preguidance_to_guidance_active = 0
      self.Bitmask_guidance_to_finish = 0
      self.Bitmask_control_finish = 0
      self.Bitmask_finish_to_standby = 0
      self.Bitmask_guidance_active_to_suspend = 0
      self.Bitmask_suspend_to_guidance_active = 0
      self.Bitmask_guidance_to_irr_abort = 0
      self.Bitmask_irr_abort_to_standby = 0
      self.Bitmask_guidance_to_takeover_abort = 0
      self.Bitmask_takeover_abort_to_standby = 0
      self.Bitmask_localization_to_takeover_abort = 0
      self.Bitmask_localization_to_standby = 0
      self.Bitmask_standby_to_fault = 0
      self.Bitmask_fault_to_standby = 0
      self.Bitmask_preguidance_to_localization = 0
      self.Bitmask_irr_abort_to_takeover_abort = 0
      self.Bitmask_IrrAbort_eps_fault = 0
      self.Bitmask_IrrAbort_service_system_fault = 0
      self.Bitmask_IrrAbort_none_fault = 0
      self.Bitmask_TakeoverAbort_service_system_fault_in_guidance = 0
      self.Bitmask_TakeoverAbort_eps_fault_in_localization = 0
      self.Bitmask_TakeoverAbort_service_system_fault_in_localization = 0
      self.Bitmask_TakeoverAbort_non_fault = 0
      self.abort_reason = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_31I().pack(_x.Bitmask_off_to_standby, _x.Bitmask_standby_to_localization, _x.Bitmask_standby_to_localization_internal, _x.Bitmask_search_on, _x.Bitmask_search_on_fault, _x.Bitmask_localization_to_preguidance, _x.Bitmask_planning_status, _x.Bitmask_preguidance_to_guidance_active, _x.Bitmask_guidance_to_finish, _x.Bitmask_control_finish, _x.Bitmask_finish_to_standby, _x.Bitmask_guidance_active_to_suspend, _x.Bitmask_suspend_to_guidance_active, _x.Bitmask_guidance_to_irr_abort, _x.Bitmask_irr_abort_to_standby, _x.Bitmask_guidance_to_takeover_abort, _x.Bitmask_takeover_abort_to_standby, _x.Bitmask_localization_to_takeover_abort, _x.Bitmask_localization_to_standby, _x.Bitmask_standby_to_fault, _x.Bitmask_fault_to_standby, _x.Bitmask_preguidance_to_localization, _x.Bitmask_irr_abort_to_takeover_abort, _x.Bitmask_IrrAbort_eps_fault, _x.Bitmask_IrrAbort_service_system_fault, _x.Bitmask_IrrAbort_none_fault, _x.Bitmask_TakeoverAbort_service_system_fault_in_guidance, _x.Bitmask_TakeoverAbort_eps_fault_in_localization, _x.Bitmask_TakeoverAbort_service_system_fault_in_localization, _x.Bitmask_TakeoverAbort_non_fault, _x.abort_reason))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 124
      (_x.Bitmask_off_to_standby, _x.Bitmask_standby_to_localization, _x.Bitmask_standby_to_localization_internal, _x.Bitmask_search_on, _x.Bitmask_search_on_fault, _x.Bitmask_localization_to_preguidance, _x.Bitmask_planning_status, _x.Bitmask_preguidance_to_guidance_active, _x.Bitmask_guidance_to_finish, _x.Bitmask_control_finish, _x.Bitmask_finish_to_standby, _x.Bitmask_guidance_active_to_suspend, _x.Bitmask_suspend_to_guidance_active, _x.Bitmask_guidance_to_irr_abort, _x.Bitmask_irr_abort_to_standby, _x.Bitmask_guidance_to_takeover_abort, _x.Bitmask_takeover_abort_to_standby, _x.Bitmask_localization_to_takeover_abort, _x.Bitmask_localization_to_standby, _x.Bitmask_standby_to_fault, _x.Bitmask_fault_to_standby, _x.Bitmask_preguidance_to_localization, _x.Bitmask_irr_abort_to_takeover_abort, _x.Bitmask_IrrAbort_eps_fault, _x.Bitmask_IrrAbort_service_system_fault, _x.Bitmask_IrrAbort_none_fault, _x.Bitmask_TakeoverAbort_service_system_fault_in_guidance, _x.Bitmask_TakeoverAbort_eps_fault_in_localization, _x.Bitmask_TakeoverAbort_service_system_fault_in_localization, _x.Bitmask_TakeoverAbort_non_fault, _x.abort_reason,) = _get_struct_31I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_31I().pack(_x.Bitmask_off_to_standby, _x.Bitmask_standby_to_localization, _x.Bitmask_standby_to_localization_internal, _x.Bitmask_search_on, _x.Bitmask_search_on_fault, _x.Bitmask_localization_to_preguidance, _x.Bitmask_planning_status, _x.Bitmask_preguidance_to_guidance_active, _x.Bitmask_guidance_to_finish, _x.Bitmask_control_finish, _x.Bitmask_finish_to_standby, _x.Bitmask_guidance_active_to_suspend, _x.Bitmask_suspend_to_guidance_active, _x.Bitmask_guidance_to_irr_abort, _x.Bitmask_irr_abort_to_standby, _x.Bitmask_guidance_to_takeover_abort, _x.Bitmask_takeover_abort_to_standby, _x.Bitmask_localization_to_takeover_abort, _x.Bitmask_localization_to_standby, _x.Bitmask_standby_to_fault, _x.Bitmask_fault_to_standby, _x.Bitmask_preguidance_to_localization, _x.Bitmask_irr_abort_to_takeover_abort, _x.Bitmask_IrrAbort_eps_fault, _x.Bitmask_IrrAbort_service_system_fault, _x.Bitmask_IrrAbort_none_fault, _x.Bitmask_TakeoverAbort_service_system_fault_in_guidance, _x.Bitmask_TakeoverAbort_eps_fault_in_localization, _x.Bitmask_TakeoverAbort_service_system_fault_in_localization, _x.Bitmask_TakeoverAbort_non_fault, _x.abort_reason))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 124
      (_x.Bitmask_off_to_standby, _x.Bitmask_standby_to_localization, _x.Bitmask_standby_to_localization_internal, _x.Bitmask_search_on, _x.Bitmask_search_on_fault, _x.Bitmask_localization_to_preguidance, _x.Bitmask_planning_status, _x.Bitmask_preguidance_to_guidance_active, _x.Bitmask_guidance_to_finish, _x.Bitmask_control_finish, _x.Bitmask_finish_to_standby, _x.Bitmask_guidance_active_to_suspend, _x.Bitmask_suspend_to_guidance_active, _x.Bitmask_guidance_to_irr_abort, _x.Bitmask_irr_abort_to_standby, _x.Bitmask_guidance_to_takeover_abort, _x.Bitmask_takeover_abort_to_standby, _x.Bitmask_localization_to_takeover_abort, _x.Bitmask_localization_to_standby, _x.Bitmask_standby_to_fault, _x.Bitmask_fault_to_standby, _x.Bitmask_preguidance_to_localization, _x.Bitmask_irr_abort_to_takeover_abort, _x.Bitmask_IrrAbort_eps_fault, _x.Bitmask_IrrAbort_service_system_fault, _x.Bitmask_IrrAbort_none_fault, _x.Bitmask_TakeoverAbort_service_system_fault_in_guidance, _x.Bitmask_TakeoverAbort_eps_fault_in_localization, _x.Bitmask_TakeoverAbort_service_system_fault_in_localization, _x.Bitmask_TakeoverAbort_non_fault, _x.abort_reason,) = _get_struct_31I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_31I = None
def _get_struct_31I():
    global _struct_31I
    if _struct_31I is None:
        _struct_31I = struct.Struct("<31I")
    return _struct_31I

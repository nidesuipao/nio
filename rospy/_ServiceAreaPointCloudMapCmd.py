# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ServiceAreaPointCloudMapCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ServiceAreaPointCloudMapCmd(genpy.Message):
  _md5sum = "4b9b2c598d31f0245994ec7dd6a13c82"
  _type = "rospy_message_converter/ServiceAreaPointCloudMapCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
string power_swap_station_id
Point2d power_swap_station_loc
int32 command

================================================================================
MSG: rospy_message_converter/Point2d
float64 longitude
float64 latitude
"""
  __slots__ = ['timestamp','power_swap_station_id','power_swap_station_loc','command']
  _slot_types = ['uint64','string','rospy_message_converter/Point2d','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,power_swap_station_id,power_swap_station_loc,command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServiceAreaPointCloudMapCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.power_swap_station_id is None:
        self.power_swap_station_id = ''
      if self.power_swap_station_loc is None:
        self.power_swap_station_loc = rospy_message_converter.msg.Point2d()
      if self.command is None:
        self.command = 0
    else:
      self.timestamp = 0
      self.power_swap_station_id = ''
      self.power_swap_station_loc = rospy_message_converter.msg.Point2d()
      self.command = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      _x = self.power_swap_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2di().pack(_x.power_swap_station_loc.longitude, _x.power_swap_station_loc.latitude, _x.command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.power_swap_station_loc is None:
        self.power_swap_station_loc = rospy_message_converter.msg.Point2d()
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power_swap_station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.power_swap_station_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.power_swap_station_loc.longitude, _x.power_swap_station_loc.latitude, _x.command,) = _get_struct_2di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      _x = self.power_swap_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2di().pack(_x.power_swap_station_loc.longitude, _x.power_swap_station_loc.latitude, _x.command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.power_swap_station_loc is None:
        self.power_swap_station_loc = rospy_message_converter.msg.Point2d()
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.power_swap_station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.power_swap_station_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.power_swap_station_loc.longitude, _x.power_swap_station_loc.latitude, _x.command,) = _get_struct_2di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2di = None
def _get_struct_2di():
    global _struct_2di
    if _struct_2di is None:
        _struct_2di = struct.Struct("<2di")
    return _struct_2di
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

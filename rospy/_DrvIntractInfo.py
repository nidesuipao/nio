# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DrvIntractInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DrvIntractInfo(genpy.Message):
  _md5sum = "52803a7fb4bef0b6fa48b27066fbe122"
  _type = "rospy_message_converter/DrvIntractInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SpdDispAndCfgInfo SpdDispAndCfg
SdowBsdIfInfo SdowBSD
CTAWarnIfInfo CTAWarn
BodyIfInfo BodyCtrl
LngWarnSafetyIfInfo LngWarnSafe
NpIfInfo NpDrvIF
CAMCInfo CAMCSts
ADSysInfo ADSysSts
DMSInfo DMSIF
ADIcsInfo ADIcsIF
FuncEDRInfo FuncEDR

================================================================================
MSG: rospy_message_converter/SpdDispAndCfgInfo
int32 SAS_SLIF_State
int32 SAS_SLWF_WarnTrigger
int32 SAS_SpeedLimitAttribute
int32 SAS_SpeedLimitTakeover
bool SAS_SpeedLimitUnit
uint32 SAS_SpeedLimitValue
bool SAS_SupSignAttribute
uint32 SAS_SupSignType
uint32 SAS_LocalHzrd
uint32 SAS_RdFtrWarnSign
uint32 SAS_TrffcLghtSts

================================================================================
MSG: rospy_message_converter/SdowBsdIfInfo
bool SDOWOnOffSts
bool LCAHapticOnOffSts
bool BSDLCAOnOffSts
int32[] SDOWWarnSts
int32 ExtReqRAD_RR
int32[] SDOWWarnReq
int32[] BSDLCASts
int32[] BSDLCAReWarnReq
int32[] FrntRSDSDisp
int32 ReRiRSDSDisp

================================================================================
MSG: rospy_message_converter/CTAWarnIfInfo
int32 FCTAOnOffSts
bool RCTAOnOffSts
int32 FCTASts
int32 RCTABrkSts
int32[] CTAFrntWarnReq
int32[] CTAReWarnReq
int32[] RCTAWarnSts
int32[] FCTAWarnSts
int32 RCTABOnOffSts

================================================================================
MSG: rospy_message_converter/BodyIfInfo
LightIfInfo LightIf
int32 DoorUnlckReq
int32 RemLogSts
int32 HornCtrlReq
bool ECOPlusModReqSts

================================================================================
MSG: rospy_message_converter/LightIfInfo
bool HMAHiBeamReq
int32 HMASts
int32[] MirrLightReq

================================================================================
MSG: rospy_message_converter/LngWarnSafetyIfInfo
int32 FCWSetSts
int32 AEBSts
int32 PcwWarnReq
int32 AESWarningSts
int32 AESSts
int32 RearAEBSts

================================================================================
MSG: rospy_message_converter/NpIfInfo
uint32 Textinfo
int32 GoNotifyReq
int32 LnAssiTyp
int32 LnAssiSnvty
bool LnAstHptcOnOffSts
int32 LnAssistSts
int32 DANADSts
int32 AdasLeLine
int32 AdasRiLine
int32 TurnLightReq
int32 TauGapSet
bool DisplaySetSpeedSwtch
bool SetSpeedUnit
uint32 DisplaySetSpd
uint32 DA_NAD_WTI
uint32 ALCSsts
int32 LatCtrlTarLe
int32 LatCtrlTarRi
bool LongCtrlTar
int32 TauGapChangeDisp
int32 HODsymbol
int32 ELKSts
int32 ESFWarningSts
int32 EASSts
int32 EASWarningLevel
bool EcallReq
bool DA_FreeSpaceIntrusion
uint32 DA_NOP_ALC_Sts
int32 DA_NOP_Avl
uint32 DA_LaneChgSupReason
int32 ADCDoorLockReq
uint32 DA_NOP_WTIs
uint32 DA_iACC_WTIs
uint32 DA_Pilot_WTIs
bool DA_SysFailSymbol
int32 DA_SetSpeedAnimation
int32 DMSIntrvSnvtyReq
int32 DMSFaultInfo
int32 ADBSysErrSts
uint32 DA_NopWTI

================================================================================
MSG: rospy_message_converter/CAMCInfo
bool DVRFltSts
bool CAM_FrntFltSts
bool CAM_LeFltSts
bool CAM_ReFltSts
bool CAM_RiFltSts

================================================================================
MSG: rospy_message_converter/ADSysInfo
uint32 AD_SysSts
int32 ADCUSSMode
int32 ADCsts
int32 ADC_SystemState
int32 LidarSts
int32 Camera_FrntWideSts
int32 SnsrCamera_SurroundLeSts
int32 SnsrCamera_ReSts
int32 SnsrCamera_SideFrntRiSts
int32 SnsrCamera_SurroundRiSts
int32 SnsrCamera_SideReRiSts
int32 SnsrCamera_FrntNarrowSts
int32 SnsrCamera_SideReLeSts
int32 SnsrCamera_SurroundFrntSts
int32 SnsrCamera_SurroundReSts
int32 SnsrCamera_SideFrntLeSts

================================================================================
MSG: rospy_message_converter/DMSInfo
int32 DrowsinessLevel
int32 DrowsinessSts
int32 DistractionLevel
int32 DistractionSts

================================================================================
MSG: rospy_message_converter/ADIcsInfo
bool ShowSwtichDA_NOP
bool ShowSetDA_NOP
int32 ShowSetSWF
int32 ShowSetCHA
bool ShowSetDA_ALCS
uint32 ShowSetDA_SpdAssist
bool ShowSetDA_SetSpdCtrl
uint32 ShowSetDA_NOPALC
uint32 ShowSetDA_SteerAssist
bool ShowSet360AP
bool ShowSetDA_CurveSpdAssist
bool ADC_VehDisp_Warn
int32 ReRADfeatures_FactoryDft
int32 LaneFeautres_FactoryDft

================================================================================
MSG: rospy_message_converter/FuncEDRInfo
int32 LnAssistSts_EDR
int32 LnAssiTyp_EDR
int32 AdasLeLine_EDR
int32 ACSF_B1_Sts_EDR
int32 AdasRiLine_EDR
int32 ELKSts_EDR
int32 ACSF_D_Sts_EDR
int32 ACSF_B2_Sts_EDR
int32 ACSF_A_Sts_EDR
int32 ACSF_C_Sts_EDR
int32 ACSF_E_Sts_EDR
int32 ACCSts_EDR
int32 ESFWarningSts_EDR
"""
  __slots__ = ['SpdDispAndCfg','SdowBSD','CTAWarn','BodyCtrl','LngWarnSafe','NpDrvIF','CAMCSts','ADSysSts','DMSIF','ADIcsIF','FuncEDR']
  _slot_types = ['rospy_message_converter/SpdDispAndCfgInfo','rospy_message_converter/SdowBsdIfInfo','rospy_message_converter/CTAWarnIfInfo','rospy_message_converter/BodyIfInfo','rospy_message_converter/LngWarnSafetyIfInfo','rospy_message_converter/NpIfInfo','rospy_message_converter/CAMCInfo','rospy_message_converter/ADSysInfo','rospy_message_converter/DMSInfo','rospy_message_converter/ADIcsInfo','rospy_message_converter/FuncEDRInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SpdDispAndCfg,SdowBSD,CTAWarn,BodyCtrl,LngWarnSafe,NpDrvIF,CAMCSts,ADSysSts,DMSIF,ADIcsIF,FuncEDR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DrvIntractInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SpdDispAndCfg is None:
        self.SpdDispAndCfg = rospy_message_converter.msg.SpdDispAndCfgInfo()
      if self.SdowBSD is None:
        self.SdowBSD = rospy_message_converter.msg.SdowBsdIfInfo()
      if self.CTAWarn is None:
        self.CTAWarn = rospy_message_converter.msg.CTAWarnIfInfo()
      if self.BodyCtrl is None:
        self.BodyCtrl = rospy_message_converter.msg.BodyIfInfo()
      if self.LngWarnSafe is None:
        self.LngWarnSafe = rospy_message_converter.msg.LngWarnSafetyIfInfo()
      if self.NpDrvIF is None:
        self.NpDrvIF = rospy_message_converter.msg.NpIfInfo()
      if self.CAMCSts is None:
        self.CAMCSts = rospy_message_converter.msg.CAMCInfo()
      if self.ADSysSts is None:
        self.ADSysSts = rospy_message_converter.msg.ADSysInfo()
      if self.DMSIF is None:
        self.DMSIF = rospy_message_converter.msg.DMSInfo()
      if self.ADIcsIF is None:
        self.ADIcsIF = rospy_message_converter.msg.ADIcsInfo()
      if self.FuncEDR is None:
        self.FuncEDR = rospy_message_converter.msg.FuncEDRInfo()
    else:
      self.SpdDispAndCfg = rospy_message_converter.msg.SpdDispAndCfgInfo()
      self.SdowBSD = rospy_message_converter.msg.SdowBsdIfInfo()
      self.CTAWarn = rospy_message_converter.msg.CTAWarnIfInfo()
      self.BodyCtrl = rospy_message_converter.msg.BodyIfInfo()
      self.LngWarnSafe = rospy_message_converter.msg.LngWarnSafetyIfInfo()
      self.NpDrvIF = rospy_message_converter.msg.NpIfInfo()
      self.CAMCSts = rospy_message_converter.msg.CAMCInfo()
      self.ADSysSts = rospy_message_converter.msg.ADSysInfo()
      self.DMSIF = rospy_message_converter.msg.DMSInfo()
      self.ADIcsIF = rospy_message_converter.msg.ADIcsInfo()
      self.FuncEDR = rospy_message_converter.msg.FuncEDRInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4iBIB4I3B().pack(_x.SpdDispAndCfg.SAS_SLIF_State, _x.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.SpdDispAndCfg.SAS_SpeedLimitValue, _x.SpdDispAndCfg.SAS_SupSignAttribute, _x.SpdDispAndCfg.SAS_SupSignType, _x.SpdDispAndCfg.SAS_LocalHzrd, _x.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.SpdDispAndCfg.SAS_TrffcLghtSts, _x.SdowBSD.SDOWOnOffSts, _x.SdowBSD.LCAHapticOnOffSts, _x.SdowBSD.BSDLCAOnOffSts))
      length = len(self.SdowBSD.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SdowBSD.SDOWWarnSts))
      _x = self.SdowBSD.ExtReqRAD_RR
      buff.write(_get_struct_i().pack(_x))
      length = len(self.SdowBSD.SDOWWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SdowBSD.SDOWWarnReq))
      length = len(self.SdowBSD.BSDLCASts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SdowBSD.BSDLCASts))
      length = len(self.SdowBSD.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SdowBSD.BSDLCAReWarnReq))
      length = len(self.SdowBSD.FrntRSDSDisp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SdowBSD.FrntRSDSDisp))
      _x = self
      buff.write(_get_struct_2iB2i().pack(_x.SdowBSD.ReRiRSDSDisp, _x.CTAWarn.FCTAOnOffSts, _x.CTAWarn.RCTAOnOffSts, _x.CTAWarn.FCTASts, _x.CTAWarn.RCTABrkSts))
      length = len(self.CTAWarn.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAWarn.CTAFrntWarnReq))
      length = len(self.CTAWarn.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAWarn.CTAReWarnReq))
      length = len(self.CTAWarn.RCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAWarn.RCTAWarnSts))
      length = len(self.CTAWarn.FCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAWarn.FCTAWarnSts))
      _x = self
      buff.write(_get_struct_iBi().pack(_x.CTAWarn.RCTABOnOffSts, _x.BodyCtrl.LightIf.HMAHiBeamReq, _x.BodyCtrl.LightIf.HMASts))
      length = len(self.BodyCtrl.LightIf.MirrLightReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.BodyCtrl.LightIf.MirrLightReq))
      _x = self
      buff.write(_get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i().pack(_x.BodyCtrl.DoorUnlckReq, _x.BodyCtrl.RemLogSts, _x.BodyCtrl.HornCtrlReq, _x.BodyCtrl.ECOPlusModReqSts, _x.LngWarnSafe.FCWSetSts, _x.LngWarnSafe.AEBSts, _x.LngWarnSafe.PcwWarnReq, _x.LngWarnSafe.AESWarningSts, _x.LngWarnSafe.AESSts, _x.LngWarnSafe.RearAEBSts, _x.NpDrvIF.Textinfo, _x.NpDrvIF.GoNotifyReq, _x.NpDrvIF.LnAssiTyp, _x.NpDrvIF.LnAssiSnvty, _x.NpDrvIF.LnAstHptcOnOffSts, _x.NpDrvIF.LnAssistSts, _x.NpDrvIF.DANADSts, _x.NpDrvIF.AdasLeLine, _x.NpDrvIF.AdasRiLine, _x.NpDrvIF.TurnLightReq, _x.NpDrvIF.TauGapSet, _x.NpDrvIF.DisplaySetSpeedSwtch, _x.NpDrvIF.SetSpeedUnit, _x.NpDrvIF.DisplaySetSpd, _x.NpDrvIF.DA_NAD_WTI, _x.NpDrvIF.ALCSsts, _x.NpDrvIF.LatCtrlTarLe, _x.NpDrvIF.LatCtrlTarRi, _x.NpDrvIF.LongCtrlTar, _x.NpDrvIF.TauGapChangeDisp, _x.NpDrvIF.HODsymbol, _x.NpDrvIF.ELKSts, _x.NpDrvIF.ESFWarningSts, _x.NpDrvIF.EASSts, _x.NpDrvIF.EASWarningLevel, _x.NpDrvIF.EcallReq, _x.NpDrvIF.DA_FreeSpaceIntrusion, _x.NpDrvIF.DA_NOP_ALC_Sts, _x.NpDrvIF.DA_NOP_Avl, _x.NpDrvIF.DA_LaneChgSupReason, _x.NpDrvIF.ADCDoorLockReq, _x.NpDrvIF.DA_NOP_WTIs, _x.NpDrvIF.DA_iACC_WTIs, _x.NpDrvIF.DA_Pilot_WTIs, _x.NpDrvIF.DA_SysFailSymbol, _x.NpDrvIF.DA_SetSpeedAnimation, _x.NpDrvIF.DMSIntrvSnvtyReq, _x.NpDrvIF.DMSFaultInfo, _x.NpDrvIF.ADBSysErrSts, _x.NpDrvIF.DA_NopWTI, _x.CAMCSts.DVRFltSts, _x.CAMCSts.CAM_FrntFltSts, _x.CAMCSts.CAM_LeFltSts, _x.CAMCSts.CAM_ReFltSts, _x.CAMCSts.CAM_RiFltSts, _x.ADSysSts.AD_SysSts, _x.ADSysSts.ADCUSSMode, _x.ADSysSts.ADCsts, _x.ADSysSts.ADC_SystemState, _x.ADSysSts.LidarSts, _x.ADSysSts.Camera_FrntWideSts, _x.ADSysSts.SnsrCamera_SurroundLeSts, _x.ADSysSts.SnsrCamera_ReSts, _x.ADSysSts.SnsrCamera_SideFrntRiSts, _x.ADSysSts.SnsrCamera_SurroundRiSts, _x.ADSysSts.SnsrCamera_SideReRiSts, _x.ADSysSts.SnsrCamera_FrntNarrowSts, _x.ADSysSts.SnsrCamera_SideReLeSts, _x.ADSysSts.SnsrCamera_SurroundFrntSts, _x.ADSysSts.SnsrCamera_SurroundReSts, _x.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DMSIF.DrowsinessLevel, _x.DMSIF.DrowsinessSts, _x.DMSIF.DistractionLevel, _x.DMSIF.DistractionSts, _x.ADIcsIF.ShowSwtichDA_NOP, _x.ADIcsIF.ShowSetDA_NOP, _x.ADIcsIF.ShowSetSWF, _x.ADIcsIF.ShowSetCHA, _x.ADIcsIF.ShowSetDA_ALCS, _x.ADIcsIF.ShowSetDA_SpdAssist, _x.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.ADIcsIF.ShowSetDA_NOPALC, _x.ADIcsIF.ShowSetDA_SteerAssist, _x.ADIcsIF.ShowSet360AP, _x.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.ADIcsIF.ADC_VehDisp_Warn, _x.ADIcsIF.ReRADfeatures_FactoryDft, _x.ADIcsIF.LaneFeautres_FactoryDft, _x.FuncEDR.LnAssistSts_EDR, _x.FuncEDR.LnAssiTyp_EDR, _x.FuncEDR.AdasLeLine_EDR, _x.FuncEDR.ACSF_B1_Sts_EDR, _x.FuncEDR.AdasRiLine_EDR, _x.FuncEDR.ELKSts_EDR, _x.FuncEDR.ACSF_D_Sts_EDR, _x.FuncEDR.ACSF_B2_Sts_EDR, _x.FuncEDR.ACSF_A_Sts_EDR, _x.FuncEDR.ACSF_C_Sts_EDR, _x.FuncEDR.ACSF_E_Sts_EDR, _x.FuncEDR.ACCSts_EDR, _x.FuncEDR.ESFWarningSts_EDR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.SpdDispAndCfg is None:
        self.SpdDispAndCfg = rospy_message_converter.msg.SpdDispAndCfgInfo()
      if self.SdowBSD is None:
        self.SdowBSD = rospy_message_converter.msg.SdowBsdIfInfo()
      if self.CTAWarn is None:
        self.CTAWarn = rospy_message_converter.msg.CTAWarnIfInfo()
      if self.BodyCtrl is None:
        self.BodyCtrl = rospy_message_converter.msg.BodyIfInfo()
      if self.LngWarnSafe is None:
        self.LngWarnSafe = rospy_message_converter.msg.LngWarnSafetyIfInfo()
      if self.NpDrvIF is None:
        self.NpDrvIF = rospy_message_converter.msg.NpIfInfo()
      if self.CAMCSts is None:
        self.CAMCSts = rospy_message_converter.msg.CAMCInfo()
      if self.ADSysSts is None:
        self.ADSysSts = rospy_message_converter.msg.ADSysInfo()
      if self.DMSIF is None:
        self.DMSIF = rospy_message_converter.msg.DMSInfo()
      if self.ADIcsIF is None:
        self.ADIcsIF = rospy_message_converter.msg.ADIcsInfo()
      if self.FuncEDR is None:
        self.FuncEDR = rospy_message_converter.msg.FuncEDRInfo()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.SpdDispAndCfg.SAS_SLIF_State, _x.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.SpdDispAndCfg.SAS_SpeedLimitValue, _x.SpdDispAndCfg.SAS_SupSignAttribute, _x.SpdDispAndCfg.SAS_SupSignType, _x.SpdDispAndCfg.SAS_LocalHzrd, _x.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.SpdDispAndCfg.SAS_TrffcLghtSts, _x.SdowBSD.SDOWOnOffSts, _x.SdowBSD.LCAHapticOnOffSts, _x.SdowBSD.BSDLCAOnOffSts,) = _get_struct_4iBIB4I3B().unpack(str[start:end])
      self.SpdDispAndCfg.SAS_SpeedLimitUnit = bool(self.SpdDispAndCfg.SAS_SpeedLimitUnit)
      self.SpdDispAndCfg.SAS_SupSignAttribute = bool(self.SpdDispAndCfg.SAS_SupSignAttribute)
      self.SdowBSD.SDOWOnOffSts = bool(self.SdowBSD.SDOWOnOffSts)
      self.SdowBSD.LCAHapticOnOffSts = bool(self.SdowBSD.LCAHapticOnOffSts)
      self.SdowBSD.BSDLCAOnOffSts = bool(self.SdowBSD.BSDLCAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.SDOWWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.SdowBSD.ExtReqRAD_RR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.SDOWWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.BSDLCASts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.BSDLCAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.FrntRSDSDisp = s.unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.SdowBSD.ReRiRSDSDisp, _x.CTAWarn.FCTAOnOffSts, _x.CTAWarn.RCTAOnOffSts, _x.CTAWarn.FCTASts, _x.CTAWarn.RCTABrkSts,) = _get_struct_2iB2i().unpack(str[start:end])
      self.CTAWarn.RCTAOnOffSts = bool(self.CTAWarn.RCTAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.CTAFrntWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.CTAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.RCTAWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.FCTAWarnSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.CTAWarn.RCTABOnOffSts, _x.BodyCtrl.LightIf.HMAHiBeamReq, _x.BodyCtrl.LightIf.HMASts,) = _get_struct_iBi().unpack(str[start:end])
      self.BodyCtrl.LightIf.HMAHiBeamReq = bool(self.BodyCtrl.LightIf.HMAHiBeamReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BodyCtrl.LightIf.MirrLightReq = s.unpack(str[start:end])
      _x = self
      start = end
      end += 348
      (_x.BodyCtrl.DoorUnlckReq, _x.BodyCtrl.RemLogSts, _x.BodyCtrl.HornCtrlReq, _x.BodyCtrl.ECOPlusModReqSts, _x.LngWarnSafe.FCWSetSts, _x.LngWarnSafe.AEBSts, _x.LngWarnSafe.PcwWarnReq, _x.LngWarnSafe.AESWarningSts, _x.LngWarnSafe.AESSts, _x.LngWarnSafe.RearAEBSts, _x.NpDrvIF.Textinfo, _x.NpDrvIF.GoNotifyReq, _x.NpDrvIF.LnAssiTyp, _x.NpDrvIF.LnAssiSnvty, _x.NpDrvIF.LnAstHptcOnOffSts, _x.NpDrvIF.LnAssistSts, _x.NpDrvIF.DANADSts, _x.NpDrvIF.AdasLeLine, _x.NpDrvIF.AdasRiLine, _x.NpDrvIF.TurnLightReq, _x.NpDrvIF.TauGapSet, _x.NpDrvIF.DisplaySetSpeedSwtch, _x.NpDrvIF.SetSpeedUnit, _x.NpDrvIF.DisplaySetSpd, _x.NpDrvIF.DA_NAD_WTI, _x.NpDrvIF.ALCSsts, _x.NpDrvIF.LatCtrlTarLe, _x.NpDrvIF.LatCtrlTarRi, _x.NpDrvIF.LongCtrlTar, _x.NpDrvIF.TauGapChangeDisp, _x.NpDrvIF.HODsymbol, _x.NpDrvIF.ELKSts, _x.NpDrvIF.ESFWarningSts, _x.NpDrvIF.EASSts, _x.NpDrvIF.EASWarningLevel, _x.NpDrvIF.EcallReq, _x.NpDrvIF.DA_FreeSpaceIntrusion, _x.NpDrvIF.DA_NOP_ALC_Sts, _x.NpDrvIF.DA_NOP_Avl, _x.NpDrvIF.DA_LaneChgSupReason, _x.NpDrvIF.ADCDoorLockReq, _x.NpDrvIF.DA_NOP_WTIs, _x.NpDrvIF.DA_iACC_WTIs, _x.NpDrvIF.DA_Pilot_WTIs, _x.NpDrvIF.DA_SysFailSymbol, _x.NpDrvIF.DA_SetSpeedAnimation, _x.NpDrvIF.DMSIntrvSnvtyReq, _x.NpDrvIF.DMSFaultInfo, _x.NpDrvIF.ADBSysErrSts, _x.NpDrvIF.DA_NopWTI, _x.CAMCSts.DVRFltSts, _x.CAMCSts.CAM_FrntFltSts, _x.CAMCSts.CAM_LeFltSts, _x.CAMCSts.CAM_ReFltSts, _x.CAMCSts.CAM_RiFltSts, _x.ADSysSts.AD_SysSts, _x.ADSysSts.ADCUSSMode, _x.ADSysSts.ADCsts, _x.ADSysSts.ADC_SystemState, _x.ADSysSts.LidarSts, _x.ADSysSts.Camera_FrntWideSts, _x.ADSysSts.SnsrCamera_SurroundLeSts, _x.ADSysSts.SnsrCamera_ReSts, _x.ADSysSts.SnsrCamera_SideFrntRiSts, _x.ADSysSts.SnsrCamera_SurroundRiSts, _x.ADSysSts.SnsrCamera_SideReRiSts, _x.ADSysSts.SnsrCamera_FrntNarrowSts, _x.ADSysSts.SnsrCamera_SideReLeSts, _x.ADSysSts.SnsrCamera_SurroundFrntSts, _x.ADSysSts.SnsrCamera_SurroundReSts, _x.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DMSIF.DrowsinessLevel, _x.DMSIF.DrowsinessSts, _x.DMSIF.DistractionLevel, _x.DMSIF.DistractionSts, _x.ADIcsIF.ShowSwtichDA_NOP, _x.ADIcsIF.ShowSetDA_NOP, _x.ADIcsIF.ShowSetSWF, _x.ADIcsIF.ShowSetCHA, _x.ADIcsIF.ShowSetDA_ALCS, _x.ADIcsIF.ShowSetDA_SpdAssist, _x.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.ADIcsIF.ShowSetDA_NOPALC, _x.ADIcsIF.ShowSetDA_SteerAssist, _x.ADIcsIF.ShowSet360AP, _x.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.ADIcsIF.ADC_VehDisp_Warn, _x.ADIcsIF.ReRADfeatures_FactoryDft, _x.ADIcsIF.LaneFeautres_FactoryDft, _x.FuncEDR.LnAssistSts_EDR, _x.FuncEDR.LnAssiTyp_EDR, _x.FuncEDR.AdasLeLine_EDR, _x.FuncEDR.ACSF_B1_Sts_EDR, _x.FuncEDR.AdasRiLine_EDR, _x.FuncEDR.ELKSts_EDR, _x.FuncEDR.ACSF_D_Sts_EDR, _x.FuncEDR.ACSF_B2_Sts_EDR, _x.FuncEDR.ACSF_A_Sts_EDR, _x.FuncEDR.ACSF_C_Sts_EDR, _x.FuncEDR.ACSF_E_Sts_EDR, _x.FuncEDR.ACCSts_EDR, _x.FuncEDR.ESFWarningSts_EDR,) = _get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i().unpack(str[start:end])
      self.BodyCtrl.ECOPlusModReqSts = bool(self.BodyCtrl.ECOPlusModReqSts)
      self.NpDrvIF.LnAstHptcOnOffSts = bool(self.NpDrvIF.LnAstHptcOnOffSts)
      self.NpDrvIF.DisplaySetSpeedSwtch = bool(self.NpDrvIF.DisplaySetSpeedSwtch)
      self.NpDrvIF.SetSpeedUnit = bool(self.NpDrvIF.SetSpeedUnit)
      self.NpDrvIF.LongCtrlTar = bool(self.NpDrvIF.LongCtrlTar)
      self.NpDrvIF.EcallReq = bool(self.NpDrvIF.EcallReq)
      self.NpDrvIF.DA_FreeSpaceIntrusion = bool(self.NpDrvIF.DA_FreeSpaceIntrusion)
      self.NpDrvIF.DA_SysFailSymbol = bool(self.NpDrvIF.DA_SysFailSymbol)
      self.CAMCSts.DVRFltSts = bool(self.CAMCSts.DVRFltSts)
      self.CAMCSts.CAM_FrntFltSts = bool(self.CAMCSts.CAM_FrntFltSts)
      self.CAMCSts.CAM_LeFltSts = bool(self.CAMCSts.CAM_LeFltSts)
      self.CAMCSts.CAM_ReFltSts = bool(self.CAMCSts.CAM_ReFltSts)
      self.CAMCSts.CAM_RiFltSts = bool(self.CAMCSts.CAM_RiFltSts)
      self.ADIcsIF.ShowSwtichDA_NOP = bool(self.ADIcsIF.ShowSwtichDA_NOP)
      self.ADIcsIF.ShowSetDA_NOP = bool(self.ADIcsIF.ShowSetDA_NOP)
      self.ADIcsIF.ShowSetDA_ALCS = bool(self.ADIcsIF.ShowSetDA_ALCS)
      self.ADIcsIF.ShowSetDA_SetSpdCtrl = bool(self.ADIcsIF.ShowSetDA_SetSpdCtrl)
      self.ADIcsIF.ShowSet360AP = bool(self.ADIcsIF.ShowSet360AP)
      self.ADIcsIF.ShowSetDA_CurveSpdAssist = bool(self.ADIcsIF.ShowSetDA_CurveSpdAssist)
      self.ADIcsIF.ADC_VehDisp_Warn = bool(self.ADIcsIF.ADC_VehDisp_Warn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4iBIB4I3B().pack(_x.SpdDispAndCfg.SAS_SLIF_State, _x.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.SpdDispAndCfg.SAS_SpeedLimitValue, _x.SpdDispAndCfg.SAS_SupSignAttribute, _x.SpdDispAndCfg.SAS_SupSignType, _x.SpdDispAndCfg.SAS_LocalHzrd, _x.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.SpdDispAndCfg.SAS_TrffcLghtSts, _x.SdowBSD.SDOWOnOffSts, _x.SdowBSD.LCAHapticOnOffSts, _x.SdowBSD.BSDLCAOnOffSts))
      length = len(self.SdowBSD.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SdowBSD.SDOWWarnSts.tostring())
      _x = self.SdowBSD.ExtReqRAD_RR
      buff.write(_get_struct_i().pack(_x))
      length = len(self.SdowBSD.SDOWWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SdowBSD.SDOWWarnReq.tostring())
      length = len(self.SdowBSD.BSDLCASts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SdowBSD.BSDLCASts.tostring())
      length = len(self.SdowBSD.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SdowBSD.BSDLCAReWarnReq.tostring())
      length = len(self.SdowBSD.FrntRSDSDisp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SdowBSD.FrntRSDSDisp.tostring())
      _x = self
      buff.write(_get_struct_2iB2i().pack(_x.SdowBSD.ReRiRSDSDisp, _x.CTAWarn.FCTAOnOffSts, _x.CTAWarn.RCTAOnOffSts, _x.CTAWarn.FCTASts, _x.CTAWarn.RCTABrkSts))
      length = len(self.CTAWarn.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAWarn.CTAFrntWarnReq.tostring())
      length = len(self.CTAWarn.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAWarn.CTAReWarnReq.tostring())
      length = len(self.CTAWarn.RCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAWarn.RCTAWarnSts.tostring())
      length = len(self.CTAWarn.FCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAWarn.FCTAWarnSts.tostring())
      _x = self
      buff.write(_get_struct_iBi().pack(_x.CTAWarn.RCTABOnOffSts, _x.BodyCtrl.LightIf.HMAHiBeamReq, _x.BodyCtrl.LightIf.HMASts))
      length = len(self.BodyCtrl.LightIf.MirrLightReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.BodyCtrl.LightIf.MirrLightReq.tostring())
      _x = self
      buff.write(_get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i().pack(_x.BodyCtrl.DoorUnlckReq, _x.BodyCtrl.RemLogSts, _x.BodyCtrl.HornCtrlReq, _x.BodyCtrl.ECOPlusModReqSts, _x.LngWarnSafe.FCWSetSts, _x.LngWarnSafe.AEBSts, _x.LngWarnSafe.PcwWarnReq, _x.LngWarnSafe.AESWarningSts, _x.LngWarnSafe.AESSts, _x.LngWarnSafe.RearAEBSts, _x.NpDrvIF.Textinfo, _x.NpDrvIF.GoNotifyReq, _x.NpDrvIF.LnAssiTyp, _x.NpDrvIF.LnAssiSnvty, _x.NpDrvIF.LnAstHptcOnOffSts, _x.NpDrvIF.LnAssistSts, _x.NpDrvIF.DANADSts, _x.NpDrvIF.AdasLeLine, _x.NpDrvIF.AdasRiLine, _x.NpDrvIF.TurnLightReq, _x.NpDrvIF.TauGapSet, _x.NpDrvIF.DisplaySetSpeedSwtch, _x.NpDrvIF.SetSpeedUnit, _x.NpDrvIF.DisplaySetSpd, _x.NpDrvIF.DA_NAD_WTI, _x.NpDrvIF.ALCSsts, _x.NpDrvIF.LatCtrlTarLe, _x.NpDrvIF.LatCtrlTarRi, _x.NpDrvIF.LongCtrlTar, _x.NpDrvIF.TauGapChangeDisp, _x.NpDrvIF.HODsymbol, _x.NpDrvIF.ELKSts, _x.NpDrvIF.ESFWarningSts, _x.NpDrvIF.EASSts, _x.NpDrvIF.EASWarningLevel, _x.NpDrvIF.EcallReq, _x.NpDrvIF.DA_FreeSpaceIntrusion, _x.NpDrvIF.DA_NOP_ALC_Sts, _x.NpDrvIF.DA_NOP_Avl, _x.NpDrvIF.DA_LaneChgSupReason, _x.NpDrvIF.ADCDoorLockReq, _x.NpDrvIF.DA_NOP_WTIs, _x.NpDrvIF.DA_iACC_WTIs, _x.NpDrvIF.DA_Pilot_WTIs, _x.NpDrvIF.DA_SysFailSymbol, _x.NpDrvIF.DA_SetSpeedAnimation, _x.NpDrvIF.DMSIntrvSnvtyReq, _x.NpDrvIF.DMSFaultInfo, _x.NpDrvIF.ADBSysErrSts, _x.NpDrvIF.DA_NopWTI, _x.CAMCSts.DVRFltSts, _x.CAMCSts.CAM_FrntFltSts, _x.CAMCSts.CAM_LeFltSts, _x.CAMCSts.CAM_ReFltSts, _x.CAMCSts.CAM_RiFltSts, _x.ADSysSts.AD_SysSts, _x.ADSysSts.ADCUSSMode, _x.ADSysSts.ADCsts, _x.ADSysSts.ADC_SystemState, _x.ADSysSts.LidarSts, _x.ADSysSts.Camera_FrntWideSts, _x.ADSysSts.SnsrCamera_SurroundLeSts, _x.ADSysSts.SnsrCamera_ReSts, _x.ADSysSts.SnsrCamera_SideFrntRiSts, _x.ADSysSts.SnsrCamera_SurroundRiSts, _x.ADSysSts.SnsrCamera_SideReRiSts, _x.ADSysSts.SnsrCamera_FrntNarrowSts, _x.ADSysSts.SnsrCamera_SideReLeSts, _x.ADSysSts.SnsrCamera_SurroundFrntSts, _x.ADSysSts.SnsrCamera_SurroundReSts, _x.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DMSIF.DrowsinessLevel, _x.DMSIF.DrowsinessSts, _x.DMSIF.DistractionLevel, _x.DMSIF.DistractionSts, _x.ADIcsIF.ShowSwtichDA_NOP, _x.ADIcsIF.ShowSetDA_NOP, _x.ADIcsIF.ShowSetSWF, _x.ADIcsIF.ShowSetCHA, _x.ADIcsIF.ShowSetDA_ALCS, _x.ADIcsIF.ShowSetDA_SpdAssist, _x.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.ADIcsIF.ShowSetDA_NOPALC, _x.ADIcsIF.ShowSetDA_SteerAssist, _x.ADIcsIF.ShowSet360AP, _x.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.ADIcsIF.ADC_VehDisp_Warn, _x.ADIcsIF.ReRADfeatures_FactoryDft, _x.ADIcsIF.LaneFeautres_FactoryDft, _x.FuncEDR.LnAssistSts_EDR, _x.FuncEDR.LnAssiTyp_EDR, _x.FuncEDR.AdasLeLine_EDR, _x.FuncEDR.ACSF_B1_Sts_EDR, _x.FuncEDR.AdasRiLine_EDR, _x.FuncEDR.ELKSts_EDR, _x.FuncEDR.ACSF_D_Sts_EDR, _x.FuncEDR.ACSF_B2_Sts_EDR, _x.FuncEDR.ACSF_A_Sts_EDR, _x.FuncEDR.ACSF_C_Sts_EDR, _x.FuncEDR.ACSF_E_Sts_EDR, _x.FuncEDR.ACCSts_EDR, _x.FuncEDR.ESFWarningSts_EDR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.SpdDispAndCfg is None:
        self.SpdDispAndCfg = rospy_message_converter.msg.SpdDispAndCfgInfo()
      if self.SdowBSD is None:
        self.SdowBSD = rospy_message_converter.msg.SdowBsdIfInfo()
      if self.CTAWarn is None:
        self.CTAWarn = rospy_message_converter.msg.CTAWarnIfInfo()
      if self.BodyCtrl is None:
        self.BodyCtrl = rospy_message_converter.msg.BodyIfInfo()
      if self.LngWarnSafe is None:
        self.LngWarnSafe = rospy_message_converter.msg.LngWarnSafetyIfInfo()
      if self.NpDrvIF is None:
        self.NpDrvIF = rospy_message_converter.msg.NpIfInfo()
      if self.CAMCSts is None:
        self.CAMCSts = rospy_message_converter.msg.CAMCInfo()
      if self.ADSysSts is None:
        self.ADSysSts = rospy_message_converter.msg.ADSysInfo()
      if self.DMSIF is None:
        self.DMSIF = rospy_message_converter.msg.DMSInfo()
      if self.ADIcsIF is None:
        self.ADIcsIF = rospy_message_converter.msg.ADIcsInfo()
      if self.FuncEDR is None:
        self.FuncEDR = rospy_message_converter.msg.FuncEDRInfo()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.SpdDispAndCfg.SAS_SLIF_State, _x.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.SpdDispAndCfg.SAS_SpeedLimitValue, _x.SpdDispAndCfg.SAS_SupSignAttribute, _x.SpdDispAndCfg.SAS_SupSignType, _x.SpdDispAndCfg.SAS_LocalHzrd, _x.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.SpdDispAndCfg.SAS_TrffcLghtSts, _x.SdowBSD.SDOWOnOffSts, _x.SdowBSD.LCAHapticOnOffSts, _x.SdowBSD.BSDLCAOnOffSts,) = _get_struct_4iBIB4I3B().unpack(str[start:end])
      self.SpdDispAndCfg.SAS_SpeedLimitUnit = bool(self.SpdDispAndCfg.SAS_SpeedLimitUnit)
      self.SpdDispAndCfg.SAS_SupSignAttribute = bool(self.SpdDispAndCfg.SAS_SupSignAttribute)
      self.SdowBSD.SDOWOnOffSts = bool(self.SdowBSD.SDOWOnOffSts)
      self.SdowBSD.LCAHapticOnOffSts = bool(self.SdowBSD.LCAHapticOnOffSts)
      self.SdowBSD.BSDLCAOnOffSts = bool(self.SdowBSD.BSDLCAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.SDOWWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.SdowBSD.ExtReqRAD_RR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.SDOWWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.BSDLCASts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.BSDLCAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SdowBSD.FrntRSDSDisp = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 17
      (_x.SdowBSD.ReRiRSDSDisp, _x.CTAWarn.FCTAOnOffSts, _x.CTAWarn.RCTAOnOffSts, _x.CTAWarn.FCTASts, _x.CTAWarn.RCTABrkSts,) = _get_struct_2iB2i().unpack(str[start:end])
      self.CTAWarn.RCTAOnOffSts = bool(self.CTAWarn.RCTAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.CTAFrntWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.CTAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.RCTAWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAWarn.FCTAWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 9
      (_x.CTAWarn.RCTABOnOffSts, _x.BodyCtrl.LightIf.HMAHiBeamReq, _x.BodyCtrl.LightIf.HMASts,) = _get_struct_iBi().unpack(str[start:end])
      self.BodyCtrl.LightIf.HMAHiBeamReq = bool(self.BodyCtrl.LightIf.HMAHiBeamReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BodyCtrl.LightIf.MirrLightReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 348
      (_x.BodyCtrl.DoorUnlckReq, _x.BodyCtrl.RemLogSts, _x.BodyCtrl.HornCtrlReq, _x.BodyCtrl.ECOPlusModReqSts, _x.LngWarnSafe.FCWSetSts, _x.LngWarnSafe.AEBSts, _x.LngWarnSafe.PcwWarnReq, _x.LngWarnSafe.AESWarningSts, _x.LngWarnSafe.AESSts, _x.LngWarnSafe.RearAEBSts, _x.NpDrvIF.Textinfo, _x.NpDrvIF.GoNotifyReq, _x.NpDrvIF.LnAssiTyp, _x.NpDrvIF.LnAssiSnvty, _x.NpDrvIF.LnAstHptcOnOffSts, _x.NpDrvIF.LnAssistSts, _x.NpDrvIF.DANADSts, _x.NpDrvIF.AdasLeLine, _x.NpDrvIF.AdasRiLine, _x.NpDrvIF.TurnLightReq, _x.NpDrvIF.TauGapSet, _x.NpDrvIF.DisplaySetSpeedSwtch, _x.NpDrvIF.SetSpeedUnit, _x.NpDrvIF.DisplaySetSpd, _x.NpDrvIF.DA_NAD_WTI, _x.NpDrvIF.ALCSsts, _x.NpDrvIF.LatCtrlTarLe, _x.NpDrvIF.LatCtrlTarRi, _x.NpDrvIF.LongCtrlTar, _x.NpDrvIF.TauGapChangeDisp, _x.NpDrvIF.HODsymbol, _x.NpDrvIF.ELKSts, _x.NpDrvIF.ESFWarningSts, _x.NpDrvIF.EASSts, _x.NpDrvIF.EASWarningLevel, _x.NpDrvIF.EcallReq, _x.NpDrvIF.DA_FreeSpaceIntrusion, _x.NpDrvIF.DA_NOP_ALC_Sts, _x.NpDrvIF.DA_NOP_Avl, _x.NpDrvIF.DA_LaneChgSupReason, _x.NpDrvIF.ADCDoorLockReq, _x.NpDrvIF.DA_NOP_WTIs, _x.NpDrvIF.DA_iACC_WTIs, _x.NpDrvIF.DA_Pilot_WTIs, _x.NpDrvIF.DA_SysFailSymbol, _x.NpDrvIF.DA_SetSpeedAnimation, _x.NpDrvIF.DMSIntrvSnvtyReq, _x.NpDrvIF.DMSFaultInfo, _x.NpDrvIF.ADBSysErrSts, _x.NpDrvIF.DA_NopWTI, _x.CAMCSts.DVRFltSts, _x.CAMCSts.CAM_FrntFltSts, _x.CAMCSts.CAM_LeFltSts, _x.CAMCSts.CAM_ReFltSts, _x.CAMCSts.CAM_RiFltSts, _x.ADSysSts.AD_SysSts, _x.ADSysSts.ADCUSSMode, _x.ADSysSts.ADCsts, _x.ADSysSts.ADC_SystemState, _x.ADSysSts.LidarSts, _x.ADSysSts.Camera_FrntWideSts, _x.ADSysSts.SnsrCamera_SurroundLeSts, _x.ADSysSts.SnsrCamera_ReSts, _x.ADSysSts.SnsrCamera_SideFrntRiSts, _x.ADSysSts.SnsrCamera_SurroundRiSts, _x.ADSysSts.SnsrCamera_SideReRiSts, _x.ADSysSts.SnsrCamera_FrntNarrowSts, _x.ADSysSts.SnsrCamera_SideReLeSts, _x.ADSysSts.SnsrCamera_SurroundFrntSts, _x.ADSysSts.SnsrCamera_SurroundReSts, _x.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DMSIF.DrowsinessLevel, _x.DMSIF.DrowsinessSts, _x.DMSIF.DistractionLevel, _x.DMSIF.DistractionSts, _x.ADIcsIF.ShowSwtichDA_NOP, _x.ADIcsIF.ShowSetDA_NOP, _x.ADIcsIF.ShowSetSWF, _x.ADIcsIF.ShowSetCHA, _x.ADIcsIF.ShowSetDA_ALCS, _x.ADIcsIF.ShowSetDA_SpdAssist, _x.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.ADIcsIF.ShowSetDA_NOPALC, _x.ADIcsIF.ShowSetDA_SteerAssist, _x.ADIcsIF.ShowSet360AP, _x.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.ADIcsIF.ADC_VehDisp_Warn, _x.ADIcsIF.ReRADfeatures_FactoryDft, _x.ADIcsIF.LaneFeautres_FactoryDft, _x.FuncEDR.LnAssistSts_EDR, _x.FuncEDR.LnAssiTyp_EDR, _x.FuncEDR.AdasLeLine_EDR, _x.FuncEDR.ACSF_B1_Sts_EDR, _x.FuncEDR.AdasRiLine_EDR, _x.FuncEDR.ELKSts_EDR, _x.FuncEDR.ACSF_D_Sts_EDR, _x.FuncEDR.ACSF_B2_Sts_EDR, _x.FuncEDR.ACSF_A_Sts_EDR, _x.FuncEDR.ACSF_C_Sts_EDR, _x.FuncEDR.ACSF_E_Sts_EDR, _x.FuncEDR.ACCSts_EDR, _x.FuncEDR.ESFWarningSts_EDR,) = _get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i().unpack(str[start:end])
      self.BodyCtrl.ECOPlusModReqSts = bool(self.BodyCtrl.ECOPlusModReqSts)
      self.NpDrvIF.LnAstHptcOnOffSts = bool(self.NpDrvIF.LnAstHptcOnOffSts)
      self.NpDrvIF.DisplaySetSpeedSwtch = bool(self.NpDrvIF.DisplaySetSpeedSwtch)
      self.NpDrvIF.SetSpeedUnit = bool(self.NpDrvIF.SetSpeedUnit)
      self.NpDrvIF.LongCtrlTar = bool(self.NpDrvIF.LongCtrlTar)
      self.NpDrvIF.EcallReq = bool(self.NpDrvIF.EcallReq)
      self.NpDrvIF.DA_FreeSpaceIntrusion = bool(self.NpDrvIF.DA_FreeSpaceIntrusion)
      self.NpDrvIF.DA_SysFailSymbol = bool(self.NpDrvIF.DA_SysFailSymbol)
      self.CAMCSts.DVRFltSts = bool(self.CAMCSts.DVRFltSts)
      self.CAMCSts.CAM_FrntFltSts = bool(self.CAMCSts.CAM_FrntFltSts)
      self.CAMCSts.CAM_LeFltSts = bool(self.CAMCSts.CAM_LeFltSts)
      self.CAMCSts.CAM_ReFltSts = bool(self.CAMCSts.CAM_ReFltSts)
      self.CAMCSts.CAM_RiFltSts = bool(self.CAMCSts.CAM_RiFltSts)
      self.ADIcsIF.ShowSwtichDA_NOP = bool(self.ADIcsIF.ShowSwtichDA_NOP)
      self.ADIcsIF.ShowSetDA_NOP = bool(self.ADIcsIF.ShowSetDA_NOP)
      self.ADIcsIF.ShowSetDA_ALCS = bool(self.ADIcsIF.ShowSetDA_ALCS)
      self.ADIcsIF.ShowSetDA_SetSpdCtrl = bool(self.ADIcsIF.ShowSetDA_SetSpdCtrl)
      self.ADIcsIF.ShowSet360AP = bool(self.ADIcsIF.ShowSet360AP)
      self.ADIcsIF.ShowSetDA_CurveSpdAssist = bool(self.ADIcsIF.ShowSetDA_CurveSpdAssist)
      self.ADIcsIF.ADC_VehDisp_Warn = bool(self.ADIcsIF.ADC_VehDisp_Warn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iB2i = None
def _get_struct_2iB2i():
    global _struct_2iB2i
    if _struct_2iB2i is None:
        _struct_2iB2i = struct.Struct("<2iB2i")
    return _struct_2iB2i
_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i = None
def _get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i():
    global _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i
    if _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i is None:
        _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i = struct.Struct("<3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i")
    return _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15i
_struct_4iBIB4I3B = None
def _get_struct_4iBIB4I3B():
    global _struct_4iBIB4I3B
    if _struct_4iBIB4I3B is None:
        _struct_4iBIB4I3B = struct.Struct("<4iBIB4I3B")
    return _struct_4iBIB4I3B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iBi = None
def _get_struct_iBi():
    global _struct_iBi
    if _struct_iBi is None:
        _struct_iBi = struct.Struct("<iBi")
    return _struct_iBi

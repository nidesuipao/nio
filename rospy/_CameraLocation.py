# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CameraLocation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class CameraLocation(genpy.Message):
  _md5sum = "d66bb2b045673e44731c051cfa1e72bd"
  _type = "rospy_message_converter/CameraLocation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SensorLocation front_wide
SensorLocation front_narrow
SensorLocation front_right
SensorLocation front_left
SensorLocation rear_right
SensorLocation rear_left
SensorLocation rear_narrow
SensorLocation svc_front
SensorLocation svc_rear
SensorLocation svc_left
SensorLocation svc_right

================================================================================
MSG: rospy_message_converter/SensorLocation
float32[] angle
float32[] distance
"""
  __slots__ = ['front_wide','front_narrow','front_right','front_left','rear_right','rear_left','rear_narrow','svc_front','svc_rear','svc_left','svc_right']
  _slot_types = ['rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation','rospy_message_converter/SensorLocation']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       front_wide,front_narrow,front_right,front_left,rear_right,rear_left,rear_narrow,svc_front,svc_rear,svc_left,svc_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraLocation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.front_wide is None:
        self.front_wide = rospy_message_converter.msg.SensorLocation()
      if self.front_narrow is None:
        self.front_narrow = rospy_message_converter.msg.SensorLocation()
      if self.front_right is None:
        self.front_right = rospy_message_converter.msg.SensorLocation()
      if self.front_left is None:
        self.front_left = rospy_message_converter.msg.SensorLocation()
      if self.rear_right is None:
        self.rear_right = rospy_message_converter.msg.SensorLocation()
      if self.rear_left is None:
        self.rear_left = rospy_message_converter.msg.SensorLocation()
      if self.rear_narrow is None:
        self.rear_narrow = rospy_message_converter.msg.SensorLocation()
      if self.svc_front is None:
        self.svc_front = rospy_message_converter.msg.SensorLocation()
      if self.svc_rear is None:
        self.svc_rear = rospy_message_converter.msg.SensorLocation()
      if self.svc_left is None:
        self.svc_left = rospy_message_converter.msg.SensorLocation()
      if self.svc_right is None:
        self.svc_right = rospy_message_converter.msg.SensorLocation()
    else:
      self.front_wide = rospy_message_converter.msg.SensorLocation()
      self.front_narrow = rospy_message_converter.msg.SensorLocation()
      self.front_right = rospy_message_converter.msg.SensorLocation()
      self.front_left = rospy_message_converter.msg.SensorLocation()
      self.rear_right = rospy_message_converter.msg.SensorLocation()
      self.rear_left = rospy_message_converter.msg.SensorLocation()
      self.rear_narrow = rospy_message_converter.msg.SensorLocation()
      self.svc_front = rospy_message_converter.msg.SensorLocation()
      self.svc_rear = rospy_message_converter.msg.SensorLocation()
      self.svc_left = rospy_message_converter.msg.SensorLocation()
      self.svc_right = rospy_message_converter.msg.SensorLocation()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_wide.angle))
      length = len(self.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_wide.distance))
      length = len(self.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_narrow.angle))
      length = len(self.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_narrow.distance))
      length = len(self.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_right.angle))
      length = len(self.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_right.distance))
      length = len(self.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_left.angle))
      length = len(self.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_left.distance))
      length = len(self.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rear_right.angle))
      length = len(self.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rear_right.distance))
      length = len(self.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rear_left.angle))
      length = len(self.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rear_left.distance))
      length = len(self.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rear_narrow.angle))
      length = len(self.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.rear_narrow.distance))
      length = len(self.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_front.angle))
      length = len(self.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_front.distance))
      length = len(self.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_rear.angle))
      length = len(self.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_rear.distance))
      length = len(self.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_left.angle))
      length = len(self.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_left.distance))
      length = len(self.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_right.angle))
      length = len(self.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.svc_right.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.front_wide is None:
        self.front_wide = rospy_message_converter.msg.SensorLocation()
      if self.front_narrow is None:
        self.front_narrow = rospy_message_converter.msg.SensorLocation()
      if self.front_right is None:
        self.front_right = rospy_message_converter.msg.SensorLocation()
      if self.front_left is None:
        self.front_left = rospy_message_converter.msg.SensorLocation()
      if self.rear_right is None:
        self.rear_right = rospy_message_converter.msg.SensorLocation()
      if self.rear_left is None:
        self.rear_left = rospy_message_converter.msg.SensorLocation()
      if self.rear_narrow is None:
        self.rear_narrow = rospy_message_converter.msg.SensorLocation()
      if self.svc_front is None:
        self.svc_front = rospy_message_converter.msg.SensorLocation()
      if self.svc_rear is None:
        self.svc_rear = rospy_message_converter.msg.SensorLocation()
      if self.svc_left is None:
        self.svc_left = rospy_message_converter.msg.SensorLocation()
      if self.svc_right is None:
        self.svc_right = rospy_message_converter.msg.SensorLocation()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_wide.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_wide.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_front.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_rear.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_rear.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_right.distance = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_wide.angle.tostring())
      length = len(self.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_wide.distance.tostring())
      length = len(self.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_narrow.angle.tostring())
      length = len(self.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_narrow.distance.tostring())
      length = len(self.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_right.angle.tostring())
      length = len(self.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_right.distance.tostring())
      length = len(self.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_left.angle.tostring())
      length = len(self.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_left.distance.tostring())
      length = len(self.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rear_right.angle.tostring())
      length = len(self.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rear_right.distance.tostring())
      length = len(self.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rear_left.angle.tostring())
      length = len(self.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rear_left.distance.tostring())
      length = len(self.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rear_narrow.angle.tostring())
      length = len(self.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rear_narrow.distance.tostring())
      length = len(self.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_front.angle.tostring())
      length = len(self.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_front.distance.tostring())
      length = len(self.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_rear.angle.tostring())
      length = len(self.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_rear.distance.tostring())
      length = len(self.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_left.angle.tostring())
      length = len(self.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_left.distance.tostring())
      length = len(self.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_right.angle.tostring())
      length = len(self.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.svc_right.distance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.front_wide is None:
        self.front_wide = rospy_message_converter.msg.SensorLocation()
      if self.front_narrow is None:
        self.front_narrow = rospy_message_converter.msg.SensorLocation()
      if self.front_right is None:
        self.front_right = rospy_message_converter.msg.SensorLocation()
      if self.front_left is None:
        self.front_left = rospy_message_converter.msg.SensorLocation()
      if self.rear_right is None:
        self.rear_right = rospy_message_converter.msg.SensorLocation()
      if self.rear_left is None:
        self.rear_left = rospy_message_converter.msg.SensorLocation()
      if self.rear_narrow is None:
        self.rear_narrow = rospy_message_converter.msg.SensorLocation()
      if self.svc_front is None:
        self.svc_front = rospy_message_converter.msg.SensorLocation()
      if self.svc_rear is None:
        self.svc_rear = rospy_message_converter.msg.SensorLocation()
      if self.svc_left is None:
        self.svc_left = rospy_message_converter.msg.SensorLocation()
      if self.svc_right is None:
        self.svc_right = rospy_message_converter.msg.SensorLocation()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_wide.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_wide.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rear_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_rear.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_rear.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.svc_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I

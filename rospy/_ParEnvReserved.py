# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvReserved.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ParEnvReserved(genpy.Message):
  _md5sum = "62e61e3e004fb21e605be4ae90967951"
  _type = "rospy_message_converter/ParEnvReserved"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 reserved_0
float32 reserved_1
float32 reserved_2
float32 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
float32 reserved_8
float32 reserved_9
float32 reserved_10
float32 reserved_11
float32 reserved_12
float32 reserved_13
float32 reserved_14
float32 reserved_15
float32 reserved_16
float32 reserved_17
float32 reserved_18
float32 reserved_19
float32 reserved_20
float32 reserved_21
float32 reserved_22
float32 reserved_23
float32 reserved_24
float32 reserved_25
float32 reserved_26
float32 reserved_27
float32 reserved_28
float32 reserved_29
uint32 reserved_30
uint32 reserved_31
uint32 reserved_32
uint32 reserved_33
uint32 reserved_34
uint32 reserved_35
uint32 reserved_36
uint32 reserved_37
uint32 reserved_38
uint32 reserved_39
uint32 reserved_40
uint32 reserved_41
uint32 reserved_42
uint32 reserved_43
uint32 reserved_44
uint32 reserved_45
uint32 reserved_46
uint32 reserved_47
uint32 reserved_48
uint32 reserved_49
uint32 reserved_50
uint32 reserved_51
uint32 reserved_52
uint32 reserved_53
uint32 reserved_54
uint32 reserved_55
uint32 reserved_56
uint32 reserved_57
uint32 reserved_58
uint32 reserved_59
"""
  __slots__ = ['reserved_0','reserved_1','reserved_2','reserved_3','reserved_4','reserved_5','reserved_6','reserved_7','reserved_8','reserved_9','reserved_10','reserved_11','reserved_12','reserved_13','reserved_14','reserved_15','reserved_16','reserved_17','reserved_18','reserved_19','reserved_20','reserved_21','reserved_22','reserved_23','reserved_24','reserved_25','reserved_26','reserved_27','reserved_28','reserved_29','reserved_30','reserved_31','reserved_32','reserved_33','reserved_34','reserved_35','reserved_36','reserved_37','reserved_38','reserved_39','reserved_40','reserved_41','reserved_42','reserved_43','reserved_44','reserved_45','reserved_46','reserved_47','reserved_48','reserved_49','reserved_50','reserved_51','reserved_52','reserved_53','reserved_54','reserved_55','reserved_56','reserved_57','reserved_58','reserved_59']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reserved_0,reserved_1,reserved_2,reserved_3,reserved_4,reserved_5,reserved_6,reserved_7,reserved_8,reserved_9,reserved_10,reserved_11,reserved_12,reserved_13,reserved_14,reserved_15,reserved_16,reserved_17,reserved_18,reserved_19,reserved_20,reserved_21,reserved_22,reserved_23,reserved_24,reserved_25,reserved_26,reserved_27,reserved_28,reserved_29,reserved_30,reserved_31,reserved_32,reserved_33,reserved_34,reserved_35,reserved_36,reserved_37,reserved_38,reserved_39,reserved_40,reserved_41,reserved_42,reserved_43,reserved_44,reserved_45,reserved_46,reserved_47,reserved_48,reserved_49,reserved_50,reserved_51,reserved_52,reserved_53,reserved_54,reserved_55,reserved_56,reserved_57,reserved_58,reserved_59

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvReserved, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reserved_0 is None:
        self.reserved_0 = 0.
      if self.reserved_1 is None:
        self.reserved_1 = 0.
      if self.reserved_2 is None:
        self.reserved_2 = 0.
      if self.reserved_3 is None:
        self.reserved_3 = 0.
      if self.reserved_4 is None:
        self.reserved_4 = 0.
      if self.reserved_5 is None:
        self.reserved_5 = 0.
      if self.reserved_6 is None:
        self.reserved_6 = 0.
      if self.reserved_7 is None:
        self.reserved_7 = 0.
      if self.reserved_8 is None:
        self.reserved_8 = 0.
      if self.reserved_9 is None:
        self.reserved_9 = 0.
      if self.reserved_10 is None:
        self.reserved_10 = 0.
      if self.reserved_11 is None:
        self.reserved_11 = 0.
      if self.reserved_12 is None:
        self.reserved_12 = 0.
      if self.reserved_13 is None:
        self.reserved_13 = 0.
      if self.reserved_14 is None:
        self.reserved_14 = 0.
      if self.reserved_15 is None:
        self.reserved_15 = 0.
      if self.reserved_16 is None:
        self.reserved_16 = 0.
      if self.reserved_17 is None:
        self.reserved_17 = 0.
      if self.reserved_18 is None:
        self.reserved_18 = 0.
      if self.reserved_19 is None:
        self.reserved_19 = 0.
      if self.reserved_20 is None:
        self.reserved_20 = 0.
      if self.reserved_21 is None:
        self.reserved_21 = 0.
      if self.reserved_22 is None:
        self.reserved_22 = 0.
      if self.reserved_23 is None:
        self.reserved_23 = 0.
      if self.reserved_24 is None:
        self.reserved_24 = 0.
      if self.reserved_25 is None:
        self.reserved_25 = 0.
      if self.reserved_26 is None:
        self.reserved_26 = 0.
      if self.reserved_27 is None:
        self.reserved_27 = 0.
      if self.reserved_28 is None:
        self.reserved_28 = 0.
      if self.reserved_29 is None:
        self.reserved_29 = 0.
      if self.reserved_30 is None:
        self.reserved_30 = 0
      if self.reserved_31 is None:
        self.reserved_31 = 0
      if self.reserved_32 is None:
        self.reserved_32 = 0
      if self.reserved_33 is None:
        self.reserved_33 = 0
      if self.reserved_34 is None:
        self.reserved_34 = 0
      if self.reserved_35 is None:
        self.reserved_35 = 0
      if self.reserved_36 is None:
        self.reserved_36 = 0
      if self.reserved_37 is None:
        self.reserved_37 = 0
      if self.reserved_38 is None:
        self.reserved_38 = 0
      if self.reserved_39 is None:
        self.reserved_39 = 0
      if self.reserved_40 is None:
        self.reserved_40 = 0
      if self.reserved_41 is None:
        self.reserved_41 = 0
      if self.reserved_42 is None:
        self.reserved_42 = 0
      if self.reserved_43 is None:
        self.reserved_43 = 0
      if self.reserved_44 is None:
        self.reserved_44 = 0
      if self.reserved_45 is None:
        self.reserved_45 = 0
      if self.reserved_46 is None:
        self.reserved_46 = 0
      if self.reserved_47 is None:
        self.reserved_47 = 0
      if self.reserved_48 is None:
        self.reserved_48 = 0
      if self.reserved_49 is None:
        self.reserved_49 = 0
      if self.reserved_50 is None:
        self.reserved_50 = 0
      if self.reserved_51 is None:
        self.reserved_51 = 0
      if self.reserved_52 is None:
        self.reserved_52 = 0
      if self.reserved_53 is None:
        self.reserved_53 = 0
      if self.reserved_54 is None:
        self.reserved_54 = 0
      if self.reserved_55 is None:
        self.reserved_55 = 0
      if self.reserved_56 is None:
        self.reserved_56 = 0
      if self.reserved_57 is None:
        self.reserved_57 = 0
      if self.reserved_58 is None:
        self.reserved_58 = 0
      if self.reserved_59 is None:
        self.reserved_59 = 0
    else:
      self.reserved_0 = 0.
      self.reserved_1 = 0.
      self.reserved_2 = 0.
      self.reserved_3 = 0.
      self.reserved_4 = 0.
      self.reserved_5 = 0.
      self.reserved_6 = 0.
      self.reserved_7 = 0.
      self.reserved_8 = 0.
      self.reserved_9 = 0.
      self.reserved_10 = 0.
      self.reserved_11 = 0.
      self.reserved_12 = 0.
      self.reserved_13 = 0.
      self.reserved_14 = 0.
      self.reserved_15 = 0.
      self.reserved_16 = 0.
      self.reserved_17 = 0.
      self.reserved_18 = 0.
      self.reserved_19 = 0.
      self.reserved_20 = 0.
      self.reserved_21 = 0.
      self.reserved_22 = 0.
      self.reserved_23 = 0.
      self.reserved_24 = 0.
      self.reserved_25 = 0.
      self.reserved_26 = 0.
      self.reserved_27 = 0.
      self.reserved_28 = 0.
      self.reserved_29 = 0.
      self.reserved_30 = 0
      self.reserved_31 = 0
      self.reserved_32 = 0
      self.reserved_33 = 0
      self.reserved_34 = 0
      self.reserved_35 = 0
      self.reserved_36 = 0
      self.reserved_37 = 0
      self.reserved_38 = 0
      self.reserved_39 = 0
      self.reserved_40 = 0
      self.reserved_41 = 0
      self.reserved_42 = 0
      self.reserved_43 = 0
      self.reserved_44 = 0
      self.reserved_45 = 0
      self.reserved_46 = 0
      self.reserved_47 = 0
      self.reserved_48 = 0
      self.reserved_49 = 0
      self.reserved_50 = 0
      self.reserved_51 = 0
      self.reserved_52 = 0
      self.reserved_53 = 0
      self.reserved_54 = 0
      self.reserved_55 = 0
      self.reserved_56 = 0
      self.reserved_57 = 0
      self.reserved_58 = 0
      self.reserved_59 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_30f30I().pack(_x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9, _x.reserved_10, _x.reserved_11, _x.reserved_12, _x.reserved_13, _x.reserved_14, _x.reserved_15, _x.reserved_16, _x.reserved_17, _x.reserved_18, _x.reserved_19, _x.reserved_20, _x.reserved_21, _x.reserved_22, _x.reserved_23, _x.reserved_24, _x.reserved_25, _x.reserved_26, _x.reserved_27, _x.reserved_28, _x.reserved_29, _x.reserved_30, _x.reserved_31, _x.reserved_32, _x.reserved_33, _x.reserved_34, _x.reserved_35, _x.reserved_36, _x.reserved_37, _x.reserved_38, _x.reserved_39, _x.reserved_40, _x.reserved_41, _x.reserved_42, _x.reserved_43, _x.reserved_44, _x.reserved_45, _x.reserved_46, _x.reserved_47, _x.reserved_48, _x.reserved_49, _x.reserved_50, _x.reserved_51, _x.reserved_52, _x.reserved_53, _x.reserved_54, _x.reserved_55, _x.reserved_56, _x.reserved_57, _x.reserved_58, _x.reserved_59))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 240
      (_x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9, _x.reserved_10, _x.reserved_11, _x.reserved_12, _x.reserved_13, _x.reserved_14, _x.reserved_15, _x.reserved_16, _x.reserved_17, _x.reserved_18, _x.reserved_19, _x.reserved_20, _x.reserved_21, _x.reserved_22, _x.reserved_23, _x.reserved_24, _x.reserved_25, _x.reserved_26, _x.reserved_27, _x.reserved_28, _x.reserved_29, _x.reserved_30, _x.reserved_31, _x.reserved_32, _x.reserved_33, _x.reserved_34, _x.reserved_35, _x.reserved_36, _x.reserved_37, _x.reserved_38, _x.reserved_39, _x.reserved_40, _x.reserved_41, _x.reserved_42, _x.reserved_43, _x.reserved_44, _x.reserved_45, _x.reserved_46, _x.reserved_47, _x.reserved_48, _x.reserved_49, _x.reserved_50, _x.reserved_51, _x.reserved_52, _x.reserved_53, _x.reserved_54, _x.reserved_55, _x.reserved_56, _x.reserved_57, _x.reserved_58, _x.reserved_59,) = _get_struct_30f30I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_30f30I().pack(_x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9, _x.reserved_10, _x.reserved_11, _x.reserved_12, _x.reserved_13, _x.reserved_14, _x.reserved_15, _x.reserved_16, _x.reserved_17, _x.reserved_18, _x.reserved_19, _x.reserved_20, _x.reserved_21, _x.reserved_22, _x.reserved_23, _x.reserved_24, _x.reserved_25, _x.reserved_26, _x.reserved_27, _x.reserved_28, _x.reserved_29, _x.reserved_30, _x.reserved_31, _x.reserved_32, _x.reserved_33, _x.reserved_34, _x.reserved_35, _x.reserved_36, _x.reserved_37, _x.reserved_38, _x.reserved_39, _x.reserved_40, _x.reserved_41, _x.reserved_42, _x.reserved_43, _x.reserved_44, _x.reserved_45, _x.reserved_46, _x.reserved_47, _x.reserved_48, _x.reserved_49, _x.reserved_50, _x.reserved_51, _x.reserved_52, _x.reserved_53, _x.reserved_54, _x.reserved_55, _x.reserved_56, _x.reserved_57, _x.reserved_58, _x.reserved_59))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 240
      (_x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9, _x.reserved_10, _x.reserved_11, _x.reserved_12, _x.reserved_13, _x.reserved_14, _x.reserved_15, _x.reserved_16, _x.reserved_17, _x.reserved_18, _x.reserved_19, _x.reserved_20, _x.reserved_21, _x.reserved_22, _x.reserved_23, _x.reserved_24, _x.reserved_25, _x.reserved_26, _x.reserved_27, _x.reserved_28, _x.reserved_29, _x.reserved_30, _x.reserved_31, _x.reserved_32, _x.reserved_33, _x.reserved_34, _x.reserved_35, _x.reserved_36, _x.reserved_37, _x.reserved_38, _x.reserved_39, _x.reserved_40, _x.reserved_41, _x.reserved_42, _x.reserved_43, _x.reserved_44, _x.reserved_45, _x.reserved_46, _x.reserved_47, _x.reserved_48, _x.reserved_49, _x.reserved_50, _x.reserved_51, _x.reserved_52, _x.reserved_53, _x.reserved_54, _x.reserved_55, _x.reserved_56, _x.reserved_57, _x.reserved_58, _x.reserved_59,) = _get_struct_30f30I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_30f30I = None
def _get_struct_30f30I():
    global _struct_30f30I
    if _struct_30f30I is None:
        _struct_30f30I = struct.Struct("<30f30I")
    return _struct_30f30I

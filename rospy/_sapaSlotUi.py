# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/sapaSlotUi.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class sapaSlotUi(genpy.Message):
  _md5sum = "20a7db8c304db8bf15dfb654dd3a7a36"
  _type = "rospy_message_converter/sapaSlotUi"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 slotIndex
int32 slotStatusUiType
float32 slotUiSizeX
float32 slotUiSizeY
sapaUiPoint slotUiVehPos
float32 slotUiVehPsi
int32 slotUiType
bool slotUiIsTarget
bool slotUIWithParkStop
bool slotUiIsNarrow
bool slotUiIsStored
sapaParkStopUi[] slotUiParkStops

================================================================================
MSG: rospy_message_converter/sapaUiPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/sapaParkStopUi
sapaUiPoint sapaParkStopUiPoint1
sapaUiPoint sapaParkStopUiPoint2
"""
  __slots__ = ['slotIndex','slotStatusUiType','slotUiSizeX','slotUiSizeY','slotUiVehPos','slotUiVehPsi','slotUiType','slotUiIsTarget','slotUIWithParkStop','slotUiIsNarrow','slotUiIsStored','slotUiParkStops']
  _slot_types = ['int32','int32','float32','float32','rospy_message_converter/sapaUiPoint','float32','int32','bool','bool','bool','bool','rospy_message_converter/sapaParkStopUi[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       slotIndex,slotStatusUiType,slotUiSizeX,slotUiSizeY,slotUiVehPos,slotUiVehPsi,slotUiType,slotUiIsTarget,slotUIWithParkStop,slotUiIsNarrow,slotUiIsStored,slotUiParkStops

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sapaSlotUi, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.slotIndex is None:
        self.slotIndex = 0
      if self.slotStatusUiType is None:
        self.slotStatusUiType = 0
      if self.slotUiSizeX is None:
        self.slotUiSizeX = 0.
      if self.slotUiSizeY is None:
        self.slotUiSizeY = 0.
      if self.slotUiVehPos is None:
        self.slotUiVehPos = rospy_message_converter.msg.sapaUiPoint()
      if self.slotUiVehPsi is None:
        self.slotUiVehPsi = 0.
      if self.slotUiType is None:
        self.slotUiType = 0
      if self.slotUiIsTarget is None:
        self.slotUiIsTarget = False
      if self.slotUIWithParkStop is None:
        self.slotUIWithParkStop = False
      if self.slotUiIsNarrow is None:
        self.slotUiIsNarrow = False
      if self.slotUiIsStored is None:
        self.slotUiIsStored = False
      if self.slotUiParkStops is None:
        self.slotUiParkStops = []
    else:
      self.slotIndex = 0
      self.slotStatusUiType = 0
      self.slotUiSizeX = 0.
      self.slotUiSizeY = 0.
      self.slotUiVehPos = rospy_message_converter.msg.sapaUiPoint()
      self.slotUiVehPsi = 0.
      self.slotUiType = 0
      self.slotUiIsTarget = False
      self.slotUIWithParkStop = False
      self.slotUiIsNarrow = False
      self.slotUiIsStored = False
      self.slotUiParkStops = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i5fi4B().pack(_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY, _x.slotUiVehPos.x, _x.slotUiVehPos.y, _x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored))
      length = len(self.slotUiParkStops)
      buff.write(_struct_I.pack(length))
      for val1 in self.slotUiParkStops:
        _v1 = val1.sapaParkStopUiPoint1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.sapaParkStopUiPoint2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slotUiVehPos is None:
        self.slotUiVehPos = rospy_message_converter.msg.sapaUiPoint()
      if self.slotUiParkStops is None:
        self.slotUiParkStops = None
      end = 0
      _x = self
      start = end
      end += 36
      (_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY, _x.slotUiVehPos.x, _x.slotUiVehPos.y, _x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored,) = _get_struct_2i5fi4B().unpack(str[start:end])
      self.slotUiIsTarget = bool(self.slotUiIsTarget)
      self.slotUIWithParkStop = bool(self.slotUIWithParkStop)
      self.slotUiIsNarrow = bool(self.slotUiIsNarrow)
      self.slotUiIsStored = bool(self.slotUiIsStored)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slotUiParkStops = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.sapaParkStopUi()
        _v3 = val1.sapaParkStopUiPoint1
        _x = _v3
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.sapaParkStopUiPoint2
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.slotUiParkStops.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i5fi4B().pack(_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY, _x.slotUiVehPos.x, _x.slotUiVehPos.y, _x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored))
      length = len(self.slotUiParkStops)
      buff.write(_struct_I.pack(length))
      for val1 in self.slotUiParkStops:
        _v5 = val1.sapaParkStopUiPoint1
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = val1.sapaParkStopUiPoint2
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slotUiVehPos is None:
        self.slotUiVehPos = rospy_message_converter.msg.sapaUiPoint()
      if self.slotUiParkStops is None:
        self.slotUiParkStops = None
      end = 0
      _x = self
      start = end
      end += 36
      (_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY, _x.slotUiVehPos.x, _x.slotUiVehPos.y, _x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored,) = _get_struct_2i5fi4B().unpack(str[start:end])
      self.slotUiIsTarget = bool(self.slotUiIsTarget)
      self.slotUIWithParkStop = bool(self.slotUIWithParkStop)
      self.slotUiIsNarrow = bool(self.slotUiIsNarrow)
      self.slotUiIsStored = bool(self.slotUiIsStored)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slotUiParkStops = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.sapaParkStopUi()
        _v7 = val1.sapaParkStopUiPoint1
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.sapaParkStopUiPoint2
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.slotUiParkStops.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i5fi4B = None
def _get_struct_2i5fi4B():
    global _struct_2i5fi4B
    if _struct_2i5fi4B is None:
        _struct_2i5fi4B = struct.Struct("<2i5fi4B")
    return _struct_2i5fi4B

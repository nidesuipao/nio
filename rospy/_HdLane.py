# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdLane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdLane(genpy.Message):
  _md5sum = "a6db4197c23abfb0576c70e2a031bd5a"
  _type = "rospy_message_converter/HdLane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 id
int32 turn
MapPolyline central_line
uint64 left_boundary_id
uint64 right_boundary_id
Predecessor[] predecessors
Successor[] successors
float64 min_speed_limit
float64 max_speed_limit
NeightborSegment left_forward_neighbor
NeightborSegment right_forward_neighbor
NeightborSegment[] left_forward_neighbors
NeightborSegment[] right_forward_neighbors
NeightborSegment[] left_reverse_neighbors
NeightborSegment[] right_reverse_neighbors
Overlap[] overlaps
uint64 lane_group_id
int32 connection_type
int32 sequence_id
int32 lane_type
float64 length
float64[] OBSOLETE_width
float64[] width
float64[] centerline_s
uint32 lane_status
bool lane_used_in_both_directions
uint32 tile_id
float64 advisory_speed_limit
DowngradeLaneSegment[] downgrade_lane_segments
float64 electronic_eye_speed_limit
float64 max_lane_group_speed_limit

================================================================================
MSG: rospy_message_converter/MapPolyline
float64[] x
float64[] y
float64[] z

================================================================================
MSG: rospy_message_converter/Predecessor
uint64 self_id
uint64 other_id

================================================================================
MSG: rospy_message_converter/Successor
uint64 self_id
uint64 other_id

================================================================================
MSG: rospy_message_converter/NeightborSegment
uint64 self_id
uint64 other_id
float64 self_start_s
float64 self_end_s
float64 other_start_s
float64 other_end_s

================================================================================
MSG: rospy_message_converter/Overlap
uint64 self_id
uint64 other_id
int32 type
float64 start_s
float64 end_s

================================================================================
MSG: rospy_message_converter/DowngradeLaneSegment
int32 ad_mode_type
float64 start_s
float64 end_s
int32 info_value
int32 dynamic_info
int32 road_scenario_type
"""
  __slots__ = ['id','turn','central_line','left_boundary_id','right_boundary_id','predecessors','successors','min_speed_limit','max_speed_limit','left_forward_neighbor','right_forward_neighbor','left_forward_neighbors','right_forward_neighbors','left_reverse_neighbors','right_reverse_neighbors','overlaps','lane_group_id','connection_type','sequence_id','lane_type','length','OBSOLETE_width','width','centerline_s','lane_status','lane_used_in_both_directions','tile_id','advisory_speed_limit','downgrade_lane_segments','electronic_eye_speed_limit','max_lane_group_speed_limit']
  _slot_types = ['uint64','int32','rospy_message_converter/MapPolyline','uint64','uint64','rospy_message_converter/Predecessor[]','rospy_message_converter/Successor[]','float64','float64','rospy_message_converter/NeightborSegment','rospy_message_converter/NeightborSegment','rospy_message_converter/NeightborSegment[]','rospy_message_converter/NeightborSegment[]','rospy_message_converter/NeightborSegment[]','rospy_message_converter/NeightborSegment[]','rospy_message_converter/Overlap[]','uint64','int32','int32','int32','float64','float64[]','float64[]','float64[]','uint32','bool','uint32','float64','rospy_message_converter/DowngradeLaneSegment[]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,turn,central_line,left_boundary_id,right_boundary_id,predecessors,successors,min_speed_limit,max_speed_limit,left_forward_neighbor,right_forward_neighbor,left_forward_neighbors,right_forward_neighbors,left_reverse_neighbors,right_reverse_neighbors,overlaps,lane_group_id,connection_type,sequence_id,lane_type,length,OBSOLETE_width,width,centerline_s,lane_status,lane_used_in_both_directions,tile_id,advisory_speed_limit,downgrade_lane_segments,electronic_eye_speed_limit,max_lane_group_speed_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdLane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.turn is None:
        self.turn = 0
      if self.central_line is None:
        self.central_line = rospy_message_converter.msg.MapPolyline()
      if self.left_boundary_id is None:
        self.left_boundary_id = 0
      if self.right_boundary_id is None:
        self.right_boundary_id = 0
      if self.predecessors is None:
        self.predecessors = []
      if self.successors is None:
        self.successors = []
      if self.min_speed_limit is None:
        self.min_speed_limit = 0.
      if self.max_speed_limit is None:
        self.max_speed_limit = 0.
      if self.left_forward_neighbor is None:
        self.left_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      if self.right_forward_neighbor is None:
        self.right_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      if self.left_forward_neighbors is None:
        self.left_forward_neighbors = []
      if self.right_forward_neighbors is None:
        self.right_forward_neighbors = []
      if self.left_reverse_neighbors is None:
        self.left_reverse_neighbors = []
      if self.right_reverse_neighbors is None:
        self.right_reverse_neighbors = []
      if self.overlaps is None:
        self.overlaps = []
      if self.lane_group_id is None:
        self.lane_group_id = 0
      if self.connection_type is None:
        self.connection_type = 0
      if self.sequence_id is None:
        self.sequence_id = 0
      if self.lane_type is None:
        self.lane_type = 0
      if self.length is None:
        self.length = 0.
      if self.OBSOLETE_width is None:
        self.OBSOLETE_width = []
      if self.width is None:
        self.width = []
      if self.centerline_s is None:
        self.centerline_s = []
      if self.lane_status is None:
        self.lane_status = 0
      if self.lane_used_in_both_directions is None:
        self.lane_used_in_both_directions = False
      if self.tile_id is None:
        self.tile_id = 0
      if self.advisory_speed_limit is None:
        self.advisory_speed_limit = 0.
      if self.downgrade_lane_segments is None:
        self.downgrade_lane_segments = []
      if self.electronic_eye_speed_limit is None:
        self.electronic_eye_speed_limit = 0.
      if self.max_lane_group_speed_limit is None:
        self.max_lane_group_speed_limit = 0.
    else:
      self.id = 0
      self.turn = 0
      self.central_line = rospy_message_converter.msg.MapPolyline()
      self.left_boundary_id = 0
      self.right_boundary_id = 0
      self.predecessors = []
      self.successors = []
      self.min_speed_limit = 0.
      self.max_speed_limit = 0.
      self.left_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      self.right_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      self.left_forward_neighbors = []
      self.right_forward_neighbors = []
      self.left_reverse_neighbors = []
      self.right_reverse_neighbors = []
      self.overlaps = []
      self.lane_group_id = 0
      self.connection_type = 0
      self.sequence_id = 0
      self.lane_type = 0
      self.length = 0.
      self.OBSOLETE_width = []
      self.width = []
      self.centerline_s = []
      self.lane_status = 0
      self.lane_used_in_both_directions = False
      self.tile_id = 0
      self.advisory_speed_limit = 0.
      self.downgrade_lane_segments = []
      self.electronic_eye_speed_limit = 0.
      self.max_lane_group_speed_limit = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Qi().pack(_x.id, _x.turn))
      length = len(self.central_line.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.central_line.x))
      length = len(self.central_line.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.central_line.y))
      length = len(self.central_line.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.central_line.z))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.left_boundary_id, _x.right_boundary_id))
      length = len(self.predecessors)
      buff.write(_struct_I.pack(length))
      for val1 in self.predecessors:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
      length = len(self.successors)
      buff.write(_struct_I.pack(length))
      for val1 in self.successors:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
      _x = self
      buff.write(_get_struct_2d2Q4d2Q4d().pack(_x.min_speed_limit, _x.max_speed_limit, _x.left_forward_neighbor.self_id, _x.left_forward_neighbor.other_id, _x.left_forward_neighbor.self_start_s, _x.left_forward_neighbor.self_end_s, _x.left_forward_neighbor.other_start_s, _x.left_forward_neighbor.other_end_s, _x.right_forward_neighbor.self_id, _x.right_forward_neighbor.other_id, _x.right_forward_neighbor.self_start_s, _x.right_forward_neighbor.self_end_s, _x.right_forward_neighbor.other_start_s, _x.right_forward_neighbor.other_end_s))
      length = len(self.left_forward_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_forward_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.right_forward_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_forward_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.left_reverse_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_reverse_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.right_reverse_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_reverse_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.overlaps)
      buff.write(_struct_I.pack(length))
      for val1 in self.overlaps:
        _x = val1
        buff.write(_get_struct_2Qi2d().pack(_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s))
      _x = self
      buff.write(_get_struct_Q3id().pack(_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length))
      length = len(self.OBSOLETE_width)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.OBSOLETE_width))
      length = len(self.width)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.width))
      length = len(self.centerline_s)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.centerline_s))
      _x = self
      buff.write(_get_struct_IBId().pack(_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit))
      length = len(self.downgrade_lane_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.downgrade_lane_segments:
        _x = val1
        buff.write(_get_struct_i2d3i().pack(_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type))
      _x = self
      buff.write(_get_struct_2d().pack(_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.central_line is None:
        self.central_line = rospy_message_converter.msg.MapPolyline()
      if self.predecessors is None:
        self.predecessors = None
      if self.successors is None:
        self.successors = None
      if self.left_forward_neighbor is None:
        self.left_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      if self.right_forward_neighbor is None:
        self.right_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      if self.left_forward_neighbors is None:
        self.left_forward_neighbors = None
      if self.right_forward_neighbors is None:
        self.right_forward_neighbors = None
      if self.left_reverse_neighbors is None:
        self.left_reverse_neighbors = None
      if self.right_reverse_neighbors is None:
        self.right_reverse_neighbors = None
      if self.overlaps is None:
        self.overlaps = None
      if self.downgrade_lane_segments is None:
        self.downgrade_lane_segments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.id, _x.turn,) = _get_struct_Qi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.central_line.x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.central_line.y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.central_line.z = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.left_boundary_id, _x.right_boundary_id,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predecessors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Predecessor()
        _x = val1
        start = end
        end += 16
        (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
        self.predecessors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.successors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Successor()
        _x = val1
        start = end
        end += 16
        (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
        self.successors.append(val1)
      _x = self
      start = end
      end += 112
      (_x.min_speed_limit, _x.max_speed_limit, _x.left_forward_neighbor.self_id, _x.left_forward_neighbor.other_id, _x.left_forward_neighbor.self_start_s, _x.left_forward_neighbor.self_end_s, _x.left_forward_neighbor.other_start_s, _x.left_forward_neighbor.other_end_s, _x.right_forward_neighbor.self_id, _x.right_forward_neighbor.other_id, _x.right_forward_neighbor.self_start_s, _x.right_forward_neighbor.self_end_s, _x.right_forward_neighbor.other_start_s, _x.right_forward_neighbor.other_end_s,) = _get_struct_2d2Q4d2Q4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_forward_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.left_forward_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_forward_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.right_forward_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_reverse_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.left_reverse_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_reverse_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.right_reverse_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.overlaps = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Overlap()
        _x = val1
        start = end
        end += 36
        (_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s,) = _get_struct_2Qi2d().unpack(str[start:end])
        self.overlaps.append(val1)
      _x = self
      start = end
      end += 28
      (_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length,) = _get_struct_Q3id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.OBSOLETE_width = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.width = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.centerline_s = s.unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit,) = _get_struct_IBId().unpack(str[start:end])
      self.lane_used_in_both_directions = bool(self.lane_used_in_both_directions)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.downgrade_lane_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DowngradeLaneSegment()
        _x = val1
        start = end
        end += 32
        (_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_i2d3i().unpack(str[start:end])
        self.downgrade_lane_segments.append(val1)
      _x = self
      start = end
      end += 16
      (_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Qi().pack(_x.id, _x.turn))
      length = len(self.central_line.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.central_line.x.tostring())
      length = len(self.central_line.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.central_line.y.tostring())
      length = len(self.central_line.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.central_line.z.tostring())
      _x = self
      buff.write(_get_struct_2Q().pack(_x.left_boundary_id, _x.right_boundary_id))
      length = len(self.predecessors)
      buff.write(_struct_I.pack(length))
      for val1 in self.predecessors:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
      length = len(self.successors)
      buff.write(_struct_I.pack(length))
      for val1 in self.successors:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
      _x = self
      buff.write(_get_struct_2d2Q4d2Q4d().pack(_x.min_speed_limit, _x.max_speed_limit, _x.left_forward_neighbor.self_id, _x.left_forward_neighbor.other_id, _x.left_forward_neighbor.self_start_s, _x.left_forward_neighbor.self_end_s, _x.left_forward_neighbor.other_start_s, _x.left_forward_neighbor.other_end_s, _x.right_forward_neighbor.self_id, _x.right_forward_neighbor.other_id, _x.right_forward_neighbor.self_start_s, _x.right_forward_neighbor.self_end_s, _x.right_forward_neighbor.other_start_s, _x.right_forward_neighbor.other_end_s))
      length = len(self.left_forward_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_forward_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.right_forward_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_forward_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.left_reverse_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_reverse_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.right_reverse_neighbors)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_reverse_neighbors:
        _x = val1
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
      length = len(self.overlaps)
      buff.write(_struct_I.pack(length))
      for val1 in self.overlaps:
        _x = val1
        buff.write(_get_struct_2Qi2d().pack(_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s))
      _x = self
      buff.write(_get_struct_Q3id().pack(_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length))
      length = len(self.OBSOLETE_width)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.OBSOLETE_width.tostring())
      length = len(self.width)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.width.tostring())
      length = len(self.centerline_s)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.centerline_s.tostring())
      _x = self
      buff.write(_get_struct_IBId().pack(_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit))
      length = len(self.downgrade_lane_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.downgrade_lane_segments:
        _x = val1
        buff.write(_get_struct_i2d3i().pack(_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type))
      _x = self
      buff.write(_get_struct_2d().pack(_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.central_line is None:
        self.central_line = rospy_message_converter.msg.MapPolyline()
      if self.predecessors is None:
        self.predecessors = None
      if self.successors is None:
        self.successors = None
      if self.left_forward_neighbor is None:
        self.left_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      if self.right_forward_neighbor is None:
        self.right_forward_neighbor = rospy_message_converter.msg.NeightborSegment()
      if self.left_forward_neighbors is None:
        self.left_forward_neighbors = None
      if self.right_forward_neighbors is None:
        self.right_forward_neighbors = None
      if self.left_reverse_neighbors is None:
        self.left_reverse_neighbors = None
      if self.right_reverse_neighbors is None:
        self.right_reverse_neighbors = None
      if self.overlaps is None:
        self.overlaps = None
      if self.downgrade_lane_segments is None:
        self.downgrade_lane_segments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.id, _x.turn,) = _get_struct_Qi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.central_line.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.central_line.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.central_line.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.left_boundary_id, _x.right_boundary_id,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predecessors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Predecessor()
        _x = val1
        start = end
        end += 16
        (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
        self.predecessors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.successors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Successor()
        _x = val1
        start = end
        end += 16
        (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
        self.successors.append(val1)
      _x = self
      start = end
      end += 112
      (_x.min_speed_limit, _x.max_speed_limit, _x.left_forward_neighbor.self_id, _x.left_forward_neighbor.other_id, _x.left_forward_neighbor.self_start_s, _x.left_forward_neighbor.self_end_s, _x.left_forward_neighbor.other_start_s, _x.left_forward_neighbor.other_end_s, _x.right_forward_neighbor.self_id, _x.right_forward_neighbor.other_id, _x.right_forward_neighbor.self_start_s, _x.right_forward_neighbor.self_end_s, _x.right_forward_neighbor.other_start_s, _x.right_forward_neighbor.other_end_s,) = _get_struct_2d2Q4d2Q4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_forward_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.left_forward_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_forward_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.right_forward_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_reverse_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.left_reverse_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_reverse_neighbors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NeightborSegment()
        _x = val1
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        self.right_reverse_neighbors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.overlaps = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Overlap()
        _x = val1
        start = end
        end += 36
        (_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s,) = _get_struct_2Qi2d().unpack(str[start:end])
        self.overlaps.append(val1)
      _x = self
      start = end
      end += 28
      (_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length,) = _get_struct_Q3id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.OBSOLETE_width = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.width = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.centerline_s = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 17
      (_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit,) = _get_struct_IBId().unpack(str[start:end])
      self.lane_used_in_both_directions = bool(self.lane_used_in_both_directions)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.downgrade_lane_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DowngradeLaneSegment()
        _x = val1
        start = end
        end += 32
        (_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_i2d3i().unpack(str[start:end])
        self.downgrade_lane_segments.append(val1)
      _x = self
      start = end
      end += 16
      (_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2Q4d = None
def _get_struct_2Q4d():
    global _struct_2Q4d
    if _struct_2Q4d is None:
        _struct_2Q4d = struct.Struct("<2Q4d")
    return _struct_2Q4d
_struct_2Qi2d = None
def _get_struct_2Qi2d():
    global _struct_2Qi2d
    if _struct_2Qi2d is None:
        _struct_2Qi2d = struct.Struct("<2Qi2d")
    return _struct_2Qi2d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2d2Q4d2Q4d = None
def _get_struct_2d2Q4d2Q4d():
    global _struct_2d2Q4d2Q4d
    if _struct_2d2Q4d2Q4d is None:
        _struct_2d2Q4d2Q4d = struct.Struct("<2d2Q4d2Q4d")
    return _struct_2d2Q4d2Q4d
_struct_IBId = None
def _get_struct_IBId():
    global _struct_IBId
    if _struct_IBId is None:
        _struct_IBId = struct.Struct("<IBId")
    return _struct_IBId
_struct_Q3id = None
def _get_struct_Q3id():
    global _struct_Q3id
    if _struct_Q3id is None:
        _struct_Q3id = struct.Struct("<Q3id")
    return _struct_Q3id
_struct_Qi = None
def _get_struct_Qi():
    global _struct_Qi
    if _struct_Qi is None:
        _struct_Qi = struct.Struct("<Qi")
    return _struct_Qi
_struct_i2d3i = None
def _get_struct_i2d3i():
    global _struct_i2d3i
    if _struct_i2d3i is None:
        _struct_i2d3i = struct.Struct("<i2d3i")
    return _struct_i2d3i

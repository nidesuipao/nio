# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehBodyInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VehBodyInfo(genpy.Message):
  _md5sum = "255556643c85891d3e3ffa9d5d5cc098"
  _type = "rospy_message_converter/VehBodyInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """VehStatusInfo VehStatus
DoorInfo Door
int32[] SeatOccpSts
uint32[] SeatBltSts
LightsInfo LightSts
WipperInfo WipperSts
TimingInfo Time
int32 CenLockSts
int32 TpmsSts
int32 DrvState
bool AmbTempValid
float32 AmbTemp
int32 TrailerModReq
int32 SWCAdjModReq
int32 NBSDrvrSts
int32 PrkgTyp
bool CrashDetd
bool AdsLampReq
float32 IntrTemp
int32 IntrTempVld
int32 MaiLiSet
int32 SDWReq
int32 UPAReq
bool HornCtrlSts
bool HeadLampsOn
int32 CDCCameraReq
bool ECOPlusModSts
int32 RpsKeyDist
int32[] MirrorStatus
int32 RpsMovReq
int32 RpsReq

================================================================================
MSG: rospy_message_converter/VehStatusInfo
int32 VehState
int32 VehStateASIL
int32 VehMode

================================================================================
MSG: rospy_message_converter/DoorInfo
int32[] DoorAjarSts
uint32 HoodAjarSts
uint32 TrAjarSts

================================================================================
MSG: rospy_message_converter/LightsInfo
int32[] FogLiSts
int32[] BeamSts
int32 HzrdWarnSts
int32[] TurnIndcrLiSts
int32[] MirrLigtSts
bool[] LgtErrBrkLi
bool[] LgtErrTurnIndcn
int32[] FogLiFctActvSts
uint32 LiSnsrData
bool LiSnsrFailSts
bool[] DowWarnAmbLeSts

================================================================================
MSG: rospy_message_converter/WipperInfo
int32 FrntWiprSts
int32 FrntWiperParkSts
int32 FrntWipMod
int32 FrntWiprReq

================================================================================
MSG: rospy_message_converter/TimingInfo
uint32 Yr
uint32 Mth
uint32 Day
uint32 Hr
uint32 Min
uint32 Sec
"""
  __slots__ = ['VehStatus','Door','SeatOccpSts','SeatBltSts','LightSts','WipperSts','Time','CenLockSts','TpmsSts','DrvState','AmbTempValid','AmbTemp','TrailerModReq','SWCAdjModReq','NBSDrvrSts','PrkgTyp','CrashDetd','AdsLampReq','IntrTemp','IntrTempVld','MaiLiSet','SDWReq','UPAReq','HornCtrlSts','HeadLampsOn','CDCCameraReq','ECOPlusModSts','RpsKeyDist','MirrorStatus','RpsMovReq','RpsReq']
  _slot_types = ['rospy_message_converter/VehStatusInfo','rospy_message_converter/DoorInfo','int32[]','uint32[]','rospy_message_converter/LightsInfo','rospy_message_converter/WipperInfo','rospy_message_converter/TimingInfo','int32','int32','int32','bool','float32','int32','int32','int32','int32','bool','bool','float32','int32','int32','int32','int32','bool','bool','int32','bool','int32','int32[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VehStatus,Door,SeatOccpSts,SeatBltSts,LightSts,WipperSts,Time,CenLockSts,TpmsSts,DrvState,AmbTempValid,AmbTemp,TrailerModReq,SWCAdjModReq,NBSDrvrSts,PrkgTyp,CrashDetd,AdsLampReq,IntrTemp,IntrTempVld,MaiLiSet,SDWReq,UPAReq,HornCtrlSts,HeadLampsOn,CDCCameraReq,ECOPlusModSts,RpsKeyDist,MirrorStatus,RpsMovReq,RpsReq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehBodyInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VehStatus is None:
        self.VehStatus = rospy_message_converter.msg.VehStatusInfo()
      if self.Door is None:
        self.Door = rospy_message_converter.msg.DoorInfo()
      if self.SeatOccpSts is None:
        self.SeatOccpSts = []
      if self.SeatBltSts is None:
        self.SeatBltSts = []
      if self.LightSts is None:
        self.LightSts = rospy_message_converter.msg.LightsInfo()
      if self.WipperSts is None:
        self.WipperSts = rospy_message_converter.msg.WipperInfo()
      if self.Time is None:
        self.Time = rospy_message_converter.msg.TimingInfo()
      if self.CenLockSts is None:
        self.CenLockSts = 0
      if self.TpmsSts is None:
        self.TpmsSts = 0
      if self.DrvState is None:
        self.DrvState = 0
      if self.AmbTempValid is None:
        self.AmbTempValid = False
      if self.AmbTemp is None:
        self.AmbTemp = 0.
      if self.TrailerModReq is None:
        self.TrailerModReq = 0
      if self.SWCAdjModReq is None:
        self.SWCAdjModReq = 0
      if self.NBSDrvrSts is None:
        self.NBSDrvrSts = 0
      if self.PrkgTyp is None:
        self.PrkgTyp = 0
      if self.CrashDetd is None:
        self.CrashDetd = False
      if self.AdsLampReq is None:
        self.AdsLampReq = False
      if self.IntrTemp is None:
        self.IntrTemp = 0.
      if self.IntrTempVld is None:
        self.IntrTempVld = 0
      if self.MaiLiSet is None:
        self.MaiLiSet = 0
      if self.SDWReq is None:
        self.SDWReq = 0
      if self.UPAReq is None:
        self.UPAReq = 0
      if self.HornCtrlSts is None:
        self.HornCtrlSts = False
      if self.HeadLampsOn is None:
        self.HeadLampsOn = False
      if self.CDCCameraReq is None:
        self.CDCCameraReq = 0
      if self.ECOPlusModSts is None:
        self.ECOPlusModSts = False
      if self.RpsKeyDist is None:
        self.RpsKeyDist = 0
      if self.MirrorStatus is None:
        self.MirrorStatus = []
      if self.RpsMovReq is None:
        self.RpsMovReq = 0
      if self.RpsReq is None:
        self.RpsReq = 0
    else:
      self.VehStatus = rospy_message_converter.msg.VehStatusInfo()
      self.Door = rospy_message_converter.msg.DoorInfo()
      self.SeatOccpSts = []
      self.SeatBltSts = []
      self.LightSts = rospy_message_converter.msg.LightsInfo()
      self.WipperSts = rospy_message_converter.msg.WipperInfo()
      self.Time = rospy_message_converter.msg.TimingInfo()
      self.CenLockSts = 0
      self.TpmsSts = 0
      self.DrvState = 0
      self.AmbTempValid = False
      self.AmbTemp = 0.
      self.TrailerModReq = 0
      self.SWCAdjModReq = 0
      self.NBSDrvrSts = 0
      self.PrkgTyp = 0
      self.CrashDetd = False
      self.AdsLampReq = False
      self.IntrTemp = 0.
      self.IntrTempVld = 0
      self.MaiLiSet = 0
      self.SDWReq = 0
      self.UPAReq = 0
      self.HornCtrlSts = False
      self.HeadLampsOn = False
      self.CDCCameraReq = 0
      self.ECOPlusModSts = False
      self.RpsKeyDist = 0
      self.MirrorStatus = []
      self.RpsMovReq = 0
      self.RpsReq = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.VehStatus.VehState, _x.VehStatus.VehStateASIL, _x.VehStatus.VehMode))
      length = len(self.Door.DoorAjarSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.Door.DoorAjarSts))
      _x = self
      buff.write(_get_struct_2I().pack(_x.Door.HoodAjarSts, _x.Door.TrAjarSts))
      length = len(self.SeatOccpSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SeatOccpSts))
      length = len(self.SeatBltSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.SeatBltSts))
      length = len(self.LightSts.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.FogLiSts))
      length = len(self.LightSts.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.BeamSts))
      _x = self.LightSts.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.LightSts.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.TurnIndcrLiSts))
      length = len(self.LightSts.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.MirrLigtSts))
      length = len(self.LightSts.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.LgtErrBrkLi))
      length = len(self.LightSts.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.LgtErrTurnIndcn))
      length = len(self.LightSts.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.FogLiFctActvSts))
      _x = self
      buff.write(_get_struct_IB().pack(_x.LightSts.LiSnsrData, _x.LightSts.LiSnsrFailSts))
      length = len(self.LightSts.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.LightSts.DowWarnAmbLeSts))
      _x = self
      buff.write(_get_struct_4i6I3iBf4i2Bf4i2BiBi().pack(_x.WipperSts.FrntWiprSts, _x.WipperSts.FrntWiperParkSts, _x.WipperSts.FrntWipMod, _x.WipperSts.FrntWiprReq, _x.Time.Yr, _x.Time.Mth, _x.Time.Day, _x.Time.Hr, _x.Time.Min, _x.Time.Sec, _x.CenLockSts, _x.TpmsSts, _x.DrvState, _x.AmbTempValid, _x.AmbTemp, _x.TrailerModReq, _x.SWCAdjModReq, _x.NBSDrvrSts, _x.PrkgTyp, _x.CrashDetd, _x.AdsLampReq, _x.IntrTemp, _x.IntrTempVld, _x.MaiLiSet, _x.SDWReq, _x.UPAReq, _x.HornCtrlSts, _x.HeadLampsOn, _x.CDCCameraReq, _x.ECOPlusModSts, _x.RpsKeyDist))
      length = len(self.MirrorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.MirrorStatus))
      _x = self
      buff.write(_get_struct_2i().pack(_x.RpsMovReq, _x.RpsReq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.VehStatus is None:
        self.VehStatus = rospy_message_converter.msg.VehStatusInfo()
      if self.Door is None:
        self.Door = rospy_message_converter.msg.DoorInfo()
      if self.LightSts is None:
        self.LightSts = rospy_message_converter.msg.LightsInfo()
      if self.WipperSts is None:
        self.WipperSts = rospy_message_converter.msg.WipperInfo()
      if self.Time is None:
        self.Time = rospy_message_converter.msg.TimingInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.VehStatus.VehState, _x.VehStatus.VehStateASIL, _x.VehStatus.VehMode,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Door.DoorAjarSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.Door.HoodAjarSts, _x.Door.TrAjarSts,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SeatOccpSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SeatBltSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.FogLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.BeamSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.LightSts.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.TurnIndcrLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.MirrLigtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.LgtErrBrkLi = s.unpack(str[start:end])
      self.LightSts.LgtErrBrkLi = list(map(bool, self.LightSts.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.LgtErrTurnIndcn = s.unpack(str[start:end])
      self.LightSts.LgtErrTurnIndcn = list(map(bool, self.LightSts.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.FogLiFctActvSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.LightSts.LiSnsrData, _x.LightSts.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.LightSts.LiSnsrFailSts = bool(self.LightSts.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.DowWarnAmbLeSts = s.unpack(str[start:end])
      self.LightSts.DowWarnAmbLeSts = list(map(bool, self.LightSts.DowWarnAmbLeSts))
      _x = self
      start = end
      end += 106
      (_x.WipperSts.FrntWiprSts, _x.WipperSts.FrntWiperParkSts, _x.WipperSts.FrntWipMod, _x.WipperSts.FrntWiprReq, _x.Time.Yr, _x.Time.Mth, _x.Time.Day, _x.Time.Hr, _x.Time.Min, _x.Time.Sec, _x.CenLockSts, _x.TpmsSts, _x.DrvState, _x.AmbTempValid, _x.AmbTemp, _x.TrailerModReq, _x.SWCAdjModReq, _x.NBSDrvrSts, _x.PrkgTyp, _x.CrashDetd, _x.AdsLampReq, _x.IntrTemp, _x.IntrTempVld, _x.MaiLiSet, _x.SDWReq, _x.UPAReq, _x.HornCtrlSts, _x.HeadLampsOn, _x.CDCCameraReq, _x.ECOPlusModSts, _x.RpsKeyDist,) = _get_struct_4i6I3iBf4i2Bf4i2BiBi().unpack(str[start:end])
      self.AmbTempValid = bool(self.AmbTempValid)
      self.CrashDetd = bool(self.CrashDetd)
      self.AdsLampReq = bool(self.AdsLampReq)
      self.HornCtrlSts = bool(self.HornCtrlSts)
      self.HeadLampsOn = bool(self.HeadLampsOn)
      self.ECOPlusModSts = bool(self.ECOPlusModSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.MirrorStatus = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.RpsMovReq, _x.RpsReq,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.VehStatus.VehState, _x.VehStatus.VehStateASIL, _x.VehStatus.VehMode))
      length = len(self.Door.DoorAjarSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Door.DoorAjarSts.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.Door.HoodAjarSts, _x.Door.TrAjarSts))
      length = len(self.SeatOccpSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SeatOccpSts.tostring())
      length = len(self.SeatBltSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.SeatBltSts.tostring())
      length = len(self.LightSts.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LightSts.FogLiSts.tostring())
      length = len(self.LightSts.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LightSts.BeamSts.tostring())
      _x = self.LightSts.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.LightSts.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LightSts.TurnIndcrLiSts.tostring())
      length = len(self.LightSts.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LightSts.MirrLigtSts.tostring())
      length = len(self.LightSts.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.LightSts.LgtErrBrkLi.tostring())
      length = len(self.LightSts.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.LightSts.LgtErrTurnIndcn.tostring())
      length = len(self.LightSts.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LightSts.FogLiFctActvSts.tostring())
      _x = self
      buff.write(_get_struct_IB().pack(_x.LightSts.LiSnsrData, _x.LightSts.LiSnsrFailSts))
      length = len(self.LightSts.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.LightSts.DowWarnAmbLeSts.tostring())
      _x = self
      buff.write(_get_struct_4i6I3iBf4i2Bf4i2BiBi().pack(_x.WipperSts.FrntWiprSts, _x.WipperSts.FrntWiperParkSts, _x.WipperSts.FrntWipMod, _x.WipperSts.FrntWiprReq, _x.Time.Yr, _x.Time.Mth, _x.Time.Day, _x.Time.Hr, _x.Time.Min, _x.Time.Sec, _x.CenLockSts, _x.TpmsSts, _x.DrvState, _x.AmbTempValid, _x.AmbTemp, _x.TrailerModReq, _x.SWCAdjModReq, _x.NBSDrvrSts, _x.PrkgTyp, _x.CrashDetd, _x.AdsLampReq, _x.IntrTemp, _x.IntrTempVld, _x.MaiLiSet, _x.SDWReq, _x.UPAReq, _x.HornCtrlSts, _x.HeadLampsOn, _x.CDCCameraReq, _x.ECOPlusModSts, _x.RpsKeyDist))
      length = len(self.MirrorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.MirrorStatus.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.RpsMovReq, _x.RpsReq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.VehStatus is None:
        self.VehStatus = rospy_message_converter.msg.VehStatusInfo()
      if self.Door is None:
        self.Door = rospy_message_converter.msg.DoorInfo()
      if self.LightSts is None:
        self.LightSts = rospy_message_converter.msg.LightsInfo()
      if self.WipperSts is None:
        self.WipperSts = rospy_message_converter.msg.WipperInfo()
      if self.Time is None:
        self.Time = rospy_message_converter.msg.TimingInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.VehStatus.VehState, _x.VehStatus.VehStateASIL, _x.VehStatus.VehMode,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Door.DoorAjarSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.Door.HoodAjarSts, _x.Door.TrAjarSts,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SeatOccpSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SeatBltSts = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.FogLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.BeamSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.LightSts.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.TurnIndcrLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.MirrLigtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.LgtErrBrkLi = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.LightSts.LgtErrBrkLi = list(map(bool, self.LightSts.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.LgtErrTurnIndcn = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.LightSts.LgtErrTurnIndcn = list(map(bool, self.LightSts.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.FogLiFctActvSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 5
      (_x.LightSts.LiSnsrData, _x.LightSts.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.LightSts.LiSnsrFailSts = bool(self.LightSts.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightSts.DowWarnAmbLeSts = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.LightSts.DowWarnAmbLeSts = list(map(bool, self.LightSts.DowWarnAmbLeSts))
      _x = self
      start = end
      end += 106
      (_x.WipperSts.FrntWiprSts, _x.WipperSts.FrntWiperParkSts, _x.WipperSts.FrntWipMod, _x.WipperSts.FrntWiprReq, _x.Time.Yr, _x.Time.Mth, _x.Time.Day, _x.Time.Hr, _x.Time.Min, _x.Time.Sec, _x.CenLockSts, _x.TpmsSts, _x.DrvState, _x.AmbTempValid, _x.AmbTemp, _x.TrailerModReq, _x.SWCAdjModReq, _x.NBSDrvrSts, _x.PrkgTyp, _x.CrashDetd, _x.AdsLampReq, _x.IntrTemp, _x.IntrTempVld, _x.MaiLiSet, _x.SDWReq, _x.UPAReq, _x.HornCtrlSts, _x.HeadLampsOn, _x.CDCCameraReq, _x.ECOPlusModSts, _x.RpsKeyDist,) = _get_struct_4i6I3iBf4i2Bf4i2BiBi().unpack(str[start:end])
      self.AmbTempValid = bool(self.AmbTempValid)
      self.CrashDetd = bool(self.CrashDetd)
      self.AdsLampReq = bool(self.AdsLampReq)
      self.HornCtrlSts = bool(self.HornCtrlSts)
      self.HeadLampsOn = bool(self.HeadLampsOn)
      self.ECOPlusModSts = bool(self.ECOPlusModSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.MirrorStatus = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.RpsMovReq, _x.RpsReq,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4i6I3iBf4i2Bf4i2BiBi = None
def _get_struct_4i6I3iBf4i2Bf4i2BiBi():
    global _struct_4i6I3iBf4i2Bf4i2BiBi
    if _struct_4i6I3iBf4i2Bf4i2BiBi is None:
        _struct_4i6I3iBf4i2Bf4i2BiBi = struct.Struct("<4i6I3iBf4i2Bf4i2BiBi")
    return _struct_4i6I3iBf4i2Bf4i2BiBi
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

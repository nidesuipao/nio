# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SdMapSegment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SdMapSegment(genpy.Message):
  _md5sum = "f059c5a8fbfe9ca997677b7f0bafd8fc"
  _type = "rospy_message_converter/SdMapSegment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 offset
uint64 index
int32 road_class
uint64 seg_spd_lmt
int32 seg_spd_lmt_type
bool is_tunnel
bool is_bridge
uint32 form_of_way
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 sub_path_idx
uint32 relative_probability
bool is_divided_road
bool is_build_up_area
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir
"""
  __slots__ = ['offset','index','road_class','seg_spd_lmt','seg_spd_lmt_type','is_tunnel','is_bridge','form_of_way','is_part_of_calculated_route','is_complex_intersection','sub_path_idx','relative_probability','is_divided_road','is_build_up_area','num_of_lanes_opp_dir','num_of_lanes_drv_dir']
  _slot_types = ['uint64','uint64','int32','uint64','int32','bool','bool','uint32','bool','bool','uint32','uint32','bool','bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       offset,index,road_class,seg_spd_lmt,seg_spd_lmt_type,is_tunnel,is_bridge,form_of_way,is_part_of_calculated_route,is_complex_intersection,sub_path_idx,relative_probability,is_divided_road,is_build_up_area,num_of_lanes_opp_dir,num_of_lanes_drv_dir

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SdMapSegment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.offset is None:
        self.offset = 0
      if self.index is None:
        self.index = 0
      if self.road_class is None:
        self.road_class = 0
      if self.seg_spd_lmt is None:
        self.seg_spd_lmt = 0
      if self.seg_spd_lmt_type is None:
        self.seg_spd_lmt_type = 0
      if self.is_tunnel is None:
        self.is_tunnel = False
      if self.is_bridge is None:
        self.is_bridge = False
      if self.form_of_way is None:
        self.form_of_way = 0
      if self.is_part_of_calculated_route is None:
        self.is_part_of_calculated_route = False
      if self.is_complex_intersection is None:
        self.is_complex_intersection = False
      if self.sub_path_idx is None:
        self.sub_path_idx = 0
      if self.relative_probability is None:
        self.relative_probability = 0
      if self.is_divided_road is None:
        self.is_divided_road = False
      if self.is_build_up_area is None:
        self.is_build_up_area = False
      if self.num_of_lanes_opp_dir is None:
        self.num_of_lanes_opp_dir = 0
      if self.num_of_lanes_drv_dir is None:
        self.num_of_lanes_drv_dir = 0
    else:
      self.offset = 0
      self.index = 0
      self.road_class = 0
      self.seg_spd_lmt = 0
      self.seg_spd_lmt_type = 0
      self.is_tunnel = False
      self.is_bridge = False
      self.form_of_way = 0
      self.is_part_of_calculated_route = False
      self.is_complex_intersection = False
      self.sub_path_idx = 0
      self.relative_probability = 0
      self.is_divided_road = False
      self.is_build_up_area = False
      self.num_of_lanes_opp_dir = 0
      self.num_of_lanes_drv_dir = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2QiQi2BI2B2I2B2I().pack(_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2QiQi2BI2B2I2B2I().unpack(str[start:end])
      self.is_tunnel = bool(self.is_tunnel)
      self.is_bridge = bool(self.is_bridge)
      self.is_part_of_calculated_route = bool(self.is_part_of_calculated_route)
      self.is_complex_intersection = bool(self.is_complex_intersection)
      self.is_divided_road = bool(self.is_divided_road)
      self.is_build_up_area = bool(self.is_build_up_area)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2QiQi2BI2B2I2B2I().pack(_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2QiQi2BI2B2I2B2I().unpack(str[start:end])
      self.is_tunnel = bool(self.is_tunnel)
      self.is_bridge = bool(self.is_bridge)
      self.is_part_of_calculated_route = bool(self.is_part_of_calculated_route)
      self.is_complex_intersection = bool(self.is_complex_intersection)
      self.is_divided_road = bool(self.is_divided_road)
      self.is_build_up_area = bool(self.is_build_up_area)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2QiQi2BI2B2I2B2I = None
def _get_struct_2QiQi2BI2B2I2B2I():
    global _struct_2QiQi2BI2B2I2B2I
    if _struct_2QiQi2BI2B2I2B2I is None:
        _struct_2QiQi2BI2B2I2B2I = struct.Struct("<2QiQi2BI2B2I2B2I")
    return _struct_2QiQi2BI2B2I2B2I

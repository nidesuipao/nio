# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LaneList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class LaneList(genpy.Message):
  _md5sum = "464281c5d17fdf9b8c59423686807f44"
  _type = "rospy_message_converter/LaneList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 LL_LANE_NUM
PointList_2D[] LL_Lane_List
uint64 time_meas
string image_data
SpecialPointList_2D LL_SpecialPoint_List
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/PointList_2D
uint32 PL_POINT_NUM
Point_2D[] PL_Points_List
LineProperty_2D PL_Line_Property
uint32 sensor_id

================================================================================
MSG: rospy_message_converter/Point_2D
float32 LD_Point_x
float32 LD_Point_y

================================================================================
MSG: rospy_message_converter/LineProperty_2D
int32 LD_Type
int32 LD_Color
int32 LD_Class
int32 LD_Abrasion
int32 LD_Cross
int32 LD_LaneRole

================================================================================
MSG: rospy_message_converter/SpecialPointList_2D
uint32 SPL_POINT_NUM
Point_2D[] SPL_Points_List
int32[] SPL_Type
uint32[] sensor_id_list
"""
  __slots__ = ['LL_LANE_NUM','LL_Lane_List','time_meas','image_data','LL_SpecialPoint_List','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['uint32','rospy_message_converter/PointList_2D[]','uint64','string','rospy_message_converter/SpecialPointList_2D','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LL_LANE_NUM,LL_Lane_List,time_meas,image_data,LL_SpecialPoint_List,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LL_LANE_NUM is None:
        self.LL_LANE_NUM = 0
      if self.LL_Lane_List is None:
        self.LL_Lane_List = []
      if self.time_meas is None:
        self.time_meas = 0
      if self.image_data is None:
        self.image_data = ''
      if self.LL_SpecialPoint_List is None:
        self.LL_SpecialPoint_List = rospy_message_converter.msg.SpecialPointList_2D()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.LL_LANE_NUM = 0
      self.LL_Lane_List = []
      self.time_meas = 0
      self.image_data = ''
      self.LL_SpecialPoint_List = rospy_message_converter.msg.SpecialPointList_2D()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.LL_LANE_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.LL_Lane_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.LL_Lane_List:
        _x = val1.PL_POINT_NUM
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.PL_Points_List)
        buff.write(_struct_I.pack(length))
        for val2 in val1.PL_Points_List:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
        _v1 = val1.PL_Line_Property
        _x = _v1
        buff.write(_get_struct_6i().pack(_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole))
        _x = val1.sensor_id
        buff.write(_get_struct_I().pack(_x))
      _x = self.time_meas
      buff.write(_get_struct_Q().pack(_x))
      _x = self.image_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.LL_SpecialPoint_List.SPL_POINT_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.LL_SpecialPoint_List.SPL_Points_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.LL_SpecialPoint_List.SPL_Points_List:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
      length = len(self.LL_SpecialPoint_List.SPL_Type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LL_SpecialPoint_List.SPL_Type))
      length = len(self.LL_SpecialPoint_List.sensor_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.LL_SpecialPoint_List.sensor_id_list))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LL_Lane_List is None:
        self.LL_Lane_List = None
      if self.LL_SpecialPoint_List is None:
        self.LL_SpecialPoint_List = rospy_message_converter.msg.SpecialPointList_2D()
      end = 0
      start = end
      end += 4
      (self.LL_LANE_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.LL_Lane_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PointList_2D()
        start = end
        end += 4
        (val1.PL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.PL_Points_List = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point_2D()
          _x = val2
          start = end
          end += 8
          (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
          val1.PL_Points_List.append(val2)
        _v2 = val1.PL_Line_Property
        _x = _v2
        start = end
        end += 24
        (_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole,) = _get_struct_6i().unpack(str[start:end])
        start = end
        end += 4
        (val1.sensor_id,) = _get_struct_I().unpack(str[start:end])
        self.LL_Lane_List.append(val1)
      start = end
      end += 8
      (self.time_meas,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_data = str[start:end]
      start = end
      end += 4
      (self.LL_SpecialPoint_List.SPL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.LL_SpecialPoint_List.SPL_Points_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point_2D()
        _x = val1
        start = end
        end += 8
        (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
        self.LL_SpecialPoint_List.SPL_Points_List.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LL_SpecialPoint_List.SPL_Type = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LL_SpecialPoint_List.sensor_id_list = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.LL_LANE_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.LL_Lane_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.LL_Lane_List:
        _x = val1.PL_POINT_NUM
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.PL_Points_List)
        buff.write(_struct_I.pack(length))
        for val2 in val1.PL_Points_List:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
        _v3 = val1.PL_Line_Property
        _x = _v3
        buff.write(_get_struct_6i().pack(_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole))
        _x = val1.sensor_id
        buff.write(_get_struct_I().pack(_x))
      _x = self.time_meas
      buff.write(_get_struct_Q().pack(_x))
      _x = self.image_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.LL_SpecialPoint_List.SPL_POINT_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.LL_SpecialPoint_List.SPL_Points_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.LL_SpecialPoint_List.SPL_Points_List:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
      length = len(self.LL_SpecialPoint_List.SPL_Type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LL_SpecialPoint_List.SPL_Type.tostring())
      length = len(self.LL_SpecialPoint_List.sensor_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.LL_SpecialPoint_List.sensor_id_list.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LL_Lane_List is None:
        self.LL_Lane_List = None
      if self.LL_SpecialPoint_List is None:
        self.LL_SpecialPoint_List = rospy_message_converter.msg.SpecialPointList_2D()
      end = 0
      start = end
      end += 4
      (self.LL_LANE_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.LL_Lane_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PointList_2D()
        start = end
        end += 4
        (val1.PL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.PL_Points_List = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point_2D()
          _x = val2
          start = end
          end += 8
          (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
          val1.PL_Points_List.append(val2)
        _v4 = val1.PL_Line_Property
        _x = _v4
        start = end
        end += 24
        (_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole,) = _get_struct_6i().unpack(str[start:end])
        start = end
        end += 4
        (val1.sensor_id,) = _get_struct_I().unpack(str[start:end])
        self.LL_Lane_List.append(val1)
      start = end
      end += 8
      (self.time_meas,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_data = str[start:end]
      start = end
      end += 4
      (self.LL_SpecialPoint_List.SPL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.LL_SpecialPoint_List.SPL_Points_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point_2D()
        _x = val1
        start = end
        end += 8
        (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
        self.LL_SpecialPoint_List.SPL_Points_List.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LL_SpecialPoint_List.SPL_Type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LL_SpecialPoint_List.sensor_id_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TrajCropDbgOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class TrajCropDbgOut(genpy.Message):
  _md5sum = "e5c13de028ddcd0ea7147a729ee308ab"
  _type = "rospy_message_converter/TrajCropDbgOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParPoint traj_start_pt
ParPoint traj_end_pt
float32 traj_start_pt_theta
float32 traj_end_pt_theta
string traj_segment
float32 cur_index
bool is_start_cropped
bool is_end_cropped
bool is_estop
int32 crop_reason
ParLocation curr_location

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ParLocation
uint64 timestamp
bool location_valid
ParPoint position
ParQuaternion orientation
float32 easting
float32 northing
float32 height
float32 speed
float32 sum_s

================================================================================
MSG: rospy_message_converter/ParQuaternion
float32 x
float32 y
float32 z
float32 w
"""
  __slots__ = ['traj_start_pt','traj_end_pt','traj_start_pt_theta','traj_end_pt_theta','traj_segment','cur_index','is_start_cropped','is_end_cropped','is_estop','crop_reason','curr_location']
  _slot_types = ['rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','float32','float32','string','float32','bool','bool','bool','int32','rospy_message_converter/ParLocation']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       traj_start_pt,traj_end_pt,traj_start_pt_theta,traj_end_pt_theta,traj_segment,cur_index,is_start_cropped,is_end_cropped,is_estop,crop_reason,curr_location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajCropDbgOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.traj_start_pt is None:
        self.traj_start_pt = rospy_message_converter.msg.ParPoint()
      if self.traj_end_pt is None:
        self.traj_end_pt = rospy_message_converter.msg.ParPoint()
      if self.traj_start_pt_theta is None:
        self.traj_start_pt_theta = 0.
      if self.traj_end_pt_theta is None:
        self.traj_end_pt_theta = 0.
      if self.traj_segment is None:
        self.traj_segment = ''
      if self.cur_index is None:
        self.cur_index = 0.
      if self.is_start_cropped is None:
        self.is_start_cropped = False
      if self.is_end_cropped is None:
        self.is_end_cropped = False
      if self.is_estop is None:
        self.is_estop = False
      if self.crop_reason is None:
        self.crop_reason = 0
      if self.curr_location is None:
        self.curr_location = rospy_message_converter.msg.ParLocation()
    else:
      self.traj_start_pt = rospy_message_converter.msg.ParPoint()
      self.traj_end_pt = rospy_message_converter.msg.ParPoint()
      self.traj_start_pt_theta = 0.
      self.traj_end_pt_theta = 0.
      self.traj_segment = ''
      self.cur_index = 0.
      self.is_start_cropped = False
      self.is_end_cropped = False
      self.is_estop = False
      self.crop_reason = 0
      self.curr_location = rospy_message_converter.msg.ParLocation()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.traj_start_pt.x, _x.traj_start_pt.y, _x.traj_start_pt.z, _x.traj_end_pt.x, _x.traj_end_pt.y, _x.traj_end_pt.z, _x.traj_start_pt_theta, _x.traj_end_pt_theta))
      _x = self.traj_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3BiQB12f().pack(_x.cur_index, _x.is_start_cropped, _x.is_end_cropped, _x.is_estop, _x.crop_reason, _x.curr_location.timestamp, _x.curr_location.location_valid, _x.curr_location.position.x, _x.curr_location.position.y, _x.curr_location.position.z, _x.curr_location.orientation.x, _x.curr_location.orientation.y, _x.curr_location.orientation.z, _x.curr_location.orientation.w, _x.curr_location.easting, _x.curr_location.northing, _x.curr_location.height, _x.curr_location.speed, _x.curr_location.sum_s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.traj_start_pt is None:
        self.traj_start_pt = rospy_message_converter.msg.ParPoint()
      if self.traj_end_pt is None:
        self.traj_end_pt = rospy_message_converter.msg.ParPoint()
      if self.curr_location is None:
        self.curr_location = rospy_message_converter.msg.ParLocation()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.traj_start_pt.x, _x.traj_start_pt.y, _x.traj_start_pt.z, _x.traj_end_pt.x, _x.traj_end_pt.y, _x.traj_end_pt.z, _x.traj_start_pt_theta, _x.traj_end_pt_theta,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.traj_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.traj_segment = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.cur_index, _x.is_start_cropped, _x.is_end_cropped, _x.is_estop, _x.crop_reason, _x.curr_location.timestamp, _x.curr_location.location_valid, _x.curr_location.position.x, _x.curr_location.position.y, _x.curr_location.position.z, _x.curr_location.orientation.x, _x.curr_location.orientation.y, _x.curr_location.orientation.z, _x.curr_location.orientation.w, _x.curr_location.easting, _x.curr_location.northing, _x.curr_location.height, _x.curr_location.speed, _x.curr_location.sum_s,) = _get_struct_f3BiQB12f().unpack(str[start:end])
      self.is_start_cropped = bool(self.is_start_cropped)
      self.is_end_cropped = bool(self.is_end_cropped)
      self.is_estop = bool(self.is_estop)
      self.curr_location.location_valid = bool(self.curr_location.location_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.traj_start_pt.x, _x.traj_start_pt.y, _x.traj_start_pt.z, _x.traj_end_pt.x, _x.traj_end_pt.y, _x.traj_end_pt.z, _x.traj_start_pt_theta, _x.traj_end_pt_theta))
      _x = self.traj_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3BiQB12f().pack(_x.cur_index, _x.is_start_cropped, _x.is_end_cropped, _x.is_estop, _x.crop_reason, _x.curr_location.timestamp, _x.curr_location.location_valid, _x.curr_location.position.x, _x.curr_location.position.y, _x.curr_location.position.z, _x.curr_location.orientation.x, _x.curr_location.orientation.y, _x.curr_location.orientation.z, _x.curr_location.orientation.w, _x.curr_location.easting, _x.curr_location.northing, _x.curr_location.height, _x.curr_location.speed, _x.curr_location.sum_s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.traj_start_pt is None:
        self.traj_start_pt = rospy_message_converter.msg.ParPoint()
      if self.traj_end_pt is None:
        self.traj_end_pt = rospy_message_converter.msg.ParPoint()
      if self.curr_location is None:
        self.curr_location = rospy_message_converter.msg.ParLocation()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.traj_start_pt.x, _x.traj_start_pt.y, _x.traj_start_pt.z, _x.traj_end_pt.x, _x.traj_end_pt.y, _x.traj_end_pt.z, _x.traj_start_pt_theta, _x.traj_end_pt_theta,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.traj_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.traj_segment = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.cur_index, _x.is_start_cropped, _x.is_end_cropped, _x.is_estop, _x.crop_reason, _x.curr_location.timestamp, _x.curr_location.location_valid, _x.curr_location.position.x, _x.curr_location.position.y, _x.curr_location.position.z, _x.curr_location.orientation.x, _x.curr_location.orientation.y, _x.curr_location.orientation.z, _x.curr_location.orientation.w, _x.curr_location.easting, _x.curr_location.northing, _x.curr_location.height, _x.curr_location.speed, _x.curr_location.sum_s,) = _get_struct_f3BiQB12f().unpack(str[start:end])
      self.is_start_cropped = bool(self.is_start_cropped)
      self.is_end_cropped = bool(self.is_end_cropped)
      self.is_estop = bool(self.is_estop)
      self.curr_location.location_valid = bool(self.curr_location.location_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_f3BiQB12f = None
def _get_struct_f3BiQB12f():
    global _struct_f3BiQB12f
    if _struct_f3BiQB12f is None:
        _struct_f3BiQB12f = struct.Struct("<f3BiQB12f")
    return _struct_f3BiQB12f

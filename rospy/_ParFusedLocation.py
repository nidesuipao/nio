# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParFusedLocation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParFusedLocation(genpy.Message):
  _md5sum = "79c8c93ac6cf394e3f193c329c53bfd9"
  _type = "rospy_message_converter/ParFusedLocation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParLocation loc_odom
ParLocation loc_slot
ParLocation loc_fused
int32 wheel_odom_status
int32 imu_status
int32 svc_status
int32 lidar_status
NodeInfo node_info
int32 slot_status
int32 psap_station_info_status
int32 psap_station_entrance_type
PSAPResult psap_result
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ParLocation
uint64 timestamp
bool location_valid
ParPoint position
ParQuaternion orientation
float32 easting
float32 northing
float32 height
float32 speed
float32 sum_s

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ParQuaternion
float32 x
float32 y
float32 z
float32 w

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer

================================================================================
MSG: rospy_message_converter/PSAPResult
uint64 timestamp
PSAPObject[] objects
SVCPoint veh_loc
float32 veh_loc_z
SVCOrientation veh_orientation
bool veh_loc_valid
PSAPSlot slot
int32 coordinate_type

================================================================================
MSG: rospy_message_converter/PSAPObject
int32 obj_type
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
int32 marker_id

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/SVCOrientation
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: rospy_message_converter/PSAPSlot
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
SVCPoint veh_pos
float32 veh_psi
int32 slot_status
"""
  __slots__ = ['loc_odom','loc_slot','loc_fused','wheel_odom_status','imu_status','svc_status','lidar_status','node_info','slot_status','psap_station_info_status','psap_station_entrance_type','psap_result','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/ParLocation','rospy_message_converter/ParLocation','rospy_message_converter/ParLocation','int32','int32','int32','int32','rospy_message_converter/NodeInfo','int32','int32','int32','rospy_message_converter/PSAPResult','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       loc_odom,loc_slot,loc_fused,wheel_odom_status,imu_status,svc_status,lidar_status,node_info,slot_status,psap_station_info_status,psap_station_entrance_type,psap_result,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParFusedLocation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.loc_odom is None:
        self.loc_odom = rospy_message_converter.msg.ParLocation()
      if self.loc_slot is None:
        self.loc_slot = rospy_message_converter.msg.ParLocation()
      if self.loc_fused is None:
        self.loc_fused = rospy_message_converter.msg.ParLocation()
      if self.wheel_odom_status is None:
        self.wheel_odom_status = 0
      if self.imu_status is None:
        self.imu_status = 0
      if self.svc_status is None:
        self.svc_status = 0
      if self.lidar_status is None:
        self.lidar_status = 0
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.slot_status is None:
        self.slot_status = 0
      if self.psap_station_info_status is None:
        self.psap_station_info_status = 0
      if self.psap_station_entrance_type is None:
        self.psap_station_entrance_type = 0
      if self.psap_result is None:
        self.psap_result = rospy_message_converter.msg.PSAPResult()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.loc_odom = rospy_message_converter.msg.ParLocation()
      self.loc_slot = rospy_message_converter.msg.ParLocation()
      self.loc_fused = rospy_message_converter.msg.ParLocation()
      self.wheel_odom_status = 0
      self.imu_status = 0
      self.svc_status = 0
      self.lidar_status = 0
      self.node_info = rospy_message_converter.msg.NodeInfo()
      self.slot_status = 0
      self.psap_station_info_status = 0
      self.psap_station_entrance_type = 0
      self.psap_result = rospy_message_converter.msg.PSAPResult()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QB12fQB12fQB12f6i().pack(_x.loc_odom.timestamp, _x.loc_odom.location_valid, _x.loc_odom.position.x, _x.loc_odom.position.y, _x.loc_odom.position.z, _x.loc_odom.orientation.x, _x.loc_odom.orientation.y, _x.loc_odom.orientation.z, _x.loc_odom.orientation.w, _x.loc_odom.easting, _x.loc_odom.northing, _x.loc_odom.height, _x.loc_odom.speed, _x.loc_odom.sum_s, _x.loc_slot.timestamp, _x.loc_slot.location_valid, _x.loc_slot.position.x, _x.loc_slot.position.y, _x.loc_slot.position.z, _x.loc_slot.orientation.x, _x.loc_slot.orientation.y, _x.loc_slot.orientation.z, _x.loc_slot.orientation.w, _x.loc_slot.easting, _x.loc_slot.northing, _x.loc_slot.height, _x.loc_slot.speed, _x.loc_slot.sum_s, _x.loc_fused.timestamp, _x.loc_fused.location_valid, _x.loc_fused.position.x, _x.loc_fused.position.y, _x.loc_fused.position.z, _x.loc_fused.orientation.x, _x.loc_fused.orientation.y, _x.loc_fused.orientation.z, _x.loc_fused.orientation.w, _x.loc_fused.easting, _x.loc_fused.northing, _x.loc_fused.height, _x.loc_fused.speed, _x.loc_fused.sum_s, _x.wheel_odom_status, _x.imu_status, _x.svc_status, _x.lidar_status, _x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.node_info.buffer))
      _x = self
      buff.write(_get_struct_3iQ().pack(_x.slot_status, _x.psap_station_info_status, _x.psap_station_entrance_type, _x.psap_result.timestamp))
      length = len(self.psap_result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.psap_result.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pt1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.pt2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.pt3
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.pt4
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2iQ().pack(_x.psap_result.veh_loc.x, _x.psap_result.veh_loc.y, _x.psap_result.veh_loc_z, _x.psap_result.veh_orientation.roll, _x.psap_result.veh_orientation.pitch, _x.psap_result.veh_orientation.yaw, _x.psap_result.veh_loc_valid, _x.psap_result.slot.pt1.x, _x.psap_result.slot.pt1.y, _x.psap_result.slot.pt2.x, _x.psap_result.slot.pt2.y, _x.psap_result.slot.pt3.x, _x.psap_result.slot.pt3.y, _x.psap_result.slot.pt4.x, _x.psap_result.slot.pt4.y, _x.psap_result.slot.veh_pos.x, _x.psap_result.slot.veh_pos.y, _x.psap_result.slot.veh_psi, _x.psap_result.slot.slot_status, _x.psap_result.coordinate_type, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.loc_odom is None:
        self.loc_odom = rospy_message_converter.msg.ParLocation()
      if self.loc_slot is None:
        self.loc_slot = rospy_message_converter.msg.ParLocation()
      if self.loc_fused is None:
        self.loc_fused = rospy_message_converter.msg.ParLocation()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.psap_result is None:
        self.psap_result = rospy_message_converter.msg.PSAPResult()
      end = 0
      _x = self
      start = end
      end += 195
      (_x.loc_odom.timestamp, _x.loc_odom.location_valid, _x.loc_odom.position.x, _x.loc_odom.position.y, _x.loc_odom.position.z, _x.loc_odom.orientation.x, _x.loc_odom.orientation.y, _x.loc_odom.orientation.z, _x.loc_odom.orientation.w, _x.loc_odom.easting, _x.loc_odom.northing, _x.loc_odom.height, _x.loc_odom.speed, _x.loc_odom.sum_s, _x.loc_slot.timestamp, _x.loc_slot.location_valid, _x.loc_slot.position.x, _x.loc_slot.position.y, _x.loc_slot.position.z, _x.loc_slot.orientation.x, _x.loc_slot.orientation.y, _x.loc_slot.orientation.z, _x.loc_slot.orientation.w, _x.loc_slot.easting, _x.loc_slot.northing, _x.loc_slot.height, _x.loc_slot.speed, _x.loc_slot.sum_s, _x.loc_fused.timestamp, _x.loc_fused.location_valid, _x.loc_fused.position.x, _x.loc_fused.position.y, _x.loc_fused.position.z, _x.loc_fused.orientation.x, _x.loc_fused.orientation.y, _x.loc_fused.orientation.z, _x.loc_fused.orientation.w, _x.loc_fused.easting, _x.loc_fused.northing, _x.loc_fused.height, _x.loc_fused.speed, _x.loc_fused.sum_s, _x.wheel_odom_status, _x.imu_status, _x.svc_status, _x.lidar_status, _x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_QB12fQB12fQB12f6i().unpack(str[start:end])
      self.loc_odom.location_valid = bool(self.loc_odom.location_valid)
      self.loc_slot.location_valid = bool(self.loc_slot.location_valid)
      self.loc_fused.location_valid = bool(self.loc_fused.location_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.slot_status, _x.psap_station_info_status, _x.psap_station_entrance_type, _x.psap_result.timestamp,) = _get_struct_3iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.psap_result.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v5 = val1.pt1
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v6 = val1.pt2
        _x = _v6
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v7 = val1.pt3
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.pt4
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.psap_result.objects.append(val1)
      _x = self
      start = end
      end += 85
      (_x.psap_result.veh_loc.x, _x.psap_result.veh_loc.y, _x.psap_result.veh_loc_z, _x.psap_result.veh_orientation.roll, _x.psap_result.veh_orientation.pitch, _x.psap_result.veh_orientation.yaw, _x.psap_result.veh_loc_valid, _x.psap_result.slot.pt1.x, _x.psap_result.slot.pt1.y, _x.psap_result.slot.pt2.x, _x.psap_result.slot.pt2.y, _x.psap_result.slot.pt3.x, _x.psap_result.slot.pt3.y, _x.psap_result.slot.pt4.x, _x.psap_result.slot.pt4.y, _x.psap_result.slot.veh_pos.x, _x.psap_result.slot.veh_pos.y, _x.psap_result.slot.veh_psi, _x.psap_result.slot.slot_status, _x.psap_result.coordinate_type, _x.publish_ptp_ts,) = _get_struct_6fB11f2iQ().unpack(str[start:end])
      self.psap_result.veh_loc_valid = bool(self.psap_result.veh_loc_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QB12fQB12fQB12f6i().pack(_x.loc_odom.timestamp, _x.loc_odom.location_valid, _x.loc_odom.position.x, _x.loc_odom.position.y, _x.loc_odom.position.z, _x.loc_odom.orientation.x, _x.loc_odom.orientation.y, _x.loc_odom.orientation.z, _x.loc_odom.orientation.w, _x.loc_odom.easting, _x.loc_odom.northing, _x.loc_odom.height, _x.loc_odom.speed, _x.loc_odom.sum_s, _x.loc_slot.timestamp, _x.loc_slot.location_valid, _x.loc_slot.position.x, _x.loc_slot.position.y, _x.loc_slot.position.z, _x.loc_slot.orientation.x, _x.loc_slot.orientation.y, _x.loc_slot.orientation.z, _x.loc_slot.orientation.w, _x.loc_slot.easting, _x.loc_slot.northing, _x.loc_slot.height, _x.loc_slot.speed, _x.loc_slot.sum_s, _x.loc_fused.timestamp, _x.loc_fused.location_valid, _x.loc_fused.position.x, _x.loc_fused.position.y, _x.loc_fused.position.z, _x.loc_fused.orientation.x, _x.loc_fused.orientation.y, _x.loc_fused.orientation.z, _x.loc_fused.orientation.w, _x.loc_fused.easting, _x.loc_fused.northing, _x.loc_fused.height, _x.loc_fused.speed, _x.loc_fused.sum_s, _x.wheel_odom_status, _x.imu_status, _x.svc_status, _x.lidar_status, _x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_3iQ().pack(_x.slot_status, _x.psap_station_info_status, _x.psap_station_entrance_type, _x.psap_result.timestamp))
      length = len(self.psap_result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.psap_result.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v9 = val1.pt1
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v10 = val1.pt2
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = val1.pt3
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = val1.pt4
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2iQ().pack(_x.psap_result.veh_loc.x, _x.psap_result.veh_loc.y, _x.psap_result.veh_loc_z, _x.psap_result.veh_orientation.roll, _x.psap_result.veh_orientation.pitch, _x.psap_result.veh_orientation.yaw, _x.psap_result.veh_loc_valid, _x.psap_result.slot.pt1.x, _x.psap_result.slot.pt1.y, _x.psap_result.slot.pt2.x, _x.psap_result.slot.pt2.y, _x.psap_result.slot.pt3.x, _x.psap_result.slot.pt3.y, _x.psap_result.slot.pt4.x, _x.psap_result.slot.pt4.y, _x.psap_result.slot.veh_pos.x, _x.psap_result.slot.veh_pos.y, _x.psap_result.slot.veh_psi, _x.psap_result.slot.slot_status, _x.psap_result.coordinate_type, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.loc_odom is None:
        self.loc_odom = rospy_message_converter.msg.ParLocation()
      if self.loc_slot is None:
        self.loc_slot = rospy_message_converter.msg.ParLocation()
      if self.loc_fused is None:
        self.loc_fused = rospy_message_converter.msg.ParLocation()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.psap_result is None:
        self.psap_result = rospy_message_converter.msg.PSAPResult()
      end = 0
      _x = self
      start = end
      end += 195
      (_x.loc_odom.timestamp, _x.loc_odom.location_valid, _x.loc_odom.position.x, _x.loc_odom.position.y, _x.loc_odom.position.z, _x.loc_odom.orientation.x, _x.loc_odom.orientation.y, _x.loc_odom.orientation.z, _x.loc_odom.orientation.w, _x.loc_odom.easting, _x.loc_odom.northing, _x.loc_odom.height, _x.loc_odom.speed, _x.loc_odom.sum_s, _x.loc_slot.timestamp, _x.loc_slot.location_valid, _x.loc_slot.position.x, _x.loc_slot.position.y, _x.loc_slot.position.z, _x.loc_slot.orientation.x, _x.loc_slot.orientation.y, _x.loc_slot.orientation.z, _x.loc_slot.orientation.w, _x.loc_slot.easting, _x.loc_slot.northing, _x.loc_slot.height, _x.loc_slot.speed, _x.loc_slot.sum_s, _x.loc_fused.timestamp, _x.loc_fused.location_valid, _x.loc_fused.position.x, _x.loc_fused.position.y, _x.loc_fused.position.z, _x.loc_fused.orientation.x, _x.loc_fused.orientation.y, _x.loc_fused.orientation.z, _x.loc_fused.orientation.w, _x.loc_fused.easting, _x.loc_fused.northing, _x.loc_fused.height, _x.loc_fused.speed, _x.loc_fused.sum_s, _x.wheel_odom_status, _x.imu_status, _x.svc_status, _x.lidar_status, _x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_QB12fQB12fQB12f6i().unpack(str[start:end])
      self.loc_odom.location_valid = bool(self.loc_odom.location_valid)
      self.loc_slot.location_valid = bool(self.loc_slot.location_valid)
      self.loc_fused.location_valid = bool(self.loc_fused.location_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 20
      (_x.slot_status, _x.psap_station_info_status, _x.psap_station_entrance_type, _x.psap_result.timestamp,) = _get_struct_3iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.psap_result.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v13 = val1.pt1
        _x = _v13
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v14 = val1.pt2
        _x = _v14
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v15 = val1.pt3
        _x = _v15
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.pt4
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.psap_result.objects.append(val1)
      _x = self
      start = end
      end += 85
      (_x.psap_result.veh_loc.x, _x.psap_result.veh_loc.y, _x.psap_result.veh_loc_z, _x.psap_result.veh_orientation.roll, _x.psap_result.veh_orientation.pitch, _x.psap_result.veh_orientation.yaw, _x.psap_result.veh_loc_valid, _x.psap_result.slot.pt1.x, _x.psap_result.slot.pt1.y, _x.psap_result.slot.pt2.x, _x.psap_result.slot.pt2.y, _x.psap_result.slot.pt3.x, _x.psap_result.slot.pt3.y, _x.psap_result.slot.pt4.x, _x.psap_result.slot.pt4.y, _x.psap_result.slot.veh_pos.x, _x.psap_result.slot.veh_pos.y, _x.psap_result.slot.veh_psi, _x.psap_result.slot.slot_status, _x.psap_result.coordinate_type, _x.publish_ptp_ts,) = _get_struct_6fB11f2iQ().unpack(str[start:end])
      self.psap_result.veh_loc_valid = bool(self.psap_result.veh_loc_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3iQ = None
def _get_struct_3iQ():
    global _struct_3iQ
    if _struct_3iQ is None:
        _struct_3iQ = struct.Struct("<3iQ")
    return _struct_3iQ
_struct_6fB11f2iQ = None
def _get_struct_6fB11f2iQ():
    global _struct_6fB11f2iQ
    if _struct_6fB11f2iQ is None:
        _struct_6fB11f2iQ = struct.Struct("<6fB11f2iQ")
    return _struct_6fB11f2iQ
_struct_QB12fQB12fQB12f6i = None
def _get_struct_QB12fQB12fQB12f6i():
    global _struct_QB12fQB12fQB12f6i
    if _struct_QB12fQB12fQB12f6i is None:
        _struct_QB12fQB12fQB12f6i = struct.Struct("<QB12fQB12fQB12f6i")
    return _struct_QB12fQB12fQB12f6i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AdasInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AdasInfo(genpy.Message):
  _md5sum = "231859649bd5815592ccb569a2cc3d47"
  _type = "rospy_message_converter/AdasInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_adasmap_valid
uint32 m_adasmap_is_highway
SdMapSegment[] segment
ProfilePoint[] profile_point
Stub[] stub
SdMapTrafficSign[] traffic_sign
SdMapLaneConnection[] lane_connection
AdasMeta adas_meta
TrafficEvent[] traffic_event

================================================================================
MSG: rospy_message_converter/SdMapSegment
uint64 offset
uint64 index
int32 road_class
uint64 seg_spd_lmt
int32 seg_spd_lmt_type
bool is_tunnel
bool is_bridge
uint32 form_of_way
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 sub_path_idx
uint32 relative_probability
bool is_divided_road
bool is_build_up_area
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir

================================================================================
MSG: rospy_message_converter/ProfilePoint
uint64 offset
uint64 index
int32 type
uint64 value
bool is_control_point
float64 decoded_value

================================================================================
MSG: rospy_message_converter/Stub
uint64 offset
uint64 index
uint32 sub_path_idx
uint32 relative_probability
int32 road_class
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 form_of_way
uint32 turn_angle
bool is_last_stub
uint32 right_of_way
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir

================================================================================
MSG: rospy_message_converter/SdMapTrafficSign
uint64 offset
uint64 index
uint64 sign_type
uint64 value
uint32 lane
uint32 vehicle_specific
uint32 time_specific
uint64 condition
uint32 sign_location
bool position_valid
Point2d position_pt
float64 height

================================================================================
MSG: rospy_message_converter/Point2d
float64 longitude
float64 latitude

================================================================================
MSG: rospy_message_converter/SdMapLaneConnection
uint64 offset
uint64 index
uint32 lane_num
uint32 first_predecessor_lane
uint32 last_predecessor_lane
uint32 priority_predecessor_lane
uint32 arrow_marking
uint32 lane_type
uint32 line_marking
uint32 yield_flag

================================================================================
MSG: rospy_message_converter/AdasMeta
uint32 country_code

================================================================================
MSG: rospy_message_converter/TrafficEvent
uint64 offset
uint64 index
int32 status
int32 start_end_point
uint32 reliability
uint64 event_type
"""
  __slots__ = ['is_adasmap_valid','m_adasmap_is_highway','segment','profile_point','stub','traffic_sign','lane_connection','adas_meta','traffic_event']
  _slot_types = ['bool','uint32','rospy_message_converter/SdMapSegment[]','rospy_message_converter/ProfilePoint[]','rospy_message_converter/Stub[]','rospy_message_converter/SdMapTrafficSign[]','rospy_message_converter/SdMapLaneConnection[]','rospy_message_converter/AdasMeta','rospy_message_converter/TrafficEvent[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_adasmap_valid,m_adasmap_is_highway,segment,profile_point,stub,traffic_sign,lane_connection,adas_meta,traffic_event

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdasInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_adasmap_valid is None:
        self.is_adasmap_valid = False
      if self.m_adasmap_is_highway is None:
        self.m_adasmap_is_highway = 0
      if self.segment is None:
        self.segment = []
      if self.profile_point is None:
        self.profile_point = []
      if self.stub is None:
        self.stub = []
      if self.traffic_sign is None:
        self.traffic_sign = []
      if self.lane_connection is None:
        self.lane_connection = []
      if self.adas_meta is None:
        self.adas_meta = rospy_message_converter.msg.AdasMeta()
      if self.traffic_event is None:
        self.traffic_event = []
    else:
      self.is_adasmap_valid = False
      self.m_adasmap_is_highway = 0
      self.segment = []
      self.profile_point = []
      self.stub = []
      self.traffic_sign = []
      self.lane_connection = []
      self.adas_meta = rospy_message_converter.msg.AdasMeta()
      self.traffic_event = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.is_adasmap_valid, _x.m_adasmap_is_highway))
      length = len(self.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.segment:
        _x = val1
        buff.write(_get_struct_2QiQi2BI2B2I2B2I().pack(_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.profile_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.profile_point:
        _x = val1
        buff.write(_get_struct_2QiQBd().pack(_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value))
      length = len(self.stub)
      buff.write(_struct_I.pack(length))
      for val1 in self.stub:
        _x = val1
        buff.write(_get_struct_2Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.traffic_sign)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_sign:
        _x = val1
        buff.write(_get_struct_4Q3IQIB().pack(_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid))
        _v1 = val1.position_pt
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.longitude, _x.latitude))
        _x = val1.height
        buff.write(_get_struct_d().pack(_x))
      length = len(self.lane_connection)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_connection:
        _x = val1
        buff.write(_get_struct_2Q8I().pack(_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
      _x = self.adas_meta.country_code
      buff.write(_get_struct_I().pack(_x))
      length = len(self.traffic_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_event:
        _x = val1
        buff.write(_get_struct_2Q2iIQ().pack(_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.segment is None:
        self.segment = None
      if self.profile_point is None:
        self.profile_point = None
      if self.stub is None:
        self.stub = None
      if self.traffic_sign is None:
        self.traffic_sign = None
      if self.lane_connection is None:
        self.lane_connection = None
      if self.adas_meta is None:
        self.adas_meta = rospy_message_converter.msg.AdasMeta()
      if self.traffic_event is None:
        self.traffic_event = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.is_adasmap_valid, _x.m_adasmap_is_highway,) = _get_struct_BI().unpack(str[start:end])
      self.is_adasmap_valid = bool(self.is_adasmap_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapSegment()
        _x = val1
        start = end
        end += 58
        (_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2QiQi2BI2B2I2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.profile_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ProfilePoint()
        _x = val1
        start = end
        end += 37
        (_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value,) = _get_struct_2QiQBd().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.profile_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stub = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Stub()
        _x = val1
        start = end
        end += 51
        (_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2Q2Ii2B2IB3I().unpack(str[start:end])
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_last_stub = bool(val1.is_last_stub)
        self.stub.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_sign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapTrafficSign()
        _x = val1
        start = end
        end += 57
        (_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid,) = _get_struct_4Q3IQIB().unpack(str[start:end])
        val1.position_valid = bool(val1.position_valid)
        _v2 = val1.position_pt
        _x = _v2
        start = end
        end += 16
        (_x.longitude, _x.latitude,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.height,) = _get_struct_d().unpack(str[start:end])
        self.traffic_sign.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_connection = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapLaneConnection()
        _x = val1
        start = end
        end += 48
        (_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_2Q8I().unpack(str[start:end])
        self.lane_connection.append(val1)
      start = end
      end += 4
      (self.adas_meta.country_code,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_event = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficEvent()
        _x = val1
        start = end
        end += 36
        (_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type,) = _get_struct_2Q2iIQ().unpack(str[start:end])
        self.traffic_event.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.is_adasmap_valid, _x.m_adasmap_is_highway))
      length = len(self.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.segment:
        _x = val1
        buff.write(_get_struct_2QiQi2BI2B2I2B2I().pack(_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.profile_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.profile_point:
        _x = val1
        buff.write(_get_struct_2QiQBd().pack(_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value))
      length = len(self.stub)
      buff.write(_struct_I.pack(length))
      for val1 in self.stub:
        _x = val1
        buff.write(_get_struct_2Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.traffic_sign)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_sign:
        _x = val1
        buff.write(_get_struct_4Q3IQIB().pack(_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid))
        _v3 = val1.position_pt
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.longitude, _x.latitude))
        _x = val1.height
        buff.write(_get_struct_d().pack(_x))
      length = len(self.lane_connection)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_connection:
        _x = val1
        buff.write(_get_struct_2Q8I().pack(_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
      _x = self.adas_meta.country_code
      buff.write(_get_struct_I().pack(_x))
      length = len(self.traffic_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.traffic_event:
        _x = val1
        buff.write(_get_struct_2Q2iIQ().pack(_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.segment is None:
        self.segment = None
      if self.profile_point is None:
        self.profile_point = None
      if self.stub is None:
        self.stub = None
      if self.traffic_sign is None:
        self.traffic_sign = None
      if self.lane_connection is None:
        self.lane_connection = None
      if self.adas_meta is None:
        self.adas_meta = rospy_message_converter.msg.AdasMeta()
      if self.traffic_event is None:
        self.traffic_event = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.is_adasmap_valid, _x.m_adasmap_is_highway,) = _get_struct_BI().unpack(str[start:end])
      self.is_adasmap_valid = bool(self.is_adasmap_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapSegment()
        _x = val1
        start = end
        end += 58
        (_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2QiQi2BI2B2I2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.profile_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ProfilePoint()
        _x = val1
        start = end
        end += 37
        (_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value,) = _get_struct_2QiQBd().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.profile_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stub = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Stub()
        _x = val1
        start = end
        end += 51
        (_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2Q2Ii2B2IB3I().unpack(str[start:end])
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_last_stub = bool(val1.is_last_stub)
        self.stub.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_sign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapTrafficSign()
        _x = val1
        start = end
        end += 57
        (_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid,) = _get_struct_4Q3IQIB().unpack(str[start:end])
        val1.position_valid = bool(val1.position_valid)
        _v4 = val1.position_pt
        _x = _v4
        start = end
        end += 16
        (_x.longitude, _x.latitude,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.height,) = _get_struct_d().unpack(str[start:end])
        self.traffic_sign.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_connection = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapLaneConnection()
        _x = val1
        start = end
        end += 48
        (_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_2Q8I().unpack(str[start:end])
        self.lane_connection.append(val1)
      start = end
      end += 4
      (self.adas_meta.country_code,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traffic_event = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficEvent()
        _x = val1
        start = end
        end += 36
        (_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type,) = _get_struct_2Q2iIQ().unpack(str[start:end])
        self.traffic_event.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q2Ii2B2IB3I = None
def _get_struct_2Q2Ii2B2IB3I():
    global _struct_2Q2Ii2B2IB3I
    if _struct_2Q2Ii2B2IB3I is None:
        _struct_2Q2Ii2B2IB3I = struct.Struct("<2Q2Ii2B2IB3I")
    return _struct_2Q2Ii2B2IB3I
_struct_2Q2iIQ = None
def _get_struct_2Q2iIQ():
    global _struct_2Q2iIQ
    if _struct_2Q2iIQ is None:
        _struct_2Q2iIQ = struct.Struct("<2Q2iIQ")
    return _struct_2Q2iIQ
_struct_2Q8I = None
def _get_struct_2Q8I():
    global _struct_2Q8I
    if _struct_2Q8I is None:
        _struct_2Q8I = struct.Struct("<2Q8I")
    return _struct_2Q8I
_struct_2QiQBd = None
def _get_struct_2QiQBd():
    global _struct_2QiQBd
    if _struct_2QiQBd is None:
        _struct_2QiQBd = struct.Struct("<2QiQBd")
    return _struct_2QiQBd
_struct_2QiQi2BI2B2I2B2I = None
def _get_struct_2QiQi2BI2B2I2B2I():
    global _struct_2QiQi2BI2B2I2B2I
    if _struct_2QiQi2BI2B2I2B2I is None:
        _struct_2QiQi2BI2B2I2B2I = struct.Struct("<2QiQi2BI2B2I2B2I")
    return _struct_2QiQi2BI2B2I2B2I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_4Q3IQIB = None
def _get_struct_4Q3IQIB():
    global _struct_4Q3IQIB
    if _struct_4Q3IQIB is None:
        _struct_4Q3IQIB = struct.Struct("<4Q3IQIB")
    return _struct_4Q3IQIB
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d

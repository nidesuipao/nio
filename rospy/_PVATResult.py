# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PVATResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class PVATResult(genpy.Message):
  _md5sum = "ef5ff456803d5b3ce4b2e1338c6f6a57"
  _type = "rospy_message_converter/PVATResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 init_state
uint32 ins_state
int32 position_type
float64 latitude
float64 longitude
float64 height
float64 undulation
float64 velocity_north
float64 velocity_east
float64 velocity_up
float64 roll
float64 pitch
float64 azimuth
float64 bias_gyro_x
float64 bias_gyro_y
float64 bias_gyro_z
float64 bias_acc_x
float64 bias_acc_y
float64 bias_acc_z
float32 std_lat
float32 std_long
float32 std_height
float32 std_vel_north
float32 std_vel_east
float32 std_vel_up
float32 std_roll
float32 std_pitch
float32 std_azimuth
UTCTime utc_time
float64 itow_time
uint32 gps_ref_week
uint32 num_sat_track
uint32 num_sat_used
uint32 num_sat_dfrq
uint32 update_flag
uint32 propagate_time
int32 gdpr_status
float32 rsd_imu_bdy_x
float32 rsd_imu_bdy_y
float32 rsd_imu_bdy_z
uint32 dyna_cal_state
uint64 timestamp_ptp_ns
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/UTCTime
uint32 year
uint32 month
uint32 day
uint32 hour
uint32 min
uint32 sec
float32 msec
"""
  __slots__ = ['init_state','ins_state','position_type','latitude','longitude','height','undulation','velocity_north','velocity_east','velocity_up','roll','pitch','azimuth','bias_gyro_x','bias_gyro_y','bias_gyro_z','bias_acc_x','bias_acc_y','bias_acc_z','std_lat','std_long','std_height','std_vel_north','std_vel_east','std_vel_up','std_roll','std_pitch','std_azimuth','utc_time','itow_time','gps_ref_week','num_sat_track','num_sat_used','num_sat_dfrq','update_flag','propagate_time','gdpr_status','rsd_imu_bdy_x','rsd_imu_bdy_y','rsd_imu_bdy_z','dyna_cal_state','timestamp_ptp_ns','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['uint32','uint32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','rospy_message_converter/UTCTime','float64','uint32','uint32','uint32','uint32','uint32','uint32','int32','float32','float32','float32','uint32','uint64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       init_state,ins_state,position_type,latitude,longitude,height,undulation,velocity_north,velocity_east,velocity_up,roll,pitch,azimuth,bias_gyro_x,bias_gyro_y,bias_gyro_z,bias_acc_x,bias_acc_y,bias_acc_z,std_lat,std_long,std_height,std_vel_north,std_vel_east,std_vel_up,std_roll,std_pitch,std_azimuth,utc_time,itow_time,gps_ref_week,num_sat_track,num_sat_used,num_sat_dfrq,update_flag,propagate_time,gdpr_status,rsd_imu_bdy_x,rsd_imu_bdy_y,rsd_imu_bdy_z,dyna_cal_state,timestamp_ptp_ns,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PVATResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.init_state is None:
        self.init_state = 0
      if self.ins_state is None:
        self.ins_state = 0
      if self.position_type is None:
        self.position_type = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height is None:
        self.height = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.velocity_north is None:
        self.velocity_north = 0.
      if self.velocity_east is None:
        self.velocity_east = 0.
      if self.velocity_up is None:
        self.velocity_up = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.bias_gyro_x is None:
        self.bias_gyro_x = 0.
      if self.bias_gyro_y is None:
        self.bias_gyro_y = 0.
      if self.bias_gyro_z is None:
        self.bias_gyro_z = 0.
      if self.bias_acc_x is None:
        self.bias_acc_x = 0.
      if self.bias_acc_y is None:
        self.bias_acc_y = 0.
      if self.bias_acc_z is None:
        self.bias_acc_z = 0.
      if self.std_lat is None:
        self.std_lat = 0.
      if self.std_long is None:
        self.std_long = 0.
      if self.std_height is None:
        self.std_height = 0.
      if self.std_vel_north is None:
        self.std_vel_north = 0.
      if self.std_vel_east is None:
        self.std_vel_east = 0.
      if self.std_vel_up is None:
        self.std_vel_up = 0.
      if self.std_roll is None:
        self.std_roll = 0.
      if self.std_pitch is None:
        self.std_pitch = 0.
      if self.std_azimuth is None:
        self.std_azimuth = 0.
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      if self.itow_time is None:
        self.itow_time = 0.
      if self.gps_ref_week is None:
        self.gps_ref_week = 0
      if self.num_sat_track is None:
        self.num_sat_track = 0
      if self.num_sat_used is None:
        self.num_sat_used = 0
      if self.num_sat_dfrq is None:
        self.num_sat_dfrq = 0
      if self.update_flag is None:
        self.update_flag = 0
      if self.propagate_time is None:
        self.propagate_time = 0
      if self.gdpr_status is None:
        self.gdpr_status = 0
      if self.rsd_imu_bdy_x is None:
        self.rsd_imu_bdy_x = 0.
      if self.rsd_imu_bdy_y is None:
        self.rsd_imu_bdy_y = 0.
      if self.rsd_imu_bdy_z is None:
        self.rsd_imu_bdy_z = 0.
      if self.dyna_cal_state is None:
        self.dyna_cal_state = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.init_state = 0
      self.ins_state = 0
      self.position_type = 0
      self.latitude = 0.
      self.longitude = 0.
      self.height = 0.
      self.undulation = 0.
      self.velocity_north = 0.
      self.velocity_east = 0.
      self.velocity_up = 0.
      self.roll = 0.
      self.pitch = 0.
      self.azimuth = 0.
      self.bias_gyro_x = 0.
      self.bias_gyro_y = 0.
      self.bias_gyro_z = 0.
      self.bias_acc_x = 0.
      self.bias_acc_y = 0.
      self.bias_acc_z = 0.
      self.std_lat = 0.
      self.std_long = 0.
      self.std_height = 0.
      self.std_vel_north = 0.
      self.std_vel_east = 0.
      self.std_vel_up = 0.
      self.std_roll = 0.
      self.std_pitch = 0.
      self.std_azimuth = 0.
      self.utc_time = rospy_message_converter.msg.UTCTime()
      self.itow_time = 0.
      self.gps_ref_week = 0
      self.num_sat_track = 0
      self.num_sat_used = 0
      self.num_sat_dfrq = 0
      self.update_flag = 0
      self.propagate_time = 0
      self.gdpr_status = 0
      self.rsd_imu_bdy_x = 0.
      self.rsd_imu_bdy_y = 0.
      self.rsd_imu_bdy_z = 0.
      self.dyna_cal_state = 0
      self.timestamp_ptp_ns = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii16d9f6Ifd6Ii3fI2Q().pack(_x.init_state, _x.ins_state, _x.position_type, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.bias_gyro_x, _x.bias_gyro_y, _x.bias_gyro_z, _x.bias_acc_x, _x.bias_acc_y, _x.bias_acc_z, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_north, _x.std_vel_east, _x.std_vel_up, _x.std_roll, _x.std_pitch, _x.std_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.num_sat_track, _x.num_sat_used, _x.num_sat_dfrq, _x.update_flag, _x.propagate_time, _x.gdpr_status, _x.rsd_imu_bdy_x, _x.rsd_imu_bdy_y, _x.rsd_imu_bdy_z, _x.dyna_cal_state, _x.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      end = 0
      _x = self
      start = end
      end += 272
      (_x.init_state, _x.ins_state, _x.position_type, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.bias_gyro_x, _x.bias_gyro_y, _x.bias_gyro_z, _x.bias_acc_x, _x.bias_acc_y, _x.bias_acc_z, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_north, _x.std_vel_east, _x.std_vel_up, _x.std_roll, _x.std_pitch, _x.std_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.num_sat_track, _x.num_sat_used, _x.num_sat_dfrq, _x.update_flag, _x.propagate_time, _x.gdpr_status, _x.rsd_imu_bdy_x, _x.rsd_imu_bdy_y, _x.rsd_imu_bdy_z, _x.dyna_cal_state, _x.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_2Ii16d9f6Ifd6Ii3fI2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii16d9f6Ifd6Ii3fI2Q().pack(_x.init_state, _x.ins_state, _x.position_type, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.bias_gyro_x, _x.bias_gyro_y, _x.bias_gyro_z, _x.bias_acc_x, _x.bias_acc_y, _x.bias_acc_z, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_north, _x.std_vel_east, _x.std_vel_up, _x.std_roll, _x.std_pitch, _x.std_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.num_sat_track, _x.num_sat_used, _x.num_sat_dfrq, _x.update_flag, _x.propagate_time, _x.gdpr_status, _x.rsd_imu_bdy_x, _x.rsd_imu_bdy_y, _x.rsd_imu_bdy_z, _x.dyna_cal_state, _x.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      end = 0
      _x = self
      start = end
      end += 272
      (_x.init_state, _x.ins_state, _x.position_type, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.bias_gyro_x, _x.bias_gyro_y, _x.bias_gyro_z, _x.bias_acc_x, _x.bias_acc_y, _x.bias_acc_z, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_north, _x.std_vel_east, _x.std_vel_up, _x.std_roll, _x.std_pitch, _x.std_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.num_sat_track, _x.num_sat_used, _x.num_sat_dfrq, _x.update_flag, _x.propagate_time, _x.gdpr_status, _x.rsd_imu_bdy_x, _x.rsd_imu_bdy_y, _x.rsd_imu_bdy_z, _x.dyna_cal_state, _x.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_2Ii16d9f6Ifd6Ii3fI2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Ii16d9f6Ifd6Ii3fI2Q = None
def _get_struct_2Ii16d9f6Ifd6Ii3fI2Q():
    global _struct_2Ii16d9f6Ifd6Ii3fI2Q
    if _struct_2Ii16d9f6Ifd6Ii3fI2Q is None:
        _struct_2Ii16d9f6Ifd6Ii3fI2Q = struct.Struct("<2Ii16d9f6Ifd6Ii3fI2Q")
    return _struct_2Ii16d9f6Ifd6Ii3fI2Q
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

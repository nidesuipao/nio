# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadFc01.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadFc01(genpy.Message):
  _md5sum = "a556fa329b4739479e9b783289b54874"
  _type = "rospy_message_converter/RadFc01"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 acc_decel_stop_req
uint32 drv_off_req
float32 acc_max_jerk_accel
float32 acc_min_jerk_accel
uint32 acc_mode
uint32 acc_shutdown_req
float32 acc_tar_accel
uint32 vlc_func_req
"""
  __slots__ = ['acc_decel_stop_req','drv_off_req','acc_max_jerk_accel','acc_min_jerk_accel','acc_mode','acc_shutdown_req','acc_tar_accel','vlc_func_req']
  _slot_types = ['uint32','uint32','float32','float32','uint32','uint32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acc_decel_stop_req,drv_off_req,acc_max_jerk_accel,acc_min_jerk_accel,acc_mode,acc_shutdown_req,acc_tar_accel,vlc_func_req

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadFc01, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acc_decel_stop_req is None:
        self.acc_decel_stop_req = 0
      if self.drv_off_req is None:
        self.drv_off_req = 0
      if self.acc_max_jerk_accel is None:
        self.acc_max_jerk_accel = 0.
      if self.acc_min_jerk_accel is None:
        self.acc_min_jerk_accel = 0.
      if self.acc_mode is None:
        self.acc_mode = 0
      if self.acc_shutdown_req is None:
        self.acc_shutdown_req = 0
      if self.acc_tar_accel is None:
        self.acc_tar_accel = 0.
      if self.vlc_func_req is None:
        self.vlc_func_req = 0
    else:
      self.acc_decel_stop_req = 0
      self.drv_off_req = 0
      self.acc_max_jerk_accel = 0.
      self.acc_min_jerk_accel = 0.
      self.acc_mode = 0
      self.acc_shutdown_req = 0
      self.acc_tar_accel = 0.
      self.vlc_func_req = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2f2IfI().pack(_x.acc_decel_stop_req, _x.drv_off_req, _x.acc_max_jerk_accel, _x.acc_min_jerk_accel, _x.acc_mode, _x.acc_shutdown_req, _x.acc_tar_accel, _x.vlc_func_req))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.acc_decel_stop_req, _x.drv_off_req, _x.acc_max_jerk_accel, _x.acc_min_jerk_accel, _x.acc_mode, _x.acc_shutdown_req, _x.acc_tar_accel, _x.vlc_func_req,) = _get_struct_2I2f2IfI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2f2IfI().pack(_x.acc_decel_stop_req, _x.drv_off_req, _x.acc_max_jerk_accel, _x.acc_min_jerk_accel, _x.acc_mode, _x.acc_shutdown_req, _x.acc_tar_accel, _x.vlc_func_req))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.acc_decel_stop_req, _x.drv_off_req, _x.acc_max_jerk_accel, _x.acc_min_jerk_accel, _x.acc_mode, _x.acc_shutdown_req, _x.acc_tar_accel, _x.vlc_func_req,) = _get_struct_2I2f2IfI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2f2IfI = None
def _get_struct_2I2f2IfI():
    global _struct_2I2f2IfI
    if _struct_2I2f2IfI is None:
        _struct_2I2f2IfI = struct.Struct("<2I2f2IfI")
    return _struct_2I2f2IfI

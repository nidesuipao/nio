# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AdasMapSubPathSegments.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AdasMapSubPathSegments(genpy.Message):
  _md5sum = "4bf9ed81d4027b7c624d3c616e34c500"
  _type = "rospy_message_converter/AdasMapSubPathSegments"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 sub_path_idx
uint64 index
AdasMapSegment[] sub_path_segment

================================================================================
MSG: rospy_message_converter/AdasMapSegment
uint64 offset
uint64 index
uint64 path_idx
int32 road_class
uint64 seg_spd_lmt
int32 seg_spd_lmt_type
bool is_tunnel
bool is_bridge
uint32 form_of_way
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 relative_probability
bool is_divided_road
bool is_build_up_area
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir
"""
  __slots__ = ['sub_path_idx','index','sub_path_segment']
  _slot_types = ['uint64','uint64','rospy_message_converter/AdasMapSegment[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sub_path_idx,index,sub_path_segment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdasMapSubPathSegments, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sub_path_idx is None:
        self.sub_path_idx = 0
      if self.index is None:
        self.index = 0
      if self.sub_path_segment is None:
        self.sub_path_segment = []
    else:
      self.sub_path_idx = 0
      self.index = 0
      self.sub_path_segment = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Q().pack(_x.sub_path_idx, _x.index))
      length = len(self.sub_path_segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.sub_path_segment:
        _x = val1
        buff.write(_get_struct_3QiQi2BI2BI2B2I().pack(_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sub_path_segment is None:
        self.sub_path_segment = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.sub_path_idx, _x.index,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sub_path_segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapSegment()
        _x = val1
        start = end
        end += 62
        (_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3QiQi2BI2BI2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.sub_path_segment.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Q().pack(_x.sub_path_idx, _x.index))
      length = len(self.sub_path_segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.sub_path_segment:
        _x = val1
        buff.write(_get_struct_3QiQi2BI2BI2B2I().pack(_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sub_path_segment is None:
        self.sub_path_segment = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.sub_path_idx, _x.index,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sub_path_segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapSegment()
        _x = val1
        start = end
        end += 62
        (_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3QiQi2BI2BI2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.sub_path_segment.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3QiQi2BI2BI2B2I = None
def _get_struct_3QiQi2BI2BI2B2I():
    global _struct_3QiQi2BI2BI2B2I
    if _struct_3QiQi2BI2BI2B2I is None:
        _struct_3QiQi2BI2BI2B2I = struct.Struct("<3QiQi2BI2BI2B2I")
    return _struct_3QiQi2BI2BI2B2I

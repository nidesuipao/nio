# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LatCtrlIf.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LatCtrlIf(genpy.Message):
  _md5sum = "06bb76692a8645907964ce29045bdc74"
  _type = "rospy_message_converter/LatCtrlIf"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ACIReqVld
float32 ACIReqSAE
float32 ACISafLimAngDyn
uint32 ACISafLimAngRM
float32 ACISafLimAngDynOffs
uint32 ACISafLimRate
uint32 ACIRampRate
uint32 ACISafLimAngLM
uint32 ACISafLimMode
int32 CTIReqVal
float32 CTIReqSAE
int32 StrIFReq
uint32 HVIReq
int32 HVIReqVld
int32 ACITsuSup
int32 ACIOvrdThr
"""
  __slots__ = ['ACIReqVld','ACIReqSAE','ACISafLimAngDyn','ACISafLimAngRM','ACISafLimAngDynOffs','ACISafLimRate','ACIRampRate','ACISafLimAngLM','ACISafLimMode','CTIReqVal','CTIReqSAE','StrIFReq','HVIReq','HVIReqVld','ACITsuSup','ACIOvrdThr']
  _slot_types = ['int32','float32','float32','uint32','float32','uint32','uint32','uint32','uint32','int32','float32','int32','uint32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ACIReqVld,ACIReqSAE,ACISafLimAngDyn,ACISafLimAngRM,ACISafLimAngDynOffs,ACISafLimRate,ACIRampRate,ACISafLimAngLM,ACISafLimMode,CTIReqVal,CTIReqSAE,StrIFReq,HVIReq,HVIReqVld,ACITsuSup,ACIOvrdThr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LatCtrlIf, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ACIReqVld is None:
        self.ACIReqVld = 0
      if self.ACIReqSAE is None:
        self.ACIReqSAE = 0.
      if self.ACISafLimAngDyn is None:
        self.ACISafLimAngDyn = 0.
      if self.ACISafLimAngRM is None:
        self.ACISafLimAngRM = 0
      if self.ACISafLimAngDynOffs is None:
        self.ACISafLimAngDynOffs = 0.
      if self.ACISafLimRate is None:
        self.ACISafLimRate = 0
      if self.ACIRampRate is None:
        self.ACIRampRate = 0
      if self.ACISafLimAngLM is None:
        self.ACISafLimAngLM = 0
      if self.ACISafLimMode is None:
        self.ACISafLimMode = 0
      if self.CTIReqVal is None:
        self.CTIReqVal = 0
      if self.CTIReqSAE is None:
        self.CTIReqSAE = 0.
      if self.StrIFReq is None:
        self.StrIFReq = 0
      if self.HVIReq is None:
        self.HVIReq = 0
      if self.HVIReqVld is None:
        self.HVIReqVld = 0
      if self.ACITsuSup is None:
        self.ACITsuSup = 0
      if self.ACIOvrdThr is None:
        self.ACIOvrdThr = 0
    else:
      self.ACIReqVld = 0
      self.ACIReqSAE = 0.
      self.ACISafLimAngDyn = 0.
      self.ACISafLimAngRM = 0
      self.ACISafLimAngDynOffs = 0.
      self.ACISafLimRate = 0
      self.ACIRampRate = 0
      self.ACISafLimAngLM = 0
      self.ACISafLimMode = 0
      self.CTIReqVal = 0
      self.CTIReqSAE = 0.
      self.StrIFReq = 0
      self.HVIReq = 0
      self.HVIReqVld = 0
      self.ACITsuSup = 0
      self.ACIOvrdThr = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2fIf4IifiI3i().pack(_x.ACIReqVld, _x.ACIReqSAE, _x.ACISafLimAngDyn, _x.ACISafLimAngRM, _x.ACISafLimAngDynOffs, _x.ACISafLimRate, _x.ACIRampRate, _x.ACISafLimAngLM, _x.ACISafLimMode, _x.CTIReqVal, _x.CTIReqSAE, _x.StrIFReq, _x.HVIReq, _x.HVIReqVld, _x.ACITsuSup, _x.ACIOvrdThr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.ACIReqVld, _x.ACIReqSAE, _x.ACISafLimAngDyn, _x.ACISafLimAngRM, _x.ACISafLimAngDynOffs, _x.ACISafLimRate, _x.ACIRampRate, _x.ACISafLimAngLM, _x.ACISafLimMode, _x.CTIReqVal, _x.CTIReqSAE, _x.StrIFReq, _x.HVIReq, _x.HVIReqVld, _x.ACITsuSup, _x.ACIOvrdThr,) = _get_struct_i2fIf4IifiI3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2fIf4IifiI3i().pack(_x.ACIReqVld, _x.ACIReqSAE, _x.ACISafLimAngDyn, _x.ACISafLimAngRM, _x.ACISafLimAngDynOffs, _x.ACISafLimRate, _x.ACIRampRate, _x.ACISafLimAngLM, _x.ACISafLimMode, _x.CTIReqVal, _x.CTIReqSAE, _x.StrIFReq, _x.HVIReq, _x.HVIReqVld, _x.ACITsuSup, _x.ACIOvrdThr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.ACIReqVld, _x.ACIReqSAE, _x.ACISafLimAngDyn, _x.ACISafLimAngRM, _x.ACISafLimAngDynOffs, _x.ACISafLimRate, _x.ACIRampRate, _x.ACISafLimAngLM, _x.ACISafLimMode, _x.CTIReqVal, _x.CTIReqSAE, _x.StrIFReq, _x.HVIReq, _x.HVIReqVld, _x.ACITsuSup, _x.ACIOvrdThr,) = _get_struct_i2fIf4IifiI3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2fIf4IifiI3i = None
def _get_struct_i2fIf4IifiI3i():
    global _struct_i2fIf4IifiI3i
    if _struct_i2fIf4IifiI3i is None:
        _struct_i2fIf4IifiI3i = struct.Struct("<i2fIf4IifiI3i")
    return _struct_i2fIf4IifiI3i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CalVehInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class CalVehInfo(genpy.Message):
  _md5sum = "46f00c95898b2904e34bb213e9288cf8"
  _type = "rospy_message_converter/CalVehInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 veh_calib_height
float32 veh_width
float32 veh_fwheel2head
float32 veh_rwheel2tail
float32 veh_wheel_base
CameraLocation camera_location
LidarLocation lidar_location

================================================================================
MSG: rospy_message_converter/CameraLocation
SensorLocation front_wide
SensorLocation front_narrow
SensorLocation front_right
SensorLocation front_left
SensorLocation rear_right
SensorLocation rear_left
SensorLocation rear_narrow
SensorLocation svc_front
SensorLocation svc_rear
SensorLocation svc_left
SensorLocation svc_right

================================================================================
MSG: rospy_message_converter/SensorLocation
float32[] angle
float32[] distance

================================================================================
MSG: rospy_message_converter/LidarLocation
SensorLocation lidar_front
"""
  __slots__ = ['veh_calib_height','veh_width','veh_fwheel2head','veh_rwheel2tail','veh_wheel_base','camera_location','lidar_location']
  _slot_types = ['float32','float32','float32','float32','float32','rospy_message_converter/CameraLocation','rospy_message_converter/LidarLocation']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       veh_calib_height,veh_width,veh_fwheel2head,veh_rwheel2tail,veh_wheel_base,camera_location,lidar_location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalVehInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.veh_calib_height is None:
        self.veh_calib_height = 0.
      if self.veh_width is None:
        self.veh_width = 0.
      if self.veh_fwheel2head is None:
        self.veh_fwheel2head = 0.
      if self.veh_rwheel2tail is None:
        self.veh_rwheel2tail = 0.
      if self.veh_wheel_base is None:
        self.veh_wheel_base = 0.
      if self.camera_location is None:
        self.camera_location = rospy_message_converter.msg.CameraLocation()
      if self.lidar_location is None:
        self.lidar_location = rospy_message_converter.msg.LidarLocation()
    else:
      self.veh_calib_height = 0.
      self.veh_width = 0.
      self.veh_fwheel2head = 0.
      self.veh_rwheel2tail = 0.
      self.veh_wheel_base = 0.
      self.camera_location = rospy_message_converter.msg.CameraLocation()
      self.lidar_location = rospy_message_converter.msg.LidarLocation()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.veh_calib_height, _x.veh_width, _x.veh_fwheel2head, _x.veh_rwheel2tail, _x.veh_wheel_base))
      length = len(self.camera_location.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_wide.angle))
      length = len(self.camera_location.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_wide.distance))
      length = len(self.camera_location.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_narrow.angle))
      length = len(self.camera_location.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_narrow.distance))
      length = len(self.camera_location.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_right.angle))
      length = len(self.camera_location.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_right.distance))
      length = len(self.camera_location.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_left.angle))
      length = len(self.camera_location.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.front_left.distance))
      length = len(self.camera_location.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.rear_right.angle))
      length = len(self.camera_location.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.rear_right.distance))
      length = len(self.camera_location.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.rear_left.angle))
      length = len(self.camera_location.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.rear_left.distance))
      length = len(self.camera_location.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.rear_narrow.angle))
      length = len(self.camera_location.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.rear_narrow.distance))
      length = len(self.camera_location.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_front.angle))
      length = len(self.camera_location.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_front.distance))
      length = len(self.camera_location.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_rear.angle))
      length = len(self.camera_location.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_rear.distance))
      length = len(self.camera_location.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_left.angle))
      length = len(self.camera_location.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_left.distance))
      length = len(self.camera_location.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_right.angle))
      length = len(self.camera_location.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.camera_location.svc_right.distance))
      length = len(self.lidar_location.lidar_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lidar_location.lidar_front.angle))
      length = len(self.lidar_location.lidar_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lidar_location.lidar_front.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.camera_location is None:
        self.camera_location = rospy_message_converter.msg.CameraLocation()
      if self.lidar_location is None:
        self.lidar_location = rospy_message_converter.msg.LidarLocation()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.veh_calib_height, _x.veh_width, _x.veh_fwheel2head, _x.veh_rwheel2tail, _x.veh_wheel_base,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_wide.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_wide.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_front.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_rear.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_rear.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lidar_location.lidar_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lidar_location.lidar_front.distance = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.veh_calib_height, _x.veh_width, _x.veh_fwheel2head, _x.veh_rwheel2tail, _x.veh_wheel_base))
      length = len(self.camera_location.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_wide.angle.tostring())
      length = len(self.camera_location.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_wide.distance.tostring())
      length = len(self.camera_location.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_narrow.angle.tostring())
      length = len(self.camera_location.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_narrow.distance.tostring())
      length = len(self.camera_location.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_right.angle.tostring())
      length = len(self.camera_location.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_right.distance.tostring())
      length = len(self.camera_location.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_left.angle.tostring())
      length = len(self.camera_location.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.front_left.distance.tostring())
      length = len(self.camera_location.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.rear_right.angle.tostring())
      length = len(self.camera_location.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.rear_right.distance.tostring())
      length = len(self.camera_location.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.rear_left.angle.tostring())
      length = len(self.camera_location.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.rear_left.distance.tostring())
      length = len(self.camera_location.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.rear_narrow.angle.tostring())
      length = len(self.camera_location.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.rear_narrow.distance.tostring())
      length = len(self.camera_location.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_front.angle.tostring())
      length = len(self.camera_location.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_front.distance.tostring())
      length = len(self.camera_location.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_rear.angle.tostring())
      length = len(self.camera_location.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_rear.distance.tostring())
      length = len(self.camera_location.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_left.angle.tostring())
      length = len(self.camera_location.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_left.distance.tostring())
      length = len(self.camera_location.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_right.angle.tostring())
      length = len(self.camera_location.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.camera_location.svc_right.distance.tostring())
      length = len(self.lidar_location.lidar_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lidar_location.lidar_front.angle.tostring())
      length = len(self.lidar_location.lidar_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lidar_location.lidar_front.distance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.camera_location is None:
        self.camera_location = rospy_message_converter.msg.CameraLocation()
      if self.lidar_location is None:
        self.lidar_location = rospy_message_converter.msg.LidarLocation()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.veh_calib_height, _x.veh_width, _x.veh_fwheel2head, _x.veh_rwheel2tail, _x.veh_wheel_base,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_wide.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_wide.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.front_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.rear_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_rear.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_rear.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.camera_location.svc_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lidar_location.lidar_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lidar_location.lidar_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f

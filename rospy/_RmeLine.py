# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RmeLine.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RmeLine(genpy.Message):
  _md5sum = "5a73098a2b054fe9627afee9b4fc4cac"
  _type = "rospy_message_converter/RmeLine"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 pt_conf
float32 c0
float32 c1
float32 c2
float32 c3
float32 lrange_start
float32 lrange_end
float32 lm_width
int32 line_color
int32 line_type
int32 line_src
"""
  __slots__ = ['pt_conf','c0','c1','c2','c3','lrange_start','lrange_end','lm_width','line_color','line_type','line_src']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pt_conf,c0,c1,c2,c3,lrange_start,lrange_end,lm_width,line_color,line_type,line_src

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RmeLine, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pt_conf is None:
        self.pt_conf = 0.
      if self.c0 is None:
        self.c0 = 0.
      if self.c1 is None:
        self.c1 = 0.
      if self.c2 is None:
        self.c2 = 0.
      if self.c3 is None:
        self.c3 = 0.
      if self.lrange_start is None:
        self.lrange_start = 0.
      if self.lrange_end is None:
        self.lrange_end = 0.
      if self.lm_width is None:
        self.lm_width = 0.
      if self.line_color is None:
        self.line_color = 0
      if self.line_type is None:
        self.line_type = 0
      if self.line_src is None:
        self.line_src = 0
    else:
      self.pt_conf = 0.
      self.c0 = 0.
      self.c1 = 0.
      self.c2 = 0.
      self.c3 = 0.
      self.lrange_start = 0.
      self.lrange_end = 0.
      self.lm_width = 0.
      self.line_color = 0
      self.line_type = 0
      self.line_src = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i().pack(_x.pt_conf, _x.c0, _x.c1, _x.c2, _x.c3, _x.lrange_start, _x.lrange_end, _x.lm_width, _x.line_color, _x.line_type, _x.line_src))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.pt_conf, _x.c0, _x.c1, _x.c2, _x.c3, _x.lrange_start, _x.lrange_end, _x.lm_width, _x.line_color, _x.line_type, _x.line_src,) = _get_struct_8f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i().pack(_x.pt_conf, _x.c0, _x.c1, _x.c2, _x.c3, _x.lrange_start, _x.lrange_end, _x.lm_width, _x.line_color, _x.line_type, _x.line_src))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.pt_conf, _x.c0, _x.c1, _x.c2, _x.c3, _x.lrange_start, _x.lrange_end, _x.lm_width, _x.line_color, _x.line_type, _x.line_src,) = _get_struct_8f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f3i = None
def _get_struct_8f3i():
    global _struct_8f3i
    if _struct_8f3i is None:
        _struct_8f3i = struct.Struct("<8f3i")
    return _struct_8f3i

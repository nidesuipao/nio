# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LatCtrlOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class LatCtrlOut(genpy.Message):
  _md5sum = "fb1ac5dce8ad85ed0ea2b7febbc199ac"
  _type = "rospy_message_converter/LatCtrlOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ExtReqCAMFC
int32 LeLineTyp
int32 RiLineTyp
int32 LeTrackingSts
int32 RiTrackingSts
int32 LaneAssiTyp
int32 LkaSnsvty
float32 AbsltPinionAgReq
int32 EPSReqTyp
int32 LkaLnAsstSts
int32 LkaHODWarnSeq
bool LatCtrlActv
int32 EPSACITsuSup
int32 VMC1ACITsuSup
int32 LatCtrlTarLe
int32 LatCtrlTarRi
ALCSOut AlcsInfo

================================================================================
MSG: rospy_message_converter/ALCSOut
uint32 DA_LaneChgSupReason
uint32 AlcManeuverSts
uint32 DA_ALCSsts
uint32 ShowSetDA_ALCS
"""
  __slots__ = ['ExtReqCAMFC','LeLineTyp','RiLineTyp','LeTrackingSts','RiTrackingSts','LaneAssiTyp','LkaSnsvty','AbsltPinionAgReq','EPSReqTyp','LkaLnAsstSts','LkaHODWarnSeq','LatCtrlActv','EPSACITsuSup','VMC1ACITsuSup','LatCtrlTarLe','LatCtrlTarRi','AlcsInfo']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','float32','int32','int32','int32','bool','int32','int32','int32','int32','rospy_message_converter/ALCSOut']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ExtReqCAMFC,LeLineTyp,RiLineTyp,LeTrackingSts,RiTrackingSts,LaneAssiTyp,LkaSnsvty,AbsltPinionAgReq,EPSReqTyp,LkaLnAsstSts,LkaHODWarnSeq,LatCtrlActv,EPSACITsuSup,VMC1ACITsuSup,LatCtrlTarLe,LatCtrlTarRi,AlcsInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LatCtrlOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ExtReqCAMFC is None:
        self.ExtReqCAMFC = 0
      if self.LeLineTyp is None:
        self.LeLineTyp = 0
      if self.RiLineTyp is None:
        self.RiLineTyp = 0
      if self.LeTrackingSts is None:
        self.LeTrackingSts = 0
      if self.RiTrackingSts is None:
        self.RiTrackingSts = 0
      if self.LaneAssiTyp is None:
        self.LaneAssiTyp = 0
      if self.LkaSnsvty is None:
        self.LkaSnsvty = 0
      if self.AbsltPinionAgReq is None:
        self.AbsltPinionAgReq = 0.
      if self.EPSReqTyp is None:
        self.EPSReqTyp = 0
      if self.LkaLnAsstSts is None:
        self.LkaLnAsstSts = 0
      if self.LkaHODWarnSeq is None:
        self.LkaHODWarnSeq = 0
      if self.LatCtrlActv is None:
        self.LatCtrlActv = False
      if self.EPSACITsuSup is None:
        self.EPSACITsuSup = 0
      if self.VMC1ACITsuSup is None:
        self.VMC1ACITsuSup = 0
      if self.LatCtrlTarLe is None:
        self.LatCtrlTarLe = 0
      if self.LatCtrlTarRi is None:
        self.LatCtrlTarRi = 0
      if self.AlcsInfo is None:
        self.AlcsInfo = rospy_message_converter.msg.ALCSOut()
    else:
      self.ExtReqCAMFC = 0
      self.LeLineTyp = 0
      self.RiLineTyp = 0
      self.LeTrackingSts = 0
      self.RiTrackingSts = 0
      self.LaneAssiTyp = 0
      self.LkaSnsvty = 0
      self.AbsltPinionAgReq = 0.
      self.EPSReqTyp = 0
      self.LkaLnAsstSts = 0
      self.LkaHODWarnSeq = 0
      self.LatCtrlActv = False
      self.EPSACITsuSup = 0
      self.VMC1ACITsuSup = 0
      self.LatCtrlTarLe = 0
      self.LatCtrlTarRi = 0
      self.AlcsInfo = rospy_message_converter.msg.ALCSOut()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7if3iB4i4I().pack(_x.ExtReqCAMFC, _x.LeLineTyp, _x.RiLineTyp, _x.LeTrackingSts, _x.RiTrackingSts, _x.LaneAssiTyp, _x.LkaSnsvty, _x.AbsltPinionAgReq, _x.EPSReqTyp, _x.LkaLnAsstSts, _x.LkaHODWarnSeq, _x.LatCtrlActv, _x.EPSACITsuSup, _x.VMC1ACITsuSup, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.AlcsInfo.DA_LaneChgSupReason, _x.AlcsInfo.AlcManeuverSts, _x.AlcsInfo.DA_ALCSsts, _x.AlcsInfo.ShowSetDA_ALCS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.AlcsInfo is None:
        self.AlcsInfo = rospy_message_converter.msg.ALCSOut()
      end = 0
      _x = self
      start = end
      end += 77
      (_x.ExtReqCAMFC, _x.LeLineTyp, _x.RiLineTyp, _x.LeTrackingSts, _x.RiTrackingSts, _x.LaneAssiTyp, _x.LkaSnsvty, _x.AbsltPinionAgReq, _x.EPSReqTyp, _x.LkaLnAsstSts, _x.LkaHODWarnSeq, _x.LatCtrlActv, _x.EPSACITsuSup, _x.VMC1ACITsuSup, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.AlcsInfo.DA_LaneChgSupReason, _x.AlcsInfo.AlcManeuverSts, _x.AlcsInfo.DA_ALCSsts, _x.AlcsInfo.ShowSetDA_ALCS,) = _get_struct_7if3iB4i4I().unpack(str[start:end])
      self.LatCtrlActv = bool(self.LatCtrlActv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7if3iB4i4I().pack(_x.ExtReqCAMFC, _x.LeLineTyp, _x.RiLineTyp, _x.LeTrackingSts, _x.RiTrackingSts, _x.LaneAssiTyp, _x.LkaSnsvty, _x.AbsltPinionAgReq, _x.EPSReqTyp, _x.LkaLnAsstSts, _x.LkaHODWarnSeq, _x.LatCtrlActv, _x.EPSACITsuSup, _x.VMC1ACITsuSup, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.AlcsInfo.DA_LaneChgSupReason, _x.AlcsInfo.AlcManeuverSts, _x.AlcsInfo.DA_ALCSsts, _x.AlcsInfo.ShowSetDA_ALCS))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.AlcsInfo is None:
        self.AlcsInfo = rospy_message_converter.msg.ALCSOut()
      end = 0
      _x = self
      start = end
      end += 77
      (_x.ExtReqCAMFC, _x.LeLineTyp, _x.RiLineTyp, _x.LeTrackingSts, _x.RiTrackingSts, _x.LaneAssiTyp, _x.LkaSnsvty, _x.AbsltPinionAgReq, _x.EPSReqTyp, _x.LkaLnAsstSts, _x.LkaHODWarnSeq, _x.LatCtrlActv, _x.EPSACITsuSup, _x.VMC1ACITsuSup, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.AlcsInfo.DA_LaneChgSupReason, _x.AlcsInfo.AlcManeuverSts, _x.AlcsInfo.DA_ALCSsts, _x.AlcsInfo.ShowSetDA_ALCS,) = _get_struct_7if3iB4i4I().unpack(str[start:end])
      self.LatCtrlActv = bool(self.LatCtrlActv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7if3iB4i4I = None
def _get_struct_7if3iB4i4I():
    global _struct_7if3iB4i4I
    if _struct_7if3iB4i4I is None:
        _struct_7if3iB4i4I = struct.Struct("<7if3iB4i4I")
    return _struct_7if3iB4i4I

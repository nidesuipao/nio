# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdTrafficLight.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdTrafficLight(genpy.Message):
  _md5sum = "29b37ec3491aa52178da99b724e3b9b7"
  _type = "rospy_message_converter/HdTrafficLight"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 id
MapPolygon surface
float64 heading
int32 traffic_light_type
uint64[] lane_id
int32 box_type
MapPoint center

================================================================================
MSG: rospy_message_converter/MapPolygon
float64[] x
float64[] y
float64[] z

================================================================================
MSG: rospy_message_converter/MapPoint
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','surface','heading','traffic_light_type','lane_id','box_type','center']
  _slot_types = ['uint64','rospy_message_converter/MapPolygon','float64','int32','uint64[]','int32','rospy_message_converter/MapPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,surface,heading,traffic_light_type,lane_id,box_type,center

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdTrafficLight, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.surface is None:
        self.surface = rospy_message_converter.msg.MapPolygon()
      if self.heading is None:
        self.heading = 0.
      if self.traffic_light_type is None:
        self.traffic_light_type = 0
      if self.lane_id is None:
        self.lane_id = []
      if self.box_type is None:
        self.box_type = 0
      if self.center is None:
        self.center = rospy_message_converter.msg.MapPoint()
    else:
      self.id = 0
      self.surface = rospy_message_converter.msg.MapPolygon()
      self.heading = 0.
      self.traffic_light_type = 0
      self.lane_id = []
      self.box_type = 0
      self.center = rospy_message_converter.msg.MapPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.surface.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.surface.x))
      length = len(self.surface.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.surface.y))
      length = len(self.surface.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.surface.z))
      _x = self
      buff.write(_get_struct_di().pack(_x.heading, _x.traffic_light_type))
      length = len(self.lane_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.lane_id))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.box_type, _x.center.x, _x.center.y, _x.center.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.surface is None:
        self.surface = rospy_message_converter.msg.MapPolygon()
      if self.center is None:
        self.center = rospy_message_converter.msg.MapPoint()
      end = 0
      start = end
      end += 8
      (self.id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.z = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.heading, _x.traffic_light_type,) = _get_struct_di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lane_id = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.box_type, _x.center.x, _x.center.y, _x.center.z,) = _get_struct_i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.surface.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.surface.x.tostring())
      length = len(self.surface.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.surface.y.tostring())
      length = len(self.surface.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.surface.z.tostring())
      _x = self
      buff.write(_get_struct_di().pack(_x.heading, _x.traffic_light_type))
      length = len(self.lane_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.lane_id.tostring())
      _x = self
      buff.write(_get_struct_i3d().pack(_x.box_type, _x.center.x, _x.center.y, _x.center.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.surface is None:
        self.surface = rospy_message_converter.msg.MapPolygon()
      if self.center is None:
        self.center = rospy_message_converter.msg.MapPoint()
      end = 0
      start = end
      end += 8
      (self.id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.surface.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.heading, _x.traffic_light_type,) = _get_struct_di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lane_id = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 28
      (_x.box_type, _x.center.x, _x.center.y, _x.center.z,) = _get_struct_i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_di = None
def _get_struct_di():
    global _struct_di
    if _struct_di is None:
        _struct_di = struct.Struct("<di")
    return _struct_di
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d

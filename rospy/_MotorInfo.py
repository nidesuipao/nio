# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/MotorInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorInfo(genpy.Message):
  _md5sum = "93d5587e2761655b82fdfd964c797fe8"
  _type = "rospy_message_converter/MotorInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 IntdMotTqVld
float32 IntdMotTq
int32 ActMotTqVld
float32 ActMotTq
int32 MotSpdVld
float32 MotSpd
uint32 SpdLimForFlt
int32 DampSts
int32 FailrSts
int32 HeatCap
int32 MotHoldSts
uint64[] timestamp_ptp_ns
"""
  __slots__ = ['IntdMotTqVld','IntdMotTq','ActMotTqVld','ActMotTq','MotSpdVld','MotSpd','SpdLimForFlt','DampSts','FailrSts','HeatCap','MotHoldSts','timestamp_ptp_ns']
  _slot_types = ['int32','float32','int32','float32','int32','float32','uint32','int32','int32','int32','int32','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       IntdMotTqVld,IntdMotTq,ActMotTqVld,ActMotTq,MotSpdVld,MotSpd,SpdLimForFlt,DampSts,FailrSts,HeatCap,MotHoldSts,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.IntdMotTqVld is None:
        self.IntdMotTqVld = 0
      if self.IntdMotTq is None:
        self.IntdMotTq = 0.
      if self.ActMotTqVld is None:
        self.ActMotTqVld = 0
      if self.ActMotTq is None:
        self.ActMotTq = 0.
      if self.MotSpdVld is None:
        self.MotSpdVld = 0
      if self.MotSpd is None:
        self.MotSpd = 0.
      if self.SpdLimForFlt is None:
        self.SpdLimForFlt = 0
      if self.DampSts is None:
        self.DampSts = 0
      if self.FailrSts is None:
        self.FailrSts = 0
      if self.HeatCap is None:
        self.HeatCap = 0
      if self.MotHoldSts is None:
        self.MotHoldSts = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = []
    else:
      self.IntdMotTqVld = 0
      self.IntdMotTq = 0.
      self.ActMotTqVld = 0
      self.ActMotTq = 0.
      self.MotSpdVld = 0
      self.MotSpd = 0.
      self.SpdLimForFlt = 0
      self.DampSts = 0
      self.FailrSts = 0
      self.HeatCap = 0
      self.MotHoldSts = 0
      self.timestamp_ptp_ns = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ifififI4i().pack(_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts,) = _get_struct_ifififI4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ifififI4i().pack(_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.timestamp_ptp_ns.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts,) = _get_struct_ifififI4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ifififI4i = None
def _get_struct_ifififI4i():
    global _struct_ifififI4i
    if _struct_ifififI4i is None:
        _struct_ifififI4i = struct.Struct("<ifififI4i")
    return _struct_ifififI4i

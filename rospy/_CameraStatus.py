# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CameraStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraStatus(genpy.Message):
  _md5sum = "4f0637dab37fbb790659968b29a99f13"
  _type = "rospy_message_converter/CameraStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 front120_Status
int32 front30_Status
int32 rear_Status
int32 dms_Status
int32 svc_front_Status
int32 svc_rear_Status
int32 svc_left_Status
int32 svc_right_Status
int32 side_fl_Status
int32 side_fr_Status
int32 side_rl_Status
int32 side_rr_Status
int32 front120_sharing_Status
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['front120_Status','front30_Status','rear_Status','dms_Status','svc_front_Status','svc_rear_Status','svc_left_Status','svc_right_Status','side_fl_Status','side_fr_Status','side_rl_Status','side_rr_Status','front120_sharing_Status','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       front120_Status,front30_Status,rear_Status,dms_Status,svc_front_Status,svc_rear_Status,svc_left_Status,svc_right_Status,side_fl_Status,side_fr_Status,side_rl_Status,side_rr_Status,front120_sharing_Status,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.front120_Status is None:
        self.front120_Status = 0
      if self.front30_Status is None:
        self.front30_Status = 0
      if self.rear_Status is None:
        self.rear_Status = 0
      if self.dms_Status is None:
        self.dms_Status = 0
      if self.svc_front_Status is None:
        self.svc_front_Status = 0
      if self.svc_rear_Status is None:
        self.svc_rear_Status = 0
      if self.svc_left_Status is None:
        self.svc_left_Status = 0
      if self.svc_right_Status is None:
        self.svc_right_Status = 0
      if self.side_fl_Status is None:
        self.side_fl_Status = 0
      if self.side_fr_Status is None:
        self.side_fr_Status = 0
      if self.side_rl_Status is None:
        self.side_rl_Status = 0
      if self.side_rr_Status is None:
        self.side_rr_Status = 0
      if self.front120_sharing_Status is None:
        self.front120_sharing_Status = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.front120_Status = 0
      self.front30_Status = 0
      self.rear_Status = 0
      self.dms_Status = 0
      self.svc_front_Status = 0
      self.svc_rear_Status = 0
      self.svc_left_Status = 0
      self.svc_right_Status = 0
      self.side_fl_Status = 0
      self.side_fr_Status = 0
      self.side_rl_Status = 0
      self.side_rr_Status = 0
      self.front120_sharing_Status = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13iQ().pack(_x.front120_Status, _x.front30_Status, _x.rear_Status, _x.dms_Status, _x.svc_front_Status, _x.svc_rear_Status, _x.svc_left_Status, _x.svc_right_Status, _x.side_fl_Status, _x.side_fr_Status, _x.side_rl_Status, _x.side_rr_Status, _x.front120_sharing_Status, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.front120_Status, _x.front30_Status, _x.rear_Status, _x.dms_Status, _x.svc_front_Status, _x.svc_rear_Status, _x.svc_left_Status, _x.svc_right_Status, _x.side_fl_Status, _x.side_fr_Status, _x.side_rl_Status, _x.side_rr_Status, _x.front120_sharing_Status, _x.publish_ptp_ts,) = _get_struct_13iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13iQ().pack(_x.front120_Status, _x.front30_Status, _x.rear_Status, _x.dms_Status, _x.svc_front_Status, _x.svc_rear_Status, _x.svc_left_Status, _x.svc_right_Status, _x.side_fl_Status, _x.side_fr_Status, _x.side_rl_Status, _x.side_rr_Status, _x.front120_sharing_Status, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.front120_Status, _x.front30_Status, _x.rear_Status, _x.dms_Status, _x.svc_front_Status, _x.svc_rear_Status, _x.svc_left_Status, _x.svc_right_Status, _x.side_fl_Status, _x.side_fr_Status, _x.side_rl_Status, _x.side_rr_Status, _x.front120_sharing_Status, _x.publish_ptp_ts,) = _get_struct_13iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13iQ = None
def _get_struct_13iQ():
    global _struct_13iQ
    if _struct_13iQ is None:
        _struct_13iQ = struct.Struct("<13iQ")
    return _struct_13iQ
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

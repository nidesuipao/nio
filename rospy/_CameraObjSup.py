# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CameraObjSup.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraObjSup(genpy.Message):
  _md5sum = "67c5025f5f1968d1246fb48daa1c92d0"
  _type = "rospy_message_converter/CameraObjSup"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 mature_to_coast_lon_dst
float32 start_dx
uint32 age_frame
uint32 age_second
uint32 color
bool is_very_close
float32 ttc_inverse
bool is_blocked_parts
bool is_blocked_left
bool is_blocked_right
int32 hb_status
float32 cut_angle
float32 cut_distance
int32 measuring_status
"""
  __slots__ = ['mature_to_coast_lon_dst','start_dx','age_frame','age_second','color','is_very_close','ttc_inverse','is_blocked_parts','is_blocked_left','is_blocked_right','hb_status','cut_angle','cut_distance','measuring_status']
  _slot_types = ['float32','float32','uint32','uint32','uint32','bool','float32','bool','bool','bool','int32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mature_to_coast_lon_dst,start_dx,age_frame,age_second,color,is_very_close,ttc_inverse,is_blocked_parts,is_blocked_left,is_blocked_right,hb_status,cut_angle,cut_distance,measuring_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraObjSup, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mature_to_coast_lon_dst is None:
        self.mature_to_coast_lon_dst = 0.
      if self.start_dx is None:
        self.start_dx = 0.
      if self.age_frame is None:
        self.age_frame = 0
      if self.age_second is None:
        self.age_second = 0
      if self.color is None:
        self.color = 0
      if self.is_very_close is None:
        self.is_very_close = False
      if self.ttc_inverse is None:
        self.ttc_inverse = 0.
      if self.is_blocked_parts is None:
        self.is_blocked_parts = False
      if self.is_blocked_left is None:
        self.is_blocked_left = False
      if self.is_blocked_right is None:
        self.is_blocked_right = False
      if self.hb_status is None:
        self.hb_status = 0
      if self.cut_angle is None:
        self.cut_angle = 0.
      if self.cut_distance is None:
        self.cut_distance = 0.
      if self.measuring_status is None:
        self.measuring_status = 0
    else:
      self.mature_to_coast_lon_dst = 0.
      self.start_dx = 0.
      self.age_frame = 0
      self.age_second = 0
      self.color = 0
      self.is_very_close = False
      self.ttc_inverse = 0.
      self.is_blocked_parts = False
      self.is_blocked_left = False
      self.is_blocked_right = False
      self.hb_status = 0
      self.cut_angle = 0.
      self.cut_distance = 0.
      self.measuring_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f3IBf3Bi2fi().pack(_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status,) = _get_struct_2f3IBf3Bi2fi().unpack(str[start:end])
      self.is_very_close = bool(self.is_very_close)
      self.is_blocked_parts = bool(self.is_blocked_parts)
      self.is_blocked_left = bool(self.is_blocked_left)
      self.is_blocked_right = bool(self.is_blocked_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f3IBf3Bi2fi().pack(_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status,) = _get_struct_2f3IBf3Bi2fi().unpack(str[start:end])
      self.is_very_close = bool(self.is_very_close)
      self.is_blocked_parts = bool(self.is_blocked_parts)
      self.is_blocked_left = bool(self.is_blocked_left)
      self.is_blocked_right = bool(self.is_blocked_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f3IBf3Bi2fi = None
def _get_struct_2f3IBf3Bi2fi():
    global _struct_2f3IBf3Bi2fi
    if _struct_2f3IBf3Bi2fi is None:
        _struct_2f3IBf3Bi2fi = struct.Struct("<2f3IBf3Bi2fi")
    return _struct_2f3IBf3Bi2fi

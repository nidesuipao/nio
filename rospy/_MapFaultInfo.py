# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/MapFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MapFaultInfo(genpy.Message):
  _md5sum = "9afcc852114430813657535d92c1167b"
  _type = "rospy_message_converter/MapFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool APP_HDMAP_SEARCH_ERROR
bool APP_HDMAP_PARSE_ERROR
bool APP_HDMAP_READFILE_ERROR
bool APP_HDMAP_DOWNLOAD_ERROR
bool APP_RTK_HDMAP_MATCH_ERROR
"""
  __slots__ = ['APP_HDMAP_SEARCH_ERROR','APP_HDMAP_PARSE_ERROR','APP_HDMAP_READFILE_ERROR','APP_HDMAP_DOWNLOAD_ERROR','APP_RTK_HDMAP_MATCH_ERROR']
  _slot_types = ['bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       APP_HDMAP_SEARCH_ERROR,APP_HDMAP_PARSE_ERROR,APP_HDMAP_READFILE_ERROR,APP_HDMAP_DOWNLOAD_ERROR,APP_RTK_HDMAP_MATCH_ERROR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.APP_HDMAP_SEARCH_ERROR is None:
        self.APP_HDMAP_SEARCH_ERROR = False
      if self.APP_HDMAP_PARSE_ERROR is None:
        self.APP_HDMAP_PARSE_ERROR = False
      if self.APP_HDMAP_READFILE_ERROR is None:
        self.APP_HDMAP_READFILE_ERROR = False
      if self.APP_HDMAP_DOWNLOAD_ERROR is None:
        self.APP_HDMAP_DOWNLOAD_ERROR = False
      if self.APP_RTK_HDMAP_MATCH_ERROR is None:
        self.APP_RTK_HDMAP_MATCH_ERROR = False
    else:
      self.APP_HDMAP_SEARCH_ERROR = False
      self.APP_HDMAP_PARSE_ERROR = False
      self.APP_HDMAP_READFILE_ERROR = False
      self.APP_HDMAP_DOWNLOAD_ERROR = False
      self.APP_RTK_HDMAP_MATCH_ERROR = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.APP_HDMAP_SEARCH_ERROR, _x.APP_HDMAP_PARSE_ERROR, _x.APP_HDMAP_READFILE_ERROR, _x.APP_HDMAP_DOWNLOAD_ERROR, _x.APP_RTK_HDMAP_MATCH_ERROR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.APP_HDMAP_SEARCH_ERROR, _x.APP_HDMAP_PARSE_ERROR, _x.APP_HDMAP_READFILE_ERROR, _x.APP_HDMAP_DOWNLOAD_ERROR, _x.APP_RTK_HDMAP_MATCH_ERROR,) = _get_struct_5B().unpack(str[start:end])
      self.APP_HDMAP_SEARCH_ERROR = bool(self.APP_HDMAP_SEARCH_ERROR)
      self.APP_HDMAP_PARSE_ERROR = bool(self.APP_HDMAP_PARSE_ERROR)
      self.APP_HDMAP_READFILE_ERROR = bool(self.APP_HDMAP_READFILE_ERROR)
      self.APP_HDMAP_DOWNLOAD_ERROR = bool(self.APP_HDMAP_DOWNLOAD_ERROR)
      self.APP_RTK_HDMAP_MATCH_ERROR = bool(self.APP_RTK_HDMAP_MATCH_ERROR)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.APP_HDMAP_SEARCH_ERROR, _x.APP_HDMAP_PARSE_ERROR, _x.APP_HDMAP_READFILE_ERROR, _x.APP_HDMAP_DOWNLOAD_ERROR, _x.APP_RTK_HDMAP_MATCH_ERROR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.APP_HDMAP_SEARCH_ERROR, _x.APP_HDMAP_PARSE_ERROR, _x.APP_HDMAP_READFILE_ERROR, _x.APP_HDMAP_DOWNLOAD_ERROR, _x.APP_RTK_HDMAP_MATCH_ERROR,) = _get_struct_5B().unpack(str[start:end])
      self.APP_HDMAP_SEARCH_ERROR = bool(self.APP_HDMAP_SEARCH_ERROR)
      self.APP_HDMAP_PARSE_ERROR = bool(self.APP_HDMAP_PARSE_ERROR)
      self.APP_HDMAP_READFILE_ERROR = bool(self.APP_HDMAP_READFILE_ERROR)
      self.APP_HDMAP_DOWNLOAD_ERROR = bool(self.APP_HDMAP_DOWNLOAD_ERROR)
      self.APP_RTK_HDMAP_MATCH_ERROR = bool(self.APP_RTK_HDMAP_MATCH_ERROR)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B

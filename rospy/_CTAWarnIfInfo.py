# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CTAWarnIfInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CTAWarnIfInfo(genpy.Message):
  _md5sum = "dabcab1a9ee3ee59b0fd4cba33bf678e"
  _type = "rospy_message_converter/CTAWarnIfInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 FCTAOnOffSts
bool RCTAOnOffSts
int32 FCTASts
int32 RCTABrkSts
int32[] CTAFrntWarnReq
int32[] CTAReWarnReq
int32[] RCTAWarnSts
int32[] FCTAWarnSts
int32 RCTABOnOffSts
"""
  __slots__ = ['FCTAOnOffSts','RCTAOnOffSts','FCTASts','RCTABrkSts','CTAFrntWarnReq','CTAReWarnReq','RCTAWarnSts','FCTAWarnSts','RCTABOnOffSts']
  _slot_types = ['int32','bool','int32','int32','int32[]','int32[]','int32[]','int32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FCTAOnOffSts,RCTAOnOffSts,FCTASts,RCTABrkSts,CTAFrntWarnReq,CTAReWarnReq,RCTAWarnSts,FCTAWarnSts,RCTABOnOffSts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CTAWarnIfInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FCTAOnOffSts is None:
        self.FCTAOnOffSts = 0
      if self.RCTAOnOffSts is None:
        self.RCTAOnOffSts = False
      if self.FCTASts is None:
        self.FCTASts = 0
      if self.RCTABrkSts is None:
        self.RCTABrkSts = 0
      if self.CTAFrntWarnReq is None:
        self.CTAFrntWarnReq = []
      if self.CTAReWarnReq is None:
        self.CTAReWarnReq = []
      if self.RCTAWarnSts is None:
        self.RCTAWarnSts = []
      if self.FCTAWarnSts is None:
        self.FCTAWarnSts = []
      if self.RCTABOnOffSts is None:
        self.RCTABOnOffSts = 0
    else:
      self.FCTAOnOffSts = 0
      self.RCTAOnOffSts = False
      self.FCTASts = 0
      self.RCTABrkSts = 0
      self.CTAFrntWarnReq = []
      self.CTAReWarnReq = []
      self.RCTAWarnSts = []
      self.FCTAWarnSts = []
      self.RCTABOnOffSts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB2i().pack(_x.FCTAOnOffSts, _x.RCTAOnOffSts, _x.FCTASts, _x.RCTABrkSts))
      length = len(self.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAFrntWarnReq))
      length = len(self.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAReWarnReq))
      length = len(self.RCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.RCTAWarnSts))
      length = len(self.FCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.FCTAWarnSts))
      _x = self.RCTABOnOffSts
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.FCTAOnOffSts, _x.RCTAOnOffSts, _x.FCTASts, _x.RCTABrkSts,) = _get_struct_iB2i().unpack(str[start:end])
      self.RCTAOnOffSts = bool(self.RCTAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAFrntWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.RCTAWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FCTAWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.RCTABOnOffSts,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB2i().pack(_x.FCTAOnOffSts, _x.RCTAOnOffSts, _x.FCTASts, _x.RCTABrkSts))
      length = len(self.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAFrntWarnReq.tostring())
      length = len(self.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAReWarnReq.tostring())
      length = len(self.RCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.RCTAWarnSts.tostring())
      length = len(self.FCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.FCTAWarnSts.tostring())
      _x = self.RCTABOnOffSts
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.FCTAOnOffSts, _x.RCTAOnOffSts, _x.FCTASts, _x.RCTABrkSts,) = _get_struct_iB2i().unpack(str[start:end])
      self.RCTAOnOffSts = bool(self.RCTAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAFrntWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.RCTAWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FCTAWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.RCTABOnOffSts,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB2i = None
def _get_struct_iB2i():
    global _struct_iB2i
    if _struct_iB2i is None:
        _struct_iB2i = struct.Struct("<iB2i")
    return _struct_iB2i

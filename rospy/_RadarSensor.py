# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarSensor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RadarSensor(genpy.Message):
  _md5sum = "7764fb504ea1cab8df8864f0f8b1c23a"
  _type = "rospy_message_converter/RadarSensor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 ego_speed
float32 ego_acc
float32 ego_yawrate
RadarStatus[] status
RadarTracker[] trackers
RadarDetection[] detection_points
RadarFeature radar_feature
RadarGuardrailTracker radar_guardrail
RadarBarrierOutput radar_barrier
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RadarStatus
bool flg_blindness
bool flg_failure
bool flg_loss_comm_fault
bool flg_time_stamp_invalid
float32 mis_alignment_angle
int32 alignment_st
int32 sensor_location

================================================================================
MSG: rospy_message_converter/RadarTracker
uint64 timestamp
uint32 sync_bit
RadarObject[] objects

================================================================================
MSG: rospy_message_converter/RadarObject
RadarObjectValidStatus valid_status
uint32 source
ObjMotion motion
ObjMotionState motion_state
int32 classification
uint32 sub_class
float32 class_prob
float32 obstacle_prob
float32 conf
uint32 age
uint32 id
int32 ref_point
float32 object_rcs
float32 assoc_det_max_height
float32 assoc_det_min_height
float32 assoc_det_height_std
uint32 assoc_number_of_det
bool f_multi_measures
bool f_overhead_suspicious
uint32 unique_id
bool f_crossing

================================================================================
MSG: rospy_message_converter/RadarObjectValidStatus
bool flag_valid
bool flag_measured
bool flag_hist

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std

================================================================================
MSG: rospy_message_converter/ObjMotionState
bool is_valid
bool is_moving
bool is_movable
bool direction
bool was_moved
bool is_crossing

================================================================================
MSG: rospy_message_converter/RadarDetection
uint64 timestamp
uint32 sync_bit
RadarDetectionObject[] detection

================================================================================
MSG: rospy_message_converter/RadarDetectionObject
uint32 ID
int32 source
float32 range
float32 range_rate
float32 azimuth
float32 elevation_angle
float32 radar_cross_section
float32 azimuth_conf
float32 elevation_conf
float32 exist_prob

================================================================================
MSG: rospy_message_converter/RadarFeature
uint32[] acc_tar
uint32 aeb_tar

================================================================================
MSG: rospy_message_converter/RadarGuardrailTracker
RadarGuardrail guardrail_left
RadarGuardrail guardrail_right

================================================================================
MSG: rospy_message_converter/RadarGuardrail
float32 c0
float32 c1
float32 heading
float32 offset
float32 x_farthest_hist
uint32 lka_confidence

================================================================================
MSG: rospy_message_converter/RadarBarrierOutput
RadarBarrier barrier_left
RadarBarrier barrier_right

================================================================================
MSG: rospy_message_converter/RadarBarrier
float32[] coef
float32 dist_end
float32 dist_from
uint32 lka_confidence
"""
  __slots__ = ['ego_speed','ego_acc','ego_yawrate','status','trackers','detection_points','radar_feature','radar_guardrail','radar_barrier','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['float32','float32','float32','rospy_message_converter/RadarStatus[]','rospy_message_converter/RadarTracker[]','rospy_message_converter/RadarDetection[]','rospy_message_converter/RadarFeature','rospy_message_converter/RadarGuardrailTracker','rospy_message_converter/RadarBarrierOutput','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ego_speed,ego_acc,ego_yawrate,status,trackers,detection_points,radar_feature,radar_guardrail,radar_barrier,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarSensor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ego_speed is None:
        self.ego_speed = 0.
      if self.ego_acc is None:
        self.ego_acc = 0.
      if self.ego_yawrate is None:
        self.ego_yawrate = 0.
      if self.status is None:
        self.status = []
      if self.trackers is None:
        self.trackers = []
      if self.detection_points is None:
        self.detection_points = []
      if self.radar_feature is None:
        self.radar_feature = rospy_message_converter.msg.RadarFeature()
      if self.radar_guardrail is None:
        self.radar_guardrail = rospy_message_converter.msg.RadarGuardrailTracker()
      if self.radar_barrier is None:
        self.radar_barrier = rospy_message_converter.msg.RadarBarrierOutput()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.ego_speed = 0.
      self.ego_acc = 0.
      self.ego_yawrate = 0.
      self.status = []
      self.trackers = []
      self.detection_points = []
      self.radar_feature = rospy_message_converter.msg.RadarFeature()
      self.radar_guardrail = rospy_message_converter.msg.RadarGuardrailTracker()
      self.radar_barrier = rospy_message_converter.msg.RadarBarrierOutput()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_speed, _x.ego_acc, _x.ego_yawrate))
      length = len(self.status)
      buff.write(_struct_I.pack(length))
      for val1 in self.status:
        _x = val1
        buff.write(_get_struct_4Bf2i().pack(_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location))
      length = len(self.trackers)
      buff.write(_struct_I.pack(length))
      for val1 in self.trackers:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.objects:
          _v1 = val2.valid_status
          _x = _v1
          buff.write(_get_struct_3B().pack(_x.flag_valid, _x.flag_measured, _x.flag_hist))
          _x = val2.source
          buff.write(_get_struct_I().pack(_x))
          _v2 = val2.motion
          _v3 = _v2.pos
          _x = _v3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v4 = _v2.pos_std
          _x = _v4
          buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
          _v5 = _v2.vel
          _x = _v5
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _v6 = _v2.vel_std
          _x = _v6
          buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
          _v7 = _v2.acc
          _x = _v7
          buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
          _v8 = _v2.acc_std
          _x = _v8
          buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
          _v9 = _v2.size
          _x = _v9
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v10 = _v2.size_std
          _x = _v10
          buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
          _x = _v2
          buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
          _v11 = val2.motion_state
          _x = _v11
          buff.write(_get_struct_6B().pack(_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing))
          _x = val2
          buff.write(_get_struct_iI3f2Ii4fI2BIB().pack(_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
      length = len(self.detection_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.detection_points:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.detection)
        buff.write(_struct_I.pack(length))
        for val2 in val1.detection:
          _x = val2
          buff.write(_get_struct_Ii8f().pack(_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob))
      length = len(self.radar_feature.acc_tar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.radar_feature.acc_tar))
      _x = self
      buff.write(_get_struct_I5fI5fI().pack(_x.radar_feature.aeb_tar, _x.radar_guardrail.guardrail_left.c0, _x.radar_guardrail.guardrail_left.c1, _x.radar_guardrail.guardrail_left.heading, _x.radar_guardrail.guardrail_left.offset, _x.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_guardrail.guardrail_left.lka_confidence, _x.radar_guardrail.guardrail_right.c0, _x.radar_guardrail.guardrail_right.c1, _x.radar_guardrail.guardrail_right.heading, _x.radar_guardrail.guardrail_right.offset, _x.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_guardrail.guardrail_right.lka_confidence))
      length = len(self.radar_barrier.barrier_left.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.radar_barrier.barrier_left.coef))
      _x = self
      buff.write(_get_struct_2fI().pack(_x.radar_barrier.barrier_left.dist_end, _x.radar_barrier.barrier_left.dist_from, _x.radar_barrier.barrier_left.lka_confidence))
      length = len(self.radar_barrier.barrier_right.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.radar_barrier.barrier_right.coef))
      _x = self
      buff.write(_get_struct_2fIQ().pack(_x.radar_barrier.barrier_right.dist_end, _x.radar_barrier.barrier_right.dist_from, _x.radar_barrier.barrier_right.lka_confidence, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.status is None:
        self.status = None
      if self.trackers is None:
        self.trackers = None
      if self.detection_points is None:
        self.detection_points = None
      if self.radar_feature is None:
        self.radar_feature = rospy_message_converter.msg.RadarFeature()
      if self.radar_guardrail is None:
        self.radar_guardrail = rospy_message_converter.msg.RadarGuardrailTracker()
      if self.radar_barrier is None:
        self.radar_barrier = rospy_message_converter.msg.RadarBarrierOutput()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.ego_speed, _x.ego_acc, _x.ego_yawrate,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.status = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarStatus()
        _x = val1
        start = end
        end += 16
        (_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location,) = _get_struct_4Bf2i().unpack(str[start:end])
        val1.flg_blindness = bool(val1.flg_blindness)
        val1.flg_failure = bool(val1.flg_failure)
        val1.flg_loss_comm_fault = bool(val1.flg_loss_comm_fault)
        val1.flg_time_stamp_invalid = bool(val1.flg_time_stamp_invalid)
        self.status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trackers = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarTracker()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.objects = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarObject()
          _v12 = val2.valid_status
          _x = _v12
          start = end
          end += 3
          (_x.flag_valid, _x.flag_measured, _x.flag_hist,) = _get_struct_3B().unpack(str[start:end])
          _v12.flag_valid = bool(_v12.flag_valid)
          _v12.flag_measured = bool(_v12.flag_measured)
          _v12.flag_hist = bool(_v12.flag_hist)
          start = end
          end += 4
          (val2.source,) = _get_struct_I().unpack(str[start:end])
          _v13 = val2.motion
          _v14 = _v13.pos
          _x = _v14
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v15 = _v13.pos_std
          _x = _v15
          start = end
          end += 12
          (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
          _v16 = _v13.vel
          _x = _v16
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _v17 = _v13.vel_std
          _x = _v17
          start = end
          end += 12
          (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
          _v18 = _v13.acc
          _x = _v18
          start = end
          end += 12
          (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
          _v19 = _v13.acc_std
          _x = _v19
          start = end
          end += 12
          (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
          _v20 = _v13.size
          _x = _v20
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v21 = _v13.size_std
          _x = _v21
          start = end
          end += 12
          (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
          _x = _v13
          start = end
          end += 12
          (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
          _v22 = val2.motion_state
          _x = _v22
          start = end
          end += 6
          (_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing,) = _get_struct_6B().unpack(str[start:end])
          _v22.is_valid = bool(_v22.is_valid)
          _v22.is_moving = bool(_v22.is_moving)
          _v22.is_movable = bool(_v22.is_movable)
          _v22.direction = bool(_v22.direction)
          _v22.was_moved = bool(_v22.was_moved)
          _v22.is_crossing = bool(_v22.is_crossing)
          _x = val2
          start = end
          end += 59
          (_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_iI3f2Ii4fI2BIB().unpack(str[start:end])
          val2.f_multi_measures = bool(val2.f_multi_measures)
          val2.f_overhead_suspicious = bool(val2.f_overhead_suspicious)
          val2.f_crossing = bool(val2.f_crossing)
          val1.objects.append(val2)
        self.trackers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detection_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarDetection()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.detection = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarDetectionObject()
          _x = val2
          start = end
          end += 40
          (_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob,) = _get_struct_Ii8f().unpack(str[start:end])
          val1.detection.append(val2)
        self.detection_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_feature.acc_tar = s.unpack(str[start:end])
      _x = self
      start = end
      end += 52
      (_x.radar_feature.aeb_tar, _x.radar_guardrail.guardrail_left.c0, _x.radar_guardrail.guardrail_left.c1, _x.radar_guardrail.guardrail_left.heading, _x.radar_guardrail.guardrail_left.offset, _x.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_guardrail.guardrail_left.lka_confidence, _x.radar_guardrail.guardrail_right.c0, _x.radar_guardrail.guardrail_right.c1, _x.radar_guardrail.guardrail_right.heading, _x.radar_guardrail.guardrail_right.offset, _x.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_guardrail.guardrail_right.lka_confidence,) = _get_struct_I5fI5fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_barrier.barrier_left.coef = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.radar_barrier.barrier_left.dist_end, _x.radar_barrier.barrier_left.dist_from, _x.radar_barrier.barrier_left.lka_confidence,) = _get_struct_2fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_barrier.barrier_right.coef = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.radar_barrier.barrier_right.dist_end, _x.radar_barrier.barrier_right.dist_from, _x.radar_barrier.barrier_right.lka_confidence, _x.publish_ptp_ts,) = _get_struct_2fIQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.ego_speed, _x.ego_acc, _x.ego_yawrate))
      length = len(self.status)
      buff.write(_struct_I.pack(length))
      for val1 in self.status:
        _x = val1
        buff.write(_get_struct_4Bf2i().pack(_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location))
      length = len(self.trackers)
      buff.write(_struct_I.pack(length))
      for val1 in self.trackers:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.objects:
          _v23 = val2.valid_status
          _x = _v23
          buff.write(_get_struct_3B().pack(_x.flag_valid, _x.flag_measured, _x.flag_hist))
          _x = val2.source
          buff.write(_get_struct_I().pack(_x))
          _v24 = val2.motion
          _v25 = _v24.pos
          _x = _v25
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v26 = _v24.pos_std
          _x = _v26
          buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
          _v27 = _v24.vel
          _x = _v27
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _v28 = _v24.vel_std
          _x = _v28
          buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
          _v29 = _v24.acc
          _x = _v29
          buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
          _v30 = _v24.acc_std
          _x = _v30
          buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
          _v31 = _v24.size
          _x = _v31
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v32 = _v24.size_std
          _x = _v32
          buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
          _x = _v24
          buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
          _v33 = val2.motion_state
          _x = _v33
          buff.write(_get_struct_6B().pack(_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing))
          _x = val2
          buff.write(_get_struct_iI3f2Ii4fI2BIB().pack(_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
      length = len(self.detection_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.detection_points:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.detection)
        buff.write(_struct_I.pack(length))
        for val2 in val1.detection:
          _x = val2
          buff.write(_get_struct_Ii8f().pack(_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob))
      length = len(self.radar_feature.acc_tar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.radar_feature.acc_tar.tostring())
      _x = self
      buff.write(_get_struct_I5fI5fI().pack(_x.radar_feature.aeb_tar, _x.radar_guardrail.guardrail_left.c0, _x.radar_guardrail.guardrail_left.c1, _x.radar_guardrail.guardrail_left.heading, _x.radar_guardrail.guardrail_left.offset, _x.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_guardrail.guardrail_left.lka_confidence, _x.radar_guardrail.guardrail_right.c0, _x.radar_guardrail.guardrail_right.c1, _x.radar_guardrail.guardrail_right.heading, _x.radar_guardrail.guardrail_right.offset, _x.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_guardrail.guardrail_right.lka_confidence))
      length = len(self.radar_barrier.barrier_left.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.radar_barrier.barrier_left.coef.tostring())
      _x = self
      buff.write(_get_struct_2fI().pack(_x.radar_barrier.barrier_left.dist_end, _x.radar_barrier.barrier_left.dist_from, _x.radar_barrier.barrier_left.lka_confidence))
      length = len(self.radar_barrier.barrier_right.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.radar_barrier.barrier_right.coef.tostring())
      _x = self
      buff.write(_get_struct_2fIQ().pack(_x.radar_barrier.barrier_right.dist_end, _x.radar_barrier.barrier_right.dist_from, _x.radar_barrier.barrier_right.lka_confidence, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.status is None:
        self.status = None
      if self.trackers is None:
        self.trackers = None
      if self.detection_points is None:
        self.detection_points = None
      if self.radar_feature is None:
        self.radar_feature = rospy_message_converter.msg.RadarFeature()
      if self.radar_guardrail is None:
        self.radar_guardrail = rospy_message_converter.msg.RadarGuardrailTracker()
      if self.radar_barrier is None:
        self.radar_barrier = rospy_message_converter.msg.RadarBarrierOutput()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.ego_speed, _x.ego_acc, _x.ego_yawrate,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.status = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarStatus()
        _x = val1
        start = end
        end += 16
        (_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location,) = _get_struct_4Bf2i().unpack(str[start:end])
        val1.flg_blindness = bool(val1.flg_blindness)
        val1.flg_failure = bool(val1.flg_failure)
        val1.flg_loss_comm_fault = bool(val1.flg_loss_comm_fault)
        val1.flg_time_stamp_invalid = bool(val1.flg_time_stamp_invalid)
        self.status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trackers = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarTracker()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.objects = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarObject()
          _v34 = val2.valid_status
          _x = _v34
          start = end
          end += 3
          (_x.flag_valid, _x.flag_measured, _x.flag_hist,) = _get_struct_3B().unpack(str[start:end])
          _v34.flag_valid = bool(_v34.flag_valid)
          _v34.flag_measured = bool(_v34.flag_measured)
          _v34.flag_hist = bool(_v34.flag_hist)
          start = end
          end += 4
          (val2.source,) = _get_struct_I().unpack(str[start:end])
          _v35 = val2.motion
          _v36 = _v35.pos
          _x = _v36
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v37 = _v35.pos_std
          _x = _v37
          start = end
          end += 12
          (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
          _v38 = _v35.vel
          _x = _v38
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _v39 = _v35.vel_std
          _x = _v39
          start = end
          end += 12
          (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
          _v40 = _v35.acc
          _x = _v40
          start = end
          end += 12
          (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
          _v41 = _v35.acc_std
          _x = _v41
          start = end
          end += 12
          (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
          _v42 = _v35.size
          _x = _v42
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v43 = _v35.size_std
          _x = _v43
          start = end
          end += 12
          (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
          _x = _v35
          start = end
          end += 12
          (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
          _v44 = val2.motion_state
          _x = _v44
          start = end
          end += 6
          (_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing,) = _get_struct_6B().unpack(str[start:end])
          _v44.is_valid = bool(_v44.is_valid)
          _v44.is_moving = bool(_v44.is_moving)
          _v44.is_movable = bool(_v44.is_movable)
          _v44.direction = bool(_v44.direction)
          _v44.was_moved = bool(_v44.was_moved)
          _v44.is_crossing = bool(_v44.is_crossing)
          _x = val2
          start = end
          end += 59
          (_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_iI3f2Ii4fI2BIB().unpack(str[start:end])
          val2.f_multi_measures = bool(val2.f_multi_measures)
          val2.f_overhead_suspicious = bool(val2.f_overhead_suspicious)
          val2.f_crossing = bool(val2.f_crossing)
          val1.objects.append(val2)
        self.trackers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detection_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarDetection()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.detection = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarDetectionObject()
          _x = val2
          start = end
          end += 40
          (_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob,) = _get_struct_Ii8f().unpack(str[start:end])
          val1.detection.append(val2)
        self.detection_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_feature.acc_tar = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 52
      (_x.radar_feature.aeb_tar, _x.radar_guardrail.guardrail_left.c0, _x.radar_guardrail.guardrail_left.c1, _x.radar_guardrail.guardrail_left.heading, _x.radar_guardrail.guardrail_left.offset, _x.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_guardrail.guardrail_left.lka_confidence, _x.radar_guardrail.guardrail_right.c0, _x.radar_guardrail.guardrail_right.c1, _x.radar_guardrail.guardrail_right.heading, _x.radar_guardrail.guardrail_right.offset, _x.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_guardrail.guardrail_right.lka_confidence,) = _get_struct_I5fI5fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_barrier.barrier_left.coef = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.radar_barrier.barrier_left.dist_end, _x.radar_barrier.barrier_left.dist_from, _x.radar_barrier.barrier_left.lka_confidence,) = _get_struct_2fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_barrier.barrier_right.coef = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 20
      (_x.radar_barrier.barrier_right.dist_end, _x.radar_barrier.barrier_right.dist_from, _x.radar_barrier.barrier_right.lka_confidence, _x.publish_ptp_ts,) = _get_struct_2fIQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2fI = None
def _get_struct_2fI():
    global _struct_2fI
    if _struct_2fI is None:
        _struct_2fI = struct.Struct("<2fI")
    return _struct_2fI
_struct_2fIQ = None
def _get_struct_2fIQ():
    global _struct_2fIQ
    if _struct_2fIQ is None:
        _struct_2fIQ = struct.Struct("<2fIQ")
    return _struct_2fIQ
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4Bf2i = None
def _get_struct_4Bf2i():
    global _struct_4Bf2i
    if _struct_4Bf2i is None:
        _struct_4Bf2i = struct.Struct("<4Bf2i")
    return _struct_4Bf2i
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_I5fI5fI = None
def _get_struct_I5fI5fI():
    global _struct_I5fI5fI
    if _struct_I5fI5fI is None:
        _struct_I5fI5fI = struct.Struct("<I5fI5fI")
    return _struct_I5fI5fI
_struct_Ii8f = None
def _get_struct_Ii8f():
    global _struct_Ii8f
    if _struct_Ii8f is None:
        _struct_Ii8f = struct.Struct("<Ii8f")
    return _struct_Ii8f
_struct_QI = None
def _get_struct_QI():
    global _struct_QI
    if _struct_QI is None:
        _struct_QI = struct.Struct("<QI")
    return _struct_QI
_struct_fif = None
def _get_struct_fif():
    global _struct_fif
    if _struct_fif is None:
        _struct_fif = struct.Struct("<fif")
    return _struct_fif
_struct_iI3f2Ii4fI2BIB = None
def _get_struct_iI3f2Ii4fI2BIB():
    global _struct_iI3f2Ii4fI2BIB
    if _struct_iI3f2Ii4fI2BIB is None:
        _struct_iI3f2Ii4fI2BIB = struct.Struct("<iI3f2Ii4fI2BIB")
    return _struct_iI3f2Ii4fI2BIB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EgoState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EgoState(genpy.Message):
  _md5sum = "ebf4dbfb6d21eb8f42fa5790f4c27dec"
  _type = "rospy_message_converter/EgoState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 vehspd
float32 yawrate
float32 steerangle
bool hostreverse
float32 brakepos
float32 brakeposrate
uint32 driverpressed
float32 maincypress
float32 maincyprsrate
bool driverintention
bool driverEBA
float32 ROC
float32 steerrate
float32 accpos
float32 accposrate
"""
  __slots__ = ['vehspd','yawrate','steerangle','hostreverse','brakepos','brakeposrate','driverpressed','maincypress','maincyprsrate','driverintention','driverEBA','ROC','steerrate','accpos','accposrate']
  _slot_types = ['float32','float32','float32','bool','float32','float32','uint32','float32','float32','bool','bool','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehspd,yawrate,steerangle,hostreverse,brakepos,brakeposrate,driverpressed,maincypress,maincyprsrate,driverintention,driverEBA,ROC,steerrate,accpos,accposrate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EgoState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehspd is None:
        self.vehspd = 0.
      if self.yawrate is None:
        self.yawrate = 0.
      if self.steerangle is None:
        self.steerangle = 0.
      if self.hostreverse is None:
        self.hostreverse = False
      if self.brakepos is None:
        self.brakepos = 0.
      if self.brakeposrate is None:
        self.brakeposrate = 0.
      if self.driverpressed is None:
        self.driverpressed = 0
      if self.maincypress is None:
        self.maincypress = 0.
      if self.maincyprsrate is None:
        self.maincyprsrate = 0.
      if self.driverintention is None:
        self.driverintention = False
      if self.driverEBA is None:
        self.driverEBA = False
      if self.ROC is None:
        self.ROC = 0.
      if self.steerrate is None:
        self.steerrate = 0.
      if self.accpos is None:
        self.accpos = 0.
      if self.accposrate is None:
        self.accposrate = 0.
    else:
      self.vehspd = 0.
      self.yawrate = 0.
      self.steerangle = 0.
      self.hostreverse = False
      self.brakepos = 0.
      self.brakeposrate = 0.
      self.driverpressed = 0
      self.maincypress = 0.
      self.maincyprsrate = 0.
      self.driverintention = False
      self.driverEBA = False
      self.ROC = 0.
      self.steerrate = 0.
      self.accpos = 0.
      self.accposrate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fB2fI2f2B4f().pack(_x.vehspd, _x.yawrate, _x.steerangle, _x.hostreverse, _x.brakepos, _x.brakeposrate, _x.driverpressed, _x.maincypress, _x.maincyprsrate, _x.driverintention, _x.driverEBA, _x.ROC, _x.steerrate, _x.accpos, _x.accposrate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.vehspd, _x.yawrate, _x.steerangle, _x.hostreverse, _x.brakepos, _x.brakeposrate, _x.driverpressed, _x.maincypress, _x.maincyprsrate, _x.driverintention, _x.driverEBA, _x.ROC, _x.steerrate, _x.accpos, _x.accposrate,) = _get_struct_3fB2fI2f2B4f().unpack(str[start:end])
      self.hostreverse = bool(self.hostreverse)
      self.driverintention = bool(self.driverintention)
      self.driverEBA = bool(self.driverEBA)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fB2fI2f2B4f().pack(_x.vehspd, _x.yawrate, _x.steerangle, _x.hostreverse, _x.brakepos, _x.brakeposrate, _x.driverpressed, _x.maincypress, _x.maincyprsrate, _x.driverintention, _x.driverEBA, _x.ROC, _x.steerrate, _x.accpos, _x.accposrate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.vehspd, _x.yawrate, _x.steerangle, _x.hostreverse, _x.brakepos, _x.brakeposrate, _x.driverpressed, _x.maincypress, _x.maincyprsrate, _x.driverintention, _x.driverEBA, _x.ROC, _x.steerrate, _x.accpos, _x.accposrate,) = _get_struct_3fB2fI2f2B4f().unpack(str[start:end])
      self.hostreverse = bool(self.hostreverse)
      self.driverintention = bool(self.driverintention)
      self.driverEBA = bool(self.driverEBA)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fB2fI2f2B4f = None
def _get_struct_3fB2fI2f2B4f():
    global _struct_3fB2fI2f2B4f
    if _struct_3fB2fI2f2B4f is None:
        _struct_3fB2fI2f2B4f = struct.Struct("<3fB2fI2f2B4f")
    return _struct_3fB2fI2f2B4f

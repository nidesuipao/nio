# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DMS_FaceResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DMS_FaceResult(genpy.Message):
  _md5sum = "5a848ab30e6d2630aa060d724aa12bda"
  _type = "rospy_message_converter/DMS_FaceResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_valid
DMSPoint2f[] landmarks
uint32 landmark_number
int32 top_left_x
int32 bottom_right_x
int32 top_left_y
int32 bottom_right_y

================================================================================
MSG: rospy_message_converter/DMSPoint2f
float32 x
float32 y
"""
  __slots__ = ['is_valid','landmarks','landmark_number','top_left_x','bottom_right_x','top_left_y','bottom_right_y']
  _slot_types = ['bool','rospy_message_converter/DMSPoint2f[]','uint32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_valid,landmarks,landmark_number,top_left_x,bottom_right_x,top_left_y,bottom_right_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DMS_FaceResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_valid is None:
        self.is_valid = False
      if self.landmarks is None:
        self.landmarks = []
      if self.landmark_number is None:
        self.landmark_number = 0
      if self.top_left_x is None:
        self.top_left_x = 0
      if self.bottom_right_x is None:
        self.bottom_right_x = 0
      if self.top_left_y is None:
        self.top_left_y = 0
      if self.bottom_right_y is None:
        self.bottom_right_y = 0
    else:
      self.is_valid = False
      self.landmarks = []
      self.landmark_number = 0
      self.top_left_x = 0
      self.bottom_right_x = 0
      self.top_left_y = 0
      self.bottom_right_y = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.is_valid
      buff.write(_get_struct_B().pack(_x))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I4i().pack(_x.landmark_number, _x.top_left_x, _x.bottom_right_x, _x.top_left_y, _x.bottom_right_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      start = end
      end += 1
      (self.is_valid,) = _get_struct_B().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DMSPoint2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.landmarks.append(val1)
      _x = self
      start = end
      end += 20
      (_x.landmark_number, _x.top_left_x, _x.bottom_right_x, _x.top_left_y, _x.bottom_right_y,) = _get_struct_I4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.is_valid
      buff.write(_get_struct_B().pack(_x))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I4i().pack(_x.landmark_number, _x.top_left_x, _x.bottom_right_x, _x.top_left_y, _x.bottom_right_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      start = end
      end += 1
      (self.is_valid,) = _get_struct_B().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DMSPoint2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.landmarks.append(val1)
      _x = self
      start = end
      end += 20
      (_x.landmark_number, _x.top_left_x, _x.bottom_right_x, _x.top_left_y, _x.bottom_right_y,) = _get_struct_I4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I4i = None
def _get_struct_I4i():
    global _struct_I4i
    if _struct_I4i is None:
        _struct_I4i = struct.Struct("<I4i")
    return _struct_I4i

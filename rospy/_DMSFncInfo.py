# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DMSFncInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DMSFncInfo(genpy.Message):
  _md5sum = "61d47f3e453b94dfe7018801e1b5e167"
  _type = "rospy_message_converter/DMSFncInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 DMSAlertLvl
int32 DMSAvlSts
int32 DMSDrvrAttention
uint32 DMSDrvrAttentionConfidence
int32 DMSDrvrEyeGazeDir
uint32 DMSDrvrEyeGazeDirConfidence
int32 DMSDrvrEyeSts
uint32 DMSDrvrEyeStsConfidence
int32 DMSDrvrHdPoseDir
uint32 DMSDrvrHdPoseDirConfidence
int32 DMSFailSafe
int32 DMSSts
int32 DMSDrvrFatigue
uint32 DMSDrvrFatigueConfidence
"""
  __slots__ = ['DMSAlertLvl','DMSAvlSts','DMSDrvrAttention','DMSDrvrAttentionConfidence','DMSDrvrEyeGazeDir','DMSDrvrEyeGazeDirConfidence','DMSDrvrEyeSts','DMSDrvrEyeStsConfidence','DMSDrvrHdPoseDir','DMSDrvrHdPoseDirConfidence','DMSFailSafe','DMSSts','DMSDrvrFatigue','DMSDrvrFatigueConfidence']
  _slot_types = ['int32','int32','int32','uint32','int32','uint32','int32','uint32','int32','uint32','int32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       DMSAlertLvl,DMSAvlSts,DMSDrvrAttention,DMSDrvrAttentionConfidence,DMSDrvrEyeGazeDir,DMSDrvrEyeGazeDirConfidence,DMSDrvrEyeSts,DMSDrvrEyeStsConfidence,DMSDrvrHdPoseDir,DMSDrvrHdPoseDirConfidence,DMSFailSafe,DMSSts,DMSDrvrFatigue,DMSDrvrFatigueConfidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DMSFncInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.DMSAlertLvl is None:
        self.DMSAlertLvl = 0
      if self.DMSAvlSts is None:
        self.DMSAvlSts = 0
      if self.DMSDrvrAttention is None:
        self.DMSDrvrAttention = 0
      if self.DMSDrvrAttentionConfidence is None:
        self.DMSDrvrAttentionConfidence = 0
      if self.DMSDrvrEyeGazeDir is None:
        self.DMSDrvrEyeGazeDir = 0
      if self.DMSDrvrEyeGazeDirConfidence is None:
        self.DMSDrvrEyeGazeDirConfidence = 0
      if self.DMSDrvrEyeSts is None:
        self.DMSDrvrEyeSts = 0
      if self.DMSDrvrEyeStsConfidence is None:
        self.DMSDrvrEyeStsConfidence = 0
      if self.DMSDrvrHdPoseDir is None:
        self.DMSDrvrHdPoseDir = 0
      if self.DMSDrvrHdPoseDirConfidence is None:
        self.DMSDrvrHdPoseDirConfidence = 0
      if self.DMSFailSafe is None:
        self.DMSFailSafe = 0
      if self.DMSSts is None:
        self.DMSSts = 0
      if self.DMSDrvrFatigue is None:
        self.DMSDrvrFatigue = 0
      if self.DMSDrvrFatigueConfidence is None:
        self.DMSDrvrFatigueConfidence = 0
    else:
      self.DMSAlertLvl = 0
      self.DMSAvlSts = 0
      self.DMSDrvrAttention = 0
      self.DMSDrvrAttentionConfidence = 0
      self.DMSDrvrEyeGazeDir = 0
      self.DMSDrvrEyeGazeDirConfidence = 0
      self.DMSDrvrEyeSts = 0
      self.DMSDrvrEyeStsConfidence = 0
      self.DMSDrvrHdPoseDir = 0
      self.DMSDrvrHdPoseDirConfidence = 0
      self.DMSFailSafe = 0
      self.DMSSts = 0
      self.DMSDrvrFatigue = 0
      self.DMSDrvrFatigueConfidence = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3iIiIiIiI3iI().pack(_x.DMSAlertLvl, _x.DMSAvlSts, _x.DMSDrvrAttention, _x.DMSDrvrAttentionConfidence, _x.DMSDrvrEyeGazeDir, _x.DMSDrvrEyeGazeDirConfidence, _x.DMSDrvrEyeSts, _x.DMSDrvrEyeStsConfidence, _x.DMSDrvrHdPoseDir, _x.DMSDrvrHdPoseDirConfidence, _x.DMSFailSafe, _x.DMSSts, _x.DMSDrvrFatigue, _x.DMSDrvrFatigueConfidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.DMSAlertLvl, _x.DMSAvlSts, _x.DMSDrvrAttention, _x.DMSDrvrAttentionConfidence, _x.DMSDrvrEyeGazeDir, _x.DMSDrvrEyeGazeDirConfidence, _x.DMSDrvrEyeSts, _x.DMSDrvrEyeStsConfidence, _x.DMSDrvrHdPoseDir, _x.DMSDrvrHdPoseDirConfidence, _x.DMSFailSafe, _x.DMSSts, _x.DMSDrvrFatigue, _x.DMSDrvrFatigueConfidence,) = _get_struct_3iIiIiIiI3iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3iIiIiIiI3iI().pack(_x.DMSAlertLvl, _x.DMSAvlSts, _x.DMSDrvrAttention, _x.DMSDrvrAttentionConfidence, _x.DMSDrvrEyeGazeDir, _x.DMSDrvrEyeGazeDirConfidence, _x.DMSDrvrEyeSts, _x.DMSDrvrEyeStsConfidence, _x.DMSDrvrHdPoseDir, _x.DMSDrvrHdPoseDirConfidence, _x.DMSFailSafe, _x.DMSSts, _x.DMSDrvrFatigue, _x.DMSDrvrFatigueConfidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.DMSAlertLvl, _x.DMSAvlSts, _x.DMSDrvrAttention, _x.DMSDrvrAttentionConfidence, _x.DMSDrvrEyeGazeDir, _x.DMSDrvrEyeGazeDirConfidence, _x.DMSDrvrEyeSts, _x.DMSDrvrEyeStsConfidence, _x.DMSDrvrHdPoseDir, _x.DMSDrvrHdPoseDirConfidence, _x.DMSFailSafe, _x.DMSSts, _x.DMSDrvrFatigue, _x.DMSDrvrFatigueConfidence,) = _get_struct_3iIiIiIiI3iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3iIiIiIiI3iI = None
def _get_struct_3iIiIiIiI3iI():
    global _struct_3iIiIiIiI3iI
    if _struct_3iIiIiIiI3iI is None:
        _struct_3iIiIiIiI3iI = struct.Struct("<3iIiIiIiI3iI")
    return _struct_3iIiIiIiI3iI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvSlotObjectResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvSlotObjectResult(genpy.Message):
  _md5sum = "278694fe665d96bb6cffc6b6ba0a6a08"
  _type = "rospy_message_converter/ParEnvSlotObjectResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 slot_id
float32 project_x_margin
float32 project_y_margin
ParEnvObjectInfo object_x_margin
ParEnvObjectInfo object_y_margin

================================================================================
MSG: rospy_message_converter/ParEnvObjectInfo
int32 type
int32 src
ParEnvObjectPoint pt
ParEnvObjectSegment line
ParEnvObjectPolygon polygon

================================================================================
MSG: rospy_message_converter/ParEnvObjectPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/ParEnvObjectSegment
ParEnvObjectPoint pt1
ParEnvObjectPoint pt2

================================================================================
MSG: rospy_message_converter/ParEnvObjectPolygon
ParEnvObjectPoint[] pts
"""
  __slots__ = ['slot_id','project_x_margin','project_y_margin','object_x_margin','object_y_margin']
  _slot_types = ['uint32','float32','float32','rospy_message_converter/ParEnvObjectInfo','rospy_message_converter/ParEnvObjectInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       slot_id,project_x_margin,project_y_margin,object_x_margin,object_y_margin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvSlotObjectResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.slot_id is None:
        self.slot_id = 0
      if self.project_x_margin is None:
        self.project_x_margin = 0.
      if self.project_y_margin is None:
        self.project_y_margin = 0.
      if self.object_x_margin is None:
        self.object_x_margin = rospy_message_converter.msg.ParEnvObjectInfo()
      if self.object_y_margin is None:
        self.object_y_margin = rospy_message_converter.msg.ParEnvObjectInfo()
    else:
      self.slot_id = 0
      self.project_x_margin = 0.
      self.project_y_margin = 0.
      self.object_x_margin = rospy_message_converter.msg.ParEnvObjectInfo()
      self.object_y_margin = rospy_message_converter.msg.ParEnvObjectInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin, _x.object_x_margin.type, _x.object_x_margin.src, _x.object_x_margin.pt.x, _x.object_x_margin.pt.y, _x.object_x_margin.line.pt1.x, _x.object_x_margin.line.pt1.y, _x.object_x_margin.line.pt2.x, _x.object_x_margin.line.pt2.y))
      length = len(self.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.object_y_margin.type, _x.object_y_margin.src, _x.object_y_margin.pt.x, _x.object_y_margin.pt.y, _x.object_y_margin.line.pt1.x, _x.object_y_margin.line.pt1.y, _x.object_y_margin.line.pt2.x, _x.object_y_margin.line.pt2.y))
      length = len(self.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.object_x_margin is None:
        self.object_x_margin = rospy_message_converter.msg.ParEnvObjectInfo()
      if self.object_y_margin is None:
        self.object_y_margin = rospy_message_converter.msg.ParEnvObjectInfo()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.slot_id, _x.project_x_margin, _x.project_y_margin, _x.object_x_margin.type, _x.object_x_margin.src, _x.object_x_margin.pt.x, _x.object_x_margin.pt.y, _x.object_x_margin.line.pt1.x, _x.object_x_margin.line.pt1.y, _x.object_x_margin.line.pt2.x, _x.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.object_y_margin.type, _x.object_y_margin.src, _x.object_y_margin.pt.x, _x.object_y_margin.pt.y, _x.object_y_margin.line.pt1.x, _x.object_y_margin.line.pt1.y, _x.object_y_margin.line.pt2.x, _x.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_y_margin.polygon.pts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin, _x.object_x_margin.type, _x.object_x_margin.src, _x.object_x_margin.pt.x, _x.object_x_margin.pt.y, _x.object_x_margin.line.pt1.x, _x.object_x_margin.line.pt1.y, _x.object_x_margin.line.pt2.x, _x.object_x_margin.line.pt2.y))
      length = len(self.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.object_y_margin.type, _x.object_y_margin.src, _x.object_y_margin.pt.x, _x.object_y_margin.pt.y, _x.object_y_margin.line.pt1.x, _x.object_y_margin.line.pt1.y, _x.object_y_margin.line.pt2.x, _x.object_y_margin.line.pt2.y))
      length = len(self.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.object_x_margin is None:
        self.object_x_margin = rospy_message_converter.msg.ParEnvObjectInfo()
      if self.object_y_margin is None:
        self.object_y_margin = rospy_message_converter.msg.ParEnvObjectInfo()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.slot_id, _x.project_x_margin, _x.project_y_margin, _x.object_x_margin.type, _x.object_x_margin.src, _x.object_x_margin.pt.x, _x.object_x_margin.pt.y, _x.object_x_margin.line.pt1.x, _x.object_x_margin.line.pt1.y, _x.object_x_margin.line.pt2.x, _x.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.object_y_margin.type, _x.object_y_margin.src, _x.object_y_margin.pt.x, _x.object_y_margin.pt.y, _x.object_y_margin.line.pt1.x, _x.object_y_margin.line.pt1.y, _x.object_y_margin.line.pt2.x, _x.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_y_margin.polygon.pts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i6f = None
def _get_struct_2i6f():
    global _struct_2i6f
    if _struct_2i6f is None:
        _struct_2i6f = struct.Struct("<2i6f")
    return _struct_2i6f
_struct_I2f2i6f = None
def _get_struct_I2f2i6f():
    global _struct_I2f2i6f
    if _struct_I2f2i6f is None:
        _struct_I2f2i6f = struct.Struct("<I2f2i6f")
    return _struct_I2f2i6f

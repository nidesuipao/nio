# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PsapStationInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PsapStationInfo(genpy.Message):
  _md5sum = "764ee79c358d3cefd7b9be4044a7a696"
  _type = "rospy_message_converter/PsapStationInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string station_id
int32 station_gen
int32 station_type
int32 station_entrance_type
float32 slope_length
bool station_available
string offline_reason
float32 station_platform_height
float32 station_tagb_to_slot_dst_x
float32 station_ref_offset
float32 station_reserved
float32 station_tagc_to_slot_dst_x
uint64 timestamp_ptp_ns
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['station_id','station_gen','station_type','station_entrance_type','slope_length','station_available','offline_reason','station_platform_height','station_tagb_to_slot_dst_x','station_ref_offset','station_reserved','station_tagc_to_slot_dst_x','timestamp_ptp_ns','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['string','int32','int32','int32','float32','bool','string','float32','float32','float32','float32','float32','uint64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       station_id,station_gen,station_type,station_entrance_type,slope_length,station_available,offline_reason,station_platform_height,station_tagb_to_slot_dst_x,station_ref_offset,station_reserved,station_tagc_to_slot_dst_x,timestamp_ptp_ns,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PsapStationInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.station_id is None:
        self.station_id = ''
      if self.station_gen is None:
        self.station_gen = 0
      if self.station_type is None:
        self.station_type = 0
      if self.station_entrance_type is None:
        self.station_entrance_type = 0
      if self.slope_length is None:
        self.slope_length = 0.
      if self.station_available is None:
        self.station_available = False
      if self.offline_reason is None:
        self.offline_reason = ''
      if self.station_platform_height is None:
        self.station_platform_height = 0.
      if self.station_tagb_to_slot_dst_x is None:
        self.station_tagb_to_slot_dst_x = 0.
      if self.station_ref_offset is None:
        self.station_ref_offset = 0.
      if self.station_reserved is None:
        self.station_reserved = 0.
      if self.station_tagc_to_slot_dst_x is None:
        self.station_tagc_to_slot_dst_x = 0.
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.station_id = ''
      self.station_gen = 0
      self.station_type = 0
      self.station_entrance_type = 0
      self.slope_length = 0.
      self.station_available = False
      self.offline_reason = ''
      self.station_platform_height = 0.
      self.station_tagb_to_slot_dst_x = 0.
      self.station_ref_offset = 0.
      self.station_reserved = 0.
      self.station_tagc_to_slot_dst_x = 0.
      self.timestamp_ptp_ns = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3ifB().pack(_x.station_gen, _x.station_type, _x.station_entrance_type, _x.slope_length, _x.station_available))
      _x = self.offline_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2Q().pack(_x.station_platform_height, _x.station_tagb_to_slot_dst_x, _x.station_ref_offset, _x.station_reserved, _x.station_tagc_to_slot_dst_x, _x.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.station_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.station_gen, _x.station_type, _x.station_entrance_type, _x.slope_length, _x.station_available,) = _get_struct_3ifB().unpack(str[start:end])
      self.station_available = bool(self.station_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.offline_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.offline_reason = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.station_platform_height, _x.station_tagb_to_slot_dst_x, _x.station_ref_offset, _x.station_reserved, _x.station_tagc_to_slot_dst_x, _x.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_5f2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3ifB().pack(_x.station_gen, _x.station_type, _x.station_entrance_type, _x.slope_length, _x.station_available))
      _x = self.offline_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2Q().pack(_x.station_platform_height, _x.station_tagb_to_slot_dst_x, _x.station_ref_offset, _x.station_reserved, _x.station_tagc_to_slot_dst_x, _x.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.station_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.station_gen, _x.station_type, _x.station_entrance_type, _x.slope_length, _x.station_available,) = _get_struct_3ifB().unpack(str[start:end])
      self.station_available = bool(self.station_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.offline_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.offline_reason = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.station_platform_height, _x.station_tagb_to_slot_dst_x, _x.station_ref_offset, _x.station_reserved, _x.station_tagc_to_slot_dst_x, _x.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_5f2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3ifB = None
def _get_struct_3ifB():
    global _struct_3ifB
    if _struct_3ifB is None:
        _struct_3ifB = struct.Struct("<3ifB")
    return _struct_3ifB
_struct_5f2Q = None
def _get_struct_5f2Q():
    global _struct_5f2Q
    if _struct_5f2Q is None:
        _struct_5f2Q = struct.Struct("<5f2Q")
    return _struct_5f2Q

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BodyIfInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class BodyIfInfo(genpy.Message):
  _md5sum = "f7b10e2da00b4a142a4fb4f6e214cc2f"
  _type = "rospy_message_converter/BodyIfInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LightIfInfo LightIf
int32 DoorUnlckReq
int32 RemLogSts
int32 HornCtrlReq
bool ECOPlusModReqSts

================================================================================
MSG: rospy_message_converter/LightIfInfo
bool HMAHiBeamReq
int32 HMASts
int32[] MirrLightReq
"""
  __slots__ = ['LightIf','DoorUnlckReq','RemLogSts','HornCtrlReq','ECOPlusModReqSts']
  _slot_types = ['rospy_message_converter/LightIfInfo','int32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LightIf,DoorUnlckReq,RemLogSts,HornCtrlReq,ECOPlusModReqSts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyIfInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LightIf is None:
        self.LightIf = rospy_message_converter.msg.LightIfInfo()
      if self.DoorUnlckReq is None:
        self.DoorUnlckReq = 0
      if self.RemLogSts is None:
        self.RemLogSts = 0
      if self.HornCtrlReq is None:
        self.HornCtrlReq = 0
      if self.ECOPlusModReqSts is None:
        self.ECOPlusModReqSts = False
    else:
      self.LightIf = rospy_message_converter.msg.LightIfInfo()
      self.DoorUnlckReq = 0
      self.RemLogSts = 0
      self.HornCtrlReq = 0
      self.ECOPlusModReqSts = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.LightIf.HMAHiBeamReq, _x.LightIf.HMASts))
      length = len(self.LightIf.MirrLightReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LightIf.MirrLightReq))
      _x = self
      buff.write(_get_struct_3iB().pack(_x.DoorUnlckReq, _x.RemLogSts, _x.HornCtrlReq, _x.ECOPlusModReqSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LightIf is None:
        self.LightIf = rospy_message_converter.msg.LightIfInfo()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.LightIf.HMAHiBeamReq, _x.LightIf.HMASts,) = _get_struct_Bi().unpack(str[start:end])
      self.LightIf.HMAHiBeamReq = bool(self.LightIf.HMAHiBeamReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightIf.MirrLightReq = s.unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.DoorUnlckReq, _x.RemLogSts, _x.HornCtrlReq, _x.ECOPlusModReqSts,) = _get_struct_3iB().unpack(str[start:end])
      self.ECOPlusModReqSts = bool(self.ECOPlusModReqSts)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.LightIf.HMAHiBeamReq, _x.LightIf.HMASts))
      length = len(self.LightIf.MirrLightReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LightIf.MirrLightReq.tostring())
      _x = self
      buff.write(_get_struct_3iB().pack(_x.DoorUnlckReq, _x.RemLogSts, _x.HornCtrlReq, _x.ECOPlusModReqSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LightIf is None:
        self.LightIf = rospy_message_converter.msg.LightIfInfo()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.LightIf.HMAHiBeamReq, _x.LightIf.HMASts,) = _get_struct_Bi().unpack(str[start:end])
      self.LightIf.HMAHiBeamReq = bool(self.LightIf.HMAHiBeamReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LightIf.MirrLightReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 13
      (_x.DoorUnlckReq, _x.RemLogSts, _x.HornCtrlReq, _x.ECOPlusModReqSts,) = _get_struct_3iB().unpack(str[start:end])
      self.ECOPlusModReqSts = bool(self.ECOPlusModReqSts)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3iB = None
def _get_struct_3iB():
    global _struct_3iB
    if _struct_3iB is None:
        _struct_3iB = struct.Struct("<3iB")
    return _struct_3iB
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarPosition.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarPosition(genpy.Message):
  _md5sum = "28f9747af494848e972472fec41fea3b"
  _type = "rospy_message_converter/RadarPosition"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 rad_fc_height_no_load
float32 rad_fl_height_no_load
float32 rad_fr_height_no_load
float32 rad_rl_height_no_load
float32 rad_rr_height_no_load
float32 rad_fc_mount_angle
float32 rad_fl_mount_angle
float32 rad_fr_mount_angle
float32 rad_rl_mount_angle
float32 rad_rr_mount_angle
float32 rad_fc_lat_dst_2_center
float32 rad_fl_lat_dst_2_center
float32 rad_fr_lat_dst_2_center
float32 rad_rl_lat_dst_2_center
float32 rad_rr_lat_dst_2_center
float32 rad_fc_long_dst_2_rear_axle
float32 rad_fl_long_dst_2_rear_axle
float32 rad_fr_long_dst_2_rear_axle
float32 rad_rl_long_dst_2_rear_axle
float32 rad_rr_long_dst_2_rear_axle
"""
  __slots__ = ['rad_fc_height_no_load','rad_fl_height_no_load','rad_fr_height_no_load','rad_rl_height_no_load','rad_rr_height_no_load','rad_fc_mount_angle','rad_fl_mount_angle','rad_fr_mount_angle','rad_rl_mount_angle','rad_rr_mount_angle','rad_fc_lat_dst_2_center','rad_fl_lat_dst_2_center','rad_fr_lat_dst_2_center','rad_rl_lat_dst_2_center','rad_rr_lat_dst_2_center','rad_fc_long_dst_2_rear_axle','rad_fl_long_dst_2_rear_axle','rad_fr_long_dst_2_rear_axle','rad_rl_long_dst_2_rear_axle','rad_rr_long_dst_2_rear_axle']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rad_fc_height_no_load,rad_fl_height_no_load,rad_fr_height_no_load,rad_rl_height_no_load,rad_rr_height_no_load,rad_fc_mount_angle,rad_fl_mount_angle,rad_fr_mount_angle,rad_rl_mount_angle,rad_rr_mount_angle,rad_fc_lat_dst_2_center,rad_fl_lat_dst_2_center,rad_fr_lat_dst_2_center,rad_rl_lat_dst_2_center,rad_rr_lat_dst_2_center,rad_fc_long_dst_2_rear_axle,rad_fl_long_dst_2_rear_axle,rad_fr_long_dst_2_rear_axle,rad_rl_long_dst_2_rear_axle,rad_rr_long_dst_2_rear_axle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarPosition, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rad_fc_height_no_load is None:
        self.rad_fc_height_no_load = 0.
      if self.rad_fl_height_no_load is None:
        self.rad_fl_height_no_load = 0.
      if self.rad_fr_height_no_load is None:
        self.rad_fr_height_no_load = 0.
      if self.rad_rl_height_no_load is None:
        self.rad_rl_height_no_load = 0.
      if self.rad_rr_height_no_load is None:
        self.rad_rr_height_no_load = 0.
      if self.rad_fc_mount_angle is None:
        self.rad_fc_mount_angle = 0.
      if self.rad_fl_mount_angle is None:
        self.rad_fl_mount_angle = 0.
      if self.rad_fr_mount_angle is None:
        self.rad_fr_mount_angle = 0.
      if self.rad_rl_mount_angle is None:
        self.rad_rl_mount_angle = 0.
      if self.rad_rr_mount_angle is None:
        self.rad_rr_mount_angle = 0.
      if self.rad_fc_lat_dst_2_center is None:
        self.rad_fc_lat_dst_2_center = 0.
      if self.rad_fl_lat_dst_2_center is None:
        self.rad_fl_lat_dst_2_center = 0.
      if self.rad_fr_lat_dst_2_center is None:
        self.rad_fr_lat_dst_2_center = 0.
      if self.rad_rl_lat_dst_2_center is None:
        self.rad_rl_lat_dst_2_center = 0.
      if self.rad_rr_lat_dst_2_center is None:
        self.rad_rr_lat_dst_2_center = 0.
      if self.rad_fc_long_dst_2_rear_axle is None:
        self.rad_fc_long_dst_2_rear_axle = 0.
      if self.rad_fl_long_dst_2_rear_axle is None:
        self.rad_fl_long_dst_2_rear_axle = 0.
      if self.rad_fr_long_dst_2_rear_axle is None:
        self.rad_fr_long_dst_2_rear_axle = 0.
      if self.rad_rl_long_dst_2_rear_axle is None:
        self.rad_rl_long_dst_2_rear_axle = 0.
      if self.rad_rr_long_dst_2_rear_axle is None:
        self.rad_rr_long_dst_2_rear_axle = 0.
    else:
      self.rad_fc_height_no_load = 0.
      self.rad_fl_height_no_load = 0.
      self.rad_fr_height_no_load = 0.
      self.rad_rl_height_no_load = 0.
      self.rad_rr_height_no_load = 0.
      self.rad_fc_mount_angle = 0.
      self.rad_fl_mount_angle = 0.
      self.rad_fr_mount_angle = 0.
      self.rad_rl_mount_angle = 0.
      self.rad_rr_mount_angle = 0.
      self.rad_fc_lat_dst_2_center = 0.
      self.rad_fl_lat_dst_2_center = 0.
      self.rad_fr_lat_dst_2_center = 0.
      self.rad_rl_lat_dst_2_center = 0.
      self.rad_rr_lat_dst_2_center = 0.
      self.rad_fc_long_dst_2_rear_axle = 0.
      self.rad_fl_long_dst_2_rear_axle = 0.
      self.rad_fr_long_dst_2_rear_axle = 0.
      self.rad_rl_long_dst_2_rear_axle = 0.
      self.rad_rr_long_dst_2_rear_axle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20f().pack(_x.rad_fc_height_no_load, _x.rad_fl_height_no_load, _x.rad_fr_height_no_load, _x.rad_rl_height_no_load, _x.rad_rr_height_no_load, _x.rad_fc_mount_angle, _x.rad_fl_mount_angle, _x.rad_fr_mount_angle, _x.rad_rl_mount_angle, _x.rad_rr_mount_angle, _x.rad_fc_lat_dst_2_center, _x.rad_fl_lat_dst_2_center, _x.rad_fr_lat_dst_2_center, _x.rad_rl_lat_dst_2_center, _x.rad_rr_lat_dst_2_center, _x.rad_fc_long_dst_2_rear_axle, _x.rad_fl_long_dst_2_rear_axle, _x.rad_fr_long_dst_2_rear_axle, _x.rad_rl_long_dst_2_rear_axle, _x.rad_rr_long_dst_2_rear_axle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.rad_fc_height_no_load, _x.rad_fl_height_no_load, _x.rad_fr_height_no_load, _x.rad_rl_height_no_load, _x.rad_rr_height_no_load, _x.rad_fc_mount_angle, _x.rad_fl_mount_angle, _x.rad_fr_mount_angle, _x.rad_rl_mount_angle, _x.rad_rr_mount_angle, _x.rad_fc_lat_dst_2_center, _x.rad_fl_lat_dst_2_center, _x.rad_fr_lat_dst_2_center, _x.rad_rl_lat_dst_2_center, _x.rad_rr_lat_dst_2_center, _x.rad_fc_long_dst_2_rear_axle, _x.rad_fl_long_dst_2_rear_axle, _x.rad_fr_long_dst_2_rear_axle, _x.rad_rl_long_dst_2_rear_axle, _x.rad_rr_long_dst_2_rear_axle,) = _get_struct_20f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20f().pack(_x.rad_fc_height_no_load, _x.rad_fl_height_no_load, _x.rad_fr_height_no_load, _x.rad_rl_height_no_load, _x.rad_rr_height_no_load, _x.rad_fc_mount_angle, _x.rad_fl_mount_angle, _x.rad_fr_mount_angle, _x.rad_rl_mount_angle, _x.rad_rr_mount_angle, _x.rad_fc_lat_dst_2_center, _x.rad_fl_lat_dst_2_center, _x.rad_fr_lat_dst_2_center, _x.rad_rl_lat_dst_2_center, _x.rad_rr_lat_dst_2_center, _x.rad_fc_long_dst_2_rear_axle, _x.rad_fl_long_dst_2_rear_axle, _x.rad_fr_long_dst_2_rear_axle, _x.rad_rl_long_dst_2_rear_axle, _x.rad_rr_long_dst_2_rear_axle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.rad_fc_height_no_load, _x.rad_fl_height_no_load, _x.rad_fr_height_no_load, _x.rad_rl_height_no_load, _x.rad_rr_height_no_load, _x.rad_fc_mount_angle, _x.rad_fl_mount_angle, _x.rad_fr_mount_angle, _x.rad_rl_mount_angle, _x.rad_rr_mount_angle, _x.rad_fc_lat_dst_2_center, _x.rad_fl_lat_dst_2_center, _x.rad_fr_lat_dst_2_center, _x.rad_rl_lat_dst_2_center, _x.rad_rr_lat_dst_2_center, _x.rad_fc_long_dst_2_rear_axle, _x.rad_fl_long_dst_2_rear_axle, _x.rad_fr_long_dst_2_rear_axle, _x.rad_rl_long_dst_2_rear_axle, _x.rad_rr_long_dst_2_rear_axle,) = _get_struct_20f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20f = None
def _get_struct_20f():
    global _struct_20f
    if _struct_20f is None:
        _struct_20f = struct.Struct("<20f")
    return _struct_20f

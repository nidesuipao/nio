# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EHYSINOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EHYSINOutputs(genpy.Message):
  _md5sum = "94f63cfc9af3fea138227f146b8594e6"
  _type = "rospy_message_converter/EHYSINOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ObjectsDetection vision_objects
RadarSensor radar_info
RoadDetection vision_road
FailSafeDetection vision_failsafe
Features vision_feature
FreeSpaceDetection vision_fsp
TrafficLightDetection vision_traffic_light
TrafficSignDetection vision_traffic_sign
VehicleLightDetection vision_vehicle_light
VEH10ms vehicle_10ms
VEH50ms vehicle_50ms
SdMap sd_map
FctOut fct_out
VehicleInfo vehicle_config
EHYSINTopicTime radar_info_topic
EHYSINTopicTime vision_objects_topic
EHYSINTopicTime vision_road_topic
EHYSINTopicTime vision_failsafe_topic
EHYSINTopicTime vision_feature_topic
EHYSINTopicTime vision_fsp_topic
EHYSINTopicTime vision_traffic_light_topic
EHYSINTopicTime vision_traffic_sign_topic
EHYSINTopicTime vision_vehicle_light_topic
EHYSINTopicTime vehicle_10ms_topic
EHYSINTopicTime vehicle_50ms_topic
EHYSINTopicTime vehicle_fctout_topic
EHYSINTopicTime sd_map_topic
EHYSINTopicTime lidar_read_ts
EHYSINTopicTime vehicle_config_topic
EHYSINTopicTime dead_reckoning_latest_ts
ODOutputPb od_output
EHYSINTopicTime od_output_topic
LaneList lanelist
EHYSINTopicTime lanelist_topic
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ObjectsDetection
uint64 timestamp
StaticObjects[] staticobj
DynamicObjects dynamicobj
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/StaticObjects
uint32 OBS_Age
uint32 OBS_ID
int32 OBS_Type
float32 OBS_Type_Probability
float32 OBS_Lat_Distance
float32 OBS_Lat_Distance_STD
float32 OBS_Long_Distance
float32 OBS_Long_Distance_STD
float32 OBS_Object_Length
float32 OBS_Object_Length_STD
float32 OBS_Object_Width
float32 OBS_Object_Width_STD
float32 OBS_Object_Height
float32 OBS_Object_Height_STD
int32 source

================================================================================
MSG: rospy_message_converter/DynamicObjects
ObjInfo OBJ_Info
DynamicObj[] OBJ

================================================================================
MSG: rospy_message_converter/ObjInfo
uint32 OBJ_Object_Count
uint32 OBJ_VRU_Count
uint32 OBJ_VD_Count
uint32 OBJ_CIPV_ID
bool OBJ_CIPV_Lost
bool OBJ_Is_CCI
int32 OBJ_CCI_Side
uint32 OBJ_CCI_ID

================================================================================
MSG: rospy_message_converter/DynamicObj
int32 OBJ_Object_Class
uint32 OBJ_Age_Frame
uint32 OBJ_Object_ID
int32 OBJ_Color
float32 OBJ_Existence_Probability
bool OBJ_Is_Very_Close
int32 OBJ_Lane_Assignment
uint32 OBJ_Measuring_Status
int32 OBJ_Motion_Status
int32 OBJ_Motion_Category
uint32 OBJ_Is_Blocked_Parts
float32 OBJ_Heading
float32 OBJ_Heading_STD
float32 OBJ_Angle_Rate
float32 OBJ_Angle_Rate_STD
int32 OBJ_Brake_Light
int32 OBJ_Turn_Indicator
int32 OBJ_HB_Status
float32 OBJ_Dst_Left_Line
float32 OBJ_Dst_Right_Line
bool OBJ_Is_Blocked_Left
bool OBJ_Is_Blocked_Right
Position OBJ_Distance
Velocity OBJ_Abs_Velocity
Acceleration OBJ_Abs_Acc
Dimension OBJ_Dimension
int32 source
uint32 OBJ_Relate_ID
int32 OBJ_Object_Door_Left_Status
int32 OBJ_Object_Door_Right_Status
float32 OBJ_Cut_In_Lat_Distance
float32 OBJ_Cut_In_Lat_Distance_STD
float32 OBJ_Cut_In_Long_Distance
float32 OBJ_Cut_In_Long_Distance_STD
float32 OBJ_Cut_In_Angle
float32 OBJ_Cut_In_Angle_STD
float32 OBJ_Age_Second
float32 OBJ_Missing_Age_Second

================================================================================
MSG: rospy_message_converter/Position
float32 Long_Position
float32 Long_Position_STD
float32 Lat_Position
float32 Lat_Position_STD
float32 Vertical_Position
float32 Vertical_Position_STD

================================================================================
MSG: rospy_message_converter/Velocity
float32 Long_Velocity
float32 Long_Velocity_STD
float32 Lat_Velocity
float32 Lat_Velocity_STD
float32 Up_Velocity
float32 Up_Velocity_STD

================================================================================
MSG: rospy_message_converter/Acceleration
float32 Long_Acc
float32 Long_Acc_STD
float32 Lat_Acc
float32 Lat_Acc_STD
float32 Up_Acc
float32 Up_Acc_STD

================================================================================
MSG: rospy_message_converter/Dimension
float32 OBJ_Length
float32 OBJ_Length_STD
float32 OBJ_Width
float32 OBJ_Width_STD
float32 OBJ_Height
float32 OBJ_Height_STD

================================================================================
MSG: rospy_message_converter/RadarSensor
float32 ego_speed
float32 ego_acc
float32 ego_yawrate
RadarStatus[] status
RadarTracker[] trackers
RadarDetection[] detection_points
RadarFeature radar_feature
RadarGuardrailTracker radar_guardrail
RadarBarrierOutput radar_barrier
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RadarStatus
bool flg_blindness
bool flg_failure
bool flg_loss_comm_fault
bool flg_time_stamp_invalid
float32 mis_alignment_angle
int32 alignment_st
int32 sensor_location

================================================================================
MSG: rospy_message_converter/RadarTracker
uint64 timestamp
uint32 sync_bit
RadarObject[] objects

================================================================================
MSG: rospy_message_converter/RadarObject
RadarObjectValidStatus valid_status
uint32 source
ObjMotion motion
ObjMotionState motion_state
int32 classification
uint32 sub_class
float32 class_prob
float32 obstacle_prob
float32 conf
uint32 age
uint32 id
int32 ref_point
float32 object_rcs
float32 assoc_det_max_height
float32 assoc_det_min_height
float32 assoc_det_height_std
uint32 assoc_number_of_det
bool f_multi_measures
bool f_overhead_suspicious
uint32 unique_id
bool f_crossing

================================================================================
MSG: rospy_message_converter/RadarObjectValidStatus
bool flag_valid
bool flag_measured
bool flag_hist

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std

================================================================================
MSG: rospy_message_converter/ObjMotionState
bool is_valid
bool is_moving
bool is_movable
bool direction
bool was_moved
bool is_crossing

================================================================================
MSG: rospy_message_converter/RadarDetection
uint64 timestamp
uint32 sync_bit
RadarDetectionObject[] detection

================================================================================
MSG: rospy_message_converter/RadarDetectionObject
uint32 ID
int32 source
float32 range
float32 range_rate
float32 azimuth
float32 elevation_angle
float32 radar_cross_section
float32 azimuth_conf
float32 elevation_conf
float32 exist_prob

================================================================================
MSG: rospy_message_converter/RadarFeature
uint32[] acc_tar
uint32 aeb_tar

================================================================================
MSG: rospy_message_converter/RadarGuardrailTracker
RadarGuardrail guardrail_left
RadarGuardrail guardrail_right

================================================================================
MSG: rospy_message_converter/RadarGuardrail
float32 c0
float32 c1
float32 heading
float32 offset
float32 x_farthest_hist
uint32 lka_confidence

================================================================================
MSG: rospy_message_converter/RadarBarrierOutput
RadarBarrier barrier_left
RadarBarrier barrier_right

================================================================================
MSG: rospy_message_converter/RadarBarrier
float32[] coef
float32 dist_end
float32 dist_from
uint32 lka_confidence

================================================================================
MSG: rospy_message_converter/RoadDetection
uint64 timestamp
LaneDetection laneline
RoadSlop slop
LaneLPP lpp
Roadedge[] roadedge
StopLine[] stopline
GuidePoint guidepoint
LaneSemantic[] lanesemantic
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LaneDetection
float32 LD_Lane_Width
bool LD_Crossing_Flag
LaneLine[] line

================================================================================
MSG: rospy_message_converter/LaneLine
int32 LD_Role
LineProperty LD_First_Line
bool LD_Is_Multi_Clothoid
LineProperty LD_Second_Line
bool LD_Special_Point_Is_Detected
int32 LD_Special_Point_Type
Point LD_Special_Point
Point[] LD_Point
float32 LD_Dash_Average_Gap
float32 LD_Dash_Average_Length
bool LD_Crossing
uint32 LD_Crossing_ID
int32 LD_Measuring_Status
int32 LD_Prediction_Reason
uint32 LD_Track_ID
uint32 LD_Track_Age
int32 LD_Quality
float32 LD_Confidence
float32 LD_Marker_Width

================================================================================
MSG: rospy_message_converter/LineProperty
int32 LD_Type
int32 LD_Color
PolyLine LD_Line
float32 LD_Start
float32 LD_End
int32 LD_End_Reason

================================================================================
MSG: rospy_message_converter/PolyLine
float32 line_C0
float32 line_C1
float32 line_C2
float32 line_C3

================================================================================
MSG: rospy_message_converter/Point
float32 LD_Point_Lat
float32 LD_Point_Long
float32 LD_Point_Alti

================================================================================
MSG: rospy_message_converter/RoadSlop
bool LD_Road_Vertical_Surface_Available
float32 LD_Road_Vertical_Surface_Start
float32 LD_Road_Vertical_Surface_End
PolyLine LD_Road_Vertical_Surface

================================================================================
MSG: rospy_message_converter/LaneLPP
bool LPP_Available
int32 LPP_Source
float32 LPP_Ctrl_Point_Lat
float32 LPP_Ctrl_Point_Long
float32 LPP_Confidence
bool LPP_First_Valid
float32 LPP_First_VR_End
PolyLine LPP_First
bool LPP_Second_Valid
float32 LPP_Second_VR_End
PolyLine LPP_Second

================================================================================
MSG: rospy_message_converter/Roadedge
int32 LD_RE_Type
int32 LD_RE_Side
int32 LD_RE_From_Host_Index
uint32 LD_RE_ID
uint32 LD_RE_Age
float32 LD_RE_Height
float32 LD_RE_VR_Start
float32 LD_RE_VR_End
PolyLine LD_RE_Line
float32 LD_RE_Confidence
int32 LDRE_Class

================================================================================
MSG: rospy_message_converter/StopLine
bool SL_Zebra_Is_Detected
float32 SL_Zebra_Lat_0
float32 SL_Zebra_Long_0
float32 SL_Zebra_Lat_1
float32 SL_Zebra_Long_1
float32 SL_Zebra_Lat_2
float32 SL_Zebra_Long_2
float32 SL_Zebra_Lat_3
float32 SL_Zebra_Long_3
bool SL_Is_Detected
uint32 SL_ID
int32 SL_Type
int32 SL_Measure_Status
float32 SL_Probability
float32 SL_Long_Dist_L
float32 SL_Long_Dist_R
float32 SL_Lat_Dist_L
float32 SL_Lat_Dist_R
int32 SL_Lane_Assessment

================================================================================
MSG: rospy_message_converter/GuidePoint
bool INTP_Is_Highway_Merge_Left
bool INTP_Is_Highway_Merge_Right
bool INTP_Is_Highway_Exit_Left
bool INTP_Is_Highway_Exit_Right
InterestPoint[] INTP_Point

================================================================================
MSG: rospy_message_converter/InterestPoint
int32 INTP_Type
uint32 INTP_ID
uint32 INTP_Age
int32 INTP_Line_Role
float32 INTP_Long_Distance
float32 INTP_Lat_Distance
float32 INTP_Exist_Probability

================================================================================
MSG: rospy_message_converter/LaneSemantic
int32 SLD_Direction
uint32 SLD_ID
uint32 SLD_Count
float32 SLD_Lat
float32 SLD_Long
int32 SLD_Orientation
float32 SLD_Orientation_Probability
float32 SLD_Direction_Probability
int32 SLD_Role
int32 SLD_Type
float32 SLD_No_Park_Zone_Lat_0
float32 SLD_No_Park_Zone_Long_0
float32 SLD_No_Park_Zone_Lat_1
float32 SLD_No_Park_Zone_Long_1
float32 SLD_No_Park_Zone_Lat_2
float32 SLD_No_Park_Zone_Long_2
float32 SLD_No_Park_Zone_Lat_3
float32 SLD_No_Park_Zone_Long_3
int32 SLD_Road_Status

================================================================================
MSG: rospy_message_converter/FailSafeDetection
uint64 timestamp
FailSafe failsafe_FW
FailSafe failsafe_FN
FailSafe failsafe_FL
FailSafe failsafe_FR
FailSafe failsafe_R
FailSafe failsafe_RL
FailSafe failsafe_RR
FailSafe failsafe_SVC_Front
FailSafe failsafe_SVC_Rear
FailSafe failsafe_SVC_Left
FailSafe failsafe_SVC_Right
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FailSafe
uint32 FS_Rain
uint32 FS_Fog
uint32 FS_Snow
uint32 FS_Full_Blockage
uint32 FS_Partial_Blockage
uint32 FS_Lowsun
uint32 FS_Sunray
uint32 FS_Splash
uint32 FS_Windshield_Frozen
uint32 FS_Out_Of_Calibration
uint32 FS_Out_Of_Focus
uint32 FS_Blur
uint32 FS_Smeared_Halo
uint32 FS_illuminance

================================================================================
MSG: rospy_message_converter/Features
uint64 timestamp
FeatureAHC ahc
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FeatureAHC
int32 HLB_Decision
int32 HLB_Reason_Low_Beam

================================================================================
MSG: rospy_message_converter/FreeSpaceDetection
uint64 timestamp
FreeSpace[] freespace
int32 source
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FreeSpace
uint32 FSP_Obs_ID
int32 FSP_Lane_Assginment
float32 FSP_Range
float32 FSP_Azimuth_Angle
int32 FSP_Classification_Type
float32 FSP_Height
float32 FSP_Elevation_Angle
int32 FSP_Mobility_Status
float32 FSP_Existence_Prob

================================================================================
MSG: rospy_message_converter/TrafficLightDetection
uint64 timestamp
TrafficLight[] trafficlight
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/TrafficLight
int32 TFL_Color
uint32 TFL_Object_ID
uint32 TFL_LightBox_ID
float32 TFL_Lat_Distance
float32 TFL_Long_Distance
float32 TFL_Height
int32 TFL_Mode
int32 TFL_Shape
int32 TFL_Structure_Orientation
uint32 TFL_Timer

================================================================================
MSG: rospy_message_converter/TrafficSignDetection
uint64 timestamp
TrafficSign[] trafficsign
uint32 trafficsign_num
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/TrafficSign
uint32 TSR_ID
uint32 TSR_Age
int32 TSR_Name
int32 TSR_Shape
float32 TSR_Height
float32 TSR_Lat_Distance
float32 TSR_Long_Distance
int32 TSR_Filter_Type
int32 TSR_Relevancy
int32 TSR_Structure
float32 TSR_Panel_Width
float32 TSR_Panel_Height
float32 TSR_Confidence
float32 TSR_Name_Value
float32 TSR_Lat_Pos_P
float32 TSR_Long_Pos_P
float32 TSR_Panel_Width_P
float32 TSR_Panel_Height_P
int32 TSR_Color
float32 TSR_Confidence_Name
float32 TSR_Confidence_Value
float32 TSR_Relevancy_Value

================================================================================
MSG: rospy_message_converter/VehicleLightDetection
uint64 timestamp
VehicleLight[] vehiclelight
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/VehicleLight
uint32 VL_ID
uint32 VL_Num_Of_Vehicles
uint32 VL_Brightness
int32 VL_Type
float32 VL_Width
float32 VL_Width_STD
float32 VL_Height
float32 VL_Height_STD
float32 VL_Top_Angle
float32 VL_Bottom_Angle
float32 VL_Right_Angle
float32 VL_Left_Angle
float32 VL_Top_Angle_Velocity
float32 VL_Bottom_Velocity_Angle
float32 VL_Right_Velocity_Angle
float32 VL_Left_Velocity_Angle
float32 VL_Confidnece
bool VL_Is_SingleBar
bool VL_Is_New

================================================================================
MSG: rospy_message_converter/VEH10ms
StrSysInfo StrSys
BrkSysInfo BrkSys
PtInfo PT
WhlInfos Whl
VehDynInfo VehDyn
VehCtrlIfInfo VehCtrlIf
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/StrSysInfo
int32 StrAgFailSts
int32 StrAgCalSts
float32 StrWhlAgSAE
float32 StrWhlAgSpdSAE
int32 PnnAgVld
float32 PnnAgSAE
float32 PnnAgOffsetSAE
int32 EstRackFrcVld
float32 EstRackFrcSae
int32 MtrTqVld
float32 MtrTqSAE
int32 TorsBarTqVld
float32 TorsBarTqSAE
int32 EPSSts
int32 DrvngMod
bool RampSts
int32 ACIMtrTqVld
float32 ACIMtrTqSAE
uint32 Temperature
uint32 SupInfo
uint32 VMCHVIAvl
uint32 EPSReqTyp
bool BCUCTIAvl
int32 WarnLampReq
bool SteerWhlAgAndSpdValid
int32 SWCFailSts
int32 SteerColTiltCtrlSts
uint32 SteerColTiltPos
int32 SteerColTeleCtrlSts
uint32 SteerColTelescopePos
bool HODErrSts
int32 HOSts
int32 OverRideDetn
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkSysInfo
BrkPdlInfo BrkPdl
BrkPrsInfos BrkPrsInfo
PrkBrkInfos PrkBrk
int32 BrkOverHeat
int32 BrkHAZReq
int32 BCUBrkLiReq
uint32 StstSts
int32 NoBrkF
int32 SupInfo
int32 BrkFldLvl
int32 BrkPadWearSts
BrkFunInfo BrkFunSt
bool ExtBrkActv
float32 ExtBrkCp
uint32 ExtBrkSts
float32 MbRegenFrntAxleTar
uint32 MbRegenFrntAxleTarQ
float32 MbRegenReAxleTar
uint32 MbRegenReAxleTarQ
uint32 StabyMagin
uint32 StabyMaginQ
int32 BrkFldWarnReq
int32 BrkPadWearWarnReq
uint32 FCC1_StandstillStatus

================================================================================
MSG: rospy_message_converter/BrkPdlInfo
int32 TrvlCalSts
float32 Trvl
int32 BrkPedlSts
bool BrkpedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkPrsInfos
int32 BrkPrsVld
float32 BrkPrs
int32 BrkPrsOffsetVld
float32 BrkPrsOffset
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/PrkBrkInfos
int32 EPBSwtSts
int32 EPBSts
int32 EPBMod
bool CDPReq
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkFunInfo
bool BDWActv
bool ABAAvl
bool ABAActv
bool ABPAvl
bool ABPActv
bool ABSActv
int32 AVHSts
bool DTCActv
bool DWTActv
bool EBAAvl
bool EBAActv
bool EBDActv
bool HBAActv
int32 HDCSts
bool HHCAvl
bool HHCActv
bool TCSActv
bool TCSDeactv
bool VDCActv
bool VDCDeactv
bool EBDFailLampReq
bool VDCTCSLampInfo
bool VDCTCSFailLampReq
bool ABSFailLampReq
bool VDCTCSOnOfflampReq
bool AWBActv
bool AWBAvl
bool EBPActv
bool HBCActv
int32 ARPCfgSts
bool CDPActv
bool CDPAvail
bool ARPActv
bool DTCAvl
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/PtInfo
AccrPedalInfo AccrPedal
GearInfo Gear
MotorInfo[] Motor
bool VCURvsLampReq
bool VCUBrkLampReq
int32 CruiseStatus
int32 VCUEPBReq
float32 CruiseStoredSpeed
bool VCUPtWakeupReq
bool DCChrgrPluginSts
bool ACChrgrPluginSts
bool VCU_VehHldReq
bool VCU_BrkReqEna
bool VCU_ForceFctEna
float32 VCU_TarBrkFReq

================================================================================
MSG: rospy_message_converter/AccrPedalInfo
int32 EfcPosnVld
float32 EfcPosn
int32 ActPosnVld
float32 ActPosn
bool PedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/GearInfo
int32 SlctrPosnVld
int32 ActGearVld
int32 TrgtGearVld
int32 SlctrPosn
int32 ActGear
int32 TrgtGear
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/MotorInfo
int32 IntdMotTqVld
float32 IntdMotTq
int32 ActMotTqVld
float32 ActMotTq
int32 MotSpdVld
float32 MotSpd
uint32 SpdLimForFlt
int32 DampSts
int32 FailrSts
int32 HeatCap
int32 MotHoldSts
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlInfos
WhlDynInfo[] WhlDyn
WhlTpmsInfo[] WHlTpms
uint64 WhlDyn_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlDynInfo
int32 WhlSpdSts
int32 WhlSpdMovgDir
float32 WhlSpd
int32 WhlPlsCntrVld
uint32 WhlPlsCntr
uint64 WhlSpd_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlTpmsInfo
float32 Press
int32 Temp
uint32 SnsrFailSts
uint32 BatSts
int32 PressSts
uint32 DeltaPressSts
uint32 TempSts

================================================================================
MSG: rospy_message_converter/VehDynInfo
VehSpdInfos VehSpd
int32 AxAyYrsCalSts
int32 LgtASts
float32 LgtSAEAg
float32 LgtSAEAmpss
int32 LatASts
float32 LatSAEAg
float32 LatSAEAmpss
int32 YawRateSts
float32 YawRateSAERps
float32 YawRateSAEDps
float32 VehOdom
uint64 YawRate_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VehSpdInfos
int32 VehSpdSts
int32 VehMovgDir
float32 VehSpdkph
float32 VehSpdmps
float32 VehFiltLngAcc
int32 VehSpdASILDSts
float32 VehSpdASILD
float32 VehDispSpd
int32 VCUVehDispSpdSts
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VehCtrlIfInfo
LngCtrlFun LngCtrlIf
StrCtrlInfo LatCtrlIf

================================================================================
MSG: rospy_message_converter/LngCtrlFun
bool VLCAvl
bool VLCActv
float32 VLCTarDecel
int32 LLCFctSt
int32 LLCIntrrptErrTyp
bool AutoBrkgAvl
bool AutoBrkgActv
int32 ADTSts
int32 HldLampReq
bool FCC1_ForceFctEna
bool FCC1_BrkReqEna
float32 FCC1_TarBrkFReq
bool FCC1_VehHldReq
bool FCC1_VLCActv
float32 RVMCLgtDecCp
uint32 RVMCLgtSts
int32 VCUCruiseCtrlMod
int32 VMCBrkOvrd
float32 VMCLgtAccCp
float32 VMCLgtDecCp
uint32 VMCLgtSts
uint64[] timestamp_ptp_ns
float32 FCC1_VLCTarDecel
bool FCC1_VMCBrkOvrd

================================================================================
MSG: rospy_message_converter/StrCtrlInfo
int32 ActvExtIf
bool HIAvl
bool TOIAvl
bool DAIAvl
bool PAIAvl
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VEH50ms
SuspensionInfo Suspension
VehBodyInfo VehBody
DrvInfo DrvIn
UPAInfo UPA
PsapStationCan PsapCan
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SuspensionInfo
int32[] Lvl
bool[] LvlAdjm
bool LvlCalCmptl
bool CargoActv
int32 CrrntLvl
int32 TarLvl
bool ExtraHiPosn
bool ExtraLoPosn
bool EasyEntryEnaSts
int32 LvlAdjDrvgMod
int32 LvlAdjMod
int32 DampgCtrlMod
int32 DampgDrvgMod

================================================================================
MSG: rospy_message_converter/VehBodyInfo
VehStatusInfo VehStatus
DoorInfo Door
int32[] SeatOccpSts
uint32[] SeatBltSts
LightsInfo LightSts
WipperInfo WipperSts
TimingInfo Time
int32 CenLockSts
int32 TpmsSts
int32 DrvState
bool AmbTempValid
float32 AmbTemp
int32 TrailerModReq
int32 SWCAdjModReq
int32 NBSDrvrSts
int32 PrkgTyp
bool CrashDetd
bool AdsLampReq
float32 IntrTemp
int32 IntrTempVld
int32 MaiLiSet
int32 SDWReq
int32 UPAReq
bool HornCtrlSts
bool HeadLampsOn
int32 CDCCameraReq
bool ECOPlusModSts
int32 RpsKeyDist
int32[] MirrorStatus
int32 RpsMovReq
int32 RpsReq

================================================================================
MSG: rospy_message_converter/VehStatusInfo
int32 VehState
int32 VehStateASIL
int32 VehMode

================================================================================
MSG: rospy_message_converter/DoorInfo
int32[] DoorAjarSts
uint32 HoodAjarSts
uint32 TrAjarSts

================================================================================
MSG: rospy_message_converter/LightsInfo
int32[] FogLiSts
int32[] BeamSts
int32 HzrdWarnSts
int32[] TurnIndcrLiSts
int32[] MirrLigtSts
bool[] LgtErrBrkLi
bool[] LgtErrTurnIndcn
int32[] FogLiFctActvSts
uint32 LiSnsrData
bool LiSnsrFailSts
bool[] DowWarnAmbLeSts

================================================================================
MSG: rospy_message_converter/WipperInfo
int32 FrntWiprSts
int32 FrntWiperParkSts
int32 FrntWipMod
int32 FrntWiprReq

================================================================================
MSG: rospy_message_converter/TimingInfo
uint32 Yr
uint32 Mth
uint32 Day
uint32 Hr
uint32 Min
uint32 Sec

================================================================================
MSG: rospy_message_converter/DrvInfo
StrWhlSwtchInfo StrWhlSwtch
AdFunCfgInfo AdFunCfg
int32 FogLiPushSwtSts
int32 FrntWiprInterSpd
int32 FrntWiprSwtSts
int32 HiBeamSwtSts
int32 TurnIndcrSwtSts
int32 WiprAutoSwtSts
int32 WshrReWiprSwtSts
int32 SCMFailSts
int32 FogLiSCMCmd
int32 HiBeamSCMCmd
int32 ReWiprSCMCmd
int32 SVCAvl
uint32 NaviSpdLim
int32 WTIDispSt
int32 NaviSpdUnit
int32 NaviSpdLimSts
int32 NaviCurrentRoadTyp
uint32 NavCtryCod
CDCEqpmtInfo CDCEqpmt
int32 DA_TauGap_stored
DMSFncInfo DMSInfo
SVCFncInfo SVCInfo
int32 VehEgyMngtMod
float32 WheelBrkPReLe
float32 WheelBrkPFrntRi
float32 WheelBrkPFrntLe
float32 WheelBrkPReRi
int32 VehAccrModReq
int32 PwrSwapSteerWhlWarn
int32 DriverPSAPRequest
int32 PSAPParkViewStatus
int32 VehPrepReq
int32 StoreDrvrSlotSelnReq
bool LockConfig
uint32 DriverSAPAReq
uint32 DriverSAPASlotSelection

================================================================================
MSG: rospy_message_converter/StrWhlSwtchInfo
int32[] AdUpSwtSts
int32[] EnUpSwtSts

================================================================================
MSG: rospy_message_converter/AdFunCfgInfo
int32 AEBOnOffReq
int32 DASTactileOnOff
int32 DrvAlertSysOnOff
int32 FCTAOnOffCmd
int32 FCWSetReq
int32 LnAssistTctlOnOff
int32 LCAOnOff
int32 LCATctlWarnOnOff
int32 RCTAReq
int32 SetHMA
int32 SetLnAssiAidTyp
int32 SetLaneAssiSnvty
int32 RCTABReq
int32 SAPAPrkgModReq
int32 CDCFailSts
int32 Set360AP
int32 SetDA_ALCS
int32 SetDA_SpeedAssist
int32 SetDA_SteerAssist
int32 SetSWF
int32 ELKOnOff
int32 SdowOnOffReq
int32 GoNotifierSnvty
int32 DrowsinessSwtSts
int32 ELKSwtSts
int32 DistractionSwtSts
int32 SetDA_NOP
int32 SetSpeedCtrlSts
int32 CurveSpeedAssist
int32 TowModActv
int32 GoNotifierOnOff
bool AESOnOffSts
bool SwtichDA_NOP
int32 SetDA_NOPALC
bool ManHornSwtSts
bool TLNotifierOnOff
int32 SetDA_SetSpdOffs
int32 CfgTaskSwitch
int32 SetDA_SetSpdOffsValue

================================================================================
MSG: rospy_message_converter/CDCEqpmtInfo
bool AUDIOsts
bool HUDsts
bool ICSsts
bool ICsts

================================================================================
MSG: rospy_message_converter/DMSFncInfo
int32 DMSAlertLvl
int32 DMSAvlSts
int32 DMSDrvrAttention
uint32 DMSDrvrAttentionConfidence
int32 DMSDrvrEyeGazeDir
uint32 DMSDrvrEyeGazeDirConfidence
int32 DMSDrvrEyeSts
uint32 DMSDrvrEyeStsConfidence
int32 DMSDrvrHdPoseDir
uint32 DMSDrvrHdPoseDirConfidence
int32 DMSFailSafe
int32 DMSSts
int32 DMSDrvrFatigue
uint32 DMSDrvrFatigueConfidence

================================================================================
MSG: rospy_message_converter/SVCFncInfo
int32 SVCRiShaFb
int32 SVCReShaFb
int32 SVCLeShaFb
int32 SVCFrntShaFb
int32 F120ShaFb
int32 SVCLeShaReq
int32 SVCFrntShaReq
int32 SVCReShaReq
int32 F120ShaReq
int32 SVCRiShaReq

================================================================================
MSG: rospy_message_converter/UPAInfo
int32 SDWSts
int32 APASts
int32 MapObjSts
bool UpaSysDi
int32 UpaSysSts
bool UpaSysSrv
USSlotInfo[] USSlot
MapObjBaseType[] MapObj
ApaSdwType[] ApaSdw
UsRegnDstType[] UsRegnDst
int32 USSMode

================================================================================
MSG: rospy_message_converter/USSlotInfo
uint32 SlotSizeX
uint32 SlotSizeY
int32 SlotVehX
int32 SlotVehY
float32 SlotVehPsi
int32 SlotDepthRef
uint32 SlotIndex
int32 SlotType
int32 SlotSts
int32 SlotObj1Typ
int32 SlotObj1X
int32 SlotObj1Y
int32 SlotObj1Alpha
int32 SlotObj2Typ
int32 SlotObj2X
int32 SlotObj2Y
int32 SlotObj2Alpha

================================================================================
MSG: rospy_message_converter/MapObjBaseType
int32 MapObjTyp
float32 MapObjP1X
float32 MapObjP1Y
float32 MapObjP2X
float32 MapObjP2Y
float32 MapObjProblty
int32 MapObjHeiWarn
float32 MapObjHeiProblty
int32 MapObjHeiBrake

================================================================================
MSG: rospy_message_converter/ApaSdwType
uint32[] Dst

================================================================================
MSG: rospy_message_converter/UsRegnDstType
int32 SnsrFltSt
uint32[] RegnDst

================================================================================
MSG: rospy_message_converter/PsapStationCan
int32 ConnectionSts
int32 StationPlatformSts
int32 VehLongPosInStation
int32 VehLatPosInStation

================================================================================
MSG: rospy_message_converter/SdMap
AdasInfo adas_info
NavigationInfo navigation_info
Point3d map_loc
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/AdasInfo
bool is_adasmap_valid
uint32 m_adasmap_is_highway
SdMapSegment[] segment
ProfilePoint[] profile_point
Stub[] stub
SdMapTrafficSign[] traffic_sign
SdMapLaneConnection[] lane_connection
AdasMeta adas_meta
TrafficEvent[] traffic_event

================================================================================
MSG: rospy_message_converter/SdMapSegment
uint64 offset
uint64 index
int32 road_class
uint64 seg_spd_lmt
int32 seg_spd_lmt_type
bool is_tunnel
bool is_bridge
uint32 form_of_way
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 sub_path_idx
uint32 relative_probability
bool is_divided_road
bool is_build_up_area
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir

================================================================================
MSG: rospy_message_converter/ProfilePoint
uint64 offset
uint64 index
int32 type
uint64 value
bool is_control_point
float64 decoded_value

================================================================================
MSG: rospy_message_converter/Stub
uint64 offset
uint64 index
uint32 sub_path_idx
uint32 relative_probability
int32 road_class
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 form_of_way
uint32 turn_angle
bool is_last_stub
uint32 right_of_way
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir

================================================================================
MSG: rospy_message_converter/SdMapTrafficSign
uint64 offset
uint64 index
uint64 sign_type
uint64 value
uint32 lane
uint32 vehicle_specific
uint32 time_specific
uint64 condition
uint32 sign_location
bool position_valid
Point2d position_pt
float64 height

================================================================================
MSG: rospy_message_converter/Point2d
float64 longitude
float64 latitude

================================================================================
MSG: rospy_message_converter/SdMapLaneConnection
uint64 offset
uint64 index
uint32 lane_num
uint32 first_predecessor_lane
uint32 last_predecessor_lane
uint32 priority_predecessor_lane
uint32 arrow_marking
uint32 lane_type
uint32 line_marking
uint32 yield_flag

================================================================================
MSG: rospy_message_converter/AdasMeta
uint32 country_code

================================================================================
MSG: rospy_message_converter/TrafficEvent
uint64 offset
uint64 index
int32 status
int32 start_end_point
uint32 reliability
uint64 event_type

================================================================================
MSG: rospy_message_converter/NavigationInfo
HeartBeatInfo heart_beat_info
TurnInfo turn_info
SpeedLimitInfo[] speed_limit_info
int32 road_class

================================================================================
MSG: rospy_message_converter/HeartBeatInfo
uint64 heart_beat
int32 reliable_state
int32 navigation_state

================================================================================
MSG: rospy_message_converter/TurnInfo
uint64 dist_to_first_turn
uint64 first_turn_info
uint64 dist_to_second_turn
uint64 second_turn_info
uint64[] lanenr_info

================================================================================
MSG: rospy_message_converter/SpeedLimitInfo
uint64 speed_limit
int32 speed_limit_type

================================================================================
MSG: rospy_message_converter/Point3d
float64 longitude
float64 latitude
float64 altitude

================================================================================
MSG: rospy_message_converter/FctOut
AhcOut Ahc
LatCtrlOut LatCtrl
LonCtrlOut LonCtrl
HwaOut Hwa
LdwOut Ldw
SasOut Sas
HeaterOut Heater
ElkOut Elk
FunctionXstatus[] Function
AcmEdrOut AcmEdr
HMIIconOut HmiIcon
EasOut Eas
float64[] Reserved
SnsrStsOut SesrSts
RcvProtoPTPTimeOut RcvProtoPTPTime
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/AhcOut
int32 AhcSysSt
bool AhcHiBmReq

================================================================================
MSG: rospy_message_converter/LatCtrlOut
int32 ExtReqCAMFC
int32 LeLineTyp
int32 RiLineTyp
int32 LeTrackingSts
int32 RiTrackingSts
int32 LaneAssiTyp
int32 LkaSnsvty
float32 AbsltPinionAgReq
int32 EPSReqTyp
int32 LkaLnAsstSts
int32 LkaHODWarnSeq
bool LatCtrlActv
int32 EPSACITsuSup
int32 VMC1ACITsuSup
int32 LatCtrlTarLe
int32 LatCtrlTarRi
ALCSOut AlcsInfo

================================================================================
MSG: rospy_message_converter/ALCSOut
uint32 DA_LaneChgSupReason
uint32 AlcManeuverSts
uint32 DA_ALCSsts
uint32 ShowSetDA_ALCS

================================================================================
MSG: rospy_message_converter/LonCtrlOut
int32 ModeESP
int32 TauGapSet
bool ObjValid
float32 DsplVelocitySet
int32 GoNotfrReq
int32 TextInfo
int32 GoNotfrOnOffSts
int32 TSRSpdLimDataOnOffSts
int32 TakeOverReq
float32 TargetAccel
float32 CmftLowerAccl
float32 CmftUpprAccl
float32 MinJerkAccl
float32 MaxJerkAccl
int32 DecelToStopReq
int32 ShutdownModReq
int32 DrvOffReq
int32 BrkPreferReq
int32 MinBkrgReq
int32 ACCNPDrvMsg
int32 ClsObjTyp
float32 ClsObjDst
int32 TauGapChgDisp
bool DisplSetSpdEnbl
int32 VlcReqFct
uint32 SpdUnit
int32 DA_SetSpeedAnimation
uint32 DA_Inhibit

================================================================================
MSG: rospy_message_converter/HwaOut
int32 AccNpSts
int32 LongCtrlActv
int32 LatCtrlActv
int32 HodWarnReq
int32 HzrdLiReq
int32 DoorUnlckReq
int32 HodTakeOver
int32 NaNadSts
uint32 NaNadWTI
bool FreespaceIntrsn
bool ADC_VehDisp_Warn
bool DA_TurnIndctrLeTip
bool DA_TurnIndctrRiTip
bool DA_TurnIndctrLeLatch
bool DA_TurnIndctrRiLatch
bool DA_TurnIndctrLePush
bool DA_TurnIndctrRiPush
int32 DA_NOP_Avl
bool NeedNOPCtrl
uint32 DA_NOP_WTIs
uint32 DA_iACC_WTIs
uint32 DA_Pilot_WTIs
bool DA_SysFailSymbol

================================================================================
MSG: rospy_message_converter/LdwOut
int32 AdasLeLine
int32 AdasRiLine
int32 LaneAsstSts
int32 EPSReqTyp
int32 Snvty
int32 LaneAsstTyp
int32 HapticOnOffSts

================================================================================
MSG: rospy_message_converter/SasOut
uint32 SpeedLimitValue
uint32 SpeedUnit
int32 SpeedLimitAttribute
int32 SpeedLimitTakeover
uint32 SupSignType
uint32 SupSignAttribute
uint32 RoadFeatureWarningSign
uint32 TrafficLightSts
uint32 LocalHazards
int32 SLIFState
int32 SLWFWarnTrigger

================================================================================
MSG: rospy_message_converter/HeaterOut
bool WSHeatReq
bool WSHeatReqValid

================================================================================
MSG: rospy_message_converter/ElkOut
int32 ElkSts
int32 ESFWarningSts

================================================================================
MSG: rospy_message_converter/FunctionXstatus
string FunctionName
int32 FunctionID
int32 FuncSts
int32 ReqFunctionID

================================================================================
MSG: rospy_message_converter/AcmEdrOut
uint32 acsf_b1_sts_edr
uint32 acsf_b2_sts_edr
uint32 acsf_c_sts_edr
uint32 acsf_d_sts_edr
uint32 acsf_e_sts_edr
uint32 lane_assist_sts_edr
uint32 ldw_lka_lane_assi_typ_edr
uint32 adas_le_line_edr
uint32 adas_ri_line_edr
uint32 elk_sts_edr
uint32 esf_warning_sts_edr
uint32 acc_sts_edr

================================================================================
MSG: rospy_message_converter/HMIIconOut
uint32 ShowSetSWF
bool ShowSetDA_ALCS
uint32 ShowSetDA_SpdAssist
bool ShowSetDA_SetSpdCtrl
uint32 ShowSetDA_SteerAssist
bool ShowSetDA_CurveSpdAssist
uint32 ReRADfeatures_FactoryDft
uint32 LaneFeautres_FactoryDft

================================================================================
MSG: rospy_message_converter/EasOut
uint32 EASSts
uint32 EASWarningLv
uint32 RpsLockUnlckCtrl
bool EasCall

================================================================================
MSG: rospy_message_converter/SnsrStsOut
int32 LidarSts
int32 Camera_FrntWideSts

================================================================================
MSG: rospy_message_converter/RcvProtoPTPTimeOut
uint64 function_arb_out_ptp_ts
uint64 sd_map_ptp_ts
uint64 nop_functionstatus_ptp_ts
uint64 nop_speedlimitvalue_ptp_ts
uint64 nop_vehicleout_ptp_ts
uint64 side_feature_ptp_ts
uint64 vision_illumnance_flag_ptp_ts
uint64 vision_road_detection_ptp_ts
uint64 vehicle_10ms_ptp_ts
uint64 vehicle_50ms_ptp_ts
uint64 ehy_lpp_outputs_ptp_ts
uint64 ehy_obf_outputs_ptp_ts
uint64 ehy_rme_road_outputs_ptp_ts
uint64 ehy_tpp_outputs_ptp_ts
uint64 ehy_tse_outputs_ptp_ts
uint64 ehy_tsi_outputs_ptp_ts
uint64[] reserved_ptp_ts

================================================================================
MSG: rospy_message_converter/VehicleInfo
bool is_vehicle_info_valid
FeatureVehInfo feature_vehicle_info
CalVehInfo cal_vehicle_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FeatureVehInfo
float32 wheel_base
float32 veh_overall_length
float32 veh_overall_width
float32 veh_width
float32 veh_height
float32 front_tread_width
float32 rear_tread_width
MartixPair2D[] steer_ratio_martix_left_turn
MartixPair2D[] steer_ratio_martix_right_turn
float32 front_bumper_to_rear_axle
float32 front_main_cam_to_front_bumper
float32 front_narrow_cam_to_front_bumper
RadarPosition radar_position

================================================================================
MSG: rospy_message_converter/MartixPair2D
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/RadarPosition
float32 rad_fc_height_no_load
float32 rad_fl_height_no_load
float32 rad_fr_height_no_load
float32 rad_rl_height_no_load
float32 rad_rr_height_no_load
float32 rad_fc_mount_angle
float32 rad_fl_mount_angle
float32 rad_fr_mount_angle
float32 rad_rl_mount_angle
float32 rad_rr_mount_angle
float32 rad_fc_lat_dst_2_center
float32 rad_fl_lat_dst_2_center
float32 rad_fr_lat_dst_2_center
float32 rad_rl_lat_dst_2_center
float32 rad_rr_lat_dst_2_center
float32 rad_fc_long_dst_2_rear_axle
float32 rad_fl_long_dst_2_rear_axle
float32 rad_fr_long_dst_2_rear_axle
float32 rad_rl_long_dst_2_rear_axle
float32 rad_rr_long_dst_2_rear_axle

================================================================================
MSG: rospy_message_converter/CalVehInfo
float32 veh_calib_height
float32 veh_width
float32 veh_fwheel2head
float32 veh_rwheel2tail
float32 veh_wheel_base
CameraLocation camera_location
LidarLocation lidar_location

================================================================================
MSG: rospy_message_converter/CameraLocation
SensorLocation front_wide
SensorLocation front_narrow
SensorLocation front_right
SensorLocation front_left
SensorLocation rear_right
SensorLocation rear_left
SensorLocation rear_narrow
SensorLocation svc_front
SensorLocation svc_rear
SensorLocation svc_left
SensorLocation svc_right

================================================================================
MSG: rospy_message_converter/SensorLocation
float32[] angle
float32[] distance

================================================================================
MSG: rospy_message_converter/LidarLocation
SensorLocation lidar_front

================================================================================
MSG: rospy_message_converter/EHYSINTopicTime
uint64 received_topic_publish_ts
uint64 received_topic_counter

================================================================================
MSG: rospy_message_converter/ODOutputPb
SensorHeader[] sensors
uint64 cooking_ts
uint64 send_ts
LidarObject[] lidar_result
CameraObject[] cam_result
StaticCameraObject[] static_cam_result
FailsafeObject[] failsafe_result
string reserved
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SensorHeader
uint32 sensor_id
uint64 measuring_ts

================================================================================
MSG: rospy_message_converter/LidarObject
uint32 sensor_id
uint32 object_id
int32 class_type
float32 x
float32 y
float32 z
float32 width
float32 height
float32 length
float32 yaw
float32 score
float32 second_return_ration
float32 high_reflection_ration
float32[] statistics_feature

================================================================================
MSG: rospy_message_converter/CameraObject
uint32 sensor_id
uint32 object_id
float32 score
int32 class_type
Mono3D mono3d
float32 batch_id
float32 subtype
float32[] subtype_scores
float32[] occlusion
float32[] box
float32[] kpts
float32[] kpts_score
float32[] uncertainty_2d
float32[] uncertainty_3d
float32[] reid_feature
float32[] theta2d
float32 has_person

================================================================================
MSG: rospy_message_converter/Mono3D
float32 x
float32 y
float32 z
float32 width
float32 height
float32 length
float32 theta

================================================================================
MSG: rospy_message_converter/StaticCameraObject
uint32 sensor_id
uint32 object_id
float32 score
int32 class_type
Mono3D mono3d
float32 batch_id
float32 subtype
float32[] subtype_scores
float32[] occlusion
float32[] box
float32[] uncertainty_2d
float32[] uncertainty_3d

================================================================================
MSG: rospy_message_converter/FailsafeObject
uint32 full_blockage_pred
float32 full_blockage_score
uint32 low_sun_pred
float32 low_sun_score
uint32 partial_blockage_pred
float32 partial_blockage_score
uint32 rain_pred
float32 rain_score
uint32 windshield_frozen_pred
float32 windshield_frozen_score

================================================================================
MSG: rospy_message_converter/LaneList
uint32 LL_LANE_NUM
PointList_2D[] LL_Lane_List
uint64 time_meas
string image_data
SpecialPointList_2D LL_SpecialPoint_List
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/PointList_2D
uint32 PL_POINT_NUM
Point_2D[] PL_Points_List
LineProperty_2D PL_Line_Property
uint32 sensor_id

================================================================================
MSG: rospy_message_converter/Point_2D
float32 LD_Point_x
float32 LD_Point_y

================================================================================
MSG: rospy_message_converter/LineProperty_2D
int32 LD_Type
int32 LD_Color
int32 LD_Class
int32 LD_Abrasion
int32 LD_Cross
int32 LD_LaneRole

================================================================================
MSG: rospy_message_converter/SpecialPointList_2D
uint32 SPL_POINT_NUM
Point_2D[] SPL_Points_List
int32[] SPL_Type
uint32[] sensor_id_list
"""
  __slots__ = ['vision_objects','radar_info','vision_road','vision_failsafe','vision_feature','vision_fsp','vision_traffic_light','vision_traffic_sign','vision_vehicle_light','vehicle_10ms','vehicle_50ms','sd_map','fct_out','vehicle_config','radar_info_topic','vision_objects_topic','vision_road_topic','vision_failsafe_topic','vision_feature_topic','vision_fsp_topic','vision_traffic_light_topic','vision_traffic_sign_topic','vision_vehicle_light_topic','vehicle_10ms_topic','vehicle_50ms_topic','vehicle_fctout_topic','sd_map_topic','lidar_read_ts','vehicle_config_topic','dead_reckoning_latest_ts','od_output','od_output_topic','lanelist','lanelist_topic','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/ObjectsDetection','rospy_message_converter/RadarSensor','rospy_message_converter/RoadDetection','rospy_message_converter/FailSafeDetection','rospy_message_converter/Features','rospy_message_converter/FreeSpaceDetection','rospy_message_converter/TrafficLightDetection','rospy_message_converter/TrafficSignDetection','rospy_message_converter/VehicleLightDetection','rospy_message_converter/VEH10ms','rospy_message_converter/VEH50ms','rospy_message_converter/SdMap','rospy_message_converter/FctOut','rospy_message_converter/VehicleInfo','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/ODOutputPb','rospy_message_converter/EHYSINTopicTime','rospy_message_converter/LaneList','rospy_message_converter/EHYSINTopicTime','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vision_objects,radar_info,vision_road,vision_failsafe,vision_feature,vision_fsp,vision_traffic_light,vision_traffic_sign,vision_vehicle_light,vehicle_10ms,vehicle_50ms,sd_map,fct_out,vehicle_config,radar_info_topic,vision_objects_topic,vision_road_topic,vision_failsafe_topic,vision_feature_topic,vision_fsp_topic,vision_traffic_light_topic,vision_traffic_sign_topic,vision_vehicle_light_topic,vehicle_10ms_topic,vehicle_50ms_topic,vehicle_fctout_topic,sd_map_topic,lidar_read_ts,vehicle_config_topic,dead_reckoning_latest_ts,od_output,od_output_topic,lanelist,lanelist_topic,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EHYSINOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vision_objects is None:
        self.vision_objects = rospy_message_converter.msg.ObjectsDetection()
      if self.radar_info is None:
        self.radar_info = rospy_message_converter.msg.RadarSensor()
      if self.vision_road is None:
        self.vision_road = rospy_message_converter.msg.RoadDetection()
      if self.vision_failsafe is None:
        self.vision_failsafe = rospy_message_converter.msg.FailSafeDetection()
      if self.vision_feature is None:
        self.vision_feature = rospy_message_converter.msg.Features()
      if self.vision_fsp is None:
        self.vision_fsp = rospy_message_converter.msg.FreeSpaceDetection()
      if self.vision_traffic_light is None:
        self.vision_traffic_light = rospy_message_converter.msg.TrafficLightDetection()
      if self.vision_traffic_sign is None:
        self.vision_traffic_sign = rospy_message_converter.msg.TrafficSignDetection()
      if self.vision_vehicle_light is None:
        self.vision_vehicle_light = rospy_message_converter.msg.VehicleLightDetection()
      if self.vehicle_10ms is None:
        self.vehicle_10ms = rospy_message_converter.msg.VEH10ms()
      if self.vehicle_50ms is None:
        self.vehicle_50ms = rospy_message_converter.msg.VEH50ms()
      if self.sd_map is None:
        self.sd_map = rospy_message_converter.msg.SdMap()
      if self.fct_out is None:
        self.fct_out = rospy_message_converter.msg.FctOut()
      if self.vehicle_config is None:
        self.vehicle_config = rospy_message_converter.msg.VehicleInfo()
      if self.radar_info_topic is None:
        self.radar_info_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_objects_topic is None:
        self.vision_objects_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_road_topic is None:
        self.vision_road_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_failsafe_topic is None:
        self.vision_failsafe_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_feature_topic is None:
        self.vision_feature_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_fsp_topic is None:
        self.vision_fsp_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_traffic_light_topic is None:
        self.vision_traffic_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_traffic_sign_topic is None:
        self.vision_traffic_sign_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_vehicle_light_topic is None:
        self.vision_vehicle_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_10ms_topic is None:
        self.vehicle_10ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_50ms_topic is None:
        self.vehicle_50ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_fctout_topic is None:
        self.vehicle_fctout_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.sd_map_topic is None:
        self.sd_map_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.lidar_read_ts is None:
        self.lidar_read_ts = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_config_topic is None:
        self.vehicle_config_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.dead_reckoning_latest_ts is None:
        self.dead_reckoning_latest_ts = rospy_message_converter.msg.EHYSINTopicTime()
      if self.od_output is None:
        self.od_output = rospy_message_converter.msg.ODOutputPb()
      if self.od_output_topic is None:
        self.od_output_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.lanelist is None:
        self.lanelist = rospy_message_converter.msg.LaneList()
      if self.lanelist_topic is None:
        self.lanelist_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.vision_objects = rospy_message_converter.msg.ObjectsDetection()
      self.radar_info = rospy_message_converter.msg.RadarSensor()
      self.vision_road = rospy_message_converter.msg.RoadDetection()
      self.vision_failsafe = rospy_message_converter.msg.FailSafeDetection()
      self.vision_feature = rospy_message_converter.msg.Features()
      self.vision_fsp = rospy_message_converter.msg.FreeSpaceDetection()
      self.vision_traffic_light = rospy_message_converter.msg.TrafficLightDetection()
      self.vision_traffic_sign = rospy_message_converter.msg.TrafficSignDetection()
      self.vision_vehicle_light = rospy_message_converter.msg.VehicleLightDetection()
      self.vehicle_10ms = rospy_message_converter.msg.VEH10ms()
      self.vehicle_50ms = rospy_message_converter.msg.VEH50ms()
      self.sd_map = rospy_message_converter.msg.SdMap()
      self.fct_out = rospy_message_converter.msg.FctOut()
      self.vehicle_config = rospy_message_converter.msg.VehicleInfo()
      self.radar_info_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_objects_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_road_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_failsafe_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_feature_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_fsp_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_traffic_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_traffic_sign_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vision_vehicle_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vehicle_10ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vehicle_50ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.vehicle_fctout_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.sd_map_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.lidar_read_ts = rospy_message_converter.msg.EHYSINTopicTime()
      self.vehicle_config_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.dead_reckoning_latest_ts = rospy_message_converter.msg.EHYSINTopicTime()
      self.od_output = rospy_message_converter.msg.ODOutputPb()
      self.od_output_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.lanelist = rospy_message_converter.msg.LaneList()
      self.lanelist_topic = rospy_message_converter.msg.EHYSINTopicTime()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.vision_objects.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.vision_objects.staticobj)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_objects.staticobj:
        _x = val1
        buff.write(_get_struct_2Ii11fi().pack(_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source))
      _x = self
      buff.write(_get_struct_4I2BiI().pack(_x.vision_objects.dynamicobj.OBJ_Info.OBJ_Object_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VRU_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VD_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_ID, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_Side, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_ID))
      length = len(self.vision_objects.dynamicobj.OBJ)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_objects.dynamicobj.OBJ:
        _x = val1
        buff.write(_get_struct_i2IifBiI2iI4f3i2f2B().pack(_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right))
        _v1 = val1.OBJ_Distance
        _x = _v1
        buff.write(_get_struct_6f().pack(_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD))
        _v2 = val1.OBJ_Abs_Velocity
        _x = _v2
        buff.write(_get_struct_6f().pack(_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD))
        _v3 = val1.OBJ_Abs_Acc
        _x = _v3
        buff.write(_get_struct_6f().pack(_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD))
        _v4 = val1.OBJ_Dimension
        _x = _v4
        buff.write(_get_struct_6f().pack(_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD))
        _x = val1
        buff.write(_get_struct_iI2i8f().pack(_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second))
      _x = self.vision_objects.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_objects.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3f().pack(_x.vision_objects.counter, _x.vision_objects.publish_ts, _x.radar_info.ego_speed, _x.radar_info.ego_acc, _x.radar_info.ego_yawrate))
      length = len(self.radar_info.status)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_info.status:
        _x = val1
        buff.write(_get_struct_4Bf2i().pack(_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location))
      length = len(self.radar_info.trackers)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_info.trackers:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.objects:
          _v5 = val2.valid_status
          _x = _v5
          buff.write(_get_struct_3B().pack(_x.flag_valid, _x.flag_measured, _x.flag_hist))
          _x = val2.source
          buff.write(_get_struct_I().pack(_x))
          _v6 = val2.motion
          _v7 = _v6.pos
          _x = _v7
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v8 = _v6.pos_std
          _x = _v8
          buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
          _v9 = _v6.vel
          _x = _v9
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _v10 = _v6.vel_std
          _x = _v10
          buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
          _v11 = _v6.acc
          _x = _v11
          buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
          _v12 = _v6.acc_std
          _x = _v12
          buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
          _v13 = _v6.size
          _x = _v13
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v14 = _v6.size_std
          _x = _v14
          buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
          _x = _v6
          buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
          _v15 = val2.motion_state
          _x = _v15
          buff.write(_get_struct_6B().pack(_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing))
          _x = val2
          buff.write(_get_struct_iI3f2Ii4fI2BIB().pack(_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
      length = len(self.radar_info.detection_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_info.detection_points:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.detection)
        buff.write(_struct_I.pack(length))
        for val2 in val1.detection:
          _x = val2
          buff.write(_get_struct_Ii8f().pack(_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob))
      length = len(self.radar_info.radar_feature.acc_tar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.radar_info.radar_feature.acc_tar))
      _x = self
      buff.write(_get_struct_I5fI5fI().pack(_x.radar_info.radar_feature.aeb_tar, _x.radar_info.radar_guardrail.guardrail_left.c0, _x.radar_info.radar_guardrail.guardrail_left.c1, _x.radar_info.radar_guardrail.guardrail_left.heading, _x.radar_info.radar_guardrail.guardrail_left.offset, _x.radar_info.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_left.lka_confidence, _x.radar_info.radar_guardrail.guardrail_right.c0, _x.radar_info.radar_guardrail.guardrail_right.c1, _x.radar_info.radar_guardrail.guardrail_right.heading, _x.radar_info.radar_guardrail.guardrail_right.offset, _x.radar_info.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_right.lka_confidence))
      length = len(self.radar_info.radar_barrier.barrier_left.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.radar_info.radar_barrier.barrier_left.coef))
      _x = self
      buff.write(_get_struct_2fI().pack(_x.radar_info.radar_barrier.barrier_left.dist_end, _x.radar_info.radar_barrier.barrier_left.dist_from, _x.radar_info.radar_barrier.barrier_left.lka_confidence))
      length = len(self.radar_info.radar_barrier.barrier_right.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.radar_info.radar_barrier.barrier_right.coef))
      _x = self
      buff.write(_get_struct_2fIQ().pack(_x.radar_info.radar_barrier.barrier_right.dist_end, _x.radar_info.radar_barrier.barrier_right.dist_from, _x.radar_info.radar_barrier.barrier_right.lka_confidence, _x.radar_info.publish_ptp_ts))
      _x = self.radar_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3QfB().pack(_x.radar_info.counter, _x.radar_info.publish_ts, _x.vision_road.timestamp, _x.vision_road.laneline.LD_Lane_Width, _x.vision_road.laneline.LD_Crossing_Flag))
      length = len(self.vision_road.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v16 = val1.LD_First_Line
        _x = _v16
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v17 = _v16.LD_Line
        _x = _v17
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v16
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v18 = val1.LD_Second_Line
        _x = _v18
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v19 = _v18.LD_Line
        _x = _v19
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v18
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v20 = val1.LD_Special_Point
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.vision_road.slop.LD_Road_Vertical_Surface_Available, _x.vision_road.slop.LD_Road_Vertical_Surface_Start, _x.vision_road.slop.LD_Road_Vertical_Surface_End, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C0, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C1, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C2, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C3, _x.vision_road.lpp.LPP_Available, _x.vision_road.lpp.LPP_Source, _x.vision_road.lpp.LPP_Ctrl_Point_Lat, _x.vision_road.lpp.LPP_Ctrl_Point_Long, _x.vision_road.lpp.LPP_Confidence, _x.vision_road.lpp.LPP_First_Valid, _x.vision_road.lpp.LPP_First_VR_End, _x.vision_road.lpp.LPP_First.line_C0, _x.vision_road.lpp.LPP_First.line_C1, _x.vision_road.lpp.LPP_First.line_C2, _x.vision_road.lpp.LPP_First.line_C3, _x.vision_road.lpp.LPP_Second_Valid, _x.vision_road.lpp.LPP_Second_VR_End, _x.vision_road.lpp.LPP_Second.line_C0, _x.vision_road.lpp.LPP_Second.line_C1, _x.vision_road.lpp.LPP_Second.line_C2, _x.vision_road.lpp.LPP_Second.line_C3))
      length = len(self.vision_road.roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End))
        _v21 = val1.LD_RE_Line
        _x = _v21
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = val1
        buff.write(_get_struct_fi().pack(_x.LD_RE_Confidence, _x.LDRE_Class))
      length = len(self.vision_road.stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.vision_road.guidepoint.INTP_Is_Highway_Merge_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Merge_Right, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Right))
      length = len(self.vision_road.guidepoint.INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.guidepoint.INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
      length = len(self.vision_road.lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status))
      _x = self.vision_road.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_road.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q154IQ().pack(_x.vision_road.counter, _x.vision_road.publish_ts, _x.vision_failsafe.timestamp, _x.vision_failsafe.failsafe_FW.FS_Rain, _x.vision_failsafe.failsafe_FW.FS_Fog, _x.vision_failsafe.failsafe_FW.FS_Snow, _x.vision_failsafe.failsafe_FW.FS_Full_Blockage, _x.vision_failsafe.failsafe_FW.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FW.FS_Lowsun, _x.vision_failsafe.failsafe_FW.FS_Sunray, _x.vision_failsafe.failsafe_FW.FS_Splash, _x.vision_failsafe.failsafe_FW.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FW.FS_Blur, _x.vision_failsafe.failsafe_FW.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FW.FS_illuminance, _x.vision_failsafe.failsafe_FN.FS_Rain, _x.vision_failsafe.failsafe_FN.FS_Fog, _x.vision_failsafe.failsafe_FN.FS_Snow, _x.vision_failsafe.failsafe_FN.FS_Full_Blockage, _x.vision_failsafe.failsafe_FN.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FN.FS_Lowsun, _x.vision_failsafe.failsafe_FN.FS_Sunray, _x.vision_failsafe.failsafe_FN.FS_Splash, _x.vision_failsafe.failsafe_FN.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FN.FS_Blur, _x.vision_failsafe.failsafe_FN.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FN.FS_illuminance, _x.vision_failsafe.failsafe_FL.FS_Rain, _x.vision_failsafe.failsafe_FL.FS_Fog, _x.vision_failsafe.failsafe_FL.FS_Snow, _x.vision_failsafe.failsafe_FL.FS_Full_Blockage, _x.vision_failsafe.failsafe_FL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FL.FS_Lowsun, _x.vision_failsafe.failsafe_FL.FS_Sunray, _x.vision_failsafe.failsafe_FL.FS_Splash, _x.vision_failsafe.failsafe_FL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FL.FS_Blur, _x.vision_failsafe.failsafe_FL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FL.FS_illuminance, _x.vision_failsafe.failsafe_FR.FS_Rain, _x.vision_failsafe.failsafe_FR.FS_Fog, _x.vision_failsafe.failsafe_FR.FS_Snow, _x.vision_failsafe.failsafe_FR.FS_Full_Blockage, _x.vision_failsafe.failsafe_FR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FR.FS_Lowsun, _x.vision_failsafe.failsafe_FR.FS_Sunray, _x.vision_failsafe.failsafe_FR.FS_Splash, _x.vision_failsafe.failsafe_FR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FR.FS_Blur, _x.vision_failsafe.failsafe_FR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FR.FS_illuminance, _x.vision_failsafe.failsafe_R.FS_Rain, _x.vision_failsafe.failsafe_R.FS_Fog, _x.vision_failsafe.failsafe_R.FS_Snow, _x.vision_failsafe.failsafe_R.FS_Full_Blockage, _x.vision_failsafe.failsafe_R.FS_Partial_Blockage, _x.vision_failsafe.failsafe_R.FS_Lowsun, _x.vision_failsafe.failsafe_R.FS_Sunray, _x.vision_failsafe.failsafe_R.FS_Splash, _x.vision_failsafe.failsafe_R.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_R.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_R.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_R.FS_Blur, _x.vision_failsafe.failsafe_R.FS_Smeared_Halo, _x.vision_failsafe.failsafe_R.FS_illuminance, _x.vision_failsafe.failsafe_RL.FS_Rain, _x.vision_failsafe.failsafe_RL.FS_Fog, _x.vision_failsafe.failsafe_RL.FS_Snow, _x.vision_failsafe.failsafe_RL.FS_Full_Blockage, _x.vision_failsafe.failsafe_RL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RL.FS_Lowsun, _x.vision_failsafe.failsafe_RL.FS_Sunray, _x.vision_failsafe.failsafe_RL.FS_Splash, _x.vision_failsafe.failsafe_RL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RL.FS_Blur, _x.vision_failsafe.failsafe_RL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RL.FS_illuminance, _x.vision_failsafe.failsafe_RR.FS_Rain, _x.vision_failsafe.failsafe_RR.FS_Fog, _x.vision_failsafe.failsafe_RR.FS_Snow, _x.vision_failsafe.failsafe_RR.FS_Full_Blockage, _x.vision_failsafe.failsafe_RR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RR.FS_Lowsun, _x.vision_failsafe.failsafe_RR.FS_Sunray, _x.vision_failsafe.failsafe_RR.FS_Splash, _x.vision_failsafe.failsafe_RR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RR.FS_Blur, _x.vision_failsafe.failsafe_RR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RR.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Front.FS_Rain, _x.vision_failsafe.failsafe_SVC_Front.FS_Fog, _x.vision_failsafe.failsafe_SVC_Front.FS_Snow, _x.vision_failsafe.failsafe_SVC_Front.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Front.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Front.FS_Splash, _x.vision_failsafe.failsafe_SVC_Front.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Front.FS_Blur, _x.vision_failsafe.failsafe_SVC_Front.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Front.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Rear.FS_Rain, _x.vision_failsafe.failsafe_SVC_Rear.FS_Fog, _x.vision_failsafe.failsafe_SVC_Rear.FS_Snow, _x.vision_failsafe.failsafe_SVC_Rear.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Rear.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Rear.FS_Splash, _x.vision_failsafe.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Rear.FS_Blur, _x.vision_failsafe.failsafe_SVC_Rear.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Rear.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Left.FS_Rain, _x.vision_failsafe.failsafe_SVC_Left.FS_Fog, _x.vision_failsafe.failsafe_SVC_Left.FS_Snow, _x.vision_failsafe.failsafe_SVC_Left.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Left.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Left.FS_Splash, _x.vision_failsafe.failsafe_SVC_Left.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Left.FS_Blur, _x.vision_failsafe.failsafe_SVC_Left.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Left.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Right.FS_Rain, _x.vision_failsafe.failsafe_SVC_Right.FS_Fog, _x.vision_failsafe.failsafe_SVC_Right.FS_Snow, _x.vision_failsafe.failsafe_SVC_Right.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Right.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Right.FS_Splash, _x.vision_failsafe.failsafe_SVC_Right.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Right.FS_Blur, _x.vision_failsafe.failsafe_SVC_Right.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Right.FS_illuminance, _x.vision_failsafe.publish_ptp_ts))
      _x = self.vision_failsafe.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q2iQ().pack(_x.vision_failsafe.counter, _x.vision_failsafe.publish_ts, _x.vision_feature.timestamp, _x.vision_feature.ahc.HLB_Decision, _x.vision_feature.ahc.HLB_Reason_Low_Beam, _x.vision_feature.publish_ptp_ts))
      _x = self.vision_feature.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_feature.counter, _x.vision_feature.publish_ts, _x.vision_fsp.timestamp))
      length = len(self.vision_fsp.freespace)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_fsp.freespace:
        _x = val1
        buff.write(_get_struct_Ii2fi2fif().pack(_x.FSP_Obs_ID, _x.FSP_Lane_Assginment, _x.FSP_Range, _x.FSP_Azimuth_Angle, _x.FSP_Classification_Type, _x.FSP_Height, _x.FSP_Elevation_Angle, _x.FSP_Mobility_Status, _x.FSP_Existence_Prob))
      _x = self
      buff.write(_get_struct_iQ().pack(_x.vision_fsp.source, _x.vision_fsp.publish_ptp_ts))
      _x = self.vision_fsp.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_fsp.counter, _x.vision_fsp.publish_ts, _x.vision_traffic_light.timestamp))
      length = len(self.vision_traffic_light.trafficlight)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_traffic_light.trafficlight:
        _x = val1
        buff.write(_get_struct_i2I3f3iI().pack(_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer))
      _x = self.vision_traffic_light.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_traffic_light.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_traffic_light.counter, _x.vision_traffic_light.publish_ts, _x.vision_traffic_sign.timestamp))
      length = len(self.vision_traffic_sign.trafficsign)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_traffic_sign.trafficsign:
        _x = val1
        buff.write(_get_struct_2I2i3f3i8fi3f().pack(_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.vision_traffic_sign.trafficsign_num, _x.vision_traffic_sign.publish_ptp_ts))
      _x = self.vision_traffic_sign.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_traffic_sign.counter, _x.vision_traffic_sign.publish_ts, _x.vision_vehicle_light.timestamp))
      length = len(self.vision_vehicle_light.vehiclelight)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_vehicle_light.vehiclelight:
        _x = val1
        buff.write(_get_struct_3Ii13f2B().pack(_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New))
      _x = self.vision_vehicle_light.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_vehicle_light.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i().pack(_x.vision_vehicle_light.counter, _x.vision_vehicle_light.publish_ts, _x.vehicle_10ms.StrSys.StrAgFailSts, _x.vehicle_10ms.StrSys.StrAgCalSts, _x.vehicle_10ms.StrSys.StrWhlAgSAE, _x.vehicle_10ms.StrSys.StrWhlAgSpdSAE, _x.vehicle_10ms.StrSys.PnnAgVld, _x.vehicle_10ms.StrSys.PnnAgSAE, _x.vehicle_10ms.StrSys.PnnAgOffsetSAE, _x.vehicle_10ms.StrSys.EstRackFrcVld, _x.vehicle_10ms.StrSys.EstRackFrcSae, _x.vehicle_10ms.StrSys.MtrTqVld, _x.vehicle_10ms.StrSys.MtrTqSAE, _x.vehicle_10ms.StrSys.TorsBarTqVld, _x.vehicle_10ms.StrSys.TorsBarTqSAE, _x.vehicle_10ms.StrSys.EPSSts, _x.vehicle_10ms.StrSys.DrvngMod, _x.vehicle_10ms.StrSys.RampSts, _x.vehicle_10ms.StrSys.ACIMtrTqVld, _x.vehicle_10ms.StrSys.ACIMtrTqSAE, _x.vehicle_10ms.StrSys.Temperature, _x.vehicle_10ms.StrSys.SupInfo, _x.vehicle_10ms.StrSys.VMCHVIAvl, _x.vehicle_10ms.StrSys.EPSReqTyp, _x.vehicle_10ms.StrSys.BCUCTIAvl, _x.vehicle_10ms.StrSys.WarnLampReq, _x.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid, _x.vehicle_10ms.StrSys.SWCFailSts, _x.vehicle_10ms.StrSys.SteerColTiltCtrlSts, _x.vehicle_10ms.StrSys.SteerColTiltPos, _x.vehicle_10ms.StrSys.SteerColTeleCtrlSts, _x.vehicle_10ms.StrSys.SteerColTelescopePos, _x.vehicle_10ms.StrSys.HODErrSts, _x.vehicle_10ms.StrSys.HOSts, _x.vehicle_10ms.StrSys.OverRideDetn))
      length = len(self.vehicle_10ms.StrSys.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_10ms.StrSys.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().pack(_x.vehicle_10ms.BrkSys.BrkPdl.TrvlCalSts, _x.vehicle_10ms.BrkSys.BrkPdl.Trvl, _x.vehicle_10ms.BrkSys.BrkPdl.BrkPedlSts, _x.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd, _x.vehicle_10ms.BrkSys.BrkPdl.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrs, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.vehicle_10ms.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSwtSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBMod, _x.vehicle_10ms.BrkSys.PrkBrk.CDPReq, _x.vehicle_10ms.BrkSys.PrkBrk.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkOverHeat, _x.vehicle_10ms.BrkSys.BrkHAZReq, _x.vehicle_10ms.BrkSys.BCUBrkLiReq, _x.vehicle_10ms.BrkSys.StstSts, _x.vehicle_10ms.BrkSys.NoBrkF, _x.vehicle_10ms.BrkSys.SupInfo, _x.vehicle_10ms.BrkSys.BrkFldLvl, _x.vehicle_10ms.BrkSys.BrkPadWearSts, _x.vehicle_10ms.BrkSys.BrkFunSt.BDWActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AVHSts, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DWTActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HDCSts, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPCfgSts, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.ExtBrkActv, _x.vehicle_10ms.BrkSys.ExtBrkCp, _x.vehicle_10ms.BrkSys.ExtBrkSts, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTar, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTarQ, _x.vehicle_10ms.BrkSys.MbRegenReAxleTar, _x.vehicle_10ms.BrkSys.MbRegenReAxleTarQ, _x.vehicle_10ms.BrkSys.StabyMagin, _x.vehicle_10ms.BrkSys.StabyMaginQ, _x.vehicle_10ms.BrkSys.BrkFldWarnReq, _x.vehicle_10ms.BrkSys.BrkPadWearWarnReq, _x.vehicle_10ms.BrkSys.FCC1_StandstillStatus, _x.vehicle_10ms.PT.AccrPedal.EfcPosnVld, _x.vehicle_10ms.PT.AccrPedal.EfcPosn, _x.vehicle_10ms.PT.AccrPedal.ActPosnVld, _x.vehicle_10ms.PT.AccrPedal.ActPosn, _x.vehicle_10ms.PT.AccrPedal.PedlOvrd, _x.vehicle_10ms.PT.AccrPedal.timestamp_ptp_ns, _x.vehicle_10ms.PT.Gear.SlctrPosnVld, _x.vehicle_10ms.PT.Gear.ActGearVld, _x.vehicle_10ms.PT.Gear.TrgtGearVld, _x.vehicle_10ms.PT.Gear.SlctrPosn, _x.vehicle_10ms.PT.Gear.ActGear, _x.vehicle_10ms.PT.Gear.TrgtGear, _x.vehicle_10ms.PT.Gear.timestamp_ptp_ns))
      length = len(self.vehicle_10ms.PT.Motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_10ms.PT.Motor:
        _x = val1
        buff.write(_get_struct_ifififI4i().pack(_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts))
        length = len(val1.timestamp_ptp_ns)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2B2if6Bf().pack(_x.vehicle_10ms.PT.VCURvsLampReq, _x.vehicle_10ms.PT.VCUBrkLampReq, _x.vehicle_10ms.PT.CruiseStatus, _x.vehicle_10ms.PT.VCUEPBReq, _x.vehicle_10ms.PT.CruiseStoredSpeed, _x.vehicle_10ms.PT.VCUPtWakeupReq, _x.vehicle_10ms.PT.DCChrgrPluginSts, _x.vehicle_10ms.PT.ACChrgrPluginSts, _x.vehicle_10ms.PT.VCU_VehHldReq, _x.vehicle_10ms.PT.VCU_BrkReqEna, _x.vehicle_10ms.PT.VCU_ForceFctEna, _x.vehicle_10ms.PT.VCU_TarBrkFReq))
      length = len(self.vehicle_10ms.Whl.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_10ms.Whl.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      length = len(self.vehicle_10ms.Whl.WHlTpms)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_10ms.Whl.WHlTpms:
        _x = val1
        buff.write(_get_struct_fi2Ii2I().pack(_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts))
      _x = self
      buff.write(_get_struct_2Q2i3fi2fi().pack(_x.vehicle_10ms.Whl.WhlDyn_Timestamp, _x.vehicle_10ms.Whl.timestamp_ptp_ns, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdSts, _x.vehicle_10ms.VehDyn.VehSpd.VehMovgDir, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdkph, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdmps, _x.vehicle_10ms.VehDyn.VehSpd.VehFiltLngAcc, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILDSts, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILD, _x.vehicle_10ms.VehDyn.VehSpd.VehDispSpd, _x.vehicle_10ms.VehDyn.VehSpd.VCUVehDispSpdSts))
      length = len(self.vehicle_10ms.VehDyn.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_10ms.VehDyn.VehSpd.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.vehicle_10ms.VehDyn.AxAyYrsCalSts, _x.vehicle_10ms.VehDyn.LgtASts, _x.vehicle_10ms.VehDyn.LgtSAEAg, _x.vehicle_10ms.VehDyn.LgtSAEAmpss, _x.vehicle_10ms.VehDyn.LatASts, _x.vehicle_10ms.VehDyn.LatSAEAg, _x.vehicle_10ms.VehDyn.LatSAEAmpss, _x.vehicle_10ms.VehDyn.YawRateSts, _x.vehicle_10ms.VehDyn.YawRateSAERps, _x.vehicle_10ms.VehDyn.YawRateSAEDps, _x.vehicle_10ms.VehDyn.VehOdom, _x.vehicle_10ms.VehDyn.YawRate_Timestamp, _x.vehicle_10ms.VehDyn.timestamp_ptp_ns, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.ADTSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.HldLampReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtSts))
      length = len(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_10ms.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_fBi4B2Q().pack(_x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.vehicle_10ms.publish_ptp_ts))
      _x = self.vehicle_10ms.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.vehicle_10ms.counter, _x.vehicle_10ms.publish_ts))
      length = len(self.vehicle_50ms.Suspension.Lvl)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.Suspension.Lvl))
      length = len(self.vehicle_50ms.Suspension.LvlAdjm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.Suspension.LvlAdjm))
      _x = self
      buff.write(_get_struct_2B2i3B7i().pack(_x.vehicle_50ms.Suspension.LvlCalCmptl, _x.vehicle_50ms.Suspension.CargoActv, _x.vehicle_50ms.Suspension.CrrntLvl, _x.vehicle_50ms.Suspension.TarLvl, _x.vehicle_50ms.Suspension.ExtraHiPosn, _x.vehicle_50ms.Suspension.ExtraLoPosn, _x.vehicle_50ms.Suspension.EasyEntryEnaSts, _x.vehicle_50ms.Suspension.LvlAdjDrvgMod, _x.vehicle_50ms.Suspension.LvlAdjMod, _x.vehicle_50ms.Suspension.DampgCtrlMod, _x.vehicle_50ms.Suspension.DampgDrvgMod, _x.vehicle_50ms.VehBody.VehStatus.VehState, _x.vehicle_50ms.VehBody.VehStatus.VehStateASIL, _x.vehicle_50ms.VehBody.VehStatus.VehMode))
      length = len(self.vehicle_50ms.VehBody.Door.DoorAjarSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.Door.DoorAjarSts))
      _x = self
      buff.write(_get_struct_2I().pack(_x.vehicle_50ms.VehBody.Door.HoodAjarSts, _x.vehicle_50ms.VehBody.Door.TrAjarSts))
      length = len(self.vehicle_50ms.VehBody.SeatOccpSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.SeatOccpSts))
      length = len(self.vehicle_50ms.VehBody.SeatBltSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.SeatBltSts))
      length = len(self.vehicle_50ms.VehBody.LightSts.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.FogLiSts))
      length = len(self.vehicle_50ms.VehBody.LightSts.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.BeamSts))
      _x = self.vehicle_50ms.VehBody.LightSts.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.vehicle_50ms.VehBody.LightSts.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.TurnIndcrLiSts))
      length = len(self.vehicle_50ms.VehBody.LightSts.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.MirrLigtSts))
      length = len(self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi))
      length = len(self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn))
      length = len(self.vehicle_50ms.VehBody.LightSts.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.FogLiFctActvSts))
      _x = self
      buff.write(_get_struct_IB().pack(_x.vehicle_50ms.VehBody.LightSts.LiSnsrData, _x.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts))
      length = len(self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts))
      _x = self
      buff.write(_get_struct_4i6I3iBf4i2Bf4i2BiBi().pack(_x.vehicle_50ms.VehBody.WipperSts.FrntWiprSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWiperParkSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWipMod, _x.vehicle_50ms.VehBody.WipperSts.FrntWiprReq, _x.vehicle_50ms.VehBody.Time.Yr, _x.vehicle_50ms.VehBody.Time.Mth, _x.vehicle_50ms.VehBody.Time.Day, _x.vehicle_50ms.VehBody.Time.Hr, _x.vehicle_50ms.VehBody.Time.Min, _x.vehicle_50ms.VehBody.Time.Sec, _x.vehicle_50ms.VehBody.CenLockSts, _x.vehicle_50ms.VehBody.TpmsSts, _x.vehicle_50ms.VehBody.DrvState, _x.vehicle_50ms.VehBody.AmbTempValid, _x.vehicle_50ms.VehBody.AmbTemp, _x.vehicle_50ms.VehBody.TrailerModReq, _x.vehicle_50ms.VehBody.SWCAdjModReq, _x.vehicle_50ms.VehBody.NBSDrvrSts, _x.vehicle_50ms.VehBody.PrkgTyp, _x.vehicle_50ms.VehBody.CrashDetd, _x.vehicle_50ms.VehBody.AdsLampReq, _x.vehicle_50ms.VehBody.IntrTemp, _x.vehicle_50ms.VehBody.IntrTempVld, _x.vehicle_50ms.VehBody.MaiLiSet, _x.vehicle_50ms.VehBody.SDWReq, _x.vehicle_50ms.VehBody.UPAReq, _x.vehicle_50ms.VehBody.HornCtrlSts, _x.vehicle_50ms.VehBody.HeadLampsOn, _x.vehicle_50ms.VehBody.CDCCameraReq, _x.vehicle_50ms.VehBody.ECOPlusModSts, _x.vehicle_50ms.VehBody.RpsKeyDist))
      length = len(self.vehicle_50ms.VehBody.MirrorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.VehBody.MirrorStatus))
      _x = self
      buff.write(_get_struct_2i().pack(_x.vehicle_50ms.VehBody.RpsMovReq, _x.vehicle_50ms.VehBody.RpsReq))
      length = len(self.vehicle_50ms.DrvIn.StrWhlSwtch.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.DrvIn.StrWhlSwtch.AdUpSwtSts))
      length = len(self.vehicle_50ms.DrvIn.StrWhlSwtch.EnUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_50ms.DrvIn.StrWhlSwtch.EnUpSwtSts))
      _x = self
      buff.write(_get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().pack(_x.vehicle_50ms.DrvIn.AdFunCfg.AEBOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.DASTactileOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.vehicle_50ms.DrvIn.AdFunCfg.FCWSetReq, _x.vehicle_50ms.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCAOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTAReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SetHMA, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTABReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.vehicle_50ms.DrvIn.AdFunCfg.CDCFailSts, _x.vehicle_50ms.DrvIn.AdFunCfg.Set360AP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_ALCS, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSWF, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SdowOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.DistractionSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.vehicle_50ms.DrvIn.AdFunCfg.CurveSpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.TowModActv, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOPALC, _x.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.vehicle_50ms.DrvIn.AdFunCfg.CfgTaskSwitch, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.vehicle_50ms.DrvIn.FogLiPushSwtSts, _x.vehicle_50ms.DrvIn.FrntWiprInterSpd, _x.vehicle_50ms.DrvIn.FrntWiprSwtSts, _x.vehicle_50ms.DrvIn.HiBeamSwtSts, _x.vehicle_50ms.DrvIn.TurnIndcrSwtSts, _x.vehicle_50ms.DrvIn.WiprAutoSwtSts, _x.vehicle_50ms.DrvIn.WshrReWiprSwtSts, _x.vehicle_50ms.DrvIn.SCMFailSts, _x.vehicle_50ms.DrvIn.FogLiSCMCmd, _x.vehicle_50ms.DrvIn.HiBeamSCMCmd, _x.vehicle_50ms.DrvIn.ReWiprSCMCmd, _x.vehicle_50ms.DrvIn.SVCAvl, _x.vehicle_50ms.DrvIn.NaviSpdLim, _x.vehicle_50ms.DrvIn.WTIDispSt, _x.vehicle_50ms.DrvIn.NaviSpdUnit, _x.vehicle_50ms.DrvIn.NaviSpdLimSts, _x.vehicle_50ms.DrvIn.NaviCurrentRoadTyp, _x.vehicle_50ms.DrvIn.NavCtryCod, _x.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICsts, _x.vehicle_50ms.DrvIn.DA_TauGap_stored, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAlertLvl, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAvlSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttention, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSFailSafe, _x.vehicle_50ms.DrvIn.DMSInfo.DMSSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigue, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaReq, _x.vehicle_50ms.DrvIn.VehEgyMngtMod, _x.vehicle_50ms.DrvIn.WheelBrkPReLe, _x.vehicle_50ms.DrvIn.WheelBrkPFrntRi, _x.vehicle_50ms.DrvIn.WheelBrkPFrntLe, _x.vehicle_50ms.DrvIn.WheelBrkPReRi, _x.vehicle_50ms.DrvIn.VehAccrModReq, _x.vehicle_50ms.DrvIn.PwrSwapSteerWhlWarn, _x.vehicle_50ms.DrvIn.DriverPSAPRequest, _x.vehicle_50ms.DrvIn.PSAPParkViewStatus, _x.vehicle_50ms.DrvIn.VehPrepReq, _x.vehicle_50ms.DrvIn.StoreDrvrSlotSelnReq, _x.vehicle_50ms.DrvIn.LockConfig, _x.vehicle_50ms.DrvIn.DriverSAPAReq, _x.vehicle_50ms.DrvIn.DriverSAPASlotSelection, _x.vehicle_50ms.UPA.SDWSts, _x.vehicle_50ms.UPA.APASts, _x.vehicle_50ms.UPA.MapObjSts, _x.vehicle_50ms.UPA.UpaSysDi, _x.vehicle_50ms.UPA.UpaSysSts, _x.vehicle_50ms.UPA.UpaSysSrv))
      length = len(self.vehicle_50ms.UPA.USSlot)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.USSlot:
        _x = val1
        buff.write(_get_struct_2I2ifiI10i().pack(_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha))
      length = len(self.vehicle_50ms.UPA.MapObj)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.MapObj:
        _x = val1
        buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
      length = len(self.vehicle_50ms.UPA.ApaSdw)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.ApaSdw:
        length = len(val1.Dst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.Dst))
      length = len(self.vehicle_50ms.UPA.UsRegnDst)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.UsRegnDst:
        _x = val1.SnsrFltSt
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.RegnDst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.RegnDst))
      _x = self
      buff.write(_get_struct_5iQ().pack(_x.vehicle_50ms.UPA.USSMode, _x.vehicle_50ms.PsapCan.ConnectionSts, _x.vehicle_50ms.PsapCan.StationPlatformSts, _x.vehicle_50ms.PsapCan.VehLongPosInStation, _x.vehicle_50ms.PsapCan.VehLatPosInStation, _x.vehicle_50ms.publish_ptp_ts))
      _x = self.vehicle_50ms.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QBI().pack(_x.vehicle_50ms.counter, _x.vehicle_50ms.publish_ts, _x.sd_map.adas_info.is_adasmap_valid, _x.sd_map.adas_info.m_adasmap_is_highway))
      length = len(self.sd_map.adas_info.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.segment:
        _x = val1
        buff.write(_get_struct_2QiQi2BI2B2I2B2I().pack(_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.sd_map.adas_info.profile_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.profile_point:
        _x = val1
        buff.write(_get_struct_2QiQBd().pack(_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value))
      length = len(self.sd_map.adas_info.stub)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.stub:
        _x = val1
        buff.write(_get_struct_2Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.sd_map.adas_info.traffic_sign)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.traffic_sign:
        _x = val1
        buff.write(_get_struct_4Q3IQIB().pack(_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid))
        _v22 = val1.position_pt
        _x = _v22
        buff.write(_get_struct_2d().pack(_x.longitude, _x.latitude))
        _x = val1.height
        buff.write(_get_struct_d().pack(_x))
      length = len(self.sd_map.adas_info.lane_connection)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.lane_connection:
        _x = val1
        buff.write(_get_struct_2Q8I().pack(_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
      _x = self.sd_map.adas_info.adas_meta.country_code
      buff.write(_get_struct_I().pack(_x))
      length = len(self.sd_map.adas_info.traffic_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.traffic_event:
        _x = val1
        buff.write(_get_struct_2Q2iIQ().pack(_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type))
      _x = self
      buff.write(_get_struct_Q2i4Q().pack(_x.sd_map.navigation_info.heart_beat_info.heart_beat, _x.sd_map.navigation_info.heart_beat_info.reliable_state, _x.sd_map.navigation_info.heart_beat_info.navigation_state, _x.sd_map.navigation_info.turn_info.dist_to_first_turn, _x.sd_map.navigation_info.turn_info.first_turn_info, _x.sd_map.navigation_info.turn_info.dist_to_second_turn, _x.sd_map.navigation_info.turn_info.second_turn_info))
      length = len(self.sd_map.navigation_info.turn_info.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.sd_map.navigation_info.turn_info.lanenr_info))
      length = len(self.sd_map.navigation_info.speed_limit_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.navigation_info.speed_limit_info:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.speed_limit, _x.speed_limit_type))
      _x = self
      buff.write(_get_struct_i3dQ().pack(_x.sd_map.navigation_info.road_class, _x.sd_map.map_loc.longitude, _x.sd_map.map_loc.latitude, _x.sd_map.map_loc.altitude, _x.sd_map.publish_ptp_ts))
      _x = self.sd_map.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i().pack(_x.sd_map.counter, _x.sd_map.publish_ts, _x.fct_out.Ahc.AhcSysSt, _x.fct_out.Ahc.AhcHiBmReq, _x.fct_out.LatCtrl.ExtReqCAMFC, _x.fct_out.LatCtrl.LeLineTyp, _x.fct_out.LatCtrl.RiLineTyp, _x.fct_out.LatCtrl.LeTrackingSts, _x.fct_out.LatCtrl.RiTrackingSts, _x.fct_out.LatCtrl.LaneAssiTyp, _x.fct_out.LatCtrl.LkaSnsvty, _x.fct_out.LatCtrl.AbsltPinionAgReq, _x.fct_out.LatCtrl.EPSReqTyp, _x.fct_out.LatCtrl.LkaLnAsstSts, _x.fct_out.LatCtrl.LkaHODWarnSeq, _x.fct_out.LatCtrl.LatCtrlActv, _x.fct_out.LatCtrl.EPSACITsuSup, _x.fct_out.LatCtrl.VMC1ACITsuSup, _x.fct_out.LatCtrl.LatCtrlTarLe, _x.fct_out.LatCtrl.LatCtrlTarRi, _x.fct_out.LatCtrl.AlcsInfo.DA_LaneChgSupReason, _x.fct_out.LatCtrl.AlcsInfo.AlcManeuverSts, _x.fct_out.LatCtrl.AlcsInfo.DA_ALCSsts, _x.fct_out.LatCtrl.AlcsInfo.ShowSetDA_ALCS, _x.fct_out.LonCtrl.ModeESP, _x.fct_out.LonCtrl.TauGapSet, _x.fct_out.LonCtrl.ObjValid, _x.fct_out.LonCtrl.DsplVelocitySet, _x.fct_out.LonCtrl.GoNotfrReq, _x.fct_out.LonCtrl.TextInfo, _x.fct_out.LonCtrl.GoNotfrOnOffSts, _x.fct_out.LonCtrl.TSRSpdLimDataOnOffSts, _x.fct_out.LonCtrl.TakeOverReq, _x.fct_out.LonCtrl.TargetAccel, _x.fct_out.LonCtrl.CmftLowerAccl, _x.fct_out.LonCtrl.CmftUpprAccl, _x.fct_out.LonCtrl.MinJerkAccl, _x.fct_out.LonCtrl.MaxJerkAccl, _x.fct_out.LonCtrl.DecelToStopReq, _x.fct_out.LonCtrl.ShutdownModReq, _x.fct_out.LonCtrl.DrvOffReq, _x.fct_out.LonCtrl.BrkPreferReq, _x.fct_out.LonCtrl.MinBkrgReq, _x.fct_out.LonCtrl.ACCNPDrvMsg, _x.fct_out.LonCtrl.ClsObjTyp, _x.fct_out.LonCtrl.ClsObjDst, _x.fct_out.LonCtrl.TauGapChgDisp, _x.fct_out.LonCtrl.DisplSetSpdEnbl, _x.fct_out.LonCtrl.VlcReqFct, _x.fct_out.LonCtrl.SpdUnit, _x.fct_out.LonCtrl.DA_SetSpeedAnimation, _x.fct_out.LonCtrl.DA_Inhibit, _x.fct_out.Hwa.AccNpSts, _x.fct_out.Hwa.LongCtrlActv, _x.fct_out.Hwa.LatCtrlActv, _x.fct_out.Hwa.HodWarnReq, _x.fct_out.Hwa.HzrdLiReq, _x.fct_out.Hwa.DoorUnlckReq, _x.fct_out.Hwa.HodTakeOver, _x.fct_out.Hwa.NaNadSts, _x.fct_out.Hwa.NaNadWTI, _x.fct_out.Hwa.FreespaceIntrsn, _x.fct_out.Hwa.ADC_VehDisp_Warn, _x.fct_out.Hwa.DA_TurnIndctrLeTip, _x.fct_out.Hwa.DA_TurnIndctrRiTip, _x.fct_out.Hwa.DA_TurnIndctrLeLatch, _x.fct_out.Hwa.DA_TurnIndctrRiLatch, _x.fct_out.Hwa.DA_TurnIndctrLePush, _x.fct_out.Hwa.DA_TurnIndctrRiPush, _x.fct_out.Hwa.DA_NOP_Avl, _x.fct_out.Hwa.NeedNOPCtrl, _x.fct_out.Hwa.DA_NOP_WTIs, _x.fct_out.Hwa.DA_iACC_WTIs, _x.fct_out.Hwa.DA_Pilot_WTIs, _x.fct_out.Hwa.DA_SysFailSymbol, _x.fct_out.Ldw.AdasLeLine, _x.fct_out.Ldw.AdasRiLine, _x.fct_out.Ldw.LaneAsstSts, _x.fct_out.Ldw.EPSReqTyp, _x.fct_out.Ldw.Snvty, _x.fct_out.Ldw.LaneAsstTyp, _x.fct_out.Ldw.HapticOnOffSts, _x.fct_out.Sas.SpeedLimitValue, _x.fct_out.Sas.SpeedUnit, _x.fct_out.Sas.SpeedLimitAttribute, _x.fct_out.Sas.SpeedLimitTakeover, _x.fct_out.Sas.SupSignType, _x.fct_out.Sas.SupSignAttribute, _x.fct_out.Sas.RoadFeatureWarningSign, _x.fct_out.Sas.TrafficLightSts, _x.fct_out.Sas.LocalHazards, _x.fct_out.Sas.SLIFState, _x.fct_out.Sas.SLWFWarnTrigger, _x.fct_out.Heater.WSHeatReq, _x.fct_out.Heater.WSHeatReqValid, _x.fct_out.Elk.ElkSts, _x.fct_out.Elk.ESFWarningSts))
      length = len(self.fct_out.Function)
      buff.write(_struct_I.pack(length))
      for val1 in self.fct_out.Function:
        _x = val1.FunctionName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.FunctionID, _x.FuncSts, _x.ReqFunctionID))
      _x = self
      buff.write(_get_struct_13IBIBIB5IB().pack(_x.fct_out.AcmEdr.acsf_b1_sts_edr, _x.fct_out.AcmEdr.acsf_b2_sts_edr, _x.fct_out.AcmEdr.acsf_c_sts_edr, _x.fct_out.AcmEdr.acsf_d_sts_edr, _x.fct_out.AcmEdr.acsf_e_sts_edr, _x.fct_out.AcmEdr.lane_assist_sts_edr, _x.fct_out.AcmEdr.ldw_lka_lane_assi_typ_edr, _x.fct_out.AcmEdr.adas_le_line_edr, _x.fct_out.AcmEdr.adas_ri_line_edr, _x.fct_out.AcmEdr.elk_sts_edr, _x.fct_out.AcmEdr.esf_warning_sts_edr, _x.fct_out.AcmEdr.acc_sts_edr, _x.fct_out.HmiIcon.ShowSetSWF, _x.fct_out.HmiIcon.ShowSetDA_ALCS, _x.fct_out.HmiIcon.ShowSetDA_SpdAssist, _x.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl, _x.fct_out.HmiIcon.ShowSetDA_SteerAssist, _x.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist, _x.fct_out.HmiIcon.ReRADfeatures_FactoryDft, _x.fct_out.HmiIcon.LaneFeautres_FactoryDft, _x.fct_out.Eas.EASSts, _x.fct_out.Eas.EASWarningLv, _x.fct_out.Eas.RpsLockUnlckCtrl, _x.fct_out.Eas.EasCall))
      length = len(self.fct_out.Reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.fct_out.Reserved))
      _x = self
      buff.write(_get_struct_2i16Q().pack(_x.fct_out.SesrSts.LidarSts, _x.fct_out.SesrSts.Camera_FrntWideSts, _x.fct_out.RcvProtoPTPTime.function_arb_out_ptp_ts, _x.fct_out.RcvProtoPTPTime.sd_map_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_functionstatus_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_speedlimitvalue_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_vehicleout_ptp_ts, _x.fct_out.RcvProtoPTPTime.side_feature_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_illumnance_flag_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_road_detection_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_10ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_50ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_lpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_obf_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_rme_road_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tse_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tsi_outputs_ptp_ts))
      length = len(self.fct_out.RcvProtoPTPTime.reserved_ptp_ts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.fct_out.RcvProtoPTPTime.reserved_ptp_ts))
      _x = self.fct_out.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.fct_out.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QB7f().pack(_x.fct_out.counter, _x.fct_out.publish_ts, _x.vehicle_config.is_vehicle_info_valid, _x.vehicle_config.feature_vehicle_info.wheel_base, _x.vehicle_config.feature_vehicle_info.veh_overall_length, _x.vehicle_config.feature_vehicle_info.veh_overall_width, _x.vehicle_config.feature_vehicle_info.veh_width, _x.vehicle_config.feature_vehicle_info.veh_height, _x.vehicle_config.feature_vehicle_info.front_tread_width, _x.vehicle_config.feature_vehicle_info.rear_tread_width))
      length = len(self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_28f().pack(_x.vehicle_config.feature_vehicle_info.front_bumper_to_rear_axle, _x.vehicle_config.feature_vehicle_info.front_main_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.vehicle_config.cal_vehicle_info.veh_calib_height, _x.vehicle_config.cal_vehicle_info.veh_width, _x.vehicle_config.cal_vehicle_info.veh_fwheel2head, _x.vehicle_config.cal_vehicle_info.veh_rwheel2tail, _x.vehicle_config.cal_vehicle_info.veh_wheel_base))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_wide.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_wide.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_right.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_right.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_left.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.front_left.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.rear_right.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.rear_right.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.rear_left.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.rear_left.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_front.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_front.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_left.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_left.distance))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_right.angle))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.camera_location.svc_right.distance))
      length = len(self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.angle))
      length = len(self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.distance))
      _x = self.vehicle_config.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vehicle_config.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_34Q().pack(_x.vehicle_config.counter, _x.vehicle_config.publish_ts, _x.radar_info_topic.received_topic_publish_ts, _x.radar_info_topic.received_topic_counter, _x.vision_objects_topic.received_topic_publish_ts, _x.vision_objects_topic.received_topic_counter, _x.vision_road_topic.received_topic_publish_ts, _x.vision_road_topic.received_topic_counter, _x.vision_failsafe_topic.received_topic_publish_ts, _x.vision_failsafe_topic.received_topic_counter, _x.vision_feature_topic.received_topic_publish_ts, _x.vision_feature_topic.received_topic_counter, _x.vision_fsp_topic.received_topic_publish_ts, _x.vision_fsp_topic.received_topic_counter, _x.vision_traffic_light_topic.received_topic_publish_ts, _x.vision_traffic_light_topic.received_topic_counter, _x.vision_traffic_sign_topic.received_topic_publish_ts, _x.vision_traffic_sign_topic.received_topic_counter, _x.vision_vehicle_light_topic.received_topic_publish_ts, _x.vision_vehicle_light_topic.received_topic_counter, _x.vehicle_10ms_topic.received_topic_publish_ts, _x.vehicle_10ms_topic.received_topic_counter, _x.vehicle_50ms_topic.received_topic_publish_ts, _x.vehicle_50ms_topic.received_topic_counter, _x.vehicle_fctout_topic.received_topic_publish_ts, _x.vehicle_fctout_topic.received_topic_counter, _x.sd_map_topic.received_topic_publish_ts, _x.sd_map_topic.received_topic_counter, _x.lidar_read_ts.received_topic_publish_ts, _x.lidar_read_ts.received_topic_counter, _x.vehicle_config_topic.received_topic_publish_ts, _x.vehicle_config_topic.received_topic_counter, _x.dead_reckoning_latest_ts.received_topic_publish_ts, _x.dead_reckoning_latest_ts.received_topic_counter))
      length = len(self.od_output.sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.sensors:
        _x = val1
        buff.write(_get_struct_IQ().pack(_x.sensor_id, _x.measuring_ts))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.od_output.cooking_ts, _x.od_output.send_ts))
      length = len(self.od_output.lidar_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.lidar_result:
        _x = val1
        buff.write(_get_struct_2Ii10f().pack(_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration))
        length = len(val1.statistics_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.statistics_feature))
      length = len(self.od_output.cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v23 = val1.mono3d
        _x = _v23
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.subtype_scores))
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.occlusion))
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.box))
        length = len(val1.kpts)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.kpts))
        length = len(val1.kpts_score)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.kpts_score))
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_2d))
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_3d))
        length = len(val1.reid_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reid_feature))
        length = len(val1.theta2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.theta2d))
        _x = val1.has_person
        buff.write(_get_struct_f().pack(_x))
      length = len(self.od_output.static_cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.static_cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v24 = val1.mono3d
        _x = _v24
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.subtype_scores))
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.occlusion))
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.box))
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_2d))
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_3d))
      length = len(self.od_output.failsafe_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.failsafe_result:
        _x = val1
        buff.write(_get_struct_IfIfIfIfIf().pack(_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score))
      _x = self.od_output.reserved
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.od_output.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.od_output.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4QI().pack(_x.od_output.counter, _x.od_output.publish_ts, _x.od_output_topic.received_topic_publish_ts, _x.od_output_topic.received_topic_counter, _x.lanelist.LL_LANE_NUM))
      length = len(self.lanelist.LL_Lane_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanelist.LL_Lane_List:
        _x = val1.PL_POINT_NUM
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.PL_Points_List)
        buff.write(_struct_I.pack(length))
        for val2 in val1.PL_Points_List:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
        _v25 = val1.PL_Line_Property
        _x = _v25
        buff.write(_get_struct_6i().pack(_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole))
        _x = val1.sensor_id
        buff.write(_get_struct_I().pack(_x))
      _x = self.lanelist.time_meas
      buff.write(_get_struct_Q().pack(_x))
      _x = self.lanelist.image_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lanelist.LL_SpecialPoint_List.SPL_POINT_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.lanelist.LL_SpecialPoint_List.SPL_Points_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanelist.LL_SpecialPoint_List.SPL_Points_List:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
      length = len(self.lanelist.LL_SpecialPoint_List.SPL_Type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.lanelist.LL_SpecialPoint_List.SPL_Type))
      length = len(self.lanelist.LL_SpecialPoint_List.sensor_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.lanelist.LL_SpecialPoint_List.sensor_id_list))
      _x = self.lanelist.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.lanelist.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5Q().pack(_x.lanelist.counter, _x.lanelist.publish_ts, _x.lanelist_topic.received_topic_publish_ts, _x.lanelist_topic.received_topic_counter, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vision_objects is None:
        self.vision_objects = rospy_message_converter.msg.ObjectsDetection()
      if self.radar_info is None:
        self.radar_info = rospy_message_converter.msg.RadarSensor()
      if self.vision_road is None:
        self.vision_road = rospy_message_converter.msg.RoadDetection()
      if self.vision_failsafe is None:
        self.vision_failsafe = rospy_message_converter.msg.FailSafeDetection()
      if self.vision_feature is None:
        self.vision_feature = rospy_message_converter.msg.Features()
      if self.vision_fsp is None:
        self.vision_fsp = rospy_message_converter.msg.FreeSpaceDetection()
      if self.vision_traffic_light is None:
        self.vision_traffic_light = rospy_message_converter.msg.TrafficLightDetection()
      if self.vision_traffic_sign is None:
        self.vision_traffic_sign = rospy_message_converter.msg.TrafficSignDetection()
      if self.vision_vehicle_light is None:
        self.vision_vehicle_light = rospy_message_converter.msg.VehicleLightDetection()
      if self.vehicle_10ms is None:
        self.vehicle_10ms = rospy_message_converter.msg.VEH10ms()
      if self.vehicle_50ms is None:
        self.vehicle_50ms = rospy_message_converter.msg.VEH50ms()
      if self.sd_map is None:
        self.sd_map = rospy_message_converter.msg.SdMap()
      if self.fct_out is None:
        self.fct_out = rospy_message_converter.msg.FctOut()
      if self.vehicle_config is None:
        self.vehicle_config = rospy_message_converter.msg.VehicleInfo()
      if self.radar_info_topic is None:
        self.radar_info_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_objects_topic is None:
        self.vision_objects_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_road_topic is None:
        self.vision_road_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_failsafe_topic is None:
        self.vision_failsafe_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_feature_topic is None:
        self.vision_feature_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_fsp_topic is None:
        self.vision_fsp_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_traffic_light_topic is None:
        self.vision_traffic_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_traffic_sign_topic is None:
        self.vision_traffic_sign_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_vehicle_light_topic is None:
        self.vision_vehicle_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_10ms_topic is None:
        self.vehicle_10ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_50ms_topic is None:
        self.vehicle_50ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_fctout_topic is None:
        self.vehicle_fctout_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.sd_map_topic is None:
        self.sd_map_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.lidar_read_ts is None:
        self.lidar_read_ts = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_config_topic is None:
        self.vehicle_config_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.dead_reckoning_latest_ts is None:
        self.dead_reckoning_latest_ts = rospy_message_converter.msg.EHYSINTopicTime()
      if self.od_output is None:
        self.od_output = rospy_message_converter.msg.ODOutputPb()
      if self.od_output_topic is None:
        self.od_output_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.lanelist is None:
        self.lanelist = rospy_message_converter.msg.LaneList()
      if self.lanelist_topic is None:
        self.lanelist_topic = rospy_message_converter.msg.EHYSINTopicTime()
      end = 0
      start = end
      end += 8
      (self.vision_objects.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_objects.staticobj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StaticObjects()
        _x = val1
        start = end
        end += 60
        (_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source,) = _get_struct_2Ii11fi().unpack(str[start:end])
        self.vision_objects.staticobj.append(val1)
      _x = self
      start = end
      end += 26
      (_x.vision_objects.dynamicobj.OBJ_Info.OBJ_Object_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VRU_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VD_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_ID, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_Side, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
      self.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost = bool(self.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost)
      self.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI = bool(self.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_objects.dynamicobj.OBJ = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DynamicObj()
        _x = val1
        start = end
        end += 79
        (_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right,) = _get_struct_i2IifBiI2iI4f3i2f2B().unpack(str[start:end])
        val1.OBJ_Is_Very_Close = bool(val1.OBJ_Is_Very_Close)
        val1.OBJ_Is_Blocked_Left = bool(val1.OBJ_Is_Blocked_Left)
        val1.OBJ_Is_Blocked_Right = bool(val1.OBJ_Is_Blocked_Right)
        _v26 = val1.OBJ_Distance
        _x = _v26
        start = end
        end += 24
        (_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD,) = _get_struct_6f().unpack(str[start:end])
        _v27 = val1.OBJ_Abs_Velocity
        _x = _v27
        start = end
        end += 24
        (_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD,) = _get_struct_6f().unpack(str[start:end])
        _v28 = val1.OBJ_Abs_Acc
        _x = _v28
        start = end
        end += 24
        (_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD,) = _get_struct_6f().unpack(str[start:end])
        _v29 = val1.OBJ_Dimension
        _x = _v29
        start = end
        end += 24
        (_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD,) = _get_struct_6f().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second,) = _get_struct_iI2i8f().unpack(str[start:end])
        self.vision_objects.dynamicobj.OBJ.append(val1)
      start = end
      end += 8
      (self.vision_objects.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_objects.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_objects.publisher_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.vision_objects.counter, _x.vision_objects.publish_ts, _x.radar_info.ego_speed, _x.radar_info.ego_acc, _x.radar_info.ego_yawrate,) = _get_struct_2Q3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_info.status = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarStatus()
        _x = val1
        start = end
        end += 16
        (_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location,) = _get_struct_4Bf2i().unpack(str[start:end])
        val1.flg_blindness = bool(val1.flg_blindness)
        val1.flg_failure = bool(val1.flg_failure)
        val1.flg_loss_comm_fault = bool(val1.flg_loss_comm_fault)
        val1.flg_time_stamp_invalid = bool(val1.flg_time_stamp_invalid)
        self.radar_info.status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_info.trackers = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarTracker()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.objects = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarObject()
          _v30 = val2.valid_status
          _x = _v30
          start = end
          end += 3
          (_x.flag_valid, _x.flag_measured, _x.flag_hist,) = _get_struct_3B().unpack(str[start:end])
          _v30.flag_valid = bool(_v30.flag_valid)
          _v30.flag_measured = bool(_v30.flag_measured)
          _v30.flag_hist = bool(_v30.flag_hist)
          start = end
          end += 4
          (val2.source,) = _get_struct_I().unpack(str[start:end])
          _v31 = val2.motion
          _v32 = _v31.pos
          _x = _v32
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v33 = _v31.pos_std
          _x = _v33
          start = end
          end += 12
          (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
          _v34 = _v31.vel
          _x = _v34
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _v35 = _v31.vel_std
          _x = _v35
          start = end
          end += 12
          (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
          _v36 = _v31.acc
          _x = _v36
          start = end
          end += 12
          (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
          _v37 = _v31.acc_std
          _x = _v37
          start = end
          end += 12
          (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
          _v38 = _v31.size
          _x = _v38
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v39 = _v31.size_std
          _x = _v39
          start = end
          end += 12
          (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
          _x = _v31
          start = end
          end += 12
          (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
          _v40 = val2.motion_state
          _x = _v40
          start = end
          end += 6
          (_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing,) = _get_struct_6B().unpack(str[start:end])
          _v40.is_valid = bool(_v40.is_valid)
          _v40.is_moving = bool(_v40.is_moving)
          _v40.is_movable = bool(_v40.is_movable)
          _v40.direction = bool(_v40.direction)
          _v40.was_moved = bool(_v40.was_moved)
          _v40.is_crossing = bool(_v40.is_crossing)
          _x = val2
          start = end
          end += 59
          (_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_iI3f2Ii4fI2BIB().unpack(str[start:end])
          val2.f_multi_measures = bool(val2.f_multi_measures)
          val2.f_overhead_suspicious = bool(val2.f_overhead_suspicious)
          val2.f_crossing = bool(val2.f_crossing)
          val1.objects.append(val2)
        self.radar_info.trackers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_info.detection_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarDetection()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.detection = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarDetectionObject()
          _x = val2
          start = end
          end += 40
          (_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob,) = _get_struct_Ii8f().unpack(str[start:end])
          val1.detection.append(val2)
        self.radar_info.detection_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_info.radar_feature.acc_tar = s.unpack(str[start:end])
      _x = self
      start = end
      end += 52
      (_x.radar_info.radar_feature.aeb_tar, _x.radar_info.radar_guardrail.guardrail_left.c0, _x.radar_info.radar_guardrail.guardrail_left.c1, _x.radar_info.radar_guardrail.guardrail_left.heading, _x.radar_info.radar_guardrail.guardrail_left.offset, _x.radar_info.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_left.lka_confidence, _x.radar_info.radar_guardrail.guardrail_right.c0, _x.radar_info.radar_guardrail.guardrail_right.c1, _x.radar_info.radar_guardrail.guardrail_right.heading, _x.radar_info.radar_guardrail.guardrail_right.offset, _x.radar_info.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_right.lka_confidence,) = _get_struct_I5fI5fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_info.radar_barrier.barrier_left.coef = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.radar_info.radar_barrier.barrier_left.dist_end, _x.radar_info.radar_barrier.barrier_left.dist_from, _x.radar_info.radar_barrier.barrier_left.lka_confidence,) = _get_struct_2fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_info.radar_barrier.barrier_right.coef = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.radar_info.radar_barrier.barrier_right.dist_end, _x.radar_info.radar_barrier.barrier_right.dist_from, _x.radar_info.radar_barrier.barrier_right.lka_confidence, _x.radar_info.publish_ptp_ts,) = _get_struct_2fIQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.radar_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.radar_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.radar_info.counter, _x.radar_info.publish_ts, _x.vision_road.timestamp, _x.vision_road.laneline.LD_Lane_Width, _x.vision_road.laneline.LD_Crossing_Flag,) = _get_struct_3QfB().unpack(str[start:end])
      self.vision_road.laneline.LD_Crossing_Flag = bool(self.vision_road.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v41 = val1.LD_First_Line
        _x = _v41
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v42 = _v41.LD_Line
        _x = _v42
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v41
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v43 = val1.LD_Second_Line
        _x = _v43
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v44 = _v43.LD_Line
        _x = _v44
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v43
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v45 = val1.LD_Special_Point
        _x = _v45
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.vision_road.laneline.line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.vision_road.slop.LD_Road_Vertical_Surface_Available, _x.vision_road.slop.LD_Road_Vertical_Surface_Start, _x.vision_road.slop.LD_Road_Vertical_Surface_End, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C0, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C1, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C2, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C3, _x.vision_road.lpp.LPP_Available, _x.vision_road.lpp.LPP_Source, _x.vision_road.lpp.LPP_Ctrl_Point_Lat, _x.vision_road.lpp.LPP_Ctrl_Point_Long, _x.vision_road.lpp.LPP_Confidence, _x.vision_road.lpp.LPP_First_Valid, _x.vision_road.lpp.LPP_First_VR_End, _x.vision_road.lpp.LPP_First.line_C0, _x.vision_road.lpp.LPP_First.line_C1, _x.vision_road.lpp.LPP_First.line_C2, _x.vision_road.lpp.LPP_First.line_C3, _x.vision_road.lpp.LPP_Second_Valid, _x.vision_road.lpp.LPP_Second_VR_End, _x.vision_road.lpp.LPP_Second.line_C0, _x.vision_road.lpp.LPP_Second.line_C1, _x.vision_road.lpp.LPP_Second.line_C2, _x.vision_road.lpp.LPP_Second.line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.vision_road.slop.LD_Road_Vertical_Surface_Available = bool(self.vision_road.slop.LD_Road_Vertical_Surface_Available)
      self.vision_road.lpp.LPP_Available = bool(self.vision_road.lpp.LPP_Available)
      self.vision_road.lpp.LPP_First_Valid = bool(self.vision_road.lpp.LPP_First_Valid)
      self.vision_road.lpp.LPP_Second_Valid = bool(self.vision_road.lpp.LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v46 = val1.LD_RE_Line
        _x = _v46
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.LD_RE_Confidence, _x.LDRE_Class,) = _get_struct_fi().unpack(str[start:end])
        self.vision_road.roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StopLine()
        _x = val1
        start = end
        end += 70
        (_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.SL_Zebra_Is_Detected = bool(val1.SL_Zebra_Is_Detected)
        val1.SL_Is_Detected = bool(val1.SL_Is_Detected)
        self.vision_road.stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.vision_road.guidepoint.INTP_Is_Highway_Merge_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Merge_Right, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.vision_road.guidepoint.INTP_Is_Highway_Merge_Left = bool(self.vision_road.guidepoint.INTP_Is_Highway_Merge_Left)
      self.vision_road.guidepoint.INTP_Is_Highway_Merge_Right = bool(self.vision_road.guidepoint.INTP_Is_Highway_Merge_Right)
      self.vision_road.guidepoint.INTP_Is_Highway_Exit_Left = bool(self.vision_road.guidepoint.INTP_Is_Highway_Exit_Left)
      self.vision_road.guidepoint.INTP_Is_Highway_Exit_Right = bool(self.vision_road.guidepoint.INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.guidepoint.INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.vision_road.guidepoint.INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.vision_road.lanesemantic.append(val1)
      start = end
      end += 8
      (self.vision_road.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_road.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_road.publisher_id = str[start:end]
      _x = self
      start = end
      end += 648
      (_x.vision_road.counter, _x.vision_road.publish_ts, _x.vision_failsafe.timestamp, _x.vision_failsafe.failsafe_FW.FS_Rain, _x.vision_failsafe.failsafe_FW.FS_Fog, _x.vision_failsafe.failsafe_FW.FS_Snow, _x.vision_failsafe.failsafe_FW.FS_Full_Blockage, _x.vision_failsafe.failsafe_FW.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FW.FS_Lowsun, _x.vision_failsafe.failsafe_FW.FS_Sunray, _x.vision_failsafe.failsafe_FW.FS_Splash, _x.vision_failsafe.failsafe_FW.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FW.FS_Blur, _x.vision_failsafe.failsafe_FW.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FW.FS_illuminance, _x.vision_failsafe.failsafe_FN.FS_Rain, _x.vision_failsafe.failsafe_FN.FS_Fog, _x.vision_failsafe.failsafe_FN.FS_Snow, _x.vision_failsafe.failsafe_FN.FS_Full_Blockage, _x.vision_failsafe.failsafe_FN.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FN.FS_Lowsun, _x.vision_failsafe.failsafe_FN.FS_Sunray, _x.vision_failsafe.failsafe_FN.FS_Splash, _x.vision_failsafe.failsafe_FN.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FN.FS_Blur, _x.vision_failsafe.failsafe_FN.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FN.FS_illuminance, _x.vision_failsafe.failsafe_FL.FS_Rain, _x.vision_failsafe.failsafe_FL.FS_Fog, _x.vision_failsafe.failsafe_FL.FS_Snow, _x.vision_failsafe.failsafe_FL.FS_Full_Blockage, _x.vision_failsafe.failsafe_FL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FL.FS_Lowsun, _x.vision_failsafe.failsafe_FL.FS_Sunray, _x.vision_failsafe.failsafe_FL.FS_Splash, _x.vision_failsafe.failsafe_FL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FL.FS_Blur, _x.vision_failsafe.failsafe_FL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FL.FS_illuminance, _x.vision_failsafe.failsafe_FR.FS_Rain, _x.vision_failsafe.failsafe_FR.FS_Fog, _x.vision_failsafe.failsafe_FR.FS_Snow, _x.vision_failsafe.failsafe_FR.FS_Full_Blockage, _x.vision_failsafe.failsafe_FR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FR.FS_Lowsun, _x.vision_failsafe.failsafe_FR.FS_Sunray, _x.vision_failsafe.failsafe_FR.FS_Splash, _x.vision_failsafe.failsafe_FR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FR.FS_Blur, _x.vision_failsafe.failsafe_FR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FR.FS_illuminance, _x.vision_failsafe.failsafe_R.FS_Rain, _x.vision_failsafe.failsafe_R.FS_Fog, _x.vision_failsafe.failsafe_R.FS_Snow, _x.vision_failsafe.failsafe_R.FS_Full_Blockage, _x.vision_failsafe.failsafe_R.FS_Partial_Blockage, _x.vision_failsafe.failsafe_R.FS_Lowsun, _x.vision_failsafe.failsafe_R.FS_Sunray, _x.vision_failsafe.failsafe_R.FS_Splash, _x.vision_failsafe.failsafe_R.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_R.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_R.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_R.FS_Blur, _x.vision_failsafe.failsafe_R.FS_Smeared_Halo, _x.vision_failsafe.failsafe_R.FS_illuminance, _x.vision_failsafe.failsafe_RL.FS_Rain, _x.vision_failsafe.failsafe_RL.FS_Fog, _x.vision_failsafe.failsafe_RL.FS_Snow, _x.vision_failsafe.failsafe_RL.FS_Full_Blockage, _x.vision_failsafe.failsafe_RL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RL.FS_Lowsun, _x.vision_failsafe.failsafe_RL.FS_Sunray, _x.vision_failsafe.failsafe_RL.FS_Splash, _x.vision_failsafe.failsafe_RL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RL.FS_Blur, _x.vision_failsafe.failsafe_RL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RL.FS_illuminance, _x.vision_failsafe.failsafe_RR.FS_Rain, _x.vision_failsafe.failsafe_RR.FS_Fog, _x.vision_failsafe.failsafe_RR.FS_Snow, _x.vision_failsafe.failsafe_RR.FS_Full_Blockage, _x.vision_failsafe.failsafe_RR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RR.FS_Lowsun, _x.vision_failsafe.failsafe_RR.FS_Sunray, _x.vision_failsafe.failsafe_RR.FS_Splash, _x.vision_failsafe.failsafe_RR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RR.FS_Blur, _x.vision_failsafe.failsafe_RR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RR.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Front.FS_Rain, _x.vision_failsafe.failsafe_SVC_Front.FS_Fog, _x.vision_failsafe.failsafe_SVC_Front.FS_Snow, _x.vision_failsafe.failsafe_SVC_Front.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Front.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Front.FS_Splash, _x.vision_failsafe.failsafe_SVC_Front.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Front.FS_Blur, _x.vision_failsafe.failsafe_SVC_Front.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Front.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Rear.FS_Rain, _x.vision_failsafe.failsafe_SVC_Rear.FS_Fog, _x.vision_failsafe.failsafe_SVC_Rear.FS_Snow, _x.vision_failsafe.failsafe_SVC_Rear.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Rear.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Rear.FS_Splash, _x.vision_failsafe.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Rear.FS_Blur, _x.vision_failsafe.failsafe_SVC_Rear.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Rear.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Left.FS_Rain, _x.vision_failsafe.failsafe_SVC_Left.FS_Fog, _x.vision_failsafe.failsafe_SVC_Left.FS_Snow, _x.vision_failsafe.failsafe_SVC_Left.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Left.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Left.FS_Splash, _x.vision_failsafe.failsafe_SVC_Left.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Left.FS_Blur, _x.vision_failsafe.failsafe_SVC_Left.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Left.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Right.FS_Rain, _x.vision_failsafe.failsafe_SVC_Right.FS_Fog, _x.vision_failsafe.failsafe_SVC_Right.FS_Snow, _x.vision_failsafe.failsafe_SVC_Right.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Right.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Right.FS_Splash, _x.vision_failsafe.failsafe_SVC_Right.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Right.FS_Blur, _x.vision_failsafe.failsafe_SVC_Right.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Right.FS_illuminance, _x.vision_failsafe.publish_ptp_ts,) = _get_struct_3Q154IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_failsafe.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_failsafe.publisher_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.vision_failsafe.counter, _x.vision_failsafe.publish_ts, _x.vision_feature.timestamp, _x.vision_feature.ahc.HLB_Decision, _x.vision_feature.ahc.HLB_Reason_Low_Beam, _x.vision_feature.publish_ptp_ts,) = _get_struct_3Q2iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_feature.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_feature.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_feature.counter, _x.vision_feature.publish_ts, _x.vision_fsp.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_fsp.freespace = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FreeSpace()
        _x = val1
        start = end
        end += 36
        (_x.FSP_Obs_ID, _x.FSP_Lane_Assginment, _x.FSP_Range, _x.FSP_Azimuth_Angle, _x.FSP_Classification_Type, _x.FSP_Height, _x.FSP_Elevation_Angle, _x.FSP_Mobility_Status, _x.FSP_Existence_Prob,) = _get_struct_Ii2fi2fif().unpack(str[start:end])
        self.vision_fsp.freespace.append(val1)
      _x = self
      start = end
      end += 12
      (_x.vision_fsp.source, _x.vision_fsp.publish_ptp_ts,) = _get_struct_iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_fsp.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_fsp.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_fsp.counter, _x.vision_fsp.publish_ts, _x.vision_traffic_light.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_traffic_light.trafficlight = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficLight()
        _x = val1
        start = end
        end += 40
        (_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer,) = _get_struct_i2I3f3iI().unpack(str[start:end])
        self.vision_traffic_light.trafficlight.append(val1)
      start = end
      end += 8
      (self.vision_traffic_light.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_traffic_light.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_traffic_light.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_traffic_light.counter, _x.vision_traffic_light.publish_ts, _x.vision_traffic_sign.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_traffic_sign.trafficsign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficSign()
        _x = val1
        start = end
        end += 88
        (_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value,) = _get_struct_2I2i3f3i8fi3f().unpack(str[start:end])
        self.vision_traffic_sign.trafficsign.append(val1)
      _x = self
      start = end
      end += 12
      (_x.vision_traffic_sign.trafficsign_num, _x.vision_traffic_sign.publish_ptp_ts,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_traffic_sign.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_traffic_sign.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_traffic_sign.counter, _x.vision_traffic_sign.publish_ts, _x.vision_vehicle_light.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_vehicle_light.vehiclelight = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VehicleLight()
        _x = val1
        start = end
        end += 70
        (_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New,) = _get_struct_3Ii13f2B().unpack(str[start:end])
        val1.VL_Is_SingleBar = bool(val1.VL_Is_SingleBar)
        val1.VL_Is_New = bool(val1.VL_Is_New)
        self.vision_vehicle_light.vehiclelight.append(val1)
      start = end
      end += 8
      (self.vision_vehicle_light.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_vehicle_light.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_vehicle_light.publisher_id = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.vision_vehicle_light.counter, _x.vision_vehicle_light.publish_ts, _x.vehicle_10ms.StrSys.StrAgFailSts, _x.vehicle_10ms.StrSys.StrAgCalSts, _x.vehicle_10ms.StrSys.StrWhlAgSAE, _x.vehicle_10ms.StrSys.StrWhlAgSpdSAE, _x.vehicle_10ms.StrSys.PnnAgVld, _x.vehicle_10ms.StrSys.PnnAgSAE, _x.vehicle_10ms.StrSys.PnnAgOffsetSAE, _x.vehicle_10ms.StrSys.EstRackFrcVld, _x.vehicle_10ms.StrSys.EstRackFrcSae, _x.vehicle_10ms.StrSys.MtrTqVld, _x.vehicle_10ms.StrSys.MtrTqSAE, _x.vehicle_10ms.StrSys.TorsBarTqVld, _x.vehicle_10ms.StrSys.TorsBarTqSAE, _x.vehicle_10ms.StrSys.EPSSts, _x.vehicle_10ms.StrSys.DrvngMod, _x.vehicle_10ms.StrSys.RampSts, _x.vehicle_10ms.StrSys.ACIMtrTqVld, _x.vehicle_10ms.StrSys.ACIMtrTqSAE, _x.vehicle_10ms.StrSys.Temperature, _x.vehicle_10ms.StrSys.SupInfo, _x.vehicle_10ms.StrSys.VMCHVIAvl, _x.vehicle_10ms.StrSys.EPSReqTyp, _x.vehicle_10ms.StrSys.BCUCTIAvl, _x.vehicle_10ms.StrSys.WarnLampReq, _x.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid, _x.vehicle_10ms.StrSys.SWCFailSts, _x.vehicle_10ms.StrSys.SteerColTiltCtrlSts, _x.vehicle_10ms.StrSys.SteerColTiltPos, _x.vehicle_10ms.StrSys.SteerColTeleCtrlSts, _x.vehicle_10ms.StrSys.SteerColTelescopePos, _x.vehicle_10ms.StrSys.HODErrSts, _x.vehicle_10ms.StrSys.HOSts, _x.vehicle_10ms.StrSys.OverRideDetn,) = _get_struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i().unpack(str[start:end])
      self.vehicle_10ms.StrSys.RampSts = bool(self.vehicle_10ms.StrSys.RampSts)
      self.vehicle_10ms.StrSys.BCUCTIAvl = bool(self.vehicle_10ms.StrSys.BCUCTIAvl)
      self.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid = bool(self.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid)
      self.vehicle_10ms.StrSys.HODErrSts = bool(self.vehicle_10ms.StrSys.HODErrSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_10ms.StrSys.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 251
      (_x.vehicle_10ms.BrkSys.BrkPdl.TrvlCalSts, _x.vehicle_10ms.BrkSys.BrkPdl.Trvl, _x.vehicle_10ms.BrkSys.BrkPdl.BrkPedlSts, _x.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd, _x.vehicle_10ms.BrkSys.BrkPdl.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrs, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.vehicle_10ms.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSwtSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBMod, _x.vehicle_10ms.BrkSys.PrkBrk.CDPReq, _x.vehicle_10ms.BrkSys.PrkBrk.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkOverHeat, _x.vehicle_10ms.BrkSys.BrkHAZReq, _x.vehicle_10ms.BrkSys.BCUBrkLiReq, _x.vehicle_10ms.BrkSys.StstSts, _x.vehicle_10ms.BrkSys.NoBrkF, _x.vehicle_10ms.BrkSys.SupInfo, _x.vehicle_10ms.BrkSys.BrkFldLvl, _x.vehicle_10ms.BrkSys.BrkPadWearSts, _x.vehicle_10ms.BrkSys.BrkFunSt.BDWActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AVHSts, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DWTActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HDCSts, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPCfgSts, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.ExtBrkActv, _x.vehicle_10ms.BrkSys.ExtBrkCp, _x.vehicle_10ms.BrkSys.ExtBrkSts, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTar, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTarQ, _x.vehicle_10ms.BrkSys.MbRegenReAxleTar, _x.vehicle_10ms.BrkSys.MbRegenReAxleTarQ, _x.vehicle_10ms.BrkSys.StabyMagin, _x.vehicle_10ms.BrkSys.StabyMaginQ, _x.vehicle_10ms.BrkSys.BrkFldWarnReq, _x.vehicle_10ms.BrkSys.BrkPadWearWarnReq, _x.vehicle_10ms.BrkSys.FCC1_StandstillStatus, _x.vehicle_10ms.PT.AccrPedal.EfcPosnVld, _x.vehicle_10ms.PT.AccrPedal.EfcPosn, _x.vehicle_10ms.PT.AccrPedal.ActPosnVld, _x.vehicle_10ms.PT.AccrPedal.ActPosn, _x.vehicle_10ms.PT.AccrPedal.PedlOvrd, _x.vehicle_10ms.PT.AccrPedal.timestamp_ptp_ns, _x.vehicle_10ms.PT.Gear.SlctrPosnVld, _x.vehicle_10ms.PT.Gear.ActGearVld, _x.vehicle_10ms.PT.Gear.TrgtGearVld, _x.vehicle_10ms.PT.Gear.SlctrPosn, _x.vehicle_10ms.PT.Gear.ActGear, _x.vehicle_10ms.PT.Gear.TrgtGear, _x.vehicle_10ms.PT.Gear.timestamp_ptp_ns,) = _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().unpack(str[start:end])
      self.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd = bool(self.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd)
      self.vehicle_10ms.BrkSys.PrkBrk.CDPReq = bool(self.vehicle_10ms.BrkSys.PrkBrk.CDPReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.BDWActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.BDWActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABAActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABAActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABSActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABSActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.DTCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.DTCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.DWTActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.DWTActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBAActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBAActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBDActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBDActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.HBAActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HBAActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.HHCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HHCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.TCSActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.TCSActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.AWBActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.AWBActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.HBCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HBCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.CDPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.CDPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail = bool(self.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail)
      self.vehicle_10ms.BrkSys.BrkFunSt.ARPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ARPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl)
      self.vehicle_10ms.BrkSys.ExtBrkActv = bool(self.vehicle_10ms.BrkSys.ExtBrkActv)
      self.vehicle_10ms.PT.AccrPedal.PedlOvrd = bool(self.vehicle_10ms.PT.AccrPedal.PedlOvrd)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_10ms.PT.Motor = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MotorInfo()
        _x = val1
        start = end
        end += 44
        (_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts,) = _get_struct_ifififI4i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.timestamp_ptp_ns = s.unpack(str[start:end])
        self.vehicle_10ms.PT.Motor.append(val1)
      _x = self
      start = end
      end += 24
      (_x.vehicle_10ms.PT.VCURvsLampReq, _x.vehicle_10ms.PT.VCUBrkLampReq, _x.vehicle_10ms.PT.CruiseStatus, _x.vehicle_10ms.PT.VCUEPBReq, _x.vehicle_10ms.PT.CruiseStoredSpeed, _x.vehicle_10ms.PT.VCUPtWakeupReq, _x.vehicle_10ms.PT.DCChrgrPluginSts, _x.vehicle_10ms.PT.ACChrgrPluginSts, _x.vehicle_10ms.PT.VCU_VehHldReq, _x.vehicle_10ms.PT.VCU_BrkReqEna, _x.vehicle_10ms.PT.VCU_ForceFctEna, _x.vehicle_10ms.PT.VCU_TarBrkFReq,) = _get_struct_2B2if6Bf().unpack(str[start:end])
      self.vehicle_10ms.PT.VCURvsLampReq = bool(self.vehicle_10ms.PT.VCURvsLampReq)
      self.vehicle_10ms.PT.VCUBrkLampReq = bool(self.vehicle_10ms.PT.VCUBrkLampReq)
      self.vehicle_10ms.PT.VCUPtWakeupReq = bool(self.vehicle_10ms.PT.VCUPtWakeupReq)
      self.vehicle_10ms.PT.DCChrgrPluginSts = bool(self.vehicle_10ms.PT.DCChrgrPluginSts)
      self.vehicle_10ms.PT.ACChrgrPluginSts = bool(self.vehicle_10ms.PT.ACChrgrPluginSts)
      self.vehicle_10ms.PT.VCU_VehHldReq = bool(self.vehicle_10ms.PT.VCU_VehHldReq)
      self.vehicle_10ms.PT.VCU_BrkReqEna = bool(self.vehicle_10ms.PT.VCU_BrkReqEna)
      self.vehicle_10ms.PT.VCU_ForceFctEna = bool(self.vehicle_10ms.PT.VCU_ForceFctEna)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_10ms.Whl.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.vehicle_10ms.Whl.WhlDyn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_10ms.Whl.WHlTpms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlTpmsInfo()
        _x = val1
        start = end
        end += 28
        (_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts,) = _get_struct_fi2Ii2I().unpack(str[start:end])
        self.vehicle_10ms.Whl.WHlTpms.append(val1)
      _x = self
      start = end
      end += 52
      (_x.vehicle_10ms.Whl.WhlDyn_Timestamp, _x.vehicle_10ms.Whl.timestamp_ptp_ns, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdSts, _x.vehicle_10ms.VehDyn.VehSpd.VehMovgDir, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdkph, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdmps, _x.vehicle_10ms.VehDyn.VehSpd.VehFiltLngAcc, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILDSts, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILD, _x.vehicle_10ms.VehDyn.VehSpd.VehDispSpd, _x.vehicle_10ms.VehDyn.VehSpd.VCUVehDispSpdSts,) = _get_struct_2Q2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_10ms.VehDyn.VehSpd.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 120
      (_x.vehicle_10ms.VehDyn.AxAyYrsCalSts, _x.vehicle_10ms.VehDyn.LgtASts, _x.vehicle_10ms.VehDyn.LgtSAEAg, _x.vehicle_10ms.VehDyn.LgtSAEAmpss, _x.vehicle_10ms.VehDyn.LatASts, _x.vehicle_10ms.VehDyn.LatSAEAg, _x.vehicle_10ms.VehDyn.LatSAEAmpss, _x.vehicle_10ms.VehDyn.YawRateSts, _x.vehicle_10ms.VehDyn.YawRateSAERps, _x.vehicle_10ms.VehDyn.YawRateSAEDps, _x.vehicle_10ms.VehDyn.VehOdom, _x.vehicle_10ms.VehDyn.YawRate_Timestamp, _x.vehicle_10ms.VehDyn.timestamp_ptp_ns, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.ADTSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.HldLampReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtSts,) = _get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 29
      (_x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.vehicle_10ms.publish_ptp_ts,) = _get_struct_fBi4B2Q().unpack(str[start:end])
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_10ms.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_10ms.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.vehicle_10ms.counter, _x.vehicle_10ms.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.Suspension.Lvl = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.Suspension.LvlAdjm = s.unpack(str[start:end])
      self.vehicle_50ms.Suspension.LvlAdjm = list(map(bool, self.vehicle_50ms.Suspension.LvlAdjm))
      _x = self
      start = end
      end += 41
      (_x.vehicle_50ms.Suspension.LvlCalCmptl, _x.vehicle_50ms.Suspension.CargoActv, _x.vehicle_50ms.Suspension.CrrntLvl, _x.vehicle_50ms.Suspension.TarLvl, _x.vehicle_50ms.Suspension.ExtraHiPosn, _x.vehicle_50ms.Suspension.ExtraLoPosn, _x.vehicle_50ms.Suspension.EasyEntryEnaSts, _x.vehicle_50ms.Suspension.LvlAdjDrvgMod, _x.vehicle_50ms.Suspension.LvlAdjMod, _x.vehicle_50ms.Suspension.DampgCtrlMod, _x.vehicle_50ms.Suspension.DampgDrvgMod, _x.vehicle_50ms.VehBody.VehStatus.VehState, _x.vehicle_50ms.VehBody.VehStatus.VehStateASIL, _x.vehicle_50ms.VehBody.VehStatus.VehMode,) = _get_struct_2B2i3B7i().unpack(str[start:end])
      self.vehicle_50ms.Suspension.LvlCalCmptl = bool(self.vehicle_50ms.Suspension.LvlCalCmptl)
      self.vehicle_50ms.Suspension.CargoActv = bool(self.vehicle_50ms.Suspension.CargoActv)
      self.vehicle_50ms.Suspension.ExtraHiPosn = bool(self.vehicle_50ms.Suspension.ExtraHiPosn)
      self.vehicle_50ms.Suspension.ExtraLoPosn = bool(self.vehicle_50ms.Suspension.ExtraLoPosn)
      self.vehicle_50ms.Suspension.EasyEntryEnaSts = bool(self.vehicle_50ms.Suspension.EasyEntryEnaSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.Door.DoorAjarSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.vehicle_50ms.VehBody.Door.HoodAjarSts, _x.vehicle_50ms.VehBody.Door.TrAjarSts,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.SeatOccpSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.SeatBltSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.FogLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.BeamSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.vehicle_50ms.VehBody.LightSts.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.TurnIndcrLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.MirrLigtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi = s.unpack(str[start:end])
      self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi = list(map(bool, self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn = s.unpack(str[start:end])
      self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn = list(map(bool, self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.FogLiFctActvSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.vehicle_50ms.VehBody.LightSts.LiSnsrData, _x.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts = bool(self.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts = s.unpack(str[start:end])
      self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts = list(map(bool, self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts))
      _x = self
      start = end
      end += 106
      (_x.vehicle_50ms.VehBody.WipperSts.FrntWiprSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWiperParkSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWipMod, _x.vehicle_50ms.VehBody.WipperSts.FrntWiprReq, _x.vehicle_50ms.VehBody.Time.Yr, _x.vehicle_50ms.VehBody.Time.Mth, _x.vehicle_50ms.VehBody.Time.Day, _x.vehicle_50ms.VehBody.Time.Hr, _x.vehicle_50ms.VehBody.Time.Min, _x.vehicle_50ms.VehBody.Time.Sec, _x.vehicle_50ms.VehBody.CenLockSts, _x.vehicle_50ms.VehBody.TpmsSts, _x.vehicle_50ms.VehBody.DrvState, _x.vehicle_50ms.VehBody.AmbTempValid, _x.vehicle_50ms.VehBody.AmbTemp, _x.vehicle_50ms.VehBody.TrailerModReq, _x.vehicle_50ms.VehBody.SWCAdjModReq, _x.vehicle_50ms.VehBody.NBSDrvrSts, _x.vehicle_50ms.VehBody.PrkgTyp, _x.vehicle_50ms.VehBody.CrashDetd, _x.vehicle_50ms.VehBody.AdsLampReq, _x.vehicle_50ms.VehBody.IntrTemp, _x.vehicle_50ms.VehBody.IntrTempVld, _x.vehicle_50ms.VehBody.MaiLiSet, _x.vehicle_50ms.VehBody.SDWReq, _x.vehicle_50ms.VehBody.UPAReq, _x.vehicle_50ms.VehBody.HornCtrlSts, _x.vehicle_50ms.VehBody.HeadLampsOn, _x.vehicle_50ms.VehBody.CDCCameraReq, _x.vehicle_50ms.VehBody.ECOPlusModSts, _x.vehicle_50ms.VehBody.RpsKeyDist,) = _get_struct_4i6I3iBf4i2Bf4i2BiBi().unpack(str[start:end])
      self.vehicle_50ms.VehBody.AmbTempValid = bool(self.vehicle_50ms.VehBody.AmbTempValid)
      self.vehicle_50ms.VehBody.CrashDetd = bool(self.vehicle_50ms.VehBody.CrashDetd)
      self.vehicle_50ms.VehBody.AdsLampReq = bool(self.vehicle_50ms.VehBody.AdsLampReq)
      self.vehicle_50ms.VehBody.HornCtrlSts = bool(self.vehicle_50ms.VehBody.HornCtrlSts)
      self.vehicle_50ms.VehBody.HeadLampsOn = bool(self.vehicle_50ms.VehBody.HeadLampsOn)
      self.vehicle_50ms.VehBody.ECOPlusModSts = bool(self.vehicle_50ms.VehBody.ECOPlusModSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.MirrorStatus = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.vehicle_50ms.VehBody.RpsMovReq, _x.vehicle_50ms.VehBody.RpsReq,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.DrvIn.StrWhlSwtch.AdUpSwtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.DrvIn.StrWhlSwtch.EnUpSwtSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 391
      (_x.vehicle_50ms.DrvIn.AdFunCfg.AEBOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.DASTactileOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.vehicle_50ms.DrvIn.AdFunCfg.FCWSetReq, _x.vehicle_50ms.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCAOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTAReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SetHMA, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTABReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.vehicle_50ms.DrvIn.AdFunCfg.CDCFailSts, _x.vehicle_50ms.DrvIn.AdFunCfg.Set360AP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_ALCS, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSWF, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SdowOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.DistractionSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.vehicle_50ms.DrvIn.AdFunCfg.CurveSpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.TowModActv, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOPALC, _x.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.vehicle_50ms.DrvIn.AdFunCfg.CfgTaskSwitch, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.vehicle_50ms.DrvIn.FogLiPushSwtSts, _x.vehicle_50ms.DrvIn.FrntWiprInterSpd, _x.vehicle_50ms.DrvIn.FrntWiprSwtSts, _x.vehicle_50ms.DrvIn.HiBeamSwtSts, _x.vehicle_50ms.DrvIn.TurnIndcrSwtSts, _x.vehicle_50ms.DrvIn.WiprAutoSwtSts, _x.vehicle_50ms.DrvIn.WshrReWiprSwtSts, _x.vehicle_50ms.DrvIn.SCMFailSts, _x.vehicle_50ms.DrvIn.FogLiSCMCmd, _x.vehicle_50ms.DrvIn.HiBeamSCMCmd, _x.vehicle_50ms.DrvIn.ReWiprSCMCmd, _x.vehicle_50ms.DrvIn.SVCAvl, _x.vehicle_50ms.DrvIn.NaviSpdLim, _x.vehicle_50ms.DrvIn.WTIDispSt, _x.vehicle_50ms.DrvIn.NaviSpdUnit, _x.vehicle_50ms.DrvIn.NaviSpdLimSts, _x.vehicle_50ms.DrvIn.NaviCurrentRoadTyp, _x.vehicle_50ms.DrvIn.NavCtryCod, _x.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICsts, _x.vehicle_50ms.DrvIn.DA_TauGap_stored, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAlertLvl, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAvlSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttention, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSFailSafe, _x.vehicle_50ms.DrvIn.DMSInfo.DMSSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigue, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaReq, _x.vehicle_50ms.DrvIn.VehEgyMngtMod, _x.vehicle_50ms.DrvIn.WheelBrkPReLe, _x.vehicle_50ms.DrvIn.WheelBrkPFrntRi, _x.vehicle_50ms.DrvIn.WheelBrkPFrntLe, _x.vehicle_50ms.DrvIn.WheelBrkPReRi, _x.vehicle_50ms.DrvIn.VehAccrModReq, _x.vehicle_50ms.DrvIn.PwrSwapSteerWhlWarn, _x.vehicle_50ms.DrvIn.DriverPSAPRequest, _x.vehicle_50ms.DrvIn.PSAPParkViewStatus, _x.vehicle_50ms.DrvIn.VehPrepReq, _x.vehicle_50ms.DrvIn.StoreDrvrSlotSelnReq, _x.vehicle_50ms.DrvIn.LockConfig, _x.vehicle_50ms.DrvIn.DriverSAPAReq, _x.vehicle_50ms.DrvIn.DriverSAPASlotSelection, _x.vehicle_50ms.UPA.SDWSts, _x.vehicle_50ms.UPA.APASts, _x.vehicle_50ms.UPA.MapObjSts, _x.vehicle_50ms.UPA.UpaSysDi, _x.vehicle_50ms.UPA.UpaSysSts, _x.vehicle_50ms.UPA.UpaSysSrv,) = _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().unpack(str[start:end])
      self.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts = bool(self.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts)
      self.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP = bool(self.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP)
      self.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts = bool(self.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts)
      self.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff = bool(self.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff)
      self.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts)
      self.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts)
      self.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts)
      self.vehicle_50ms.DrvIn.CDCEqpmt.ICsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.ICsts)
      self.vehicle_50ms.DrvIn.LockConfig = bool(self.vehicle_50ms.DrvIn.LockConfig)
      self.vehicle_50ms.UPA.UpaSysDi = bool(self.vehicle_50ms.UPA.UpaSysDi)
      self.vehicle_50ms.UPA.UpaSysSrv = bool(self.vehicle_50ms.UPA.UpaSysSrv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.USSlot = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.USSlotInfo()
        _x = val1
        start = end
        end += 68
        (_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha,) = _get_struct_2I2ifiI10i().unpack(str[start:end])
        self.vehicle_50ms.UPA.USSlot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.MapObj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MapObjBaseType()
        _x = val1
        start = end
        end += 36
        (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
        self.vehicle_50ms.UPA.MapObj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.ApaSdw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ApaSdwType()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.Dst = s.unpack(str[start:end])
        self.vehicle_50ms.UPA.ApaSdw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.UsRegnDst = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.UsRegnDstType()
        start = end
        end += 4
        (val1.SnsrFltSt,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.RegnDst = s.unpack(str[start:end])
        self.vehicle_50ms.UPA.UsRegnDst.append(val1)
      _x = self
      start = end
      end += 28
      (_x.vehicle_50ms.UPA.USSMode, _x.vehicle_50ms.PsapCan.ConnectionSts, _x.vehicle_50ms.PsapCan.StationPlatformSts, _x.vehicle_50ms.PsapCan.VehLongPosInStation, _x.vehicle_50ms.PsapCan.VehLatPosInStation, _x.vehicle_50ms.publish_ptp_ts,) = _get_struct_5iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_50ms.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_50ms.publisher_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.vehicle_50ms.counter, _x.vehicle_50ms.publish_ts, _x.sd_map.adas_info.is_adasmap_valid, _x.sd_map.adas_info.m_adasmap_is_highway,) = _get_struct_2QBI().unpack(str[start:end])
      self.sd_map.adas_info.is_adasmap_valid = bool(self.sd_map.adas_info.is_adasmap_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapSegment()
        _x = val1
        start = end
        end += 58
        (_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2QiQi2BI2B2I2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.sd_map.adas_info.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.profile_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ProfilePoint()
        _x = val1
        start = end
        end += 37
        (_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value,) = _get_struct_2QiQBd().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.sd_map.adas_info.profile_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.stub = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Stub()
        _x = val1
        start = end
        end += 51
        (_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2Q2Ii2B2IB3I().unpack(str[start:end])
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_last_stub = bool(val1.is_last_stub)
        self.sd_map.adas_info.stub.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.traffic_sign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapTrafficSign()
        _x = val1
        start = end
        end += 57
        (_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid,) = _get_struct_4Q3IQIB().unpack(str[start:end])
        val1.position_valid = bool(val1.position_valid)
        _v47 = val1.position_pt
        _x = _v47
        start = end
        end += 16
        (_x.longitude, _x.latitude,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.height,) = _get_struct_d().unpack(str[start:end])
        self.sd_map.adas_info.traffic_sign.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.lane_connection = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapLaneConnection()
        _x = val1
        start = end
        end += 48
        (_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_2Q8I().unpack(str[start:end])
        self.sd_map.adas_info.lane_connection.append(val1)
      start = end
      end += 4
      (self.sd_map.adas_info.adas_meta.country_code,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.traffic_event = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficEvent()
        _x = val1
        start = end
        end += 36
        (_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type,) = _get_struct_2Q2iIQ().unpack(str[start:end])
        self.sd_map.adas_info.traffic_event.append(val1)
      _x = self
      start = end
      end += 48
      (_x.sd_map.navigation_info.heart_beat_info.heart_beat, _x.sd_map.navigation_info.heart_beat_info.reliable_state, _x.sd_map.navigation_info.heart_beat_info.navigation_state, _x.sd_map.navigation_info.turn_info.dist_to_first_turn, _x.sd_map.navigation_info.turn_info.first_turn_info, _x.sd_map.navigation_info.turn_info.dist_to_second_turn, _x.sd_map.navigation_info.turn_info.second_turn_info,) = _get_struct_Q2i4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sd_map.navigation_info.turn_info.lanenr_info = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.navigation_info.speed_limit_info = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedLimitInfo()
        _x = val1
        start = end
        end += 12
        (_x.speed_limit, _x.speed_limit_type,) = _get_struct_Qi().unpack(str[start:end])
        self.sd_map.navigation_info.speed_limit_info.append(val1)
      _x = self
      start = end
      end += 36
      (_x.sd_map.navigation_info.road_class, _x.sd_map.map_loc.longitude, _x.sd_map.map_loc.latitude, _x.sd_map.map_loc.altitude, _x.sd_map.publish_ptp_ts,) = _get_struct_i3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sd_map.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sd_map.publisher_id = str[start:end]
      _x = self
      start = end
      end += 348
      (_x.sd_map.counter, _x.sd_map.publish_ts, _x.fct_out.Ahc.AhcSysSt, _x.fct_out.Ahc.AhcHiBmReq, _x.fct_out.LatCtrl.ExtReqCAMFC, _x.fct_out.LatCtrl.LeLineTyp, _x.fct_out.LatCtrl.RiLineTyp, _x.fct_out.LatCtrl.LeTrackingSts, _x.fct_out.LatCtrl.RiTrackingSts, _x.fct_out.LatCtrl.LaneAssiTyp, _x.fct_out.LatCtrl.LkaSnsvty, _x.fct_out.LatCtrl.AbsltPinionAgReq, _x.fct_out.LatCtrl.EPSReqTyp, _x.fct_out.LatCtrl.LkaLnAsstSts, _x.fct_out.LatCtrl.LkaHODWarnSeq, _x.fct_out.LatCtrl.LatCtrlActv, _x.fct_out.LatCtrl.EPSACITsuSup, _x.fct_out.LatCtrl.VMC1ACITsuSup, _x.fct_out.LatCtrl.LatCtrlTarLe, _x.fct_out.LatCtrl.LatCtrlTarRi, _x.fct_out.LatCtrl.AlcsInfo.DA_LaneChgSupReason, _x.fct_out.LatCtrl.AlcsInfo.AlcManeuverSts, _x.fct_out.LatCtrl.AlcsInfo.DA_ALCSsts, _x.fct_out.LatCtrl.AlcsInfo.ShowSetDA_ALCS, _x.fct_out.LonCtrl.ModeESP, _x.fct_out.LonCtrl.TauGapSet, _x.fct_out.LonCtrl.ObjValid, _x.fct_out.LonCtrl.DsplVelocitySet, _x.fct_out.LonCtrl.GoNotfrReq, _x.fct_out.LonCtrl.TextInfo, _x.fct_out.LonCtrl.GoNotfrOnOffSts, _x.fct_out.LonCtrl.TSRSpdLimDataOnOffSts, _x.fct_out.LonCtrl.TakeOverReq, _x.fct_out.LonCtrl.TargetAccel, _x.fct_out.LonCtrl.CmftLowerAccl, _x.fct_out.LonCtrl.CmftUpprAccl, _x.fct_out.LonCtrl.MinJerkAccl, _x.fct_out.LonCtrl.MaxJerkAccl, _x.fct_out.LonCtrl.DecelToStopReq, _x.fct_out.LonCtrl.ShutdownModReq, _x.fct_out.LonCtrl.DrvOffReq, _x.fct_out.LonCtrl.BrkPreferReq, _x.fct_out.LonCtrl.MinBkrgReq, _x.fct_out.LonCtrl.ACCNPDrvMsg, _x.fct_out.LonCtrl.ClsObjTyp, _x.fct_out.LonCtrl.ClsObjDst, _x.fct_out.LonCtrl.TauGapChgDisp, _x.fct_out.LonCtrl.DisplSetSpdEnbl, _x.fct_out.LonCtrl.VlcReqFct, _x.fct_out.LonCtrl.SpdUnit, _x.fct_out.LonCtrl.DA_SetSpeedAnimation, _x.fct_out.LonCtrl.DA_Inhibit, _x.fct_out.Hwa.AccNpSts, _x.fct_out.Hwa.LongCtrlActv, _x.fct_out.Hwa.LatCtrlActv, _x.fct_out.Hwa.HodWarnReq, _x.fct_out.Hwa.HzrdLiReq, _x.fct_out.Hwa.DoorUnlckReq, _x.fct_out.Hwa.HodTakeOver, _x.fct_out.Hwa.NaNadSts, _x.fct_out.Hwa.NaNadWTI, _x.fct_out.Hwa.FreespaceIntrsn, _x.fct_out.Hwa.ADC_VehDisp_Warn, _x.fct_out.Hwa.DA_TurnIndctrLeTip, _x.fct_out.Hwa.DA_TurnIndctrRiTip, _x.fct_out.Hwa.DA_TurnIndctrLeLatch, _x.fct_out.Hwa.DA_TurnIndctrRiLatch, _x.fct_out.Hwa.DA_TurnIndctrLePush, _x.fct_out.Hwa.DA_TurnIndctrRiPush, _x.fct_out.Hwa.DA_NOP_Avl, _x.fct_out.Hwa.NeedNOPCtrl, _x.fct_out.Hwa.DA_NOP_WTIs, _x.fct_out.Hwa.DA_iACC_WTIs, _x.fct_out.Hwa.DA_Pilot_WTIs, _x.fct_out.Hwa.DA_SysFailSymbol, _x.fct_out.Ldw.AdasLeLine, _x.fct_out.Ldw.AdasRiLine, _x.fct_out.Ldw.LaneAsstSts, _x.fct_out.Ldw.EPSReqTyp, _x.fct_out.Ldw.Snvty, _x.fct_out.Ldw.LaneAsstTyp, _x.fct_out.Ldw.HapticOnOffSts, _x.fct_out.Sas.SpeedLimitValue, _x.fct_out.Sas.SpeedUnit, _x.fct_out.Sas.SpeedLimitAttribute, _x.fct_out.Sas.SpeedLimitTakeover, _x.fct_out.Sas.SupSignType, _x.fct_out.Sas.SupSignAttribute, _x.fct_out.Sas.RoadFeatureWarningSign, _x.fct_out.Sas.TrafficLightSts, _x.fct_out.Sas.LocalHazards, _x.fct_out.Sas.SLIFState, _x.fct_out.Sas.SLWFWarnTrigger, _x.fct_out.Heater.WSHeatReq, _x.fct_out.Heater.WSHeatReqValid, _x.fct_out.Elk.ElkSts, _x.fct_out.Elk.ESFWarningSts,) = _get_struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i().unpack(str[start:end])
      self.fct_out.Ahc.AhcHiBmReq = bool(self.fct_out.Ahc.AhcHiBmReq)
      self.fct_out.LatCtrl.LatCtrlActv = bool(self.fct_out.LatCtrl.LatCtrlActv)
      self.fct_out.LonCtrl.ObjValid = bool(self.fct_out.LonCtrl.ObjValid)
      self.fct_out.LonCtrl.DisplSetSpdEnbl = bool(self.fct_out.LonCtrl.DisplSetSpdEnbl)
      self.fct_out.Hwa.FreespaceIntrsn = bool(self.fct_out.Hwa.FreespaceIntrsn)
      self.fct_out.Hwa.ADC_VehDisp_Warn = bool(self.fct_out.Hwa.ADC_VehDisp_Warn)
      self.fct_out.Hwa.DA_TurnIndctrLeTip = bool(self.fct_out.Hwa.DA_TurnIndctrLeTip)
      self.fct_out.Hwa.DA_TurnIndctrRiTip = bool(self.fct_out.Hwa.DA_TurnIndctrRiTip)
      self.fct_out.Hwa.DA_TurnIndctrLeLatch = bool(self.fct_out.Hwa.DA_TurnIndctrLeLatch)
      self.fct_out.Hwa.DA_TurnIndctrRiLatch = bool(self.fct_out.Hwa.DA_TurnIndctrRiLatch)
      self.fct_out.Hwa.DA_TurnIndctrLePush = bool(self.fct_out.Hwa.DA_TurnIndctrLePush)
      self.fct_out.Hwa.DA_TurnIndctrRiPush = bool(self.fct_out.Hwa.DA_TurnIndctrRiPush)
      self.fct_out.Hwa.NeedNOPCtrl = bool(self.fct_out.Hwa.NeedNOPCtrl)
      self.fct_out.Hwa.DA_SysFailSymbol = bool(self.fct_out.Hwa.DA_SysFailSymbol)
      self.fct_out.Heater.WSHeatReq = bool(self.fct_out.Heater.WSHeatReq)
      self.fct_out.Heater.WSHeatReqValid = bool(self.fct_out.Heater.WSHeatReqValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fct_out.Function = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FunctionXstatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.FunctionName = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.FunctionName = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.FunctionID, _x.FuncSts, _x.ReqFunctionID,) = _get_struct_3i().unpack(str[start:end])
        self.fct_out.Function.append(val1)
      _x = self
      start = end
      end += 84
      (_x.fct_out.AcmEdr.acsf_b1_sts_edr, _x.fct_out.AcmEdr.acsf_b2_sts_edr, _x.fct_out.AcmEdr.acsf_c_sts_edr, _x.fct_out.AcmEdr.acsf_d_sts_edr, _x.fct_out.AcmEdr.acsf_e_sts_edr, _x.fct_out.AcmEdr.lane_assist_sts_edr, _x.fct_out.AcmEdr.ldw_lka_lane_assi_typ_edr, _x.fct_out.AcmEdr.adas_le_line_edr, _x.fct_out.AcmEdr.adas_ri_line_edr, _x.fct_out.AcmEdr.elk_sts_edr, _x.fct_out.AcmEdr.esf_warning_sts_edr, _x.fct_out.AcmEdr.acc_sts_edr, _x.fct_out.HmiIcon.ShowSetSWF, _x.fct_out.HmiIcon.ShowSetDA_ALCS, _x.fct_out.HmiIcon.ShowSetDA_SpdAssist, _x.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl, _x.fct_out.HmiIcon.ShowSetDA_SteerAssist, _x.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist, _x.fct_out.HmiIcon.ReRADfeatures_FactoryDft, _x.fct_out.HmiIcon.LaneFeautres_FactoryDft, _x.fct_out.Eas.EASSts, _x.fct_out.Eas.EASWarningLv, _x.fct_out.Eas.RpsLockUnlckCtrl, _x.fct_out.Eas.EasCall,) = _get_struct_13IBIBIB5IB().unpack(str[start:end])
      self.fct_out.HmiIcon.ShowSetDA_ALCS = bool(self.fct_out.HmiIcon.ShowSetDA_ALCS)
      self.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl = bool(self.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl)
      self.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist = bool(self.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist)
      self.fct_out.Eas.EasCall = bool(self.fct_out.Eas.EasCall)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fct_out.Reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 136
      (_x.fct_out.SesrSts.LidarSts, _x.fct_out.SesrSts.Camera_FrntWideSts, _x.fct_out.RcvProtoPTPTime.function_arb_out_ptp_ts, _x.fct_out.RcvProtoPTPTime.sd_map_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_functionstatus_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_speedlimitvalue_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_vehicleout_ptp_ts, _x.fct_out.RcvProtoPTPTime.side_feature_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_illumnance_flag_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_road_detection_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_10ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_50ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_lpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_obf_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_rme_road_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tse_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tsi_outputs_ptp_ts,) = _get_struct_2i16Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fct_out.RcvProtoPTPTime.reserved_ptp_ts = s.unpack(str[start:end])
      start = end
      end += 8
      (self.fct_out.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fct_out.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fct_out.publisher_id = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.fct_out.counter, _x.fct_out.publish_ts, _x.vehicle_config.is_vehicle_info_valid, _x.vehicle_config.feature_vehicle_info.wheel_base, _x.vehicle_config.feature_vehicle_info.veh_overall_length, _x.vehicle_config.feature_vehicle_info.veh_overall_width, _x.vehicle_config.feature_vehicle_info.veh_width, _x.vehicle_config.feature_vehicle_info.veh_height, _x.vehicle_config.feature_vehicle_info.front_tread_width, _x.vehicle_config.feature_vehicle_info.rear_tread_width,) = _get_struct_2QB7f().unpack(str[start:end])
      self.vehicle_config.is_vehicle_info_valid = bool(self.vehicle_config.is_vehicle_info_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn.append(val1)
      _x = self
      start = end
      end += 112
      (_x.vehicle_config.feature_vehicle_info.front_bumper_to_rear_axle, _x.vehicle_config.feature_vehicle_info.front_main_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.vehicle_config.cal_vehicle_info.veh_calib_height, _x.vehicle_config.cal_vehicle_info.veh_width, _x.vehicle_config.cal_vehicle_info.veh_fwheel2head, _x.vehicle_config.cal_vehicle_info.veh_rwheel2tail, _x.vehicle_config.cal_vehicle_info.veh_wheel_base,) = _get_struct_28f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_wide.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_wide.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_front.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.distance = s.unpack(str[start:end])
      start = end
      end += 8
      (self.vehicle_config.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_config.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_config.publisher_id = str[start:end]
      _x = self
      start = end
      end += 272
      (_x.vehicle_config.counter, _x.vehicle_config.publish_ts, _x.radar_info_topic.received_topic_publish_ts, _x.radar_info_topic.received_topic_counter, _x.vision_objects_topic.received_topic_publish_ts, _x.vision_objects_topic.received_topic_counter, _x.vision_road_topic.received_topic_publish_ts, _x.vision_road_topic.received_topic_counter, _x.vision_failsafe_topic.received_topic_publish_ts, _x.vision_failsafe_topic.received_topic_counter, _x.vision_feature_topic.received_topic_publish_ts, _x.vision_feature_topic.received_topic_counter, _x.vision_fsp_topic.received_topic_publish_ts, _x.vision_fsp_topic.received_topic_counter, _x.vision_traffic_light_topic.received_topic_publish_ts, _x.vision_traffic_light_topic.received_topic_counter, _x.vision_traffic_sign_topic.received_topic_publish_ts, _x.vision_traffic_sign_topic.received_topic_counter, _x.vision_vehicle_light_topic.received_topic_publish_ts, _x.vision_vehicle_light_topic.received_topic_counter, _x.vehicle_10ms_topic.received_topic_publish_ts, _x.vehicle_10ms_topic.received_topic_counter, _x.vehicle_50ms_topic.received_topic_publish_ts, _x.vehicle_50ms_topic.received_topic_counter, _x.vehicle_fctout_topic.received_topic_publish_ts, _x.vehicle_fctout_topic.received_topic_counter, _x.sd_map_topic.received_topic_publish_ts, _x.sd_map_topic.received_topic_counter, _x.lidar_read_ts.received_topic_publish_ts, _x.lidar_read_ts.received_topic_counter, _x.vehicle_config_topic.received_topic_publish_ts, _x.vehicle_config_topic.received_topic_counter, _x.dead_reckoning_latest_ts.received_topic_publish_ts, _x.dead_reckoning_latest_ts.received_topic_counter,) = _get_struct_34Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.sensors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SensorHeader()
        _x = val1
        start = end
        end += 12
        (_x.sensor_id, _x.measuring_ts,) = _get_struct_IQ().unpack(str[start:end])
        self.od_output.sensors.append(val1)
      _x = self
      start = end
      end += 16
      (_x.od_output.cooking_ts, _x.od_output.send_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.lidar_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LidarObject()
        _x = val1
        start = end
        end += 52
        (_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration,) = _get_struct_2Ii10f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.statistics_feature = s.unpack(str[start:end])
        self.od_output.lidar_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v48 = val1.mono3d
        _x = _v48
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts_score = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reid_feature = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.theta2d = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.has_person,) = _get_struct_f().unpack(str[start:end])
        self.od_output.cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.static_cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StaticCameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v49 = val1.mono3d
        _x = _v49
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = s.unpack(str[start:end])
        self.od_output.static_cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.failsafe_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FailsafeObject()
        _x = val1
        start = end
        end += 40
        (_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score,) = _get_struct_IfIfIfIfIf().unpack(str[start:end])
        self.od_output.failsafe_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.od_output.reserved = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.od_output.reserved = str[start:end]
      start = end
      end += 8
      (self.od_output.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.od_output.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.od_output.publisher_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.od_output.counter, _x.od_output.publish_ts, _x.od_output_topic.received_topic_publish_ts, _x.od_output_topic.received_topic_counter, _x.lanelist.LL_LANE_NUM,) = _get_struct_4QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanelist.LL_Lane_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PointList_2D()
        start = end
        end += 4
        (val1.PL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.PL_Points_List = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point_2D()
          _x = val2
          start = end
          end += 8
          (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
          val1.PL_Points_List.append(val2)
        _v50 = val1.PL_Line_Property
        _x = _v50
        start = end
        end += 24
        (_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole,) = _get_struct_6i().unpack(str[start:end])
        start = end
        end += 4
        (val1.sensor_id,) = _get_struct_I().unpack(str[start:end])
        self.lanelist.LL_Lane_List.append(val1)
      start = end
      end += 8
      (self.lanelist.time_meas,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lanelist.image_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lanelist.image_data = str[start:end]
      start = end
      end += 4
      (self.lanelist.LL_SpecialPoint_List.SPL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanelist.LL_SpecialPoint_List.SPL_Points_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point_2D()
        _x = val1
        start = end
        end += 8
        (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
        self.lanelist.LL_SpecialPoint_List.SPL_Points_List.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lanelist.LL_SpecialPoint_List.SPL_Type = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lanelist.LL_SpecialPoint_List.sensor_id_list = s.unpack(str[start:end])
      start = end
      end += 8
      (self.lanelist.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lanelist.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lanelist.publisher_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.lanelist.counter, _x.lanelist.publish_ts, _x.lanelist_topic.received_topic_publish_ts, _x.lanelist_topic.received_topic_counter, _x.publish_ptp_ts,) = _get_struct_5Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.vision_objects.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.vision_objects.staticobj)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_objects.staticobj:
        _x = val1
        buff.write(_get_struct_2Ii11fi().pack(_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source))
      _x = self
      buff.write(_get_struct_4I2BiI().pack(_x.vision_objects.dynamicobj.OBJ_Info.OBJ_Object_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VRU_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VD_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_ID, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_Side, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_ID))
      length = len(self.vision_objects.dynamicobj.OBJ)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_objects.dynamicobj.OBJ:
        _x = val1
        buff.write(_get_struct_i2IifBiI2iI4f3i2f2B().pack(_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right))
        _v51 = val1.OBJ_Distance
        _x = _v51
        buff.write(_get_struct_6f().pack(_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD))
        _v52 = val1.OBJ_Abs_Velocity
        _x = _v52
        buff.write(_get_struct_6f().pack(_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD))
        _v53 = val1.OBJ_Abs_Acc
        _x = _v53
        buff.write(_get_struct_6f().pack(_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD))
        _v54 = val1.OBJ_Dimension
        _x = _v54
        buff.write(_get_struct_6f().pack(_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD))
        _x = val1
        buff.write(_get_struct_iI2i8f().pack(_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second))
      _x = self.vision_objects.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_objects.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3f().pack(_x.vision_objects.counter, _x.vision_objects.publish_ts, _x.radar_info.ego_speed, _x.radar_info.ego_acc, _x.radar_info.ego_yawrate))
      length = len(self.radar_info.status)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_info.status:
        _x = val1
        buff.write(_get_struct_4Bf2i().pack(_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location))
      length = len(self.radar_info.trackers)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_info.trackers:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.objects:
          _v55 = val2.valid_status
          _x = _v55
          buff.write(_get_struct_3B().pack(_x.flag_valid, _x.flag_measured, _x.flag_hist))
          _x = val2.source
          buff.write(_get_struct_I().pack(_x))
          _v56 = val2.motion
          _v57 = _v56.pos
          _x = _v57
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v58 = _v56.pos_std
          _x = _v58
          buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
          _v59 = _v56.vel
          _x = _v59
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _v60 = _v56.vel_std
          _x = _v60
          buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
          _v61 = _v56.acc
          _x = _v61
          buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
          _v62 = _v56.acc_std
          _x = _v62
          buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
          _v63 = _v56.size
          _x = _v63
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v64 = _v56.size_std
          _x = _v64
          buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
          _x = _v56
          buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
          _v65 = val2.motion_state
          _x = _v65
          buff.write(_get_struct_6B().pack(_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing))
          _x = val2
          buff.write(_get_struct_iI3f2Ii4fI2BIB().pack(_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
      length = len(self.radar_info.detection_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_info.detection_points:
        _x = val1
        buff.write(_get_struct_QI().pack(_x.timestamp, _x.sync_bit))
        length = len(val1.detection)
        buff.write(_struct_I.pack(length))
        for val2 in val1.detection:
          _x = val2
          buff.write(_get_struct_Ii8f().pack(_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob))
      length = len(self.radar_info.radar_feature.acc_tar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.radar_info.radar_feature.acc_tar.tostring())
      _x = self
      buff.write(_get_struct_I5fI5fI().pack(_x.radar_info.radar_feature.aeb_tar, _x.radar_info.radar_guardrail.guardrail_left.c0, _x.radar_info.radar_guardrail.guardrail_left.c1, _x.radar_info.radar_guardrail.guardrail_left.heading, _x.radar_info.radar_guardrail.guardrail_left.offset, _x.radar_info.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_left.lka_confidence, _x.radar_info.radar_guardrail.guardrail_right.c0, _x.radar_info.radar_guardrail.guardrail_right.c1, _x.radar_info.radar_guardrail.guardrail_right.heading, _x.radar_info.radar_guardrail.guardrail_right.offset, _x.radar_info.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_right.lka_confidence))
      length = len(self.radar_info.radar_barrier.barrier_left.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.radar_info.radar_barrier.barrier_left.coef.tostring())
      _x = self
      buff.write(_get_struct_2fI().pack(_x.radar_info.radar_barrier.barrier_left.dist_end, _x.radar_info.radar_barrier.barrier_left.dist_from, _x.radar_info.radar_barrier.barrier_left.lka_confidence))
      length = len(self.radar_info.radar_barrier.barrier_right.coef)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.radar_info.radar_barrier.barrier_right.coef.tostring())
      _x = self
      buff.write(_get_struct_2fIQ().pack(_x.radar_info.radar_barrier.barrier_right.dist_end, _x.radar_info.radar_barrier.barrier_right.dist_from, _x.radar_info.radar_barrier.barrier_right.lka_confidence, _x.radar_info.publish_ptp_ts))
      _x = self.radar_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3QfB().pack(_x.radar_info.counter, _x.radar_info.publish_ts, _x.vision_road.timestamp, _x.vision_road.laneline.LD_Lane_Width, _x.vision_road.laneline.LD_Crossing_Flag))
      length = len(self.vision_road.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v66 = val1.LD_First_Line
        _x = _v66
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v67 = _v66.LD_Line
        _x = _v67
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v66
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v68 = val1.LD_Second_Line
        _x = _v68
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v69 = _v68.LD_Line
        _x = _v69
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v68
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v70 = val1.LD_Special_Point
        _x = _v70
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.vision_road.slop.LD_Road_Vertical_Surface_Available, _x.vision_road.slop.LD_Road_Vertical_Surface_Start, _x.vision_road.slop.LD_Road_Vertical_Surface_End, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C0, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C1, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C2, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C3, _x.vision_road.lpp.LPP_Available, _x.vision_road.lpp.LPP_Source, _x.vision_road.lpp.LPP_Ctrl_Point_Lat, _x.vision_road.lpp.LPP_Ctrl_Point_Long, _x.vision_road.lpp.LPP_Confidence, _x.vision_road.lpp.LPP_First_Valid, _x.vision_road.lpp.LPP_First_VR_End, _x.vision_road.lpp.LPP_First.line_C0, _x.vision_road.lpp.LPP_First.line_C1, _x.vision_road.lpp.LPP_First.line_C2, _x.vision_road.lpp.LPP_First.line_C3, _x.vision_road.lpp.LPP_Second_Valid, _x.vision_road.lpp.LPP_Second_VR_End, _x.vision_road.lpp.LPP_Second.line_C0, _x.vision_road.lpp.LPP_Second.line_C1, _x.vision_road.lpp.LPP_Second.line_C2, _x.vision_road.lpp.LPP_Second.line_C3))
      length = len(self.vision_road.roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End))
        _v71 = val1.LD_RE_Line
        _x = _v71
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = val1
        buff.write(_get_struct_fi().pack(_x.LD_RE_Confidence, _x.LDRE_Class))
      length = len(self.vision_road.stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.vision_road.guidepoint.INTP_Is_Highway_Merge_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Merge_Right, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Right))
      length = len(self.vision_road.guidepoint.INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.guidepoint.INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
      length = len(self.vision_road.lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_road.lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status))
      _x = self.vision_road.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_road.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q154IQ().pack(_x.vision_road.counter, _x.vision_road.publish_ts, _x.vision_failsafe.timestamp, _x.vision_failsafe.failsafe_FW.FS_Rain, _x.vision_failsafe.failsafe_FW.FS_Fog, _x.vision_failsafe.failsafe_FW.FS_Snow, _x.vision_failsafe.failsafe_FW.FS_Full_Blockage, _x.vision_failsafe.failsafe_FW.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FW.FS_Lowsun, _x.vision_failsafe.failsafe_FW.FS_Sunray, _x.vision_failsafe.failsafe_FW.FS_Splash, _x.vision_failsafe.failsafe_FW.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FW.FS_Blur, _x.vision_failsafe.failsafe_FW.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FW.FS_illuminance, _x.vision_failsafe.failsafe_FN.FS_Rain, _x.vision_failsafe.failsafe_FN.FS_Fog, _x.vision_failsafe.failsafe_FN.FS_Snow, _x.vision_failsafe.failsafe_FN.FS_Full_Blockage, _x.vision_failsafe.failsafe_FN.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FN.FS_Lowsun, _x.vision_failsafe.failsafe_FN.FS_Sunray, _x.vision_failsafe.failsafe_FN.FS_Splash, _x.vision_failsafe.failsafe_FN.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FN.FS_Blur, _x.vision_failsafe.failsafe_FN.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FN.FS_illuminance, _x.vision_failsafe.failsafe_FL.FS_Rain, _x.vision_failsafe.failsafe_FL.FS_Fog, _x.vision_failsafe.failsafe_FL.FS_Snow, _x.vision_failsafe.failsafe_FL.FS_Full_Blockage, _x.vision_failsafe.failsafe_FL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FL.FS_Lowsun, _x.vision_failsafe.failsafe_FL.FS_Sunray, _x.vision_failsafe.failsafe_FL.FS_Splash, _x.vision_failsafe.failsafe_FL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FL.FS_Blur, _x.vision_failsafe.failsafe_FL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FL.FS_illuminance, _x.vision_failsafe.failsafe_FR.FS_Rain, _x.vision_failsafe.failsafe_FR.FS_Fog, _x.vision_failsafe.failsafe_FR.FS_Snow, _x.vision_failsafe.failsafe_FR.FS_Full_Blockage, _x.vision_failsafe.failsafe_FR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FR.FS_Lowsun, _x.vision_failsafe.failsafe_FR.FS_Sunray, _x.vision_failsafe.failsafe_FR.FS_Splash, _x.vision_failsafe.failsafe_FR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FR.FS_Blur, _x.vision_failsafe.failsafe_FR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FR.FS_illuminance, _x.vision_failsafe.failsafe_R.FS_Rain, _x.vision_failsafe.failsafe_R.FS_Fog, _x.vision_failsafe.failsafe_R.FS_Snow, _x.vision_failsafe.failsafe_R.FS_Full_Blockage, _x.vision_failsafe.failsafe_R.FS_Partial_Blockage, _x.vision_failsafe.failsafe_R.FS_Lowsun, _x.vision_failsafe.failsafe_R.FS_Sunray, _x.vision_failsafe.failsafe_R.FS_Splash, _x.vision_failsafe.failsafe_R.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_R.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_R.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_R.FS_Blur, _x.vision_failsafe.failsafe_R.FS_Smeared_Halo, _x.vision_failsafe.failsafe_R.FS_illuminance, _x.vision_failsafe.failsafe_RL.FS_Rain, _x.vision_failsafe.failsafe_RL.FS_Fog, _x.vision_failsafe.failsafe_RL.FS_Snow, _x.vision_failsafe.failsafe_RL.FS_Full_Blockage, _x.vision_failsafe.failsafe_RL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RL.FS_Lowsun, _x.vision_failsafe.failsafe_RL.FS_Sunray, _x.vision_failsafe.failsafe_RL.FS_Splash, _x.vision_failsafe.failsafe_RL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RL.FS_Blur, _x.vision_failsafe.failsafe_RL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RL.FS_illuminance, _x.vision_failsafe.failsafe_RR.FS_Rain, _x.vision_failsafe.failsafe_RR.FS_Fog, _x.vision_failsafe.failsafe_RR.FS_Snow, _x.vision_failsafe.failsafe_RR.FS_Full_Blockage, _x.vision_failsafe.failsafe_RR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RR.FS_Lowsun, _x.vision_failsafe.failsafe_RR.FS_Sunray, _x.vision_failsafe.failsafe_RR.FS_Splash, _x.vision_failsafe.failsafe_RR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RR.FS_Blur, _x.vision_failsafe.failsafe_RR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RR.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Front.FS_Rain, _x.vision_failsafe.failsafe_SVC_Front.FS_Fog, _x.vision_failsafe.failsafe_SVC_Front.FS_Snow, _x.vision_failsafe.failsafe_SVC_Front.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Front.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Front.FS_Splash, _x.vision_failsafe.failsafe_SVC_Front.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Front.FS_Blur, _x.vision_failsafe.failsafe_SVC_Front.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Front.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Rear.FS_Rain, _x.vision_failsafe.failsafe_SVC_Rear.FS_Fog, _x.vision_failsafe.failsafe_SVC_Rear.FS_Snow, _x.vision_failsafe.failsafe_SVC_Rear.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Rear.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Rear.FS_Splash, _x.vision_failsafe.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Rear.FS_Blur, _x.vision_failsafe.failsafe_SVC_Rear.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Rear.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Left.FS_Rain, _x.vision_failsafe.failsafe_SVC_Left.FS_Fog, _x.vision_failsafe.failsafe_SVC_Left.FS_Snow, _x.vision_failsafe.failsafe_SVC_Left.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Left.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Left.FS_Splash, _x.vision_failsafe.failsafe_SVC_Left.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Left.FS_Blur, _x.vision_failsafe.failsafe_SVC_Left.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Left.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Right.FS_Rain, _x.vision_failsafe.failsafe_SVC_Right.FS_Fog, _x.vision_failsafe.failsafe_SVC_Right.FS_Snow, _x.vision_failsafe.failsafe_SVC_Right.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Right.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Right.FS_Splash, _x.vision_failsafe.failsafe_SVC_Right.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Right.FS_Blur, _x.vision_failsafe.failsafe_SVC_Right.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Right.FS_illuminance, _x.vision_failsafe.publish_ptp_ts))
      _x = self.vision_failsafe.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q2iQ().pack(_x.vision_failsafe.counter, _x.vision_failsafe.publish_ts, _x.vision_feature.timestamp, _x.vision_feature.ahc.HLB_Decision, _x.vision_feature.ahc.HLB_Reason_Low_Beam, _x.vision_feature.publish_ptp_ts))
      _x = self.vision_feature.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_feature.counter, _x.vision_feature.publish_ts, _x.vision_fsp.timestamp))
      length = len(self.vision_fsp.freespace)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_fsp.freespace:
        _x = val1
        buff.write(_get_struct_Ii2fi2fif().pack(_x.FSP_Obs_ID, _x.FSP_Lane_Assginment, _x.FSP_Range, _x.FSP_Azimuth_Angle, _x.FSP_Classification_Type, _x.FSP_Height, _x.FSP_Elevation_Angle, _x.FSP_Mobility_Status, _x.FSP_Existence_Prob))
      _x = self
      buff.write(_get_struct_iQ().pack(_x.vision_fsp.source, _x.vision_fsp.publish_ptp_ts))
      _x = self.vision_fsp.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_fsp.counter, _x.vision_fsp.publish_ts, _x.vision_traffic_light.timestamp))
      length = len(self.vision_traffic_light.trafficlight)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_traffic_light.trafficlight:
        _x = val1
        buff.write(_get_struct_i2I3f3iI().pack(_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer))
      _x = self.vision_traffic_light.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_traffic_light.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_traffic_light.counter, _x.vision_traffic_light.publish_ts, _x.vision_traffic_sign.timestamp))
      length = len(self.vision_traffic_sign.trafficsign)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_traffic_sign.trafficsign:
        _x = val1
        buff.write(_get_struct_2I2i3f3i8fi3f().pack(_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.vision_traffic_sign.trafficsign_num, _x.vision_traffic_sign.publish_ptp_ts))
      _x = self.vision_traffic_sign.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.vision_traffic_sign.counter, _x.vision_traffic_sign.publish_ts, _x.vision_vehicle_light.timestamp))
      length = len(self.vision_vehicle_light.vehiclelight)
      buff.write(_struct_I.pack(length))
      for val1 in self.vision_vehicle_light.vehiclelight:
        _x = val1
        buff.write(_get_struct_3Ii13f2B().pack(_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New))
      _x = self.vision_vehicle_light.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vision_vehicle_light.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i().pack(_x.vision_vehicle_light.counter, _x.vision_vehicle_light.publish_ts, _x.vehicle_10ms.StrSys.StrAgFailSts, _x.vehicle_10ms.StrSys.StrAgCalSts, _x.vehicle_10ms.StrSys.StrWhlAgSAE, _x.vehicle_10ms.StrSys.StrWhlAgSpdSAE, _x.vehicle_10ms.StrSys.PnnAgVld, _x.vehicle_10ms.StrSys.PnnAgSAE, _x.vehicle_10ms.StrSys.PnnAgOffsetSAE, _x.vehicle_10ms.StrSys.EstRackFrcVld, _x.vehicle_10ms.StrSys.EstRackFrcSae, _x.vehicle_10ms.StrSys.MtrTqVld, _x.vehicle_10ms.StrSys.MtrTqSAE, _x.vehicle_10ms.StrSys.TorsBarTqVld, _x.vehicle_10ms.StrSys.TorsBarTqSAE, _x.vehicle_10ms.StrSys.EPSSts, _x.vehicle_10ms.StrSys.DrvngMod, _x.vehicle_10ms.StrSys.RampSts, _x.vehicle_10ms.StrSys.ACIMtrTqVld, _x.vehicle_10ms.StrSys.ACIMtrTqSAE, _x.vehicle_10ms.StrSys.Temperature, _x.vehicle_10ms.StrSys.SupInfo, _x.vehicle_10ms.StrSys.VMCHVIAvl, _x.vehicle_10ms.StrSys.EPSReqTyp, _x.vehicle_10ms.StrSys.BCUCTIAvl, _x.vehicle_10ms.StrSys.WarnLampReq, _x.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid, _x.vehicle_10ms.StrSys.SWCFailSts, _x.vehicle_10ms.StrSys.SteerColTiltCtrlSts, _x.vehicle_10ms.StrSys.SteerColTiltPos, _x.vehicle_10ms.StrSys.SteerColTeleCtrlSts, _x.vehicle_10ms.StrSys.SteerColTelescopePos, _x.vehicle_10ms.StrSys.HODErrSts, _x.vehicle_10ms.StrSys.HOSts, _x.vehicle_10ms.StrSys.OverRideDetn))
      length = len(self.vehicle_10ms.StrSys.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.vehicle_10ms.StrSys.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().pack(_x.vehicle_10ms.BrkSys.BrkPdl.TrvlCalSts, _x.vehicle_10ms.BrkSys.BrkPdl.Trvl, _x.vehicle_10ms.BrkSys.BrkPdl.BrkPedlSts, _x.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd, _x.vehicle_10ms.BrkSys.BrkPdl.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrs, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.vehicle_10ms.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSwtSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBMod, _x.vehicle_10ms.BrkSys.PrkBrk.CDPReq, _x.vehicle_10ms.BrkSys.PrkBrk.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkOverHeat, _x.vehicle_10ms.BrkSys.BrkHAZReq, _x.vehicle_10ms.BrkSys.BCUBrkLiReq, _x.vehicle_10ms.BrkSys.StstSts, _x.vehicle_10ms.BrkSys.NoBrkF, _x.vehicle_10ms.BrkSys.SupInfo, _x.vehicle_10ms.BrkSys.BrkFldLvl, _x.vehicle_10ms.BrkSys.BrkPadWearSts, _x.vehicle_10ms.BrkSys.BrkFunSt.BDWActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AVHSts, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DWTActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HDCSts, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPCfgSts, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.ExtBrkActv, _x.vehicle_10ms.BrkSys.ExtBrkCp, _x.vehicle_10ms.BrkSys.ExtBrkSts, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTar, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTarQ, _x.vehicle_10ms.BrkSys.MbRegenReAxleTar, _x.vehicle_10ms.BrkSys.MbRegenReAxleTarQ, _x.vehicle_10ms.BrkSys.StabyMagin, _x.vehicle_10ms.BrkSys.StabyMaginQ, _x.vehicle_10ms.BrkSys.BrkFldWarnReq, _x.vehicle_10ms.BrkSys.BrkPadWearWarnReq, _x.vehicle_10ms.BrkSys.FCC1_StandstillStatus, _x.vehicle_10ms.PT.AccrPedal.EfcPosnVld, _x.vehicle_10ms.PT.AccrPedal.EfcPosn, _x.vehicle_10ms.PT.AccrPedal.ActPosnVld, _x.vehicle_10ms.PT.AccrPedal.ActPosn, _x.vehicle_10ms.PT.AccrPedal.PedlOvrd, _x.vehicle_10ms.PT.AccrPedal.timestamp_ptp_ns, _x.vehicle_10ms.PT.Gear.SlctrPosnVld, _x.vehicle_10ms.PT.Gear.ActGearVld, _x.vehicle_10ms.PT.Gear.TrgtGearVld, _x.vehicle_10ms.PT.Gear.SlctrPosn, _x.vehicle_10ms.PT.Gear.ActGear, _x.vehicle_10ms.PT.Gear.TrgtGear, _x.vehicle_10ms.PT.Gear.timestamp_ptp_ns))
      length = len(self.vehicle_10ms.PT.Motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_10ms.PT.Motor:
        _x = val1
        buff.write(_get_struct_ifififI4i().pack(_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts))
        length = len(val1.timestamp_ptp_ns)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_2B2if6Bf().pack(_x.vehicle_10ms.PT.VCURvsLampReq, _x.vehicle_10ms.PT.VCUBrkLampReq, _x.vehicle_10ms.PT.CruiseStatus, _x.vehicle_10ms.PT.VCUEPBReq, _x.vehicle_10ms.PT.CruiseStoredSpeed, _x.vehicle_10ms.PT.VCUPtWakeupReq, _x.vehicle_10ms.PT.DCChrgrPluginSts, _x.vehicle_10ms.PT.ACChrgrPluginSts, _x.vehicle_10ms.PT.VCU_VehHldReq, _x.vehicle_10ms.PT.VCU_BrkReqEna, _x.vehicle_10ms.PT.VCU_ForceFctEna, _x.vehicle_10ms.PT.VCU_TarBrkFReq))
      length = len(self.vehicle_10ms.Whl.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_10ms.Whl.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      length = len(self.vehicle_10ms.Whl.WHlTpms)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_10ms.Whl.WHlTpms:
        _x = val1
        buff.write(_get_struct_fi2Ii2I().pack(_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts))
      _x = self
      buff.write(_get_struct_2Q2i3fi2fi().pack(_x.vehicle_10ms.Whl.WhlDyn_Timestamp, _x.vehicle_10ms.Whl.timestamp_ptp_ns, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdSts, _x.vehicle_10ms.VehDyn.VehSpd.VehMovgDir, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdkph, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdmps, _x.vehicle_10ms.VehDyn.VehSpd.VehFiltLngAcc, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILDSts, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILD, _x.vehicle_10ms.VehDyn.VehSpd.VehDispSpd, _x.vehicle_10ms.VehDyn.VehSpd.VCUVehDispSpdSts))
      length = len(self.vehicle_10ms.VehDyn.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.vehicle_10ms.VehDyn.VehSpd.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.vehicle_10ms.VehDyn.AxAyYrsCalSts, _x.vehicle_10ms.VehDyn.LgtASts, _x.vehicle_10ms.VehDyn.LgtSAEAg, _x.vehicle_10ms.VehDyn.LgtSAEAmpss, _x.vehicle_10ms.VehDyn.LatASts, _x.vehicle_10ms.VehDyn.LatSAEAg, _x.vehicle_10ms.VehDyn.LatSAEAmpss, _x.vehicle_10ms.VehDyn.YawRateSts, _x.vehicle_10ms.VehDyn.YawRateSAERps, _x.vehicle_10ms.VehDyn.YawRateSAEDps, _x.vehicle_10ms.VehDyn.VehOdom, _x.vehicle_10ms.VehDyn.YawRate_Timestamp, _x.vehicle_10ms.VehDyn.timestamp_ptp_ns, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.ADTSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.HldLampReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtSts))
      length = len(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_fBi4B2Q().pack(_x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.vehicle_10ms.publish_ptp_ts))
      _x = self.vehicle_10ms.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.vehicle_10ms.counter, _x.vehicle_10ms.publish_ts))
      length = len(self.vehicle_50ms.Suspension.Lvl)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.Suspension.Lvl.tostring())
      length = len(self.vehicle_50ms.Suspension.LvlAdjm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.vehicle_50ms.Suspension.LvlAdjm.tostring())
      _x = self
      buff.write(_get_struct_2B2i3B7i().pack(_x.vehicle_50ms.Suspension.LvlCalCmptl, _x.vehicle_50ms.Suspension.CargoActv, _x.vehicle_50ms.Suspension.CrrntLvl, _x.vehicle_50ms.Suspension.TarLvl, _x.vehicle_50ms.Suspension.ExtraHiPosn, _x.vehicle_50ms.Suspension.ExtraLoPosn, _x.vehicle_50ms.Suspension.EasyEntryEnaSts, _x.vehicle_50ms.Suspension.LvlAdjDrvgMod, _x.vehicle_50ms.Suspension.LvlAdjMod, _x.vehicle_50ms.Suspension.DampgCtrlMod, _x.vehicle_50ms.Suspension.DampgDrvgMod, _x.vehicle_50ms.VehBody.VehStatus.VehState, _x.vehicle_50ms.VehBody.VehStatus.VehStateASIL, _x.vehicle_50ms.VehBody.VehStatus.VehMode))
      length = len(self.vehicle_50ms.VehBody.Door.DoorAjarSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.Door.DoorAjarSts.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.vehicle_50ms.VehBody.Door.HoodAjarSts, _x.vehicle_50ms.VehBody.Door.TrAjarSts))
      length = len(self.vehicle_50ms.VehBody.SeatOccpSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.SeatOccpSts.tostring())
      length = len(self.vehicle_50ms.VehBody.SeatBltSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.vehicle_50ms.VehBody.SeatBltSts.tostring())
      length = len(self.vehicle_50ms.VehBody.LightSts.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.FogLiSts.tostring())
      length = len(self.vehicle_50ms.VehBody.LightSts.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.BeamSts.tostring())
      _x = self.vehicle_50ms.VehBody.LightSts.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.vehicle_50ms.VehBody.LightSts.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.TurnIndcrLiSts.tostring())
      length = len(self.vehicle_50ms.VehBody.LightSts.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.MirrLigtSts.tostring())
      length = len(self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi.tostring())
      length = len(self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn.tostring())
      length = len(self.vehicle_50ms.VehBody.LightSts.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.FogLiFctActvSts.tostring())
      _x = self
      buff.write(_get_struct_IB().pack(_x.vehicle_50ms.VehBody.LightSts.LiSnsrData, _x.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts))
      length = len(self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts.tostring())
      _x = self
      buff.write(_get_struct_4i6I3iBf4i2Bf4i2BiBi().pack(_x.vehicle_50ms.VehBody.WipperSts.FrntWiprSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWiperParkSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWipMod, _x.vehicle_50ms.VehBody.WipperSts.FrntWiprReq, _x.vehicle_50ms.VehBody.Time.Yr, _x.vehicle_50ms.VehBody.Time.Mth, _x.vehicle_50ms.VehBody.Time.Day, _x.vehicle_50ms.VehBody.Time.Hr, _x.vehicle_50ms.VehBody.Time.Min, _x.vehicle_50ms.VehBody.Time.Sec, _x.vehicle_50ms.VehBody.CenLockSts, _x.vehicle_50ms.VehBody.TpmsSts, _x.vehicle_50ms.VehBody.DrvState, _x.vehicle_50ms.VehBody.AmbTempValid, _x.vehicle_50ms.VehBody.AmbTemp, _x.vehicle_50ms.VehBody.TrailerModReq, _x.vehicle_50ms.VehBody.SWCAdjModReq, _x.vehicle_50ms.VehBody.NBSDrvrSts, _x.vehicle_50ms.VehBody.PrkgTyp, _x.vehicle_50ms.VehBody.CrashDetd, _x.vehicle_50ms.VehBody.AdsLampReq, _x.vehicle_50ms.VehBody.IntrTemp, _x.vehicle_50ms.VehBody.IntrTempVld, _x.vehicle_50ms.VehBody.MaiLiSet, _x.vehicle_50ms.VehBody.SDWReq, _x.vehicle_50ms.VehBody.UPAReq, _x.vehicle_50ms.VehBody.HornCtrlSts, _x.vehicle_50ms.VehBody.HeadLampsOn, _x.vehicle_50ms.VehBody.CDCCameraReq, _x.vehicle_50ms.VehBody.ECOPlusModSts, _x.vehicle_50ms.VehBody.RpsKeyDist))
      length = len(self.vehicle_50ms.VehBody.MirrorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.VehBody.MirrorStatus.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.vehicle_50ms.VehBody.RpsMovReq, _x.vehicle_50ms.VehBody.RpsReq))
      length = len(self.vehicle_50ms.DrvIn.StrWhlSwtch.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.DrvIn.StrWhlSwtch.AdUpSwtSts.tostring())
      length = len(self.vehicle_50ms.DrvIn.StrWhlSwtch.EnUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.vehicle_50ms.DrvIn.StrWhlSwtch.EnUpSwtSts.tostring())
      _x = self
      buff.write(_get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().pack(_x.vehicle_50ms.DrvIn.AdFunCfg.AEBOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.DASTactileOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.vehicle_50ms.DrvIn.AdFunCfg.FCWSetReq, _x.vehicle_50ms.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCAOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTAReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SetHMA, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTABReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.vehicle_50ms.DrvIn.AdFunCfg.CDCFailSts, _x.vehicle_50ms.DrvIn.AdFunCfg.Set360AP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_ALCS, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSWF, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SdowOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.DistractionSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.vehicle_50ms.DrvIn.AdFunCfg.CurveSpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.TowModActv, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOPALC, _x.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.vehicle_50ms.DrvIn.AdFunCfg.CfgTaskSwitch, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.vehicle_50ms.DrvIn.FogLiPushSwtSts, _x.vehicle_50ms.DrvIn.FrntWiprInterSpd, _x.vehicle_50ms.DrvIn.FrntWiprSwtSts, _x.vehicle_50ms.DrvIn.HiBeamSwtSts, _x.vehicle_50ms.DrvIn.TurnIndcrSwtSts, _x.vehicle_50ms.DrvIn.WiprAutoSwtSts, _x.vehicle_50ms.DrvIn.WshrReWiprSwtSts, _x.vehicle_50ms.DrvIn.SCMFailSts, _x.vehicle_50ms.DrvIn.FogLiSCMCmd, _x.vehicle_50ms.DrvIn.HiBeamSCMCmd, _x.vehicle_50ms.DrvIn.ReWiprSCMCmd, _x.vehicle_50ms.DrvIn.SVCAvl, _x.vehicle_50ms.DrvIn.NaviSpdLim, _x.vehicle_50ms.DrvIn.WTIDispSt, _x.vehicle_50ms.DrvIn.NaviSpdUnit, _x.vehicle_50ms.DrvIn.NaviSpdLimSts, _x.vehicle_50ms.DrvIn.NaviCurrentRoadTyp, _x.vehicle_50ms.DrvIn.NavCtryCod, _x.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICsts, _x.vehicle_50ms.DrvIn.DA_TauGap_stored, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAlertLvl, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAvlSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttention, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSFailSafe, _x.vehicle_50ms.DrvIn.DMSInfo.DMSSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigue, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaReq, _x.vehicle_50ms.DrvIn.VehEgyMngtMod, _x.vehicle_50ms.DrvIn.WheelBrkPReLe, _x.vehicle_50ms.DrvIn.WheelBrkPFrntRi, _x.vehicle_50ms.DrvIn.WheelBrkPFrntLe, _x.vehicle_50ms.DrvIn.WheelBrkPReRi, _x.vehicle_50ms.DrvIn.VehAccrModReq, _x.vehicle_50ms.DrvIn.PwrSwapSteerWhlWarn, _x.vehicle_50ms.DrvIn.DriverPSAPRequest, _x.vehicle_50ms.DrvIn.PSAPParkViewStatus, _x.vehicle_50ms.DrvIn.VehPrepReq, _x.vehicle_50ms.DrvIn.StoreDrvrSlotSelnReq, _x.vehicle_50ms.DrvIn.LockConfig, _x.vehicle_50ms.DrvIn.DriverSAPAReq, _x.vehicle_50ms.DrvIn.DriverSAPASlotSelection, _x.vehicle_50ms.UPA.SDWSts, _x.vehicle_50ms.UPA.APASts, _x.vehicle_50ms.UPA.MapObjSts, _x.vehicle_50ms.UPA.UpaSysDi, _x.vehicle_50ms.UPA.UpaSysSts, _x.vehicle_50ms.UPA.UpaSysSrv))
      length = len(self.vehicle_50ms.UPA.USSlot)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.USSlot:
        _x = val1
        buff.write(_get_struct_2I2ifiI10i().pack(_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha))
      length = len(self.vehicle_50ms.UPA.MapObj)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.MapObj:
        _x = val1
        buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
      length = len(self.vehicle_50ms.UPA.ApaSdw)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.ApaSdw:
        length = len(val1.Dst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.Dst.tostring())
      length = len(self.vehicle_50ms.UPA.UsRegnDst)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_50ms.UPA.UsRegnDst:
        _x = val1.SnsrFltSt
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.RegnDst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.RegnDst.tostring())
      _x = self
      buff.write(_get_struct_5iQ().pack(_x.vehicle_50ms.UPA.USSMode, _x.vehicle_50ms.PsapCan.ConnectionSts, _x.vehicle_50ms.PsapCan.StationPlatformSts, _x.vehicle_50ms.PsapCan.VehLongPosInStation, _x.vehicle_50ms.PsapCan.VehLatPosInStation, _x.vehicle_50ms.publish_ptp_ts))
      _x = self.vehicle_50ms.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QBI().pack(_x.vehicle_50ms.counter, _x.vehicle_50ms.publish_ts, _x.sd_map.adas_info.is_adasmap_valid, _x.sd_map.adas_info.m_adasmap_is_highway))
      length = len(self.sd_map.adas_info.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.segment:
        _x = val1
        buff.write(_get_struct_2QiQi2BI2B2I2B2I().pack(_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.sd_map.adas_info.profile_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.profile_point:
        _x = val1
        buff.write(_get_struct_2QiQBd().pack(_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value))
      length = len(self.sd_map.adas_info.stub)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.stub:
        _x = val1
        buff.write(_get_struct_2Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.sd_map.adas_info.traffic_sign)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.traffic_sign:
        _x = val1
        buff.write(_get_struct_4Q3IQIB().pack(_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid))
        _v72 = val1.position_pt
        _x = _v72
        buff.write(_get_struct_2d().pack(_x.longitude, _x.latitude))
        _x = val1.height
        buff.write(_get_struct_d().pack(_x))
      length = len(self.sd_map.adas_info.lane_connection)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.lane_connection:
        _x = val1
        buff.write(_get_struct_2Q8I().pack(_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
      _x = self.sd_map.adas_info.adas_meta.country_code
      buff.write(_get_struct_I().pack(_x))
      length = len(self.sd_map.adas_info.traffic_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.adas_info.traffic_event:
        _x = val1
        buff.write(_get_struct_2Q2iIQ().pack(_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type))
      _x = self
      buff.write(_get_struct_Q2i4Q().pack(_x.sd_map.navigation_info.heart_beat_info.heart_beat, _x.sd_map.navigation_info.heart_beat_info.reliable_state, _x.sd_map.navigation_info.heart_beat_info.navigation_state, _x.sd_map.navigation_info.turn_info.dist_to_first_turn, _x.sd_map.navigation_info.turn_info.first_turn_info, _x.sd_map.navigation_info.turn_info.dist_to_second_turn, _x.sd_map.navigation_info.turn_info.second_turn_info))
      length = len(self.sd_map.navigation_info.turn_info.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.sd_map.navigation_info.turn_info.lanenr_info.tostring())
      length = len(self.sd_map.navigation_info.speed_limit_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.sd_map.navigation_info.speed_limit_info:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.speed_limit, _x.speed_limit_type))
      _x = self
      buff.write(_get_struct_i3dQ().pack(_x.sd_map.navigation_info.road_class, _x.sd_map.map_loc.longitude, _x.sd_map.map_loc.latitude, _x.sd_map.map_loc.altitude, _x.sd_map.publish_ptp_ts))
      _x = self.sd_map.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i().pack(_x.sd_map.counter, _x.sd_map.publish_ts, _x.fct_out.Ahc.AhcSysSt, _x.fct_out.Ahc.AhcHiBmReq, _x.fct_out.LatCtrl.ExtReqCAMFC, _x.fct_out.LatCtrl.LeLineTyp, _x.fct_out.LatCtrl.RiLineTyp, _x.fct_out.LatCtrl.LeTrackingSts, _x.fct_out.LatCtrl.RiTrackingSts, _x.fct_out.LatCtrl.LaneAssiTyp, _x.fct_out.LatCtrl.LkaSnsvty, _x.fct_out.LatCtrl.AbsltPinionAgReq, _x.fct_out.LatCtrl.EPSReqTyp, _x.fct_out.LatCtrl.LkaLnAsstSts, _x.fct_out.LatCtrl.LkaHODWarnSeq, _x.fct_out.LatCtrl.LatCtrlActv, _x.fct_out.LatCtrl.EPSACITsuSup, _x.fct_out.LatCtrl.VMC1ACITsuSup, _x.fct_out.LatCtrl.LatCtrlTarLe, _x.fct_out.LatCtrl.LatCtrlTarRi, _x.fct_out.LatCtrl.AlcsInfo.DA_LaneChgSupReason, _x.fct_out.LatCtrl.AlcsInfo.AlcManeuverSts, _x.fct_out.LatCtrl.AlcsInfo.DA_ALCSsts, _x.fct_out.LatCtrl.AlcsInfo.ShowSetDA_ALCS, _x.fct_out.LonCtrl.ModeESP, _x.fct_out.LonCtrl.TauGapSet, _x.fct_out.LonCtrl.ObjValid, _x.fct_out.LonCtrl.DsplVelocitySet, _x.fct_out.LonCtrl.GoNotfrReq, _x.fct_out.LonCtrl.TextInfo, _x.fct_out.LonCtrl.GoNotfrOnOffSts, _x.fct_out.LonCtrl.TSRSpdLimDataOnOffSts, _x.fct_out.LonCtrl.TakeOverReq, _x.fct_out.LonCtrl.TargetAccel, _x.fct_out.LonCtrl.CmftLowerAccl, _x.fct_out.LonCtrl.CmftUpprAccl, _x.fct_out.LonCtrl.MinJerkAccl, _x.fct_out.LonCtrl.MaxJerkAccl, _x.fct_out.LonCtrl.DecelToStopReq, _x.fct_out.LonCtrl.ShutdownModReq, _x.fct_out.LonCtrl.DrvOffReq, _x.fct_out.LonCtrl.BrkPreferReq, _x.fct_out.LonCtrl.MinBkrgReq, _x.fct_out.LonCtrl.ACCNPDrvMsg, _x.fct_out.LonCtrl.ClsObjTyp, _x.fct_out.LonCtrl.ClsObjDst, _x.fct_out.LonCtrl.TauGapChgDisp, _x.fct_out.LonCtrl.DisplSetSpdEnbl, _x.fct_out.LonCtrl.VlcReqFct, _x.fct_out.LonCtrl.SpdUnit, _x.fct_out.LonCtrl.DA_SetSpeedAnimation, _x.fct_out.LonCtrl.DA_Inhibit, _x.fct_out.Hwa.AccNpSts, _x.fct_out.Hwa.LongCtrlActv, _x.fct_out.Hwa.LatCtrlActv, _x.fct_out.Hwa.HodWarnReq, _x.fct_out.Hwa.HzrdLiReq, _x.fct_out.Hwa.DoorUnlckReq, _x.fct_out.Hwa.HodTakeOver, _x.fct_out.Hwa.NaNadSts, _x.fct_out.Hwa.NaNadWTI, _x.fct_out.Hwa.FreespaceIntrsn, _x.fct_out.Hwa.ADC_VehDisp_Warn, _x.fct_out.Hwa.DA_TurnIndctrLeTip, _x.fct_out.Hwa.DA_TurnIndctrRiTip, _x.fct_out.Hwa.DA_TurnIndctrLeLatch, _x.fct_out.Hwa.DA_TurnIndctrRiLatch, _x.fct_out.Hwa.DA_TurnIndctrLePush, _x.fct_out.Hwa.DA_TurnIndctrRiPush, _x.fct_out.Hwa.DA_NOP_Avl, _x.fct_out.Hwa.NeedNOPCtrl, _x.fct_out.Hwa.DA_NOP_WTIs, _x.fct_out.Hwa.DA_iACC_WTIs, _x.fct_out.Hwa.DA_Pilot_WTIs, _x.fct_out.Hwa.DA_SysFailSymbol, _x.fct_out.Ldw.AdasLeLine, _x.fct_out.Ldw.AdasRiLine, _x.fct_out.Ldw.LaneAsstSts, _x.fct_out.Ldw.EPSReqTyp, _x.fct_out.Ldw.Snvty, _x.fct_out.Ldw.LaneAsstTyp, _x.fct_out.Ldw.HapticOnOffSts, _x.fct_out.Sas.SpeedLimitValue, _x.fct_out.Sas.SpeedUnit, _x.fct_out.Sas.SpeedLimitAttribute, _x.fct_out.Sas.SpeedLimitTakeover, _x.fct_out.Sas.SupSignType, _x.fct_out.Sas.SupSignAttribute, _x.fct_out.Sas.RoadFeatureWarningSign, _x.fct_out.Sas.TrafficLightSts, _x.fct_out.Sas.LocalHazards, _x.fct_out.Sas.SLIFState, _x.fct_out.Sas.SLWFWarnTrigger, _x.fct_out.Heater.WSHeatReq, _x.fct_out.Heater.WSHeatReqValid, _x.fct_out.Elk.ElkSts, _x.fct_out.Elk.ESFWarningSts))
      length = len(self.fct_out.Function)
      buff.write(_struct_I.pack(length))
      for val1 in self.fct_out.Function:
        _x = val1.FunctionName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.FunctionID, _x.FuncSts, _x.ReqFunctionID))
      _x = self
      buff.write(_get_struct_13IBIBIB5IB().pack(_x.fct_out.AcmEdr.acsf_b1_sts_edr, _x.fct_out.AcmEdr.acsf_b2_sts_edr, _x.fct_out.AcmEdr.acsf_c_sts_edr, _x.fct_out.AcmEdr.acsf_d_sts_edr, _x.fct_out.AcmEdr.acsf_e_sts_edr, _x.fct_out.AcmEdr.lane_assist_sts_edr, _x.fct_out.AcmEdr.ldw_lka_lane_assi_typ_edr, _x.fct_out.AcmEdr.adas_le_line_edr, _x.fct_out.AcmEdr.adas_ri_line_edr, _x.fct_out.AcmEdr.elk_sts_edr, _x.fct_out.AcmEdr.esf_warning_sts_edr, _x.fct_out.AcmEdr.acc_sts_edr, _x.fct_out.HmiIcon.ShowSetSWF, _x.fct_out.HmiIcon.ShowSetDA_ALCS, _x.fct_out.HmiIcon.ShowSetDA_SpdAssist, _x.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl, _x.fct_out.HmiIcon.ShowSetDA_SteerAssist, _x.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist, _x.fct_out.HmiIcon.ReRADfeatures_FactoryDft, _x.fct_out.HmiIcon.LaneFeautres_FactoryDft, _x.fct_out.Eas.EASSts, _x.fct_out.Eas.EASWarningLv, _x.fct_out.Eas.RpsLockUnlckCtrl, _x.fct_out.Eas.EasCall))
      length = len(self.fct_out.Reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.fct_out.Reserved.tostring())
      _x = self
      buff.write(_get_struct_2i16Q().pack(_x.fct_out.SesrSts.LidarSts, _x.fct_out.SesrSts.Camera_FrntWideSts, _x.fct_out.RcvProtoPTPTime.function_arb_out_ptp_ts, _x.fct_out.RcvProtoPTPTime.sd_map_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_functionstatus_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_speedlimitvalue_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_vehicleout_ptp_ts, _x.fct_out.RcvProtoPTPTime.side_feature_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_illumnance_flag_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_road_detection_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_10ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_50ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_lpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_obf_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_rme_road_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tse_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tsi_outputs_ptp_ts))
      length = len(self.fct_out.RcvProtoPTPTime.reserved_ptp_ts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.fct_out.RcvProtoPTPTime.reserved_ptp_ts.tostring())
      _x = self.fct_out.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.fct_out.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QB7f().pack(_x.fct_out.counter, _x.fct_out.publish_ts, _x.vehicle_config.is_vehicle_info_valid, _x.vehicle_config.feature_vehicle_info.wheel_base, _x.vehicle_config.feature_vehicle_info.veh_overall_length, _x.vehicle_config.feature_vehicle_info.veh_overall_width, _x.vehicle_config.feature_vehicle_info.veh_width, _x.vehicle_config.feature_vehicle_info.veh_height, _x.vehicle_config.feature_vehicle_info.front_tread_width, _x.vehicle_config.feature_vehicle_info.rear_tread_width))
      length = len(self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_28f().pack(_x.vehicle_config.feature_vehicle_info.front_bumper_to_rear_axle, _x.vehicle_config.feature_vehicle_info.front_main_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.vehicle_config.cal_vehicle_info.veh_calib_height, _x.vehicle_config.cal_vehicle_info.veh_width, _x.vehicle_config.cal_vehicle_info.veh_fwheel2head, _x.vehicle_config.cal_vehicle_info.veh_rwheel2tail, _x.vehicle_config.cal_vehicle_info.veh_wheel_base))
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_wide.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_wide.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_right.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_right.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_left.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.front_left.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.rear_right.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.rear_right.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.rear_left.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.rear_left.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_front.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_front.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_left.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_left.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_right.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.camera_location.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.camera_location.svc_right.distance.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.angle.tostring())
      length = len(self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.distance.tostring())
      _x = self.vehicle_config.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.vehicle_config.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_34Q().pack(_x.vehicle_config.counter, _x.vehicle_config.publish_ts, _x.radar_info_topic.received_topic_publish_ts, _x.radar_info_topic.received_topic_counter, _x.vision_objects_topic.received_topic_publish_ts, _x.vision_objects_topic.received_topic_counter, _x.vision_road_topic.received_topic_publish_ts, _x.vision_road_topic.received_topic_counter, _x.vision_failsafe_topic.received_topic_publish_ts, _x.vision_failsafe_topic.received_topic_counter, _x.vision_feature_topic.received_topic_publish_ts, _x.vision_feature_topic.received_topic_counter, _x.vision_fsp_topic.received_topic_publish_ts, _x.vision_fsp_topic.received_topic_counter, _x.vision_traffic_light_topic.received_topic_publish_ts, _x.vision_traffic_light_topic.received_topic_counter, _x.vision_traffic_sign_topic.received_topic_publish_ts, _x.vision_traffic_sign_topic.received_topic_counter, _x.vision_vehicle_light_topic.received_topic_publish_ts, _x.vision_vehicle_light_topic.received_topic_counter, _x.vehicle_10ms_topic.received_topic_publish_ts, _x.vehicle_10ms_topic.received_topic_counter, _x.vehicle_50ms_topic.received_topic_publish_ts, _x.vehicle_50ms_topic.received_topic_counter, _x.vehicle_fctout_topic.received_topic_publish_ts, _x.vehicle_fctout_topic.received_topic_counter, _x.sd_map_topic.received_topic_publish_ts, _x.sd_map_topic.received_topic_counter, _x.lidar_read_ts.received_topic_publish_ts, _x.lidar_read_ts.received_topic_counter, _x.vehicle_config_topic.received_topic_publish_ts, _x.vehicle_config_topic.received_topic_counter, _x.dead_reckoning_latest_ts.received_topic_publish_ts, _x.dead_reckoning_latest_ts.received_topic_counter))
      length = len(self.od_output.sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.sensors:
        _x = val1
        buff.write(_get_struct_IQ().pack(_x.sensor_id, _x.measuring_ts))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.od_output.cooking_ts, _x.od_output.send_ts))
      length = len(self.od_output.lidar_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.lidar_result:
        _x = val1
        buff.write(_get_struct_2Ii10f().pack(_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration))
        length = len(val1.statistics_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.statistics_feature.tostring())
      length = len(self.od_output.cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v73 = val1.mono3d
        _x = _v73
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.subtype_scores.tostring())
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.occlusion.tostring())
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.box.tostring())
        length = len(val1.kpts)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.kpts.tostring())
        length = len(val1.kpts_score)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.kpts_score.tostring())
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_2d.tostring())
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_3d.tostring())
        length = len(val1.reid_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reid_feature.tostring())
        length = len(val1.theta2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.theta2d.tostring())
        _x = val1.has_person
        buff.write(_get_struct_f().pack(_x))
      length = len(self.od_output.static_cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.static_cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v74 = val1.mono3d
        _x = _v74
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.subtype_scores.tostring())
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.occlusion.tostring())
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.box.tostring())
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_2d.tostring())
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_3d.tostring())
      length = len(self.od_output.failsafe_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_output.failsafe_result:
        _x = val1
        buff.write(_get_struct_IfIfIfIfIf().pack(_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score))
      _x = self.od_output.reserved
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.od_output.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.od_output.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4QI().pack(_x.od_output.counter, _x.od_output.publish_ts, _x.od_output_topic.received_topic_publish_ts, _x.od_output_topic.received_topic_counter, _x.lanelist.LL_LANE_NUM))
      length = len(self.lanelist.LL_Lane_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanelist.LL_Lane_List:
        _x = val1.PL_POINT_NUM
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.PL_Points_List)
        buff.write(_struct_I.pack(length))
        for val2 in val1.PL_Points_List:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
        _v75 = val1.PL_Line_Property
        _x = _v75
        buff.write(_get_struct_6i().pack(_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole))
        _x = val1.sensor_id
        buff.write(_get_struct_I().pack(_x))
      _x = self.lanelist.time_meas
      buff.write(_get_struct_Q().pack(_x))
      _x = self.lanelist.image_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lanelist.LL_SpecialPoint_List.SPL_POINT_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.lanelist.LL_SpecialPoint_List.SPL_Points_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanelist.LL_SpecialPoint_List.SPL_Points_List:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
      length = len(self.lanelist.LL_SpecialPoint_List.SPL_Type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.lanelist.LL_SpecialPoint_List.SPL_Type.tostring())
      length = len(self.lanelist.LL_SpecialPoint_List.sensor_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.lanelist.LL_SpecialPoint_List.sensor_id_list.tostring())
      _x = self.lanelist.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.lanelist.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5Q().pack(_x.lanelist.counter, _x.lanelist.publish_ts, _x.lanelist_topic.received_topic_publish_ts, _x.lanelist_topic.received_topic_counter, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vision_objects is None:
        self.vision_objects = rospy_message_converter.msg.ObjectsDetection()
      if self.radar_info is None:
        self.radar_info = rospy_message_converter.msg.RadarSensor()
      if self.vision_road is None:
        self.vision_road = rospy_message_converter.msg.RoadDetection()
      if self.vision_failsafe is None:
        self.vision_failsafe = rospy_message_converter.msg.FailSafeDetection()
      if self.vision_feature is None:
        self.vision_feature = rospy_message_converter.msg.Features()
      if self.vision_fsp is None:
        self.vision_fsp = rospy_message_converter.msg.FreeSpaceDetection()
      if self.vision_traffic_light is None:
        self.vision_traffic_light = rospy_message_converter.msg.TrafficLightDetection()
      if self.vision_traffic_sign is None:
        self.vision_traffic_sign = rospy_message_converter.msg.TrafficSignDetection()
      if self.vision_vehicle_light is None:
        self.vision_vehicle_light = rospy_message_converter.msg.VehicleLightDetection()
      if self.vehicle_10ms is None:
        self.vehicle_10ms = rospy_message_converter.msg.VEH10ms()
      if self.vehicle_50ms is None:
        self.vehicle_50ms = rospy_message_converter.msg.VEH50ms()
      if self.sd_map is None:
        self.sd_map = rospy_message_converter.msg.SdMap()
      if self.fct_out is None:
        self.fct_out = rospy_message_converter.msg.FctOut()
      if self.vehicle_config is None:
        self.vehicle_config = rospy_message_converter.msg.VehicleInfo()
      if self.radar_info_topic is None:
        self.radar_info_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_objects_topic is None:
        self.vision_objects_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_road_topic is None:
        self.vision_road_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_failsafe_topic is None:
        self.vision_failsafe_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_feature_topic is None:
        self.vision_feature_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_fsp_topic is None:
        self.vision_fsp_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_traffic_light_topic is None:
        self.vision_traffic_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_traffic_sign_topic is None:
        self.vision_traffic_sign_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vision_vehicle_light_topic is None:
        self.vision_vehicle_light_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_10ms_topic is None:
        self.vehicle_10ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_50ms_topic is None:
        self.vehicle_50ms_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_fctout_topic is None:
        self.vehicle_fctout_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.sd_map_topic is None:
        self.sd_map_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.lidar_read_ts is None:
        self.lidar_read_ts = rospy_message_converter.msg.EHYSINTopicTime()
      if self.vehicle_config_topic is None:
        self.vehicle_config_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.dead_reckoning_latest_ts is None:
        self.dead_reckoning_latest_ts = rospy_message_converter.msg.EHYSINTopicTime()
      if self.od_output is None:
        self.od_output = rospy_message_converter.msg.ODOutputPb()
      if self.od_output_topic is None:
        self.od_output_topic = rospy_message_converter.msg.EHYSINTopicTime()
      if self.lanelist is None:
        self.lanelist = rospy_message_converter.msg.LaneList()
      if self.lanelist_topic is None:
        self.lanelist_topic = rospy_message_converter.msg.EHYSINTopicTime()
      end = 0
      start = end
      end += 8
      (self.vision_objects.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_objects.staticobj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StaticObjects()
        _x = val1
        start = end
        end += 60
        (_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source,) = _get_struct_2Ii11fi().unpack(str[start:end])
        self.vision_objects.staticobj.append(val1)
      _x = self
      start = end
      end += 26
      (_x.vision_objects.dynamicobj.OBJ_Info.OBJ_Object_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VRU_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_VD_Count, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_ID, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_Side, _x.vision_objects.dynamicobj.OBJ_Info.OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
      self.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost = bool(self.vision_objects.dynamicobj.OBJ_Info.OBJ_CIPV_Lost)
      self.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI = bool(self.vision_objects.dynamicobj.OBJ_Info.OBJ_Is_CCI)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_objects.dynamicobj.OBJ = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DynamicObj()
        _x = val1
        start = end
        end += 79
        (_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right,) = _get_struct_i2IifBiI2iI4f3i2f2B().unpack(str[start:end])
        val1.OBJ_Is_Very_Close = bool(val1.OBJ_Is_Very_Close)
        val1.OBJ_Is_Blocked_Left = bool(val1.OBJ_Is_Blocked_Left)
        val1.OBJ_Is_Blocked_Right = bool(val1.OBJ_Is_Blocked_Right)
        _v76 = val1.OBJ_Distance
        _x = _v76
        start = end
        end += 24
        (_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD,) = _get_struct_6f().unpack(str[start:end])
        _v77 = val1.OBJ_Abs_Velocity
        _x = _v77
        start = end
        end += 24
        (_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD,) = _get_struct_6f().unpack(str[start:end])
        _v78 = val1.OBJ_Abs_Acc
        _x = _v78
        start = end
        end += 24
        (_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD,) = _get_struct_6f().unpack(str[start:end])
        _v79 = val1.OBJ_Dimension
        _x = _v79
        start = end
        end += 24
        (_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD,) = _get_struct_6f().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second,) = _get_struct_iI2i8f().unpack(str[start:end])
        self.vision_objects.dynamicobj.OBJ.append(val1)
      start = end
      end += 8
      (self.vision_objects.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_objects.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_objects.publisher_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.vision_objects.counter, _x.vision_objects.publish_ts, _x.radar_info.ego_speed, _x.radar_info.ego_acc, _x.radar_info.ego_yawrate,) = _get_struct_2Q3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_info.status = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarStatus()
        _x = val1
        start = end
        end += 16
        (_x.flg_blindness, _x.flg_failure, _x.flg_loss_comm_fault, _x.flg_time_stamp_invalid, _x.mis_alignment_angle, _x.alignment_st, _x.sensor_location,) = _get_struct_4Bf2i().unpack(str[start:end])
        val1.flg_blindness = bool(val1.flg_blindness)
        val1.flg_failure = bool(val1.flg_failure)
        val1.flg_loss_comm_fault = bool(val1.flg_loss_comm_fault)
        val1.flg_time_stamp_invalid = bool(val1.flg_time_stamp_invalid)
        self.radar_info.status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_info.trackers = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarTracker()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.objects = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarObject()
          _v80 = val2.valid_status
          _x = _v80
          start = end
          end += 3
          (_x.flag_valid, _x.flag_measured, _x.flag_hist,) = _get_struct_3B().unpack(str[start:end])
          _v80.flag_valid = bool(_v80.flag_valid)
          _v80.flag_measured = bool(_v80.flag_measured)
          _v80.flag_hist = bool(_v80.flag_hist)
          start = end
          end += 4
          (val2.source,) = _get_struct_I().unpack(str[start:end])
          _v81 = val2.motion
          _v82 = _v81.pos
          _x = _v82
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v83 = _v81.pos_std
          _x = _v83
          start = end
          end += 12
          (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
          _v84 = _v81.vel
          _x = _v84
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _v85 = _v81.vel_std
          _x = _v85
          start = end
          end += 12
          (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
          _v86 = _v81.acc
          _x = _v86
          start = end
          end += 12
          (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
          _v87 = _v81.acc_std
          _x = _v87
          start = end
          end += 12
          (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
          _v88 = _v81.size
          _x = _v88
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v89 = _v81.size_std
          _x = _v89
          start = end
          end += 12
          (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
          _x = _v81
          start = end
          end += 12
          (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
          _v90 = val2.motion_state
          _x = _v90
          start = end
          end += 6
          (_x.is_valid, _x.is_moving, _x.is_movable, _x.direction, _x.was_moved, _x.is_crossing,) = _get_struct_6B().unpack(str[start:end])
          _v90.is_valid = bool(_v90.is_valid)
          _v90.is_moving = bool(_v90.is_moving)
          _v90.is_movable = bool(_v90.is_movable)
          _v90.direction = bool(_v90.direction)
          _v90.was_moved = bool(_v90.was_moved)
          _v90.is_crossing = bool(_v90.is_crossing)
          _x = val2
          start = end
          end += 59
          (_x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_iI3f2Ii4fI2BIB().unpack(str[start:end])
          val2.f_multi_measures = bool(val2.f_multi_measures)
          val2.f_overhead_suspicious = bool(val2.f_overhead_suspicious)
          val2.f_crossing = bool(val2.f_crossing)
          val1.objects.append(val2)
        self.radar_info.trackers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_info.detection_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarDetection()
        _x = val1
        start = end
        end += 12
        (_x.timestamp, _x.sync_bit,) = _get_struct_QI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.detection = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.RadarDetectionObject()
          _x = val2
          start = end
          end += 40
          (_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob,) = _get_struct_Ii8f().unpack(str[start:end])
          val1.detection.append(val2)
        self.radar_info.detection_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_info.radar_feature.acc_tar = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 52
      (_x.radar_info.radar_feature.aeb_tar, _x.radar_info.radar_guardrail.guardrail_left.c0, _x.radar_info.radar_guardrail.guardrail_left.c1, _x.radar_info.radar_guardrail.guardrail_left.heading, _x.radar_info.radar_guardrail.guardrail_left.offset, _x.radar_info.radar_guardrail.guardrail_left.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_left.lka_confidence, _x.radar_info.radar_guardrail.guardrail_right.c0, _x.radar_info.radar_guardrail.guardrail_right.c1, _x.radar_info.radar_guardrail.guardrail_right.heading, _x.radar_info.radar_guardrail.guardrail_right.offset, _x.radar_info.radar_guardrail.guardrail_right.x_farthest_hist, _x.radar_info.radar_guardrail.guardrail_right.lka_confidence,) = _get_struct_I5fI5fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_info.radar_barrier.barrier_left.coef = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.radar_info.radar_barrier.barrier_left.dist_end, _x.radar_info.radar_barrier.barrier_left.dist_from, _x.radar_info.radar_barrier.barrier_left.lka_confidence,) = _get_struct_2fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.radar_info.radar_barrier.barrier_right.coef = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 20
      (_x.radar_info.radar_barrier.barrier_right.dist_end, _x.radar_info.radar_barrier.barrier_right.dist_from, _x.radar_info.radar_barrier.barrier_right.lka_confidence, _x.radar_info.publish_ptp_ts,) = _get_struct_2fIQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.radar_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.radar_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.radar_info.counter, _x.radar_info.publish_ts, _x.vision_road.timestamp, _x.vision_road.laneline.LD_Lane_Width, _x.vision_road.laneline.LD_Crossing_Flag,) = _get_struct_3QfB().unpack(str[start:end])
      self.vision_road.laneline.LD_Crossing_Flag = bool(self.vision_road.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v91 = val1.LD_First_Line
        _x = _v91
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v92 = _v91.LD_Line
        _x = _v92
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v91
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v93 = val1.LD_Second_Line
        _x = _v93
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v94 = _v93.LD_Line
        _x = _v94
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v93
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v95 = val1.LD_Special_Point
        _x = _v95
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.vision_road.laneline.line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.vision_road.slop.LD_Road_Vertical_Surface_Available, _x.vision_road.slop.LD_Road_Vertical_Surface_Start, _x.vision_road.slop.LD_Road_Vertical_Surface_End, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C0, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C1, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C2, _x.vision_road.slop.LD_Road_Vertical_Surface.line_C3, _x.vision_road.lpp.LPP_Available, _x.vision_road.lpp.LPP_Source, _x.vision_road.lpp.LPP_Ctrl_Point_Lat, _x.vision_road.lpp.LPP_Ctrl_Point_Long, _x.vision_road.lpp.LPP_Confidence, _x.vision_road.lpp.LPP_First_Valid, _x.vision_road.lpp.LPP_First_VR_End, _x.vision_road.lpp.LPP_First.line_C0, _x.vision_road.lpp.LPP_First.line_C1, _x.vision_road.lpp.LPP_First.line_C2, _x.vision_road.lpp.LPP_First.line_C3, _x.vision_road.lpp.LPP_Second_Valid, _x.vision_road.lpp.LPP_Second_VR_End, _x.vision_road.lpp.LPP_Second.line_C0, _x.vision_road.lpp.LPP_Second.line_C1, _x.vision_road.lpp.LPP_Second.line_C2, _x.vision_road.lpp.LPP_Second.line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.vision_road.slop.LD_Road_Vertical_Surface_Available = bool(self.vision_road.slop.LD_Road_Vertical_Surface_Available)
      self.vision_road.lpp.LPP_Available = bool(self.vision_road.lpp.LPP_Available)
      self.vision_road.lpp.LPP_First_Valid = bool(self.vision_road.lpp.LPP_First_Valid)
      self.vision_road.lpp.LPP_Second_Valid = bool(self.vision_road.lpp.LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v96 = val1.LD_RE_Line
        _x = _v96
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.LD_RE_Confidence, _x.LDRE_Class,) = _get_struct_fi().unpack(str[start:end])
        self.vision_road.roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StopLine()
        _x = val1
        start = end
        end += 70
        (_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.SL_Zebra_Is_Detected = bool(val1.SL_Zebra_Is_Detected)
        val1.SL_Is_Detected = bool(val1.SL_Is_Detected)
        self.vision_road.stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.vision_road.guidepoint.INTP_Is_Highway_Merge_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Merge_Right, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Left, _x.vision_road.guidepoint.INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.vision_road.guidepoint.INTP_Is_Highway_Merge_Left = bool(self.vision_road.guidepoint.INTP_Is_Highway_Merge_Left)
      self.vision_road.guidepoint.INTP_Is_Highway_Merge_Right = bool(self.vision_road.guidepoint.INTP_Is_Highway_Merge_Right)
      self.vision_road.guidepoint.INTP_Is_Highway_Exit_Left = bool(self.vision_road.guidepoint.INTP_Is_Highway_Exit_Left)
      self.vision_road.guidepoint.INTP_Is_Highway_Exit_Right = bool(self.vision_road.guidepoint.INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.guidepoint.INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.vision_road.guidepoint.INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_road.lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.vision_road.lanesemantic.append(val1)
      start = end
      end += 8
      (self.vision_road.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_road.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_road.publisher_id = str[start:end]
      _x = self
      start = end
      end += 648
      (_x.vision_road.counter, _x.vision_road.publish_ts, _x.vision_failsafe.timestamp, _x.vision_failsafe.failsafe_FW.FS_Rain, _x.vision_failsafe.failsafe_FW.FS_Fog, _x.vision_failsafe.failsafe_FW.FS_Snow, _x.vision_failsafe.failsafe_FW.FS_Full_Blockage, _x.vision_failsafe.failsafe_FW.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FW.FS_Lowsun, _x.vision_failsafe.failsafe_FW.FS_Sunray, _x.vision_failsafe.failsafe_FW.FS_Splash, _x.vision_failsafe.failsafe_FW.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FW.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FW.FS_Blur, _x.vision_failsafe.failsafe_FW.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FW.FS_illuminance, _x.vision_failsafe.failsafe_FN.FS_Rain, _x.vision_failsafe.failsafe_FN.FS_Fog, _x.vision_failsafe.failsafe_FN.FS_Snow, _x.vision_failsafe.failsafe_FN.FS_Full_Blockage, _x.vision_failsafe.failsafe_FN.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FN.FS_Lowsun, _x.vision_failsafe.failsafe_FN.FS_Sunray, _x.vision_failsafe.failsafe_FN.FS_Splash, _x.vision_failsafe.failsafe_FN.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FN.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FN.FS_Blur, _x.vision_failsafe.failsafe_FN.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FN.FS_illuminance, _x.vision_failsafe.failsafe_FL.FS_Rain, _x.vision_failsafe.failsafe_FL.FS_Fog, _x.vision_failsafe.failsafe_FL.FS_Snow, _x.vision_failsafe.failsafe_FL.FS_Full_Blockage, _x.vision_failsafe.failsafe_FL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FL.FS_Lowsun, _x.vision_failsafe.failsafe_FL.FS_Sunray, _x.vision_failsafe.failsafe_FL.FS_Splash, _x.vision_failsafe.failsafe_FL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FL.FS_Blur, _x.vision_failsafe.failsafe_FL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FL.FS_illuminance, _x.vision_failsafe.failsafe_FR.FS_Rain, _x.vision_failsafe.failsafe_FR.FS_Fog, _x.vision_failsafe.failsafe_FR.FS_Snow, _x.vision_failsafe.failsafe_FR.FS_Full_Blockage, _x.vision_failsafe.failsafe_FR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_FR.FS_Lowsun, _x.vision_failsafe.failsafe_FR.FS_Sunray, _x.vision_failsafe.failsafe_FR.FS_Splash, _x.vision_failsafe.failsafe_FR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_FR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_FR.FS_Blur, _x.vision_failsafe.failsafe_FR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_FR.FS_illuminance, _x.vision_failsafe.failsafe_R.FS_Rain, _x.vision_failsafe.failsafe_R.FS_Fog, _x.vision_failsafe.failsafe_R.FS_Snow, _x.vision_failsafe.failsafe_R.FS_Full_Blockage, _x.vision_failsafe.failsafe_R.FS_Partial_Blockage, _x.vision_failsafe.failsafe_R.FS_Lowsun, _x.vision_failsafe.failsafe_R.FS_Sunray, _x.vision_failsafe.failsafe_R.FS_Splash, _x.vision_failsafe.failsafe_R.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_R.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_R.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_R.FS_Blur, _x.vision_failsafe.failsafe_R.FS_Smeared_Halo, _x.vision_failsafe.failsafe_R.FS_illuminance, _x.vision_failsafe.failsafe_RL.FS_Rain, _x.vision_failsafe.failsafe_RL.FS_Fog, _x.vision_failsafe.failsafe_RL.FS_Snow, _x.vision_failsafe.failsafe_RL.FS_Full_Blockage, _x.vision_failsafe.failsafe_RL.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RL.FS_Lowsun, _x.vision_failsafe.failsafe_RL.FS_Sunray, _x.vision_failsafe.failsafe_RL.FS_Splash, _x.vision_failsafe.failsafe_RL.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RL.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RL.FS_Blur, _x.vision_failsafe.failsafe_RL.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RL.FS_illuminance, _x.vision_failsafe.failsafe_RR.FS_Rain, _x.vision_failsafe.failsafe_RR.FS_Fog, _x.vision_failsafe.failsafe_RR.FS_Snow, _x.vision_failsafe.failsafe_RR.FS_Full_Blockage, _x.vision_failsafe.failsafe_RR.FS_Partial_Blockage, _x.vision_failsafe.failsafe_RR.FS_Lowsun, _x.vision_failsafe.failsafe_RR.FS_Sunray, _x.vision_failsafe.failsafe_RR.FS_Splash, _x.vision_failsafe.failsafe_RR.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_RR.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_RR.FS_Blur, _x.vision_failsafe.failsafe_RR.FS_Smeared_Halo, _x.vision_failsafe.failsafe_RR.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Front.FS_Rain, _x.vision_failsafe.failsafe_SVC_Front.FS_Fog, _x.vision_failsafe.failsafe_SVC_Front.FS_Snow, _x.vision_failsafe.failsafe_SVC_Front.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Front.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Front.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Front.FS_Splash, _x.vision_failsafe.failsafe_SVC_Front.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Front.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Front.FS_Blur, _x.vision_failsafe.failsafe_SVC_Front.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Front.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Rear.FS_Rain, _x.vision_failsafe.failsafe_SVC_Rear.FS_Fog, _x.vision_failsafe.failsafe_SVC_Rear.FS_Snow, _x.vision_failsafe.failsafe_SVC_Rear.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Rear.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Rear.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Rear.FS_Splash, _x.vision_failsafe.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Rear.FS_Blur, _x.vision_failsafe.failsafe_SVC_Rear.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Rear.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Left.FS_Rain, _x.vision_failsafe.failsafe_SVC_Left.FS_Fog, _x.vision_failsafe.failsafe_SVC_Left.FS_Snow, _x.vision_failsafe.failsafe_SVC_Left.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Left.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Left.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Left.FS_Splash, _x.vision_failsafe.failsafe_SVC_Left.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Left.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Left.FS_Blur, _x.vision_failsafe.failsafe_SVC_Left.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Left.FS_illuminance, _x.vision_failsafe.failsafe_SVC_Right.FS_Rain, _x.vision_failsafe.failsafe_SVC_Right.FS_Fog, _x.vision_failsafe.failsafe_SVC_Right.FS_Snow, _x.vision_failsafe.failsafe_SVC_Right.FS_Full_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Partial_Blockage, _x.vision_failsafe.failsafe_SVC_Right.FS_Lowsun, _x.vision_failsafe.failsafe_SVC_Right.FS_Sunray, _x.vision_failsafe.failsafe_SVC_Right.FS_Splash, _x.vision_failsafe.failsafe_SVC_Right.FS_Windshield_Frozen, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.vision_failsafe.failsafe_SVC_Right.FS_Out_Of_Focus, _x.vision_failsafe.failsafe_SVC_Right.FS_Blur, _x.vision_failsafe.failsafe_SVC_Right.FS_Smeared_Halo, _x.vision_failsafe.failsafe_SVC_Right.FS_illuminance, _x.vision_failsafe.publish_ptp_ts,) = _get_struct_3Q154IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_failsafe.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_failsafe.publisher_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.vision_failsafe.counter, _x.vision_failsafe.publish_ts, _x.vision_feature.timestamp, _x.vision_feature.ahc.HLB_Decision, _x.vision_feature.ahc.HLB_Reason_Low_Beam, _x.vision_feature.publish_ptp_ts,) = _get_struct_3Q2iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_feature.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_feature.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_feature.counter, _x.vision_feature.publish_ts, _x.vision_fsp.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_fsp.freespace = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FreeSpace()
        _x = val1
        start = end
        end += 36
        (_x.FSP_Obs_ID, _x.FSP_Lane_Assginment, _x.FSP_Range, _x.FSP_Azimuth_Angle, _x.FSP_Classification_Type, _x.FSP_Height, _x.FSP_Elevation_Angle, _x.FSP_Mobility_Status, _x.FSP_Existence_Prob,) = _get_struct_Ii2fi2fif().unpack(str[start:end])
        self.vision_fsp.freespace.append(val1)
      _x = self
      start = end
      end += 12
      (_x.vision_fsp.source, _x.vision_fsp.publish_ptp_ts,) = _get_struct_iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_fsp.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_fsp.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_fsp.counter, _x.vision_fsp.publish_ts, _x.vision_traffic_light.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_traffic_light.trafficlight = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficLight()
        _x = val1
        start = end
        end += 40
        (_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer,) = _get_struct_i2I3f3iI().unpack(str[start:end])
        self.vision_traffic_light.trafficlight.append(val1)
      start = end
      end += 8
      (self.vision_traffic_light.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_traffic_light.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_traffic_light.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_traffic_light.counter, _x.vision_traffic_light.publish_ts, _x.vision_traffic_sign.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_traffic_sign.trafficsign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficSign()
        _x = val1
        start = end
        end += 88
        (_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value,) = _get_struct_2I2i3f3i8fi3f().unpack(str[start:end])
        self.vision_traffic_sign.trafficsign.append(val1)
      _x = self
      start = end
      end += 12
      (_x.vision_traffic_sign.trafficsign_num, _x.vision_traffic_sign.publish_ptp_ts,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_traffic_sign.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_traffic_sign.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.vision_traffic_sign.counter, _x.vision_traffic_sign.publish_ts, _x.vision_vehicle_light.timestamp,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vision_vehicle_light.vehiclelight = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VehicleLight()
        _x = val1
        start = end
        end += 70
        (_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New,) = _get_struct_3Ii13f2B().unpack(str[start:end])
        val1.VL_Is_SingleBar = bool(val1.VL_Is_SingleBar)
        val1.VL_Is_New = bool(val1.VL_Is_New)
        self.vision_vehicle_light.vehiclelight.append(val1)
      start = end
      end += 8
      (self.vision_vehicle_light.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision_vehicle_light.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision_vehicle_light.publisher_id = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.vision_vehicle_light.counter, _x.vision_vehicle_light.publish_ts, _x.vehicle_10ms.StrSys.StrAgFailSts, _x.vehicle_10ms.StrSys.StrAgCalSts, _x.vehicle_10ms.StrSys.StrWhlAgSAE, _x.vehicle_10ms.StrSys.StrWhlAgSpdSAE, _x.vehicle_10ms.StrSys.PnnAgVld, _x.vehicle_10ms.StrSys.PnnAgSAE, _x.vehicle_10ms.StrSys.PnnAgOffsetSAE, _x.vehicle_10ms.StrSys.EstRackFrcVld, _x.vehicle_10ms.StrSys.EstRackFrcSae, _x.vehicle_10ms.StrSys.MtrTqVld, _x.vehicle_10ms.StrSys.MtrTqSAE, _x.vehicle_10ms.StrSys.TorsBarTqVld, _x.vehicle_10ms.StrSys.TorsBarTqSAE, _x.vehicle_10ms.StrSys.EPSSts, _x.vehicle_10ms.StrSys.DrvngMod, _x.vehicle_10ms.StrSys.RampSts, _x.vehicle_10ms.StrSys.ACIMtrTqVld, _x.vehicle_10ms.StrSys.ACIMtrTqSAE, _x.vehicle_10ms.StrSys.Temperature, _x.vehicle_10ms.StrSys.SupInfo, _x.vehicle_10ms.StrSys.VMCHVIAvl, _x.vehicle_10ms.StrSys.EPSReqTyp, _x.vehicle_10ms.StrSys.BCUCTIAvl, _x.vehicle_10ms.StrSys.WarnLampReq, _x.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid, _x.vehicle_10ms.StrSys.SWCFailSts, _x.vehicle_10ms.StrSys.SteerColTiltCtrlSts, _x.vehicle_10ms.StrSys.SteerColTiltPos, _x.vehicle_10ms.StrSys.SteerColTeleCtrlSts, _x.vehicle_10ms.StrSys.SteerColTelescopePos, _x.vehicle_10ms.StrSys.HODErrSts, _x.vehicle_10ms.StrSys.HOSts, _x.vehicle_10ms.StrSys.OverRideDetn,) = _get_struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i().unpack(str[start:end])
      self.vehicle_10ms.StrSys.RampSts = bool(self.vehicle_10ms.StrSys.RampSts)
      self.vehicle_10ms.StrSys.BCUCTIAvl = bool(self.vehicle_10ms.StrSys.BCUCTIAvl)
      self.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid = bool(self.vehicle_10ms.StrSys.SteerWhlAgAndSpdValid)
      self.vehicle_10ms.StrSys.HODErrSts = bool(self.vehicle_10ms.StrSys.HODErrSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_10ms.StrSys.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 251
      (_x.vehicle_10ms.BrkSys.BrkPdl.TrvlCalSts, _x.vehicle_10ms.BrkSys.BrkPdl.Trvl, _x.vehicle_10ms.BrkSys.BrkPdl.BrkPedlSts, _x.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd, _x.vehicle_10ms.BrkSys.BrkPdl.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrs, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.vehicle_10ms.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.vehicle_10ms.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSwtSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBSts, _x.vehicle_10ms.BrkSys.PrkBrk.EPBMod, _x.vehicle_10ms.BrkSys.PrkBrk.CDPReq, _x.vehicle_10ms.BrkSys.PrkBrk.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.BrkOverHeat, _x.vehicle_10ms.BrkSys.BrkHAZReq, _x.vehicle_10ms.BrkSys.BCUBrkLiReq, _x.vehicle_10ms.BrkSys.StstSts, _x.vehicle_10ms.BrkSys.NoBrkF, _x.vehicle_10ms.BrkSys.SupInfo, _x.vehicle_10ms.BrkSys.BrkFldLvl, _x.vehicle_10ms.BrkSys.BrkPadWearSts, _x.vehicle_10ms.BrkSys.BrkFunSt.BDWActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.ABPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AVHSts, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DWTActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBAActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HDCSts, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.HHCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSActv, _x.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv, _x.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBActv, _x.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.EBPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.HBCActv, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPCfgSts, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail, _x.vehicle_10ms.BrkSys.BrkFunSt.ARPActv, _x.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl, _x.vehicle_10ms.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.vehicle_10ms.BrkSys.ExtBrkActv, _x.vehicle_10ms.BrkSys.ExtBrkCp, _x.vehicle_10ms.BrkSys.ExtBrkSts, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTar, _x.vehicle_10ms.BrkSys.MbRegenFrntAxleTarQ, _x.vehicle_10ms.BrkSys.MbRegenReAxleTar, _x.vehicle_10ms.BrkSys.MbRegenReAxleTarQ, _x.vehicle_10ms.BrkSys.StabyMagin, _x.vehicle_10ms.BrkSys.StabyMaginQ, _x.vehicle_10ms.BrkSys.BrkFldWarnReq, _x.vehicle_10ms.BrkSys.BrkPadWearWarnReq, _x.vehicle_10ms.BrkSys.FCC1_StandstillStatus, _x.vehicle_10ms.PT.AccrPedal.EfcPosnVld, _x.vehicle_10ms.PT.AccrPedal.EfcPosn, _x.vehicle_10ms.PT.AccrPedal.ActPosnVld, _x.vehicle_10ms.PT.AccrPedal.ActPosn, _x.vehicle_10ms.PT.AccrPedal.PedlOvrd, _x.vehicle_10ms.PT.AccrPedal.timestamp_ptp_ns, _x.vehicle_10ms.PT.Gear.SlctrPosnVld, _x.vehicle_10ms.PT.Gear.ActGearVld, _x.vehicle_10ms.PT.Gear.TrgtGearVld, _x.vehicle_10ms.PT.Gear.SlctrPosn, _x.vehicle_10ms.PT.Gear.ActGear, _x.vehicle_10ms.PT.Gear.TrgtGear, _x.vehicle_10ms.PT.Gear.timestamp_ptp_ns,) = _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().unpack(str[start:end])
      self.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd = bool(self.vehicle_10ms.BrkSys.BrkPdl.BrkpedlOvrd)
      self.vehicle_10ms.BrkSys.PrkBrk.CDPReq = bool(self.vehicle_10ms.BrkSys.PrkBrk.CDPReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.BDWActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.BDWActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABAAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABAActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABAActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABPAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABSActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABSActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.DTCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.DTCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.DWTActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.DWTActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBAAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBAActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBAActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBDActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBDActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.HBAActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HBAActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HHCAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.HHCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HHCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.TCSActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.TCSActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.TCSDeactv)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCDeactv)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBDFailLampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSLampInfo)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSFailLampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ABSFailLampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq = bool(self.vehicle_10ms.BrkSys.BrkFunSt.VDCTCSOnOfflampReq)
      self.vehicle_10ms.BrkSys.BrkFunSt.AWBActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.AWBActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.AWBAvl)
      self.vehicle_10ms.BrkSys.BrkFunSt.EBPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.EBPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.HBCActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.HBCActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.CDPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.CDPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail = bool(self.vehicle_10ms.BrkSys.BrkFunSt.CDPAvail)
      self.vehicle_10ms.BrkSys.BrkFunSt.ARPActv = bool(self.vehicle_10ms.BrkSys.BrkFunSt.ARPActv)
      self.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl = bool(self.vehicle_10ms.BrkSys.BrkFunSt.DTCAvl)
      self.vehicle_10ms.BrkSys.ExtBrkActv = bool(self.vehicle_10ms.BrkSys.ExtBrkActv)
      self.vehicle_10ms.PT.AccrPedal.PedlOvrd = bool(self.vehicle_10ms.PT.AccrPedal.PedlOvrd)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_10ms.PT.Motor = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MotorInfo()
        _x = val1
        start = end
        end += 44
        (_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts,) = _get_struct_ifififI4i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        self.vehicle_10ms.PT.Motor.append(val1)
      _x = self
      start = end
      end += 24
      (_x.vehicle_10ms.PT.VCURvsLampReq, _x.vehicle_10ms.PT.VCUBrkLampReq, _x.vehicle_10ms.PT.CruiseStatus, _x.vehicle_10ms.PT.VCUEPBReq, _x.vehicle_10ms.PT.CruiseStoredSpeed, _x.vehicle_10ms.PT.VCUPtWakeupReq, _x.vehicle_10ms.PT.DCChrgrPluginSts, _x.vehicle_10ms.PT.ACChrgrPluginSts, _x.vehicle_10ms.PT.VCU_VehHldReq, _x.vehicle_10ms.PT.VCU_BrkReqEna, _x.vehicle_10ms.PT.VCU_ForceFctEna, _x.vehicle_10ms.PT.VCU_TarBrkFReq,) = _get_struct_2B2if6Bf().unpack(str[start:end])
      self.vehicle_10ms.PT.VCURvsLampReq = bool(self.vehicle_10ms.PT.VCURvsLampReq)
      self.vehicle_10ms.PT.VCUBrkLampReq = bool(self.vehicle_10ms.PT.VCUBrkLampReq)
      self.vehicle_10ms.PT.VCUPtWakeupReq = bool(self.vehicle_10ms.PT.VCUPtWakeupReq)
      self.vehicle_10ms.PT.DCChrgrPluginSts = bool(self.vehicle_10ms.PT.DCChrgrPluginSts)
      self.vehicle_10ms.PT.ACChrgrPluginSts = bool(self.vehicle_10ms.PT.ACChrgrPluginSts)
      self.vehicle_10ms.PT.VCU_VehHldReq = bool(self.vehicle_10ms.PT.VCU_VehHldReq)
      self.vehicle_10ms.PT.VCU_BrkReqEna = bool(self.vehicle_10ms.PT.VCU_BrkReqEna)
      self.vehicle_10ms.PT.VCU_ForceFctEna = bool(self.vehicle_10ms.PT.VCU_ForceFctEna)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_10ms.Whl.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.vehicle_10ms.Whl.WhlDyn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_10ms.Whl.WHlTpms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlTpmsInfo()
        _x = val1
        start = end
        end += 28
        (_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts,) = _get_struct_fi2Ii2I().unpack(str[start:end])
        self.vehicle_10ms.Whl.WHlTpms.append(val1)
      _x = self
      start = end
      end += 52
      (_x.vehicle_10ms.Whl.WhlDyn_Timestamp, _x.vehicle_10ms.Whl.timestamp_ptp_ns, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdSts, _x.vehicle_10ms.VehDyn.VehSpd.VehMovgDir, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdkph, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdmps, _x.vehicle_10ms.VehDyn.VehSpd.VehFiltLngAcc, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILDSts, _x.vehicle_10ms.VehDyn.VehSpd.VehSpdASILD, _x.vehicle_10ms.VehDyn.VehSpd.VehDispSpd, _x.vehicle_10ms.VehDyn.VehSpd.VCUVehDispSpdSts,) = _get_struct_2Q2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_10ms.VehDyn.VehSpd.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 120
      (_x.vehicle_10ms.VehDyn.AxAyYrsCalSts, _x.vehicle_10ms.VehDyn.LgtASts, _x.vehicle_10ms.VehDyn.LgtSAEAg, _x.vehicle_10ms.VehDyn.LgtSAEAmpss, _x.vehicle_10ms.VehDyn.LatASts, _x.vehicle_10ms.VehDyn.LatSAEAg, _x.vehicle_10ms.VehDyn.LatSAEAmpss, _x.vehicle_10ms.VehDyn.YawRateSts, _x.vehicle_10ms.VehDyn.YawRateSAERps, _x.vehicle_10ms.VehDyn.YawRateSAEDps, _x.vehicle_10ms.VehDyn.VehOdom, _x.vehicle_10ms.VehDyn.YawRate_Timestamp, _x.vehicle_10ms.VehDyn.timestamp_ptp_ns, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.ADTSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.HldLampReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.VMCLgtSts,) = _get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCAvl)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.VLCActv)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgAvl)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.AutoBrkgActv)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq)
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 29
      (_x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl, _x.vehicle_10ms.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.vehicle_10ms.publish_ptp_ts,) = _get_struct_fBi4B2Q().unpack(str[start:end])
      self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.vehicle_10ms.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.HIAvl)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.TOIAvl)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.DAIAvl)
      self.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl = bool(self.vehicle_10ms.VehCtrlIf.LatCtrlIf.PAIAvl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_10ms.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_10ms.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.vehicle_10ms.counter, _x.vehicle_10ms.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.Suspension.Lvl = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.Suspension.LvlAdjm = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.vehicle_50ms.Suspension.LvlAdjm = list(map(bool, self.vehicle_50ms.Suspension.LvlAdjm))
      _x = self
      start = end
      end += 41
      (_x.vehicle_50ms.Suspension.LvlCalCmptl, _x.vehicle_50ms.Suspension.CargoActv, _x.vehicle_50ms.Suspension.CrrntLvl, _x.vehicle_50ms.Suspension.TarLvl, _x.vehicle_50ms.Suspension.ExtraHiPosn, _x.vehicle_50ms.Suspension.ExtraLoPosn, _x.vehicle_50ms.Suspension.EasyEntryEnaSts, _x.vehicle_50ms.Suspension.LvlAdjDrvgMod, _x.vehicle_50ms.Suspension.LvlAdjMod, _x.vehicle_50ms.Suspension.DampgCtrlMod, _x.vehicle_50ms.Suspension.DampgDrvgMod, _x.vehicle_50ms.VehBody.VehStatus.VehState, _x.vehicle_50ms.VehBody.VehStatus.VehStateASIL, _x.vehicle_50ms.VehBody.VehStatus.VehMode,) = _get_struct_2B2i3B7i().unpack(str[start:end])
      self.vehicle_50ms.Suspension.LvlCalCmptl = bool(self.vehicle_50ms.Suspension.LvlCalCmptl)
      self.vehicle_50ms.Suspension.CargoActv = bool(self.vehicle_50ms.Suspension.CargoActv)
      self.vehicle_50ms.Suspension.ExtraHiPosn = bool(self.vehicle_50ms.Suspension.ExtraHiPosn)
      self.vehicle_50ms.Suspension.ExtraLoPosn = bool(self.vehicle_50ms.Suspension.ExtraLoPosn)
      self.vehicle_50ms.Suspension.EasyEntryEnaSts = bool(self.vehicle_50ms.Suspension.EasyEntryEnaSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.Door.DoorAjarSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.vehicle_50ms.VehBody.Door.HoodAjarSts, _x.vehicle_50ms.VehBody.Door.TrAjarSts,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.SeatOccpSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.SeatBltSts = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.FogLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.BeamSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.vehicle_50ms.VehBody.LightSts.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.TurnIndcrLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.MirrLigtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi = list(map(bool, self.vehicle_50ms.VehBody.LightSts.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn = list(map(bool, self.vehicle_50ms.VehBody.LightSts.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.FogLiFctActvSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 5
      (_x.vehicle_50ms.VehBody.LightSts.LiSnsrData, _x.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts = bool(self.vehicle_50ms.VehBody.LightSts.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts = list(map(bool, self.vehicle_50ms.VehBody.LightSts.DowWarnAmbLeSts))
      _x = self
      start = end
      end += 106
      (_x.vehicle_50ms.VehBody.WipperSts.FrntWiprSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWiperParkSts, _x.vehicle_50ms.VehBody.WipperSts.FrntWipMod, _x.vehicle_50ms.VehBody.WipperSts.FrntWiprReq, _x.vehicle_50ms.VehBody.Time.Yr, _x.vehicle_50ms.VehBody.Time.Mth, _x.vehicle_50ms.VehBody.Time.Day, _x.vehicle_50ms.VehBody.Time.Hr, _x.vehicle_50ms.VehBody.Time.Min, _x.vehicle_50ms.VehBody.Time.Sec, _x.vehicle_50ms.VehBody.CenLockSts, _x.vehicle_50ms.VehBody.TpmsSts, _x.vehicle_50ms.VehBody.DrvState, _x.vehicle_50ms.VehBody.AmbTempValid, _x.vehicle_50ms.VehBody.AmbTemp, _x.vehicle_50ms.VehBody.TrailerModReq, _x.vehicle_50ms.VehBody.SWCAdjModReq, _x.vehicle_50ms.VehBody.NBSDrvrSts, _x.vehicle_50ms.VehBody.PrkgTyp, _x.vehicle_50ms.VehBody.CrashDetd, _x.vehicle_50ms.VehBody.AdsLampReq, _x.vehicle_50ms.VehBody.IntrTemp, _x.vehicle_50ms.VehBody.IntrTempVld, _x.vehicle_50ms.VehBody.MaiLiSet, _x.vehicle_50ms.VehBody.SDWReq, _x.vehicle_50ms.VehBody.UPAReq, _x.vehicle_50ms.VehBody.HornCtrlSts, _x.vehicle_50ms.VehBody.HeadLampsOn, _x.vehicle_50ms.VehBody.CDCCameraReq, _x.vehicle_50ms.VehBody.ECOPlusModSts, _x.vehicle_50ms.VehBody.RpsKeyDist,) = _get_struct_4i6I3iBf4i2Bf4i2BiBi().unpack(str[start:end])
      self.vehicle_50ms.VehBody.AmbTempValid = bool(self.vehicle_50ms.VehBody.AmbTempValid)
      self.vehicle_50ms.VehBody.CrashDetd = bool(self.vehicle_50ms.VehBody.CrashDetd)
      self.vehicle_50ms.VehBody.AdsLampReq = bool(self.vehicle_50ms.VehBody.AdsLampReq)
      self.vehicle_50ms.VehBody.HornCtrlSts = bool(self.vehicle_50ms.VehBody.HornCtrlSts)
      self.vehicle_50ms.VehBody.HeadLampsOn = bool(self.vehicle_50ms.VehBody.HeadLampsOn)
      self.vehicle_50ms.VehBody.ECOPlusModSts = bool(self.vehicle_50ms.VehBody.ECOPlusModSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.VehBody.MirrorStatus = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.vehicle_50ms.VehBody.RpsMovReq, _x.vehicle_50ms.VehBody.RpsReq,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.DrvIn.StrWhlSwtch.AdUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_50ms.DrvIn.StrWhlSwtch.EnUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 391
      (_x.vehicle_50ms.DrvIn.AdFunCfg.AEBOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.DASTactileOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.vehicle_50ms.DrvIn.AdFunCfg.FCWSetReq, _x.vehicle_50ms.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCAOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTAReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SetHMA, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.vehicle_50ms.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.RCTABReq, _x.vehicle_50ms.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.vehicle_50ms.DrvIn.AdFunCfg.CDCFailSts, _x.vehicle_50ms.DrvIn.AdFunCfg.Set360AP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_ALCS, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSWF, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SdowOnOffReq, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierSnvty, _x.vehicle_50ms.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.ELKSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.DistractionSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.vehicle_50ms.DrvIn.AdFunCfg.CurveSpeedAssist, _x.vehicle_50ms.DrvIn.AdFunCfg.TowModActv, _x.vehicle_50ms.DrvIn.AdFunCfg.GoNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts, _x.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_NOPALC, _x.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts, _x.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.vehicle_50ms.DrvIn.AdFunCfg.CfgTaskSwitch, _x.vehicle_50ms.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.vehicle_50ms.DrvIn.FogLiPushSwtSts, _x.vehicle_50ms.DrvIn.FrntWiprInterSpd, _x.vehicle_50ms.DrvIn.FrntWiprSwtSts, _x.vehicle_50ms.DrvIn.HiBeamSwtSts, _x.vehicle_50ms.DrvIn.TurnIndcrSwtSts, _x.vehicle_50ms.DrvIn.WiprAutoSwtSts, _x.vehicle_50ms.DrvIn.WshrReWiprSwtSts, _x.vehicle_50ms.DrvIn.SCMFailSts, _x.vehicle_50ms.DrvIn.FogLiSCMCmd, _x.vehicle_50ms.DrvIn.HiBeamSCMCmd, _x.vehicle_50ms.DrvIn.ReWiprSCMCmd, _x.vehicle_50ms.DrvIn.SVCAvl, _x.vehicle_50ms.DrvIn.NaviSpdLim, _x.vehicle_50ms.DrvIn.WTIDispSt, _x.vehicle_50ms.DrvIn.NaviSpdUnit, _x.vehicle_50ms.DrvIn.NaviSpdLimSts, _x.vehicle_50ms.DrvIn.NaviCurrentRoadTyp, _x.vehicle_50ms.DrvIn.NavCtryCod, _x.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts, _x.vehicle_50ms.DrvIn.CDCEqpmt.ICsts, _x.vehicle_50ms.DrvIn.DA_TauGap_stored, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAlertLvl, _x.vehicle_50ms.DrvIn.DMSInfo.DMSAvlSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttention, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.vehicle_50ms.DrvIn.DMSInfo.DMSFailSafe, _x.vehicle_50ms.DrvIn.DMSInfo.DMSSts, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigue, _x.vehicle_50ms.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaFb, _x.vehicle_50ms.DrvIn.SVCInfo.SVCLeShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCFrntShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCReShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.F120ShaReq, _x.vehicle_50ms.DrvIn.SVCInfo.SVCRiShaReq, _x.vehicle_50ms.DrvIn.VehEgyMngtMod, _x.vehicle_50ms.DrvIn.WheelBrkPReLe, _x.vehicle_50ms.DrvIn.WheelBrkPFrntRi, _x.vehicle_50ms.DrvIn.WheelBrkPFrntLe, _x.vehicle_50ms.DrvIn.WheelBrkPReRi, _x.vehicle_50ms.DrvIn.VehAccrModReq, _x.vehicle_50ms.DrvIn.PwrSwapSteerWhlWarn, _x.vehicle_50ms.DrvIn.DriverPSAPRequest, _x.vehicle_50ms.DrvIn.PSAPParkViewStatus, _x.vehicle_50ms.DrvIn.VehPrepReq, _x.vehicle_50ms.DrvIn.StoreDrvrSlotSelnReq, _x.vehicle_50ms.DrvIn.LockConfig, _x.vehicle_50ms.DrvIn.DriverSAPAReq, _x.vehicle_50ms.DrvIn.DriverSAPASlotSelection, _x.vehicle_50ms.UPA.SDWSts, _x.vehicle_50ms.UPA.APASts, _x.vehicle_50ms.UPA.MapObjSts, _x.vehicle_50ms.UPA.UpaSysDi, _x.vehicle_50ms.UPA.UpaSysSts, _x.vehicle_50ms.UPA.UpaSysSrv,) = _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().unpack(str[start:end])
      self.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts = bool(self.vehicle_50ms.DrvIn.AdFunCfg.AESOnOffSts)
      self.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP = bool(self.vehicle_50ms.DrvIn.AdFunCfg.SwtichDA_NOP)
      self.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts = bool(self.vehicle_50ms.DrvIn.AdFunCfg.ManHornSwtSts)
      self.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff = bool(self.vehicle_50ms.DrvIn.AdFunCfg.TLNotifierOnOff)
      self.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.AUDIOsts)
      self.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.HUDsts)
      self.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.ICSsts)
      self.vehicle_50ms.DrvIn.CDCEqpmt.ICsts = bool(self.vehicle_50ms.DrvIn.CDCEqpmt.ICsts)
      self.vehicle_50ms.DrvIn.LockConfig = bool(self.vehicle_50ms.DrvIn.LockConfig)
      self.vehicle_50ms.UPA.UpaSysDi = bool(self.vehicle_50ms.UPA.UpaSysDi)
      self.vehicle_50ms.UPA.UpaSysSrv = bool(self.vehicle_50ms.UPA.UpaSysSrv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.USSlot = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.USSlotInfo()
        _x = val1
        start = end
        end += 68
        (_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha,) = _get_struct_2I2ifiI10i().unpack(str[start:end])
        self.vehicle_50ms.UPA.USSlot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.MapObj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MapObjBaseType()
        _x = val1
        start = end
        end += 36
        (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
        self.vehicle_50ms.UPA.MapObj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.ApaSdw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ApaSdwType()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.Dst = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.vehicle_50ms.UPA.ApaSdw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_50ms.UPA.UsRegnDst = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.UsRegnDstType()
        start = end
        end += 4
        (val1.SnsrFltSt,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.RegnDst = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.vehicle_50ms.UPA.UsRegnDst.append(val1)
      _x = self
      start = end
      end += 28
      (_x.vehicle_50ms.UPA.USSMode, _x.vehicle_50ms.PsapCan.ConnectionSts, _x.vehicle_50ms.PsapCan.StationPlatformSts, _x.vehicle_50ms.PsapCan.VehLongPosInStation, _x.vehicle_50ms.PsapCan.VehLatPosInStation, _x.vehicle_50ms.publish_ptp_ts,) = _get_struct_5iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_50ms.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_50ms.publisher_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.vehicle_50ms.counter, _x.vehicle_50ms.publish_ts, _x.sd_map.adas_info.is_adasmap_valid, _x.sd_map.adas_info.m_adasmap_is_highway,) = _get_struct_2QBI().unpack(str[start:end])
      self.sd_map.adas_info.is_adasmap_valid = bool(self.sd_map.adas_info.is_adasmap_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapSegment()
        _x = val1
        start = end
        end += 58
        (_x.offset, _x.index, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.sub_path_idx, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2QiQi2BI2B2I2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.sd_map.adas_info.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.profile_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ProfilePoint()
        _x = val1
        start = end
        end += 37
        (_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value,) = _get_struct_2QiQBd().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.sd_map.adas_info.profile_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.stub = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Stub()
        _x = val1
        start = end
        end += 51
        (_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2Q2Ii2B2IB3I().unpack(str[start:end])
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_last_stub = bool(val1.is_last_stub)
        self.sd_map.adas_info.stub.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.traffic_sign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapTrafficSign()
        _x = val1
        start = end
        end += 57
        (_x.offset, _x.index, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid,) = _get_struct_4Q3IQIB().unpack(str[start:end])
        val1.position_valid = bool(val1.position_valid)
        _v97 = val1.position_pt
        _x = _v97
        start = end
        end += 16
        (_x.longitude, _x.latitude,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.height,) = _get_struct_d().unpack(str[start:end])
        self.sd_map.adas_info.traffic_sign.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.lane_connection = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SdMapLaneConnection()
        _x = val1
        start = end
        end += 48
        (_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_2Q8I().unpack(str[start:end])
        self.sd_map.adas_info.lane_connection.append(val1)
      start = end
      end += 4
      (self.sd_map.adas_info.adas_meta.country_code,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.adas_info.traffic_event = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficEvent()
        _x = val1
        start = end
        end += 36
        (_x.offset, _x.index, _x.status, _x.start_end_point, _x.reliability, _x.event_type,) = _get_struct_2Q2iIQ().unpack(str[start:end])
        self.sd_map.adas_info.traffic_event.append(val1)
      _x = self
      start = end
      end += 48
      (_x.sd_map.navigation_info.heart_beat_info.heart_beat, _x.sd_map.navigation_info.heart_beat_info.reliable_state, _x.sd_map.navigation_info.heart_beat_info.navigation_state, _x.sd_map.navigation_info.turn_info.dist_to_first_turn, _x.sd_map.navigation_info.turn_info.first_turn_info, _x.sd_map.navigation_info.turn_info.dist_to_second_turn, _x.sd_map.navigation_info.turn_info.second_turn_info,) = _get_struct_Q2i4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sd_map.navigation_info.turn_info.lanenr_info = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sd_map.navigation_info.speed_limit_info = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedLimitInfo()
        _x = val1
        start = end
        end += 12
        (_x.speed_limit, _x.speed_limit_type,) = _get_struct_Qi().unpack(str[start:end])
        self.sd_map.navigation_info.speed_limit_info.append(val1)
      _x = self
      start = end
      end += 36
      (_x.sd_map.navigation_info.road_class, _x.sd_map.map_loc.longitude, _x.sd_map.map_loc.latitude, _x.sd_map.map_loc.altitude, _x.sd_map.publish_ptp_ts,) = _get_struct_i3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sd_map.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sd_map.publisher_id = str[start:end]
      _x = self
      start = end
      end += 348
      (_x.sd_map.counter, _x.sd_map.publish_ts, _x.fct_out.Ahc.AhcSysSt, _x.fct_out.Ahc.AhcHiBmReq, _x.fct_out.LatCtrl.ExtReqCAMFC, _x.fct_out.LatCtrl.LeLineTyp, _x.fct_out.LatCtrl.RiLineTyp, _x.fct_out.LatCtrl.LeTrackingSts, _x.fct_out.LatCtrl.RiTrackingSts, _x.fct_out.LatCtrl.LaneAssiTyp, _x.fct_out.LatCtrl.LkaSnsvty, _x.fct_out.LatCtrl.AbsltPinionAgReq, _x.fct_out.LatCtrl.EPSReqTyp, _x.fct_out.LatCtrl.LkaLnAsstSts, _x.fct_out.LatCtrl.LkaHODWarnSeq, _x.fct_out.LatCtrl.LatCtrlActv, _x.fct_out.LatCtrl.EPSACITsuSup, _x.fct_out.LatCtrl.VMC1ACITsuSup, _x.fct_out.LatCtrl.LatCtrlTarLe, _x.fct_out.LatCtrl.LatCtrlTarRi, _x.fct_out.LatCtrl.AlcsInfo.DA_LaneChgSupReason, _x.fct_out.LatCtrl.AlcsInfo.AlcManeuverSts, _x.fct_out.LatCtrl.AlcsInfo.DA_ALCSsts, _x.fct_out.LatCtrl.AlcsInfo.ShowSetDA_ALCS, _x.fct_out.LonCtrl.ModeESP, _x.fct_out.LonCtrl.TauGapSet, _x.fct_out.LonCtrl.ObjValid, _x.fct_out.LonCtrl.DsplVelocitySet, _x.fct_out.LonCtrl.GoNotfrReq, _x.fct_out.LonCtrl.TextInfo, _x.fct_out.LonCtrl.GoNotfrOnOffSts, _x.fct_out.LonCtrl.TSRSpdLimDataOnOffSts, _x.fct_out.LonCtrl.TakeOverReq, _x.fct_out.LonCtrl.TargetAccel, _x.fct_out.LonCtrl.CmftLowerAccl, _x.fct_out.LonCtrl.CmftUpprAccl, _x.fct_out.LonCtrl.MinJerkAccl, _x.fct_out.LonCtrl.MaxJerkAccl, _x.fct_out.LonCtrl.DecelToStopReq, _x.fct_out.LonCtrl.ShutdownModReq, _x.fct_out.LonCtrl.DrvOffReq, _x.fct_out.LonCtrl.BrkPreferReq, _x.fct_out.LonCtrl.MinBkrgReq, _x.fct_out.LonCtrl.ACCNPDrvMsg, _x.fct_out.LonCtrl.ClsObjTyp, _x.fct_out.LonCtrl.ClsObjDst, _x.fct_out.LonCtrl.TauGapChgDisp, _x.fct_out.LonCtrl.DisplSetSpdEnbl, _x.fct_out.LonCtrl.VlcReqFct, _x.fct_out.LonCtrl.SpdUnit, _x.fct_out.LonCtrl.DA_SetSpeedAnimation, _x.fct_out.LonCtrl.DA_Inhibit, _x.fct_out.Hwa.AccNpSts, _x.fct_out.Hwa.LongCtrlActv, _x.fct_out.Hwa.LatCtrlActv, _x.fct_out.Hwa.HodWarnReq, _x.fct_out.Hwa.HzrdLiReq, _x.fct_out.Hwa.DoorUnlckReq, _x.fct_out.Hwa.HodTakeOver, _x.fct_out.Hwa.NaNadSts, _x.fct_out.Hwa.NaNadWTI, _x.fct_out.Hwa.FreespaceIntrsn, _x.fct_out.Hwa.ADC_VehDisp_Warn, _x.fct_out.Hwa.DA_TurnIndctrLeTip, _x.fct_out.Hwa.DA_TurnIndctrRiTip, _x.fct_out.Hwa.DA_TurnIndctrLeLatch, _x.fct_out.Hwa.DA_TurnIndctrRiLatch, _x.fct_out.Hwa.DA_TurnIndctrLePush, _x.fct_out.Hwa.DA_TurnIndctrRiPush, _x.fct_out.Hwa.DA_NOP_Avl, _x.fct_out.Hwa.NeedNOPCtrl, _x.fct_out.Hwa.DA_NOP_WTIs, _x.fct_out.Hwa.DA_iACC_WTIs, _x.fct_out.Hwa.DA_Pilot_WTIs, _x.fct_out.Hwa.DA_SysFailSymbol, _x.fct_out.Ldw.AdasLeLine, _x.fct_out.Ldw.AdasRiLine, _x.fct_out.Ldw.LaneAsstSts, _x.fct_out.Ldw.EPSReqTyp, _x.fct_out.Ldw.Snvty, _x.fct_out.Ldw.LaneAsstTyp, _x.fct_out.Ldw.HapticOnOffSts, _x.fct_out.Sas.SpeedLimitValue, _x.fct_out.Sas.SpeedUnit, _x.fct_out.Sas.SpeedLimitAttribute, _x.fct_out.Sas.SpeedLimitTakeover, _x.fct_out.Sas.SupSignType, _x.fct_out.Sas.SupSignAttribute, _x.fct_out.Sas.RoadFeatureWarningSign, _x.fct_out.Sas.TrafficLightSts, _x.fct_out.Sas.LocalHazards, _x.fct_out.Sas.SLIFState, _x.fct_out.Sas.SLWFWarnTrigger, _x.fct_out.Heater.WSHeatReq, _x.fct_out.Heater.WSHeatReqValid, _x.fct_out.Elk.ElkSts, _x.fct_out.Elk.ESFWarningSts,) = _get_struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i().unpack(str[start:end])
      self.fct_out.Ahc.AhcHiBmReq = bool(self.fct_out.Ahc.AhcHiBmReq)
      self.fct_out.LatCtrl.LatCtrlActv = bool(self.fct_out.LatCtrl.LatCtrlActv)
      self.fct_out.LonCtrl.ObjValid = bool(self.fct_out.LonCtrl.ObjValid)
      self.fct_out.LonCtrl.DisplSetSpdEnbl = bool(self.fct_out.LonCtrl.DisplSetSpdEnbl)
      self.fct_out.Hwa.FreespaceIntrsn = bool(self.fct_out.Hwa.FreespaceIntrsn)
      self.fct_out.Hwa.ADC_VehDisp_Warn = bool(self.fct_out.Hwa.ADC_VehDisp_Warn)
      self.fct_out.Hwa.DA_TurnIndctrLeTip = bool(self.fct_out.Hwa.DA_TurnIndctrLeTip)
      self.fct_out.Hwa.DA_TurnIndctrRiTip = bool(self.fct_out.Hwa.DA_TurnIndctrRiTip)
      self.fct_out.Hwa.DA_TurnIndctrLeLatch = bool(self.fct_out.Hwa.DA_TurnIndctrLeLatch)
      self.fct_out.Hwa.DA_TurnIndctrRiLatch = bool(self.fct_out.Hwa.DA_TurnIndctrRiLatch)
      self.fct_out.Hwa.DA_TurnIndctrLePush = bool(self.fct_out.Hwa.DA_TurnIndctrLePush)
      self.fct_out.Hwa.DA_TurnIndctrRiPush = bool(self.fct_out.Hwa.DA_TurnIndctrRiPush)
      self.fct_out.Hwa.NeedNOPCtrl = bool(self.fct_out.Hwa.NeedNOPCtrl)
      self.fct_out.Hwa.DA_SysFailSymbol = bool(self.fct_out.Hwa.DA_SysFailSymbol)
      self.fct_out.Heater.WSHeatReq = bool(self.fct_out.Heater.WSHeatReq)
      self.fct_out.Heater.WSHeatReqValid = bool(self.fct_out.Heater.WSHeatReqValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fct_out.Function = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FunctionXstatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.FunctionName = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.FunctionName = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.FunctionID, _x.FuncSts, _x.ReqFunctionID,) = _get_struct_3i().unpack(str[start:end])
        self.fct_out.Function.append(val1)
      _x = self
      start = end
      end += 84
      (_x.fct_out.AcmEdr.acsf_b1_sts_edr, _x.fct_out.AcmEdr.acsf_b2_sts_edr, _x.fct_out.AcmEdr.acsf_c_sts_edr, _x.fct_out.AcmEdr.acsf_d_sts_edr, _x.fct_out.AcmEdr.acsf_e_sts_edr, _x.fct_out.AcmEdr.lane_assist_sts_edr, _x.fct_out.AcmEdr.ldw_lka_lane_assi_typ_edr, _x.fct_out.AcmEdr.adas_le_line_edr, _x.fct_out.AcmEdr.adas_ri_line_edr, _x.fct_out.AcmEdr.elk_sts_edr, _x.fct_out.AcmEdr.esf_warning_sts_edr, _x.fct_out.AcmEdr.acc_sts_edr, _x.fct_out.HmiIcon.ShowSetSWF, _x.fct_out.HmiIcon.ShowSetDA_ALCS, _x.fct_out.HmiIcon.ShowSetDA_SpdAssist, _x.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl, _x.fct_out.HmiIcon.ShowSetDA_SteerAssist, _x.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist, _x.fct_out.HmiIcon.ReRADfeatures_FactoryDft, _x.fct_out.HmiIcon.LaneFeautres_FactoryDft, _x.fct_out.Eas.EASSts, _x.fct_out.Eas.EASWarningLv, _x.fct_out.Eas.RpsLockUnlckCtrl, _x.fct_out.Eas.EasCall,) = _get_struct_13IBIBIB5IB().unpack(str[start:end])
      self.fct_out.HmiIcon.ShowSetDA_ALCS = bool(self.fct_out.HmiIcon.ShowSetDA_ALCS)
      self.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl = bool(self.fct_out.HmiIcon.ShowSetDA_SetSpdCtrl)
      self.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist = bool(self.fct_out.HmiIcon.ShowSetDA_CurveSpdAssist)
      self.fct_out.Eas.EasCall = bool(self.fct_out.Eas.EasCall)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fct_out.Reserved = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 136
      (_x.fct_out.SesrSts.LidarSts, _x.fct_out.SesrSts.Camera_FrntWideSts, _x.fct_out.RcvProtoPTPTime.function_arb_out_ptp_ts, _x.fct_out.RcvProtoPTPTime.sd_map_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_functionstatus_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_speedlimitvalue_ptp_ts, _x.fct_out.RcvProtoPTPTime.nop_vehicleout_ptp_ts, _x.fct_out.RcvProtoPTPTime.side_feature_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_illumnance_flag_ptp_ts, _x.fct_out.RcvProtoPTPTime.vision_road_detection_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_10ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.vehicle_50ms_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_lpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_obf_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_rme_road_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tpp_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tse_outputs_ptp_ts, _x.fct_out.RcvProtoPTPTime.ehy_tsi_outputs_ptp_ts,) = _get_struct_2i16Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fct_out.RcvProtoPTPTime.reserved_ptp_ts = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 8
      (self.fct_out.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fct_out.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fct_out.publisher_id = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.fct_out.counter, _x.fct_out.publish_ts, _x.vehicle_config.is_vehicle_info_valid, _x.vehicle_config.feature_vehicle_info.wheel_base, _x.vehicle_config.feature_vehicle_info.veh_overall_length, _x.vehicle_config.feature_vehicle_info.veh_overall_width, _x.vehicle_config.feature_vehicle_info.veh_width, _x.vehicle_config.feature_vehicle_info.veh_height, _x.vehicle_config.feature_vehicle_info.front_tread_width, _x.vehicle_config.feature_vehicle_info.rear_tread_width,) = _get_struct_2QB7f().unpack(str[start:end])
      self.vehicle_config.is_vehicle_info_valid = bool(self.vehicle_config.is_vehicle_info_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.vehicle_config.feature_vehicle_info.steer_ratio_martix_left_turn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.vehicle_config.feature_vehicle_info.steer_ratio_martix_right_turn.append(val1)
      _x = self
      start = end
      end += 112
      (_x.vehicle_config.feature_vehicle_info.front_bumper_to_rear_axle, _x.vehicle_config.feature_vehicle_info.front_main_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.vehicle_config.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.vehicle_config.cal_vehicle_info.veh_calib_height, _x.vehicle_config.cal_vehicle_info.veh_width, _x.vehicle_config.cal_vehicle_info.veh_fwheel2head, _x.vehicle_config.cal_vehicle_info.veh_rwheel2tail, _x.vehicle_config.cal_vehicle_info.veh_wheel_base,) = _get_struct_28f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_wide.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_wide.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.front_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.rear_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_rear.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.camera_location.svc_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.vehicle_config.cal_vehicle_info.lidar_location.lidar_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 8
      (self.vehicle_config.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_config.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vehicle_config.publisher_id = str[start:end]
      _x = self
      start = end
      end += 272
      (_x.vehicle_config.counter, _x.vehicle_config.publish_ts, _x.radar_info_topic.received_topic_publish_ts, _x.radar_info_topic.received_topic_counter, _x.vision_objects_topic.received_topic_publish_ts, _x.vision_objects_topic.received_topic_counter, _x.vision_road_topic.received_topic_publish_ts, _x.vision_road_topic.received_topic_counter, _x.vision_failsafe_topic.received_topic_publish_ts, _x.vision_failsafe_topic.received_topic_counter, _x.vision_feature_topic.received_topic_publish_ts, _x.vision_feature_topic.received_topic_counter, _x.vision_fsp_topic.received_topic_publish_ts, _x.vision_fsp_topic.received_topic_counter, _x.vision_traffic_light_topic.received_topic_publish_ts, _x.vision_traffic_light_topic.received_topic_counter, _x.vision_traffic_sign_topic.received_topic_publish_ts, _x.vision_traffic_sign_topic.received_topic_counter, _x.vision_vehicle_light_topic.received_topic_publish_ts, _x.vision_vehicle_light_topic.received_topic_counter, _x.vehicle_10ms_topic.received_topic_publish_ts, _x.vehicle_10ms_topic.received_topic_counter, _x.vehicle_50ms_topic.received_topic_publish_ts, _x.vehicle_50ms_topic.received_topic_counter, _x.vehicle_fctout_topic.received_topic_publish_ts, _x.vehicle_fctout_topic.received_topic_counter, _x.sd_map_topic.received_topic_publish_ts, _x.sd_map_topic.received_topic_counter, _x.lidar_read_ts.received_topic_publish_ts, _x.lidar_read_ts.received_topic_counter, _x.vehicle_config_topic.received_topic_publish_ts, _x.vehicle_config_topic.received_topic_counter, _x.dead_reckoning_latest_ts.received_topic_publish_ts, _x.dead_reckoning_latest_ts.received_topic_counter,) = _get_struct_34Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.sensors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SensorHeader()
        _x = val1
        start = end
        end += 12
        (_x.sensor_id, _x.measuring_ts,) = _get_struct_IQ().unpack(str[start:end])
        self.od_output.sensors.append(val1)
      _x = self
      start = end
      end += 16
      (_x.od_output.cooking_ts, _x.od_output.send_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.lidar_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LidarObject()
        _x = val1
        start = end
        end += 52
        (_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration,) = _get_struct_2Ii10f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.statistics_feature = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.od_output.lidar_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v98 = val1.mono3d
        _x = _v98
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts_score = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reid_feature = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.theta2d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.has_person,) = _get_struct_f().unpack(str[start:end])
        self.od_output.cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.static_cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StaticCameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v99 = val1.mono3d
        _x = _v99
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.od_output.static_cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_output.failsafe_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FailsafeObject()
        _x = val1
        start = end
        end += 40
        (_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score,) = _get_struct_IfIfIfIfIf().unpack(str[start:end])
        self.od_output.failsafe_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.od_output.reserved = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.od_output.reserved = str[start:end]
      start = end
      end += 8
      (self.od_output.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.od_output.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.od_output.publisher_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.od_output.counter, _x.od_output.publish_ts, _x.od_output_topic.received_topic_publish_ts, _x.od_output_topic.received_topic_counter, _x.lanelist.LL_LANE_NUM,) = _get_struct_4QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanelist.LL_Lane_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PointList_2D()
        start = end
        end += 4
        (val1.PL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.PL_Points_List = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point_2D()
          _x = val2
          start = end
          end += 8
          (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
          val1.PL_Points_List.append(val2)
        _v100 = val1.PL_Line_Property
        _x = _v100
        start = end
        end += 24
        (_x.LD_Type, _x.LD_Color, _x.LD_Class, _x.LD_Abrasion, _x.LD_Cross, _x.LD_LaneRole,) = _get_struct_6i().unpack(str[start:end])
        start = end
        end += 4
        (val1.sensor_id,) = _get_struct_I().unpack(str[start:end])
        self.lanelist.LL_Lane_List.append(val1)
      start = end
      end += 8
      (self.lanelist.time_meas,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lanelist.image_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lanelist.image_data = str[start:end]
      start = end
      end += 4
      (self.lanelist.LL_SpecialPoint_List.SPL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanelist.LL_SpecialPoint_List.SPL_Points_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point_2D()
        _x = val1
        start = end
        end += 8
        (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
        self.lanelist.LL_SpecialPoint_List.SPL_Points_List.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lanelist.LL_SpecialPoint_List.SPL_Type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lanelist.LL_SpecialPoint_List.sensor_id_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.lanelist.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lanelist.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lanelist.publisher_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.lanelist.counter, _x.lanelist.publish_ts, _x.lanelist_topic.received_topic_publish_ts, _x.lanelist_topic.received_topic_counter, _x.publish_ptp_ts,) = _get_struct_5Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13IBIBIB5IB = None
def _get_struct_13IBIBIB5IB():
    global _struct_13IBIBIB5IB
    if _struct_13IBIBIB5IB is None:
        _struct_13IBIBIB5IB = struct.Struct("<13IBIBIB5IB")
    return _struct_13IBIBIB5IB
_struct_28f = None
def _get_struct_28f():
    global _struct_28f
    if _struct_28f is None:
        _struct_28f = struct.Struct("<28f")
    return _struct_28f
_struct_2B2i3B7i = None
def _get_struct_2B2i3B7i():
    global _struct_2B2i3B7i
    if _struct_2B2i3B7i is None:
        _struct_2B2i3B7i = struct.Struct("<2B2i3B7i")
    return _struct_2B2i3B7i
_struct_2B2if6Bf = None
def _get_struct_2B2if6Bf():
    global _struct_2B2if6Bf
    if _struct_2B2if6Bf is None:
        _struct_2B2if6Bf = struct.Struct("<2B2if6Bf")
    return _struct_2B2if6Bf
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2I2i3f3i8fi3f = None
def _get_struct_2I2i3f3i8fi3f():
    global _struct_2I2i3f3i8fi3f
    if _struct_2I2i3f3i8fi3f is None:
        _struct_2I2i3f3i8fi3f = struct.Struct("<2I2i3f3i8fi3f")
    return _struct_2I2i3f3i8fi3f
_struct_2I2ifiI10i = None
def _get_struct_2I2ifiI10i():
    global _struct_2I2ifiI10i
    if _struct_2I2ifiI10i is None:
        _struct_2I2ifiI10i = struct.Struct("<2I2ifiI10i")
    return _struct_2I2ifiI10i
_struct_2Ifi = None
def _get_struct_2Ifi():
    global _struct_2Ifi
    if _struct_2Ifi is None:
        _struct_2Ifi = struct.Struct("<2Ifi")
    return _struct_2Ifi
_struct_2Ii10f = None
def _get_struct_2Ii10f():
    global _struct_2Ii10f
    if _struct_2Ii10f is None:
        _struct_2Ii10f = struct.Struct("<2Ii10f")
    return _struct_2Ii10f
_struct_2Ii11fi = None
def _get_struct_2Ii11fi():
    global _struct_2Ii11fi
    if _struct_2Ii11fi is None:
        _struct_2Ii11fi = struct.Struct("<2Ii11fi")
    return _struct_2Ii11fi
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2Q2Ii2B2IB3I = None
def _get_struct_2Q2Ii2B2IB3I():
    global _struct_2Q2Ii2B2IB3I
    if _struct_2Q2Ii2B2IB3I is None:
        _struct_2Q2Ii2B2IB3I = struct.Struct("<2Q2Ii2B2IB3I")
    return _struct_2Q2Ii2B2IB3I
_struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i = None
def _get_struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i():
    global _struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i
    if _struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i is None:
        _struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i = struct.Struct("<2Q2i2fi2fififif2iBif4IBiB2iIiIB2i")
    return _struct_2Q2i2fi2fififif2iBif4IBiB2iIiIB2i
_struct_2Q2i3fi2fi = None
def _get_struct_2Q2i3fi2fi():
    global _struct_2Q2i3fi2fi
    if _struct_2Q2i3fi2fi is None:
        _struct_2Q2i3fi2fi = struct.Struct("<2Q2i3fi2fi")
    return _struct_2Q2i3fi2fi
_struct_2Q2iIQ = None
def _get_struct_2Q2iIQ():
    global _struct_2Q2iIQ
    if _struct_2Q2iIQ is None:
        _struct_2Q2iIQ = struct.Struct("<2Q2iIQ")
    return _struct_2Q2iIQ
_struct_2Q3f = None
def _get_struct_2Q3f():
    global _struct_2Q3f
    if _struct_2Q3f is None:
        _struct_2Q3f = struct.Struct("<2Q3f")
    return _struct_2Q3f
_struct_2Q8I = None
def _get_struct_2Q8I():
    global _struct_2Q8I
    if _struct_2Q8I is None:
        _struct_2Q8I = struct.Struct("<2Q8I")
    return _struct_2Q8I
_struct_2QB7f = None
def _get_struct_2QB7f():
    global _struct_2QB7f
    if _struct_2QB7f is None:
        _struct_2QB7f = struct.Struct("<2QB7f")
    return _struct_2QB7f
_struct_2QBI = None
def _get_struct_2QBI():
    global _struct_2QBI
    if _struct_2QBI is None:
        _struct_2QBI = struct.Struct("<2QBI")
    return _struct_2QBI
_struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i = None
def _get_struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i():
    global _struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i
    if _struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i is None:
        _struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i = struct.Struct("<2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i")
    return _struct_2QiB7if3iB4i4I2iBf5i5f7ifiBiIiI8iI8BiB3IB7i2I2i5I2i2B2i
_struct_2QiQBd = None
def _get_struct_2QiQBd():
    global _struct_2QiQBd
    if _struct_2QiQBd is None:
        _struct_2QiQBd = struct.Struct("<2QiQBd")
    return _struct_2QiQBd
_struct_2QiQi2BI2B2I2B2I = None
def _get_struct_2QiQi2BI2B2I2B2I():
    global _struct_2QiQi2BI2B2I2B2I
    if _struct_2QiQi2BI2B2I2B2I is None:
        _struct_2QiQi2BI2B2I2B2I = struct.Struct("<2QiQi2BI2B2I2B2I")
    return _struct_2QiQi2BI2B2I2B2I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_2fI = None
def _get_struct_2fI():
    global _struct_2fI
    if _struct_2fI is None:
        _struct_2fI = struct.Struct("<2fI")
    return _struct_2fI
_struct_2fIQ = None
def _get_struct_2fIQ():
    global _struct_2fIQ
    if _struct_2fIQ is None:
        _struct_2fIQ = struct.Struct("<2fIQ")
    return _struct_2fIQ
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i16Q = None
def _get_struct_2i16Q():
    global _struct_2i16Q
    if _struct_2i16Q is None:
        _struct_2i16Q = struct.Struct("<2i16Q")
    return _struct_2i16Q
_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI = None
def _get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI():
    global _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI
    if _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI is None:
        _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI = struct.Struct("<2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI")
    return _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI
_struct_2ifiI2Q = None
def _get_struct_2ifiI2Q():
    global _struct_2ifiI2Q
    if _struct_2ifiI2Q is None:
        _struct_2ifiI2Q = struct.Struct("<2ifiI2Q")
    return _struct_2ifiI2Q
_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB = None
def _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB():
    global _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB
    if _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB is None:
        _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB = struct.Struct("<31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB")
    return _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB
_struct_34Q = None
def _get_struct_34Q():
    global _struct_34Q
    if _struct_34Q is None:
        _struct_34Q = struct.Struct("<34Q")
    return _struct_34Q
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3Ii13f2B = None
def _get_struct_3Ii13f2B():
    global _struct_3Ii13f2B
    if _struct_3Ii13f2B is None:
        _struct_3Ii13f2B = struct.Struct("<3Ii13f2B")
    return _struct_3Ii13f2B
_struct_3Q = None
def _get_struct_3Q():
    global _struct_3Q
    if _struct_3Q is None:
        _struct_3Q = struct.Struct("<3Q")
    return _struct_3Q
_struct_3Q154IQ = None
def _get_struct_3Q154IQ():
    global _struct_3Q154IQ
    if _struct_3Q154IQ is None:
        _struct_3Q154IQ = struct.Struct("<3Q154IQ")
    return _struct_3Q154IQ
_struct_3Q2iQ = None
def _get_struct_3Q2iQ():
    global _struct_3Q2iQ
    if _struct_3Q2iQ is None:
        _struct_3Q2iQ = struct.Struct("<3Q2iQ")
    return _struct_3Q2iQ
_struct_3QfB = None
def _get_struct_3QfB():
    global _struct_3QfB
    if _struct_3QfB is None:
        _struct_3QfB = struct.Struct("<3QfB")
    return _struct_3QfB
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_3i2I3f = None
def _get_struct_3i2I3f():
    global _struct_3i2I3f
    if _struct_3i2I3f is None:
        _struct_3i2I3f = struct.Struct("<3i2I3f")
    return _struct_3i2I3f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4Bf2i = None
def _get_struct_4Bf2i():
    global _struct_4Bf2i
    if _struct_4Bf2i is None:
        _struct_4Bf2i = struct.Struct("<4Bf2i")
    return _struct_4Bf2i
_struct_4I2BiI = None
def _get_struct_4I2BiI():
    global _struct_4I2BiI
    if _struct_4I2BiI is None:
        _struct_4I2BiI = struct.Struct("<4I2BiI")
    return _struct_4I2BiI
_struct_4Q3IQIB = None
def _get_struct_4Q3IQIB():
    global _struct_4Q3IQIB
    if _struct_4Q3IQIB is None:
        _struct_4Q3IQIB = struct.Struct("<4Q3IQIB")
    return _struct_4Q3IQIB
_struct_4QI = None
def _get_struct_4QI():
    global _struct_4QI
    if _struct_4QI is None:
        _struct_4QI = struct.Struct("<4QI")
    return _struct_4QI
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4i6I3iBf4i2Bf4i2BiBi = None
def _get_struct_4i6I3iBf4i2Bf4i2BiBi():
    global _struct_4i6I3iBf4i2Bf4i2BiBi
    if _struct_4i6I3iBf4i2Bf4i2BiBi is None:
        _struct_4i6I3iBf4i2Bf4i2BiBi = struct.Struct("<4i6I3iBf4i2Bf4i2BiBi")
    return _struct_4i6I3iBf4i2Bf4i2BiBi
_struct_5Q = None
def _get_struct_5Q():
    global _struct_5Q
    if _struct_5Q is None:
        _struct_5Q = struct.Struct("<5Q")
    return _struct_5Q
_struct_5iQ = None
def _get_struct_5iQ():
    global _struct_5iQ
    if _struct_5iQ is None:
        _struct_5iQ = struct.Struct("<5iQ")
    return _struct_5iQ
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B6fBi3fB5fB5f = None
def _get_struct_B6fBi3fB5fB5f():
    global _struct_B6fBi3fB5fB5f
    if _struct_B6fBi3fB5fB5f is None:
        _struct_B6fBi3fB5fB5f = struct.Struct("<B6fBi3fB5fB5f")
    return _struct_B6fBi3fB5fB5f
_struct_B8fBI2i5fi = None
def _get_struct_B8fBI2i5fi():
    global _struct_B8fBI2i5fi
    if _struct_B8fBI2i5fi is None:
        _struct_B8fBI2i5fi = struct.Struct("<B8fBI2i5fi")
    return _struct_B8fBI2i5fi
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_I5fI5fI = None
def _get_struct_I5fI5fI():
    global _struct_I5fI5fI
    if _struct_I5fI5fI is None:
        _struct_I5fI5fI = struct.Struct("<I5fI5fI")
    return _struct_I5fI5fI
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
_struct_IfIfIfIfIf = None
def _get_struct_IfIfIfIfIf():
    global _struct_IfIfIfIfIf
    if _struct_IfIfIfIfIf is None:
        _struct_IfIfIfIfIf = struct.Struct("<IfIfIfIfIf")
    return _struct_IfIfIfIfIf
_struct_Ii2fi2fif = None
def _get_struct_Ii2fi2fif():
    global _struct_Ii2fi2fif
    if _struct_Ii2fi2fif is None:
        _struct_Ii2fi2fif = struct.Struct("<Ii2fi2fif")
    return _struct_Ii2fi2fif
_struct_Ii8f = None
def _get_struct_Ii8f():
    global _struct_Ii8f
    if _struct_Ii8f is None:
        _struct_Ii8f = struct.Struct("<Ii8f")
    return _struct_Ii8f
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_Q2i4Q = None
def _get_struct_Q2i4Q():
    global _struct_Q2i4Q
    if _struct_Q2i4Q is None:
        _struct_Q2i4Q = struct.Struct("<Q2i4Q")
    return _struct_Q2i4Q
_struct_QI = None
def _get_struct_QI():
    global _struct_QI
    if _struct_QI is None:
        _struct_QI = struct.Struct("<QI")
    return _struct_QI
_struct_Qi = None
def _get_struct_Qi():
    global _struct_Qi
    if _struct_Qi is None:
        _struct_Qi = struct.Struct("<Qi")
    return _struct_Qi
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fBi4B2Q = None
def _get_struct_fBi4B2Q():
    global _struct_fBi4B2Q
    if _struct_fBi4B2Q is None:
        _struct_fBi4B2Q = struct.Struct("<fBi4B2Q")
    return _struct_fBi4B2Q
_struct_fi = None
def _get_struct_fi():
    global _struct_fi
    if _struct_fi is None:
        _struct_fi = struct.Struct("<fi")
    return _struct_fi
_struct_fi2Ii2I = None
def _get_struct_fi2Ii2I():
    global _struct_fi2Ii2I
    if _struct_fi2Ii2I is None:
        _struct_fi2Ii2I = struct.Struct("<fi2Ii2I")
    return _struct_fi2Ii2I
_struct_fif = None
def _get_struct_fif():
    global _struct_fif
    if _struct_fif is None:
        _struct_fif = struct.Struct("<fif")
    return _struct_fif
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2I2fi2f2i8fi = None
def _get_struct_i2I2fi2f2i8fi():
    global _struct_i2I2fi2f2i8fi
    if _struct_i2I2fi2f2i8fi is None:
        _struct_i2I2fi2f2i8fi = struct.Struct("<i2I2fi2f2i8fi")
    return _struct_i2I2fi2f2i8fi
_struct_i2I3f3iI = None
def _get_struct_i2I3f3iI():
    global _struct_i2I3f3iI
    if _struct_i2I3f3iI is None:
        _struct_i2I3f3iI = struct.Struct("<i2I3f3iI")
    return _struct_i2I3f3iI
_struct_i2Ii3f = None
def _get_struct_i2Ii3f():
    global _struct_i2Ii3f
    if _struct_i2Ii3f is None:
        _struct_i2Ii3f = struct.Struct("<i2Ii3f")
    return _struct_i2Ii3f
_struct_i2IifBiI2iI4f3i2f2B = None
def _get_struct_i2IifBiI2iI4f3i2f2B():
    global _struct_i2IifBiI2iI4f3i2f2B
    if _struct_i2IifBiI2iI4f3i2f2B is None:
        _struct_i2IifBiI2iI4f3i2f2B = struct.Struct("<i2IifBiI2iI4f3i2f2B")
    return _struct_i2IifBiI2iI4f3i2f2B
_struct_i3dQ = None
def _get_struct_i3dQ():
    global _struct_i3dQ
    if _struct_i3dQ is None:
        _struct_i3dQ = struct.Struct("<i3dQ")
    return _struct_i3dQ
_struct_i5fifi = None
def _get_struct_i5fifi():
    global _struct_i5fifi
    if _struct_i5fifi is None:
        _struct_i5fifi = struct.Struct("<i5fifi")
    return _struct_i5fifi
_struct_iI2i8f = None
def _get_struct_iI2i8f():
    global _struct_iI2i8f
    if _struct_iI2i8f is None:
        _struct_iI2i8f = struct.Struct("<iI2i8f")
    return _struct_iI2i8f
_struct_iI3f2Ii4fI2BIB = None
def _get_struct_iI3f2Ii4fI2BIB():
    global _struct_iI3f2Ii4fI2BIB
    if _struct_iI3f2Ii4fI2BIB is None:
        _struct_iI3f2Ii4fI2BIB = struct.Struct("<iI3f2Ii4fI2BIB")
    return _struct_iI3f2Ii4fI2BIB
_struct_iQ = None
def _get_struct_iQ():
    global _struct_iQ
    if _struct_iQ is None:
        _struct_iQ = struct.Struct("<iQ")
    return _struct_iQ
_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ = None
def _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ():
    global _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ
    if _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ is None:
        _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ = struct.Struct("<ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ")
    return _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ
_struct_ifififI4i = None
def _get_struct_ifififI4i():
    global _struct_ifififI4i
    if _struct_ifififI4i is None:
        _struct_ifififI4i = struct.Struct("<ifififI4i")
    return _struct_ifififI4i

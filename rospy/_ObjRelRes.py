# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ObjRelRes.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ObjRelRes(genpy.Message):
  _md5sum = "df03aae26c7bd1db5ea79108dcc40643"
  _type = "rospy_message_converter/ObjRelRes"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 obj_id
LMRelRes[] lm_relation

================================================================================
MSG: rospy_message_converter/LMRelRes
uint32 lm_id
int32 relative_pos
float32 dist
float32 conf
"""
  __slots__ = ['obj_id','lm_relation']
  _slot_types = ['uint32','rospy_message_converter/LMRelRes[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_id,lm_relation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjRelRes, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_id is None:
        self.obj_id = 0
      if self.lm_relation is None:
        self.lm_relation = []
    else:
      self.obj_id = 0
      self.lm_relation = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.obj_id
      buff.write(_get_struct_I().pack(_x))
      length = len(self.lm_relation)
      buff.write(_struct_I.pack(length))
      for val1 in self.lm_relation:
        _x = val1
        buff.write(_get_struct_Ii2f().pack(_x.lm_id, _x.relative_pos, _x.dist, _x.conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lm_relation is None:
        self.lm_relation = None
      end = 0
      start = end
      end += 4
      (self.obj_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lm_relation = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LMRelRes()
        _x = val1
        start = end
        end += 16
        (_x.lm_id, _x.relative_pos, _x.dist, _x.conf,) = _get_struct_Ii2f().unpack(str[start:end])
        self.lm_relation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.obj_id
      buff.write(_get_struct_I().pack(_x))
      length = len(self.lm_relation)
      buff.write(_struct_I.pack(length))
      for val1 in self.lm_relation:
        _x = val1
        buff.write(_get_struct_Ii2f().pack(_x.lm_id, _x.relative_pos, _x.dist, _x.conf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lm_relation is None:
        self.lm_relation = None
      end = 0
      start = end
      end += 4
      (self.obj_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lm_relation = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LMRelRes()
        _x = val1
        start = end
        end += 16
        (_x.lm_id, _x.relative_pos, _x.dist, _x.conf,) = _get_struct_Ii2f().unpack(str[start:end])
        self.lm_relation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Ii2f = None
def _get_struct_Ii2f():
    global _struct_Ii2f
    if _struct_Ii2f is None:
        _struct_Ii2f = struct.Struct("<Ii2f")
    return _struct_Ii2f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehicleLightDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VehicleLightDetection(genpy.Message):
  _md5sum = "184199069965954fcbc94e6f37b33fd2"
  _type = "rospy_message_converter/VehicleLightDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
VehicleLight[] vehiclelight
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/VehicleLight
uint32 VL_ID
uint32 VL_Num_Of_Vehicles
uint32 VL_Brightness
int32 VL_Type
float32 VL_Width
float32 VL_Width_STD
float32 VL_Height
float32 VL_Height_STD
float32 VL_Top_Angle
float32 VL_Bottom_Angle
float32 VL_Right_Angle
float32 VL_Left_Angle
float32 VL_Top_Angle_Velocity
float32 VL_Bottom_Velocity_Angle
float32 VL_Right_Velocity_Angle
float32 VL_Left_Velocity_Angle
float32 VL_Confidnece
bool VL_Is_SingleBar
bool VL_Is_New
"""
  __slots__ = ['timestamp','vehiclelight','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['uint64','rospy_message_converter/VehicleLight[]','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,vehiclelight,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleLightDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.vehiclelight is None:
        self.vehiclelight = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.timestamp = 0
      self.vehiclelight = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.vehiclelight)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehiclelight:
        _x = val1
        buff.write(_get_struct_3Ii13f2B().pack(_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehiclelight is None:
        self.vehiclelight = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehiclelight = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VehicleLight()
        _x = val1
        start = end
        end += 70
        (_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New,) = _get_struct_3Ii13f2B().unpack(str[start:end])
        val1.VL_Is_SingleBar = bool(val1.VL_Is_SingleBar)
        val1.VL_Is_New = bool(val1.VL_Is_New)
        self.vehiclelight.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.vehiclelight)
      buff.write(_struct_I.pack(length))
      for val1 in self.vehiclelight:
        _x = val1
        buff.write(_get_struct_3Ii13f2B().pack(_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehiclelight is None:
        self.vehiclelight = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vehiclelight = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VehicleLight()
        _x = val1
        start = end
        end += 70
        (_x.VL_ID, _x.VL_Num_Of_Vehicles, _x.VL_Brightness, _x.VL_Type, _x.VL_Width, _x.VL_Width_STD, _x.VL_Height, _x.VL_Height_STD, _x.VL_Top_Angle, _x.VL_Bottom_Angle, _x.VL_Right_Angle, _x.VL_Left_Angle, _x.VL_Top_Angle_Velocity, _x.VL_Bottom_Velocity_Angle, _x.VL_Right_Velocity_Angle, _x.VL_Left_Velocity_Angle, _x.VL_Confidnece, _x.VL_Is_SingleBar, _x.VL_Is_New,) = _get_struct_3Ii13f2B().unpack(str[start:end])
        val1.VL_Is_SingleBar = bool(val1.VL_Is_SingleBar)
        val1.VL_Is_New = bool(val1.VL_Is_New)
        self.vehiclelight.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3Ii13f2B = None
def _get_struct_3Ii13f2B():
    global _struct_3Ii13f2B
    if _struct_3Ii13f2B is None:
        _struct_3Ii13f2B = struct.Struct("<3Ii13f2B")
    return _struct_3Ii13f2B
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

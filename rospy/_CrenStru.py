# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CrenStru.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class CrenStru(genpy.Message):
  _md5sum = "dc83d645a81b40cc2903f9bbba191c12"
  _type = "rospy_message_converter/CrenStru"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ObjectStru objInfo
ObhcStru obhcInfo
OthaStru othaInfo
float32[] reserved

================================================================================
MSG: rospy_message_converter/ObjectStru
uint32 id
uint32 visionId
uint32 radarId
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
float32 longDistStd
float32 latDistStd
float32 longVelStd
float32 latVelStd
float32 longAccelStd
float32 latAccelStd
uint32 motionStatus
uint32 detectionSensor
uint32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSnesor

================================================================================
MSG: rospy_message_converter/ObhcStru
float32 hypoProb
float32 collProb
float32 ttb
uint32 hypoLabel

================================================================================
MSG: rospy_message_converter/OthaStru
float32 aLgtNec
float32 aLatNec
float32 ttc
bool inPathNow
"""
  __slots__ = ['objInfo','obhcInfo','othaInfo','reserved']
  _slot_types = ['rospy_message_converter/ObjectStru','rospy_message_converter/ObhcStru','rospy_message_converter/OthaStru','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objInfo,obhcInfo,othaInfo,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CrenStru, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.objInfo is None:
        self.objInfo = rospy_message_converter.msg.ObjectStru()
      if self.obhcInfo is None:
        self.obhcInfo = rospy_message_converter.msg.ObhcStru()
      if self.othaInfo is None:
        self.othaInfo = rospy_message_converter.msg.OthaStru()
      if self.reserved is None:
        self.reserved = []
    else:
      self.objInfo = rospy_message_converter.msg.ObjectStru()
      self.obhcInfo = rospy_message_converter.msg.ObhcStru()
      self.othaInfo = rospy_message_converter.msg.OthaStru()
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I17f6I3fI3fB().pack(_x.objInfo.id, _x.objInfo.visionId, _x.objInfo.radarId, _x.objInfo.age, _x.objInfo.longDist, _x.objInfo.latDist, _x.objInfo.longVel, _x.objInfo.latVel, _x.objInfo.longAccel, _x.objInfo.latAccel, _x.objInfo.heading, _x.objInfo.curvature, _x.objInfo.existConfidence, _x.objInfo.length, _x.objInfo.width, _x.objInfo.longDistStd, _x.objInfo.latDistStd, _x.objInfo.longVelStd, _x.objInfo.latVelStd, _x.objInfo.longAccelStd, _x.objInfo.latAccelStd, _x.objInfo.motionStatus, _x.objInfo.detectionSensor, _x.objInfo.type, _x.objInfo.refPoint, _x.objInfo.trackerStatus, _x.objInfo.visionDetectionSnesor, _x.obhcInfo.hypoProb, _x.obhcInfo.collProb, _x.obhcInfo.ttb, _x.obhcInfo.hypoLabel, _x.othaInfo.aLgtNec, _x.othaInfo.aLatNec, _x.othaInfo.ttc, _x.othaInfo.inPathNow))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objInfo is None:
        self.objInfo = rospy_message_converter.msg.ObjectStru()
      if self.obhcInfo is None:
        self.obhcInfo = rospy_message_converter.msg.ObhcStru()
      if self.othaInfo is None:
        self.othaInfo = rospy_message_converter.msg.OthaStru()
      end = 0
      _x = self
      start = end
      end += 137
      (_x.objInfo.id, _x.objInfo.visionId, _x.objInfo.radarId, _x.objInfo.age, _x.objInfo.longDist, _x.objInfo.latDist, _x.objInfo.longVel, _x.objInfo.latVel, _x.objInfo.longAccel, _x.objInfo.latAccel, _x.objInfo.heading, _x.objInfo.curvature, _x.objInfo.existConfidence, _x.objInfo.length, _x.objInfo.width, _x.objInfo.longDistStd, _x.objInfo.latDistStd, _x.objInfo.longVelStd, _x.objInfo.latVelStd, _x.objInfo.longAccelStd, _x.objInfo.latAccelStd, _x.objInfo.motionStatus, _x.objInfo.detectionSensor, _x.objInfo.type, _x.objInfo.refPoint, _x.objInfo.trackerStatus, _x.objInfo.visionDetectionSnesor, _x.obhcInfo.hypoProb, _x.obhcInfo.collProb, _x.obhcInfo.ttb, _x.obhcInfo.hypoLabel, _x.othaInfo.aLgtNec, _x.othaInfo.aLatNec, _x.othaInfo.ttc, _x.othaInfo.inPathNow,) = _get_struct_4I17f6I3fI3fB().unpack(str[start:end])
      self.othaInfo.inPathNow = bool(self.othaInfo.inPathNow)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I17f6I3fI3fB().pack(_x.objInfo.id, _x.objInfo.visionId, _x.objInfo.radarId, _x.objInfo.age, _x.objInfo.longDist, _x.objInfo.latDist, _x.objInfo.longVel, _x.objInfo.latVel, _x.objInfo.longAccel, _x.objInfo.latAccel, _x.objInfo.heading, _x.objInfo.curvature, _x.objInfo.existConfidence, _x.objInfo.length, _x.objInfo.width, _x.objInfo.longDistStd, _x.objInfo.latDistStd, _x.objInfo.longVelStd, _x.objInfo.latVelStd, _x.objInfo.longAccelStd, _x.objInfo.latAccelStd, _x.objInfo.motionStatus, _x.objInfo.detectionSensor, _x.objInfo.type, _x.objInfo.refPoint, _x.objInfo.trackerStatus, _x.objInfo.visionDetectionSnesor, _x.obhcInfo.hypoProb, _x.obhcInfo.collProb, _x.obhcInfo.ttb, _x.obhcInfo.hypoLabel, _x.othaInfo.aLgtNec, _x.othaInfo.aLatNec, _x.othaInfo.ttc, _x.othaInfo.inPathNow))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objInfo is None:
        self.objInfo = rospy_message_converter.msg.ObjectStru()
      if self.obhcInfo is None:
        self.obhcInfo = rospy_message_converter.msg.ObhcStru()
      if self.othaInfo is None:
        self.othaInfo = rospy_message_converter.msg.OthaStru()
      end = 0
      _x = self
      start = end
      end += 137
      (_x.objInfo.id, _x.objInfo.visionId, _x.objInfo.radarId, _x.objInfo.age, _x.objInfo.longDist, _x.objInfo.latDist, _x.objInfo.longVel, _x.objInfo.latVel, _x.objInfo.longAccel, _x.objInfo.latAccel, _x.objInfo.heading, _x.objInfo.curvature, _x.objInfo.existConfidence, _x.objInfo.length, _x.objInfo.width, _x.objInfo.longDistStd, _x.objInfo.latDistStd, _x.objInfo.longVelStd, _x.objInfo.latVelStd, _x.objInfo.longAccelStd, _x.objInfo.latAccelStd, _x.objInfo.motionStatus, _x.objInfo.detectionSensor, _x.objInfo.type, _x.objInfo.refPoint, _x.objInfo.trackerStatus, _x.objInfo.visionDetectionSnesor, _x.obhcInfo.hypoProb, _x.obhcInfo.collProb, _x.obhcInfo.ttb, _x.obhcInfo.hypoLabel, _x.othaInfo.aLgtNec, _x.othaInfo.aLatNec, _x.othaInfo.ttc, _x.othaInfo.inPathNow,) = _get_struct_4I17f6I3fI3fB().unpack(str[start:end])
      self.othaInfo.inPathNow = bool(self.othaInfo.inPathNow)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4I17f6I3fI3fB = None
def _get_struct_4I17f6I3fI3fB():
    global _struct_4I17f6I3fI3fB
    if _struct_4I17f6I3fI3fB is None:
        _struct_4I17f6I3fI3fB = struct.Struct("<4I17f6I3fI3fB")
    return _struct_4I17f6I3fI3fB

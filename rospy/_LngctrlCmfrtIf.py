# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LngctrlCmfrtIf.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LngctrlCmfrtIf(genpy.Message):
  _md5sum = "cd557552187f95025def5e720af7450d"
  _type = "rospy_message_converter/LngctrlCmfrtIf"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 VLCReqFct
int32 VLCMode
float32 VLCTarA
float32 VLCMinJerkA
float32 VLCMaxJerkA
bool VLCDrvOffReq
bool VLCDecToStopReq
int32 VLCShutdownModReq
int32 AD_ActvSftyBltReq
"""
  __slots__ = ['VLCReqFct','VLCMode','VLCTarA','VLCMinJerkA','VLCMaxJerkA','VLCDrvOffReq','VLCDecToStopReq','VLCShutdownModReq','AD_ActvSftyBltReq']
  _slot_types = ['int32','int32','float32','float32','float32','bool','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VLCReqFct,VLCMode,VLCTarA,VLCMinJerkA,VLCMaxJerkA,VLCDrvOffReq,VLCDecToStopReq,VLCShutdownModReq,AD_ActvSftyBltReq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LngctrlCmfrtIf, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VLCReqFct is None:
        self.VLCReqFct = 0
      if self.VLCMode is None:
        self.VLCMode = 0
      if self.VLCTarA is None:
        self.VLCTarA = 0.
      if self.VLCMinJerkA is None:
        self.VLCMinJerkA = 0.
      if self.VLCMaxJerkA is None:
        self.VLCMaxJerkA = 0.
      if self.VLCDrvOffReq is None:
        self.VLCDrvOffReq = False
      if self.VLCDecToStopReq is None:
        self.VLCDecToStopReq = False
      if self.VLCShutdownModReq is None:
        self.VLCShutdownModReq = 0
      if self.AD_ActvSftyBltReq is None:
        self.AD_ActvSftyBltReq = 0
    else:
      self.VLCReqFct = 0
      self.VLCMode = 0
      self.VLCTarA = 0.
      self.VLCMinJerkA = 0.
      self.VLCMaxJerkA = 0.
      self.VLCDrvOffReq = False
      self.VLCDecToStopReq = False
      self.VLCShutdownModReq = 0
      self.AD_ActvSftyBltReq = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3f2B2i().pack(_x.VLCReqFct, _x.VLCMode, _x.VLCTarA, _x.VLCMinJerkA, _x.VLCMaxJerkA, _x.VLCDrvOffReq, _x.VLCDecToStopReq, _x.VLCShutdownModReq, _x.AD_ActvSftyBltReq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.VLCReqFct, _x.VLCMode, _x.VLCTarA, _x.VLCMinJerkA, _x.VLCMaxJerkA, _x.VLCDrvOffReq, _x.VLCDecToStopReq, _x.VLCShutdownModReq, _x.AD_ActvSftyBltReq,) = _get_struct_2i3f2B2i().unpack(str[start:end])
      self.VLCDrvOffReq = bool(self.VLCDrvOffReq)
      self.VLCDecToStopReq = bool(self.VLCDecToStopReq)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3f2B2i().pack(_x.VLCReqFct, _x.VLCMode, _x.VLCTarA, _x.VLCMinJerkA, _x.VLCMaxJerkA, _x.VLCDrvOffReq, _x.VLCDecToStopReq, _x.VLCShutdownModReq, _x.AD_ActvSftyBltReq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.VLCReqFct, _x.VLCMode, _x.VLCTarA, _x.VLCMinJerkA, _x.VLCMaxJerkA, _x.VLCDrvOffReq, _x.VLCDecToStopReq, _x.VLCShutdownModReq, _x.AD_ActvSftyBltReq,) = _get_struct_2i3f2B2i().unpack(str[start:end])
      self.VLCDrvOffReq = bool(self.VLCDrvOffReq)
      self.VLCDecToStopReq = bool(self.VLCDecToStopReq)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3f2B2i = None
def _get_struct_2i3f2B2i():
    global _struct_2i3f2B2i
    if _struct_2i3f2B2i is None:
        _struct_2i3f2B2i = struct.Struct("<2i3f2B2i")
    return _struct_2i3f2B2i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VruRelevanceMonitorStru.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VruRelevanceMonitorStru(genpy.Message):
  _md5sum = "9f3c57dee1792ed917d5354bff5e4b59"
  _type = "rospy_message_converter/VruRelevanceMonitorStru"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
uint32 type
uint32 laneLoc
float32 futRelevance
float32 futRelevanceThld
float32 ttcLgtRear
float32 ttcLgtFront
float32 tFutureFront
float32 tFutureRear
float32 curLgtDistCorr
float32 curLatDistCorr
float32 dangerousZoneHalfWidth
float32 transitZoneHalftWidth
float32 zoneLength
float32 curPosRelevance
float32 corridorHalfWidth
float32 corridorMarginHalfWidth
float32 escapeHalfWidth
float32 escapeMarginHalfWidth
float32 objFutFrontLatDistMin
float32 objFutFrontLatDistMax
float32 objFutRearLatDistMin
float32 objFutRearLatDistMax
float32 pEscapeLeft
float32 pEscapeRight
float32 pEenterLeft
float32 pEnterRight
float32 pEnter
float32 pEscape
float32 curPoseLgtDist
float32 curPoseLatDist
float32 curPoseRange
float32 curPoseHeading
float32 futPoseToEgoFrontLgtDist
float32 futPoseToEgoFrontLatDist
float32 futPoseToEgoFrontRange
float32 futPoseToEgoFrontHeading
float32 futPoseToEgoRearLgtDist
float32 futPoseToEgoRearLatDist
float32 futPoseToEgoRearRange
float32 futPoseToEgoRearHeading
bool flgMoveForward
bool flgMoveBackward
bool flgMoveLeft
bool flgMoveRight
bool flgLatch
"""
  __slots__ = ['id','type','laneLoc','futRelevance','futRelevanceThld','ttcLgtRear','ttcLgtFront','tFutureFront','tFutureRear','curLgtDistCorr','curLatDistCorr','dangerousZoneHalfWidth','transitZoneHalftWidth','zoneLength','curPosRelevance','corridorHalfWidth','corridorMarginHalfWidth','escapeHalfWidth','escapeMarginHalfWidth','objFutFrontLatDistMin','objFutFrontLatDistMax','objFutRearLatDistMin','objFutRearLatDistMax','pEscapeLeft','pEscapeRight','pEenterLeft','pEnterRight','pEnter','pEscape','curPoseLgtDist','curPoseLatDist','curPoseRange','curPoseHeading','futPoseToEgoFrontLgtDist','futPoseToEgoFrontLatDist','futPoseToEgoFrontRange','futPoseToEgoFrontHeading','futPoseToEgoRearLgtDist','futPoseToEgoRearLatDist','futPoseToEgoRearRange','futPoseToEgoRearHeading','flgMoveForward','flgMoveBackward','flgMoveLeft','flgMoveRight','flgLatch']
  _slot_types = ['uint32','uint32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,laneLoc,futRelevance,futRelevanceThld,ttcLgtRear,ttcLgtFront,tFutureFront,tFutureRear,curLgtDistCorr,curLatDistCorr,dangerousZoneHalfWidth,transitZoneHalftWidth,zoneLength,curPosRelevance,corridorHalfWidth,corridorMarginHalfWidth,escapeHalfWidth,escapeMarginHalfWidth,objFutFrontLatDistMin,objFutFrontLatDistMax,objFutRearLatDistMin,objFutRearLatDistMax,pEscapeLeft,pEscapeRight,pEenterLeft,pEnterRight,pEnter,pEscape,curPoseLgtDist,curPoseLatDist,curPoseRange,curPoseHeading,futPoseToEgoFrontLgtDist,futPoseToEgoFrontLatDist,futPoseToEgoFrontRange,futPoseToEgoFrontHeading,futPoseToEgoRearLgtDist,futPoseToEgoRearLatDist,futPoseToEgoRearRange,futPoseToEgoRearHeading,flgMoveForward,flgMoveBackward,flgMoveLeft,flgMoveRight,flgLatch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VruRelevanceMonitorStru, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.laneLoc is None:
        self.laneLoc = 0
      if self.futRelevance is None:
        self.futRelevance = 0.
      if self.futRelevanceThld is None:
        self.futRelevanceThld = 0.
      if self.ttcLgtRear is None:
        self.ttcLgtRear = 0.
      if self.ttcLgtFront is None:
        self.ttcLgtFront = 0.
      if self.tFutureFront is None:
        self.tFutureFront = 0.
      if self.tFutureRear is None:
        self.tFutureRear = 0.
      if self.curLgtDistCorr is None:
        self.curLgtDistCorr = 0.
      if self.curLatDistCorr is None:
        self.curLatDistCorr = 0.
      if self.dangerousZoneHalfWidth is None:
        self.dangerousZoneHalfWidth = 0.
      if self.transitZoneHalftWidth is None:
        self.transitZoneHalftWidth = 0.
      if self.zoneLength is None:
        self.zoneLength = 0.
      if self.curPosRelevance is None:
        self.curPosRelevance = 0.
      if self.corridorHalfWidth is None:
        self.corridorHalfWidth = 0.
      if self.corridorMarginHalfWidth is None:
        self.corridorMarginHalfWidth = 0.
      if self.escapeHalfWidth is None:
        self.escapeHalfWidth = 0.
      if self.escapeMarginHalfWidth is None:
        self.escapeMarginHalfWidth = 0.
      if self.objFutFrontLatDistMin is None:
        self.objFutFrontLatDistMin = 0.
      if self.objFutFrontLatDistMax is None:
        self.objFutFrontLatDistMax = 0.
      if self.objFutRearLatDistMin is None:
        self.objFutRearLatDistMin = 0.
      if self.objFutRearLatDistMax is None:
        self.objFutRearLatDistMax = 0.
      if self.pEscapeLeft is None:
        self.pEscapeLeft = 0.
      if self.pEscapeRight is None:
        self.pEscapeRight = 0.
      if self.pEenterLeft is None:
        self.pEenterLeft = 0.
      if self.pEnterRight is None:
        self.pEnterRight = 0.
      if self.pEnter is None:
        self.pEnter = 0.
      if self.pEscape is None:
        self.pEscape = 0.
      if self.curPoseLgtDist is None:
        self.curPoseLgtDist = 0.
      if self.curPoseLatDist is None:
        self.curPoseLatDist = 0.
      if self.curPoseRange is None:
        self.curPoseRange = 0.
      if self.curPoseHeading is None:
        self.curPoseHeading = 0.
      if self.futPoseToEgoFrontLgtDist is None:
        self.futPoseToEgoFrontLgtDist = 0.
      if self.futPoseToEgoFrontLatDist is None:
        self.futPoseToEgoFrontLatDist = 0.
      if self.futPoseToEgoFrontRange is None:
        self.futPoseToEgoFrontRange = 0.
      if self.futPoseToEgoFrontHeading is None:
        self.futPoseToEgoFrontHeading = 0.
      if self.futPoseToEgoRearLgtDist is None:
        self.futPoseToEgoRearLgtDist = 0.
      if self.futPoseToEgoRearLatDist is None:
        self.futPoseToEgoRearLatDist = 0.
      if self.futPoseToEgoRearRange is None:
        self.futPoseToEgoRearRange = 0.
      if self.futPoseToEgoRearHeading is None:
        self.futPoseToEgoRearHeading = 0.
      if self.flgMoveForward is None:
        self.flgMoveForward = False
      if self.flgMoveBackward is None:
        self.flgMoveBackward = False
      if self.flgMoveLeft is None:
        self.flgMoveLeft = False
      if self.flgMoveRight is None:
        self.flgMoveRight = False
      if self.flgLatch is None:
        self.flgLatch = False
    else:
      self.id = 0
      self.type = 0
      self.laneLoc = 0
      self.futRelevance = 0.
      self.futRelevanceThld = 0.
      self.ttcLgtRear = 0.
      self.ttcLgtFront = 0.
      self.tFutureFront = 0.
      self.tFutureRear = 0.
      self.curLgtDistCorr = 0.
      self.curLatDistCorr = 0.
      self.dangerousZoneHalfWidth = 0.
      self.transitZoneHalftWidth = 0.
      self.zoneLength = 0.
      self.curPosRelevance = 0.
      self.corridorHalfWidth = 0.
      self.corridorMarginHalfWidth = 0.
      self.escapeHalfWidth = 0.
      self.escapeMarginHalfWidth = 0.
      self.objFutFrontLatDistMin = 0.
      self.objFutFrontLatDistMax = 0.
      self.objFutRearLatDistMin = 0.
      self.objFutRearLatDistMax = 0.
      self.pEscapeLeft = 0.
      self.pEscapeRight = 0.
      self.pEenterLeft = 0.
      self.pEnterRight = 0.
      self.pEnter = 0.
      self.pEscape = 0.
      self.curPoseLgtDist = 0.
      self.curPoseLatDist = 0.
      self.curPoseRange = 0.
      self.curPoseHeading = 0.
      self.futPoseToEgoFrontLgtDist = 0.
      self.futPoseToEgoFrontLatDist = 0.
      self.futPoseToEgoFrontRange = 0.
      self.futPoseToEgoFrontHeading = 0.
      self.futPoseToEgoRearLgtDist = 0.
      self.futPoseToEgoRearLatDist = 0.
      self.futPoseToEgoRearRange = 0.
      self.futPoseToEgoRearHeading = 0.
      self.flgMoveForward = False
      self.flgMoveBackward = False
      self.flgMoveLeft = False
      self.flgMoveRight = False
      self.flgLatch = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I38f5B().pack(_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 169
      (_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch,) = _get_struct_3I38f5B().unpack(str[start:end])
      self.flgMoveForward = bool(self.flgMoveForward)
      self.flgMoveBackward = bool(self.flgMoveBackward)
      self.flgMoveLeft = bool(self.flgMoveLeft)
      self.flgMoveRight = bool(self.flgMoveRight)
      self.flgLatch = bool(self.flgLatch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I38f5B().pack(_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 169
      (_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch,) = _get_struct_3I38f5B().unpack(str[start:end])
      self.flgMoveForward = bool(self.flgMoveForward)
      self.flgMoveBackward = bool(self.flgMoveBackward)
      self.flgMoveLeft = bool(self.flgMoveLeft)
      self.flgMoveRight = bool(self.flgMoveRight)
      self.flgLatch = bool(self.flgLatch)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I38f5B = None
def _get_struct_3I38f5B():
    global _struct_3I38f5B
    if _struct_3I38f5B is None:
        _struct_3I38f5B = struct.Struct("<3I38f5B")
    return _struct_3I38f5B

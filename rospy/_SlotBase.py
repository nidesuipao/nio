# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SlotBase.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SlotBase(genpy.Message):
  _md5sum = "efb4cbe76fc1bcb9d75aa2110ef1dff1"
  _type = "rospy_message_converter/SlotBase"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z
"""
  __slots__ = ['hmi_index','svc_index','uss_index','pt1','pt2','pt3','pt4','type','source','size_x','size_y','VehPos','VehPsi','status','fov','planning_result','slot_angle']
  _slot_types = ['int32','int32','int32','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','int32','int32','float32','float32','rospy_message_converter/ParPoint','float32','int32','int32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hmi_index,svc_index,uss_index,pt1,pt2,pt3,pt4,type,source,size_x,size_y,VehPos,VehPsi,status,fov,planning_result,slot_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SlotBase, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.hmi_index is None:
        self.hmi_index = 0
      if self.svc_index is None:
        self.svc_index = 0
      if self.uss_index is None:
        self.uss_index = 0
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.ParPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.ParPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.ParPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.ParPoint()
      if self.type is None:
        self.type = 0
      if self.source is None:
        self.source = 0
      if self.size_x is None:
        self.size_x = 0.
      if self.size_y is None:
        self.size_y = 0.
      if self.VehPos is None:
        self.VehPos = rospy_message_converter.msg.ParPoint()
      if self.VehPsi is None:
        self.VehPsi = 0.
      if self.status is None:
        self.status = 0
      if self.fov is None:
        self.fov = 0
      if self.planning_result is None:
        self.planning_result = 0
      if self.slot_angle is None:
        self.slot_angle = 0.
    else:
      self.hmi_index = 0
      self.svc_index = 0
      self.uss_index = 0
      self.pt1 = rospy_message_converter.msg.ParPoint()
      self.pt2 = rospy_message_converter.msg.ParPoint()
      self.pt3 = rospy_message_converter.msg.ParPoint()
      self.pt4 = rospy_message_converter.msg.ParPoint()
      self.type = 0
      self.source = 0
      self.size_x = 0.
      self.size_y = 0.
      self.VehPos = rospy_message_converter.msg.ParPoint()
      self.VehPsi = 0.
      self.status = 0
      self.fov = 0
      self.planning_result = 0
      self.slot_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i12f2i6f3if().pack(_x.hmi_index, _x.svc_index, _x.uss_index, _x.pt1.x, _x.pt1.y, _x.pt1.z, _x.pt2.x, _x.pt2.y, _x.pt2.z, _x.pt3.x, _x.pt3.y, _x.pt3.z, _x.pt4.x, _x.pt4.y, _x.pt4.z, _x.type, _x.source, _x.size_x, _x.size_y, _x.VehPos.x, _x.VehPos.y, _x.VehPos.z, _x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.ParPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.ParPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.ParPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.ParPoint()
      if self.VehPos is None:
        self.VehPos = rospy_message_converter.msg.ParPoint()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.hmi_index, _x.svc_index, _x.uss_index, _x.pt1.x, _x.pt1.y, _x.pt1.z, _x.pt2.x, _x.pt2.y, _x.pt2.z, _x.pt3.x, _x.pt3.y, _x.pt3.z, _x.pt4.x, _x.pt4.y, _x.pt4.z, _x.type, _x.source, _x.size_x, _x.size_y, _x.VehPos.x, _x.VehPos.y, _x.VehPos.z, _x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_3i12f2i6f3if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i12f2i6f3if().pack(_x.hmi_index, _x.svc_index, _x.uss_index, _x.pt1.x, _x.pt1.y, _x.pt1.z, _x.pt2.x, _x.pt2.y, _x.pt2.z, _x.pt3.x, _x.pt3.y, _x.pt3.z, _x.pt4.x, _x.pt4.y, _x.pt4.z, _x.type, _x.source, _x.size_x, _x.size_y, _x.VehPos.x, _x.VehPos.y, _x.VehPos.z, _x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.ParPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.ParPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.ParPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.ParPoint()
      if self.VehPos is None:
        self.VehPos = rospy_message_converter.msg.ParPoint()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.hmi_index, _x.svc_index, _x.uss_index, _x.pt1.x, _x.pt1.y, _x.pt1.z, _x.pt2.x, _x.pt2.y, _x.pt2.z, _x.pt3.x, _x.pt3.y, _x.pt3.z, _x.pt4.x, _x.pt4.y, _x.pt4.z, _x.type, _x.source, _x.size_x, _x.size_y, _x.VehPos.x, _x.VehPos.y, _x.VehPos.z, _x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_3i12f2i6f3if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i12f2i6f3if = None
def _get_struct_3i12f2i6f3if():
    global _struct_3i12f2i6f3if
    if _struct_3i12f2i6f3if is None:
        _struct_3i12f2i6f3if = struct.Struct("<3i12f2i6f3if")
    return _struct_3i12f2i6f3if

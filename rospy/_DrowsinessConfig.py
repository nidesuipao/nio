# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DrowsinessConfig.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DrowsinessConfig(genpy.Message):
  _md5sum = "ebd0ff44c200a0fffec135da169bace8"
  _type = "rospy_message_converter/DrowsinessConfig"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EyeConfig eye_config
MouthConfig mouth_config
Customized customized

================================================================================
MSG: rospy_message_converter/EyeConfig
float64 perclos_light
float64 perclos_medium
float64 perclos_window_time

================================================================================
MSG: rospy_message_converter/MouthConfig
int32 yawn_light
int32 yawn_medium
float64 yawn_windown_time

================================================================================
MSG: rospy_message_converter/Customized
float64 eye_close_thr
float64 eye_open_thr
"""
  __slots__ = ['eye_config','mouth_config','customized']
  _slot_types = ['rospy_message_converter/EyeConfig','rospy_message_converter/MouthConfig','rospy_message_converter/Customized']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eye_config,mouth_config,customized

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DrowsinessConfig, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.eye_config is None:
        self.eye_config = rospy_message_converter.msg.EyeConfig()
      if self.mouth_config is None:
        self.mouth_config = rospy_message_converter.msg.MouthConfig()
      if self.customized is None:
        self.customized = rospy_message_converter.msg.Customized()
    else:
      self.eye_config = rospy_message_converter.msg.EyeConfig()
      self.mouth_config = rospy_message_converter.msg.MouthConfig()
      self.customized = rospy_message_converter.msg.Customized()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2i3d().pack(_x.eye_config.perclos_light, _x.eye_config.perclos_medium, _x.eye_config.perclos_window_time, _x.mouth_config.yawn_light, _x.mouth_config.yawn_medium, _x.mouth_config.yawn_windown_time, _x.customized.eye_close_thr, _x.customized.eye_open_thr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.eye_config is None:
        self.eye_config = rospy_message_converter.msg.EyeConfig()
      if self.mouth_config is None:
        self.mouth_config = rospy_message_converter.msg.MouthConfig()
      if self.customized is None:
        self.customized = rospy_message_converter.msg.Customized()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.eye_config.perclos_light, _x.eye_config.perclos_medium, _x.eye_config.perclos_window_time, _x.mouth_config.yawn_light, _x.mouth_config.yawn_medium, _x.mouth_config.yawn_windown_time, _x.customized.eye_close_thr, _x.customized.eye_open_thr,) = _get_struct_3d2i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2i3d().pack(_x.eye_config.perclos_light, _x.eye_config.perclos_medium, _x.eye_config.perclos_window_time, _x.mouth_config.yawn_light, _x.mouth_config.yawn_medium, _x.mouth_config.yawn_windown_time, _x.customized.eye_close_thr, _x.customized.eye_open_thr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.eye_config is None:
        self.eye_config = rospy_message_converter.msg.EyeConfig()
      if self.mouth_config is None:
        self.mouth_config = rospy_message_converter.msg.MouthConfig()
      if self.customized is None:
        self.customized = rospy_message_converter.msg.Customized()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.eye_config.perclos_light, _x.eye_config.perclos_medium, _x.eye_config.perclos_window_time, _x.mouth_config.yawn_light, _x.mouth_config.yawn_medium, _x.mouth_config.yawn_windown_time, _x.customized.eye_close_thr, _x.customized.eye_open_thr,) = _get_struct_3d2i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2i3d = None
def _get_struct_3d2i3d():
    global _struct_3d2i3d
    if _struct_3d2i3d is None:
        _struct_3d2i3d = struct.Struct("<3d2i3d")
    return _struct_3d2i3d

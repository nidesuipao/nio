# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LdwOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LdwOut(genpy.Message):
  _md5sum = "e11bfb8a2464c8b16b03cc2a6d0ca916"
  _type = "rospy_message_converter/LdwOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 AdasLeLine
int32 AdasRiLine
int32 LaneAsstSts
int32 EPSReqTyp
int32 Snvty
int32 LaneAsstTyp
int32 HapticOnOffSts
"""
  __slots__ = ['AdasLeLine','AdasRiLine','LaneAsstSts','EPSReqTyp','Snvty','LaneAsstTyp','HapticOnOffSts']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AdasLeLine,AdasRiLine,LaneAsstSts,EPSReqTyp,Snvty,LaneAsstTyp,HapticOnOffSts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LdwOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AdasLeLine is None:
        self.AdasLeLine = 0
      if self.AdasRiLine is None:
        self.AdasRiLine = 0
      if self.LaneAsstSts is None:
        self.LaneAsstSts = 0
      if self.EPSReqTyp is None:
        self.EPSReqTyp = 0
      if self.Snvty is None:
        self.Snvty = 0
      if self.LaneAsstTyp is None:
        self.LaneAsstTyp = 0
      if self.HapticOnOffSts is None:
        self.HapticOnOffSts = 0
    else:
      self.AdasLeLine = 0
      self.AdasRiLine = 0
      self.LaneAsstSts = 0
      self.EPSReqTyp = 0
      self.Snvty = 0
      self.LaneAsstTyp = 0
      self.HapticOnOffSts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.AdasLeLine, _x.AdasRiLine, _x.LaneAsstSts, _x.EPSReqTyp, _x.Snvty, _x.LaneAsstTyp, _x.HapticOnOffSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.AdasLeLine, _x.AdasRiLine, _x.LaneAsstSts, _x.EPSReqTyp, _x.Snvty, _x.LaneAsstTyp, _x.HapticOnOffSts,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.AdasLeLine, _x.AdasRiLine, _x.LaneAsstSts, _x.EPSReqTyp, _x.Snvty, _x.LaneAsstTyp, _x.HapticOnOffSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.AdasLeLine, _x.AdasRiLine, _x.LaneAsstSts, _x.EPSReqTyp, _x.Snvty, _x.LaneAsstTyp, _x.HapticOnOffSts,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PSAP_DebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PSAP_DebugOut(genpy.Message):
  _md5sum = "19dc84ffa2755b1373891d8dd561f6eb"
  _type = "rospy_message_converter/PSAP_DebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool PSAP_is_psap_enabled
bool PSAP_is_slot_type_set
bool PSAP_is_right_slot
bool PSAP_is_in_valid_regions
bool PSAP_is_vehicle_status_ready
bool PSAP_is_psap_pose_init
int32 PSAP_coor_type
float32 PSAP_tf_gnd2plat_x
float32 PSAP_tf_gnd2plat_y
float32 PSAP_tf_gnd2plat_yaw
float32 PSAP_tf_plat2slot_x
float32 PSAP_tf_plat2slot_y
float32 PSAP_tf_plat2slot_yaw
float32 PSAP_tf_odom2gnd_x
float32 PSAP_tf_odom2gnd_y
float32 PSAP_tf_odom2gnd_yaw
"""
  __slots__ = ['PSAP_is_psap_enabled','PSAP_is_slot_type_set','PSAP_is_right_slot','PSAP_is_in_valid_regions','PSAP_is_vehicle_status_ready','PSAP_is_psap_pose_init','PSAP_coor_type','PSAP_tf_gnd2plat_x','PSAP_tf_gnd2plat_y','PSAP_tf_gnd2plat_yaw','PSAP_tf_plat2slot_x','PSAP_tf_plat2slot_y','PSAP_tf_plat2slot_yaw','PSAP_tf_odom2gnd_x','PSAP_tf_odom2gnd_y','PSAP_tf_odom2gnd_yaw']
  _slot_types = ['bool','bool','bool','bool','bool','bool','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PSAP_is_psap_enabled,PSAP_is_slot_type_set,PSAP_is_right_slot,PSAP_is_in_valid_regions,PSAP_is_vehicle_status_ready,PSAP_is_psap_pose_init,PSAP_coor_type,PSAP_tf_gnd2plat_x,PSAP_tf_gnd2plat_y,PSAP_tf_gnd2plat_yaw,PSAP_tf_plat2slot_x,PSAP_tf_plat2slot_y,PSAP_tf_plat2slot_yaw,PSAP_tf_odom2gnd_x,PSAP_tf_odom2gnd_y,PSAP_tf_odom2gnd_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PSAP_DebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.PSAP_is_psap_enabled is None:
        self.PSAP_is_psap_enabled = False
      if self.PSAP_is_slot_type_set is None:
        self.PSAP_is_slot_type_set = False
      if self.PSAP_is_right_slot is None:
        self.PSAP_is_right_slot = False
      if self.PSAP_is_in_valid_regions is None:
        self.PSAP_is_in_valid_regions = False
      if self.PSAP_is_vehicle_status_ready is None:
        self.PSAP_is_vehicle_status_ready = False
      if self.PSAP_is_psap_pose_init is None:
        self.PSAP_is_psap_pose_init = False
      if self.PSAP_coor_type is None:
        self.PSAP_coor_type = 0
      if self.PSAP_tf_gnd2plat_x is None:
        self.PSAP_tf_gnd2plat_x = 0.
      if self.PSAP_tf_gnd2plat_y is None:
        self.PSAP_tf_gnd2plat_y = 0.
      if self.PSAP_tf_gnd2plat_yaw is None:
        self.PSAP_tf_gnd2plat_yaw = 0.
      if self.PSAP_tf_plat2slot_x is None:
        self.PSAP_tf_plat2slot_x = 0.
      if self.PSAP_tf_plat2slot_y is None:
        self.PSAP_tf_plat2slot_y = 0.
      if self.PSAP_tf_plat2slot_yaw is None:
        self.PSAP_tf_plat2slot_yaw = 0.
      if self.PSAP_tf_odom2gnd_x is None:
        self.PSAP_tf_odom2gnd_x = 0.
      if self.PSAP_tf_odom2gnd_y is None:
        self.PSAP_tf_odom2gnd_y = 0.
      if self.PSAP_tf_odom2gnd_yaw is None:
        self.PSAP_tf_odom2gnd_yaw = 0.
    else:
      self.PSAP_is_psap_enabled = False
      self.PSAP_is_slot_type_set = False
      self.PSAP_is_right_slot = False
      self.PSAP_is_in_valid_regions = False
      self.PSAP_is_vehicle_status_ready = False
      self.PSAP_is_psap_pose_init = False
      self.PSAP_coor_type = 0
      self.PSAP_tf_gnd2plat_x = 0.
      self.PSAP_tf_gnd2plat_y = 0.
      self.PSAP_tf_gnd2plat_yaw = 0.
      self.PSAP_tf_plat2slot_x = 0.
      self.PSAP_tf_plat2slot_y = 0.
      self.PSAP_tf_plat2slot_yaw = 0.
      self.PSAP_tf_odom2gnd_x = 0.
      self.PSAP_tf_odom2gnd_y = 0.
      self.PSAP_tf_odom2gnd_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6Bi9f().pack(_x.PSAP_is_psap_enabled, _x.PSAP_is_slot_type_set, _x.PSAP_is_right_slot, _x.PSAP_is_in_valid_regions, _x.PSAP_is_vehicle_status_ready, _x.PSAP_is_psap_pose_init, _x.PSAP_coor_type, _x.PSAP_tf_gnd2plat_x, _x.PSAP_tf_gnd2plat_y, _x.PSAP_tf_gnd2plat_yaw, _x.PSAP_tf_plat2slot_x, _x.PSAP_tf_plat2slot_y, _x.PSAP_tf_plat2slot_yaw, _x.PSAP_tf_odom2gnd_x, _x.PSAP_tf_odom2gnd_y, _x.PSAP_tf_odom2gnd_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.PSAP_is_psap_enabled, _x.PSAP_is_slot_type_set, _x.PSAP_is_right_slot, _x.PSAP_is_in_valid_regions, _x.PSAP_is_vehicle_status_ready, _x.PSAP_is_psap_pose_init, _x.PSAP_coor_type, _x.PSAP_tf_gnd2plat_x, _x.PSAP_tf_gnd2plat_y, _x.PSAP_tf_gnd2plat_yaw, _x.PSAP_tf_plat2slot_x, _x.PSAP_tf_plat2slot_y, _x.PSAP_tf_plat2slot_yaw, _x.PSAP_tf_odom2gnd_x, _x.PSAP_tf_odom2gnd_y, _x.PSAP_tf_odom2gnd_yaw,) = _get_struct_6Bi9f().unpack(str[start:end])
      self.PSAP_is_psap_enabled = bool(self.PSAP_is_psap_enabled)
      self.PSAP_is_slot_type_set = bool(self.PSAP_is_slot_type_set)
      self.PSAP_is_right_slot = bool(self.PSAP_is_right_slot)
      self.PSAP_is_in_valid_regions = bool(self.PSAP_is_in_valid_regions)
      self.PSAP_is_vehicle_status_ready = bool(self.PSAP_is_vehicle_status_ready)
      self.PSAP_is_psap_pose_init = bool(self.PSAP_is_psap_pose_init)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6Bi9f().pack(_x.PSAP_is_psap_enabled, _x.PSAP_is_slot_type_set, _x.PSAP_is_right_slot, _x.PSAP_is_in_valid_regions, _x.PSAP_is_vehicle_status_ready, _x.PSAP_is_psap_pose_init, _x.PSAP_coor_type, _x.PSAP_tf_gnd2plat_x, _x.PSAP_tf_gnd2plat_y, _x.PSAP_tf_gnd2plat_yaw, _x.PSAP_tf_plat2slot_x, _x.PSAP_tf_plat2slot_y, _x.PSAP_tf_plat2slot_yaw, _x.PSAP_tf_odom2gnd_x, _x.PSAP_tf_odom2gnd_y, _x.PSAP_tf_odom2gnd_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.PSAP_is_psap_enabled, _x.PSAP_is_slot_type_set, _x.PSAP_is_right_slot, _x.PSAP_is_in_valid_regions, _x.PSAP_is_vehicle_status_ready, _x.PSAP_is_psap_pose_init, _x.PSAP_coor_type, _x.PSAP_tf_gnd2plat_x, _x.PSAP_tf_gnd2plat_y, _x.PSAP_tf_gnd2plat_yaw, _x.PSAP_tf_plat2slot_x, _x.PSAP_tf_plat2slot_y, _x.PSAP_tf_plat2slot_yaw, _x.PSAP_tf_odom2gnd_x, _x.PSAP_tf_odom2gnd_y, _x.PSAP_tf_odom2gnd_yaw,) = _get_struct_6Bi9f().unpack(str[start:end])
      self.PSAP_is_psap_enabled = bool(self.PSAP_is_psap_enabled)
      self.PSAP_is_slot_type_set = bool(self.PSAP_is_slot_type_set)
      self.PSAP_is_right_slot = bool(self.PSAP_is_right_slot)
      self.PSAP_is_in_valid_regions = bool(self.PSAP_is_in_valid_regions)
      self.PSAP_is_vehicle_status_ready = bool(self.PSAP_is_vehicle_status_ready)
      self.PSAP_is_psap_pose_init = bool(self.PSAP_is_psap_pose_init)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6Bi9f = None
def _get_struct_6Bi9f():
    global _struct_6Bi9f
    if _struct_6Bi9f is None:
        _struct_6Bi9f = struct.Struct("<6Bi9f")
    return _struct_6Bi9f

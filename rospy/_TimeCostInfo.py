# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TimeCostInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TimeCostInfo(genpy.Message):
  _md5sum = "bc8a50f93f8375625787cfbd127b055c"
  _type = "rospy_message_converter/TimeCostInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 fctsApp
float32 carInfoMap
float32 objInfoMap
float32 aebMain
float32 ctrlInfoMap
float32 aebPublish
float32 ebhp
float32 ooif
float32 obhc
float32 otha
float32 cren
float32 acdn
float32 tscd
float32 stme
float32 rqab
"""
  __slots__ = ['fctsApp','carInfoMap','objInfoMap','aebMain','ctrlInfoMap','aebPublish','ebhp','ooif','obhc','otha','cren','acdn','tscd','stme','rqab']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fctsApp,carInfoMap,objInfoMap,aebMain,ctrlInfoMap,aebPublish,ebhp,ooif,obhc,otha,cren,acdn,tscd,stme,rqab

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TimeCostInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fctsApp is None:
        self.fctsApp = 0.
      if self.carInfoMap is None:
        self.carInfoMap = 0.
      if self.objInfoMap is None:
        self.objInfoMap = 0.
      if self.aebMain is None:
        self.aebMain = 0.
      if self.ctrlInfoMap is None:
        self.ctrlInfoMap = 0.
      if self.aebPublish is None:
        self.aebPublish = 0.
      if self.ebhp is None:
        self.ebhp = 0.
      if self.ooif is None:
        self.ooif = 0.
      if self.obhc is None:
        self.obhc = 0.
      if self.otha is None:
        self.otha = 0.
      if self.cren is None:
        self.cren = 0.
      if self.acdn is None:
        self.acdn = 0.
      if self.tscd is None:
        self.tscd = 0.
      if self.stme is None:
        self.stme = 0.
      if self.rqab is None:
        self.rqab = 0.
    else:
      self.fctsApp = 0.
      self.carInfoMap = 0.
      self.objInfoMap = 0.
      self.aebMain = 0.
      self.ctrlInfoMap = 0.
      self.aebPublish = 0.
      self.ebhp = 0.
      self.ooif = 0.
      self.obhc = 0.
      self.otha = 0.
      self.cren = 0.
      self.acdn = 0.
      self.tscd = 0.
      self.stme = 0.
      self.rqab = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15f().pack(_x.fctsApp, _x.carInfoMap, _x.objInfoMap, _x.aebMain, _x.ctrlInfoMap, _x.aebPublish, _x.ebhp, _x.ooif, _x.obhc, _x.otha, _x.cren, _x.acdn, _x.tscd, _x.stme, _x.rqab))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.fctsApp, _x.carInfoMap, _x.objInfoMap, _x.aebMain, _x.ctrlInfoMap, _x.aebPublish, _x.ebhp, _x.ooif, _x.obhc, _x.otha, _x.cren, _x.acdn, _x.tscd, _x.stme, _x.rqab,) = _get_struct_15f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15f().pack(_x.fctsApp, _x.carInfoMap, _x.objInfoMap, _x.aebMain, _x.ctrlInfoMap, _x.aebPublish, _x.ebhp, _x.ooif, _x.obhc, _x.otha, _x.cren, _x.acdn, _x.tscd, _x.stme, _x.rqab))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.fctsApp, _x.carInfoMap, _x.objInfoMap, _x.aebMain, _x.ctrlInfoMap, _x.aebPublish, _x.ebhp, _x.ooif, _x.obhc, _x.otha, _x.cren, _x.acdn, _x.tscd, _x.stme, _x.rqab,) = _get_struct_15f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15f = None
def _get_struct_15f():
    global _struct_15f
    if _struct_15f is None:
        _struct_15f = struct.Struct("<15f")
    return _struct_15f

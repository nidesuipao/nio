# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HMIIconOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HMIIconOut(genpy.Message):
  _md5sum = "6e735b73bd205b95faf33e889a08cfdc"
  _type = "rospy_message_converter/HMIIconOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 ShowSetSWF
bool ShowSetDA_ALCS
uint32 ShowSetDA_SpdAssist
bool ShowSetDA_SetSpdCtrl
uint32 ShowSetDA_SteerAssist
bool ShowSetDA_CurveSpdAssist
uint32 ReRADfeatures_FactoryDft
uint32 LaneFeautres_FactoryDft
"""
  __slots__ = ['ShowSetSWF','ShowSetDA_ALCS','ShowSetDA_SpdAssist','ShowSetDA_SetSpdCtrl','ShowSetDA_SteerAssist','ShowSetDA_CurveSpdAssist','ReRADfeatures_FactoryDft','LaneFeautres_FactoryDft']
  _slot_types = ['uint32','bool','uint32','bool','uint32','bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ShowSetSWF,ShowSetDA_ALCS,ShowSetDA_SpdAssist,ShowSetDA_SetSpdCtrl,ShowSetDA_SteerAssist,ShowSetDA_CurveSpdAssist,ReRADfeatures_FactoryDft,LaneFeautres_FactoryDft

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HMIIconOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ShowSetSWF is None:
        self.ShowSetSWF = 0
      if self.ShowSetDA_ALCS is None:
        self.ShowSetDA_ALCS = False
      if self.ShowSetDA_SpdAssist is None:
        self.ShowSetDA_SpdAssist = 0
      if self.ShowSetDA_SetSpdCtrl is None:
        self.ShowSetDA_SetSpdCtrl = False
      if self.ShowSetDA_SteerAssist is None:
        self.ShowSetDA_SteerAssist = 0
      if self.ShowSetDA_CurveSpdAssist is None:
        self.ShowSetDA_CurveSpdAssist = False
      if self.ReRADfeatures_FactoryDft is None:
        self.ReRADfeatures_FactoryDft = 0
      if self.LaneFeautres_FactoryDft is None:
        self.LaneFeautres_FactoryDft = 0
    else:
      self.ShowSetSWF = 0
      self.ShowSetDA_ALCS = False
      self.ShowSetDA_SpdAssist = 0
      self.ShowSetDA_SetSpdCtrl = False
      self.ShowSetDA_SteerAssist = 0
      self.ShowSetDA_CurveSpdAssist = False
      self.ReRADfeatures_FactoryDft = 0
      self.LaneFeautres_FactoryDft = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IBIBIB2I().pack(_x.ShowSetSWF, _x.ShowSetDA_ALCS, _x.ShowSetDA_SpdAssist, _x.ShowSetDA_SetSpdCtrl, _x.ShowSetDA_SteerAssist, _x.ShowSetDA_CurveSpdAssist, _x.ReRADfeatures_FactoryDft, _x.LaneFeautres_FactoryDft))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.ShowSetSWF, _x.ShowSetDA_ALCS, _x.ShowSetDA_SpdAssist, _x.ShowSetDA_SetSpdCtrl, _x.ShowSetDA_SteerAssist, _x.ShowSetDA_CurveSpdAssist, _x.ReRADfeatures_FactoryDft, _x.LaneFeautres_FactoryDft,) = _get_struct_IBIBIB2I().unpack(str[start:end])
      self.ShowSetDA_ALCS = bool(self.ShowSetDA_ALCS)
      self.ShowSetDA_SetSpdCtrl = bool(self.ShowSetDA_SetSpdCtrl)
      self.ShowSetDA_CurveSpdAssist = bool(self.ShowSetDA_CurveSpdAssist)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IBIBIB2I().pack(_x.ShowSetSWF, _x.ShowSetDA_ALCS, _x.ShowSetDA_SpdAssist, _x.ShowSetDA_SetSpdCtrl, _x.ShowSetDA_SteerAssist, _x.ShowSetDA_CurveSpdAssist, _x.ReRADfeatures_FactoryDft, _x.LaneFeautres_FactoryDft))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.ShowSetSWF, _x.ShowSetDA_ALCS, _x.ShowSetDA_SpdAssist, _x.ShowSetDA_SetSpdCtrl, _x.ShowSetDA_SteerAssist, _x.ShowSetDA_CurveSpdAssist, _x.ReRADfeatures_FactoryDft, _x.LaneFeautres_FactoryDft,) = _get_struct_IBIBIB2I().unpack(str[start:end])
      self.ShowSetDA_ALCS = bool(self.ShowSetDA_ALCS)
      self.ShowSetDA_SetSpdCtrl = bool(self.ShowSetDA_SetSpdCtrl)
      self.ShowSetDA_CurveSpdAssist = bool(self.ShowSetDA_CurveSpdAssist)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IBIBIB2I = None
def _get_struct_IBIBIB2I():
    global _struct_IBIBIB2I
    if _struct_IBIBIB2I is None:
        _struct_IBIBIB2I = struct.Struct("<IBIBIB2I")
    return _struct_IBIBIB2I

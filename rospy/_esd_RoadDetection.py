# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_RoadDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class esd_RoadDetection(genpy.Message):
  _md5sum = "342452973d543b7fc105f50c2b93ca48"
  _type = "rospy_message_converter/esd_RoadDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 esd_timestamp
esd_LaneDetection esd_laneline
esd_RoadSlop esd_slop
esd_LaneLPP esd_lpp
esd_Roadedge[] esd_roadedge
esd_StopLine[] esd_stopline
esd_GuidePoint esd_guidepoint
esd_LaneSemantic[] esd_lanesemantic
string publisher_id
uint64 publish_ptp_ts
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/esd_LaneDetection
float32 esd_LD_Lane_Width
bool esd_LD_Crossing_Flag
esd_LaneLine[] esd_line

================================================================================
MSG: rospy_message_converter/esd_LaneLine
int32 esd_LD_Role
esd_LineProperty esd_LD_First_Line
bool esd_LD_Is_Multi_Clothoid
esd_LineProperty esd_LD_Second_Line
bool esd_LD_Special_Point_Is_Detected
int32 esd_LD_Special_Point_Type
esd_Point esd_LD_Special_Point
esd_Point[] esd_LD_Point
float32 esd_LD_Dash_Average_Gap
float32 esd_LD_Dash_Average_Length
bool esd_LD_Crossing
uint32 esd_LD_Crossing_ID
int32 esd_LD_Measuring_Status
int32 esd_LD_Prediction_Reason
uint32 esd_LD_Track_ID
uint32 esd_LD_Track_Age
int32 esd_LD_Quality
float32 esd_LD_Confidence
float32 esd_LD_Marker_Width

================================================================================
MSG: rospy_message_converter/esd_LineProperty
int32 esd_LD_Type
int32 esd_LD_Color
esd_PolyLine esd_LD_Line
float32 esd_LD_Start
float32 esd_LD_End
int32 esd_LD_End_Reason

================================================================================
MSG: rospy_message_converter/esd_PolyLine
float32 esd_line_C0
float32 esd_line_C1
float32 esd_line_C2
float32 esd_line_C3

================================================================================
MSG: rospy_message_converter/esd_Point
float32 esd_LD_Point_Lat
float32 esd_LD_Point_Long
float32 esd_LD_Point_Alti

================================================================================
MSG: rospy_message_converter/esd_RoadSlop
bool esd_LD_Road_Vertical_Surface_Available
float32 esd_LD_Road_Vertical_Surface_Start
float32 esd_LD_Road_Vertical_Surface_End
esd_PolyLine esd_LD_Road_Vertical_Surface

================================================================================
MSG: rospy_message_converter/esd_LaneLPP
bool esd_LPP_Available
int32 esd_LPP_Source
float32 esd_LPP_Ctrl_Point_Lat
float32 esd_LPP_Ctrl_Point_Long
float32 esd_LPP_Confidence
bool esd_LPP_First_Valid
float32 esd_LPP_First_VR_End
esd_PolyLine esd_LPP_First
bool esd_LPP_Second_Valid
float32 esd_LPP_Second_VR_End
esd_PolyLine esd_LPP_Second

================================================================================
MSG: rospy_message_converter/esd_Roadedge
int32 esd_LD_RE_Type
int32 esd_LD_RE_Side
int32 esd_LD_RE_From_Host_Index
uint32 esd_LD_RE_ID
uint32 esd_LD_RE_Age
float32 esd_LD_RE_Height
float32 esd_LD_RE_VR_Start
float32 esd_LD_RE_VR_End
esd_PolyLine esd_LD_RE_Line

================================================================================
MSG: rospy_message_converter/esd_StopLine
bool esd_SL_Zebra_Is_Detected
float32 esd_SL_Zebra_Lat_0
float32 esd_SL_Zebra_Long_0
float32 esd_SL_Zebra_Lat_1
float32 esd_SL_Zebra_Long_1
float32 esd_SL_Zebra_Lat_2
float32 esd_SL_Zebra_Long_2
float32 esd_SL_Zebra_Lat_3
float32 esd_SL_Zebra_Long_3
bool esd_SL_Is_Detected
uint32 esd_SL_ID
int32 esd_SL_Type
int32 esd_SL_Measure_Status
float32 esd_SL_Probability
float32 esd_SL_Long_Dist_L
float32 esd_SL_Long_Dist_R
float32 esd_SL_Lat_Dist_L
float32 esd_SL_Lat_Dist_R
int32 SL_Lane_Assessment

================================================================================
MSG: rospy_message_converter/esd_GuidePoint
bool esd_INTP_Is_Highway_Merge_Left
bool esd_INTP_Is_Highway_Merge_Right
bool esd_INTP_Is_Highway_Exit_Left
bool esd_INTP_Is_Highway_Exit_Right
esd_InterestPoint[] esd_INTP_Point

================================================================================
MSG: rospy_message_converter/esd_InterestPoint
int32 esd_INTP_Type
uint32 esd_INTP_ID
uint32 esd_INTP_Age
int32 esd_INTP_Line_Role
float32 esd_INTP_Long_Distance
float32 esd_INTP_Lat_Distance
float32 esd_INTP_Exist_Probability

================================================================================
MSG: rospy_message_converter/esd_LaneSemantic
int32 esd_SLD_Direction
uint32 esd_SLD_ID
uint32 esd_SLD_Count
float32 esd_SLD_Lat
float32 esd_SLD_Long
int32 esd_SLD_Orientation
float32 esd_SLD_Orientation_Probability
float32 esd_SLD_Direction_Probability
int32 esd_SLD_Role
int32 esd_SLD_Type
float32 esd_SLD_No_Park_Zone_Lat_0
float32 esd_SLD_No_Park_Zone_Long_0
float32 esd_SLD_No_Park_Zone_Lat_1
float32 esd_SLD_No_Park_Zone_Long_1
float32 esd_SLD_No_Park_Zone_Lat_2
float32 esd_SLD_No_Park_Zone_Long_2
float32 esd_SLD_No_Park_Zone_Lat_3
float32 esd_SLD_No_Park_Zone_Long_3
int32 esd_SLD_Road_Status
"""
  __slots__ = ['esd_timestamp','esd_laneline','esd_slop','esd_lpp','esd_roadedge','esd_stopline','esd_guidepoint','esd_lanesemantic','publisher_id','publish_ptp_ts','counter','publish_ts']
  _slot_types = ['uint64','rospy_message_converter/esd_LaneDetection','rospy_message_converter/esd_RoadSlop','rospy_message_converter/esd_LaneLPP','rospy_message_converter/esd_Roadedge[]','rospy_message_converter/esd_StopLine[]','rospy_message_converter/esd_GuidePoint','rospy_message_converter/esd_LaneSemantic[]','string','uint64','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_timestamp,esd_laneline,esd_slop,esd_lpp,esd_roadedge,esd_stopline,esd_guidepoint,esd_lanesemantic,publisher_id,publish_ptp_ts,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_RoadDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_timestamp is None:
        self.esd_timestamp = 0
      if self.esd_laneline is None:
        self.esd_laneline = rospy_message_converter.msg.esd_LaneDetection()
      if self.esd_slop is None:
        self.esd_slop = rospy_message_converter.msg.esd_RoadSlop()
      if self.esd_lpp is None:
        self.esd_lpp = rospy_message_converter.msg.esd_LaneLPP()
      if self.esd_roadedge is None:
        self.esd_roadedge = []
      if self.esd_stopline is None:
        self.esd_stopline = []
      if self.esd_guidepoint is None:
        self.esd_guidepoint = rospy_message_converter.msg.esd_GuidePoint()
      if self.esd_lanesemantic is None:
        self.esd_lanesemantic = []
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.esd_timestamp = 0
      self.esd_laneline = rospy_message_converter.msg.esd_LaneDetection()
      self.esd_slop = rospy_message_converter.msg.esd_RoadSlop()
      self.esd_lpp = rospy_message_converter.msg.esd_LaneLPP()
      self.esd_roadedge = []
      self.esd_stopline = []
      self.esd_guidepoint = rospy_message_converter.msg.esd_GuidePoint()
      self.esd_lanesemantic = []
      self.publisher_id = ''
      self.publish_ptp_ts = 0
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QfB().pack(_x.esd_timestamp, _x.esd_laneline.esd_LD_Lane_Width, _x.esd_laneline.esd_LD_Crossing_Flag))
      length = len(self.esd_laneline.esd_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_laneline.esd_line:
        _x = val1.esd_LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.esd_LD_First_Line
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.esd_LD_Type, _x.esd_LD_Color))
        _v2 = _v1.esd_LD_Line
        _x = _v2
        buff.write(_get_struct_4f().pack(_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3))
        _x = _v1
        buff.write(_get_struct_2fi().pack(_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason))
        _x = val1.esd_LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v3 = val1.esd_LD_Second_Line
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.esd_LD_Type, _x.esd_LD_Color))
        _v4 = _v3.esd_LD_Line
        _x = _v4
        buff.write(_get_struct_4f().pack(_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3))
        _x = _v3
        buff.write(_get_struct_2fi().pack(_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.esd_LD_Special_Point_Is_Detected, _x.esd_LD_Special_Point_Type))
        _v5 = val1.esd_LD_Special_Point
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti))
        length = len(val1.esd_LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.esd_LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.esd_LD_Dash_Average_Gap, _x.esd_LD_Dash_Average_Length, _x.esd_LD_Crossing, _x.esd_LD_Crossing_ID, _x.esd_LD_Measuring_Status, _x.esd_LD_Prediction_Reason, _x.esd_LD_Track_ID, _x.esd_LD_Track_Age, _x.esd_LD_Quality, _x.esd_LD_Confidence, _x.esd_LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.esd_slop.esd_LD_Road_Vertical_Surface_Available, _x.esd_slop.esd_LD_Road_Vertical_Surface_Start, _x.esd_slop.esd_LD_Road_Vertical_Surface_End, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C0, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C1, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C2, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C3, _x.esd_lpp.esd_LPP_Available, _x.esd_lpp.esd_LPP_Source, _x.esd_lpp.esd_LPP_Ctrl_Point_Lat, _x.esd_lpp.esd_LPP_Ctrl_Point_Long, _x.esd_lpp.esd_LPP_Confidence, _x.esd_lpp.esd_LPP_First_Valid, _x.esd_lpp.esd_LPP_First_VR_End, _x.esd_lpp.esd_LPP_First.esd_line_C0, _x.esd_lpp.esd_LPP_First.esd_line_C1, _x.esd_lpp.esd_LPP_First.esd_line_C2, _x.esd_lpp.esd_LPP_First.esd_line_C3, _x.esd_lpp.esd_LPP_Second_Valid, _x.esd_lpp.esd_LPP_Second_VR_End, _x.esd_lpp.esd_LPP_Second.esd_line_C0, _x.esd_lpp.esd_LPP_Second.esd_line_C1, _x.esd_lpp.esd_LPP_Second.esd_line_C2, _x.esd_lpp.esd_LPP_Second.esd_line_C3))
      length = len(self.esd_roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End))
        _v6 = val1.esd_LD_RE_Line
        _x = _v6
        buff.write(_get_struct_4f().pack(_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3))
      length = len(self.esd_stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.esd_SL_Zebra_Is_Detected, _x.esd_SL_Zebra_Lat_0, _x.esd_SL_Zebra_Long_0, _x.esd_SL_Zebra_Lat_1, _x.esd_SL_Zebra_Long_1, _x.esd_SL_Zebra_Lat_2, _x.esd_SL_Zebra_Long_2, _x.esd_SL_Zebra_Lat_3, _x.esd_SL_Zebra_Long_3, _x.esd_SL_Is_Detected, _x.esd_SL_ID, _x.esd_SL_Type, _x.esd_SL_Measure_Status, _x.esd_SL_Probability, _x.esd_SL_Long_Dist_L, _x.esd_SL_Long_Dist_R, _x.esd_SL_Lat_Dist_L, _x.esd_SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right))
      length = len(self.esd_guidepoint.esd_INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_guidepoint.esd_INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.esd_INTP_Type, _x.esd_INTP_ID, _x.esd_INTP_Age, _x.esd_INTP_Line_Role, _x.esd_INTP_Long_Distance, _x.esd_INTP_Lat_Distance, _x.esd_INTP_Exist_Probability))
      length = len(self.esd_lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.publish_ptp_ts, _x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_laneline is None:
        self.esd_laneline = rospy_message_converter.msg.esd_LaneDetection()
      if self.esd_slop is None:
        self.esd_slop = rospy_message_converter.msg.esd_RoadSlop()
      if self.esd_lpp is None:
        self.esd_lpp = rospy_message_converter.msg.esd_LaneLPP()
      if self.esd_roadedge is None:
        self.esd_roadedge = None
      if self.esd_stopline is None:
        self.esd_stopline = None
      if self.esd_guidepoint is None:
        self.esd_guidepoint = rospy_message_converter.msg.esd_GuidePoint()
      if self.esd_lanesemantic is None:
        self.esd_lanesemantic = None
      end = 0
      _x = self
      start = end
      end += 13
      (_x.esd_timestamp, _x.esd_laneline.esd_LD_Lane_Width, _x.esd_laneline.esd_LD_Crossing_Flag,) = _get_struct_QfB().unpack(str[start:end])
      self.esd_laneline.esd_LD_Crossing_Flag = bool(self.esd_laneline.esd_LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_laneline.esd_line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_LaneLine()
        start = end
        end += 4
        (val1.esd_LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.esd_LD_First_Line
        _x = _v7
        start = end
        end += 8
        (_x.esd_LD_Type, _x.esd_LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v8 = _v7.esd_LD_Line
        _x = _v8
        start = end
        end += 16
        (_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v7
        start = end
        end += 12
        (_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.esd_LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.esd_LD_Is_Multi_Clothoid = bool(val1.esd_LD_Is_Multi_Clothoid)
        _v9 = val1.esd_LD_Second_Line
        _x = _v9
        start = end
        end += 8
        (_x.esd_LD_Type, _x.esd_LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v10 = _v9.esd_LD_Line
        _x = _v10
        start = end
        end += 16
        (_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v9
        start = end
        end += 12
        (_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.esd_LD_Special_Point_Is_Detected, _x.esd_LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.esd_LD_Special_Point_Is_Detected = bool(val1.esd_LD_Special_Point_Is_Detected)
        _v11 = val1.esd_LD_Special_Point
        _x = _v11
        start = end
        end += 12
        (_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.esd_LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.esd_Point()
          _x = val2
          start = end
          end += 12
          (_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.esd_LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.esd_LD_Dash_Average_Gap, _x.esd_LD_Dash_Average_Length, _x.esd_LD_Crossing, _x.esd_LD_Crossing_ID, _x.esd_LD_Measuring_Status, _x.esd_LD_Prediction_Reason, _x.esd_LD_Track_ID, _x.esd_LD_Track_Age, _x.esd_LD_Quality, _x.esd_LD_Confidence, _x.esd_LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.esd_LD_Crossing = bool(val1.esd_LD_Crossing)
        self.esd_laneline.esd_line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.esd_slop.esd_LD_Road_Vertical_Surface_Available, _x.esd_slop.esd_LD_Road_Vertical_Surface_Start, _x.esd_slop.esd_LD_Road_Vertical_Surface_End, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C0, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C1, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C2, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C3, _x.esd_lpp.esd_LPP_Available, _x.esd_lpp.esd_LPP_Source, _x.esd_lpp.esd_LPP_Ctrl_Point_Lat, _x.esd_lpp.esd_LPP_Ctrl_Point_Long, _x.esd_lpp.esd_LPP_Confidence, _x.esd_lpp.esd_LPP_First_Valid, _x.esd_lpp.esd_LPP_First_VR_End, _x.esd_lpp.esd_LPP_First.esd_line_C0, _x.esd_lpp.esd_LPP_First.esd_line_C1, _x.esd_lpp.esd_LPP_First.esd_line_C2, _x.esd_lpp.esd_LPP_First.esd_line_C3, _x.esd_lpp.esd_LPP_Second_Valid, _x.esd_lpp.esd_LPP_Second_VR_End, _x.esd_lpp.esd_LPP_Second.esd_line_C0, _x.esd_lpp.esd_LPP_Second.esd_line_C1, _x.esd_lpp.esd_LPP_Second.esd_line_C2, _x.esd_lpp.esd_LPP_Second.esd_line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.esd_slop.esd_LD_Road_Vertical_Surface_Available = bool(self.esd_slop.esd_LD_Road_Vertical_Surface_Available)
      self.esd_lpp.esd_LPP_Available = bool(self.esd_lpp.esd_LPP_Available)
      self.esd_lpp.esd_LPP_First_Valid = bool(self.esd_lpp.esd_LPP_First_Valid)
      self.esd_lpp.esd_LPP_Second_Valid = bool(self.esd_lpp.esd_LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v12 = val1.esd_LD_RE_Line
        _x = _v12
        start = end
        end += 16
        (_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3,) = _get_struct_4f().unpack(str[start:end])
        self.esd_roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_StopLine()
        _x = val1
        start = end
        end += 70
        (_x.esd_SL_Zebra_Is_Detected, _x.esd_SL_Zebra_Lat_0, _x.esd_SL_Zebra_Long_0, _x.esd_SL_Zebra_Lat_1, _x.esd_SL_Zebra_Long_1, _x.esd_SL_Zebra_Lat_2, _x.esd_SL_Zebra_Long_2, _x.esd_SL_Zebra_Lat_3, _x.esd_SL_Zebra_Long_3, _x.esd_SL_Is_Detected, _x.esd_SL_ID, _x.esd_SL_Type, _x.esd_SL_Measure_Status, _x.esd_SL_Probability, _x.esd_SL_Long_Dist_L, _x.esd_SL_Long_Dist_R, _x.esd_SL_Lat_Dist_L, _x.esd_SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.esd_SL_Zebra_Is_Detected = bool(val1.esd_SL_Zebra_Is_Detected)
        val1.esd_SL_Is_Detected = bool(val1.esd_SL_Is_Detected)
        self.esd_stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left)
      self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right)
      self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left)
      self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_guidepoint.esd_INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.esd_INTP_Type, _x.esd_INTP_ID, _x.esd_INTP_Age, _x.esd_INTP_Line_Role, _x.esd_INTP_Long_Distance, _x.esd_INTP_Lat_Distance, _x.esd_INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.esd_guidepoint.esd_INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.esd_lanesemantic.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.publish_ptp_ts, _x.counter, _x.publish_ts,) = _get_struct_3Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QfB().pack(_x.esd_timestamp, _x.esd_laneline.esd_LD_Lane_Width, _x.esd_laneline.esd_LD_Crossing_Flag))
      length = len(self.esd_laneline.esd_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_laneline.esd_line:
        _x = val1.esd_LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v13 = val1.esd_LD_First_Line
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.esd_LD_Type, _x.esd_LD_Color))
        _v14 = _v13.esd_LD_Line
        _x = _v14
        buff.write(_get_struct_4f().pack(_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3))
        _x = _v13
        buff.write(_get_struct_2fi().pack(_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason))
        _x = val1.esd_LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v15 = val1.esd_LD_Second_Line
        _x = _v15
        buff.write(_get_struct_2i().pack(_x.esd_LD_Type, _x.esd_LD_Color))
        _v16 = _v15.esd_LD_Line
        _x = _v16
        buff.write(_get_struct_4f().pack(_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3))
        _x = _v15
        buff.write(_get_struct_2fi().pack(_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.esd_LD_Special_Point_Is_Detected, _x.esd_LD_Special_Point_Type))
        _v17 = val1.esd_LD_Special_Point
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti))
        length = len(val1.esd_LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.esd_LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.esd_LD_Dash_Average_Gap, _x.esd_LD_Dash_Average_Length, _x.esd_LD_Crossing, _x.esd_LD_Crossing_ID, _x.esd_LD_Measuring_Status, _x.esd_LD_Prediction_Reason, _x.esd_LD_Track_ID, _x.esd_LD_Track_Age, _x.esd_LD_Quality, _x.esd_LD_Confidence, _x.esd_LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.esd_slop.esd_LD_Road_Vertical_Surface_Available, _x.esd_slop.esd_LD_Road_Vertical_Surface_Start, _x.esd_slop.esd_LD_Road_Vertical_Surface_End, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C0, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C1, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C2, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C3, _x.esd_lpp.esd_LPP_Available, _x.esd_lpp.esd_LPP_Source, _x.esd_lpp.esd_LPP_Ctrl_Point_Lat, _x.esd_lpp.esd_LPP_Ctrl_Point_Long, _x.esd_lpp.esd_LPP_Confidence, _x.esd_lpp.esd_LPP_First_Valid, _x.esd_lpp.esd_LPP_First_VR_End, _x.esd_lpp.esd_LPP_First.esd_line_C0, _x.esd_lpp.esd_LPP_First.esd_line_C1, _x.esd_lpp.esd_LPP_First.esd_line_C2, _x.esd_lpp.esd_LPP_First.esd_line_C3, _x.esd_lpp.esd_LPP_Second_Valid, _x.esd_lpp.esd_LPP_Second_VR_End, _x.esd_lpp.esd_LPP_Second.esd_line_C0, _x.esd_lpp.esd_LPP_Second.esd_line_C1, _x.esd_lpp.esd_LPP_Second.esd_line_C2, _x.esd_lpp.esd_LPP_Second.esd_line_C3))
      length = len(self.esd_roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End))
        _v18 = val1.esd_LD_RE_Line
        _x = _v18
        buff.write(_get_struct_4f().pack(_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3))
      length = len(self.esd_stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.esd_SL_Zebra_Is_Detected, _x.esd_SL_Zebra_Lat_0, _x.esd_SL_Zebra_Long_0, _x.esd_SL_Zebra_Lat_1, _x.esd_SL_Zebra_Long_1, _x.esd_SL_Zebra_Lat_2, _x.esd_SL_Zebra_Long_2, _x.esd_SL_Zebra_Lat_3, _x.esd_SL_Zebra_Long_3, _x.esd_SL_Is_Detected, _x.esd_SL_ID, _x.esd_SL_Type, _x.esd_SL_Measure_Status, _x.esd_SL_Probability, _x.esd_SL_Long_Dist_L, _x.esd_SL_Long_Dist_R, _x.esd_SL_Lat_Dist_L, _x.esd_SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right))
      length = len(self.esd_guidepoint.esd_INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_guidepoint.esd_INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.esd_INTP_Type, _x.esd_INTP_ID, _x.esd_INTP_Age, _x.esd_INTP_Line_Role, _x.esd_INTP_Long_Distance, _x.esd_INTP_Lat_Distance, _x.esd_INTP_Exist_Probability))
      length = len(self.esd_lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.esd_lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.publish_ptp_ts, _x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_laneline is None:
        self.esd_laneline = rospy_message_converter.msg.esd_LaneDetection()
      if self.esd_slop is None:
        self.esd_slop = rospy_message_converter.msg.esd_RoadSlop()
      if self.esd_lpp is None:
        self.esd_lpp = rospy_message_converter.msg.esd_LaneLPP()
      if self.esd_roadedge is None:
        self.esd_roadedge = None
      if self.esd_stopline is None:
        self.esd_stopline = None
      if self.esd_guidepoint is None:
        self.esd_guidepoint = rospy_message_converter.msg.esd_GuidePoint()
      if self.esd_lanesemantic is None:
        self.esd_lanesemantic = None
      end = 0
      _x = self
      start = end
      end += 13
      (_x.esd_timestamp, _x.esd_laneline.esd_LD_Lane_Width, _x.esd_laneline.esd_LD_Crossing_Flag,) = _get_struct_QfB().unpack(str[start:end])
      self.esd_laneline.esd_LD_Crossing_Flag = bool(self.esd_laneline.esd_LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_laneline.esd_line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_LaneLine()
        start = end
        end += 4
        (val1.esd_LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v19 = val1.esd_LD_First_Line
        _x = _v19
        start = end
        end += 8
        (_x.esd_LD_Type, _x.esd_LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v20 = _v19.esd_LD_Line
        _x = _v20
        start = end
        end += 16
        (_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v19
        start = end
        end += 12
        (_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.esd_LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.esd_LD_Is_Multi_Clothoid = bool(val1.esd_LD_Is_Multi_Clothoid)
        _v21 = val1.esd_LD_Second_Line
        _x = _v21
        start = end
        end += 8
        (_x.esd_LD_Type, _x.esd_LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v22 = _v21.esd_LD_Line
        _x = _v22
        start = end
        end += 16
        (_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v21
        start = end
        end += 12
        (_x.esd_LD_Start, _x.esd_LD_End, _x.esd_LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.esd_LD_Special_Point_Is_Detected, _x.esd_LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.esd_LD_Special_Point_Is_Detected = bool(val1.esd_LD_Special_Point_Is_Detected)
        _v23 = val1.esd_LD_Special_Point
        _x = _v23
        start = end
        end += 12
        (_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.esd_LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.esd_Point()
          _x = val2
          start = end
          end += 12
          (_x.esd_LD_Point_Lat, _x.esd_LD_Point_Long, _x.esd_LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.esd_LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.esd_LD_Dash_Average_Gap, _x.esd_LD_Dash_Average_Length, _x.esd_LD_Crossing, _x.esd_LD_Crossing_ID, _x.esd_LD_Measuring_Status, _x.esd_LD_Prediction_Reason, _x.esd_LD_Track_ID, _x.esd_LD_Track_Age, _x.esd_LD_Quality, _x.esd_LD_Confidence, _x.esd_LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.esd_LD_Crossing = bool(val1.esd_LD_Crossing)
        self.esd_laneline.esd_line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.esd_slop.esd_LD_Road_Vertical_Surface_Available, _x.esd_slop.esd_LD_Road_Vertical_Surface_Start, _x.esd_slop.esd_LD_Road_Vertical_Surface_End, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C0, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C1, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C2, _x.esd_slop.esd_LD_Road_Vertical_Surface.esd_line_C3, _x.esd_lpp.esd_LPP_Available, _x.esd_lpp.esd_LPP_Source, _x.esd_lpp.esd_LPP_Ctrl_Point_Lat, _x.esd_lpp.esd_LPP_Ctrl_Point_Long, _x.esd_lpp.esd_LPP_Confidence, _x.esd_lpp.esd_LPP_First_Valid, _x.esd_lpp.esd_LPP_First_VR_End, _x.esd_lpp.esd_LPP_First.esd_line_C0, _x.esd_lpp.esd_LPP_First.esd_line_C1, _x.esd_lpp.esd_LPP_First.esd_line_C2, _x.esd_lpp.esd_LPP_First.esd_line_C3, _x.esd_lpp.esd_LPP_Second_Valid, _x.esd_lpp.esd_LPP_Second_VR_End, _x.esd_lpp.esd_LPP_Second.esd_line_C0, _x.esd_lpp.esd_LPP_Second.esd_line_C1, _x.esd_lpp.esd_LPP_Second.esd_line_C2, _x.esd_lpp.esd_LPP_Second.esd_line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.esd_slop.esd_LD_Road_Vertical_Surface_Available = bool(self.esd_slop.esd_LD_Road_Vertical_Surface_Available)
      self.esd_lpp.esd_LPP_Available = bool(self.esd_lpp.esd_LPP_Available)
      self.esd_lpp.esd_LPP_First_Valid = bool(self.esd_lpp.esd_LPP_First_Valid)
      self.esd_lpp.esd_LPP_Second_Valid = bool(self.esd_lpp.esd_LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v24 = val1.esd_LD_RE_Line
        _x = _v24
        start = end
        end += 16
        (_x.esd_line_C0, _x.esd_line_C1, _x.esd_line_C2, _x.esd_line_C3,) = _get_struct_4f().unpack(str[start:end])
        self.esd_roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_StopLine()
        _x = val1
        start = end
        end += 70
        (_x.esd_SL_Zebra_Is_Detected, _x.esd_SL_Zebra_Lat_0, _x.esd_SL_Zebra_Long_0, _x.esd_SL_Zebra_Lat_1, _x.esd_SL_Zebra_Long_1, _x.esd_SL_Zebra_Lat_2, _x.esd_SL_Zebra_Long_2, _x.esd_SL_Zebra_Lat_3, _x.esd_SL_Zebra_Long_3, _x.esd_SL_Is_Detected, _x.esd_SL_ID, _x.esd_SL_Type, _x.esd_SL_Measure_Status, _x.esd_SL_Probability, _x.esd_SL_Long_Dist_L, _x.esd_SL_Long_Dist_R, _x.esd_SL_Lat_Dist_L, _x.esd_SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.esd_SL_Zebra_Is_Detected = bool(val1.esd_SL_Zebra_Is_Detected)
        val1.esd_SL_Is_Detected = bool(val1.esd_SL_Is_Detected)
        self.esd_stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left, _x.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Left)
      self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Merge_Right)
      self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Left)
      self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right = bool(self.esd_guidepoint.esd_INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_guidepoint.esd_INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.esd_INTP_Type, _x.esd_INTP_ID, _x.esd_INTP_Age, _x.esd_INTP_Line_Role, _x.esd_INTP_Long_Distance, _x.esd_INTP_Lat_Distance, _x.esd_INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.esd_guidepoint.esd_INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.esd_lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.esd_LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.esd_lanesemantic.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.publish_ptp_ts, _x.counter, _x.publish_ts,) = _get_struct_3Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3Q = None
def _get_struct_3Q():
    global _struct_3Q
    if _struct_3Q is None:
        _struct_3Q = struct.Struct("<3Q")
    return _struct_3Q
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i2I3f = None
def _get_struct_3i2I3f():
    global _struct_3i2I3f
    if _struct_3i2I3f is None:
        _struct_3i2I3f = struct.Struct("<3i2I3f")
    return _struct_3i2I3f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B6fBi3fB5fB5f = None
def _get_struct_B6fBi3fB5fB5f():
    global _struct_B6fBi3fB5fB5f
    if _struct_B6fBi3fB5fB5f is None:
        _struct_B6fBi3fB5fB5f = struct.Struct("<B6fBi3fB5fB5f")
    return _struct_B6fBi3fB5fB5f
_struct_B8fBI2i5fi = None
def _get_struct_B8fBI2i5fi():
    global _struct_B8fBI2i5fi
    if _struct_B8fBI2i5fi is None:
        _struct_B8fBI2i5fi = struct.Struct("<B8fBI2i5fi")
    return _struct_B8fBI2i5fi
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_QfB = None
def _get_struct_QfB():
    global _struct_QfB
    if _struct_QfB is None:
        _struct_QfB = struct.Struct("<QfB")
    return _struct_QfB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2I2fi2f2i8fi = None
def _get_struct_i2I2fi2f2i8fi():
    global _struct_i2I2fi2f2i8fi
    if _struct_i2I2fi2f2i8fi is None:
        _struct_i2I2fi2f2i8fi = struct.Struct("<i2I2fi2f2i8fi")
    return _struct_i2I2fi2f2i8fi
_struct_i2Ii3f = None
def _get_struct_i2Ii3f():
    global _struct_i2Ii3f
    if _struct_i2Ii3f is None:
        _struct_i2Ii3f = struct.Struct("<i2Ii3f")
    return _struct_i2Ii3f

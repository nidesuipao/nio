# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParkingOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParkingOut(genpy.Message):
  _md5sum = "2c98e7eef038864daeda25022d574855"
  _type = "rospy_message_converter/ParkingOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LatCtrlIf eps_out
LngLwSpdCtrlIf vcu_out
BodyOut body_out
ParkStInfo parking_status_out
FunctionXstatus[] Function
ParkingEvent parking_event
uint32 acsf_a_sts_edr
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LatCtrlIf
int32 ACIReqVld
float32 ACIReqSAE
float32 ACISafLimAngDyn
uint32 ACISafLimAngRM
float32 ACISafLimAngDynOffs
uint32 ACISafLimRate
uint32 ACIRampRate
uint32 ACISafLimAngLM
uint32 ACISafLimMode
int32 CTIReqVal
float32 CTIReqSAE
int32 StrIFReq
uint32 HVIReq
int32 HVIReqVld
int32 ACITsuSup
int32 ACIOvrdThr

================================================================================
MSG: rospy_message_converter/LngLwSpdCtrlIf
int32 FctSeln
int32 CntrlModReq
int32 LLCSt
int32 TarGearReq
float32 TarSpdKph
float32 StopDst
int32 ShutdownModReq
int32 EPBReq
float32 VehDstToVSlot
float32 SlopeDstOffset
int32 VCU_ObjModTyp
float32 VCU_ObjModLonDst
float32 VCU_ObjModLatDst

================================================================================
MSG: rospy_message_converter/BodyOut
int32 TurnLightReq1
int32 horn_request
int32 door_unlock_request
int32 rear_view_mirror_request
int32 auxilary_lighting_request
int32 ad_drive_state
int32 wind_shield_wiper_req
int32 parking_platform_error
int32 parking_feature_error
int32 parking_feature_status
int32 parking_feature_type

================================================================================
MSG: rospy_message_converter/ParkStInfo
int32 PrkgTypSts
int32 SAPAOpMode
int32 SApaStatus
int32 APAReq
uint32 APASlotTrackID
int32 SVCReq
int32 SApaDrivingDir
int32[] SApaPscSlot
int32[] SApaPocSLot
int32 SApaInstruction
uint32 SApaStopDstDisp
int32 SVCEDRReq
uint32 SApaAbortReason
uint32 SAPATextInfo
int32 PSAPOutInstruction
int32 PSAPInstruction
int32 PsapTextInfo
int32 PSAPAbortReason
int32 PSAPHMIStatus
int32 PSAPDrivingDir
uint32 PSAPStopDstDisp
int32 PSAPOutHMIStatus
uint32 SApaProgress
int32 PrkgActvFeatureTyp

================================================================================
MSG: rospy_message_converter/FunctionXstatus
string FunctionName
int32 FunctionID
int32 FuncSts
int32 ReqFunctionID

================================================================================
MSG: rospy_message_converter/ParkingEvent
bool psap_event_trigger
bool sapa_event_trigger
uint32 pasp_event_type
uint32 sapa_event_type
uint32[] buffer
"""
  __slots__ = ['eps_out','vcu_out','body_out','parking_status_out','Function','parking_event','acsf_a_sts_edr','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/LatCtrlIf','rospy_message_converter/LngLwSpdCtrlIf','rospy_message_converter/BodyOut','rospy_message_converter/ParkStInfo','rospy_message_converter/FunctionXstatus[]','rospy_message_converter/ParkingEvent','uint32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eps_out,vcu_out,body_out,parking_status_out,Function,parking_event,acsf_a_sts_edr,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkingOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.eps_out is None:
        self.eps_out = rospy_message_converter.msg.LatCtrlIf()
      if self.vcu_out is None:
        self.vcu_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.body_out is None:
        self.body_out = rospy_message_converter.msg.BodyOut()
      if self.parking_status_out is None:
        self.parking_status_out = rospy_message_converter.msg.ParkStInfo()
      if self.Function is None:
        self.Function = []
      if self.parking_event is None:
        self.parking_event = rospy_message_converter.msg.ParkingEvent()
      if self.acsf_a_sts_edr is None:
        self.acsf_a_sts_edr = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.eps_out = rospy_message_converter.msg.LatCtrlIf()
      self.vcu_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      self.body_out = rospy_message_converter.msg.BodyOut()
      self.parking_status_out = rospy_message_converter.msg.ParkStInfo()
      self.Function = []
      self.parking_event = rospy_message_converter.msg.ParkingEvent()
      self.acsf_a_sts_edr = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2fIf4IifiI7i2f2i2fi2f15iI2i().pack(_x.eps_out.ACIReqVld, _x.eps_out.ACIReqSAE, _x.eps_out.ACISafLimAngDyn, _x.eps_out.ACISafLimAngRM, _x.eps_out.ACISafLimAngDynOffs, _x.eps_out.ACISafLimRate, _x.eps_out.ACIRampRate, _x.eps_out.ACISafLimAngLM, _x.eps_out.ACISafLimMode, _x.eps_out.CTIReqVal, _x.eps_out.CTIReqSAE, _x.eps_out.StrIFReq, _x.eps_out.HVIReq, _x.eps_out.HVIReqVld, _x.eps_out.ACITsuSup, _x.eps_out.ACIOvrdThr, _x.vcu_out.FctSeln, _x.vcu_out.CntrlModReq, _x.vcu_out.LLCSt, _x.vcu_out.TarGearReq, _x.vcu_out.TarSpdKph, _x.vcu_out.StopDst, _x.vcu_out.ShutdownModReq, _x.vcu_out.EPBReq, _x.vcu_out.VehDstToVSlot, _x.vcu_out.SlopeDstOffset, _x.vcu_out.VCU_ObjModTyp, _x.vcu_out.VCU_ObjModLonDst, _x.vcu_out.VCU_ObjModLatDst, _x.body_out.TurnLightReq1, _x.body_out.horn_request, _x.body_out.door_unlock_request, _x.body_out.rear_view_mirror_request, _x.body_out.auxilary_lighting_request, _x.body_out.ad_drive_state, _x.body_out.wind_shield_wiper_req, _x.body_out.parking_platform_error, _x.body_out.parking_feature_error, _x.body_out.parking_feature_status, _x.body_out.parking_feature_type, _x.parking_status_out.PrkgTypSts, _x.parking_status_out.SAPAOpMode, _x.parking_status_out.SApaStatus, _x.parking_status_out.APAReq, _x.parking_status_out.APASlotTrackID, _x.parking_status_out.SVCReq, _x.parking_status_out.SApaDrivingDir))
      length = len(self.parking_status_out.SApaPscSlot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.parking_status_out.SApaPscSlot))
      length = len(self.parking_status_out.SApaPocSLot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.parking_status_out.SApaPocSLot))
      _x = self
      buff.write(_get_struct_iIi2I6iIiIi().pack(_x.parking_status_out.SApaInstruction, _x.parking_status_out.SApaStopDstDisp, _x.parking_status_out.SVCEDRReq, _x.parking_status_out.SApaAbortReason, _x.parking_status_out.SAPATextInfo, _x.parking_status_out.PSAPOutInstruction, _x.parking_status_out.PSAPInstruction, _x.parking_status_out.PsapTextInfo, _x.parking_status_out.PSAPAbortReason, _x.parking_status_out.PSAPHMIStatus, _x.parking_status_out.PSAPDrivingDir, _x.parking_status_out.PSAPStopDstDisp, _x.parking_status_out.PSAPOutHMIStatus, _x.parking_status_out.SApaProgress, _x.parking_status_out.PrkgActvFeatureTyp))
      length = len(self.Function)
      buff.write(_struct_I.pack(length))
      for val1 in self.Function:
        _x = val1.FunctionName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.FunctionID, _x.FuncSts, _x.ReqFunctionID))
      _x = self
      buff.write(_get_struct_2B2I().pack(_x.parking_event.psap_event_trigger, _x.parking_event.sapa_event_trigger, _x.parking_event.pasp_event_type, _x.parking_event.sapa_event_type))
      length = len(self.parking_event.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.parking_event.buffer))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.acsf_a_sts_edr, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.eps_out is None:
        self.eps_out = rospy_message_converter.msg.LatCtrlIf()
      if self.vcu_out is None:
        self.vcu_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.body_out is None:
        self.body_out = rospy_message_converter.msg.BodyOut()
      if self.parking_status_out is None:
        self.parking_status_out = rospy_message_converter.msg.ParkStInfo()
      if self.Function is None:
        self.Function = None
      if self.parking_event is None:
        self.parking_event = rospy_message_converter.msg.ParkingEvent()
      end = 0
      _x = self
      start = end
      end += 188
      (_x.eps_out.ACIReqVld, _x.eps_out.ACIReqSAE, _x.eps_out.ACISafLimAngDyn, _x.eps_out.ACISafLimAngRM, _x.eps_out.ACISafLimAngDynOffs, _x.eps_out.ACISafLimRate, _x.eps_out.ACIRampRate, _x.eps_out.ACISafLimAngLM, _x.eps_out.ACISafLimMode, _x.eps_out.CTIReqVal, _x.eps_out.CTIReqSAE, _x.eps_out.StrIFReq, _x.eps_out.HVIReq, _x.eps_out.HVIReqVld, _x.eps_out.ACITsuSup, _x.eps_out.ACIOvrdThr, _x.vcu_out.FctSeln, _x.vcu_out.CntrlModReq, _x.vcu_out.LLCSt, _x.vcu_out.TarGearReq, _x.vcu_out.TarSpdKph, _x.vcu_out.StopDst, _x.vcu_out.ShutdownModReq, _x.vcu_out.EPBReq, _x.vcu_out.VehDstToVSlot, _x.vcu_out.SlopeDstOffset, _x.vcu_out.VCU_ObjModTyp, _x.vcu_out.VCU_ObjModLonDst, _x.vcu_out.VCU_ObjModLatDst, _x.body_out.TurnLightReq1, _x.body_out.horn_request, _x.body_out.door_unlock_request, _x.body_out.rear_view_mirror_request, _x.body_out.auxilary_lighting_request, _x.body_out.ad_drive_state, _x.body_out.wind_shield_wiper_req, _x.body_out.parking_platform_error, _x.body_out.parking_feature_error, _x.body_out.parking_feature_status, _x.body_out.parking_feature_type, _x.parking_status_out.PrkgTypSts, _x.parking_status_out.SAPAOpMode, _x.parking_status_out.SApaStatus, _x.parking_status_out.APAReq, _x.parking_status_out.APASlotTrackID, _x.parking_status_out.SVCReq, _x.parking_status_out.SApaDrivingDir,) = _get_struct_i2fIf4IifiI7i2f2i2fi2f15iI2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.parking_status_out.SApaPscSlot = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.parking_status_out.SApaPocSLot = s.unpack(str[start:end])
      _x = self
      start = end
      end += 60
      (_x.parking_status_out.SApaInstruction, _x.parking_status_out.SApaStopDstDisp, _x.parking_status_out.SVCEDRReq, _x.parking_status_out.SApaAbortReason, _x.parking_status_out.SAPATextInfo, _x.parking_status_out.PSAPOutInstruction, _x.parking_status_out.PSAPInstruction, _x.parking_status_out.PsapTextInfo, _x.parking_status_out.PSAPAbortReason, _x.parking_status_out.PSAPHMIStatus, _x.parking_status_out.PSAPDrivingDir, _x.parking_status_out.PSAPStopDstDisp, _x.parking_status_out.PSAPOutHMIStatus, _x.parking_status_out.SApaProgress, _x.parking_status_out.PrkgActvFeatureTyp,) = _get_struct_iIi2I6iIiIi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Function = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FunctionXstatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.FunctionName = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.FunctionName = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.FunctionID, _x.FuncSts, _x.ReqFunctionID,) = _get_struct_3i().unpack(str[start:end])
        self.Function.append(val1)
      _x = self
      start = end
      end += 10
      (_x.parking_event.psap_event_trigger, _x.parking_event.sapa_event_trigger, _x.parking_event.pasp_event_type, _x.parking_event.sapa_event_type,) = _get_struct_2B2I().unpack(str[start:end])
      self.parking_event.psap_event_trigger = bool(self.parking_event.psap_event_trigger)
      self.parking_event.sapa_event_trigger = bool(self.parking_event.sapa_event_trigger)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.parking_event.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.acsf_a_sts_edr, _x.publish_ptp_ts,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2fIf4IifiI7i2f2i2fi2f15iI2i().pack(_x.eps_out.ACIReqVld, _x.eps_out.ACIReqSAE, _x.eps_out.ACISafLimAngDyn, _x.eps_out.ACISafLimAngRM, _x.eps_out.ACISafLimAngDynOffs, _x.eps_out.ACISafLimRate, _x.eps_out.ACIRampRate, _x.eps_out.ACISafLimAngLM, _x.eps_out.ACISafLimMode, _x.eps_out.CTIReqVal, _x.eps_out.CTIReqSAE, _x.eps_out.StrIFReq, _x.eps_out.HVIReq, _x.eps_out.HVIReqVld, _x.eps_out.ACITsuSup, _x.eps_out.ACIOvrdThr, _x.vcu_out.FctSeln, _x.vcu_out.CntrlModReq, _x.vcu_out.LLCSt, _x.vcu_out.TarGearReq, _x.vcu_out.TarSpdKph, _x.vcu_out.StopDst, _x.vcu_out.ShutdownModReq, _x.vcu_out.EPBReq, _x.vcu_out.VehDstToVSlot, _x.vcu_out.SlopeDstOffset, _x.vcu_out.VCU_ObjModTyp, _x.vcu_out.VCU_ObjModLonDst, _x.vcu_out.VCU_ObjModLatDst, _x.body_out.TurnLightReq1, _x.body_out.horn_request, _x.body_out.door_unlock_request, _x.body_out.rear_view_mirror_request, _x.body_out.auxilary_lighting_request, _x.body_out.ad_drive_state, _x.body_out.wind_shield_wiper_req, _x.body_out.parking_platform_error, _x.body_out.parking_feature_error, _x.body_out.parking_feature_status, _x.body_out.parking_feature_type, _x.parking_status_out.PrkgTypSts, _x.parking_status_out.SAPAOpMode, _x.parking_status_out.SApaStatus, _x.parking_status_out.APAReq, _x.parking_status_out.APASlotTrackID, _x.parking_status_out.SVCReq, _x.parking_status_out.SApaDrivingDir))
      length = len(self.parking_status_out.SApaPscSlot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.parking_status_out.SApaPscSlot.tostring())
      length = len(self.parking_status_out.SApaPocSLot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.parking_status_out.SApaPocSLot.tostring())
      _x = self
      buff.write(_get_struct_iIi2I6iIiIi().pack(_x.parking_status_out.SApaInstruction, _x.parking_status_out.SApaStopDstDisp, _x.parking_status_out.SVCEDRReq, _x.parking_status_out.SApaAbortReason, _x.parking_status_out.SAPATextInfo, _x.parking_status_out.PSAPOutInstruction, _x.parking_status_out.PSAPInstruction, _x.parking_status_out.PsapTextInfo, _x.parking_status_out.PSAPAbortReason, _x.parking_status_out.PSAPHMIStatus, _x.parking_status_out.PSAPDrivingDir, _x.parking_status_out.PSAPStopDstDisp, _x.parking_status_out.PSAPOutHMIStatus, _x.parking_status_out.SApaProgress, _x.parking_status_out.PrkgActvFeatureTyp))
      length = len(self.Function)
      buff.write(_struct_I.pack(length))
      for val1 in self.Function:
        _x = val1.FunctionName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.FunctionID, _x.FuncSts, _x.ReqFunctionID))
      _x = self
      buff.write(_get_struct_2B2I().pack(_x.parking_event.psap_event_trigger, _x.parking_event.sapa_event_trigger, _x.parking_event.pasp_event_type, _x.parking_event.sapa_event_type))
      length = len(self.parking_event.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.parking_event.buffer.tostring())
      _x = self
      buff.write(_get_struct_IQ().pack(_x.acsf_a_sts_edr, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.eps_out is None:
        self.eps_out = rospy_message_converter.msg.LatCtrlIf()
      if self.vcu_out is None:
        self.vcu_out = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.body_out is None:
        self.body_out = rospy_message_converter.msg.BodyOut()
      if self.parking_status_out is None:
        self.parking_status_out = rospy_message_converter.msg.ParkStInfo()
      if self.Function is None:
        self.Function = None
      if self.parking_event is None:
        self.parking_event = rospy_message_converter.msg.ParkingEvent()
      end = 0
      _x = self
      start = end
      end += 188
      (_x.eps_out.ACIReqVld, _x.eps_out.ACIReqSAE, _x.eps_out.ACISafLimAngDyn, _x.eps_out.ACISafLimAngRM, _x.eps_out.ACISafLimAngDynOffs, _x.eps_out.ACISafLimRate, _x.eps_out.ACIRampRate, _x.eps_out.ACISafLimAngLM, _x.eps_out.ACISafLimMode, _x.eps_out.CTIReqVal, _x.eps_out.CTIReqSAE, _x.eps_out.StrIFReq, _x.eps_out.HVIReq, _x.eps_out.HVIReqVld, _x.eps_out.ACITsuSup, _x.eps_out.ACIOvrdThr, _x.vcu_out.FctSeln, _x.vcu_out.CntrlModReq, _x.vcu_out.LLCSt, _x.vcu_out.TarGearReq, _x.vcu_out.TarSpdKph, _x.vcu_out.StopDst, _x.vcu_out.ShutdownModReq, _x.vcu_out.EPBReq, _x.vcu_out.VehDstToVSlot, _x.vcu_out.SlopeDstOffset, _x.vcu_out.VCU_ObjModTyp, _x.vcu_out.VCU_ObjModLonDst, _x.vcu_out.VCU_ObjModLatDst, _x.body_out.TurnLightReq1, _x.body_out.horn_request, _x.body_out.door_unlock_request, _x.body_out.rear_view_mirror_request, _x.body_out.auxilary_lighting_request, _x.body_out.ad_drive_state, _x.body_out.wind_shield_wiper_req, _x.body_out.parking_platform_error, _x.body_out.parking_feature_error, _x.body_out.parking_feature_status, _x.body_out.parking_feature_type, _x.parking_status_out.PrkgTypSts, _x.parking_status_out.SAPAOpMode, _x.parking_status_out.SApaStatus, _x.parking_status_out.APAReq, _x.parking_status_out.APASlotTrackID, _x.parking_status_out.SVCReq, _x.parking_status_out.SApaDrivingDir,) = _get_struct_i2fIf4IifiI7i2f2i2fi2f15iI2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.parking_status_out.SApaPscSlot = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.parking_status_out.SApaPocSLot = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 60
      (_x.parking_status_out.SApaInstruction, _x.parking_status_out.SApaStopDstDisp, _x.parking_status_out.SVCEDRReq, _x.parking_status_out.SApaAbortReason, _x.parking_status_out.SAPATextInfo, _x.parking_status_out.PSAPOutInstruction, _x.parking_status_out.PSAPInstruction, _x.parking_status_out.PsapTextInfo, _x.parking_status_out.PSAPAbortReason, _x.parking_status_out.PSAPHMIStatus, _x.parking_status_out.PSAPDrivingDir, _x.parking_status_out.PSAPStopDstDisp, _x.parking_status_out.PSAPOutHMIStatus, _x.parking_status_out.SApaProgress, _x.parking_status_out.PrkgActvFeatureTyp,) = _get_struct_iIi2I6iIiIi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Function = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FunctionXstatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.FunctionName = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.FunctionName = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.FunctionID, _x.FuncSts, _x.ReqFunctionID,) = _get_struct_3i().unpack(str[start:end])
        self.Function.append(val1)
      _x = self
      start = end
      end += 10
      (_x.parking_event.psap_event_trigger, _x.parking_event.sapa_event_trigger, _x.parking_event.pasp_event_type, _x.parking_event.sapa_event_type,) = _get_struct_2B2I().unpack(str[start:end])
      self.parking_event.psap_event_trigger = bool(self.parking_event.psap_event_trigger)
      self.parking_event.sapa_event_trigger = bool(self.parking_event.sapa_event_trigger)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.parking_event.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.acsf_a_sts_edr, _x.publish_ptp_ts,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2I = None
def _get_struct_2B2I():
    global _struct_2B2I
    if _struct_2B2I is None:
        _struct_2B2I = struct.Struct("<2B2I")
    return _struct_2B2I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
_struct_i2fIf4IifiI7i2f2i2fi2f15iI2i = None
def _get_struct_i2fIf4IifiI7i2f2i2fi2f15iI2i():
    global _struct_i2fIf4IifiI7i2f2i2fi2f15iI2i
    if _struct_i2fIf4IifiI7i2f2i2fi2f15iI2i is None:
        _struct_i2fIf4IifiI7i2f2i2fi2f15iI2i = struct.Struct("<i2fIf4IifiI7i2f2i2fi2f15iI2i")
    return _struct_i2fIf4IifiI7i2f2i2fi2f15iI2i
_struct_iIi2I6iIiIi = None
def _get_struct_iIi2I6iIiIi():
    global _struct_iIi2I6iIiIi
    if _struct_iIi2I6iIiIi is None:
        _struct_iIi2I6iIiIi = struct.Struct("<iIi2I6iIiIi")
    return _struct_iIi2I6iIiIi

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DynamicObjects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DynamicObjects(genpy.Message):
  _md5sum = "edf940fd2a59a5cef8588ab06dee4105"
  _type = "rospy_message_converter/DynamicObjects"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ObjInfo OBJ_Info
DynamicObj[] OBJ

================================================================================
MSG: rospy_message_converter/ObjInfo
uint32 OBJ_Object_Count
uint32 OBJ_VRU_Count
uint32 OBJ_VD_Count
uint32 OBJ_CIPV_ID
bool OBJ_CIPV_Lost
bool OBJ_Is_CCI
int32 OBJ_CCI_Side
uint32 OBJ_CCI_ID

================================================================================
MSG: rospy_message_converter/DynamicObj
int32 OBJ_Object_Class
uint32 OBJ_Age_Frame
uint32 OBJ_Object_ID
int32 OBJ_Color
float32 OBJ_Existence_Probability
bool OBJ_Is_Very_Close
int32 OBJ_Lane_Assignment
uint32 OBJ_Measuring_Status
int32 OBJ_Motion_Status
int32 OBJ_Motion_Category
uint32 OBJ_Is_Blocked_Parts
float32 OBJ_Heading
float32 OBJ_Heading_STD
float32 OBJ_Angle_Rate
float32 OBJ_Angle_Rate_STD
int32 OBJ_Brake_Light
int32 OBJ_Turn_Indicator
int32 OBJ_HB_Status
float32 OBJ_Dst_Left_Line
float32 OBJ_Dst_Right_Line
bool OBJ_Is_Blocked_Left
bool OBJ_Is_Blocked_Right
Position OBJ_Distance
Velocity OBJ_Abs_Velocity
Acceleration OBJ_Abs_Acc
Dimension OBJ_Dimension
int32 source
uint32 OBJ_Relate_ID
int32 OBJ_Object_Door_Left_Status
int32 OBJ_Object_Door_Right_Status
float32 OBJ_Cut_In_Lat_Distance
float32 OBJ_Cut_In_Lat_Distance_STD
float32 OBJ_Cut_In_Long_Distance
float32 OBJ_Cut_In_Long_Distance_STD
float32 OBJ_Cut_In_Angle
float32 OBJ_Cut_In_Angle_STD
float32 OBJ_Age_Second
float32 OBJ_Missing_Age_Second

================================================================================
MSG: rospy_message_converter/Position
float32 Long_Position
float32 Long_Position_STD
float32 Lat_Position
float32 Lat_Position_STD
float32 Vertical_Position
float32 Vertical_Position_STD

================================================================================
MSG: rospy_message_converter/Velocity
float32 Long_Velocity
float32 Long_Velocity_STD
float32 Lat_Velocity
float32 Lat_Velocity_STD
float32 Up_Velocity
float32 Up_Velocity_STD

================================================================================
MSG: rospy_message_converter/Acceleration
float32 Long_Acc
float32 Long_Acc_STD
float32 Lat_Acc
float32 Lat_Acc_STD
float32 Up_Acc
float32 Up_Acc_STD

================================================================================
MSG: rospy_message_converter/Dimension
float32 OBJ_Length
float32 OBJ_Length_STD
float32 OBJ_Width
float32 OBJ_Width_STD
float32 OBJ_Height
float32 OBJ_Height_STD
"""
  __slots__ = ['OBJ_Info','OBJ']
  _slot_types = ['rospy_message_converter/ObjInfo','rospy_message_converter/DynamicObj[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       OBJ_Info,OBJ

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicObjects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.OBJ_Info is None:
        self.OBJ_Info = rospy_message_converter.msg.ObjInfo()
      if self.OBJ is None:
        self.OBJ = []
    else:
      self.OBJ_Info = rospy_message_converter.msg.ObjInfo()
      self.OBJ = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I2BiI().pack(_x.OBJ_Info.OBJ_Object_Count, _x.OBJ_Info.OBJ_VRU_Count, _x.OBJ_Info.OBJ_VD_Count, _x.OBJ_Info.OBJ_CIPV_ID, _x.OBJ_Info.OBJ_CIPV_Lost, _x.OBJ_Info.OBJ_Is_CCI, _x.OBJ_Info.OBJ_CCI_Side, _x.OBJ_Info.OBJ_CCI_ID))
      length = len(self.OBJ)
      buff.write(_struct_I.pack(length))
      for val1 in self.OBJ:
        _x = val1
        buff.write(_get_struct_i2IifBiI2iI4f3i2f2B().pack(_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right))
        _v1 = val1.OBJ_Distance
        _x = _v1
        buff.write(_get_struct_6f().pack(_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD))
        _v2 = val1.OBJ_Abs_Velocity
        _x = _v2
        buff.write(_get_struct_6f().pack(_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD))
        _v3 = val1.OBJ_Abs_Acc
        _x = _v3
        buff.write(_get_struct_6f().pack(_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD))
        _v4 = val1.OBJ_Dimension
        _x = _v4
        buff.write(_get_struct_6f().pack(_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD))
        _x = val1
        buff.write(_get_struct_iI2i8f().pack(_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.OBJ_Info is None:
        self.OBJ_Info = rospy_message_converter.msg.ObjInfo()
      if self.OBJ is None:
        self.OBJ = None
      end = 0
      _x = self
      start = end
      end += 26
      (_x.OBJ_Info.OBJ_Object_Count, _x.OBJ_Info.OBJ_VRU_Count, _x.OBJ_Info.OBJ_VD_Count, _x.OBJ_Info.OBJ_CIPV_ID, _x.OBJ_Info.OBJ_CIPV_Lost, _x.OBJ_Info.OBJ_Is_CCI, _x.OBJ_Info.OBJ_CCI_Side, _x.OBJ_Info.OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
      self.OBJ_Info.OBJ_CIPV_Lost = bool(self.OBJ_Info.OBJ_CIPV_Lost)
      self.OBJ_Info.OBJ_Is_CCI = bool(self.OBJ_Info.OBJ_Is_CCI)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.OBJ = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DynamicObj()
        _x = val1
        start = end
        end += 79
        (_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right,) = _get_struct_i2IifBiI2iI4f3i2f2B().unpack(str[start:end])
        val1.OBJ_Is_Very_Close = bool(val1.OBJ_Is_Very_Close)
        val1.OBJ_Is_Blocked_Left = bool(val1.OBJ_Is_Blocked_Left)
        val1.OBJ_Is_Blocked_Right = bool(val1.OBJ_Is_Blocked_Right)
        _v5 = val1.OBJ_Distance
        _x = _v5
        start = end
        end += 24
        (_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD,) = _get_struct_6f().unpack(str[start:end])
        _v6 = val1.OBJ_Abs_Velocity
        _x = _v6
        start = end
        end += 24
        (_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD,) = _get_struct_6f().unpack(str[start:end])
        _v7 = val1.OBJ_Abs_Acc
        _x = _v7
        start = end
        end += 24
        (_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD,) = _get_struct_6f().unpack(str[start:end])
        _v8 = val1.OBJ_Dimension
        _x = _v8
        start = end
        end += 24
        (_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD,) = _get_struct_6f().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second,) = _get_struct_iI2i8f().unpack(str[start:end])
        self.OBJ.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I2BiI().pack(_x.OBJ_Info.OBJ_Object_Count, _x.OBJ_Info.OBJ_VRU_Count, _x.OBJ_Info.OBJ_VD_Count, _x.OBJ_Info.OBJ_CIPV_ID, _x.OBJ_Info.OBJ_CIPV_Lost, _x.OBJ_Info.OBJ_Is_CCI, _x.OBJ_Info.OBJ_CCI_Side, _x.OBJ_Info.OBJ_CCI_ID))
      length = len(self.OBJ)
      buff.write(_struct_I.pack(length))
      for val1 in self.OBJ:
        _x = val1
        buff.write(_get_struct_i2IifBiI2iI4f3i2f2B().pack(_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right))
        _v9 = val1.OBJ_Distance
        _x = _v9
        buff.write(_get_struct_6f().pack(_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD))
        _v10 = val1.OBJ_Abs_Velocity
        _x = _v10
        buff.write(_get_struct_6f().pack(_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD))
        _v11 = val1.OBJ_Abs_Acc
        _x = _v11
        buff.write(_get_struct_6f().pack(_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD))
        _v12 = val1.OBJ_Dimension
        _x = _v12
        buff.write(_get_struct_6f().pack(_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD))
        _x = val1
        buff.write(_get_struct_iI2i8f().pack(_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.OBJ_Info is None:
        self.OBJ_Info = rospy_message_converter.msg.ObjInfo()
      if self.OBJ is None:
        self.OBJ = None
      end = 0
      _x = self
      start = end
      end += 26
      (_x.OBJ_Info.OBJ_Object_Count, _x.OBJ_Info.OBJ_VRU_Count, _x.OBJ_Info.OBJ_VD_Count, _x.OBJ_Info.OBJ_CIPV_ID, _x.OBJ_Info.OBJ_CIPV_Lost, _x.OBJ_Info.OBJ_Is_CCI, _x.OBJ_Info.OBJ_CCI_Side, _x.OBJ_Info.OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
      self.OBJ_Info.OBJ_CIPV_Lost = bool(self.OBJ_Info.OBJ_CIPV_Lost)
      self.OBJ_Info.OBJ_Is_CCI = bool(self.OBJ_Info.OBJ_Is_CCI)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.OBJ = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DynamicObj()
        _x = val1
        start = end
        end += 79
        (_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right,) = _get_struct_i2IifBiI2iI4f3i2f2B().unpack(str[start:end])
        val1.OBJ_Is_Very_Close = bool(val1.OBJ_Is_Very_Close)
        val1.OBJ_Is_Blocked_Left = bool(val1.OBJ_Is_Blocked_Left)
        val1.OBJ_Is_Blocked_Right = bool(val1.OBJ_Is_Blocked_Right)
        _v13 = val1.OBJ_Distance
        _x = _v13
        start = end
        end += 24
        (_x.Long_Position, _x.Long_Position_STD, _x.Lat_Position, _x.Lat_Position_STD, _x.Vertical_Position, _x.Vertical_Position_STD,) = _get_struct_6f().unpack(str[start:end])
        _v14 = val1.OBJ_Abs_Velocity
        _x = _v14
        start = end
        end += 24
        (_x.Long_Velocity, _x.Long_Velocity_STD, _x.Lat_Velocity, _x.Lat_Velocity_STD, _x.Up_Velocity, _x.Up_Velocity_STD,) = _get_struct_6f().unpack(str[start:end])
        _v15 = val1.OBJ_Abs_Acc
        _x = _v15
        start = end
        end += 24
        (_x.Long_Acc, _x.Long_Acc_STD, _x.Lat_Acc, _x.Lat_Acc_STD, _x.Up_Acc, _x.Up_Acc_STD,) = _get_struct_6f().unpack(str[start:end])
        _v16 = val1.OBJ_Dimension
        _x = _v16
        start = end
        end += 24
        (_x.OBJ_Length, _x.OBJ_Length_STD, _x.OBJ_Width, _x.OBJ_Width_STD, _x.OBJ_Height, _x.OBJ_Height_STD,) = _get_struct_6f().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second,) = _get_struct_iI2i8f().unpack(str[start:end])
        self.OBJ.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4I2BiI = None
def _get_struct_4I2BiI():
    global _struct_4I2BiI
    if _struct_4I2BiI is None:
        _struct_4I2BiI = struct.Struct("<4I2BiI")
    return _struct_4I2BiI
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_i2IifBiI2iI4f3i2f2B = None
def _get_struct_i2IifBiI2iI4f3i2f2B():
    global _struct_i2IifBiI2iI4f3i2f2B
    if _struct_i2IifBiI2iI4f3i2f2B is None:
        _struct_i2IifBiI2iI4f3i2f2B = struct.Struct("<i2IifBiI2iI4f3i2f2B")
    return _struct_i2IifBiI2iI4f3i2f2B
_struct_iI2i8f = None
def _get_struct_iI2i8f():
    global _struct_iI2i8f
    if _struct_iI2i8f is None:
        _struct_iI2i8f = struct.Struct("<iI2i8f")
    return _struct_iI2i8f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/APAFeatureFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class APAFeatureFimInfo(genpy.Message):
  _md5sum = "a390afc45a5f8bbd4dbc22bdef0678cc"
  _type = "rospy_message_converter/APAFeatureFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool FIM_ADAS_APA_UpaSysSts_F_Invalid
bool FIM_ADAS_APA_UpaSysSts_R_Invalid
bool FIM_ADAS_APA_FrntSnsrFltSt_Invalid
bool FIM_ADAS_APA_ReSnsrFltSt_Invalid
bool FIM_ADAS_APA_UpaSysDrv_Service
bool FIM_ADAS_APA_UpaSysDi_SystemDisabled
bool FIM_ADAS_APA_ApaSts_Failure
bool FIM_ADAS_APA_MapObjSts_invalid
bool FIM_ADAS_APA_SDWSts_invalid
"""
  __slots__ = ['FIM_ADAS_APA_UpaSysSts_F_Invalid','FIM_ADAS_APA_UpaSysSts_R_Invalid','FIM_ADAS_APA_FrntSnsrFltSt_Invalid','FIM_ADAS_APA_ReSnsrFltSt_Invalid','FIM_ADAS_APA_UpaSysDrv_Service','FIM_ADAS_APA_UpaSysDi_SystemDisabled','FIM_ADAS_APA_ApaSts_Failure','FIM_ADAS_APA_MapObjSts_invalid','FIM_ADAS_APA_SDWSts_invalid']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FIM_ADAS_APA_UpaSysSts_F_Invalid,FIM_ADAS_APA_UpaSysSts_R_Invalid,FIM_ADAS_APA_FrntSnsrFltSt_Invalid,FIM_ADAS_APA_ReSnsrFltSt_Invalid,FIM_ADAS_APA_UpaSysDrv_Service,FIM_ADAS_APA_UpaSysDi_SystemDisabled,FIM_ADAS_APA_ApaSts_Failure,FIM_ADAS_APA_MapObjSts_invalid,FIM_ADAS_APA_SDWSts_invalid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(APAFeatureFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FIM_ADAS_APA_UpaSysSts_F_Invalid is None:
        self.FIM_ADAS_APA_UpaSysSts_F_Invalid = False
      if self.FIM_ADAS_APA_UpaSysSts_R_Invalid is None:
        self.FIM_ADAS_APA_UpaSysSts_R_Invalid = False
      if self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid is None:
        self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid = False
      if self.FIM_ADAS_APA_ReSnsrFltSt_Invalid is None:
        self.FIM_ADAS_APA_ReSnsrFltSt_Invalid = False
      if self.FIM_ADAS_APA_UpaSysDrv_Service is None:
        self.FIM_ADAS_APA_UpaSysDrv_Service = False
      if self.FIM_ADAS_APA_UpaSysDi_SystemDisabled is None:
        self.FIM_ADAS_APA_UpaSysDi_SystemDisabled = False
      if self.FIM_ADAS_APA_ApaSts_Failure is None:
        self.FIM_ADAS_APA_ApaSts_Failure = False
      if self.FIM_ADAS_APA_MapObjSts_invalid is None:
        self.FIM_ADAS_APA_MapObjSts_invalid = False
      if self.FIM_ADAS_APA_SDWSts_invalid is None:
        self.FIM_ADAS_APA_SDWSts_invalid = False
    else:
      self.FIM_ADAS_APA_UpaSysSts_F_Invalid = False
      self.FIM_ADAS_APA_UpaSysSts_R_Invalid = False
      self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid = False
      self.FIM_ADAS_APA_ReSnsrFltSt_Invalid = False
      self.FIM_ADAS_APA_UpaSysDrv_Service = False
      self.FIM_ADAS_APA_UpaSysDi_SystemDisabled = False
      self.FIM_ADAS_APA_ApaSts_Failure = False
      self.FIM_ADAS_APA_MapObjSts_invalid = False
      self.FIM_ADAS_APA_SDWSts_invalid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.FIM_ADAS_APA_UpaSysSts_F_Invalid, _x.FIM_ADAS_APA_UpaSysSts_R_Invalid, _x.FIM_ADAS_APA_FrntSnsrFltSt_Invalid, _x.FIM_ADAS_APA_ReSnsrFltSt_Invalid, _x.FIM_ADAS_APA_UpaSysDrv_Service, _x.FIM_ADAS_APA_UpaSysDi_SystemDisabled, _x.FIM_ADAS_APA_ApaSts_Failure, _x.FIM_ADAS_APA_MapObjSts_invalid, _x.FIM_ADAS_APA_SDWSts_invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.FIM_ADAS_APA_UpaSysSts_F_Invalid, _x.FIM_ADAS_APA_UpaSysSts_R_Invalid, _x.FIM_ADAS_APA_FrntSnsrFltSt_Invalid, _x.FIM_ADAS_APA_ReSnsrFltSt_Invalid, _x.FIM_ADAS_APA_UpaSysDrv_Service, _x.FIM_ADAS_APA_UpaSysDi_SystemDisabled, _x.FIM_ADAS_APA_ApaSts_Failure, _x.FIM_ADAS_APA_MapObjSts_invalid, _x.FIM_ADAS_APA_SDWSts_invalid,) = _get_struct_9B().unpack(str[start:end])
      self.FIM_ADAS_APA_UpaSysSts_F_Invalid = bool(self.FIM_ADAS_APA_UpaSysSts_F_Invalid)
      self.FIM_ADAS_APA_UpaSysSts_R_Invalid = bool(self.FIM_ADAS_APA_UpaSysSts_R_Invalid)
      self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid = bool(self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid)
      self.FIM_ADAS_APA_ReSnsrFltSt_Invalid = bool(self.FIM_ADAS_APA_ReSnsrFltSt_Invalid)
      self.FIM_ADAS_APA_UpaSysDrv_Service = bool(self.FIM_ADAS_APA_UpaSysDrv_Service)
      self.FIM_ADAS_APA_UpaSysDi_SystemDisabled = bool(self.FIM_ADAS_APA_UpaSysDi_SystemDisabled)
      self.FIM_ADAS_APA_ApaSts_Failure = bool(self.FIM_ADAS_APA_ApaSts_Failure)
      self.FIM_ADAS_APA_MapObjSts_invalid = bool(self.FIM_ADAS_APA_MapObjSts_invalid)
      self.FIM_ADAS_APA_SDWSts_invalid = bool(self.FIM_ADAS_APA_SDWSts_invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.FIM_ADAS_APA_UpaSysSts_F_Invalid, _x.FIM_ADAS_APA_UpaSysSts_R_Invalid, _x.FIM_ADAS_APA_FrntSnsrFltSt_Invalid, _x.FIM_ADAS_APA_ReSnsrFltSt_Invalid, _x.FIM_ADAS_APA_UpaSysDrv_Service, _x.FIM_ADAS_APA_UpaSysDi_SystemDisabled, _x.FIM_ADAS_APA_ApaSts_Failure, _x.FIM_ADAS_APA_MapObjSts_invalid, _x.FIM_ADAS_APA_SDWSts_invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.FIM_ADAS_APA_UpaSysSts_F_Invalid, _x.FIM_ADAS_APA_UpaSysSts_R_Invalid, _x.FIM_ADAS_APA_FrntSnsrFltSt_Invalid, _x.FIM_ADAS_APA_ReSnsrFltSt_Invalid, _x.FIM_ADAS_APA_UpaSysDrv_Service, _x.FIM_ADAS_APA_UpaSysDi_SystemDisabled, _x.FIM_ADAS_APA_ApaSts_Failure, _x.FIM_ADAS_APA_MapObjSts_invalid, _x.FIM_ADAS_APA_SDWSts_invalid,) = _get_struct_9B().unpack(str[start:end])
      self.FIM_ADAS_APA_UpaSysSts_F_Invalid = bool(self.FIM_ADAS_APA_UpaSysSts_F_Invalid)
      self.FIM_ADAS_APA_UpaSysSts_R_Invalid = bool(self.FIM_ADAS_APA_UpaSysSts_R_Invalid)
      self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid = bool(self.FIM_ADAS_APA_FrntSnsrFltSt_Invalid)
      self.FIM_ADAS_APA_ReSnsrFltSt_Invalid = bool(self.FIM_ADAS_APA_ReSnsrFltSt_Invalid)
      self.FIM_ADAS_APA_UpaSysDrv_Service = bool(self.FIM_ADAS_APA_UpaSysDrv_Service)
      self.FIM_ADAS_APA_UpaSysDi_SystemDisabled = bool(self.FIM_ADAS_APA_UpaSysDi_SystemDisabled)
      self.FIM_ADAS_APA_ApaSts_Failure = bool(self.FIM_ADAS_APA_ApaSts_Failure)
      self.FIM_ADAS_APA_MapObjSts_invalid = bool(self.FIM_ADAS_APA_MapObjSts_invalid)
      self.FIM_ADAS_APA_SDWSts_invalid = bool(self.FIM_ADAS_APA_SDWSts_invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B

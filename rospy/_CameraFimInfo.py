# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CameraFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class CameraFimInfo(genpy.Message):
  _md5sum = "268d85aaf441d44dfc02d87989e00c05"
  _type = "rospy_message_converter/CameraFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """OMSAdcFimInfo oms_adc_fim_info
DMSAdcFimInfo dms_adc_fim_info
SideFLAdcFimInfo sidefl_adc_fim_info
SideFRAdcFimInfo sidefr_adc_fim_info
SideRLAdcFimInfo siderl_adc_fim_info
SideRRAdcFimInfo siderr_adc_fim_info
FWAdcFimInfo fw_adc_fim_info
FNAdcFimInfo fn_adc_fim_info
RNAdcFimInfo rn_adc_fim_info
SVCFrontAdcFimInfo svcfront_adc_fim_info
SVCLeftAdcFimInfo svcleft_adc_fim_info
SVCRearAdcFimInfo svcrear_adc_fim_info
SVCRightAdcFimInfo svcright_adc_fim_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/OMSAdcFimInfo
bool FIM_OMSPhysicalLinkage_Error

================================================================================
MSG: rospy_message_converter/DMSAdcFimInfo
bool FIM_DMSPhysicalLinkage_Error
bool FIM_DMS_License_NotAvailable
bool FIM_DMS_Function_NotAvailable
bool FIM_DMS_Camera_Occluded
bool FIM_DMS_No_Image_Recv

================================================================================
MSG: rospy_message_converter/SideFLAdcFimInfo
bool FIM_SideFLPhysicalLinkage_Error
bool FIM_FL_Camera_Failsafe_3
bool FIM_FL_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SideFRAdcFimInfo
bool FIM_SideFRPhysicalLinkage_Error
bool FIM_FR_Camera_Failsafe_3
bool FIM_FR_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SideRLAdcFimInfo
bool FIM_SideRLPhysicalLinkage_Error
bool FIM_RL_Camera_Failsafe_3
bool FIM_RL_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SideRRAdcFimInfo
bool FIM_SideRRPhysicalLinkage_Error
bool FIM_RR_Camera_Failsafe_3
bool FIM_RR_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/FWAdcFimInfo
bool FIM_FWPhysicalLinkage_Error
bool FIM_FW_Camera_Failsafe_3
bool FIM_FW_Camera_Cal_Error
bool FIM_Windshield_Cal_Error

================================================================================
MSG: rospy_message_converter/FNAdcFimInfo
bool FIM_FNPhysicalLinkage_Error
bool FIM_FN_Camera_Failsafe_3
bool FIM_FN_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/RNAdcFimInfo
bool FIM_RNPhysicalLinkage_Error
bool FIM_RN_Camera_Failsafe_3
bool FIM_RN_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SVCFrontAdcFimInfo
bool FIM_SVCFrontPhysicalLinkage_Error
bool FIM_SVCFront_Camera_Failsafe_3
bool FIM_SVCFront_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SVCLeftAdcFimInfo
bool FIM_SVCLeftPhysicalLinkage_Error
bool FIM_SVCLeft_Camera_Failsafe_3
bool FIM_SVCLeft_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SVCRearAdcFimInfo
bool FIM_SVCRearPhysicalLinkage_Error
bool FIM_SVCRear_Camera_Failsafe_3
bool FIM_SVCRear_Camera_Cal_Error

================================================================================
MSG: rospy_message_converter/SVCRightAdcFimInfo
bool FIM_SVCRightPhysicalLinkage_Error
bool FIM_SVCRight_Camera_Failsafe_3
bool FIM_SVCRight_Camera_Cal_Error
"""
  __slots__ = ['oms_adc_fim_info','dms_adc_fim_info','sidefl_adc_fim_info','sidefr_adc_fim_info','siderl_adc_fim_info','siderr_adc_fim_info','fw_adc_fim_info','fn_adc_fim_info','rn_adc_fim_info','svcfront_adc_fim_info','svcleft_adc_fim_info','svcrear_adc_fim_info','svcright_adc_fim_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/OMSAdcFimInfo','rospy_message_converter/DMSAdcFimInfo','rospy_message_converter/SideFLAdcFimInfo','rospy_message_converter/SideFRAdcFimInfo','rospy_message_converter/SideRLAdcFimInfo','rospy_message_converter/SideRRAdcFimInfo','rospy_message_converter/FWAdcFimInfo','rospy_message_converter/FNAdcFimInfo','rospy_message_converter/RNAdcFimInfo','rospy_message_converter/SVCFrontAdcFimInfo','rospy_message_converter/SVCLeftAdcFimInfo','rospy_message_converter/SVCRearAdcFimInfo','rospy_message_converter/SVCRightAdcFimInfo','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       oms_adc_fim_info,dms_adc_fim_info,sidefl_adc_fim_info,sidefr_adc_fim_info,siderl_adc_fim_info,siderr_adc_fim_info,fw_adc_fim_info,fn_adc_fim_info,rn_adc_fim_info,svcfront_adc_fim_info,svcleft_adc_fim_info,svcrear_adc_fim_info,svcright_adc_fim_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.oms_adc_fim_info is None:
        self.oms_adc_fim_info = rospy_message_converter.msg.OMSAdcFimInfo()
      if self.dms_adc_fim_info is None:
        self.dms_adc_fim_info = rospy_message_converter.msg.DMSAdcFimInfo()
      if self.sidefl_adc_fim_info is None:
        self.sidefl_adc_fim_info = rospy_message_converter.msg.SideFLAdcFimInfo()
      if self.sidefr_adc_fim_info is None:
        self.sidefr_adc_fim_info = rospy_message_converter.msg.SideFRAdcFimInfo()
      if self.siderl_adc_fim_info is None:
        self.siderl_adc_fim_info = rospy_message_converter.msg.SideRLAdcFimInfo()
      if self.siderr_adc_fim_info is None:
        self.siderr_adc_fim_info = rospy_message_converter.msg.SideRRAdcFimInfo()
      if self.fw_adc_fim_info is None:
        self.fw_adc_fim_info = rospy_message_converter.msg.FWAdcFimInfo()
      if self.fn_adc_fim_info is None:
        self.fn_adc_fim_info = rospy_message_converter.msg.FNAdcFimInfo()
      if self.rn_adc_fim_info is None:
        self.rn_adc_fim_info = rospy_message_converter.msg.RNAdcFimInfo()
      if self.svcfront_adc_fim_info is None:
        self.svcfront_adc_fim_info = rospy_message_converter.msg.SVCFrontAdcFimInfo()
      if self.svcleft_adc_fim_info is None:
        self.svcleft_adc_fim_info = rospy_message_converter.msg.SVCLeftAdcFimInfo()
      if self.svcrear_adc_fim_info is None:
        self.svcrear_adc_fim_info = rospy_message_converter.msg.SVCRearAdcFimInfo()
      if self.svcright_adc_fim_info is None:
        self.svcright_adc_fim_info = rospy_message_converter.msg.SVCRightAdcFimInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.oms_adc_fim_info = rospy_message_converter.msg.OMSAdcFimInfo()
      self.dms_adc_fim_info = rospy_message_converter.msg.DMSAdcFimInfo()
      self.sidefl_adc_fim_info = rospy_message_converter.msg.SideFLAdcFimInfo()
      self.sidefr_adc_fim_info = rospy_message_converter.msg.SideFRAdcFimInfo()
      self.siderl_adc_fim_info = rospy_message_converter.msg.SideRLAdcFimInfo()
      self.siderr_adc_fim_info = rospy_message_converter.msg.SideRRAdcFimInfo()
      self.fw_adc_fim_info = rospy_message_converter.msg.FWAdcFimInfo()
      self.fn_adc_fim_info = rospy_message_converter.msg.FNAdcFimInfo()
      self.rn_adc_fim_info = rospy_message_converter.msg.RNAdcFimInfo()
      self.svcfront_adc_fim_info = rospy_message_converter.msg.SVCFrontAdcFimInfo()
      self.svcleft_adc_fim_info = rospy_message_converter.msg.SVCLeftAdcFimInfo()
      self.svcrear_adc_fim_info = rospy_message_converter.msg.SVCRearAdcFimInfo()
      self.svcright_adc_fim_info = rospy_message_converter.msg.SVCRightAdcFimInfo()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_40BQ().pack(_x.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMS_License_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Function_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Camera_Occluded, _x.dms_adc_fim_info.FIM_DMS_No_Image_Recv, _x.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error, _x.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3, _x.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error, _x.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error, _x.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3, _x.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error, _x.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error, _x.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3, _x.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error, _x.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error, _x.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3, _x.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error, _x.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3, _x.fw_adc_fim_info.FIM_FW_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_Windshield_Cal_Error, _x.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error, _x.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3, _x.fn_adc_fim_info.FIM_FN_Camera_Cal_Error, _x.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error, _x.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3, _x.rn_adc_fim_info.FIM_RN_Camera_Cal_Error, _x.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error, _x.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error, _x.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error, _x.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.oms_adc_fim_info is None:
        self.oms_adc_fim_info = rospy_message_converter.msg.OMSAdcFimInfo()
      if self.dms_adc_fim_info is None:
        self.dms_adc_fim_info = rospy_message_converter.msg.DMSAdcFimInfo()
      if self.sidefl_adc_fim_info is None:
        self.sidefl_adc_fim_info = rospy_message_converter.msg.SideFLAdcFimInfo()
      if self.sidefr_adc_fim_info is None:
        self.sidefr_adc_fim_info = rospy_message_converter.msg.SideFRAdcFimInfo()
      if self.siderl_adc_fim_info is None:
        self.siderl_adc_fim_info = rospy_message_converter.msg.SideRLAdcFimInfo()
      if self.siderr_adc_fim_info is None:
        self.siderr_adc_fim_info = rospy_message_converter.msg.SideRRAdcFimInfo()
      if self.fw_adc_fim_info is None:
        self.fw_adc_fim_info = rospy_message_converter.msg.FWAdcFimInfo()
      if self.fn_adc_fim_info is None:
        self.fn_adc_fim_info = rospy_message_converter.msg.FNAdcFimInfo()
      if self.rn_adc_fim_info is None:
        self.rn_adc_fim_info = rospy_message_converter.msg.RNAdcFimInfo()
      if self.svcfront_adc_fim_info is None:
        self.svcfront_adc_fim_info = rospy_message_converter.msg.SVCFrontAdcFimInfo()
      if self.svcleft_adc_fim_info is None:
        self.svcleft_adc_fim_info = rospy_message_converter.msg.SVCLeftAdcFimInfo()
      if self.svcrear_adc_fim_info is None:
        self.svcrear_adc_fim_info = rospy_message_converter.msg.SVCRearAdcFimInfo()
      if self.svcright_adc_fim_info is None:
        self.svcright_adc_fim_info = rospy_message_converter.msg.SVCRightAdcFimInfo()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMS_License_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Function_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Camera_Occluded, _x.dms_adc_fim_info.FIM_DMS_No_Image_Recv, _x.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error, _x.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3, _x.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error, _x.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error, _x.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3, _x.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error, _x.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error, _x.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3, _x.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error, _x.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error, _x.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3, _x.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error, _x.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3, _x.fw_adc_fim_info.FIM_FW_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_Windshield_Cal_Error, _x.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error, _x.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3, _x.fn_adc_fim_info.FIM_FN_Camera_Cal_Error, _x.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error, _x.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3, _x.rn_adc_fim_info.FIM_RN_Camera_Cal_Error, _x.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error, _x.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error, _x.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error, _x.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error, _x.publish_ptp_ts,) = _get_struct_40BQ().unpack(str[start:end])
      self.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error = bool(self.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error)
      self.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error = bool(self.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error)
      self.dms_adc_fim_info.FIM_DMS_License_NotAvailable = bool(self.dms_adc_fim_info.FIM_DMS_License_NotAvailable)
      self.dms_adc_fim_info.FIM_DMS_Function_NotAvailable = bool(self.dms_adc_fim_info.FIM_DMS_Function_NotAvailable)
      self.dms_adc_fim_info.FIM_DMS_Camera_Occluded = bool(self.dms_adc_fim_info.FIM_DMS_Camera_Occluded)
      self.dms_adc_fim_info.FIM_DMS_No_Image_Recv = bool(self.dms_adc_fim_info.FIM_DMS_No_Image_Recv)
      self.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error = bool(self.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error)
      self.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3 = bool(self.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3)
      self.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error = bool(self.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error)
      self.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error = bool(self.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error)
      self.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3 = bool(self.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3)
      self.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error = bool(self.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error)
      self.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error = bool(self.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error)
      self.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3 = bool(self.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3)
      self.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error = bool(self.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error)
      self.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error = bool(self.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error)
      self.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3 = bool(self.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3)
      self.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error = bool(self.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error)
      self.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error = bool(self.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error)
      self.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3 = bool(self.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3)
      self.fw_adc_fim_info.FIM_FW_Camera_Cal_Error = bool(self.fw_adc_fim_info.FIM_FW_Camera_Cal_Error)
      self.fw_adc_fim_info.FIM_Windshield_Cal_Error = bool(self.fw_adc_fim_info.FIM_Windshield_Cal_Error)
      self.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error = bool(self.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error)
      self.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3 = bool(self.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3)
      self.fn_adc_fim_info.FIM_FN_Camera_Cal_Error = bool(self.fn_adc_fim_info.FIM_FN_Camera_Cal_Error)
      self.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error = bool(self.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error)
      self.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3 = bool(self.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3)
      self.rn_adc_fim_info.FIM_RN_Camera_Cal_Error = bool(self.rn_adc_fim_info.FIM_RN_Camera_Cal_Error)
      self.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error = bool(self.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error)
      self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3 = bool(self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3)
      self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error = bool(self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error)
      self.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error = bool(self.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error)
      self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3 = bool(self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3)
      self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error = bool(self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error)
      self.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error = bool(self.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error)
      self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3 = bool(self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3)
      self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error = bool(self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error)
      self.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error = bool(self.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error)
      self.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3 = bool(self.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3)
      self.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error = bool(self.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_40BQ().pack(_x.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMS_License_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Function_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Camera_Occluded, _x.dms_adc_fim_info.FIM_DMS_No_Image_Recv, _x.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error, _x.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3, _x.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error, _x.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error, _x.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3, _x.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error, _x.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error, _x.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3, _x.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error, _x.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error, _x.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3, _x.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error, _x.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3, _x.fw_adc_fim_info.FIM_FW_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_Windshield_Cal_Error, _x.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error, _x.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3, _x.fn_adc_fim_info.FIM_FN_Camera_Cal_Error, _x.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error, _x.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3, _x.rn_adc_fim_info.FIM_RN_Camera_Cal_Error, _x.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error, _x.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error, _x.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error, _x.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.oms_adc_fim_info is None:
        self.oms_adc_fim_info = rospy_message_converter.msg.OMSAdcFimInfo()
      if self.dms_adc_fim_info is None:
        self.dms_adc_fim_info = rospy_message_converter.msg.DMSAdcFimInfo()
      if self.sidefl_adc_fim_info is None:
        self.sidefl_adc_fim_info = rospy_message_converter.msg.SideFLAdcFimInfo()
      if self.sidefr_adc_fim_info is None:
        self.sidefr_adc_fim_info = rospy_message_converter.msg.SideFRAdcFimInfo()
      if self.siderl_adc_fim_info is None:
        self.siderl_adc_fim_info = rospy_message_converter.msg.SideRLAdcFimInfo()
      if self.siderr_adc_fim_info is None:
        self.siderr_adc_fim_info = rospy_message_converter.msg.SideRRAdcFimInfo()
      if self.fw_adc_fim_info is None:
        self.fw_adc_fim_info = rospy_message_converter.msg.FWAdcFimInfo()
      if self.fn_adc_fim_info is None:
        self.fn_adc_fim_info = rospy_message_converter.msg.FNAdcFimInfo()
      if self.rn_adc_fim_info is None:
        self.rn_adc_fim_info = rospy_message_converter.msg.RNAdcFimInfo()
      if self.svcfront_adc_fim_info is None:
        self.svcfront_adc_fim_info = rospy_message_converter.msg.SVCFrontAdcFimInfo()
      if self.svcleft_adc_fim_info is None:
        self.svcleft_adc_fim_info = rospy_message_converter.msg.SVCLeftAdcFimInfo()
      if self.svcrear_adc_fim_info is None:
        self.svcrear_adc_fim_info = rospy_message_converter.msg.SVCRearAdcFimInfo()
      if self.svcright_adc_fim_info is None:
        self.svcright_adc_fim_info = rospy_message_converter.msg.SVCRightAdcFimInfo()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error, _x.dms_adc_fim_info.FIM_DMS_License_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Function_NotAvailable, _x.dms_adc_fim_info.FIM_DMS_Camera_Occluded, _x.dms_adc_fim_info.FIM_DMS_No_Image_Recv, _x.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error, _x.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3, _x.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error, _x.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error, _x.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3, _x.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error, _x.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error, _x.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3, _x.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error, _x.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error, _x.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3, _x.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error, _x.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3, _x.fw_adc_fim_info.FIM_FW_Camera_Cal_Error, _x.fw_adc_fim_info.FIM_Windshield_Cal_Error, _x.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error, _x.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3, _x.fn_adc_fim_info.FIM_FN_Camera_Cal_Error, _x.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error, _x.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3, _x.rn_adc_fim_info.FIM_RN_Camera_Cal_Error, _x.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3, _x.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error, _x.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3, _x.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error, _x.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3, _x.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error, _x.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3, _x.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error, _x.publish_ptp_ts,) = _get_struct_40BQ().unpack(str[start:end])
      self.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error = bool(self.oms_adc_fim_info.FIM_OMSPhysicalLinkage_Error)
      self.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error = bool(self.dms_adc_fim_info.FIM_DMSPhysicalLinkage_Error)
      self.dms_adc_fim_info.FIM_DMS_License_NotAvailable = bool(self.dms_adc_fim_info.FIM_DMS_License_NotAvailable)
      self.dms_adc_fim_info.FIM_DMS_Function_NotAvailable = bool(self.dms_adc_fim_info.FIM_DMS_Function_NotAvailable)
      self.dms_adc_fim_info.FIM_DMS_Camera_Occluded = bool(self.dms_adc_fim_info.FIM_DMS_Camera_Occluded)
      self.dms_adc_fim_info.FIM_DMS_No_Image_Recv = bool(self.dms_adc_fim_info.FIM_DMS_No_Image_Recv)
      self.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error = bool(self.sidefl_adc_fim_info.FIM_SideFLPhysicalLinkage_Error)
      self.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3 = bool(self.sidefl_adc_fim_info.FIM_FL_Camera_Failsafe_3)
      self.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error = bool(self.sidefl_adc_fim_info.FIM_FL_Camera_Cal_Error)
      self.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error = bool(self.sidefr_adc_fim_info.FIM_SideFRPhysicalLinkage_Error)
      self.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3 = bool(self.sidefr_adc_fim_info.FIM_FR_Camera_Failsafe_3)
      self.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error = bool(self.sidefr_adc_fim_info.FIM_FR_Camera_Cal_Error)
      self.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error = bool(self.siderl_adc_fim_info.FIM_SideRLPhysicalLinkage_Error)
      self.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3 = bool(self.siderl_adc_fim_info.FIM_RL_Camera_Failsafe_3)
      self.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error = bool(self.siderl_adc_fim_info.FIM_RL_Camera_Cal_Error)
      self.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error = bool(self.siderr_adc_fim_info.FIM_SideRRPhysicalLinkage_Error)
      self.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3 = bool(self.siderr_adc_fim_info.FIM_RR_Camera_Failsafe_3)
      self.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error = bool(self.siderr_adc_fim_info.FIM_RR_Camera_Cal_Error)
      self.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error = bool(self.fw_adc_fim_info.FIM_FWPhysicalLinkage_Error)
      self.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3 = bool(self.fw_adc_fim_info.FIM_FW_Camera_Failsafe_3)
      self.fw_adc_fim_info.FIM_FW_Camera_Cal_Error = bool(self.fw_adc_fim_info.FIM_FW_Camera_Cal_Error)
      self.fw_adc_fim_info.FIM_Windshield_Cal_Error = bool(self.fw_adc_fim_info.FIM_Windshield_Cal_Error)
      self.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error = bool(self.fn_adc_fim_info.FIM_FNPhysicalLinkage_Error)
      self.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3 = bool(self.fn_adc_fim_info.FIM_FN_Camera_Failsafe_3)
      self.fn_adc_fim_info.FIM_FN_Camera_Cal_Error = bool(self.fn_adc_fim_info.FIM_FN_Camera_Cal_Error)
      self.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error = bool(self.rn_adc_fim_info.FIM_RNPhysicalLinkage_Error)
      self.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3 = bool(self.rn_adc_fim_info.FIM_RN_Camera_Failsafe_3)
      self.rn_adc_fim_info.FIM_RN_Camera_Cal_Error = bool(self.rn_adc_fim_info.FIM_RN_Camera_Cal_Error)
      self.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error = bool(self.svcfront_adc_fim_info.FIM_SVCFrontPhysicalLinkage_Error)
      self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3 = bool(self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Failsafe_3)
      self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error = bool(self.svcfront_adc_fim_info.FIM_SVCFront_Camera_Cal_Error)
      self.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error = bool(self.svcleft_adc_fim_info.FIM_SVCLeftPhysicalLinkage_Error)
      self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3 = bool(self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Failsafe_3)
      self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error = bool(self.svcleft_adc_fim_info.FIM_SVCLeft_Camera_Cal_Error)
      self.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error = bool(self.svcrear_adc_fim_info.FIM_SVCRearPhysicalLinkage_Error)
      self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3 = bool(self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Failsafe_3)
      self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error = bool(self.svcrear_adc_fim_info.FIM_SVCRear_Camera_Cal_Error)
      self.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error = bool(self.svcright_adc_fim_info.FIM_SVCRightPhysicalLinkage_Error)
      self.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3 = bool(self.svcright_adc_fim_info.FIM_SVCRight_Camera_Failsafe_3)
      self.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error = bool(self.svcright_adc_fim_info.FIM_SVCRight_Camera_Cal_Error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_40BQ = None
def _get_struct_40BQ():
    global _struct_40BQ
    if _struct_40BQ is None:
        _struct_40BQ = struct.Struct("<40BQ")
    return _struct_40BQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/Stub.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Stub(genpy.Message):
  _md5sum = "5bc5c8056554a9833f215c084b8aa9d3"
  _type = "rospy_message_converter/Stub"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 offset
uint64 index
uint32 sub_path_idx
uint32 relative_probability
int32 road_class
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 form_of_way
uint32 turn_angle
bool is_last_stub
uint32 right_of_way
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir
"""
  __slots__ = ['offset','index','sub_path_idx','relative_probability','road_class','is_part_of_calculated_route','is_complex_intersection','form_of_way','turn_angle','is_last_stub','right_of_way','num_of_lanes_opp_dir','num_of_lanes_drv_dir']
  _slot_types = ['uint64','uint64','uint32','uint32','int32','bool','bool','uint32','uint32','bool','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       offset,index,sub_path_idx,relative_probability,road_class,is_part_of_calculated_route,is_complex_intersection,form_of_way,turn_angle,is_last_stub,right_of_way,num_of_lanes_opp_dir,num_of_lanes_drv_dir

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Stub, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.offset is None:
        self.offset = 0
      if self.index is None:
        self.index = 0
      if self.sub_path_idx is None:
        self.sub_path_idx = 0
      if self.relative_probability is None:
        self.relative_probability = 0
      if self.road_class is None:
        self.road_class = 0
      if self.is_part_of_calculated_route is None:
        self.is_part_of_calculated_route = False
      if self.is_complex_intersection is None:
        self.is_complex_intersection = False
      if self.form_of_way is None:
        self.form_of_way = 0
      if self.turn_angle is None:
        self.turn_angle = 0
      if self.is_last_stub is None:
        self.is_last_stub = False
      if self.right_of_way is None:
        self.right_of_way = 0
      if self.num_of_lanes_opp_dir is None:
        self.num_of_lanes_opp_dir = 0
      if self.num_of_lanes_drv_dir is None:
        self.num_of_lanes_drv_dir = 0
    else:
      self.offset = 0
      self.index = 0
      self.sub_path_idx = 0
      self.relative_probability = 0
      self.road_class = 0
      self.is_part_of_calculated_route = False
      self.is_complex_intersection = False
      self.form_of_way = 0
      self.turn_angle = 0
      self.is_last_stub = False
      self.right_of_way = 0
      self.num_of_lanes_opp_dir = 0
      self.num_of_lanes_drv_dir = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2Q2Ii2B2IB3I().unpack(str[start:end])
      self.is_part_of_calculated_route = bool(self.is_part_of_calculated_route)
      self.is_complex_intersection = bool(self.is_complex_intersection)
      self.is_last_stub = bool(self.is_last_stub)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.offset, _x.index, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_2Q2Ii2B2IB3I().unpack(str[start:end])
      self.is_part_of_calculated_route = bool(self.is_part_of_calculated_route)
      self.is_complex_intersection = bool(self.is_complex_intersection)
      self.is_last_stub = bool(self.is_last_stub)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q2Ii2B2IB3I = None
def _get_struct_2Q2Ii2B2IB3I():
    global _struct_2Q2Ii2B2IB3I
    if _struct_2Q2Ii2B2IB3I is None:
        _struct_2Q2Ii2B2IB3I = struct.Struct("<2Q2Ii2B2IB3I")
    return _struct_2Q2Ii2B2IB3I

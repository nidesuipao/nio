# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BCUFeatureFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BCUFeatureFaultInfo(genpy.Message):
  _md5sum = "bf6fb3a6ea3362db3f3d55b6398cf240"
  _type = "rospy_message_converter/BCUFeatureFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool CHS1_BCU_WhlSpdMovgDir_Invalid
bool CHS1_BCU_WhlSpdSts_invalid
bool CHS1_BCU_WhlPlsCntr_Invalid
bool CHS1_BCU_VehSpdSts_Invalid
bool CHS1_BCU_BrkPressValid_Invalid
bool CHS1_BCU_BrkPedlSts_Invalid
bool CHS1_BCU_VehMovgDir_Invalid
bool CHS1_BCU_BrkPressOffsetValid_Invalid
bool CHS1_BCU_HDCSts_Invalid
bool CHS1_BCU_AVHSts_Invalid
bool CHS1_BCU_AutoBrkAvl_NotAvailable
bool CHS1_BCU_VehSpdSts_ASILD_Invalid
bool CHS1_BCU_ABSFailLampReq_LampOn
bool CHS1_VDCTCSFailLampReq
bool CHS1_AutoBrkgAvl_Invalid
bool CHS1_AWBAvl_Invalid
bool CHS1_ABPAvl_NotAvailable
bool CHS1_BrkOverHeat
"""
  __slots__ = ['CHS1_BCU_WhlSpdMovgDir_Invalid','CHS1_BCU_WhlSpdSts_invalid','CHS1_BCU_WhlPlsCntr_Invalid','CHS1_BCU_VehSpdSts_Invalid','CHS1_BCU_BrkPressValid_Invalid','CHS1_BCU_BrkPedlSts_Invalid','CHS1_BCU_VehMovgDir_Invalid','CHS1_BCU_BrkPressOffsetValid_Invalid','CHS1_BCU_HDCSts_Invalid','CHS1_BCU_AVHSts_Invalid','CHS1_BCU_AutoBrkAvl_NotAvailable','CHS1_BCU_VehSpdSts_ASILD_Invalid','CHS1_BCU_ABSFailLampReq_LampOn','CHS1_VDCTCSFailLampReq','CHS1_AutoBrkgAvl_Invalid','CHS1_AWBAvl_Invalid','CHS1_ABPAvl_NotAvailable','CHS1_BrkOverHeat']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CHS1_BCU_WhlSpdMovgDir_Invalid,CHS1_BCU_WhlSpdSts_invalid,CHS1_BCU_WhlPlsCntr_Invalid,CHS1_BCU_VehSpdSts_Invalid,CHS1_BCU_BrkPressValid_Invalid,CHS1_BCU_BrkPedlSts_Invalid,CHS1_BCU_VehMovgDir_Invalid,CHS1_BCU_BrkPressOffsetValid_Invalid,CHS1_BCU_HDCSts_Invalid,CHS1_BCU_AVHSts_Invalid,CHS1_BCU_AutoBrkAvl_NotAvailable,CHS1_BCU_VehSpdSts_ASILD_Invalid,CHS1_BCU_ABSFailLampReq_LampOn,CHS1_VDCTCSFailLampReq,CHS1_AutoBrkgAvl_Invalid,CHS1_AWBAvl_Invalid,CHS1_ABPAvl_NotAvailable,CHS1_BrkOverHeat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BCUFeatureFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.CHS1_BCU_WhlSpdMovgDir_Invalid is None:
        self.CHS1_BCU_WhlSpdMovgDir_Invalid = False
      if self.CHS1_BCU_WhlSpdSts_invalid is None:
        self.CHS1_BCU_WhlSpdSts_invalid = False
      if self.CHS1_BCU_WhlPlsCntr_Invalid is None:
        self.CHS1_BCU_WhlPlsCntr_Invalid = False
      if self.CHS1_BCU_VehSpdSts_Invalid is None:
        self.CHS1_BCU_VehSpdSts_Invalid = False
      if self.CHS1_BCU_BrkPressValid_Invalid is None:
        self.CHS1_BCU_BrkPressValid_Invalid = False
      if self.CHS1_BCU_BrkPedlSts_Invalid is None:
        self.CHS1_BCU_BrkPedlSts_Invalid = False
      if self.CHS1_BCU_VehMovgDir_Invalid is None:
        self.CHS1_BCU_VehMovgDir_Invalid = False
      if self.CHS1_BCU_BrkPressOffsetValid_Invalid is None:
        self.CHS1_BCU_BrkPressOffsetValid_Invalid = False
      if self.CHS1_BCU_HDCSts_Invalid is None:
        self.CHS1_BCU_HDCSts_Invalid = False
      if self.CHS1_BCU_AVHSts_Invalid is None:
        self.CHS1_BCU_AVHSts_Invalid = False
      if self.CHS1_BCU_AutoBrkAvl_NotAvailable is None:
        self.CHS1_BCU_AutoBrkAvl_NotAvailable = False
      if self.CHS1_BCU_VehSpdSts_ASILD_Invalid is None:
        self.CHS1_BCU_VehSpdSts_ASILD_Invalid = False
      if self.CHS1_BCU_ABSFailLampReq_LampOn is None:
        self.CHS1_BCU_ABSFailLampReq_LampOn = False
      if self.CHS1_VDCTCSFailLampReq is None:
        self.CHS1_VDCTCSFailLampReq = False
      if self.CHS1_AutoBrkgAvl_Invalid is None:
        self.CHS1_AutoBrkgAvl_Invalid = False
      if self.CHS1_AWBAvl_Invalid is None:
        self.CHS1_AWBAvl_Invalid = False
      if self.CHS1_ABPAvl_NotAvailable is None:
        self.CHS1_ABPAvl_NotAvailable = False
      if self.CHS1_BrkOverHeat is None:
        self.CHS1_BrkOverHeat = False
    else:
      self.CHS1_BCU_WhlSpdMovgDir_Invalid = False
      self.CHS1_BCU_WhlSpdSts_invalid = False
      self.CHS1_BCU_WhlPlsCntr_Invalid = False
      self.CHS1_BCU_VehSpdSts_Invalid = False
      self.CHS1_BCU_BrkPressValid_Invalid = False
      self.CHS1_BCU_BrkPedlSts_Invalid = False
      self.CHS1_BCU_VehMovgDir_Invalid = False
      self.CHS1_BCU_BrkPressOffsetValid_Invalid = False
      self.CHS1_BCU_HDCSts_Invalid = False
      self.CHS1_BCU_AVHSts_Invalid = False
      self.CHS1_BCU_AutoBrkAvl_NotAvailable = False
      self.CHS1_BCU_VehSpdSts_ASILD_Invalid = False
      self.CHS1_BCU_ABSFailLampReq_LampOn = False
      self.CHS1_VDCTCSFailLampReq = False
      self.CHS1_AutoBrkgAvl_Invalid = False
      self.CHS1_AWBAvl_Invalid = False
      self.CHS1_ABPAvl_NotAvailable = False
      self.CHS1_BrkOverHeat = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18B().pack(_x.CHS1_BCU_WhlSpdMovgDir_Invalid, _x.CHS1_BCU_WhlSpdSts_invalid, _x.CHS1_BCU_WhlPlsCntr_Invalid, _x.CHS1_BCU_VehSpdSts_Invalid, _x.CHS1_BCU_BrkPressValid_Invalid, _x.CHS1_BCU_BrkPedlSts_Invalid, _x.CHS1_BCU_VehMovgDir_Invalid, _x.CHS1_BCU_BrkPressOffsetValid_Invalid, _x.CHS1_BCU_HDCSts_Invalid, _x.CHS1_BCU_AVHSts_Invalid, _x.CHS1_BCU_AutoBrkAvl_NotAvailable, _x.CHS1_BCU_VehSpdSts_ASILD_Invalid, _x.CHS1_BCU_ABSFailLampReq_LampOn, _x.CHS1_VDCTCSFailLampReq, _x.CHS1_AutoBrkgAvl_Invalid, _x.CHS1_AWBAvl_Invalid, _x.CHS1_ABPAvl_NotAvailable, _x.CHS1_BrkOverHeat))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.CHS1_BCU_WhlSpdMovgDir_Invalid, _x.CHS1_BCU_WhlSpdSts_invalid, _x.CHS1_BCU_WhlPlsCntr_Invalid, _x.CHS1_BCU_VehSpdSts_Invalid, _x.CHS1_BCU_BrkPressValid_Invalid, _x.CHS1_BCU_BrkPedlSts_Invalid, _x.CHS1_BCU_VehMovgDir_Invalid, _x.CHS1_BCU_BrkPressOffsetValid_Invalid, _x.CHS1_BCU_HDCSts_Invalid, _x.CHS1_BCU_AVHSts_Invalid, _x.CHS1_BCU_AutoBrkAvl_NotAvailable, _x.CHS1_BCU_VehSpdSts_ASILD_Invalid, _x.CHS1_BCU_ABSFailLampReq_LampOn, _x.CHS1_VDCTCSFailLampReq, _x.CHS1_AutoBrkgAvl_Invalid, _x.CHS1_AWBAvl_Invalid, _x.CHS1_ABPAvl_NotAvailable, _x.CHS1_BrkOverHeat,) = _get_struct_18B().unpack(str[start:end])
      self.CHS1_BCU_WhlSpdMovgDir_Invalid = bool(self.CHS1_BCU_WhlSpdMovgDir_Invalid)
      self.CHS1_BCU_WhlSpdSts_invalid = bool(self.CHS1_BCU_WhlSpdSts_invalid)
      self.CHS1_BCU_WhlPlsCntr_Invalid = bool(self.CHS1_BCU_WhlPlsCntr_Invalid)
      self.CHS1_BCU_VehSpdSts_Invalid = bool(self.CHS1_BCU_VehSpdSts_Invalid)
      self.CHS1_BCU_BrkPressValid_Invalid = bool(self.CHS1_BCU_BrkPressValid_Invalid)
      self.CHS1_BCU_BrkPedlSts_Invalid = bool(self.CHS1_BCU_BrkPedlSts_Invalid)
      self.CHS1_BCU_VehMovgDir_Invalid = bool(self.CHS1_BCU_VehMovgDir_Invalid)
      self.CHS1_BCU_BrkPressOffsetValid_Invalid = bool(self.CHS1_BCU_BrkPressOffsetValid_Invalid)
      self.CHS1_BCU_HDCSts_Invalid = bool(self.CHS1_BCU_HDCSts_Invalid)
      self.CHS1_BCU_AVHSts_Invalid = bool(self.CHS1_BCU_AVHSts_Invalid)
      self.CHS1_BCU_AutoBrkAvl_NotAvailable = bool(self.CHS1_BCU_AutoBrkAvl_NotAvailable)
      self.CHS1_BCU_VehSpdSts_ASILD_Invalid = bool(self.CHS1_BCU_VehSpdSts_ASILD_Invalid)
      self.CHS1_BCU_ABSFailLampReq_LampOn = bool(self.CHS1_BCU_ABSFailLampReq_LampOn)
      self.CHS1_VDCTCSFailLampReq = bool(self.CHS1_VDCTCSFailLampReq)
      self.CHS1_AutoBrkgAvl_Invalid = bool(self.CHS1_AutoBrkgAvl_Invalid)
      self.CHS1_AWBAvl_Invalid = bool(self.CHS1_AWBAvl_Invalid)
      self.CHS1_ABPAvl_NotAvailable = bool(self.CHS1_ABPAvl_NotAvailable)
      self.CHS1_BrkOverHeat = bool(self.CHS1_BrkOverHeat)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18B().pack(_x.CHS1_BCU_WhlSpdMovgDir_Invalid, _x.CHS1_BCU_WhlSpdSts_invalid, _x.CHS1_BCU_WhlPlsCntr_Invalid, _x.CHS1_BCU_VehSpdSts_Invalid, _x.CHS1_BCU_BrkPressValid_Invalid, _x.CHS1_BCU_BrkPedlSts_Invalid, _x.CHS1_BCU_VehMovgDir_Invalid, _x.CHS1_BCU_BrkPressOffsetValid_Invalid, _x.CHS1_BCU_HDCSts_Invalid, _x.CHS1_BCU_AVHSts_Invalid, _x.CHS1_BCU_AutoBrkAvl_NotAvailable, _x.CHS1_BCU_VehSpdSts_ASILD_Invalid, _x.CHS1_BCU_ABSFailLampReq_LampOn, _x.CHS1_VDCTCSFailLampReq, _x.CHS1_AutoBrkgAvl_Invalid, _x.CHS1_AWBAvl_Invalid, _x.CHS1_ABPAvl_NotAvailable, _x.CHS1_BrkOverHeat))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.CHS1_BCU_WhlSpdMovgDir_Invalid, _x.CHS1_BCU_WhlSpdSts_invalid, _x.CHS1_BCU_WhlPlsCntr_Invalid, _x.CHS1_BCU_VehSpdSts_Invalid, _x.CHS1_BCU_BrkPressValid_Invalid, _x.CHS1_BCU_BrkPedlSts_Invalid, _x.CHS1_BCU_VehMovgDir_Invalid, _x.CHS1_BCU_BrkPressOffsetValid_Invalid, _x.CHS1_BCU_HDCSts_Invalid, _x.CHS1_BCU_AVHSts_Invalid, _x.CHS1_BCU_AutoBrkAvl_NotAvailable, _x.CHS1_BCU_VehSpdSts_ASILD_Invalid, _x.CHS1_BCU_ABSFailLampReq_LampOn, _x.CHS1_VDCTCSFailLampReq, _x.CHS1_AutoBrkgAvl_Invalid, _x.CHS1_AWBAvl_Invalid, _x.CHS1_ABPAvl_NotAvailable, _x.CHS1_BrkOverHeat,) = _get_struct_18B().unpack(str[start:end])
      self.CHS1_BCU_WhlSpdMovgDir_Invalid = bool(self.CHS1_BCU_WhlSpdMovgDir_Invalid)
      self.CHS1_BCU_WhlSpdSts_invalid = bool(self.CHS1_BCU_WhlSpdSts_invalid)
      self.CHS1_BCU_WhlPlsCntr_Invalid = bool(self.CHS1_BCU_WhlPlsCntr_Invalid)
      self.CHS1_BCU_VehSpdSts_Invalid = bool(self.CHS1_BCU_VehSpdSts_Invalid)
      self.CHS1_BCU_BrkPressValid_Invalid = bool(self.CHS1_BCU_BrkPressValid_Invalid)
      self.CHS1_BCU_BrkPedlSts_Invalid = bool(self.CHS1_BCU_BrkPedlSts_Invalid)
      self.CHS1_BCU_VehMovgDir_Invalid = bool(self.CHS1_BCU_VehMovgDir_Invalid)
      self.CHS1_BCU_BrkPressOffsetValid_Invalid = bool(self.CHS1_BCU_BrkPressOffsetValid_Invalid)
      self.CHS1_BCU_HDCSts_Invalid = bool(self.CHS1_BCU_HDCSts_Invalid)
      self.CHS1_BCU_AVHSts_Invalid = bool(self.CHS1_BCU_AVHSts_Invalid)
      self.CHS1_BCU_AutoBrkAvl_NotAvailable = bool(self.CHS1_BCU_AutoBrkAvl_NotAvailable)
      self.CHS1_BCU_VehSpdSts_ASILD_Invalid = bool(self.CHS1_BCU_VehSpdSts_ASILD_Invalid)
      self.CHS1_BCU_ABSFailLampReq_LampOn = bool(self.CHS1_BCU_ABSFailLampReq_LampOn)
      self.CHS1_VDCTCSFailLampReq = bool(self.CHS1_VDCTCSFailLampReq)
      self.CHS1_AutoBrkgAvl_Invalid = bool(self.CHS1_AutoBrkgAvl_Invalid)
      self.CHS1_AWBAvl_Invalid = bool(self.CHS1_AWBAvl_Invalid)
      self.CHS1_ABPAvl_NotAvailable = bool(self.CHS1_ABPAvl_NotAvailable)
      self.CHS1_BrkOverHeat = bool(self.CHS1_BrkOverHeat)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18B = None
def _get_struct_18B():
    global _struct_18B
    if _struct_18B is None:
        _struct_18B = struct.Struct("<18B")
    return _struct_18B

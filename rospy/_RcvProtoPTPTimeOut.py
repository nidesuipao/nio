# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RcvProtoPTPTimeOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RcvProtoPTPTimeOut(genpy.Message):
  _md5sum = "5fb37efbd3d439a1e48b142813dab02c"
  _type = "rospy_message_converter/RcvProtoPTPTimeOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 function_arb_out_ptp_ts
uint64 sd_map_ptp_ts
uint64 nop_functionstatus_ptp_ts
uint64 nop_speedlimitvalue_ptp_ts
uint64 nop_vehicleout_ptp_ts
uint64 side_feature_ptp_ts
uint64 vision_illumnance_flag_ptp_ts
uint64 vision_road_detection_ptp_ts
uint64 vehicle_10ms_ptp_ts
uint64 vehicle_50ms_ptp_ts
uint64 ehy_lpp_outputs_ptp_ts
uint64 ehy_obf_outputs_ptp_ts
uint64 ehy_rme_road_outputs_ptp_ts
uint64 ehy_tpp_outputs_ptp_ts
uint64 ehy_tse_outputs_ptp_ts
uint64 ehy_tsi_outputs_ptp_ts
uint64[] reserved_ptp_ts
"""
  __slots__ = ['function_arb_out_ptp_ts','sd_map_ptp_ts','nop_functionstatus_ptp_ts','nop_speedlimitvalue_ptp_ts','nop_vehicleout_ptp_ts','side_feature_ptp_ts','vision_illumnance_flag_ptp_ts','vision_road_detection_ptp_ts','vehicle_10ms_ptp_ts','vehicle_50ms_ptp_ts','ehy_lpp_outputs_ptp_ts','ehy_obf_outputs_ptp_ts','ehy_rme_road_outputs_ptp_ts','ehy_tpp_outputs_ptp_ts','ehy_tse_outputs_ptp_ts','ehy_tsi_outputs_ptp_ts','reserved_ptp_ts']
  _slot_types = ['uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       function_arb_out_ptp_ts,sd_map_ptp_ts,nop_functionstatus_ptp_ts,nop_speedlimitvalue_ptp_ts,nop_vehicleout_ptp_ts,side_feature_ptp_ts,vision_illumnance_flag_ptp_ts,vision_road_detection_ptp_ts,vehicle_10ms_ptp_ts,vehicle_50ms_ptp_ts,ehy_lpp_outputs_ptp_ts,ehy_obf_outputs_ptp_ts,ehy_rme_road_outputs_ptp_ts,ehy_tpp_outputs_ptp_ts,ehy_tse_outputs_ptp_ts,ehy_tsi_outputs_ptp_ts,reserved_ptp_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RcvProtoPTPTimeOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.function_arb_out_ptp_ts is None:
        self.function_arb_out_ptp_ts = 0
      if self.sd_map_ptp_ts is None:
        self.sd_map_ptp_ts = 0
      if self.nop_functionstatus_ptp_ts is None:
        self.nop_functionstatus_ptp_ts = 0
      if self.nop_speedlimitvalue_ptp_ts is None:
        self.nop_speedlimitvalue_ptp_ts = 0
      if self.nop_vehicleout_ptp_ts is None:
        self.nop_vehicleout_ptp_ts = 0
      if self.side_feature_ptp_ts is None:
        self.side_feature_ptp_ts = 0
      if self.vision_illumnance_flag_ptp_ts is None:
        self.vision_illumnance_flag_ptp_ts = 0
      if self.vision_road_detection_ptp_ts is None:
        self.vision_road_detection_ptp_ts = 0
      if self.vehicle_10ms_ptp_ts is None:
        self.vehicle_10ms_ptp_ts = 0
      if self.vehicle_50ms_ptp_ts is None:
        self.vehicle_50ms_ptp_ts = 0
      if self.ehy_lpp_outputs_ptp_ts is None:
        self.ehy_lpp_outputs_ptp_ts = 0
      if self.ehy_obf_outputs_ptp_ts is None:
        self.ehy_obf_outputs_ptp_ts = 0
      if self.ehy_rme_road_outputs_ptp_ts is None:
        self.ehy_rme_road_outputs_ptp_ts = 0
      if self.ehy_tpp_outputs_ptp_ts is None:
        self.ehy_tpp_outputs_ptp_ts = 0
      if self.ehy_tse_outputs_ptp_ts is None:
        self.ehy_tse_outputs_ptp_ts = 0
      if self.ehy_tsi_outputs_ptp_ts is None:
        self.ehy_tsi_outputs_ptp_ts = 0
      if self.reserved_ptp_ts is None:
        self.reserved_ptp_ts = []
    else:
      self.function_arb_out_ptp_ts = 0
      self.sd_map_ptp_ts = 0
      self.nop_functionstatus_ptp_ts = 0
      self.nop_speedlimitvalue_ptp_ts = 0
      self.nop_vehicleout_ptp_ts = 0
      self.side_feature_ptp_ts = 0
      self.vision_illumnance_flag_ptp_ts = 0
      self.vision_road_detection_ptp_ts = 0
      self.vehicle_10ms_ptp_ts = 0
      self.vehicle_50ms_ptp_ts = 0
      self.ehy_lpp_outputs_ptp_ts = 0
      self.ehy_obf_outputs_ptp_ts = 0
      self.ehy_rme_road_outputs_ptp_ts = 0
      self.ehy_tpp_outputs_ptp_ts = 0
      self.ehy_tse_outputs_ptp_ts = 0
      self.ehy_tsi_outputs_ptp_ts = 0
      self.reserved_ptp_ts = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16Q().pack(_x.function_arb_out_ptp_ts, _x.sd_map_ptp_ts, _x.nop_functionstatus_ptp_ts, _x.nop_speedlimitvalue_ptp_ts, _x.nop_vehicleout_ptp_ts, _x.side_feature_ptp_ts, _x.vision_illumnance_flag_ptp_ts, _x.vision_road_detection_ptp_ts, _x.vehicle_10ms_ptp_ts, _x.vehicle_50ms_ptp_ts, _x.ehy_lpp_outputs_ptp_ts, _x.ehy_obf_outputs_ptp_ts, _x.ehy_rme_road_outputs_ptp_ts, _x.ehy_tpp_outputs_ptp_ts, _x.ehy_tse_outputs_ptp_ts, _x.ehy_tsi_outputs_ptp_ts))
      length = len(self.reserved_ptp_ts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved_ptp_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.function_arb_out_ptp_ts, _x.sd_map_ptp_ts, _x.nop_functionstatus_ptp_ts, _x.nop_speedlimitvalue_ptp_ts, _x.nop_vehicleout_ptp_ts, _x.side_feature_ptp_ts, _x.vision_illumnance_flag_ptp_ts, _x.vision_road_detection_ptp_ts, _x.vehicle_10ms_ptp_ts, _x.vehicle_50ms_ptp_ts, _x.ehy_lpp_outputs_ptp_ts, _x.ehy_obf_outputs_ptp_ts, _x.ehy_rme_road_outputs_ptp_ts, _x.ehy_tpp_outputs_ptp_ts, _x.ehy_tse_outputs_ptp_ts, _x.ehy_tsi_outputs_ptp_ts,) = _get_struct_16Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_ptp_ts = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16Q().pack(_x.function_arb_out_ptp_ts, _x.sd_map_ptp_ts, _x.nop_functionstatus_ptp_ts, _x.nop_speedlimitvalue_ptp_ts, _x.nop_vehicleout_ptp_ts, _x.side_feature_ptp_ts, _x.vision_illumnance_flag_ptp_ts, _x.vision_road_detection_ptp_ts, _x.vehicle_10ms_ptp_ts, _x.vehicle_50ms_ptp_ts, _x.ehy_lpp_outputs_ptp_ts, _x.ehy_obf_outputs_ptp_ts, _x.ehy_rme_road_outputs_ptp_ts, _x.ehy_tpp_outputs_ptp_ts, _x.ehy_tse_outputs_ptp_ts, _x.ehy_tsi_outputs_ptp_ts))
      length = len(self.reserved_ptp_ts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.reserved_ptp_ts.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.function_arb_out_ptp_ts, _x.sd_map_ptp_ts, _x.nop_functionstatus_ptp_ts, _x.nop_speedlimitvalue_ptp_ts, _x.nop_vehicleout_ptp_ts, _x.side_feature_ptp_ts, _x.vision_illumnance_flag_ptp_ts, _x.vision_road_detection_ptp_ts, _x.vehicle_10ms_ptp_ts, _x.vehicle_50ms_ptp_ts, _x.ehy_lpp_outputs_ptp_ts, _x.ehy_obf_outputs_ptp_ts, _x.ehy_rme_road_outputs_ptp_ts, _x.ehy_tpp_outputs_ptp_ts, _x.ehy_tse_outputs_ptp_ts, _x.ehy_tsi_outputs_ptp_ts,) = _get_struct_16Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_ptp_ts = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16Q = None
def _get_struct_16Q():
    global _struct_16Q
    if _struct_16Q is None:
        _struct_16Q = struct.Struct("<16Q")
    return _struct_16Q

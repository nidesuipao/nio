# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FeatureVehInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FeatureVehInfo(genpy.Message):
  _md5sum = "989503c1ae89a1483da51c1eea761287"
  _type = "rospy_message_converter/FeatureVehInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 wheel_base
float32 veh_overall_length
float32 veh_overall_width
float32 veh_width
float32 veh_height
float32 front_tread_width
float32 rear_tread_width
MartixPair2D[] steer_ratio_martix_left_turn
MartixPair2D[] steer_ratio_martix_right_turn
float32 front_bumper_to_rear_axle
float32 front_main_cam_to_front_bumper
float32 front_narrow_cam_to_front_bumper
RadarPosition radar_position

================================================================================
MSG: rospy_message_converter/MartixPair2D
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/RadarPosition
float32 rad_fc_height_no_load
float32 rad_fl_height_no_load
float32 rad_fr_height_no_load
float32 rad_rl_height_no_load
float32 rad_rr_height_no_load
float32 rad_fc_mount_angle
float32 rad_fl_mount_angle
float32 rad_fr_mount_angle
float32 rad_rl_mount_angle
float32 rad_rr_mount_angle
float32 rad_fc_lat_dst_2_center
float32 rad_fl_lat_dst_2_center
float32 rad_fr_lat_dst_2_center
float32 rad_rl_lat_dst_2_center
float32 rad_rr_lat_dst_2_center
float32 rad_fc_long_dst_2_rear_axle
float32 rad_fl_long_dst_2_rear_axle
float32 rad_fr_long_dst_2_rear_axle
float32 rad_rl_long_dst_2_rear_axle
float32 rad_rr_long_dst_2_rear_axle
"""
  __slots__ = ['wheel_base','veh_overall_length','veh_overall_width','veh_width','veh_height','front_tread_width','rear_tread_width','steer_ratio_martix_left_turn','steer_ratio_martix_right_turn','front_bumper_to_rear_axle','front_main_cam_to_front_bumper','front_narrow_cam_to_front_bumper','radar_position']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','rospy_message_converter/MartixPair2D[]','rospy_message_converter/MartixPair2D[]','float32','float32','float32','rospy_message_converter/RadarPosition']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wheel_base,veh_overall_length,veh_overall_width,veh_width,veh_height,front_tread_width,rear_tread_width,steer_ratio_martix_left_turn,steer_ratio_martix_right_turn,front_bumper_to_rear_axle,front_main_cam_to_front_bumper,front_narrow_cam_to_front_bumper,radar_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeatureVehInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.wheel_base is None:
        self.wheel_base = 0.
      if self.veh_overall_length is None:
        self.veh_overall_length = 0.
      if self.veh_overall_width is None:
        self.veh_overall_width = 0.
      if self.veh_width is None:
        self.veh_width = 0.
      if self.veh_height is None:
        self.veh_height = 0.
      if self.front_tread_width is None:
        self.front_tread_width = 0.
      if self.rear_tread_width is None:
        self.rear_tread_width = 0.
      if self.steer_ratio_martix_left_turn is None:
        self.steer_ratio_martix_left_turn = []
      if self.steer_ratio_martix_right_turn is None:
        self.steer_ratio_martix_right_turn = []
      if self.front_bumper_to_rear_axle is None:
        self.front_bumper_to_rear_axle = 0.
      if self.front_main_cam_to_front_bumper is None:
        self.front_main_cam_to_front_bumper = 0.
      if self.front_narrow_cam_to_front_bumper is None:
        self.front_narrow_cam_to_front_bumper = 0.
      if self.radar_position is None:
        self.radar_position = rospy_message_converter.msg.RadarPosition()
    else:
      self.wheel_base = 0.
      self.veh_overall_length = 0.
      self.veh_overall_width = 0.
      self.veh_width = 0.
      self.veh_height = 0.
      self.front_tread_width = 0.
      self.rear_tread_width = 0.
      self.steer_ratio_martix_left_turn = []
      self.steer_ratio_martix_right_turn = []
      self.front_bumper_to_rear_axle = 0.
      self.front_main_cam_to_front_bumper = 0.
      self.front_narrow_cam_to_front_bumper = 0.
      self.radar_position = rospy_message_converter.msg.RadarPosition()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.wheel_base, _x.veh_overall_length, _x.veh_overall_width, _x.veh_width, _x.veh_height, _x.front_tread_width, _x.rear_tread_width))
      length = len(self.steer_ratio_martix_left_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.steer_ratio_martix_left_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.steer_ratio_martix_right_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.steer_ratio_martix_right_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_23f().pack(_x.front_bumper_to_rear_axle, _x.front_main_cam_to_front_bumper, _x.front_narrow_cam_to_front_bumper, _x.radar_position.rad_fc_height_no_load, _x.radar_position.rad_fl_height_no_load, _x.radar_position.rad_fr_height_no_load, _x.radar_position.rad_rl_height_no_load, _x.radar_position.rad_rr_height_no_load, _x.radar_position.rad_fc_mount_angle, _x.radar_position.rad_fl_mount_angle, _x.radar_position.rad_fr_mount_angle, _x.radar_position.rad_rl_mount_angle, _x.radar_position.rad_rr_mount_angle, _x.radar_position.rad_fc_lat_dst_2_center, _x.radar_position.rad_fl_lat_dst_2_center, _x.radar_position.rad_fr_lat_dst_2_center, _x.radar_position.rad_rl_lat_dst_2_center, _x.radar_position.rad_rr_lat_dst_2_center, _x.radar_position.rad_fc_long_dst_2_rear_axle, _x.radar_position.rad_fl_long_dst_2_rear_axle, _x.radar_position.rad_fr_long_dst_2_rear_axle, _x.radar_position.rad_rl_long_dst_2_rear_axle, _x.radar_position.rad_rr_long_dst_2_rear_axle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.steer_ratio_martix_left_turn is None:
        self.steer_ratio_martix_left_turn = None
      if self.steer_ratio_martix_right_turn is None:
        self.steer_ratio_martix_right_turn = None
      if self.radar_position is None:
        self.radar_position = rospy_message_converter.msg.RadarPosition()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.wheel_base, _x.veh_overall_length, _x.veh_overall_width, _x.veh_width, _x.veh_height, _x.front_tread_width, _x.rear_tread_width,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.steer_ratio_martix_left_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.steer_ratio_martix_left_turn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.steer_ratio_martix_right_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.steer_ratio_martix_right_turn.append(val1)
      _x = self
      start = end
      end += 92
      (_x.front_bumper_to_rear_axle, _x.front_main_cam_to_front_bumper, _x.front_narrow_cam_to_front_bumper, _x.radar_position.rad_fc_height_no_load, _x.radar_position.rad_fl_height_no_load, _x.radar_position.rad_fr_height_no_load, _x.radar_position.rad_rl_height_no_load, _x.radar_position.rad_rr_height_no_load, _x.radar_position.rad_fc_mount_angle, _x.radar_position.rad_fl_mount_angle, _x.radar_position.rad_fr_mount_angle, _x.radar_position.rad_rl_mount_angle, _x.radar_position.rad_rr_mount_angle, _x.radar_position.rad_fc_lat_dst_2_center, _x.radar_position.rad_fl_lat_dst_2_center, _x.radar_position.rad_fr_lat_dst_2_center, _x.radar_position.rad_rl_lat_dst_2_center, _x.radar_position.rad_rr_lat_dst_2_center, _x.radar_position.rad_fc_long_dst_2_rear_axle, _x.radar_position.rad_fl_long_dst_2_rear_axle, _x.radar_position.rad_fr_long_dst_2_rear_axle, _x.radar_position.rad_rl_long_dst_2_rear_axle, _x.radar_position.rad_rr_long_dst_2_rear_axle,) = _get_struct_23f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.wheel_base, _x.veh_overall_length, _x.veh_overall_width, _x.veh_width, _x.veh_height, _x.front_tread_width, _x.rear_tread_width))
      length = len(self.steer_ratio_martix_left_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.steer_ratio_martix_left_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.steer_ratio_martix_right_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.steer_ratio_martix_right_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_23f().pack(_x.front_bumper_to_rear_axle, _x.front_main_cam_to_front_bumper, _x.front_narrow_cam_to_front_bumper, _x.radar_position.rad_fc_height_no_load, _x.radar_position.rad_fl_height_no_load, _x.radar_position.rad_fr_height_no_load, _x.radar_position.rad_rl_height_no_load, _x.radar_position.rad_rr_height_no_load, _x.radar_position.rad_fc_mount_angle, _x.radar_position.rad_fl_mount_angle, _x.radar_position.rad_fr_mount_angle, _x.radar_position.rad_rl_mount_angle, _x.radar_position.rad_rr_mount_angle, _x.radar_position.rad_fc_lat_dst_2_center, _x.radar_position.rad_fl_lat_dst_2_center, _x.radar_position.rad_fr_lat_dst_2_center, _x.radar_position.rad_rl_lat_dst_2_center, _x.radar_position.rad_rr_lat_dst_2_center, _x.radar_position.rad_fc_long_dst_2_rear_axle, _x.radar_position.rad_fl_long_dst_2_rear_axle, _x.radar_position.rad_fr_long_dst_2_rear_axle, _x.radar_position.rad_rl_long_dst_2_rear_axle, _x.radar_position.rad_rr_long_dst_2_rear_axle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.steer_ratio_martix_left_turn is None:
        self.steer_ratio_martix_left_turn = None
      if self.steer_ratio_martix_right_turn is None:
        self.steer_ratio_martix_right_turn = None
      if self.radar_position is None:
        self.radar_position = rospy_message_converter.msg.RadarPosition()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.wheel_base, _x.veh_overall_length, _x.veh_overall_width, _x.veh_width, _x.veh_height, _x.front_tread_width, _x.rear_tread_width,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.steer_ratio_martix_left_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.steer_ratio_martix_left_turn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.steer_ratio_martix_right_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.steer_ratio_martix_right_turn.append(val1)
      _x = self
      start = end
      end += 92
      (_x.front_bumper_to_rear_axle, _x.front_main_cam_to_front_bumper, _x.front_narrow_cam_to_front_bumper, _x.radar_position.rad_fc_height_no_load, _x.radar_position.rad_fl_height_no_load, _x.radar_position.rad_fr_height_no_load, _x.radar_position.rad_rl_height_no_load, _x.radar_position.rad_rr_height_no_load, _x.radar_position.rad_fc_mount_angle, _x.radar_position.rad_fl_mount_angle, _x.radar_position.rad_fr_mount_angle, _x.radar_position.rad_rl_mount_angle, _x.radar_position.rad_rr_mount_angle, _x.radar_position.rad_fc_lat_dst_2_center, _x.radar_position.rad_fl_lat_dst_2_center, _x.radar_position.rad_fr_lat_dst_2_center, _x.radar_position.rad_rl_lat_dst_2_center, _x.radar_position.rad_rr_lat_dst_2_center, _x.radar_position.rad_fc_long_dst_2_rear_axle, _x.radar_position.rad_fl_long_dst_2_rear_axle, _x.radar_position.rad_fr_long_dst_2_rear_axle, _x.radar_position.rad_rl_long_dst_2_rear_axle, _x.radar_position.rad_rr_long_dst_2_rear_axle,) = _get_struct_23f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_23f = None
def _get_struct_23f():
    global _struct_23f
    if _struct_23f is None:
        _struct_23f = struct.Struct("<23f")
    return _struct_23f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvCollisionData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvCollisionData(genpy.Message):
  _md5sum = "855241a2fbed0f38eee3ca9a56731838"
  _type = "rospy_message_converter/ParEnvCollisionData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 crash_distance
float32 obj_distance
float32 uss_region_distance
float32 center_x
float32 center_y
float32 center_yaw
ParEnvObjectPoint crash_pt1
ParEnvObjectPoint crash_pt2
uint32 path_index

================================================================================
MSG: rospy_message_converter/ParEnvObjectPoint
float32 x
float32 y
"""
  __slots__ = ['crash_distance','obj_distance','uss_region_distance','center_x','center_y','center_yaw','crash_pt1','crash_pt2','path_index']
  _slot_types = ['float32','float32','float32','float32','float32','float32','rospy_message_converter/ParEnvObjectPoint','rospy_message_converter/ParEnvObjectPoint','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       crash_distance,obj_distance,uss_region_distance,center_x,center_y,center_yaw,crash_pt1,crash_pt2,path_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvCollisionData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.crash_distance is None:
        self.crash_distance = 0.
      if self.obj_distance is None:
        self.obj_distance = 0.
      if self.uss_region_distance is None:
        self.uss_region_distance = 0.
      if self.center_x is None:
        self.center_x = 0.
      if self.center_y is None:
        self.center_y = 0.
      if self.center_yaw is None:
        self.center_yaw = 0.
      if self.crash_pt1 is None:
        self.crash_pt1 = rospy_message_converter.msg.ParEnvObjectPoint()
      if self.crash_pt2 is None:
        self.crash_pt2 = rospy_message_converter.msg.ParEnvObjectPoint()
      if self.path_index is None:
        self.path_index = 0
    else:
      self.crash_distance = 0.
      self.obj_distance = 0.
      self.uss_region_distance = 0.
      self.center_x = 0.
      self.center_y = 0.
      self.center_yaw = 0.
      self.crash_pt1 = rospy_message_converter.msg.ParEnvObjectPoint()
      self.crash_pt2 = rospy_message_converter.msg.ParEnvObjectPoint()
      self.path_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10fI().pack(_x.crash_distance, _x.obj_distance, _x.uss_region_distance, _x.center_x, _x.center_y, _x.center_yaw, _x.crash_pt1.x, _x.crash_pt1.y, _x.crash_pt2.x, _x.crash_pt2.y, _x.path_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.crash_pt1 is None:
        self.crash_pt1 = rospy_message_converter.msg.ParEnvObjectPoint()
      if self.crash_pt2 is None:
        self.crash_pt2 = rospy_message_converter.msg.ParEnvObjectPoint()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.crash_distance, _x.obj_distance, _x.uss_region_distance, _x.center_x, _x.center_y, _x.center_yaw, _x.crash_pt1.x, _x.crash_pt1.y, _x.crash_pt2.x, _x.crash_pt2.y, _x.path_index,) = _get_struct_10fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10fI().pack(_x.crash_distance, _x.obj_distance, _x.uss_region_distance, _x.center_x, _x.center_y, _x.center_yaw, _x.crash_pt1.x, _x.crash_pt1.y, _x.crash_pt2.x, _x.crash_pt2.y, _x.path_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.crash_pt1 is None:
        self.crash_pt1 = rospy_message_converter.msg.ParEnvObjectPoint()
      if self.crash_pt2 is None:
        self.crash_pt2 = rospy_message_converter.msg.ParEnvObjectPoint()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.crash_distance, _x.obj_distance, _x.uss_region_distance, _x.center_x, _x.center_y, _x.center_yaw, _x.crash_pt1.x, _x.crash_pt1.y, _x.crash_pt2.x, _x.crash_pt2.y, _x.path_index,) = _get_struct_10fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10fI = None
def _get_struct_10fI():
    global _struct_10fI
    if _struct_10fI is None:
        _struct_10fI = struct.Struct("<10fI")
    return _struct_10fI

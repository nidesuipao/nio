# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarDiagnoseCAN.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarDiagnoseCAN(genpy.Message):
  _md5sum = "681b545a9ecbe511e0ad3747a67f196b"
  _type = "rospy_message_converter/RadarDiagnoseCAN"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool blok_det
bool volt_low
bool volt_high
bool align_incomp
bool inter_fault
bool align_out_range
bool ivlid_data_adc
bool loss_comm_adc
bool temp_high
"""
  __slots__ = ['blok_det','volt_low','volt_high','align_incomp','inter_fault','align_out_range','ivlid_data_adc','loss_comm_adc','temp_high']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       blok_det,volt_low,volt_high,align_incomp,inter_fault,align_out_range,ivlid_data_adc,loss_comm_adc,temp_high

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarDiagnoseCAN, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.blok_det is None:
        self.blok_det = False
      if self.volt_low is None:
        self.volt_low = False
      if self.volt_high is None:
        self.volt_high = False
      if self.align_incomp is None:
        self.align_incomp = False
      if self.inter_fault is None:
        self.inter_fault = False
      if self.align_out_range is None:
        self.align_out_range = False
      if self.ivlid_data_adc is None:
        self.ivlid_data_adc = False
      if self.loss_comm_adc is None:
        self.loss_comm_adc = False
      if self.temp_high is None:
        self.temp_high = False
    else:
      self.blok_det = False
      self.volt_low = False
      self.volt_high = False
      self.align_incomp = False
      self.inter_fault = False
      self.align_out_range = False
      self.ivlid_data_adc = False
      self.loss_comm_adc = False
      self.temp_high = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.blok_det, _x.volt_low, _x.volt_high, _x.align_incomp, _x.inter_fault, _x.align_out_range, _x.ivlid_data_adc, _x.loss_comm_adc, _x.temp_high))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.blok_det, _x.volt_low, _x.volt_high, _x.align_incomp, _x.inter_fault, _x.align_out_range, _x.ivlid_data_adc, _x.loss_comm_adc, _x.temp_high,) = _get_struct_9B().unpack(str[start:end])
      self.blok_det = bool(self.blok_det)
      self.volt_low = bool(self.volt_low)
      self.volt_high = bool(self.volt_high)
      self.align_incomp = bool(self.align_incomp)
      self.inter_fault = bool(self.inter_fault)
      self.align_out_range = bool(self.align_out_range)
      self.ivlid_data_adc = bool(self.ivlid_data_adc)
      self.loss_comm_adc = bool(self.loss_comm_adc)
      self.temp_high = bool(self.temp_high)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.blok_det, _x.volt_low, _x.volt_high, _x.align_incomp, _x.inter_fault, _x.align_out_range, _x.ivlid_data_adc, _x.loss_comm_adc, _x.temp_high))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.blok_det, _x.volt_low, _x.volt_high, _x.align_incomp, _x.inter_fault, _x.align_out_range, _x.ivlid_data_adc, _x.loss_comm_adc, _x.temp_high,) = _get_struct_9B().unpack(str[start:end])
      self.blok_det = bool(self.blok_det)
      self.volt_low = bool(self.volt_low)
      self.volt_high = bool(self.volt_high)
      self.align_incomp = bool(self.align_incomp)
      self.inter_fault = bool(self.inter_fault)
      self.align_out_range = bool(self.align_out_range)
      self.ivlid_data_adc = bool(self.ivlid_data_adc)
      self.loss_comm_adc = bool(self.loss_comm_adc)
      self.temp_high = bool(self.temp_high)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B

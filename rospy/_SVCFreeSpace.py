# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SVCFreeSpace.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SVCFreeSpace(genpy.Message):
  _md5sum = "952e7b5b272c985f49bea12ffd6f53a8"
  _type = "rospy_message_converter/SVCFreeSpace"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 grid_size
int32 gridshape_row
int32 gridshape_col
float32 grid_pos_x
float32 grid_pos_y
FSBoundary[] boundary_maps
int32[] origin_grid_map
uint64 timestamp
float32 confidence
int32 reserved1
int32 reserved2
FSPoint[] boundary_map_FL
FSPoint[] boundary_map_FR

================================================================================
MSG: rospy_message_converter/FSBoundary
FSPoint[] boundary_map
int32 boundary_num
int32 boundary_type

================================================================================
MSG: rospy_message_converter/FSPoint
float32 X
float32 y
int32 point_type
int32 ground_type
"""
  __slots__ = ['grid_size','gridshape_row','gridshape_col','grid_pos_x','grid_pos_y','boundary_maps','origin_grid_map','timestamp','confidence','reserved1','reserved2','boundary_map_FL','boundary_map_FR']
  _slot_types = ['float32','int32','int32','float32','float32','rospy_message_converter/FSBoundary[]','int32[]','uint64','float32','int32','int32','rospy_message_converter/FSPoint[]','rospy_message_converter/FSPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grid_size,gridshape_row,gridshape_col,grid_pos_x,grid_pos_y,boundary_maps,origin_grid_map,timestamp,confidence,reserved1,reserved2,boundary_map_FL,boundary_map_FR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SVCFreeSpace, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.grid_size is None:
        self.grid_size = 0.
      if self.gridshape_row is None:
        self.gridshape_row = 0
      if self.gridshape_col is None:
        self.gridshape_col = 0
      if self.grid_pos_x is None:
        self.grid_pos_x = 0.
      if self.grid_pos_y is None:
        self.grid_pos_y = 0.
      if self.boundary_maps is None:
        self.boundary_maps = []
      if self.origin_grid_map is None:
        self.origin_grid_map = []
      if self.timestamp is None:
        self.timestamp = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.reserved1 is None:
        self.reserved1 = 0
      if self.reserved2 is None:
        self.reserved2 = 0
      if self.boundary_map_FL is None:
        self.boundary_map_FL = []
      if self.boundary_map_FR is None:
        self.boundary_map_FR = []
    else:
      self.grid_size = 0.
      self.gridshape_row = 0
      self.gridshape_col = 0
      self.grid_pos_x = 0.
      self.grid_pos_y = 0.
      self.boundary_maps = []
      self.origin_grid_map = []
      self.timestamp = 0
      self.confidence = 0.
      self.reserved1 = 0
      self.reserved2 = 0
      self.boundary_map_FL = []
      self.boundary_map_FR = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_f2i2f().pack(_x.grid_size, _x.gridshape_row, _x.gridshape_col, _x.grid_pos_x, _x.grid_pos_y))
      length = len(self.boundary_maps)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary_maps:
        length = len(val1.boundary_map)
        buff.write(_struct_I.pack(length))
        for val2 in val1.boundary_map:
          _x = val2
          buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.boundary_num, _x.boundary_type))
      length = len(self.origin_grid_map)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.origin_grid_map))
      _x = self
      buff.write(_get_struct_Qf2i().pack(_x.timestamp, _x.confidence, _x.reserved1, _x.reserved2))
      length = len(self.boundary_map_FL)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary_map_FL:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
      length = len(self.boundary_map_FR)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary_map_FR:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.boundary_maps is None:
        self.boundary_maps = None
      if self.boundary_map_FL is None:
        self.boundary_map_FL = None
      if self.boundary_map_FR is None:
        self.boundary_map_FR = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.grid_size, _x.gridshape_row, _x.gridshape_col, _x.grid_pos_x, _x.grid_pos_y,) = _get_struct_f2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary_maps = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSBoundary()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.boundary_map = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.FSPoint()
          _x = val2
          start = end
          end += 16
          (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
          val1.boundary_map.append(val2)
        _x = val1
        start = end
        end += 8
        (_x.boundary_num, _x.boundary_type,) = _get_struct_2i().unpack(str[start:end])
        self.boundary_maps.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.origin_grid_map = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.timestamp, _x.confidence, _x.reserved1, _x.reserved2,) = _get_struct_Qf2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary_map_FL = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.boundary_map_FL.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary_map_FR = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.boundary_map_FR.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_f2i2f().pack(_x.grid_size, _x.gridshape_row, _x.gridshape_col, _x.grid_pos_x, _x.grid_pos_y))
      length = len(self.boundary_maps)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary_maps:
        length = len(val1.boundary_map)
        buff.write(_struct_I.pack(length))
        for val2 in val1.boundary_map:
          _x = val2
          buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.boundary_num, _x.boundary_type))
      length = len(self.origin_grid_map)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.origin_grid_map.tostring())
      _x = self
      buff.write(_get_struct_Qf2i().pack(_x.timestamp, _x.confidence, _x.reserved1, _x.reserved2))
      length = len(self.boundary_map_FL)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary_map_FL:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
      length = len(self.boundary_map_FR)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary_map_FR:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.boundary_maps is None:
        self.boundary_maps = None
      if self.boundary_map_FL is None:
        self.boundary_map_FL = None
      if self.boundary_map_FR is None:
        self.boundary_map_FR = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.grid_size, _x.gridshape_row, _x.gridshape_col, _x.grid_pos_x, _x.grid_pos_y,) = _get_struct_f2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary_maps = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSBoundary()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.boundary_map = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.FSPoint()
          _x = val2
          start = end
          end += 16
          (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
          val1.boundary_map.append(val2)
        _x = val1
        start = end
        end += 8
        (_x.boundary_num, _x.boundary_type,) = _get_struct_2i().unpack(str[start:end])
        self.boundary_maps.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.origin_grid_map = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.timestamp, _x.confidence, _x.reserved1, _x.reserved2,) = _get_struct_Qf2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary_map_FL = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.boundary_map_FL.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary_map_FR = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.boundary_map_FR.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2i = None
def _get_struct_2f2i():
    global _struct_2f2i
    if _struct_2f2i is None:
        _struct_2f2i = struct.Struct("<2f2i")
    return _struct_2f2i
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_Qf2i = None
def _get_struct_Qf2i():
    global _struct_Qf2i
    if _struct_Qf2i is None:
        _struct_Qf2i = struct.Struct("<Qf2i")
    return _struct_Qf2i
_struct_f2i2f = None
def _get_struct_f2i2f():
    global _struct_f2i2f
    if _struct_f2i2f is None:
        _struct_f2i2f = struct.Struct("<f2i2f")
    return _struct_f2i2f

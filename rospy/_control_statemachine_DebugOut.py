# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/control_statemachine_DebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_statemachine_DebugOut(genpy.Message):
  _md5sum = "27ef922b5bf930136fba0ecb0a7d181d"
  _type = "rospy_message_converter/control_statemachine_DebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool estop
string status
int32 control_state
bool is_finish
int32 aborttype
bool is_eps_hand_shake_ok
bool is_vcu_hand_shake_ok
int32 Gear_request
float32 Steering_output
float32 current_location_x
float32 current_location_y
float32 target_location_x
float32 target_location_y
int32 bind_status
bool has_receive_10ms
bool has_receive_bind
bool has_receive_planning
bool has_receive_location
float32 steer_angle_feedback
float32 steer_angle_feedforward
float64 stop_distance
float64 sum_s
"""
  __slots__ = ['estop','status','control_state','is_finish','aborttype','is_eps_hand_shake_ok','is_vcu_hand_shake_ok','Gear_request','Steering_output','current_location_x','current_location_y','target_location_x','target_location_y','bind_status','has_receive_10ms','has_receive_bind','has_receive_planning','has_receive_location','steer_angle_feedback','steer_angle_feedforward','stop_distance','sum_s']
  _slot_types = ['bool','string','int32','bool','int32','bool','bool','int32','float32','float32','float32','float32','float32','int32','bool','bool','bool','bool','float32','float32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       estop,status,control_state,is_finish,aborttype,is_eps_hand_shake_ok,is_vcu_hand_shake_ok,Gear_request,Steering_output,current_location_x,current_location_y,target_location_x,target_location_y,bind_status,has_receive_10ms,has_receive_bind,has_receive_planning,has_receive_location,steer_angle_feedback,steer_angle_feedforward,stop_distance,sum_s

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_statemachine_DebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.estop is None:
        self.estop = False
      if self.status is None:
        self.status = ''
      if self.control_state is None:
        self.control_state = 0
      if self.is_finish is None:
        self.is_finish = False
      if self.aborttype is None:
        self.aborttype = 0
      if self.is_eps_hand_shake_ok is None:
        self.is_eps_hand_shake_ok = False
      if self.is_vcu_hand_shake_ok is None:
        self.is_vcu_hand_shake_ok = False
      if self.Gear_request is None:
        self.Gear_request = 0
      if self.Steering_output is None:
        self.Steering_output = 0.
      if self.current_location_x is None:
        self.current_location_x = 0.
      if self.current_location_y is None:
        self.current_location_y = 0.
      if self.target_location_x is None:
        self.target_location_x = 0.
      if self.target_location_y is None:
        self.target_location_y = 0.
      if self.bind_status is None:
        self.bind_status = 0
      if self.has_receive_10ms is None:
        self.has_receive_10ms = False
      if self.has_receive_bind is None:
        self.has_receive_bind = False
      if self.has_receive_planning is None:
        self.has_receive_planning = False
      if self.has_receive_location is None:
        self.has_receive_location = False
      if self.steer_angle_feedback is None:
        self.steer_angle_feedback = 0.
      if self.steer_angle_feedforward is None:
        self.steer_angle_feedforward = 0.
      if self.stop_distance is None:
        self.stop_distance = 0.
      if self.sum_s is None:
        self.sum_s = 0.
    else:
      self.estop = False
      self.status = ''
      self.control_state = 0
      self.is_finish = False
      self.aborttype = 0
      self.is_eps_hand_shake_ok = False
      self.is_vcu_hand_shake_ok = False
      self.Gear_request = 0
      self.Steering_output = 0.
      self.current_location_x = 0.
      self.current_location_y = 0.
      self.target_location_x = 0.
      self.target_location_y = 0.
      self.bind_status = 0
      self.has_receive_10ms = False
      self.has_receive_bind = False
      self.has_receive_planning = False
      self.has_receive_location = False
      self.steer_angle_feedback = 0.
      self.steer_angle_feedforward = 0.
      self.stop_distance = 0.
      self.sum_s = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.estop
      buff.write(_get_struct_B().pack(_x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iBi2Bi5fi4B2f2d().pack(_x.control_state, _x.is_finish, _x.aborttype, _x.is_eps_hand_shake_ok, _x.is_vcu_hand_shake_ok, _x.Gear_request, _x.Steering_output, _x.current_location_x, _x.current_location_y, _x.target_location_x, _x.target_location_y, _x.bind_status, _x.has_receive_10ms, _x.has_receive_bind, _x.has_receive_planning, _x.has_receive_location, _x.steer_angle_feedback, _x.steer_angle_feedforward, _x.stop_distance, _x.sum_s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.estop,) = _get_struct_B().unpack(str[start:end])
      self.estop = bool(self.estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 67
      (_x.control_state, _x.is_finish, _x.aborttype, _x.is_eps_hand_shake_ok, _x.is_vcu_hand_shake_ok, _x.Gear_request, _x.Steering_output, _x.current_location_x, _x.current_location_y, _x.target_location_x, _x.target_location_y, _x.bind_status, _x.has_receive_10ms, _x.has_receive_bind, _x.has_receive_planning, _x.has_receive_location, _x.steer_angle_feedback, _x.steer_angle_feedforward, _x.stop_distance, _x.sum_s,) = _get_struct_iBi2Bi5fi4B2f2d().unpack(str[start:end])
      self.is_finish = bool(self.is_finish)
      self.is_eps_hand_shake_ok = bool(self.is_eps_hand_shake_ok)
      self.is_vcu_hand_shake_ok = bool(self.is_vcu_hand_shake_ok)
      self.has_receive_10ms = bool(self.has_receive_10ms)
      self.has_receive_bind = bool(self.has_receive_bind)
      self.has_receive_planning = bool(self.has_receive_planning)
      self.has_receive_location = bool(self.has_receive_location)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.estop
      buff.write(_get_struct_B().pack(_x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iBi2Bi5fi4B2f2d().pack(_x.control_state, _x.is_finish, _x.aborttype, _x.is_eps_hand_shake_ok, _x.is_vcu_hand_shake_ok, _x.Gear_request, _x.Steering_output, _x.current_location_x, _x.current_location_y, _x.target_location_x, _x.target_location_y, _x.bind_status, _x.has_receive_10ms, _x.has_receive_bind, _x.has_receive_planning, _x.has_receive_location, _x.steer_angle_feedback, _x.steer_angle_feedforward, _x.stop_distance, _x.sum_s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.estop,) = _get_struct_B().unpack(str[start:end])
      self.estop = bool(self.estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 67
      (_x.control_state, _x.is_finish, _x.aborttype, _x.is_eps_hand_shake_ok, _x.is_vcu_hand_shake_ok, _x.Gear_request, _x.Steering_output, _x.current_location_x, _x.current_location_y, _x.target_location_x, _x.target_location_y, _x.bind_status, _x.has_receive_10ms, _x.has_receive_bind, _x.has_receive_planning, _x.has_receive_location, _x.steer_angle_feedback, _x.steer_angle_feedforward, _x.stop_distance, _x.sum_s,) = _get_struct_iBi2Bi5fi4B2f2d().unpack(str[start:end])
      self.is_finish = bool(self.is_finish)
      self.is_eps_hand_shake_ok = bool(self.is_eps_hand_shake_ok)
      self.is_vcu_hand_shake_ok = bool(self.is_vcu_hand_shake_ok)
      self.has_receive_10ms = bool(self.has_receive_10ms)
      self.has_receive_bind = bool(self.has_receive_bind)
      self.has_receive_planning = bool(self.has_receive_planning)
      self.has_receive_location = bool(self.has_receive_location)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_iBi2Bi5fi4B2f2d = None
def _get_struct_iBi2Bi5fi4B2f2d():
    global _struct_iBi2Bi5fi4B2f2d
    if _struct_iBi2Bi5fi4B2f2d is None:
        _struct_iBi2Bi5fi4B2f2d = struct.Struct("<iBi2Bi5fi4B2f2d")
    return _struct_iBi2Bi5fi4B2f2d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FusObjSup.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FusObjSup(genpy.Message):
  _md5sum = "41d901bb44b0137b7ff610efd8dcd97a"
  _type = "rospy_message_converter/FusObjSup"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32[] track_cnt
uint32 moving_cnt
bool fsp_cam_obj_disagree
MatchInfo[] radar_match_list
MatchInfo vision_match
ObjMotion[] meas_motion
int32[] merged_idx
uint32 debug_reserved

================================================================================
MSG: rospy_message_converter/MatchInfo
uint32 id
uint32 idx
uint32 loose_match_cnt

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std
"""
  __slots__ = ['track_cnt','moving_cnt','fsp_cam_obj_disagree','radar_match_list','vision_match','meas_motion','merged_idx','debug_reserved']
  _slot_types = ['uint32[]','uint32','bool','rospy_message_converter/MatchInfo[]','rospy_message_converter/MatchInfo','rospy_message_converter/ObjMotion[]','int32[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       track_cnt,moving_cnt,fsp_cam_obj_disagree,radar_match_list,vision_match,meas_motion,merged_idx,debug_reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusObjSup, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.track_cnt is None:
        self.track_cnt = []
      if self.moving_cnt is None:
        self.moving_cnt = 0
      if self.fsp_cam_obj_disagree is None:
        self.fsp_cam_obj_disagree = False
      if self.radar_match_list is None:
        self.radar_match_list = []
      if self.vision_match is None:
        self.vision_match = rospy_message_converter.msg.MatchInfo()
      if self.meas_motion is None:
        self.meas_motion = []
      if self.merged_idx is None:
        self.merged_idx = []
      if self.debug_reserved is None:
        self.debug_reserved = 0
    else:
      self.track_cnt = []
      self.moving_cnt = 0
      self.fsp_cam_obj_disagree = False
      self.radar_match_list = []
      self.vision_match = rospy_message_converter.msg.MatchInfo()
      self.meas_motion = []
      self.merged_idx = []
      self.debug_reserved = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.track_cnt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.track_cnt))
      _x = self
      buff.write(_get_struct_IB().pack(_x.moving_cnt, _x.fsp_cam_obj_disagree))
      length = len(self.radar_match_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_match_list:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vision_match.id, _x.vision_match.idx, _x.vision_match.loose_match_cnt))
      length = len(self.meas_motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.meas_motion:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v2 = val1.pos_std
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
        _v3 = val1.vel
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v4 = val1.vel_std
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
        _v5 = val1.acc
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _v6 = val1.acc_std
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
        _v7 = val1.size
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v8 = val1.size_std
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
        _x = val1
        buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
      length = len(self.merged_idx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.merged_idx))
      _x = self.debug_reserved
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.radar_match_list is None:
        self.radar_match_list = None
      if self.vision_match is None:
        self.vision_match = rospy_message_converter.msg.MatchInfo()
      if self.meas_motion is None:
        self.meas_motion = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.track_cnt = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.moving_cnt, _x.fsp_cam_obj_disagree,) = _get_struct_IB().unpack(str[start:end])
      self.fsp_cam_obj_disagree = bool(self.fsp_cam_obj_disagree)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_match_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MatchInfo()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
        self.radar_match_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.vision_match.id, _x.vision_match.idx, _x.vision_match.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meas_motion = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjMotion()
        _v9 = val1.pos
        _x = _v9
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v10 = val1.pos_std
        _x = _v10
        start = end
        end += 12
        (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
        _v11 = val1.vel
        _x = _v11
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v12 = val1.vel_std
        _x = _v12
        start = end
        end += 12
        (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
        _v13 = val1.acc
        _x = _v13
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _v14 = val1.acc_std
        _x = _v14
        start = end
        end += 12
        (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
        _v15 = val1.size
        _x = _v15
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v16 = val1.size_std
        _x = _v16
        start = end
        end += 12
        (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
        self.meas_motion.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.merged_idx = s.unpack(str[start:end])
      start = end
      end += 4
      (self.debug_reserved,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.track_cnt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.track_cnt.tostring())
      _x = self
      buff.write(_get_struct_IB().pack(_x.moving_cnt, _x.fsp_cam_obj_disagree))
      length = len(self.radar_match_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.radar_match_list:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vision_match.id, _x.vision_match.idx, _x.vision_match.loose_match_cnt))
      length = len(self.meas_motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.meas_motion:
        _v17 = val1.pos
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v18 = val1.pos_std
        _x = _v18
        buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
        _v19 = val1.vel
        _x = _v19
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v20 = val1.vel_std
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
        _v21 = val1.acc
        _x = _v21
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _v22 = val1.acc_std
        _x = _v22
        buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
        _v23 = val1.size
        _x = _v23
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _v24 = val1.size_std
        _x = _v24
        buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
        _x = val1
        buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
      length = len(self.merged_idx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.merged_idx.tostring())
      _x = self.debug_reserved
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.radar_match_list is None:
        self.radar_match_list = None
      if self.vision_match is None:
        self.vision_match = rospy_message_converter.msg.MatchInfo()
      if self.meas_motion is None:
        self.meas_motion = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.track_cnt = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 5
      (_x.moving_cnt, _x.fsp_cam_obj_disagree,) = _get_struct_IB().unpack(str[start:end])
      self.fsp_cam_obj_disagree = bool(self.fsp_cam_obj_disagree)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.radar_match_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MatchInfo()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
        self.radar_match_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.vision_match.id, _x.vision_match.idx, _x.vision_match.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.meas_motion = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjMotion()
        _v25 = val1.pos
        _x = _v25
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v26 = val1.pos_std
        _x = _v26
        start = end
        end += 12
        (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
        _v27 = val1.vel
        _x = _v27
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v28 = val1.vel_std
        _x = _v28
        start = end
        end += 12
        (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
        _v29 = val1.acc
        _x = _v29
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _v30 = val1.acc_std
        _x = _v30
        start = end
        end += 12
        (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
        _v31 = val1.size
        _x = _v31
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _v32 = val1.size_std
        _x = _v32
        start = end
        end += 12
        (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
        self.meas_motion.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.merged_idx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.debug_reserved,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_fif = None
def _get_struct_fif():
    global _struct_fif
    if _struct_fif is None:
        _struct_fif = struct.Struct("<fif")
    return _struct_fif

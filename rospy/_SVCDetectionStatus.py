# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SVCDetectionStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SVCDetectionStatus(genpy.Message):
  _md5sum = "b972243858d97037160c495a7f94db0b"
  _type = "rospy_message_converter/SVCDetectionStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 svc_det_status_type
bool svcsapa_detection_avl
bool svcpowerswap_detection_avl
int32 svc_det_sub_status_type
SVCAlarm[] svc_alarms
SVCFault[] svc_faults
bool is_dlb_triggered
SVCDLBRequest dlb_request

================================================================================
MSG: rospy_message_converter/SVCAlarm
int32 alarm_type
int32 alarm_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCFault
int32 fault_type
int32 fault_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCDLBRequest
int32 index
int32 dlb_reason_type
int32 dlb_reason_code
uint64 dlb_begin_timestamp_utc
uint64 dlb_end_timestamp_utc
string description
"""
  __slots__ = ['svc_det_status_type','svcsapa_detection_avl','svcpowerswap_detection_avl','svc_det_sub_status_type','svc_alarms','svc_faults','is_dlb_triggered','dlb_request']
  _slot_types = ['int32','bool','bool','int32','rospy_message_converter/SVCAlarm[]','rospy_message_converter/SVCFault[]','bool','rospy_message_converter/SVCDLBRequest']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       svc_det_status_type,svcsapa_detection_avl,svcpowerswap_detection_avl,svc_det_sub_status_type,svc_alarms,svc_faults,is_dlb_triggered,dlb_request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SVCDetectionStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.svc_det_status_type is None:
        self.svc_det_status_type = 0
      if self.svcsapa_detection_avl is None:
        self.svcsapa_detection_avl = False
      if self.svcpowerswap_detection_avl is None:
        self.svcpowerswap_detection_avl = False
      if self.svc_det_sub_status_type is None:
        self.svc_det_sub_status_type = 0
      if self.svc_alarms is None:
        self.svc_alarms = []
      if self.svc_faults is None:
        self.svc_faults = []
      if self.is_dlb_triggered is None:
        self.is_dlb_triggered = False
      if self.dlb_request is None:
        self.dlb_request = rospy_message_converter.msg.SVCDLBRequest()
    else:
      self.svc_det_status_type = 0
      self.svcsapa_detection_avl = False
      self.svcpowerswap_detection_avl = False
      self.svc_det_sub_status_type = 0
      self.svc_alarms = []
      self.svc_faults = []
      self.is_dlb_triggered = False
      self.dlb_request = rospy_message_converter.msg.SVCDLBRequest()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2Bi().pack(_x.svc_det_status_type, _x.svcsapa_detection_avl, _x.svcpowerswap_detection_avl, _x.svc_det_sub_status_type))
      length = len(self.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.is_dlb_triggered, _x.dlb_request.index, _x.dlb_request.dlb_reason_type, _x.dlb_request.dlb_reason_code, _x.dlb_request.dlb_begin_timestamp_utc, _x.dlb_request.dlb_end_timestamp_utc))
      _x = self.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.svc_alarms is None:
        self.svc_alarms = None
      if self.svc_faults is None:
        self.svc_faults = None
      if self.dlb_request is None:
        self.dlb_request = rospy_message_converter.msg.SVCDLBRequest()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.svc_det_status_type, _x.svcsapa_detection_avl, _x.svcpowerswap_detection_avl, _x.svc_det_sub_status_type,) = _get_struct_i2Bi().unpack(str[start:end])
      self.svcsapa_detection_avl = bool(self.svcsapa_detection_avl)
      self.svcpowerswap_detection_avl = bool(self.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.is_dlb_triggered, _x.dlb_request.index, _x.dlb_request.dlb_reason_type, _x.dlb_request.dlb_reason_code, _x.dlb_request.dlb_begin_timestamp_utc, _x.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.is_dlb_triggered = bool(self.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dlb_request.description = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2Bi().pack(_x.svc_det_status_type, _x.svcsapa_detection_avl, _x.svcpowerswap_detection_avl, _x.svc_det_sub_status_type))
      length = len(self.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.is_dlb_triggered, _x.dlb_request.index, _x.dlb_request.dlb_reason_type, _x.dlb_request.dlb_reason_code, _x.dlb_request.dlb_begin_timestamp_utc, _x.dlb_request.dlb_end_timestamp_utc))
      _x = self.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.svc_alarms is None:
        self.svc_alarms = None
      if self.svc_faults is None:
        self.svc_faults = None
      if self.dlb_request is None:
        self.dlb_request = rospy_message_converter.msg.SVCDLBRequest()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.svc_det_status_type, _x.svcsapa_detection_avl, _x.svcpowerswap_detection_avl, _x.svc_det_sub_status_type,) = _get_struct_i2Bi().unpack(str[start:end])
      self.svcsapa_detection_avl = bool(self.svcsapa_detection_avl)
      self.svcpowerswap_detection_avl = bool(self.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.is_dlb_triggered, _x.dlb_request.index, _x.dlb_request.dlb_reason_type, _x.dlb_request.dlb_reason_code, _x.dlb_request.dlb_begin_timestamp_utc, _x.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.is_dlb_triggered = bool(self.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dlb_request.description = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2Qi = None
def _get_struct_2i2Qi():
    global _struct_2i2Qi
    if _struct_2i2Qi is None:
        _struct_2i2Qi = struct.Struct("<2i2Qi")
    return _struct_2i2Qi
_struct_B3i2Q = None
def _get_struct_B3i2Q():
    global _struct_B3i2Q
    if _struct_B3i2Q is None:
        _struct_B3i2Q = struct.Struct("<B3i2Q")
    return _struct_B3i2Q
_struct_i2Bi = None
def _get_struct_i2Bi():
    global _struct_i2Bi
    if _struct_i2Bi is None:
        _struct_i2Bi = struct.Struct("<i2Bi")
    return _struct_i2Bi

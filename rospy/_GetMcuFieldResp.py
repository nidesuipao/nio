# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/GetMcuFieldResp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class GetMcuFieldResp(genpy.Message):
  _md5sum = "5df4c89f7c39ee8ff147866b654f0e12"
  _type = "rospy_message_converter/GetMcuFieldResp"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 target_mcu
int32 field_type
Fields fields
int32 error_code

================================================================================
MSG: rospy_message_converter/Fields
McuVersion mcu_version
VariantConfig variant_config
HwMetaInfo hw_meta_info

================================================================================
MSG: rospy_message_converter/McuVersion
string git_commit_hash
string git_commit_author
string git_branch
string git_status
string build_date
string build_machine
string sw_part_number

================================================================================
MSG: rospy_message_converter/VariantConfig
int32 vehicle_project

================================================================================
MSG: rospy_message_converter/HwMetaInfo
string hw_part_number
string hw_revision_number
string hw_serial_number
string hw_board_version
string mcu_chip_version
string ufs_type
"""
  __slots__ = ['target_mcu','field_type','fields','error_code']
  _slot_types = ['int32','int32','rospy_message_converter/Fields','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_mcu,field_type,fields,error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMcuFieldResp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_mcu is None:
        self.target_mcu = 0
      if self.field_type is None:
        self.field_type = 0
      if self.fields is None:
        self.fields = rospy_message_converter.msg.Fields()
      if self.error_code is None:
        self.error_code = 0
    else:
      self.target_mcu = 0
      self.field_type = 0
      self.fields = rospy_message_converter.msg.Fields()
      self.error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.target_mcu, _x.field_type))
      _x = self.fields.mcu_version.git_commit_hash
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.git_commit_author
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.git_branch
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.git_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.build_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.build_machine
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.sw_part_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.variant_config.vehicle_project
      buff.write(_get_struct_i().pack(_x))
      _x = self.fields.hw_meta_info.hw_part_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.hw_revision_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.hw_serial_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.hw_board_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.mcu_chip_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.ufs_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.error_code
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fields is None:
        self.fields = rospy_message_converter.msg.Fields()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.target_mcu, _x.field_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_commit_hash = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_commit_hash = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_commit_author = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_commit_author = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_branch = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_branch = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.build_date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.build_date = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.build_machine = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.build_machine = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.sw_part_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.sw_part_number = str[start:end]
      start = end
      end += 4
      (self.fields.variant_config.vehicle_project,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_part_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_part_number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_revision_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_revision_number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_serial_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_serial_number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_board_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_board_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.mcu_chip_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.mcu_chip_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.ufs_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.ufs_type = str[start:end]
      start = end
      end += 4
      (self.error_code,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.target_mcu, _x.field_type))
      _x = self.fields.mcu_version.git_commit_hash
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.git_commit_author
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.git_branch
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.git_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.build_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.build_machine
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.mcu_version.sw_part_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.variant_config.vehicle_project
      buff.write(_get_struct_i().pack(_x))
      _x = self.fields.hw_meta_info.hw_part_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.hw_revision_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.hw_serial_number
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.hw_board_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.mcu_chip_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fields.hw_meta_info.ufs_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.error_code
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fields is None:
        self.fields = rospy_message_converter.msg.Fields()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.target_mcu, _x.field_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_commit_hash = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_commit_hash = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_commit_author = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_commit_author = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_branch = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_branch = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.git_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.git_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.build_date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.build_date = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.build_machine = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.build_machine = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.mcu_version.sw_part_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.mcu_version.sw_part_number = str[start:end]
      start = end
      end += 4
      (self.fields.variant_config.vehicle_project,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_part_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_part_number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_revision_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_revision_number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_serial_number = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_serial_number = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.hw_board_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.hw_board_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.mcu_chip_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.mcu_chip_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fields.hw_meta_info.ufs_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fields.hw_meta_info.ufs_type = str[start:end]
      start = end
      end += 4
      (self.error_code,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

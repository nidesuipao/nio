# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/WhlDynInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WhlDynInfo(genpy.Message):
  _md5sum = "794c6252753ba81650e2342682b4e480"
  _type = "rospy_message_converter/WhlDynInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 WhlSpdSts
int32 WhlSpdMovgDir
float32 WhlSpd
int32 WhlPlsCntrVld
uint32 WhlPlsCntr
uint64 WhlSpd_Timestamp
uint64 timestamp_ptp_ns
"""
  __slots__ = ['WhlSpdSts','WhlSpdMovgDir','WhlSpd','WhlPlsCntrVld','WhlPlsCntr','WhlSpd_Timestamp','timestamp_ptp_ns']
  _slot_types = ['int32','int32','float32','int32','uint32','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       WhlSpdSts,WhlSpdMovgDir,WhlSpd,WhlPlsCntrVld,WhlPlsCntr,WhlSpd_Timestamp,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WhlDynInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.WhlSpdSts is None:
        self.WhlSpdSts = 0
      if self.WhlSpdMovgDir is None:
        self.WhlSpdMovgDir = 0
      if self.WhlSpd is None:
        self.WhlSpd = 0.
      if self.WhlPlsCntrVld is None:
        self.WhlPlsCntrVld = 0
      if self.WhlPlsCntr is None:
        self.WhlPlsCntr = 0
      if self.WhlSpd_Timestamp is None:
        self.WhlSpd_Timestamp = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
    else:
      self.WhlSpdSts = 0
      self.WhlSpdMovgDir = 0
      self.WhlSpd = 0.
      self.WhlPlsCntrVld = 0
      self.WhlPlsCntr = 0
      self.WhlSpd_Timestamp = 0
      self.timestamp_ptp_ns = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ifiI2Q = None
def _get_struct_2ifiI2Q():
    global _struct_2ifiI2Q
    if _struct_2ifiI2Q is None:
        _struct_2ifiI2Q = struct.Struct("<2ifiI2Q")
    return _struct_2ifiI2Q

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AdasMap.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AdasMap(genpy.Message):
  _md5sum = "d4d4e73809f2904bf38546ce5747801c"
  _type = "rospy_message_converter/AdasMap"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """AdasMapInfo adas_info
AdasNavInfo navigation_info
AdasMapPoint3d map_loc
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/AdasMapInfo
bool is_adasmap_valid
uint32 m_adasmap_is_highway
AdasMapMeta adas_meta
AdasMapSegment[] segment
AdasMapProfilePoint[] profile_point
AdasMapStub[] stub
AdasMapTrafficSign[] traffic_sign
AdasMapLaneConnection[] lane_connection
AdasMapTrafficEvent[] traffic_event
AdasMapTrafficFlow[] traffic_flow
AdasMapPathShape main_path_shape
AdasMapPathShape[] sub_path_shapes
AdasMapCurvature[] main_path_curvatures
bool is_position_good
bool is_curr_horizon_empty
bool is_pos_outdated
AdasMapSubPathSegments[] sub_path_segments

================================================================================
MSG: rospy_message_converter/AdasMapMeta
uint32 country_code
uint32 speed_unit
uint32 provider

================================================================================
MSG: rospy_message_converter/AdasMapSegment
uint64 offset
uint64 index
uint64 path_idx
int32 road_class
uint64 seg_spd_lmt
int32 seg_spd_lmt_type
bool is_tunnel
bool is_bridge
uint32 form_of_way
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 relative_probability
bool is_divided_road
bool is_build_up_area
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir

================================================================================
MSG: rospy_message_converter/AdasMapProfilePoint
uint64 offset
uint64 index
int32 type
uint64 value
bool is_control_point
float64 decoded_value

================================================================================
MSG: rospy_message_converter/AdasMapStub
uint64 offset
uint64 index
uint64 path_idx
uint32 sub_path_idx
uint32 relative_probability
int32 road_class
bool is_part_of_calculated_route
bool is_complex_intersection
uint32 form_of_way
uint32 turn_angle
bool is_last_stub
uint32 right_of_way
uint32 num_of_lanes_opp_dir
uint32 num_of_lanes_drv_dir

================================================================================
MSG: rospy_message_converter/AdasMapTrafficSign
uint64 offset
uint64 index
uint64 path_idx
uint64 sign_type
uint64 value
uint32 lane
uint32 vehicle_specific
uint32 time_specific
uint64 condition
uint32 sign_location
bool position_valid
AdasMapPoint2d position_pt
float64 height

================================================================================
MSG: rospy_message_converter/AdasMapPoint2d
float64 longitude
float64 latitude
float64 utm_x
float64 utm_y

================================================================================
MSG: rospy_message_converter/AdasMapLaneConnection
uint64 offset
uint64 index
uint64 path_idx
uint32 lane_num
uint32 first_predecessor_lane
uint32 last_predecessor_lane
uint32 priority_predecessor_lane
uint32 arrow_marking
uint32 lane_type
uint32 line_marking
uint32 yield_flag

================================================================================
MSG: rospy_message_converter/AdasMapTrafficEvent
uint64 offset
uint64 index
uint64 path_idx
int32 status
int32 start_end_point
uint32 reliability
uint64 event_type

================================================================================
MSG: rospy_message_converter/AdasMapTrafficFlow
uint64 offset
uint64 index
uint64 path_idx
int32 traffic_flow_status
uint64 reliability

================================================================================
MSG: rospy_message_converter/AdasMapPathShape
uint64 path_idx
bool is_main_path
AdasMapShapePoint[] shape_points_raw
AdasMapShapePoint[] shape_points_inter

================================================================================
MSG: rospy_message_converter/AdasMapShapePoint
uint64 offset
uint64 index
uint64 path_idx
bool is_control_point
AdasMapPoint2d shape_point

================================================================================
MSG: rospy_message_converter/AdasMapCurvature
uint64 offset
uint64 index
uint64 path_idx
float64 curvature
bool is_control_point

================================================================================
MSG: rospy_message_converter/AdasMapSubPathSegments
uint64 sub_path_idx
uint64 index
AdasMapSegment[] sub_path_segment

================================================================================
MSG: rospy_message_converter/AdasNavInfo
NavHeartBeatInfo heart_beat_info
NavTurnInfo turn_info
NavSpeedLimitInfo[] speed_limit_info
int32 road_class

================================================================================
MSG: rospy_message_converter/NavHeartBeatInfo
uint64 heart_beat
int32 reliable_state
int32 navigation_state

================================================================================
MSG: rospy_message_converter/NavTurnInfo
uint64 dist_to_first_turn
uint64 first_turn_info
uint64 dist_to_second_turn
uint64 second_turn_info
uint64[] lanenr_info

================================================================================
MSG: rospy_message_converter/NavSpeedLimitInfo
uint64 speed_limit
int32 speed_limit_type

================================================================================
MSG: rospy_message_converter/AdasMapPoint3d
float64 longitude
float64 latitude
float64 altitude
"""
  __slots__ = ['adas_info','navigation_info','map_loc','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/AdasMapInfo','rospy_message_converter/AdasNavInfo','rospy_message_converter/AdasMapPoint3d','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       adas_info,navigation_info,map_loc,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdasMap, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.adas_info is None:
        self.adas_info = rospy_message_converter.msg.AdasMapInfo()
      if self.navigation_info is None:
        self.navigation_info = rospy_message_converter.msg.AdasNavInfo()
      if self.map_loc is None:
        self.map_loc = rospy_message_converter.msg.AdasMapPoint3d()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.adas_info = rospy_message_converter.msg.AdasMapInfo()
      self.navigation_info = rospy_message_converter.msg.AdasNavInfo()
      self.map_loc = rospy_message_converter.msg.AdasMapPoint3d()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4I().pack(_x.adas_info.is_adasmap_valid, _x.adas_info.m_adasmap_is_highway, _x.adas_info.adas_meta.country_code, _x.adas_info.adas_meta.speed_unit, _x.adas_info.adas_meta.provider))
      length = len(self.adas_info.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.segment:
        _x = val1
        buff.write(_get_struct_3QiQi2BI2BI2B2I().pack(_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.adas_info.profile_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.profile_point:
        _x = val1
        buff.write(_get_struct_2QiQBd().pack(_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value))
      length = len(self.adas_info.stub)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.stub:
        _x = val1
        buff.write(_get_struct_3Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.path_idx, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.adas_info.traffic_sign)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.traffic_sign:
        _x = val1
        buff.write(_get_struct_5Q3IQIB().pack(_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid))
        _v1 = val1.position_pt
        _x = _v1
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
        _x = val1.height
        buff.write(_get_struct_d().pack(_x))
      length = len(self.adas_info.lane_connection)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.lane_connection:
        _x = val1
        buff.write(_get_struct_3Q8I().pack(_x.offset, _x.index, _x.path_idx, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
      length = len(self.adas_info.traffic_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.traffic_event:
        _x = val1
        buff.write(_get_struct_3Q2iIQ().pack(_x.offset, _x.index, _x.path_idx, _x.status, _x.start_end_point, _x.reliability, _x.event_type))
      length = len(self.adas_info.traffic_flow)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.traffic_flow:
        _x = val1
        buff.write(_get_struct_3QiQ().pack(_x.offset, _x.index, _x.path_idx, _x.traffic_flow_status, _x.reliability))
      _x = self
      buff.write(_get_struct_QB().pack(_x.adas_info.main_path_shape.path_idx, _x.adas_info.main_path_shape.is_main_path))
      length = len(self.adas_info.main_path_shape.shape_points_raw)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.main_path_shape.shape_points_raw:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v2 = val1.shape_point
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.adas_info.main_path_shape.shape_points_inter)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.main_path_shape.shape_points_inter:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v3 = val1.shape_point
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.adas_info.sub_path_shapes)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.sub_path_shapes:
        _x = val1
        buff.write(_get_struct_QB().pack(_x.path_idx, _x.is_main_path))
        length = len(val1.shape_points_raw)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shape_points_raw:
          _x = val2
          buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
          _v4 = val2.shape_point
          _x = _v4
          buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
        length = len(val1.shape_points_inter)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shape_points_inter:
          _x = val2
          buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
          _v5 = val2.shape_point
          _x = _v5
          buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.adas_info.main_path_curvatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.main_path_curvatures:
        _x = val1
        buff.write(_get_struct_3QdB().pack(_x.offset, _x.index, _x.path_idx, _x.curvature, _x.is_control_point))
      _x = self
      buff.write(_get_struct_3B().pack(_x.adas_info.is_position_good, _x.adas_info.is_curr_horizon_empty, _x.adas_info.is_pos_outdated))
      length = len(self.adas_info.sub_path_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.sub_path_segments:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.sub_path_idx, _x.index))
        length = len(val1.sub_path_segment)
        buff.write(_struct_I.pack(length))
        for val2 in val1.sub_path_segment:
          _x = val2
          buff.write(_get_struct_3QiQi2BI2BI2B2I().pack(_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      _x = self
      buff.write(_get_struct_Q2i4Q().pack(_x.navigation_info.heart_beat_info.heart_beat, _x.navigation_info.heart_beat_info.reliable_state, _x.navigation_info.heart_beat_info.navigation_state, _x.navigation_info.turn_info.dist_to_first_turn, _x.navigation_info.turn_info.first_turn_info, _x.navigation_info.turn_info.dist_to_second_turn, _x.navigation_info.turn_info.second_turn_info))
      length = len(self.navigation_info.turn_info.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.navigation_info.turn_info.lanenr_info))
      length = len(self.navigation_info.speed_limit_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.navigation_info.speed_limit_info:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.speed_limit, _x.speed_limit_type))
      _x = self
      buff.write(_get_struct_i3dQ().pack(_x.navigation_info.road_class, _x.map_loc.longitude, _x.map_loc.latitude, _x.map_loc.altitude, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.adas_info is None:
        self.adas_info = rospy_message_converter.msg.AdasMapInfo()
      if self.navigation_info is None:
        self.navigation_info = rospy_message_converter.msg.AdasNavInfo()
      if self.map_loc is None:
        self.map_loc = rospy_message_converter.msg.AdasMapPoint3d()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.adas_info.is_adasmap_valid, _x.adas_info.m_adasmap_is_highway, _x.adas_info.adas_meta.country_code, _x.adas_info.adas_meta.speed_unit, _x.adas_info.adas_meta.provider,) = _get_struct_B4I().unpack(str[start:end])
      self.adas_info.is_adasmap_valid = bool(self.adas_info.is_adasmap_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapSegment()
        _x = val1
        start = end
        end += 62
        (_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3QiQi2BI2BI2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.adas_info.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.profile_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapProfilePoint()
        _x = val1
        start = end
        end += 37
        (_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value,) = _get_struct_2QiQBd().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.adas_info.profile_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.stub = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapStub()
        _x = val1
        start = end
        end += 59
        (_x.offset, _x.index, _x.path_idx, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3Q2Ii2B2IB3I().unpack(str[start:end])
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_last_stub = bool(val1.is_last_stub)
        self.adas_info.stub.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.traffic_sign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapTrafficSign()
        _x = val1
        start = end
        end += 65
        (_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid,) = _get_struct_5Q3IQIB().unpack(str[start:end])
        val1.position_valid = bool(val1.position_valid)
        _v6 = val1.position_pt
        _x = _v6
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 8
        (val1.height,) = _get_struct_d().unpack(str[start:end])
        self.adas_info.traffic_sign.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.lane_connection = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapLaneConnection()
        _x = val1
        start = end
        end += 56
        (_x.offset, _x.index, _x.path_idx, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_3Q8I().unpack(str[start:end])
        self.adas_info.lane_connection.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.traffic_event = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapTrafficEvent()
        _x = val1
        start = end
        end += 44
        (_x.offset, _x.index, _x.path_idx, _x.status, _x.start_end_point, _x.reliability, _x.event_type,) = _get_struct_3Q2iIQ().unpack(str[start:end])
        self.adas_info.traffic_event.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.traffic_flow = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapTrafficFlow()
        _x = val1
        start = end
        end += 36
        (_x.offset, _x.index, _x.path_idx, _x.traffic_flow_status, _x.reliability,) = _get_struct_3QiQ().unpack(str[start:end])
        self.adas_info.traffic_flow.append(val1)
      _x = self
      start = end
      end += 9
      (_x.adas_info.main_path_shape.path_idx, _x.adas_info.main_path_shape.is_main_path,) = _get_struct_QB().unpack(str[start:end])
      self.adas_info.main_path_shape.is_main_path = bool(self.adas_info.main_path_shape.is_main_path)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.main_path_shape.shape_points_raw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v7 = val1.shape_point
        _x = _v7
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.adas_info.main_path_shape.shape_points_raw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.main_path_shape.shape_points_inter = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v8 = val1.shape_point
        _x = _v8
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.adas_info.main_path_shape.shape_points_inter.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.sub_path_shapes = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapPathShape()
        _x = val1
        start = end
        end += 9
        (_x.path_idx, _x.is_main_path,) = _get_struct_QB().unpack(str[start:end])
        val1.is_main_path = bool(val1.is_main_path)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shape_points_raw = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.AdasMapShapePoint()
          _x = val2
          start = end
          end += 25
          (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
          val2.is_control_point = bool(val2.is_control_point)
          _v9 = val2.shape_point
          _x = _v9
          start = end
          end += 32
          (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
          val1.shape_points_raw.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shape_points_inter = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.AdasMapShapePoint()
          _x = val2
          start = end
          end += 25
          (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
          val2.is_control_point = bool(val2.is_control_point)
          _v10 = val2.shape_point
          _x = _v10
          start = end
          end += 32
          (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
          val1.shape_points_inter.append(val2)
        self.adas_info.sub_path_shapes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.main_path_curvatures = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapCurvature()
        _x = val1
        start = end
        end += 33
        (_x.offset, _x.index, _x.path_idx, _x.curvature, _x.is_control_point,) = _get_struct_3QdB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.adas_info.main_path_curvatures.append(val1)
      _x = self
      start = end
      end += 3
      (_x.adas_info.is_position_good, _x.adas_info.is_curr_horizon_empty, _x.adas_info.is_pos_outdated,) = _get_struct_3B().unpack(str[start:end])
      self.adas_info.is_position_good = bool(self.adas_info.is_position_good)
      self.adas_info.is_curr_horizon_empty = bool(self.adas_info.is_curr_horizon_empty)
      self.adas_info.is_pos_outdated = bool(self.adas_info.is_pos_outdated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.sub_path_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapSubPathSegments()
        _x = val1
        start = end
        end += 16
        (_x.sub_path_idx, _x.index,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.sub_path_segment = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.AdasMapSegment()
          _x = val2
          start = end
          end += 62
          (_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3QiQi2BI2BI2B2I().unpack(str[start:end])
          val2.is_tunnel = bool(val2.is_tunnel)
          val2.is_bridge = bool(val2.is_bridge)
          val2.is_part_of_calculated_route = bool(val2.is_part_of_calculated_route)
          val2.is_complex_intersection = bool(val2.is_complex_intersection)
          val2.is_divided_road = bool(val2.is_divided_road)
          val2.is_build_up_area = bool(val2.is_build_up_area)
          val1.sub_path_segment.append(val2)
        self.adas_info.sub_path_segments.append(val1)
      _x = self
      start = end
      end += 48
      (_x.navigation_info.heart_beat_info.heart_beat, _x.navigation_info.heart_beat_info.reliable_state, _x.navigation_info.heart_beat_info.navigation_state, _x.navigation_info.turn_info.dist_to_first_turn, _x.navigation_info.turn_info.first_turn_info, _x.navigation_info.turn_info.dist_to_second_turn, _x.navigation_info.turn_info.second_turn_info,) = _get_struct_Q2i4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.navigation_info.turn_info.lanenr_info = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.navigation_info.speed_limit_info = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NavSpeedLimitInfo()
        _x = val1
        start = end
        end += 12
        (_x.speed_limit, _x.speed_limit_type,) = _get_struct_Qi().unpack(str[start:end])
        self.navigation_info.speed_limit_info.append(val1)
      _x = self
      start = end
      end += 36
      (_x.navigation_info.road_class, _x.map_loc.longitude, _x.map_loc.latitude, _x.map_loc.altitude, _x.publish_ptp_ts,) = _get_struct_i3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4I().pack(_x.adas_info.is_adasmap_valid, _x.adas_info.m_adasmap_is_highway, _x.adas_info.adas_meta.country_code, _x.adas_info.adas_meta.speed_unit, _x.adas_info.adas_meta.provider))
      length = len(self.adas_info.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.segment:
        _x = val1
        buff.write(_get_struct_3QiQi2BI2BI2B2I().pack(_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.adas_info.profile_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.profile_point:
        _x = val1
        buff.write(_get_struct_2QiQBd().pack(_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value))
      length = len(self.adas_info.stub)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.stub:
        _x = val1
        buff.write(_get_struct_3Q2Ii2B2IB3I().pack(_x.offset, _x.index, _x.path_idx, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      length = len(self.adas_info.traffic_sign)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.traffic_sign:
        _x = val1
        buff.write(_get_struct_5Q3IQIB().pack(_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid))
        _v11 = val1.position_pt
        _x = _v11
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
        _x = val1.height
        buff.write(_get_struct_d().pack(_x))
      length = len(self.adas_info.lane_connection)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.lane_connection:
        _x = val1
        buff.write(_get_struct_3Q8I().pack(_x.offset, _x.index, _x.path_idx, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
      length = len(self.adas_info.traffic_event)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.traffic_event:
        _x = val1
        buff.write(_get_struct_3Q2iIQ().pack(_x.offset, _x.index, _x.path_idx, _x.status, _x.start_end_point, _x.reliability, _x.event_type))
      length = len(self.adas_info.traffic_flow)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.traffic_flow:
        _x = val1
        buff.write(_get_struct_3QiQ().pack(_x.offset, _x.index, _x.path_idx, _x.traffic_flow_status, _x.reliability))
      _x = self
      buff.write(_get_struct_QB().pack(_x.adas_info.main_path_shape.path_idx, _x.adas_info.main_path_shape.is_main_path))
      length = len(self.adas_info.main_path_shape.shape_points_raw)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.main_path_shape.shape_points_raw:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v12 = val1.shape_point
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.adas_info.main_path_shape.shape_points_inter)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.main_path_shape.shape_points_inter:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v13 = val1.shape_point
        _x = _v13
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.adas_info.sub_path_shapes)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.sub_path_shapes:
        _x = val1
        buff.write(_get_struct_QB().pack(_x.path_idx, _x.is_main_path))
        length = len(val1.shape_points_raw)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shape_points_raw:
          _x = val2
          buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
          _v14 = val2.shape_point
          _x = _v14
          buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
        length = len(val1.shape_points_inter)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shape_points_inter:
          _x = val2
          buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
          _v15 = val2.shape_point
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.adas_info.main_path_curvatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.main_path_curvatures:
        _x = val1
        buff.write(_get_struct_3QdB().pack(_x.offset, _x.index, _x.path_idx, _x.curvature, _x.is_control_point))
      _x = self
      buff.write(_get_struct_3B().pack(_x.adas_info.is_position_good, _x.adas_info.is_curr_horizon_empty, _x.adas_info.is_pos_outdated))
      length = len(self.adas_info.sub_path_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.adas_info.sub_path_segments:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.sub_path_idx, _x.index))
        length = len(val1.sub_path_segment)
        buff.write(_struct_I.pack(length))
        for val2 in val1.sub_path_segment:
          _x = val2
          buff.write(_get_struct_3QiQi2BI2BI2B2I().pack(_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir))
      _x = self
      buff.write(_get_struct_Q2i4Q().pack(_x.navigation_info.heart_beat_info.heart_beat, _x.navigation_info.heart_beat_info.reliable_state, _x.navigation_info.heart_beat_info.navigation_state, _x.navigation_info.turn_info.dist_to_first_turn, _x.navigation_info.turn_info.first_turn_info, _x.navigation_info.turn_info.dist_to_second_turn, _x.navigation_info.turn_info.second_turn_info))
      length = len(self.navigation_info.turn_info.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.navigation_info.turn_info.lanenr_info.tostring())
      length = len(self.navigation_info.speed_limit_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.navigation_info.speed_limit_info:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.speed_limit, _x.speed_limit_type))
      _x = self
      buff.write(_get_struct_i3dQ().pack(_x.navigation_info.road_class, _x.map_loc.longitude, _x.map_loc.latitude, _x.map_loc.altitude, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.adas_info is None:
        self.adas_info = rospy_message_converter.msg.AdasMapInfo()
      if self.navigation_info is None:
        self.navigation_info = rospy_message_converter.msg.AdasNavInfo()
      if self.map_loc is None:
        self.map_loc = rospy_message_converter.msg.AdasMapPoint3d()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.adas_info.is_adasmap_valid, _x.adas_info.m_adasmap_is_highway, _x.adas_info.adas_meta.country_code, _x.adas_info.adas_meta.speed_unit, _x.adas_info.adas_meta.provider,) = _get_struct_B4I().unpack(str[start:end])
      self.adas_info.is_adasmap_valid = bool(self.adas_info.is_adasmap_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.segment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapSegment()
        _x = val1
        start = end
        end += 62
        (_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3QiQi2BI2BI2B2I().unpack(str[start:end])
        val1.is_tunnel = bool(val1.is_tunnel)
        val1.is_bridge = bool(val1.is_bridge)
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_divided_road = bool(val1.is_divided_road)
        val1.is_build_up_area = bool(val1.is_build_up_area)
        self.adas_info.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.profile_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapProfilePoint()
        _x = val1
        start = end
        end += 37
        (_x.offset, _x.index, _x.type, _x.value, _x.is_control_point, _x.decoded_value,) = _get_struct_2QiQBd().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.adas_info.profile_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.stub = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapStub()
        _x = val1
        start = end
        end += 59
        (_x.offset, _x.index, _x.path_idx, _x.sub_path_idx, _x.relative_probability, _x.road_class, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.form_of_way, _x.turn_angle, _x.is_last_stub, _x.right_of_way, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3Q2Ii2B2IB3I().unpack(str[start:end])
        val1.is_part_of_calculated_route = bool(val1.is_part_of_calculated_route)
        val1.is_complex_intersection = bool(val1.is_complex_intersection)
        val1.is_last_stub = bool(val1.is_last_stub)
        self.adas_info.stub.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.traffic_sign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapTrafficSign()
        _x = val1
        start = end
        end += 65
        (_x.offset, _x.index, _x.path_idx, _x.sign_type, _x.value, _x.lane, _x.vehicle_specific, _x.time_specific, _x.condition, _x.sign_location, _x.position_valid,) = _get_struct_5Q3IQIB().unpack(str[start:end])
        val1.position_valid = bool(val1.position_valid)
        _v16 = val1.position_pt
        _x = _v16
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 8
        (val1.height,) = _get_struct_d().unpack(str[start:end])
        self.adas_info.traffic_sign.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.lane_connection = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapLaneConnection()
        _x = val1
        start = end
        end += 56
        (_x.offset, _x.index, _x.path_idx, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_3Q8I().unpack(str[start:end])
        self.adas_info.lane_connection.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.traffic_event = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapTrafficEvent()
        _x = val1
        start = end
        end += 44
        (_x.offset, _x.index, _x.path_idx, _x.status, _x.start_end_point, _x.reliability, _x.event_type,) = _get_struct_3Q2iIQ().unpack(str[start:end])
        self.adas_info.traffic_event.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.traffic_flow = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapTrafficFlow()
        _x = val1
        start = end
        end += 36
        (_x.offset, _x.index, _x.path_idx, _x.traffic_flow_status, _x.reliability,) = _get_struct_3QiQ().unpack(str[start:end])
        self.adas_info.traffic_flow.append(val1)
      _x = self
      start = end
      end += 9
      (_x.adas_info.main_path_shape.path_idx, _x.adas_info.main_path_shape.is_main_path,) = _get_struct_QB().unpack(str[start:end])
      self.adas_info.main_path_shape.is_main_path = bool(self.adas_info.main_path_shape.is_main_path)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.main_path_shape.shape_points_raw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v17 = val1.shape_point
        _x = _v17
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.adas_info.main_path_shape.shape_points_raw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.main_path_shape.shape_points_inter = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v18 = val1.shape_point
        _x = _v18
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.adas_info.main_path_shape.shape_points_inter.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.sub_path_shapes = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapPathShape()
        _x = val1
        start = end
        end += 9
        (_x.path_idx, _x.is_main_path,) = _get_struct_QB().unpack(str[start:end])
        val1.is_main_path = bool(val1.is_main_path)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shape_points_raw = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.AdasMapShapePoint()
          _x = val2
          start = end
          end += 25
          (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
          val2.is_control_point = bool(val2.is_control_point)
          _v19 = val2.shape_point
          _x = _v19
          start = end
          end += 32
          (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
          val1.shape_points_raw.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shape_points_inter = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.AdasMapShapePoint()
          _x = val2
          start = end
          end += 25
          (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
          val2.is_control_point = bool(val2.is_control_point)
          _v20 = val2.shape_point
          _x = _v20
          start = end
          end += 32
          (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
          val1.shape_points_inter.append(val2)
        self.adas_info.sub_path_shapes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.main_path_curvatures = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapCurvature()
        _x = val1
        start = end
        end += 33
        (_x.offset, _x.index, _x.path_idx, _x.curvature, _x.is_control_point,) = _get_struct_3QdB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        self.adas_info.main_path_curvatures.append(val1)
      _x = self
      start = end
      end += 3
      (_x.adas_info.is_position_good, _x.adas_info.is_curr_horizon_empty, _x.adas_info.is_pos_outdated,) = _get_struct_3B().unpack(str[start:end])
      self.adas_info.is_position_good = bool(self.adas_info.is_position_good)
      self.adas_info.is_curr_horizon_empty = bool(self.adas_info.is_curr_horizon_empty)
      self.adas_info.is_pos_outdated = bool(self.adas_info.is_pos_outdated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adas_info.sub_path_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapSubPathSegments()
        _x = val1
        start = end
        end += 16
        (_x.sub_path_idx, _x.index,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.sub_path_segment = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.AdasMapSegment()
          _x = val2
          start = end
          end += 62
          (_x.offset, _x.index, _x.path_idx, _x.road_class, _x.seg_spd_lmt, _x.seg_spd_lmt_type, _x.is_tunnel, _x.is_bridge, _x.form_of_way, _x.is_part_of_calculated_route, _x.is_complex_intersection, _x.relative_probability, _x.is_divided_road, _x.is_build_up_area, _x.num_of_lanes_opp_dir, _x.num_of_lanes_drv_dir,) = _get_struct_3QiQi2BI2BI2B2I().unpack(str[start:end])
          val2.is_tunnel = bool(val2.is_tunnel)
          val2.is_bridge = bool(val2.is_bridge)
          val2.is_part_of_calculated_route = bool(val2.is_part_of_calculated_route)
          val2.is_complex_intersection = bool(val2.is_complex_intersection)
          val2.is_divided_road = bool(val2.is_divided_road)
          val2.is_build_up_area = bool(val2.is_build_up_area)
          val1.sub_path_segment.append(val2)
        self.adas_info.sub_path_segments.append(val1)
      _x = self
      start = end
      end += 48
      (_x.navigation_info.heart_beat_info.heart_beat, _x.navigation_info.heart_beat_info.reliable_state, _x.navigation_info.heart_beat_info.navigation_state, _x.navigation_info.turn_info.dist_to_first_turn, _x.navigation_info.turn_info.first_turn_info, _x.navigation_info.turn_info.dist_to_second_turn, _x.navigation_info.turn_info.second_turn_info,) = _get_struct_Q2i4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.navigation_info.turn_info.lanenr_info = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.navigation_info.speed_limit_info = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.NavSpeedLimitInfo()
        _x = val1
        start = end
        end += 12
        (_x.speed_limit, _x.speed_limit_type,) = _get_struct_Qi().unpack(str[start:end])
        self.navigation_info.speed_limit_info.append(val1)
      _x = self
      start = end
      end += 36
      (_x.navigation_info.road_class, _x.map_loc.longitude, _x.map_loc.latitude, _x.map_loc.altitude, _x.publish_ptp_ts,) = _get_struct_i3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2QiQBd = None
def _get_struct_2QiQBd():
    global _struct_2QiQBd
    if _struct_2QiQBd is None:
        _struct_2QiQBd = struct.Struct("<2QiQBd")
    return _struct_2QiQBd
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3Q2Ii2B2IB3I = None
def _get_struct_3Q2Ii2B2IB3I():
    global _struct_3Q2Ii2B2IB3I
    if _struct_3Q2Ii2B2IB3I is None:
        _struct_3Q2Ii2B2IB3I = struct.Struct("<3Q2Ii2B2IB3I")
    return _struct_3Q2Ii2B2IB3I
_struct_3Q2iIQ = None
def _get_struct_3Q2iIQ():
    global _struct_3Q2iIQ
    if _struct_3Q2iIQ is None:
        _struct_3Q2iIQ = struct.Struct("<3Q2iIQ")
    return _struct_3Q2iIQ
_struct_3Q8I = None
def _get_struct_3Q8I():
    global _struct_3Q8I
    if _struct_3Q8I is None:
        _struct_3Q8I = struct.Struct("<3Q8I")
    return _struct_3Q8I
_struct_3QB = None
def _get_struct_3QB():
    global _struct_3QB
    if _struct_3QB is None:
        _struct_3QB = struct.Struct("<3QB")
    return _struct_3QB
_struct_3QdB = None
def _get_struct_3QdB():
    global _struct_3QdB
    if _struct_3QdB is None:
        _struct_3QdB = struct.Struct("<3QdB")
    return _struct_3QdB
_struct_3QiQ = None
def _get_struct_3QiQ():
    global _struct_3QiQ
    if _struct_3QiQ is None:
        _struct_3QiQ = struct.Struct("<3QiQ")
    return _struct_3QiQ
_struct_3QiQi2BI2BI2B2I = None
def _get_struct_3QiQi2BI2BI2B2I():
    global _struct_3QiQi2BI2BI2B2I
    if _struct_3QiQi2BI2BI2B2I is None:
        _struct_3QiQi2BI2BI2B2I = struct.Struct("<3QiQi2BI2BI2B2I")
    return _struct_3QiQi2BI2BI2B2I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_5Q3IQIB = None
def _get_struct_5Q3IQIB():
    global _struct_5Q3IQIB
    if _struct_5Q3IQIB is None:
        _struct_5Q3IQIB = struct.Struct("<5Q3IQIB")
    return _struct_5Q3IQIB
_struct_B4I = None
def _get_struct_B4I():
    global _struct_B4I
    if _struct_B4I is None:
        _struct_B4I = struct.Struct("<B4I")
    return _struct_B4I
_struct_Q2i4Q = None
def _get_struct_Q2i4Q():
    global _struct_Q2i4Q
    if _struct_Q2i4Q is None:
        _struct_Q2i4Q = struct.Struct("<Q2i4Q")
    return _struct_Q2i4Q
_struct_QB = None
def _get_struct_QB():
    global _struct_QB
    if _struct_QB is None:
        _struct_QB = struct.Struct("<QB")
    return _struct_QB
_struct_Qi = None
def _get_struct_Qi():
    global _struct_Qi
    if _struct_Qi is None:
        _struct_Qi = struct.Struct("<Qi")
    return _struct_Qi
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i3dQ = None
def _get_struct_i3dQ():
    global _struct_i3dQ
    if _struct_i3dQ is None:
        _struct_i3dQ = struct.Struct("<i3dQ")
    return _struct_i3dQ

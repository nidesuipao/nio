# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DriverMonitorOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriverMonitorOut(genpy.Message):
  _md5sum = "a8a751f76681c5a1f46a9c13ab908a24"
  _type = "rospy_message_converter/DriverMonitorOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 gaspedpos
float32 gaspedgrad
bool driverbrake
float32 brkpedpos
float32 steerwhlang
float32 steerwhlgrad
float32 egospd
float32 egoaccel
float32 egoyawrate
float32 turnlighton
uint32 egogear
uint32 feedbackstate
uint32 activitystate
uint32 focusstate
uint32 suppressbit
uint32 abortbit
float32[] dampfactor
float32 vel_std_dev
float32 sdytimer
float32 ramptimer
bool dampsuppress
"""
  __slots__ = ['gaspedpos','gaspedgrad','driverbrake','brkpedpos','steerwhlang','steerwhlgrad','egospd','egoaccel','egoyawrate','turnlighton','egogear','feedbackstate','activitystate','focusstate','suppressbit','abortbit','dampfactor','vel_std_dev','sdytimer','ramptimer','dampsuppress']
  _slot_types = ['float32','float32','bool','float32','float32','float32','float32','float32','float32','float32','uint32','uint32','uint32','uint32','uint32','uint32','float32[]','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gaspedpos,gaspedgrad,driverbrake,brkpedpos,steerwhlang,steerwhlgrad,egospd,egoaccel,egoyawrate,turnlighton,egogear,feedbackstate,activitystate,focusstate,suppressbit,abortbit,dampfactor,vel_std_dev,sdytimer,ramptimer,dampsuppress

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriverMonitorOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gaspedpos is None:
        self.gaspedpos = 0.
      if self.gaspedgrad is None:
        self.gaspedgrad = 0.
      if self.driverbrake is None:
        self.driverbrake = False
      if self.brkpedpos is None:
        self.brkpedpos = 0.
      if self.steerwhlang is None:
        self.steerwhlang = 0.
      if self.steerwhlgrad is None:
        self.steerwhlgrad = 0.
      if self.egospd is None:
        self.egospd = 0.
      if self.egoaccel is None:
        self.egoaccel = 0.
      if self.egoyawrate is None:
        self.egoyawrate = 0.
      if self.turnlighton is None:
        self.turnlighton = 0.
      if self.egogear is None:
        self.egogear = 0
      if self.feedbackstate is None:
        self.feedbackstate = 0
      if self.activitystate is None:
        self.activitystate = 0
      if self.focusstate is None:
        self.focusstate = 0
      if self.suppressbit is None:
        self.suppressbit = 0
      if self.abortbit is None:
        self.abortbit = 0
      if self.dampfactor is None:
        self.dampfactor = []
      if self.vel_std_dev is None:
        self.vel_std_dev = 0.
      if self.sdytimer is None:
        self.sdytimer = 0.
      if self.ramptimer is None:
        self.ramptimer = 0.
      if self.dampsuppress is None:
        self.dampsuppress = False
    else:
      self.gaspedpos = 0.
      self.gaspedgrad = 0.
      self.driverbrake = False
      self.brkpedpos = 0.
      self.steerwhlang = 0.
      self.steerwhlgrad = 0.
      self.egospd = 0.
      self.egoaccel = 0.
      self.egoyawrate = 0.
      self.turnlighton = 0.
      self.egogear = 0
      self.feedbackstate = 0
      self.activitystate = 0
      self.focusstate = 0
      self.suppressbit = 0
      self.abortbit = 0
      self.dampfactor = []
      self.vel_std_dev = 0.
      self.sdytimer = 0.
      self.ramptimer = 0.
      self.dampsuppress = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fB7f6I().pack(_x.gaspedpos, _x.gaspedgrad, _x.driverbrake, _x.brkpedpos, _x.steerwhlang, _x.steerwhlgrad, _x.egospd, _x.egoaccel, _x.egoyawrate, _x.turnlighton, _x.egogear, _x.feedbackstate, _x.activitystate, _x.focusstate, _x.suppressbit, _x.abortbit))
      length = len(self.dampfactor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.dampfactor))
      _x = self
      buff.write(_get_struct_3fB().pack(_x.vel_std_dev, _x.sdytimer, _x.ramptimer, _x.dampsuppress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 61
      (_x.gaspedpos, _x.gaspedgrad, _x.driverbrake, _x.brkpedpos, _x.steerwhlang, _x.steerwhlgrad, _x.egospd, _x.egoaccel, _x.egoyawrate, _x.turnlighton, _x.egogear, _x.feedbackstate, _x.activitystate, _x.focusstate, _x.suppressbit, _x.abortbit,) = _get_struct_2fB7f6I().unpack(str[start:end])
      self.driverbrake = bool(self.driverbrake)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dampfactor = s.unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.vel_std_dev, _x.sdytimer, _x.ramptimer, _x.dampsuppress,) = _get_struct_3fB().unpack(str[start:end])
      self.dampsuppress = bool(self.dampsuppress)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fB7f6I().pack(_x.gaspedpos, _x.gaspedgrad, _x.driverbrake, _x.brkpedpos, _x.steerwhlang, _x.steerwhlgrad, _x.egospd, _x.egoaccel, _x.egoyawrate, _x.turnlighton, _x.egogear, _x.feedbackstate, _x.activitystate, _x.focusstate, _x.suppressbit, _x.abortbit))
      length = len(self.dampfactor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.dampfactor.tostring())
      _x = self
      buff.write(_get_struct_3fB().pack(_x.vel_std_dev, _x.sdytimer, _x.ramptimer, _x.dampsuppress))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 61
      (_x.gaspedpos, _x.gaspedgrad, _x.driverbrake, _x.brkpedpos, _x.steerwhlang, _x.steerwhlgrad, _x.egospd, _x.egoaccel, _x.egoyawrate, _x.turnlighton, _x.egogear, _x.feedbackstate, _x.activitystate, _x.focusstate, _x.suppressbit, _x.abortbit,) = _get_struct_2fB7f6I().unpack(str[start:end])
      self.driverbrake = bool(self.driverbrake)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dampfactor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 13
      (_x.vel_std_dev, _x.sdytimer, _x.ramptimer, _x.dampsuppress,) = _get_struct_3fB().unpack(str[start:end])
      self.dampsuppress = bool(self.dampsuppress)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB7f6I = None
def _get_struct_2fB7f6I():
    global _struct_2fB7f6I
    if _struct_2fB7f6I is None:
        _struct_2fB7f6I = struct.Struct("<2fB7f6I")
    return _struct_2fB7f6I
_struct_3fB = None
def _get_struct_3fB():
    global _struct_3fB
    if _struct_3fB is None:
        _struct_3fB = struct.Struct("<3fB")
    return _struct_3fB

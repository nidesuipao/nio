# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FailSafeDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FailSafeDetection(genpy.Message):
  _md5sum = "cf9a848c67ee46b9e4f495aadce099fd"
  _type = "rospy_message_converter/FailSafeDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
FailSafe failsafe_FW
FailSafe failsafe_FN
FailSafe failsafe_FL
FailSafe failsafe_FR
FailSafe failsafe_R
FailSafe failsafe_RL
FailSafe failsafe_RR
FailSafe failsafe_SVC_Front
FailSafe failsafe_SVC_Rear
FailSafe failsafe_SVC_Left
FailSafe failsafe_SVC_Right
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FailSafe
uint32 FS_Rain
uint32 FS_Fog
uint32 FS_Snow
uint32 FS_Full_Blockage
uint32 FS_Partial_Blockage
uint32 FS_Lowsun
uint32 FS_Sunray
uint32 FS_Splash
uint32 FS_Windshield_Frozen
uint32 FS_Out_Of_Calibration
uint32 FS_Out_Of_Focus
uint32 FS_Blur
uint32 FS_Smeared_Halo
uint32 FS_illuminance
"""
  __slots__ = ['timestamp','failsafe_FW','failsafe_FN','failsafe_FL','failsafe_FR','failsafe_R','failsafe_RL','failsafe_RR','failsafe_SVC_Front','failsafe_SVC_Rear','failsafe_SVC_Left','failsafe_SVC_Right','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['uint64','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','rospy_message_converter/FailSafe','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,failsafe_FW,failsafe_FN,failsafe_FL,failsafe_FR,failsafe_R,failsafe_RL,failsafe_RR,failsafe_SVC_Front,failsafe_SVC_Rear,failsafe_SVC_Left,failsafe_SVC_Right,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FailSafeDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.failsafe_FW is None:
        self.failsafe_FW = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FN is None:
        self.failsafe_FN = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FL is None:
        self.failsafe_FL = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FR is None:
        self.failsafe_FR = rospy_message_converter.msg.FailSafe()
      if self.failsafe_R is None:
        self.failsafe_R = rospy_message_converter.msg.FailSafe()
      if self.failsafe_RL is None:
        self.failsafe_RL = rospy_message_converter.msg.FailSafe()
      if self.failsafe_RR is None:
        self.failsafe_RR = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Front is None:
        self.failsafe_SVC_Front = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Rear is None:
        self.failsafe_SVC_Rear = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Left is None:
        self.failsafe_SVC_Left = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Right is None:
        self.failsafe_SVC_Right = rospy_message_converter.msg.FailSafe()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.timestamp = 0
      self.failsafe_FW = rospy_message_converter.msg.FailSafe()
      self.failsafe_FN = rospy_message_converter.msg.FailSafe()
      self.failsafe_FL = rospy_message_converter.msg.FailSafe()
      self.failsafe_FR = rospy_message_converter.msg.FailSafe()
      self.failsafe_R = rospy_message_converter.msg.FailSafe()
      self.failsafe_RL = rospy_message_converter.msg.FailSafe()
      self.failsafe_RR = rospy_message_converter.msg.FailSafe()
      self.failsafe_SVC_Front = rospy_message_converter.msg.FailSafe()
      self.failsafe_SVC_Rear = rospy_message_converter.msg.FailSafe()
      self.failsafe_SVC_Left = rospy_message_converter.msg.FailSafe()
      self.failsafe_SVC_Right = rospy_message_converter.msg.FailSafe()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Q154IQ().pack(_x.timestamp, _x.failsafe_FW.FS_Rain, _x.failsafe_FW.FS_Fog, _x.failsafe_FW.FS_Snow, _x.failsafe_FW.FS_Full_Blockage, _x.failsafe_FW.FS_Partial_Blockage, _x.failsafe_FW.FS_Lowsun, _x.failsafe_FW.FS_Sunray, _x.failsafe_FW.FS_Splash, _x.failsafe_FW.FS_Windshield_Frozen, _x.failsafe_FW.FS_Out_Of_Calibration, _x.failsafe_FW.FS_Out_Of_Focus, _x.failsafe_FW.FS_Blur, _x.failsafe_FW.FS_Smeared_Halo, _x.failsafe_FW.FS_illuminance, _x.failsafe_FN.FS_Rain, _x.failsafe_FN.FS_Fog, _x.failsafe_FN.FS_Snow, _x.failsafe_FN.FS_Full_Blockage, _x.failsafe_FN.FS_Partial_Blockage, _x.failsafe_FN.FS_Lowsun, _x.failsafe_FN.FS_Sunray, _x.failsafe_FN.FS_Splash, _x.failsafe_FN.FS_Windshield_Frozen, _x.failsafe_FN.FS_Out_Of_Calibration, _x.failsafe_FN.FS_Out_Of_Focus, _x.failsafe_FN.FS_Blur, _x.failsafe_FN.FS_Smeared_Halo, _x.failsafe_FN.FS_illuminance, _x.failsafe_FL.FS_Rain, _x.failsafe_FL.FS_Fog, _x.failsafe_FL.FS_Snow, _x.failsafe_FL.FS_Full_Blockage, _x.failsafe_FL.FS_Partial_Blockage, _x.failsafe_FL.FS_Lowsun, _x.failsafe_FL.FS_Sunray, _x.failsafe_FL.FS_Splash, _x.failsafe_FL.FS_Windshield_Frozen, _x.failsafe_FL.FS_Out_Of_Calibration, _x.failsafe_FL.FS_Out_Of_Focus, _x.failsafe_FL.FS_Blur, _x.failsafe_FL.FS_Smeared_Halo, _x.failsafe_FL.FS_illuminance, _x.failsafe_FR.FS_Rain, _x.failsafe_FR.FS_Fog, _x.failsafe_FR.FS_Snow, _x.failsafe_FR.FS_Full_Blockage, _x.failsafe_FR.FS_Partial_Blockage, _x.failsafe_FR.FS_Lowsun, _x.failsafe_FR.FS_Sunray, _x.failsafe_FR.FS_Splash, _x.failsafe_FR.FS_Windshield_Frozen, _x.failsafe_FR.FS_Out_Of_Calibration, _x.failsafe_FR.FS_Out_Of_Focus, _x.failsafe_FR.FS_Blur, _x.failsafe_FR.FS_Smeared_Halo, _x.failsafe_FR.FS_illuminance, _x.failsafe_R.FS_Rain, _x.failsafe_R.FS_Fog, _x.failsafe_R.FS_Snow, _x.failsafe_R.FS_Full_Blockage, _x.failsafe_R.FS_Partial_Blockage, _x.failsafe_R.FS_Lowsun, _x.failsafe_R.FS_Sunray, _x.failsafe_R.FS_Splash, _x.failsafe_R.FS_Windshield_Frozen, _x.failsafe_R.FS_Out_Of_Calibration, _x.failsafe_R.FS_Out_Of_Focus, _x.failsafe_R.FS_Blur, _x.failsafe_R.FS_Smeared_Halo, _x.failsafe_R.FS_illuminance, _x.failsafe_RL.FS_Rain, _x.failsafe_RL.FS_Fog, _x.failsafe_RL.FS_Snow, _x.failsafe_RL.FS_Full_Blockage, _x.failsafe_RL.FS_Partial_Blockage, _x.failsafe_RL.FS_Lowsun, _x.failsafe_RL.FS_Sunray, _x.failsafe_RL.FS_Splash, _x.failsafe_RL.FS_Windshield_Frozen, _x.failsafe_RL.FS_Out_Of_Calibration, _x.failsafe_RL.FS_Out_Of_Focus, _x.failsafe_RL.FS_Blur, _x.failsafe_RL.FS_Smeared_Halo, _x.failsafe_RL.FS_illuminance, _x.failsafe_RR.FS_Rain, _x.failsafe_RR.FS_Fog, _x.failsafe_RR.FS_Snow, _x.failsafe_RR.FS_Full_Blockage, _x.failsafe_RR.FS_Partial_Blockage, _x.failsafe_RR.FS_Lowsun, _x.failsafe_RR.FS_Sunray, _x.failsafe_RR.FS_Splash, _x.failsafe_RR.FS_Windshield_Frozen, _x.failsafe_RR.FS_Out_Of_Calibration, _x.failsafe_RR.FS_Out_Of_Focus, _x.failsafe_RR.FS_Blur, _x.failsafe_RR.FS_Smeared_Halo, _x.failsafe_RR.FS_illuminance, _x.failsafe_SVC_Front.FS_Rain, _x.failsafe_SVC_Front.FS_Fog, _x.failsafe_SVC_Front.FS_Snow, _x.failsafe_SVC_Front.FS_Full_Blockage, _x.failsafe_SVC_Front.FS_Partial_Blockage, _x.failsafe_SVC_Front.FS_Lowsun, _x.failsafe_SVC_Front.FS_Sunray, _x.failsafe_SVC_Front.FS_Splash, _x.failsafe_SVC_Front.FS_Windshield_Frozen, _x.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.failsafe_SVC_Front.FS_Out_Of_Focus, _x.failsafe_SVC_Front.FS_Blur, _x.failsafe_SVC_Front.FS_Smeared_Halo, _x.failsafe_SVC_Front.FS_illuminance, _x.failsafe_SVC_Rear.FS_Rain, _x.failsafe_SVC_Rear.FS_Fog, _x.failsafe_SVC_Rear.FS_Snow, _x.failsafe_SVC_Rear.FS_Full_Blockage, _x.failsafe_SVC_Rear.FS_Partial_Blockage, _x.failsafe_SVC_Rear.FS_Lowsun, _x.failsafe_SVC_Rear.FS_Sunray, _x.failsafe_SVC_Rear.FS_Splash, _x.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.failsafe_SVC_Rear.FS_Blur, _x.failsafe_SVC_Rear.FS_Smeared_Halo, _x.failsafe_SVC_Rear.FS_illuminance, _x.failsafe_SVC_Left.FS_Rain, _x.failsafe_SVC_Left.FS_Fog, _x.failsafe_SVC_Left.FS_Snow, _x.failsafe_SVC_Left.FS_Full_Blockage, _x.failsafe_SVC_Left.FS_Partial_Blockage, _x.failsafe_SVC_Left.FS_Lowsun, _x.failsafe_SVC_Left.FS_Sunray, _x.failsafe_SVC_Left.FS_Splash, _x.failsafe_SVC_Left.FS_Windshield_Frozen, _x.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.failsafe_SVC_Left.FS_Out_Of_Focus, _x.failsafe_SVC_Left.FS_Blur, _x.failsafe_SVC_Left.FS_Smeared_Halo, _x.failsafe_SVC_Left.FS_illuminance, _x.failsafe_SVC_Right.FS_Rain, _x.failsafe_SVC_Right.FS_Fog, _x.failsafe_SVC_Right.FS_Snow, _x.failsafe_SVC_Right.FS_Full_Blockage, _x.failsafe_SVC_Right.FS_Partial_Blockage, _x.failsafe_SVC_Right.FS_Lowsun, _x.failsafe_SVC_Right.FS_Sunray, _x.failsafe_SVC_Right.FS_Splash, _x.failsafe_SVC_Right.FS_Windshield_Frozen, _x.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.failsafe_SVC_Right.FS_Out_Of_Focus, _x.failsafe_SVC_Right.FS_Blur, _x.failsafe_SVC_Right.FS_Smeared_Halo, _x.failsafe_SVC_Right.FS_illuminance, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.failsafe_FW is None:
        self.failsafe_FW = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FN is None:
        self.failsafe_FN = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FL is None:
        self.failsafe_FL = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FR is None:
        self.failsafe_FR = rospy_message_converter.msg.FailSafe()
      if self.failsafe_R is None:
        self.failsafe_R = rospy_message_converter.msg.FailSafe()
      if self.failsafe_RL is None:
        self.failsafe_RL = rospy_message_converter.msg.FailSafe()
      if self.failsafe_RR is None:
        self.failsafe_RR = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Front is None:
        self.failsafe_SVC_Front = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Rear is None:
        self.failsafe_SVC_Rear = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Left is None:
        self.failsafe_SVC_Left = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Right is None:
        self.failsafe_SVC_Right = rospy_message_converter.msg.FailSafe()
      end = 0
      _x = self
      start = end
      end += 632
      (_x.timestamp, _x.failsafe_FW.FS_Rain, _x.failsafe_FW.FS_Fog, _x.failsafe_FW.FS_Snow, _x.failsafe_FW.FS_Full_Blockage, _x.failsafe_FW.FS_Partial_Blockage, _x.failsafe_FW.FS_Lowsun, _x.failsafe_FW.FS_Sunray, _x.failsafe_FW.FS_Splash, _x.failsafe_FW.FS_Windshield_Frozen, _x.failsafe_FW.FS_Out_Of_Calibration, _x.failsafe_FW.FS_Out_Of_Focus, _x.failsafe_FW.FS_Blur, _x.failsafe_FW.FS_Smeared_Halo, _x.failsafe_FW.FS_illuminance, _x.failsafe_FN.FS_Rain, _x.failsafe_FN.FS_Fog, _x.failsafe_FN.FS_Snow, _x.failsafe_FN.FS_Full_Blockage, _x.failsafe_FN.FS_Partial_Blockage, _x.failsafe_FN.FS_Lowsun, _x.failsafe_FN.FS_Sunray, _x.failsafe_FN.FS_Splash, _x.failsafe_FN.FS_Windshield_Frozen, _x.failsafe_FN.FS_Out_Of_Calibration, _x.failsafe_FN.FS_Out_Of_Focus, _x.failsafe_FN.FS_Blur, _x.failsafe_FN.FS_Smeared_Halo, _x.failsafe_FN.FS_illuminance, _x.failsafe_FL.FS_Rain, _x.failsafe_FL.FS_Fog, _x.failsafe_FL.FS_Snow, _x.failsafe_FL.FS_Full_Blockage, _x.failsafe_FL.FS_Partial_Blockage, _x.failsafe_FL.FS_Lowsun, _x.failsafe_FL.FS_Sunray, _x.failsafe_FL.FS_Splash, _x.failsafe_FL.FS_Windshield_Frozen, _x.failsafe_FL.FS_Out_Of_Calibration, _x.failsafe_FL.FS_Out_Of_Focus, _x.failsafe_FL.FS_Blur, _x.failsafe_FL.FS_Smeared_Halo, _x.failsafe_FL.FS_illuminance, _x.failsafe_FR.FS_Rain, _x.failsafe_FR.FS_Fog, _x.failsafe_FR.FS_Snow, _x.failsafe_FR.FS_Full_Blockage, _x.failsafe_FR.FS_Partial_Blockage, _x.failsafe_FR.FS_Lowsun, _x.failsafe_FR.FS_Sunray, _x.failsafe_FR.FS_Splash, _x.failsafe_FR.FS_Windshield_Frozen, _x.failsafe_FR.FS_Out_Of_Calibration, _x.failsafe_FR.FS_Out_Of_Focus, _x.failsafe_FR.FS_Blur, _x.failsafe_FR.FS_Smeared_Halo, _x.failsafe_FR.FS_illuminance, _x.failsafe_R.FS_Rain, _x.failsafe_R.FS_Fog, _x.failsafe_R.FS_Snow, _x.failsafe_R.FS_Full_Blockage, _x.failsafe_R.FS_Partial_Blockage, _x.failsafe_R.FS_Lowsun, _x.failsafe_R.FS_Sunray, _x.failsafe_R.FS_Splash, _x.failsafe_R.FS_Windshield_Frozen, _x.failsafe_R.FS_Out_Of_Calibration, _x.failsafe_R.FS_Out_Of_Focus, _x.failsafe_R.FS_Blur, _x.failsafe_R.FS_Smeared_Halo, _x.failsafe_R.FS_illuminance, _x.failsafe_RL.FS_Rain, _x.failsafe_RL.FS_Fog, _x.failsafe_RL.FS_Snow, _x.failsafe_RL.FS_Full_Blockage, _x.failsafe_RL.FS_Partial_Blockage, _x.failsafe_RL.FS_Lowsun, _x.failsafe_RL.FS_Sunray, _x.failsafe_RL.FS_Splash, _x.failsafe_RL.FS_Windshield_Frozen, _x.failsafe_RL.FS_Out_Of_Calibration, _x.failsafe_RL.FS_Out_Of_Focus, _x.failsafe_RL.FS_Blur, _x.failsafe_RL.FS_Smeared_Halo, _x.failsafe_RL.FS_illuminance, _x.failsafe_RR.FS_Rain, _x.failsafe_RR.FS_Fog, _x.failsafe_RR.FS_Snow, _x.failsafe_RR.FS_Full_Blockage, _x.failsafe_RR.FS_Partial_Blockage, _x.failsafe_RR.FS_Lowsun, _x.failsafe_RR.FS_Sunray, _x.failsafe_RR.FS_Splash, _x.failsafe_RR.FS_Windshield_Frozen, _x.failsafe_RR.FS_Out_Of_Calibration, _x.failsafe_RR.FS_Out_Of_Focus, _x.failsafe_RR.FS_Blur, _x.failsafe_RR.FS_Smeared_Halo, _x.failsafe_RR.FS_illuminance, _x.failsafe_SVC_Front.FS_Rain, _x.failsafe_SVC_Front.FS_Fog, _x.failsafe_SVC_Front.FS_Snow, _x.failsafe_SVC_Front.FS_Full_Blockage, _x.failsafe_SVC_Front.FS_Partial_Blockage, _x.failsafe_SVC_Front.FS_Lowsun, _x.failsafe_SVC_Front.FS_Sunray, _x.failsafe_SVC_Front.FS_Splash, _x.failsafe_SVC_Front.FS_Windshield_Frozen, _x.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.failsafe_SVC_Front.FS_Out_Of_Focus, _x.failsafe_SVC_Front.FS_Blur, _x.failsafe_SVC_Front.FS_Smeared_Halo, _x.failsafe_SVC_Front.FS_illuminance, _x.failsafe_SVC_Rear.FS_Rain, _x.failsafe_SVC_Rear.FS_Fog, _x.failsafe_SVC_Rear.FS_Snow, _x.failsafe_SVC_Rear.FS_Full_Blockage, _x.failsafe_SVC_Rear.FS_Partial_Blockage, _x.failsafe_SVC_Rear.FS_Lowsun, _x.failsafe_SVC_Rear.FS_Sunray, _x.failsafe_SVC_Rear.FS_Splash, _x.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.failsafe_SVC_Rear.FS_Blur, _x.failsafe_SVC_Rear.FS_Smeared_Halo, _x.failsafe_SVC_Rear.FS_illuminance, _x.failsafe_SVC_Left.FS_Rain, _x.failsafe_SVC_Left.FS_Fog, _x.failsafe_SVC_Left.FS_Snow, _x.failsafe_SVC_Left.FS_Full_Blockage, _x.failsafe_SVC_Left.FS_Partial_Blockage, _x.failsafe_SVC_Left.FS_Lowsun, _x.failsafe_SVC_Left.FS_Sunray, _x.failsafe_SVC_Left.FS_Splash, _x.failsafe_SVC_Left.FS_Windshield_Frozen, _x.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.failsafe_SVC_Left.FS_Out_Of_Focus, _x.failsafe_SVC_Left.FS_Blur, _x.failsafe_SVC_Left.FS_Smeared_Halo, _x.failsafe_SVC_Left.FS_illuminance, _x.failsafe_SVC_Right.FS_Rain, _x.failsafe_SVC_Right.FS_Fog, _x.failsafe_SVC_Right.FS_Snow, _x.failsafe_SVC_Right.FS_Full_Blockage, _x.failsafe_SVC_Right.FS_Partial_Blockage, _x.failsafe_SVC_Right.FS_Lowsun, _x.failsafe_SVC_Right.FS_Sunray, _x.failsafe_SVC_Right.FS_Splash, _x.failsafe_SVC_Right.FS_Windshield_Frozen, _x.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.failsafe_SVC_Right.FS_Out_Of_Focus, _x.failsafe_SVC_Right.FS_Blur, _x.failsafe_SVC_Right.FS_Smeared_Halo, _x.failsafe_SVC_Right.FS_illuminance, _x.publish_ptp_ts,) = _get_struct_Q154IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Q154IQ().pack(_x.timestamp, _x.failsafe_FW.FS_Rain, _x.failsafe_FW.FS_Fog, _x.failsafe_FW.FS_Snow, _x.failsafe_FW.FS_Full_Blockage, _x.failsafe_FW.FS_Partial_Blockage, _x.failsafe_FW.FS_Lowsun, _x.failsafe_FW.FS_Sunray, _x.failsafe_FW.FS_Splash, _x.failsafe_FW.FS_Windshield_Frozen, _x.failsafe_FW.FS_Out_Of_Calibration, _x.failsafe_FW.FS_Out_Of_Focus, _x.failsafe_FW.FS_Blur, _x.failsafe_FW.FS_Smeared_Halo, _x.failsafe_FW.FS_illuminance, _x.failsafe_FN.FS_Rain, _x.failsafe_FN.FS_Fog, _x.failsafe_FN.FS_Snow, _x.failsafe_FN.FS_Full_Blockage, _x.failsafe_FN.FS_Partial_Blockage, _x.failsafe_FN.FS_Lowsun, _x.failsafe_FN.FS_Sunray, _x.failsafe_FN.FS_Splash, _x.failsafe_FN.FS_Windshield_Frozen, _x.failsafe_FN.FS_Out_Of_Calibration, _x.failsafe_FN.FS_Out_Of_Focus, _x.failsafe_FN.FS_Blur, _x.failsafe_FN.FS_Smeared_Halo, _x.failsafe_FN.FS_illuminance, _x.failsafe_FL.FS_Rain, _x.failsafe_FL.FS_Fog, _x.failsafe_FL.FS_Snow, _x.failsafe_FL.FS_Full_Blockage, _x.failsafe_FL.FS_Partial_Blockage, _x.failsafe_FL.FS_Lowsun, _x.failsafe_FL.FS_Sunray, _x.failsafe_FL.FS_Splash, _x.failsafe_FL.FS_Windshield_Frozen, _x.failsafe_FL.FS_Out_Of_Calibration, _x.failsafe_FL.FS_Out_Of_Focus, _x.failsafe_FL.FS_Blur, _x.failsafe_FL.FS_Smeared_Halo, _x.failsafe_FL.FS_illuminance, _x.failsafe_FR.FS_Rain, _x.failsafe_FR.FS_Fog, _x.failsafe_FR.FS_Snow, _x.failsafe_FR.FS_Full_Blockage, _x.failsafe_FR.FS_Partial_Blockage, _x.failsafe_FR.FS_Lowsun, _x.failsafe_FR.FS_Sunray, _x.failsafe_FR.FS_Splash, _x.failsafe_FR.FS_Windshield_Frozen, _x.failsafe_FR.FS_Out_Of_Calibration, _x.failsafe_FR.FS_Out_Of_Focus, _x.failsafe_FR.FS_Blur, _x.failsafe_FR.FS_Smeared_Halo, _x.failsafe_FR.FS_illuminance, _x.failsafe_R.FS_Rain, _x.failsafe_R.FS_Fog, _x.failsafe_R.FS_Snow, _x.failsafe_R.FS_Full_Blockage, _x.failsafe_R.FS_Partial_Blockage, _x.failsafe_R.FS_Lowsun, _x.failsafe_R.FS_Sunray, _x.failsafe_R.FS_Splash, _x.failsafe_R.FS_Windshield_Frozen, _x.failsafe_R.FS_Out_Of_Calibration, _x.failsafe_R.FS_Out_Of_Focus, _x.failsafe_R.FS_Blur, _x.failsafe_R.FS_Smeared_Halo, _x.failsafe_R.FS_illuminance, _x.failsafe_RL.FS_Rain, _x.failsafe_RL.FS_Fog, _x.failsafe_RL.FS_Snow, _x.failsafe_RL.FS_Full_Blockage, _x.failsafe_RL.FS_Partial_Blockage, _x.failsafe_RL.FS_Lowsun, _x.failsafe_RL.FS_Sunray, _x.failsafe_RL.FS_Splash, _x.failsafe_RL.FS_Windshield_Frozen, _x.failsafe_RL.FS_Out_Of_Calibration, _x.failsafe_RL.FS_Out_Of_Focus, _x.failsafe_RL.FS_Blur, _x.failsafe_RL.FS_Smeared_Halo, _x.failsafe_RL.FS_illuminance, _x.failsafe_RR.FS_Rain, _x.failsafe_RR.FS_Fog, _x.failsafe_RR.FS_Snow, _x.failsafe_RR.FS_Full_Blockage, _x.failsafe_RR.FS_Partial_Blockage, _x.failsafe_RR.FS_Lowsun, _x.failsafe_RR.FS_Sunray, _x.failsafe_RR.FS_Splash, _x.failsafe_RR.FS_Windshield_Frozen, _x.failsafe_RR.FS_Out_Of_Calibration, _x.failsafe_RR.FS_Out_Of_Focus, _x.failsafe_RR.FS_Blur, _x.failsafe_RR.FS_Smeared_Halo, _x.failsafe_RR.FS_illuminance, _x.failsafe_SVC_Front.FS_Rain, _x.failsafe_SVC_Front.FS_Fog, _x.failsafe_SVC_Front.FS_Snow, _x.failsafe_SVC_Front.FS_Full_Blockage, _x.failsafe_SVC_Front.FS_Partial_Blockage, _x.failsafe_SVC_Front.FS_Lowsun, _x.failsafe_SVC_Front.FS_Sunray, _x.failsafe_SVC_Front.FS_Splash, _x.failsafe_SVC_Front.FS_Windshield_Frozen, _x.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.failsafe_SVC_Front.FS_Out_Of_Focus, _x.failsafe_SVC_Front.FS_Blur, _x.failsafe_SVC_Front.FS_Smeared_Halo, _x.failsafe_SVC_Front.FS_illuminance, _x.failsafe_SVC_Rear.FS_Rain, _x.failsafe_SVC_Rear.FS_Fog, _x.failsafe_SVC_Rear.FS_Snow, _x.failsafe_SVC_Rear.FS_Full_Blockage, _x.failsafe_SVC_Rear.FS_Partial_Blockage, _x.failsafe_SVC_Rear.FS_Lowsun, _x.failsafe_SVC_Rear.FS_Sunray, _x.failsafe_SVC_Rear.FS_Splash, _x.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.failsafe_SVC_Rear.FS_Blur, _x.failsafe_SVC_Rear.FS_Smeared_Halo, _x.failsafe_SVC_Rear.FS_illuminance, _x.failsafe_SVC_Left.FS_Rain, _x.failsafe_SVC_Left.FS_Fog, _x.failsafe_SVC_Left.FS_Snow, _x.failsafe_SVC_Left.FS_Full_Blockage, _x.failsafe_SVC_Left.FS_Partial_Blockage, _x.failsafe_SVC_Left.FS_Lowsun, _x.failsafe_SVC_Left.FS_Sunray, _x.failsafe_SVC_Left.FS_Splash, _x.failsafe_SVC_Left.FS_Windshield_Frozen, _x.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.failsafe_SVC_Left.FS_Out_Of_Focus, _x.failsafe_SVC_Left.FS_Blur, _x.failsafe_SVC_Left.FS_Smeared_Halo, _x.failsafe_SVC_Left.FS_illuminance, _x.failsafe_SVC_Right.FS_Rain, _x.failsafe_SVC_Right.FS_Fog, _x.failsafe_SVC_Right.FS_Snow, _x.failsafe_SVC_Right.FS_Full_Blockage, _x.failsafe_SVC_Right.FS_Partial_Blockage, _x.failsafe_SVC_Right.FS_Lowsun, _x.failsafe_SVC_Right.FS_Sunray, _x.failsafe_SVC_Right.FS_Splash, _x.failsafe_SVC_Right.FS_Windshield_Frozen, _x.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.failsafe_SVC_Right.FS_Out_Of_Focus, _x.failsafe_SVC_Right.FS_Blur, _x.failsafe_SVC_Right.FS_Smeared_Halo, _x.failsafe_SVC_Right.FS_illuminance, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.failsafe_FW is None:
        self.failsafe_FW = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FN is None:
        self.failsafe_FN = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FL is None:
        self.failsafe_FL = rospy_message_converter.msg.FailSafe()
      if self.failsafe_FR is None:
        self.failsafe_FR = rospy_message_converter.msg.FailSafe()
      if self.failsafe_R is None:
        self.failsafe_R = rospy_message_converter.msg.FailSafe()
      if self.failsafe_RL is None:
        self.failsafe_RL = rospy_message_converter.msg.FailSafe()
      if self.failsafe_RR is None:
        self.failsafe_RR = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Front is None:
        self.failsafe_SVC_Front = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Rear is None:
        self.failsafe_SVC_Rear = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Left is None:
        self.failsafe_SVC_Left = rospy_message_converter.msg.FailSafe()
      if self.failsafe_SVC_Right is None:
        self.failsafe_SVC_Right = rospy_message_converter.msg.FailSafe()
      end = 0
      _x = self
      start = end
      end += 632
      (_x.timestamp, _x.failsafe_FW.FS_Rain, _x.failsafe_FW.FS_Fog, _x.failsafe_FW.FS_Snow, _x.failsafe_FW.FS_Full_Blockage, _x.failsafe_FW.FS_Partial_Blockage, _x.failsafe_FW.FS_Lowsun, _x.failsafe_FW.FS_Sunray, _x.failsafe_FW.FS_Splash, _x.failsafe_FW.FS_Windshield_Frozen, _x.failsafe_FW.FS_Out_Of_Calibration, _x.failsafe_FW.FS_Out_Of_Focus, _x.failsafe_FW.FS_Blur, _x.failsafe_FW.FS_Smeared_Halo, _x.failsafe_FW.FS_illuminance, _x.failsafe_FN.FS_Rain, _x.failsafe_FN.FS_Fog, _x.failsafe_FN.FS_Snow, _x.failsafe_FN.FS_Full_Blockage, _x.failsafe_FN.FS_Partial_Blockage, _x.failsafe_FN.FS_Lowsun, _x.failsafe_FN.FS_Sunray, _x.failsafe_FN.FS_Splash, _x.failsafe_FN.FS_Windshield_Frozen, _x.failsafe_FN.FS_Out_Of_Calibration, _x.failsafe_FN.FS_Out_Of_Focus, _x.failsafe_FN.FS_Blur, _x.failsafe_FN.FS_Smeared_Halo, _x.failsafe_FN.FS_illuminance, _x.failsafe_FL.FS_Rain, _x.failsafe_FL.FS_Fog, _x.failsafe_FL.FS_Snow, _x.failsafe_FL.FS_Full_Blockage, _x.failsafe_FL.FS_Partial_Blockage, _x.failsafe_FL.FS_Lowsun, _x.failsafe_FL.FS_Sunray, _x.failsafe_FL.FS_Splash, _x.failsafe_FL.FS_Windshield_Frozen, _x.failsafe_FL.FS_Out_Of_Calibration, _x.failsafe_FL.FS_Out_Of_Focus, _x.failsafe_FL.FS_Blur, _x.failsafe_FL.FS_Smeared_Halo, _x.failsafe_FL.FS_illuminance, _x.failsafe_FR.FS_Rain, _x.failsafe_FR.FS_Fog, _x.failsafe_FR.FS_Snow, _x.failsafe_FR.FS_Full_Blockage, _x.failsafe_FR.FS_Partial_Blockage, _x.failsafe_FR.FS_Lowsun, _x.failsafe_FR.FS_Sunray, _x.failsafe_FR.FS_Splash, _x.failsafe_FR.FS_Windshield_Frozen, _x.failsafe_FR.FS_Out_Of_Calibration, _x.failsafe_FR.FS_Out_Of_Focus, _x.failsafe_FR.FS_Blur, _x.failsafe_FR.FS_Smeared_Halo, _x.failsafe_FR.FS_illuminance, _x.failsafe_R.FS_Rain, _x.failsafe_R.FS_Fog, _x.failsafe_R.FS_Snow, _x.failsafe_R.FS_Full_Blockage, _x.failsafe_R.FS_Partial_Blockage, _x.failsafe_R.FS_Lowsun, _x.failsafe_R.FS_Sunray, _x.failsafe_R.FS_Splash, _x.failsafe_R.FS_Windshield_Frozen, _x.failsafe_R.FS_Out_Of_Calibration, _x.failsafe_R.FS_Out_Of_Focus, _x.failsafe_R.FS_Blur, _x.failsafe_R.FS_Smeared_Halo, _x.failsafe_R.FS_illuminance, _x.failsafe_RL.FS_Rain, _x.failsafe_RL.FS_Fog, _x.failsafe_RL.FS_Snow, _x.failsafe_RL.FS_Full_Blockage, _x.failsafe_RL.FS_Partial_Blockage, _x.failsafe_RL.FS_Lowsun, _x.failsafe_RL.FS_Sunray, _x.failsafe_RL.FS_Splash, _x.failsafe_RL.FS_Windshield_Frozen, _x.failsafe_RL.FS_Out_Of_Calibration, _x.failsafe_RL.FS_Out_Of_Focus, _x.failsafe_RL.FS_Blur, _x.failsafe_RL.FS_Smeared_Halo, _x.failsafe_RL.FS_illuminance, _x.failsafe_RR.FS_Rain, _x.failsafe_RR.FS_Fog, _x.failsafe_RR.FS_Snow, _x.failsafe_RR.FS_Full_Blockage, _x.failsafe_RR.FS_Partial_Blockage, _x.failsafe_RR.FS_Lowsun, _x.failsafe_RR.FS_Sunray, _x.failsafe_RR.FS_Splash, _x.failsafe_RR.FS_Windshield_Frozen, _x.failsafe_RR.FS_Out_Of_Calibration, _x.failsafe_RR.FS_Out_Of_Focus, _x.failsafe_RR.FS_Blur, _x.failsafe_RR.FS_Smeared_Halo, _x.failsafe_RR.FS_illuminance, _x.failsafe_SVC_Front.FS_Rain, _x.failsafe_SVC_Front.FS_Fog, _x.failsafe_SVC_Front.FS_Snow, _x.failsafe_SVC_Front.FS_Full_Blockage, _x.failsafe_SVC_Front.FS_Partial_Blockage, _x.failsafe_SVC_Front.FS_Lowsun, _x.failsafe_SVC_Front.FS_Sunray, _x.failsafe_SVC_Front.FS_Splash, _x.failsafe_SVC_Front.FS_Windshield_Frozen, _x.failsafe_SVC_Front.FS_Out_Of_Calibration, _x.failsafe_SVC_Front.FS_Out_Of_Focus, _x.failsafe_SVC_Front.FS_Blur, _x.failsafe_SVC_Front.FS_Smeared_Halo, _x.failsafe_SVC_Front.FS_illuminance, _x.failsafe_SVC_Rear.FS_Rain, _x.failsafe_SVC_Rear.FS_Fog, _x.failsafe_SVC_Rear.FS_Snow, _x.failsafe_SVC_Rear.FS_Full_Blockage, _x.failsafe_SVC_Rear.FS_Partial_Blockage, _x.failsafe_SVC_Rear.FS_Lowsun, _x.failsafe_SVC_Rear.FS_Sunray, _x.failsafe_SVC_Rear.FS_Splash, _x.failsafe_SVC_Rear.FS_Windshield_Frozen, _x.failsafe_SVC_Rear.FS_Out_Of_Calibration, _x.failsafe_SVC_Rear.FS_Out_Of_Focus, _x.failsafe_SVC_Rear.FS_Blur, _x.failsafe_SVC_Rear.FS_Smeared_Halo, _x.failsafe_SVC_Rear.FS_illuminance, _x.failsafe_SVC_Left.FS_Rain, _x.failsafe_SVC_Left.FS_Fog, _x.failsafe_SVC_Left.FS_Snow, _x.failsafe_SVC_Left.FS_Full_Blockage, _x.failsafe_SVC_Left.FS_Partial_Blockage, _x.failsafe_SVC_Left.FS_Lowsun, _x.failsafe_SVC_Left.FS_Sunray, _x.failsafe_SVC_Left.FS_Splash, _x.failsafe_SVC_Left.FS_Windshield_Frozen, _x.failsafe_SVC_Left.FS_Out_Of_Calibration, _x.failsafe_SVC_Left.FS_Out_Of_Focus, _x.failsafe_SVC_Left.FS_Blur, _x.failsafe_SVC_Left.FS_Smeared_Halo, _x.failsafe_SVC_Left.FS_illuminance, _x.failsafe_SVC_Right.FS_Rain, _x.failsafe_SVC_Right.FS_Fog, _x.failsafe_SVC_Right.FS_Snow, _x.failsafe_SVC_Right.FS_Full_Blockage, _x.failsafe_SVC_Right.FS_Partial_Blockage, _x.failsafe_SVC_Right.FS_Lowsun, _x.failsafe_SVC_Right.FS_Sunray, _x.failsafe_SVC_Right.FS_Splash, _x.failsafe_SVC_Right.FS_Windshield_Frozen, _x.failsafe_SVC_Right.FS_Out_Of_Calibration, _x.failsafe_SVC_Right.FS_Out_Of_Focus, _x.failsafe_SVC_Right.FS_Blur, _x.failsafe_SVC_Right.FS_Smeared_Halo, _x.failsafe_SVC_Right.FS_illuminance, _x.publish_ptp_ts,) = _get_struct_Q154IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_Q154IQ = None
def _get_struct_Q154IQ():
    global _struct_Q154IQ
    if _struct_Q154IQ is None:
        _struct_Q154IQ = struct.Struct("<Q154IQ")
    return _struct_Q154IQ

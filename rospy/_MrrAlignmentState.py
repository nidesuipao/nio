# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/MrrAlignmentState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MrrAlignmentState(genpy.Message):
  _md5sum = "315445781bb864398f32ae71c92376c6"
  _type = "rospy_message_converter/MrrAlignmentState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 mrr_align_hori_ang
uint32 mrr_align_hori_qf_
float32 mrr_align_vert_ang
uint32 mrr_align_vert_qf
uint32 mrr_align_hori_sts
uint32 mrr_align_hori_state
uint32 mrr_align_vert_sts
uint32 mrr_align_vert_state
"""
  __slots__ = ['mrr_align_hori_ang','mrr_align_hori_qf_','mrr_align_vert_ang','mrr_align_vert_qf','mrr_align_hori_sts','mrr_align_hori_state','mrr_align_vert_sts','mrr_align_vert_state']
  _slot_types = ['float32','uint32','float32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mrr_align_hori_ang,mrr_align_hori_qf_,mrr_align_vert_ang,mrr_align_vert_qf,mrr_align_hori_sts,mrr_align_hori_state,mrr_align_vert_sts,mrr_align_vert_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MrrAlignmentState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mrr_align_hori_ang is None:
        self.mrr_align_hori_ang = 0.
      if self.mrr_align_hori_qf_ is None:
        self.mrr_align_hori_qf_ = 0
      if self.mrr_align_vert_ang is None:
        self.mrr_align_vert_ang = 0.
      if self.mrr_align_vert_qf is None:
        self.mrr_align_vert_qf = 0
      if self.mrr_align_hori_sts is None:
        self.mrr_align_hori_sts = 0
      if self.mrr_align_hori_state is None:
        self.mrr_align_hori_state = 0
      if self.mrr_align_vert_sts is None:
        self.mrr_align_vert_sts = 0
      if self.mrr_align_vert_state is None:
        self.mrr_align_vert_state = 0
    else:
      self.mrr_align_hori_ang = 0.
      self.mrr_align_hori_qf_ = 0
      self.mrr_align_vert_ang = 0.
      self.mrr_align_vert_qf = 0
      self.mrr_align_hori_sts = 0
      self.mrr_align_hori_state = 0
      self.mrr_align_vert_sts = 0
      self.mrr_align_vert_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fIf5I().pack(_x.mrr_align_hori_ang, _x.mrr_align_hori_qf_, _x.mrr_align_vert_ang, _x.mrr_align_vert_qf, _x.mrr_align_hori_sts, _x.mrr_align_hori_state, _x.mrr_align_vert_sts, _x.mrr_align_vert_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.mrr_align_hori_ang, _x.mrr_align_hori_qf_, _x.mrr_align_vert_ang, _x.mrr_align_vert_qf, _x.mrr_align_hori_sts, _x.mrr_align_hori_state, _x.mrr_align_vert_sts, _x.mrr_align_vert_state,) = _get_struct_fIf5I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fIf5I().pack(_x.mrr_align_hori_ang, _x.mrr_align_hori_qf_, _x.mrr_align_vert_ang, _x.mrr_align_vert_qf, _x.mrr_align_hori_sts, _x.mrr_align_hori_state, _x.mrr_align_vert_sts, _x.mrr_align_vert_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.mrr_align_hori_ang, _x.mrr_align_hori_qf_, _x.mrr_align_vert_ang, _x.mrr_align_vert_qf, _x.mrr_align_hori_sts, _x.mrr_align_hori_state, _x.mrr_align_vert_sts, _x.mrr_align_vert_state,) = _get_struct_fIf5I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fIf5I = None
def _get_struct_fIf5I():
    global _struct_fIf5I
    if _struct_fIf5I is None:
        _struct_fIf5I = struct.Struct("<fIf5I")
    return _struct_fIf5I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/StGraphDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class StGraphDebug(genpy.Message):
  _md5sum = "3d9ce8c9f98958875526466861ae213e"
  _type = "rospy_message_converter/StGraphDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
StBoundaryDebug[] boundary
SpeedPoint[] speed_limit

================================================================================
MSG: rospy_message_converter/StBoundaryDebug
int32 id
SpeedPoint[] point
int32 type

================================================================================
MSG: rospy_message_converter/SpeedPoint
float64 s
float64 t
float64 v
float64 a
float64 da
"""
  __slots__ = ['id','boundary','speed_limit']
  _slot_types = ['int32','rospy_message_converter/StBoundaryDebug[]','rospy_message_converter/SpeedPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,boundary,speed_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StGraphDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.boundary is None:
        self.boundary = []
      if self.speed_limit is None:
        self.speed_limit = []
    else:
      self.id = 0
      self.boundary = []
      self.speed_limit = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.boundary)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point:
          _x = val2
          buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
      length = len(self.speed_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.speed_limit:
        _x = val1
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.boundary is None:
        self.boundary = None
      if self.speed_limit is None:
        self.speed_limit = None
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StBoundaryDebug()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.SpeedPoint()
          _x = val2
          start = end
          end += 40
          (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
          val1.point.append(val2)
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        self.boundary.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speed_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedPoint()
        _x = val1
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        self.speed_limit.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.boundary)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point:
          _x = val2
          buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
      length = len(self.speed_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.speed_limit:
        _x = val1
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.boundary is None:
        self.boundary = None
      if self.speed_limit is None:
        self.speed_limit = None
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StBoundaryDebug()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.SpeedPoint()
          _x = val2
          start = end
          end += 40
          (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
          val1.point.append(val2)
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        self.boundary.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speed_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedPoint()
        _x = val1
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        self.speed_limit.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

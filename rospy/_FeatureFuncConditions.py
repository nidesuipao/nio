# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FeatureFuncConditions.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FeatureFuncConditions(genpy.Message):
  _md5sum = "210ef61df32c3be2421ec20f85f52d9e"
  _type = "rospy_message_converter/FeatureFuncConditions"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool req_updated
bool general_enable
bool activate_enable
bool blocked
bool actv_trig
bool deactv_trig
bool control_lost
"""
  __slots__ = ['req_updated','general_enable','activate_enable','blocked','actv_trig','deactv_trig','control_lost']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       req_updated,general_enable,activate_enable,blocked,actv_trig,deactv_trig,control_lost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeatureFuncConditions, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.req_updated is None:
        self.req_updated = False
      if self.general_enable is None:
        self.general_enable = False
      if self.activate_enable is None:
        self.activate_enable = False
      if self.blocked is None:
        self.blocked = False
      if self.actv_trig is None:
        self.actv_trig = False
      if self.deactv_trig is None:
        self.deactv_trig = False
      if self.control_lost is None:
        self.control_lost = False
    else:
      self.req_updated = False
      self.general_enable = False
      self.activate_enable = False
      self.blocked = False
      self.actv_trig = False
      self.deactv_trig = False
      self.control_lost = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost,) = _get_struct_7B().unpack(str[start:end])
      self.req_updated = bool(self.req_updated)
      self.general_enable = bool(self.general_enable)
      self.activate_enable = bool(self.activate_enable)
      self.blocked = bool(self.blocked)
      self.actv_trig = bool(self.actv_trig)
      self.deactv_trig = bool(self.deactv_trig)
      self.control_lost = bool(self.control_lost)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost,) = _get_struct_7B().unpack(str[start:end])
      self.req_updated = bool(self.req_updated)
      self.general_enable = bool(self.general_enable)
      self.activate_enable = bool(self.activate_enable)
      self.blocked = bool(self.blocked)
      self.actv_trig = bool(self.actv_trig)
      self.deactv_trig = bool(self.deactv_trig)
      self.control_lost = bool(self.control_lost)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B

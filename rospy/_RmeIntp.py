# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RmeIntp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RmeIntp(genpy.Message):
  _md5sum = "398abe137d592316c7cd73a321afdf19"
  _type = "rospy_message_converter/RmeIntp"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RmePoint point
int32 id
int32 intp_class
int32 source
int32 role
int32 far_markclass
int32 far_color
uint32 far_spd

================================================================================
MSG: rospy_message_converter/RmePoint
float32 conf
float32 x
float32 y
float32 z
float32 w
float32 d
float32 s
"""
  __slots__ = ['point','id','intp_class','source','role','far_markclass','far_color','far_spd']
  _slot_types = ['rospy_message_converter/RmePoint','int32','int32','int32','int32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point,id,intp_class,source,role,far_markclass,far_color,far_spd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RmeIntp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = rospy_message_converter.msg.RmePoint()
      if self.id is None:
        self.id = 0
      if self.intp_class is None:
        self.intp_class = 0
      if self.source is None:
        self.source = 0
      if self.role is None:
        self.role = 0
      if self.far_markclass is None:
        self.far_markclass = 0
      if self.far_color is None:
        self.far_color = 0
      if self.far_spd is None:
        self.far_spd = 0
    else:
      self.point = rospy_message_converter.msg.RmePoint()
      self.id = 0
      self.intp_class = 0
      self.source = 0
      self.role = 0
      self.far_markclass = 0
      self.far_color = 0
      self.far_spd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f6iI().pack(_x.point.conf, _x.point.x, _x.point.y, _x.point.z, _x.point.w, _x.point.d, _x.point.s, _x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = rospy_message_converter.msg.RmePoint()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.point.conf, _x.point.x, _x.point.y, _x.point.z, _x.point.w, _x.point.d, _x.point.s, _x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd,) = _get_struct_7f6iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f6iI().pack(_x.point.conf, _x.point.x, _x.point.y, _x.point.z, _x.point.w, _x.point.d, _x.point.s, _x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = rospy_message_converter.msg.RmePoint()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.point.conf, _x.point.x, _x.point.y, _x.point.z, _x.point.w, _x.point.d, _x.point.s, _x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd,) = _get_struct_7f6iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f6iI = None
def _get_struct_7f6iI():
    global _struct_7f6iI
    if _struct_7f6iI is None:
        _struct_7f6iI = struct.Struct("<7f6iI")
    return _struct_7f6iI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/GPSValidFlags.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPSValidFlags(genpy.Message):
  _md5sum = "6ec4b847ff561eceddecd8b124568563"
  _type = "rospy_message_converter/GPSValidFlags"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool gps_lat
bool gps_lon
bool gps_alt
bool gps_course
bool gps_speed
bool gps_climb
bool gps_hdop
bool gps_vdop
bool gps_hacc
bool gps_vacc
"""
  __slots__ = ['gps_lat','gps_lon','gps_alt','gps_course','gps_speed','gps_climb','gps_hdop','gps_vdop','gps_hacc','gps_vacc']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_lat,gps_lon,gps_alt,gps_course,gps_speed,gps_climb,gps_hdop,gps_vdop,gps_hacc,gps_vacc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPSValidFlags, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_lat is None:
        self.gps_lat = False
      if self.gps_lon is None:
        self.gps_lon = False
      if self.gps_alt is None:
        self.gps_alt = False
      if self.gps_course is None:
        self.gps_course = False
      if self.gps_speed is None:
        self.gps_speed = False
      if self.gps_climb is None:
        self.gps_climb = False
      if self.gps_hdop is None:
        self.gps_hdop = False
      if self.gps_vdop is None:
        self.gps_vdop = False
      if self.gps_hacc is None:
        self.gps_hacc = False
      if self.gps_vacc is None:
        self.gps_vacc = False
    else:
      self.gps_lat = False
      self.gps_lon = False
      self.gps_alt = False
      self.gps_course = False
      self.gps_speed = False
      self.gps_climb = False
      self.gps_hdop = False
      self.gps_vdop = False
      self.gps_hacc = False
      self.gps_vacc = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_course, _x.gps_speed, _x.gps_climb, _x.gps_hdop, _x.gps_vdop, _x.gps_hacc, _x.gps_vacc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_course, _x.gps_speed, _x.gps_climb, _x.gps_hdop, _x.gps_vdop, _x.gps_hacc, _x.gps_vacc,) = _get_struct_10B().unpack(str[start:end])
      self.gps_lat = bool(self.gps_lat)
      self.gps_lon = bool(self.gps_lon)
      self.gps_alt = bool(self.gps_alt)
      self.gps_course = bool(self.gps_course)
      self.gps_speed = bool(self.gps_speed)
      self.gps_climb = bool(self.gps_climb)
      self.gps_hdop = bool(self.gps_hdop)
      self.gps_vdop = bool(self.gps_vdop)
      self.gps_hacc = bool(self.gps_hacc)
      self.gps_vacc = bool(self.gps_vacc)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_course, _x.gps_speed, _x.gps_climb, _x.gps_hdop, _x.gps_vdop, _x.gps_hacc, _x.gps_vacc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_course, _x.gps_speed, _x.gps_climb, _x.gps_hdop, _x.gps_vdop, _x.gps_hacc, _x.gps_vacc,) = _get_struct_10B().unpack(str[start:end])
      self.gps_lat = bool(self.gps_lat)
      self.gps_lon = bool(self.gps_lon)
      self.gps_alt = bool(self.gps_alt)
      self.gps_course = bool(self.gps_course)
      self.gps_speed = bool(self.gps_speed)
      self.gps_climb = bool(self.gps_climb)
      self.gps_hdop = bool(self.gps_hdop)
      self.gps_vdop = bool(self.gps_vdop)
      self.gps_hacc = bool(self.gps_hacc)
      self.gps_vacc = bool(self.gps_vacc)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B

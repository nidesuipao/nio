# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TrafficSign.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrafficSign(genpy.Message):
  _md5sum = "c614fe0d271ba3525a8a992b11f015da"
  _type = "rospy_message_converter/TrafficSign"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 TSR_ID
uint32 TSR_Age
int32 TSR_Name
int32 TSR_Shape
float32 TSR_Height
float32 TSR_Lat_Distance
float32 TSR_Long_Distance
int32 TSR_Filter_Type
int32 TSR_Relevancy
int32 TSR_Structure
float32 TSR_Panel_Width
float32 TSR_Panel_Height
float32 TSR_Confidence
float32 TSR_Name_Value
float32 TSR_Lat_Pos_P
float32 TSR_Long_Pos_P
float32 TSR_Panel_Width_P
float32 TSR_Panel_Height_P
int32 TSR_Color
float32 TSR_Confidence_Name
float32 TSR_Confidence_Value
float32 TSR_Relevancy_Value
"""
  __slots__ = ['TSR_ID','TSR_Age','TSR_Name','TSR_Shape','TSR_Height','TSR_Lat_Distance','TSR_Long_Distance','TSR_Filter_Type','TSR_Relevancy','TSR_Structure','TSR_Panel_Width','TSR_Panel_Height','TSR_Confidence','TSR_Name_Value','TSR_Lat_Pos_P','TSR_Long_Pos_P','TSR_Panel_Width_P','TSR_Panel_Height_P','TSR_Color','TSR_Confidence_Name','TSR_Confidence_Value','TSR_Relevancy_Value']
  _slot_types = ['uint32','uint32','int32','int32','float32','float32','float32','int32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','int32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TSR_ID,TSR_Age,TSR_Name,TSR_Shape,TSR_Height,TSR_Lat_Distance,TSR_Long_Distance,TSR_Filter_Type,TSR_Relevancy,TSR_Structure,TSR_Panel_Width,TSR_Panel_Height,TSR_Confidence,TSR_Name_Value,TSR_Lat_Pos_P,TSR_Long_Pos_P,TSR_Panel_Width_P,TSR_Panel_Height_P,TSR_Color,TSR_Confidence_Name,TSR_Confidence_Value,TSR_Relevancy_Value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficSign, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.TSR_ID is None:
        self.TSR_ID = 0
      if self.TSR_Age is None:
        self.TSR_Age = 0
      if self.TSR_Name is None:
        self.TSR_Name = 0
      if self.TSR_Shape is None:
        self.TSR_Shape = 0
      if self.TSR_Height is None:
        self.TSR_Height = 0.
      if self.TSR_Lat_Distance is None:
        self.TSR_Lat_Distance = 0.
      if self.TSR_Long_Distance is None:
        self.TSR_Long_Distance = 0.
      if self.TSR_Filter_Type is None:
        self.TSR_Filter_Type = 0
      if self.TSR_Relevancy is None:
        self.TSR_Relevancy = 0
      if self.TSR_Structure is None:
        self.TSR_Structure = 0
      if self.TSR_Panel_Width is None:
        self.TSR_Panel_Width = 0.
      if self.TSR_Panel_Height is None:
        self.TSR_Panel_Height = 0.
      if self.TSR_Confidence is None:
        self.TSR_Confidence = 0.
      if self.TSR_Name_Value is None:
        self.TSR_Name_Value = 0.
      if self.TSR_Lat_Pos_P is None:
        self.TSR_Lat_Pos_P = 0.
      if self.TSR_Long_Pos_P is None:
        self.TSR_Long_Pos_P = 0.
      if self.TSR_Panel_Width_P is None:
        self.TSR_Panel_Width_P = 0.
      if self.TSR_Panel_Height_P is None:
        self.TSR_Panel_Height_P = 0.
      if self.TSR_Color is None:
        self.TSR_Color = 0
      if self.TSR_Confidence_Name is None:
        self.TSR_Confidence_Name = 0.
      if self.TSR_Confidence_Value is None:
        self.TSR_Confidence_Value = 0.
      if self.TSR_Relevancy_Value is None:
        self.TSR_Relevancy_Value = 0.
    else:
      self.TSR_ID = 0
      self.TSR_Age = 0
      self.TSR_Name = 0
      self.TSR_Shape = 0
      self.TSR_Height = 0.
      self.TSR_Lat_Distance = 0.
      self.TSR_Long_Distance = 0.
      self.TSR_Filter_Type = 0
      self.TSR_Relevancy = 0
      self.TSR_Structure = 0
      self.TSR_Panel_Width = 0.
      self.TSR_Panel_Height = 0.
      self.TSR_Confidence = 0.
      self.TSR_Name_Value = 0.
      self.TSR_Lat_Pos_P = 0.
      self.TSR_Long_Pos_P = 0.
      self.TSR_Panel_Width_P = 0.
      self.TSR_Panel_Height_P = 0.
      self.TSR_Color = 0
      self.TSR_Confidence_Name = 0.
      self.TSR_Confidence_Value = 0.
      self.TSR_Relevancy_Value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i3f3i8fi3f().pack(_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value,) = _get_struct_2I2i3f3i8fi3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i3f3i8fi3f().pack(_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value,) = _get_struct_2I2i3f3i8fi3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i3f3i8fi3f = None
def _get_struct_2I2i3f3i8fi3f():
    global _struct_2I2i3f3i8fi3f
    if _struct_2I2i3f3i8fi3f is None:
        _struct_2I2i3f3i8fi3f = struct.Struct("<2I2i3f3i8fi3f")
    return _struct_2I2i3f3i8fi3f

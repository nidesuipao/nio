# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/WhlInfos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class WhlInfos(genpy.Message):
  _md5sum = "ae2829fadea325830d02053c8bdae037"
  _type = "rospy_message_converter/WhlInfos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """WhlDynInfo[] WhlDyn
WhlTpmsInfo[] WHlTpms
uint64 WhlDyn_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlDynInfo
int32 WhlSpdSts
int32 WhlSpdMovgDir
float32 WhlSpd
int32 WhlPlsCntrVld
uint32 WhlPlsCntr
uint64 WhlSpd_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlTpmsInfo
float32 Press
int32 Temp
uint32 SnsrFailSts
uint32 BatSts
int32 PressSts
uint32 DeltaPressSts
uint32 TempSts
"""
  __slots__ = ['WhlDyn','WHlTpms','WhlDyn_Timestamp','timestamp_ptp_ns']
  _slot_types = ['rospy_message_converter/WhlDynInfo[]','rospy_message_converter/WhlTpmsInfo[]','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       WhlDyn,WHlTpms,WhlDyn_Timestamp,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WhlInfos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.WhlDyn is None:
        self.WhlDyn = []
      if self.WHlTpms is None:
        self.WHlTpms = []
      if self.WhlDyn_Timestamp is None:
        self.WhlDyn_Timestamp = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
    else:
      self.WhlDyn = []
      self.WHlTpms = []
      self.WhlDyn_Timestamp = 0
      self.timestamp_ptp_ns = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      length = len(self.WHlTpms)
      buff.write(_struct_I.pack(length))
      for val1 in self.WHlTpms:
        _x = val1
        buff.write(_get_struct_fi2Ii2I().pack(_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.WhlDyn_Timestamp, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.WhlDyn is None:
        self.WhlDyn = None
      if self.WHlTpms is None:
        self.WHlTpms = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.WhlDyn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WHlTpms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlTpmsInfo()
        _x = val1
        start = end
        end += 28
        (_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts,) = _get_struct_fi2Ii2I().unpack(str[start:end])
        self.WHlTpms.append(val1)
      _x = self
      start = end
      end += 16
      (_x.WhlDyn_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      length = len(self.WHlTpms)
      buff.write(_struct_I.pack(length))
      for val1 in self.WHlTpms:
        _x = val1
        buff.write(_get_struct_fi2Ii2I().pack(_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.WhlDyn_Timestamp, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.WhlDyn is None:
        self.WhlDyn = None
      if self.WHlTpms is None:
        self.WHlTpms = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.WhlDyn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WHlTpms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlTpmsInfo()
        _x = val1
        start = end
        end += 28
        (_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts,) = _get_struct_fi2Ii2I().unpack(str[start:end])
        self.WHlTpms.append(val1)
      _x = self
      start = end
      end += 16
      (_x.WhlDyn_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2ifiI2Q = None
def _get_struct_2ifiI2Q():
    global _struct_2ifiI2Q
    if _struct_2ifiI2Q is None:
        _struct_2ifiI2Q = struct.Struct("<2ifiI2Q")
    return _struct_2ifiI2Q
_struct_fi2Ii2I = None
def _get_struct_fi2Ii2I():
    global _struct_fi2Ii2I
    if _struct_fi2Ii2I is None:
        _struct_fi2Ii2I = struct.Struct("<fi2Ii2I")
    return _struct_fi2Ii2I

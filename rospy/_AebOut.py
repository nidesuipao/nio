# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AebOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AebOut(genpy.Message):
  _md5sum = "30ea5faa8b83ce7a471874e910c7f1a2"
  _type = "rospy_message_converter/AebOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 aba_req
uint32 abalvl_req
uint32 abp_req
uint32 aeb_req
float32 aeb_tar_decel
uint32 awb_req
uint32 awblvl_req
uint32 eba_req
uint32 aebsts
uint32 fcwsetst
uint32 prewarnreq
uint32 txtinfo
uint32 AEBDecelReq_DummyForDVR
"""
  __slots__ = ['aba_req','abalvl_req','abp_req','aeb_req','aeb_tar_decel','awb_req','awblvl_req','eba_req','aebsts','fcwsetst','prewarnreq','txtinfo','AEBDecelReq_DummyForDVR']
  _slot_types = ['uint32','uint32','uint32','uint32','float32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       aba_req,abalvl_req,abp_req,aeb_req,aeb_tar_decel,awb_req,awblvl_req,eba_req,aebsts,fcwsetst,prewarnreq,txtinfo,AEBDecelReq_DummyForDVR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AebOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.aba_req is None:
        self.aba_req = 0
      if self.abalvl_req is None:
        self.abalvl_req = 0
      if self.abp_req is None:
        self.abp_req = 0
      if self.aeb_req is None:
        self.aeb_req = 0
      if self.aeb_tar_decel is None:
        self.aeb_tar_decel = 0.
      if self.awb_req is None:
        self.awb_req = 0
      if self.awblvl_req is None:
        self.awblvl_req = 0
      if self.eba_req is None:
        self.eba_req = 0
      if self.aebsts is None:
        self.aebsts = 0
      if self.fcwsetst is None:
        self.fcwsetst = 0
      if self.prewarnreq is None:
        self.prewarnreq = 0
      if self.txtinfo is None:
        self.txtinfo = 0
      if self.AEBDecelReq_DummyForDVR is None:
        self.AEBDecelReq_DummyForDVR = 0
    else:
      self.aba_req = 0
      self.abalvl_req = 0
      self.abp_req = 0
      self.aeb_req = 0
      self.aeb_tar_decel = 0.
      self.awb_req = 0
      self.awblvl_req = 0
      self.eba_req = 0
      self.aebsts = 0
      self.fcwsetst = 0
      self.prewarnreq = 0
      self.txtinfo = 0
      self.AEBDecelReq_DummyForDVR = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4If8I().pack(_x.aba_req, _x.abalvl_req, _x.abp_req, _x.aeb_req, _x.aeb_tar_decel, _x.awb_req, _x.awblvl_req, _x.eba_req, _x.aebsts, _x.fcwsetst, _x.prewarnreq, _x.txtinfo, _x.AEBDecelReq_DummyForDVR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.aba_req, _x.abalvl_req, _x.abp_req, _x.aeb_req, _x.aeb_tar_decel, _x.awb_req, _x.awblvl_req, _x.eba_req, _x.aebsts, _x.fcwsetst, _x.prewarnreq, _x.txtinfo, _x.AEBDecelReq_DummyForDVR,) = _get_struct_4If8I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4If8I().pack(_x.aba_req, _x.abalvl_req, _x.abp_req, _x.aeb_req, _x.aeb_tar_decel, _x.awb_req, _x.awblvl_req, _x.eba_req, _x.aebsts, _x.fcwsetst, _x.prewarnreq, _x.txtinfo, _x.AEBDecelReq_DummyForDVR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.aba_req, _x.abalvl_req, _x.abp_req, _x.aeb_req, _x.aeb_tar_decel, _x.awb_req, _x.awblvl_req, _x.eba_req, _x.aebsts, _x.fcwsetst, _x.prewarnreq, _x.txtinfo, _x.AEBDecelReq_DummyForDVR,) = _get_struct_4If8I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4If8I = None
def _get_struct_4If8I():
    global _struct_4If8I
    if _struct_4If8I is None:
        _struct_4If8I = struct.Struct("<4If8I")
    return _struct_4If8I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SVCObjResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SVCObjResult(genpy.Message):
  _md5sum = "620cc5425e91cc0ac0fa35a582857fbd"
  _type = "rospy_message_converter/SVCObjResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
int32 obj_sensor_src
SVCObject[] objects
int32 od_reserved1
int32 od_reserved2

================================================================================
MSG: rospy_message_converter/SVCObject
int32 index
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
float32 exist_prob
float32 height
float32 height_prob
int32 obj_type
int32 obj_mov_state
int32 obj_dim
float32 obj_distance
float32 obj_rel_vel_x
float32 obj_rel_vel_y
int32 reserved1
int32 reserved2

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y
"""
  __slots__ = ['timestamp','obj_sensor_src','objects','od_reserved1','od_reserved2']
  _slot_types = ['uint64','int32','rospy_message_converter/SVCObject[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,obj_sensor_src,objects,od_reserved1,od_reserved2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SVCObjResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.obj_sensor_src is None:
        self.obj_sensor_src = 0
      if self.objects is None:
        self.objects = []
      if self.od_reserved1 is None:
        self.od_reserved1 = 0
      if self.od_reserved2 is None:
        self.od_reserved2 = 0
    else:
      self.timestamp = 0
      self.obj_sensor_src = 0
      self.objects = []
      self.od_reserved1 = 0
      self.od_reserved2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Qi().pack(_x.timestamp, _x.obj_sensor_src))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.index
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pt1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.pt2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.pt3
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.pt4
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f3i3f2i().pack(_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2))
      _x = self
      buff.write(_get_struct_2i().pack(_x.od_reserved1, _x.od_reserved2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.timestamp, _x.obj_sensor_src,) = _get_struct_Qi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCObject()
        start = end
        end += 4
        (val1.index,) = _get_struct_i().unpack(str[start:end])
        _v5 = val1.pt1
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v6 = val1.pt2
        _x = _v6
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v7 = val1.pt3
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.pt4
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 44
        (_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2,) = _get_struct_3f3i3f2i().unpack(str[start:end])
        self.objects.append(val1)
      _x = self
      start = end
      end += 8
      (_x.od_reserved1, _x.od_reserved2,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Qi().pack(_x.timestamp, _x.obj_sensor_src))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.index
        buff.write(_get_struct_i().pack(_x))
        _v9 = val1.pt1
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v10 = val1.pt2
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = val1.pt3
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = val1.pt4
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f3i3f2i().pack(_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2))
      _x = self
      buff.write(_get_struct_2i().pack(_x.od_reserved1, _x.od_reserved2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.timestamp, _x.obj_sensor_src,) = _get_struct_Qi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCObject()
        start = end
        end += 4
        (val1.index,) = _get_struct_i().unpack(str[start:end])
        _v13 = val1.pt1
        _x = _v13
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v14 = val1.pt2
        _x = _v14
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v15 = val1.pt3
        _x = _v15
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.pt4
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 44
        (_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2,) = _get_struct_3f3i3f2i().unpack(str[start:end])
        self.objects.append(val1)
      _x = self
      start = end
      end += 8
      (_x.od_reserved1, _x.od_reserved2,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f3i3f2i = None
def _get_struct_3f3i3f2i():
    global _struct_3f3i3f2i
    if _struct_3f3i3f2i is None:
        _struct_3f3i3f2i = struct.Struct("<3f3i3f2i")
    return _struct_3f3i3f2i
_struct_Qi = None
def _get_struct_Qi():
    global _struct_Qi
    if _struct_Qi is None:
        _struct_Qi = struct.Struct("<Qi")
    return _struct_Qi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

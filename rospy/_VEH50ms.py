# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VEH50ms.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VEH50ms(genpy.Message):
  _md5sum = "6c36ae18d5c6a4790a4e643bf2fcf477"
  _type = "rospy_message_converter/VEH50ms"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SuspensionInfo Suspension
VehBodyInfo VehBody
DrvInfo DrvIn
UPAInfo UPA
PsapStationCan PsapCan
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SuspensionInfo
int32[] Lvl
bool[] LvlAdjm
bool LvlCalCmptl
bool CargoActv
int32 CrrntLvl
int32 TarLvl
bool ExtraHiPosn
bool ExtraLoPosn
bool EasyEntryEnaSts
int32 LvlAdjDrvgMod
int32 LvlAdjMod
int32 DampgCtrlMod
int32 DampgDrvgMod

================================================================================
MSG: rospy_message_converter/VehBodyInfo
VehStatusInfo VehStatus
DoorInfo Door
int32[] SeatOccpSts
uint32[] SeatBltSts
LightsInfo LightSts
WipperInfo WipperSts
TimingInfo Time
int32 CenLockSts
int32 TpmsSts
int32 DrvState
bool AmbTempValid
float32 AmbTemp
int32 TrailerModReq
int32 SWCAdjModReq
int32 NBSDrvrSts
int32 PrkgTyp
bool CrashDetd
bool AdsLampReq
float32 IntrTemp
int32 IntrTempVld
int32 MaiLiSet
int32 SDWReq
int32 UPAReq
bool HornCtrlSts
bool HeadLampsOn
int32 CDCCameraReq
bool ECOPlusModSts
int32 RpsKeyDist
int32[] MirrorStatus
int32 RpsMovReq
int32 RpsReq

================================================================================
MSG: rospy_message_converter/VehStatusInfo
int32 VehState
int32 VehStateASIL
int32 VehMode

================================================================================
MSG: rospy_message_converter/DoorInfo
int32[] DoorAjarSts
uint32 HoodAjarSts
uint32 TrAjarSts

================================================================================
MSG: rospy_message_converter/LightsInfo
int32[] FogLiSts
int32[] BeamSts
int32 HzrdWarnSts
int32[] TurnIndcrLiSts
int32[] MirrLigtSts
bool[] LgtErrBrkLi
bool[] LgtErrTurnIndcn
int32[] FogLiFctActvSts
uint32 LiSnsrData
bool LiSnsrFailSts
bool[] DowWarnAmbLeSts

================================================================================
MSG: rospy_message_converter/WipperInfo
int32 FrntWiprSts
int32 FrntWiperParkSts
int32 FrntWipMod
int32 FrntWiprReq

================================================================================
MSG: rospy_message_converter/TimingInfo
uint32 Yr
uint32 Mth
uint32 Day
uint32 Hr
uint32 Min
uint32 Sec

================================================================================
MSG: rospy_message_converter/DrvInfo
StrWhlSwtchInfo StrWhlSwtch
AdFunCfgInfo AdFunCfg
int32 FogLiPushSwtSts
int32 FrntWiprInterSpd
int32 FrntWiprSwtSts
int32 HiBeamSwtSts
int32 TurnIndcrSwtSts
int32 WiprAutoSwtSts
int32 WshrReWiprSwtSts
int32 SCMFailSts
int32 FogLiSCMCmd
int32 HiBeamSCMCmd
int32 ReWiprSCMCmd
int32 SVCAvl
uint32 NaviSpdLim
int32 WTIDispSt
int32 NaviSpdUnit
int32 NaviSpdLimSts
int32 NaviCurrentRoadTyp
uint32 NavCtryCod
CDCEqpmtInfo CDCEqpmt
int32 DA_TauGap_stored
DMSFncInfo DMSInfo
SVCFncInfo SVCInfo
int32 VehEgyMngtMod
float32 WheelBrkPReLe
float32 WheelBrkPFrntRi
float32 WheelBrkPFrntLe
float32 WheelBrkPReRi
int32 VehAccrModReq
int32 PwrSwapSteerWhlWarn
int32 DriverPSAPRequest
int32 PSAPParkViewStatus
int32 VehPrepReq
int32 StoreDrvrSlotSelnReq
bool LockConfig
uint32 DriverSAPAReq
uint32 DriverSAPASlotSelection

================================================================================
MSG: rospy_message_converter/StrWhlSwtchInfo
int32[] AdUpSwtSts
int32[] EnUpSwtSts

================================================================================
MSG: rospy_message_converter/AdFunCfgInfo
int32 AEBOnOffReq
int32 DASTactileOnOff
int32 DrvAlertSysOnOff
int32 FCTAOnOffCmd
int32 FCWSetReq
int32 LnAssistTctlOnOff
int32 LCAOnOff
int32 LCATctlWarnOnOff
int32 RCTAReq
int32 SetHMA
int32 SetLnAssiAidTyp
int32 SetLaneAssiSnvty
int32 RCTABReq
int32 SAPAPrkgModReq
int32 CDCFailSts
int32 Set360AP
int32 SetDA_ALCS
int32 SetDA_SpeedAssist
int32 SetDA_SteerAssist
int32 SetSWF
int32 ELKOnOff
int32 SdowOnOffReq
int32 GoNotifierSnvty
int32 DrowsinessSwtSts
int32 ELKSwtSts
int32 DistractionSwtSts
int32 SetDA_NOP
int32 SetSpeedCtrlSts
int32 CurveSpeedAssist
int32 TowModActv
int32 GoNotifierOnOff
bool AESOnOffSts
bool SwtichDA_NOP
int32 SetDA_NOPALC
bool ManHornSwtSts
bool TLNotifierOnOff
int32 SetDA_SetSpdOffs
int32 CfgTaskSwitch
int32 SetDA_SetSpdOffsValue

================================================================================
MSG: rospy_message_converter/CDCEqpmtInfo
bool AUDIOsts
bool HUDsts
bool ICSsts
bool ICsts

================================================================================
MSG: rospy_message_converter/DMSFncInfo
int32 DMSAlertLvl
int32 DMSAvlSts
int32 DMSDrvrAttention
uint32 DMSDrvrAttentionConfidence
int32 DMSDrvrEyeGazeDir
uint32 DMSDrvrEyeGazeDirConfidence
int32 DMSDrvrEyeSts
uint32 DMSDrvrEyeStsConfidence
int32 DMSDrvrHdPoseDir
uint32 DMSDrvrHdPoseDirConfidence
int32 DMSFailSafe
int32 DMSSts
int32 DMSDrvrFatigue
uint32 DMSDrvrFatigueConfidence

================================================================================
MSG: rospy_message_converter/SVCFncInfo
int32 SVCRiShaFb
int32 SVCReShaFb
int32 SVCLeShaFb
int32 SVCFrntShaFb
int32 F120ShaFb
int32 SVCLeShaReq
int32 SVCFrntShaReq
int32 SVCReShaReq
int32 F120ShaReq
int32 SVCRiShaReq

================================================================================
MSG: rospy_message_converter/UPAInfo
int32 SDWSts
int32 APASts
int32 MapObjSts
bool UpaSysDi
int32 UpaSysSts
bool UpaSysSrv
USSlotInfo[] USSlot
MapObjBaseType[] MapObj
ApaSdwType[] ApaSdw
UsRegnDstType[] UsRegnDst
int32 USSMode

================================================================================
MSG: rospy_message_converter/USSlotInfo
uint32 SlotSizeX
uint32 SlotSizeY
int32 SlotVehX
int32 SlotVehY
float32 SlotVehPsi
int32 SlotDepthRef
uint32 SlotIndex
int32 SlotType
int32 SlotSts
int32 SlotObj1Typ
int32 SlotObj1X
int32 SlotObj1Y
int32 SlotObj1Alpha
int32 SlotObj2Typ
int32 SlotObj2X
int32 SlotObj2Y
int32 SlotObj2Alpha

================================================================================
MSG: rospy_message_converter/MapObjBaseType
int32 MapObjTyp
float32 MapObjP1X
float32 MapObjP1Y
float32 MapObjP2X
float32 MapObjP2Y
float32 MapObjProblty
int32 MapObjHeiWarn
float32 MapObjHeiProblty
int32 MapObjHeiBrake

================================================================================
MSG: rospy_message_converter/ApaSdwType
uint32[] Dst

================================================================================
MSG: rospy_message_converter/UsRegnDstType
int32 SnsrFltSt
uint32[] RegnDst

================================================================================
MSG: rospy_message_converter/PsapStationCan
int32 ConnectionSts
int32 StationPlatformSts
int32 VehLongPosInStation
int32 VehLatPosInStation
"""
  __slots__ = ['Suspension','VehBody','DrvIn','UPA','PsapCan','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/SuspensionInfo','rospy_message_converter/VehBodyInfo','rospy_message_converter/DrvInfo','rospy_message_converter/UPAInfo','rospy_message_converter/PsapStationCan','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Suspension,VehBody,DrvIn,UPA,PsapCan,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VEH50ms, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Suspension is None:
        self.Suspension = rospy_message_converter.msg.SuspensionInfo()
      if self.VehBody is None:
        self.VehBody = rospy_message_converter.msg.VehBodyInfo()
      if self.DrvIn is None:
        self.DrvIn = rospy_message_converter.msg.DrvInfo()
      if self.UPA is None:
        self.UPA = rospy_message_converter.msg.UPAInfo()
      if self.PsapCan is None:
        self.PsapCan = rospy_message_converter.msg.PsapStationCan()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.Suspension = rospy_message_converter.msg.SuspensionInfo()
      self.VehBody = rospy_message_converter.msg.VehBodyInfo()
      self.DrvIn = rospy_message_converter.msg.DrvInfo()
      self.UPA = rospy_message_converter.msg.UPAInfo()
      self.PsapCan = rospy_message_converter.msg.PsapStationCan()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Suspension.Lvl)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.Suspension.Lvl))
      length = len(self.Suspension.LvlAdjm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.Suspension.LvlAdjm))
      _x = self
      buff.write(_get_struct_2B2i3B7i().pack(_x.Suspension.LvlCalCmptl, _x.Suspension.CargoActv, _x.Suspension.CrrntLvl, _x.Suspension.TarLvl, _x.Suspension.ExtraHiPosn, _x.Suspension.ExtraLoPosn, _x.Suspension.EasyEntryEnaSts, _x.Suspension.LvlAdjDrvgMod, _x.Suspension.LvlAdjMod, _x.Suspension.DampgCtrlMod, _x.Suspension.DampgDrvgMod, _x.VehBody.VehStatus.VehState, _x.VehBody.VehStatus.VehStateASIL, _x.VehBody.VehStatus.VehMode))
      length = len(self.VehBody.Door.DoorAjarSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.Door.DoorAjarSts))
      _x = self
      buff.write(_get_struct_2I().pack(_x.VehBody.Door.HoodAjarSts, _x.VehBody.Door.TrAjarSts))
      length = len(self.VehBody.SeatOccpSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.SeatOccpSts))
      length = len(self.VehBody.SeatBltSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.SeatBltSts))
      length = len(self.VehBody.LightSts.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.FogLiSts))
      length = len(self.VehBody.LightSts.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.BeamSts))
      _x = self.VehBody.LightSts.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.VehBody.LightSts.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.TurnIndcrLiSts))
      length = len(self.VehBody.LightSts.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.MirrLigtSts))
      length = len(self.VehBody.LightSts.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.LgtErrBrkLi))
      length = len(self.VehBody.LightSts.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.LgtErrTurnIndcn))
      length = len(self.VehBody.LightSts.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.FogLiFctActvSts))
      _x = self
      buff.write(_get_struct_IB().pack(_x.VehBody.LightSts.LiSnsrData, _x.VehBody.LightSts.LiSnsrFailSts))
      length = len(self.VehBody.LightSts.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.LightSts.DowWarnAmbLeSts))
      _x = self
      buff.write(_get_struct_4i6I3iBf4i2Bf4i2BiBi().pack(_x.VehBody.WipperSts.FrntWiprSts, _x.VehBody.WipperSts.FrntWiperParkSts, _x.VehBody.WipperSts.FrntWipMod, _x.VehBody.WipperSts.FrntWiprReq, _x.VehBody.Time.Yr, _x.VehBody.Time.Mth, _x.VehBody.Time.Day, _x.VehBody.Time.Hr, _x.VehBody.Time.Min, _x.VehBody.Time.Sec, _x.VehBody.CenLockSts, _x.VehBody.TpmsSts, _x.VehBody.DrvState, _x.VehBody.AmbTempValid, _x.VehBody.AmbTemp, _x.VehBody.TrailerModReq, _x.VehBody.SWCAdjModReq, _x.VehBody.NBSDrvrSts, _x.VehBody.PrkgTyp, _x.VehBody.CrashDetd, _x.VehBody.AdsLampReq, _x.VehBody.IntrTemp, _x.VehBody.IntrTempVld, _x.VehBody.MaiLiSet, _x.VehBody.SDWReq, _x.VehBody.UPAReq, _x.VehBody.HornCtrlSts, _x.VehBody.HeadLampsOn, _x.VehBody.CDCCameraReq, _x.VehBody.ECOPlusModSts, _x.VehBody.RpsKeyDist))
      length = len(self.VehBody.MirrorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.VehBody.MirrorStatus))
      _x = self
      buff.write(_get_struct_2i().pack(_x.VehBody.RpsMovReq, _x.VehBody.RpsReq))
      length = len(self.DrvIn.StrWhlSwtch.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvIn.StrWhlSwtch.AdUpSwtSts))
      length = len(self.DrvIn.StrWhlSwtch.EnUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvIn.StrWhlSwtch.EnUpSwtSts))
      _x = self
      buff.write(_get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().pack(_x.DrvIn.AdFunCfg.AEBOnOffReq, _x.DrvIn.AdFunCfg.DASTactileOnOff, _x.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.DrvIn.AdFunCfg.FCWSetReq, _x.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.DrvIn.AdFunCfg.LCAOnOff, _x.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.DrvIn.AdFunCfg.RCTAReq, _x.DrvIn.AdFunCfg.SetHMA, _x.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.DrvIn.AdFunCfg.RCTABReq, _x.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.DrvIn.AdFunCfg.CDCFailSts, _x.DrvIn.AdFunCfg.Set360AP, _x.DrvIn.AdFunCfg.SetDA_ALCS, _x.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.DrvIn.AdFunCfg.SetSWF, _x.DrvIn.AdFunCfg.ELKOnOff, _x.DrvIn.AdFunCfg.SdowOnOffReq, _x.DrvIn.AdFunCfg.GoNotifierSnvty, _x.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.DrvIn.AdFunCfg.ELKSwtSts, _x.DrvIn.AdFunCfg.DistractionSwtSts, _x.DrvIn.AdFunCfg.SetDA_NOP, _x.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.DrvIn.AdFunCfg.CurveSpeedAssist, _x.DrvIn.AdFunCfg.TowModActv, _x.DrvIn.AdFunCfg.GoNotifierOnOff, _x.DrvIn.AdFunCfg.AESOnOffSts, _x.DrvIn.AdFunCfg.SwtichDA_NOP, _x.DrvIn.AdFunCfg.SetDA_NOPALC, _x.DrvIn.AdFunCfg.ManHornSwtSts, _x.DrvIn.AdFunCfg.TLNotifierOnOff, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.DrvIn.AdFunCfg.CfgTaskSwitch, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.DrvIn.FogLiPushSwtSts, _x.DrvIn.FrntWiprInterSpd, _x.DrvIn.FrntWiprSwtSts, _x.DrvIn.HiBeamSwtSts, _x.DrvIn.TurnIndcrSwtSts, _x.DrvIn.WiprAutoSwtSts, _x.DrvIn.WshrReWiprSwtSts, _x.DrvIn.SCMFailSts, _x.DrvIn.FogLiSCMCmd, _x.DrvIn.HiBeamSCMCmd, _x.DrvIn.ReWiprSCMCmd, _x.DrvIn.SVCAvl, _x.DrvIn.NaviSpdLim, _x.DrvIn.WTIDispSt, _x.DrvIn.NaviSpdUnit, _x.DrvIn.NaviSpdLimSts, _x.DrvIn.NaviCurrentRoadTyp, _x.DrvIn.NavCtryCod, _x.DrvIn.CDCEqpmt.AUDIOsts, _x.DrvIn.CDCEqpmt.HUDsts, _x.DrvIn.CDCEqpmt.ICSsts, _x.DrvIn.CDCEqpmt.ICsts, _x.DrvIn.DA_TauGap_stored, _x.DrvIn.DMSInfo.DMSAlertLvl, _x.DrvIn.DMSInfo.DMSAvlSts, _x.DrvIn.DMSInfo.DMSDrvrAttention, _x.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DrvIn.DMSInfo.DMSFailSafe, _x.DrvIn.DMSInfo.DMSSts, _x.DrvIn.DMSInfo.DMSDrvrFatigue, _x.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.DrvIn.SVCInfo.SVCRiShaFb, _x.DrvIn.SVCInfo.SVCReShaFb, _x.DrvIn.SVCInfo.SVCLeShaFb, _x.DrvIn.SVCInfo.SVCFrntShaFb, _x.DrvIn.SVCInfo.F120ShaFb, _x.DrvIn.SVCInfo.SVCLeShaReq, _x.DrvIn.SVCInfo.SVCFrntShaReq, _x.DrvIn.SVCInfo.SVCReShaReq, _x.DrvIn.SVCInfo.F120ShaReq, _x.DrvIn.SVCInfo.SVCRiShaReq, _x.DrvIn.VehEgyMngtMod, _x.DrvIn.WheelBrkPReLe, _x.DrvIn.WheelBrkPFrntRi, _x.DrvIn.WheelBrkPFrntLe, _x.DrvIn.WheelBrkPReRi, _x.DrvIn.VehAccrModReq, _x.DrvIn.PwrSwapSteerWhlWarn, _x.DrvIn.DriverPSAPRequest, _x.DrvIn.PSAPParkViewStatus, _x.DrvIn.VehPrepReq, _x.DrvIn.StoreDrvrSlotSelnReq, _x.DrvIn.LockConfig, _x.DrvIn.DriverSAPAReq, _x.DrvIn.DriverSAPASlotSelection, _x.UPA.SDWSts, _x.UPA.APASts, _x.UPA.MapObjSts, _x.UPA.UpaSysDi, _x.UPA.UpaSysSts, _x.UPA.UpaSysSrv))
      length = len(self.UPA.USSlot)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.USSlot:
        _x = val1
        buff.write(_get_struct_2I2ifiI10i().pack(_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha))
      length = len(self.UPA.MapObj)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.MapObj:
        _x = val1
        buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
      length = len(self.UPA.ApaSdw)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.ApaSdw:
        length = len(val1.Dst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.Dst))
      length = len(self.UPA.UsRegnDst)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.UsRegnDst:
        _x = val1.SnsrFltSt
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.RegnDst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.RegnDst))
      _x = self
      buff.write(_get_struct_5iQ().pack(_x.UPA.USSMode, _x.PsapCan.ConnectionSts, _x.PsapCan.StationPlatformSts, _x.PsapCan.VehLongPosInStation, _x.PsapCan.VehLatPosInStation, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Suspension is None:
        self.Suspension = rospy_message_converter.msg.SuspensionInfo()
      if self.VehBody is None:
        self.VehBody = rospy_message_converter.msg.VehBodyInfo()
      if self.DrvIn is None:
        self.DrvIn = rospy_message_converter.msg.DrvInfo()
      if self.UPA is None:
        self.UPA = rospy_message_converter.msg.UPAInfo()
      if self.PsapCan is None:
        self.PsapCan = rospy_message_converter.msg.PsapStationCan()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Suspension.Lvl = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Suspension.LvlAdjm = s.unpack(str[start:end])
      self.Suspension.LvlAdjm = list(map(bool, self.Suspension.LvlAdjm))
      _x = self
      start = end
      end += 41
      (_x.Suspension.LvlCalCmptl, _x.Suspension.CargoActv, _x.Suspension.CrrntLvl, _x.Suspension.TarLvl, _x.Suspension.ExtraHiPosn, _x.Suspension.ExtraLoPosn, _x.Suspension.EasyEntryEnaSts, _x.Suspension.LvlAdjDrvgMod, _x.Suspension.LvlAdjMod, _x.Suspension.DampgCtrlMod, _x.Suspension.DampgDrvgMod, _x.VehBody.VehStatus.VehState, _x.VehBody.VehStatus.VehStateASIL, _x.VehBody.VehStatus.VehMode,) = _get_struct_2B2i3B7i().unpack(str[start:end])
      self.Suspension.LvlCalCmptl = bool(self.Suspension.LvlCalCmptl)
      self.Suspension.CargoActv = bool(self.Suspension.CargoActv)
      self.Suspension.ExtraHiPosn = bool(self.Suspension.ExtraHiPosn)
      self.Suspension.ExtraLoPosn = bool(self.Suspension.ExtraLoPosn)
      self.Suspension.EasyEntryEnaSts = bool(self.Suspension.EasyEntryEnaSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.Door.DoorAjarSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.VehBody.Door.HoodAjarSts, _x.VehBody.Door.TrAjarSts,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.SeatOccpSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.SeatBltSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.FogLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.BeamSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.VehBody.LightSts.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.TurnIndcrLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.MirrLigtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.LgtErrBrkLi = s.unpack(str[start:end])
      self.VehBody.LightSts.LgtErrBrkLi = list(map(bool, self.VehBody.LightSts.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.LgtErrTurnIndcn = s.unpack(str[start:end])
      self.VehBody.LightSts.LgtErrTurnIndcn = list(map(bool, self.VehBody.LightSts.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.FogLiFctActvSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.VehBody.LightSts.LiSnsrData, _x.VehBody.LightSts.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.VehBody.LightSts.LiSnsrFailSts = bool(self.VehBody.LightSts.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.DowWarnAmbLeSts = s.unpack(str[start:end])
      self.VehBody.LightSts.DowWarnAmbLeSts = list(map(bool, self.VehBody.LightSts.DowWarnAmbLeSts))
      _x = self
      start = end
      end += 106
      (_x.VehBody.WipperSts.FrntWiprSts, _x.VehBody.WipperSts.FrntWiperParkSts, _x.VehBody.WipperSts.FrntWipMod, _x.VehBody.WipperSts.FrntWiprReq, _x.VehBody.Time.Yr, _x.VehBody.Time.Mth, _x.VehBody.Time.Day, _x.VehBody.Time.Hr, _x.VehBody.Time.Min, _x.VehBody.Time.Sec, _x.VehBody.CenLockSts, _x.VehBody.TpmsSts, _x.VehBody.DrvState, _x.VehBody.AmbTempValid, _x.VehBody.AmbTemp, _x.VehBody.TrailerModReq, _x.VehBody.SWCAdjModReq, _x.VehBody.NBSDrvrSts, _x.VehBody.PrkgTyp, _x.VehBody.CrashDetd, _x.VehBody.AdsLampReq, _x.VehBody.IntrTemp, _x.VehBody.IntrTempVld, _x.VehBody.MaiLiSet, _x.VehBody.SDWReq, _x.VehBody.UPAReq, _x.VehBody.HornCtrlSts, _x.VehBody.HeadLampsOn, _x.VehBody.CDCCameraReq, _x.VehBody.ECOPlusModSts, _x.VehBody.RpsKeyDist,) = _get_struct_4i6I3iBf4i2Bf4i2BiBi().unpack(str[start:end])
      self.VehBody.AmbTempValid = bool(self.VehBody.AmbTempValid)
      self.VehBody.CrashDetd = bool(self.VehBody.CrashDetd)
      self.VehBody.AdsLampReq = bool(self.VehBody.AdsLampReq)
      self.VehBody.HornCtrlSts = bool(self.VehBody.HornCtrlSts)
      self.VehBody.HeadLampsOn = bool(self.VehBody.HeadLampsOn)
      self.VehBody.ECOPlusModSts = bool(self.VehBody.ECOPlusModSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.MirrorStatus = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.VehBody.RpsMovReq, _x.VehBody.RpsReq,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvIn.StrWhlSwtch.AdUpSwtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvIn.StrWhlSwtch.EnUpSwtSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 391
      (_x.DrvIn.AdFunCfg.AEBOnOffReq, _x.DrvIn.AdFunCfg.DASTactileOnOff, _x.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.DrvIn.AdFunCfg.FCWSetReq, _x.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.DrvIn.AdFunCfg.LCAOnOff, _x.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.DrvIn.AdFunCfg.RCTAReq, _x.DrvIn.AdFunCfg.SetHMA, _x.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.DrvIn.AdFunCfg.RCTABReq, _x.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.DrvIn.AdFunCfg.CDCFailSts, _x.DrvIn.AdFunCfg.Set360AP, _x.DrvIn.AdFunCfg.SetDA_ALCS, _x.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.DrvIn.AdFunCfg.SetSWF, _x.DrvIn.AdFunCfg.ELKOnOff, _x.DrvIn.AdFunCfg.SdowOnOffReq, _x.DrvIn.AdFunCfg.GoNotifierSnvty, _x.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.DrvIn.AdFunCfg.ELKSwtSts, _x.DrvIn.AdFunCfg.DistractionSwtSts, _x.DrvIn.AdFunCfg.SetDA_NOP, _x.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.DrvIn.AdFunCfg.CurveSpeedAssist, _x.DrvIn.AdFunCfg.TowModActv, _x.DrvIn.AdFunCfg.GoNotifierOnOff, _x.DrvIn.AdFunCfg.AESOnOffSts, _x.DrvIn.AdFunCfg.SwtichDA_NOP, _x.DrvIn.AdFunCfg.SetDA_NOPALC, _x.DrvIn.AdFunCfg.ManHornSwtSts, _x.DrvIn.AdFunCfg.TLNotifierOnOff, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.DrvIn.AdFunCfg.CfgTaskSwitch, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.DrvIn.FogLiPushSwtSts, _x.DrvIn.FrntWiprInterSpd, _x.DrvIn.FrntWiprSwtSts, _x.DrvIn.HiBeamSwtSts, _x.DrvIn.TurnIndcrSwtSts, _x.DrvIn.WiprAutoSwtSts, _x.DrvIn.WshrReWiprSwtSts, _x.DrvIn.SCMFailSts, _x.DrvIn.FogLiSCMCmd, _x.DrvIn.HiBeamSCMCmd, _x.DrvIn.ReWiprSCMCmd, _x.DrvIn.SVCAvl, _x.DrvIn.NaviSpdLim, _x.DrvIn.WTIDispSt, _x.DrvIn.NaviSpdUnit, _x.DrvIn.NaviSpdLimSts, _x.DrvIn.NaviCurrentRoadTyp, _x.DrvIn.NavCtryCod, _x.DrvIn.CDCEqpmt.AUDIOsts, _x.DrvIn.CDCEqpmt.HUDsts, _x.DrvIn.CDCEqpmt.ICSsts, _x.DrvIn.CDCEqpmt.ICsts, _x.DrvIn.DA_TauGap_stored, _x.DrvIn.DMSInfo.DMSAlertLvl, _x.DrvIn.DMSInfo.DMSAvlSts, _x.DrvIn.DMSInfo.DMSDrvrAttention, _x.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DrvIn.DMSInfo.DMSFailSafe, _x.DrvIn.DMSInfo.DMSSts, _x.DrvIn.DMSInfo.DMSDrvrFatigue, _x.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.DrvIn.SVCInfo.SVCRiShaFb, _x.DrvIn.SVCInfo.SVCReShaFb, _x.DrvIn.SVCInfo.SVCLeShaFb, _x.DrvIn.SVCInfo.SVCFrntShaFb, _x.DrvIn.SVCInfo.F120ShaFb, _x.DrvIn.SVCInfo.SVCLeShaReq, _x.DrvIn.SVCInfo.SVCFrntShaReq, _x.DrvIn.SVCInfo.SVCReShaReq, _x.DrvIn.SVCInfo.F120ShaReq, _x.DrvIn.SVCInfo.SVCRiShaReq, _x.DrvIn.VehEgyMngtMod, _x.DrvIn.WheelBrkPReLe, _x.DrvIn.WheelBrkPFrntRi, _x.DrvIn.WheelBrkPFrntLe, _x.DrvIn.WheelBrkPReRi, _x.DrvIn.VehAccrModReq, _x.DrvIn.PwrSwapSteerWhlWarn, _x.DrvIn.DriverPSAPRequest, _x.DrvIn.PSAPParkViewStatus, _x.DrvIn.VehPrepReq, _x.DrvIn.StoreDrvrSlotSelnReq, _x.DrvIn.LockConfig, _x.DrvIn.DriverSAPAReq, _x.DrvIn.DriverSAPASlotSelection, _x.UPA.SDWSts, _x.UPA.APASts, _x.UPA.MapObjSts, _x.UPA.UpaSysDi, _x.UPA.UpaSysSts, _x.UPA.UpaSysSrv,) = _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().unpack(str[start:end])
      self.DrvIn.AdFunCfg.AESOnOffSts = bool(self.DrvIn.AdFunCfg.AESOnOffSts)
      self.DrvIn.AdFunCfg.SwtichDA_NOP = bool(self.DrvIn.AdFunCfg.SwtichDA_NOP)
      self.DrvIn.AdFunCfg.ManHornSwtSts = bool(self.DrvIn.AdFunCfg.ManHornSwtSts)
      self.DrvIn.AdFunCfg.TLNotifierOnOff = bool(self.DrvIn.AdFunCfg.TLNotifierOnOff)
      self.DrvIn.CDCEqpmt.AUDIOsts = bool(self.DrvIn.CDCEqpmt.AUDIOsts)
      self.DrvIn.CDCEqpmt.HUDsts = bool(self.DrvIn.CDCEqpmt.HUDsts)
      self.DrvIn.CDCEqpmt.ICSsts = bool(self.DrvIn.CDCEqpmt.ICSsts)
      self.DrvIn.CDCEqpmt.ICsts = bool(self.DrvIn.CDCEqpmt.ICsts)
      self.DrvIn.LockConfig = bool(self.DrvIn.LockConfig)
      self.UPA.UpaSysDi = bool(self.UPA.UpaSysDi)
      self.UPA.UpaSysSrv = bool(self.UPA.UpaSysSrv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.USSlot = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.USSlotInfo()
        _x = val1
        start = end
        end += 68
        (_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha,) = _get_struct_2I2ifiI10i().unpack(str[start:end])
        self.UPA.USSlot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.MapObj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MapObjBaseType()
        _x = val1
        start = end
        end += 36
        (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
        self.UPA.MapObj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.ApaSdw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ApaSdwType()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.Dst = s.unpack(str[start:end])
        self.UPA.ApaSdw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.UsRegnDst = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.UsRegnDstType()
        start = end
        end += 4
        (val1.SnsrFltSt,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.RegnDst = s.unpack(str[start:end])
        self.UPA.UsRegnDst.append(val1)
      _x = self
      start = end
      end += 28
      (_x.UPA.USSMode, _x.PsapCan.ConnectionSts, _x.PsapCan.StationPlatformSts, _x.PsapCan.VehLongPosInStation, _x.PsapCan.VehLatPosInStation, _x.publish_ptp_ts,) = _get_struct_5iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Suspension.Lvl)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Suspension.Lvl.tostring())
      length = len(self.Suspension.LvlAdjm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.Suspension.LvlAdjm.tostring())
      _x = self
      buff.write(_get_struct_2B2i3B7i().pack(_x.Suspension.LvlCalCmptl, _x.Suspension.CargoActv, _x.Suspension.CrrntLvl, _x.Suspension.TarLvl, _x.Suspension.ExtraHiPosn, _x.Suspension.ExtraLoPosn, _x.Suspension.EasyEntryEnaSts, _x.Suspension.LvlAdjDrvgMod, _x.Suspension.LvlAdjMod, _x.Suspension.DampgCtrlMod, _x.Suspension.DampgDrvgMod, _x.VehBody.VehStatus.VehState, _x.VehBody.VehStatus.VehStateASIL, _x.VehBody.VehStatus.VehMode))
      length = len(self.VehBody.Door.DoorAjarSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.Door.DoorAjarSts.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.VehBody.Door.HoodAjarSts, _x.VehBody.Door.TrAjarSts))
      length = len(self.VehBody.SeatOccpSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.SeatOccpSts.tostring())
      length = len(self.VehBody.SeatBltSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.VehBody.SeatBltSts.tostring())
      length = len(self.VehBody.LightSts.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.LightSts.FogLiSts.tostring())
      length = len(self.VehBody.LightSts.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.LightSts.BeamSts.tostring())
      _x = self.VehBody.LightSts.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.VehBody.LightSts.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.LightSts.TurnIndcrLiSts.tostring())
      length = len(self.VehBody.LightSts.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.LightSts.MirrLigtSts.tostring())
      length = len(self.VehBody.LightSts.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.VehBody.LightSts.LgtErrBrkLi.tostring())
      length = len(self.VehBody.LightSts.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.VehBody.LightSts.LgtErrTurnIndcn.tostring())
      length = len(self.VehBody.LightSts.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.LightSts.FogLiFctActvSts.tostring())
      _x = self
      buff.write(_get_struct_IB().pack(_x.VehBody.LightSts.LiSnsrData, _x.VehBody.LightSts.LiSnsrFailSts))
      length = len(self.VehBody.LightSts.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.VehBody.LightSts.DowWarnAmbLeSts.tostring())
      _x = self
      buff.write(_get_struct_4i6I3iBf4i2Bf4i2BiBi().pack(_x.VehBody.WipperSts.FrntWiprSts, _x.VehBody.WipperSts.FrntWiperParkSts, _x.VehBody.WipperSts.FrntWipMod, _x.VehBody.WipperSts.FrntWiprReq, _x.VehBody.Time.Yr, _x.VehBody.Time.Mth, _x.VehBody.Time.Day, _x.VehBody.Time.Hr, _x.VehBody.Time.Min, _x.VehBody.Time.Sec, _x.VehBody.CenLockSts, _x.VehBody.TpmsSts, _x.VehBody.DrvState, _x.VehBody.AmbTempValid, _x.VehBody.AmbTemp, _x.VehBody.TrailerModReq, _x.VehBody.SWCAdjModReq, _x.VehBody.NBSDrvrSts, _x.VehBody.PrkgTyp, _x.VehBody.CrashDetd, _x.VehBody.AdsLampReq, _x.VehBody.IntrTemp, _x.VehBody.IntrTempVld, _x.VehBody.MaiLiSet, _x.VehBody.SDWReq, _x.VehBody.UPAReq, _x.VehBody.HornCtrlSts, _x.VehBody.HeadLampsOn, _x.VehBody.CDCCameraReq, _x.VehBody.ECOPlusModSts, _x.VehBody.RpsKeyDist))
      length = len(self.VehBody.MirrorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.VehBody.MirrorStatus.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.VehBody.RpsMovReq, _x.VehBody.RpsReq))
      length = len(self.DrvIn.StrWhlSwtch.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvIn.StrWhlSwtch.AdUpSwtSts.tostring())
      length = len(self.DrvIn.StrWhlSwtch.EnUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvIn.StrWhlSwtch.EnUpSwtSts.tostring())
      _x = self
      buff.write(_get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().pack(_x.DrvIn.AdFunCfg.AEBOnOffReq, _x.DrvIn.AdFunCfg.DASTactileOnOff, _x.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.DrvIn.AdFunCfg.FCWSetReq, _x.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.DrvIn.AdFunCfg.LCAOnOff, _x.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.DrvIn.AdFunCfg.RCTAReq, _x.DrvIn.AdFunCfg.SetHMA, _x.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.DrvIn.AdFunCfg.RCTABReq, _x.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.DrvIn.AdFunCfg.CDCFailSts, _x.DrvIn.AdFunCfg.Set360AP, _x.DrvIn.AdFunCfg.SetDA_ALCS, _x.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.DrvIn.AdFunCfg.SetSWF, _x.DrvIn.AdFunCfg.ELKOnOff, _x.DrvIn.AdFunCfg.SdowOnOffReq, _x.DrvIn.AdFunCfg.GoNotifierSnvty, _x.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.DrvIn.AdFunCfg.ELKSwtSts, _x.DrvIn.AdFunCfg.DistractionSwtSts, _x.DrvIn.AdFunCfg.SetDA_NOP, _x.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.DrvIn.AdFunCfg.CurveSpeedAssist, _x.DrvIn.AdFunCfg.TowModActv, _x.DrvIn.AdFunCfg.GoNotifierOnOff, _x.DrvIn.AdFunCfg.AESOnOffSts, _x.DrvIn.AdFunCfg.SwtichDA_NOP, _x.DrvIn.AdFunCfg.SetDA_NOPALC, _x.DrvIn.AdFunCfg.ManHornSwtSts, _x.DrvIn.AdFunCfg.TLNotifierOnOff, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.DrvIn.AdFunCfg.CfgTaskSwitch, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.DrvIn.FogLiPushSwtSts, _x.DrvIn.FrntWiprInterSpd, _x.DrvIn.FrntWiprSwtSts, _x.DrvIn.HiBeamSwtSts, _x.DrvIn.TurnIndcrSwtSts, _x.DrvIn.WiprAutoSwtSts, _x.DrvIn.WshrReWiprSwtSts, _x.DrvIn.SCMFailSts, _x.DrvIn.FogLiSCMCmd, _x.DrvIn.HiBeamSCMCmd, _x.DrvIn.ReWiprSCMCmd, _x.DrvIn.SVCAvl, _x.DrvIn.NaviSpdLim, _x.DrvIn.WTIDispSt, _x.DrvIn.NaviSpdUnit, _x.DrvIn.NaviSpdLimSts, _x.DrvIn.NaviCurrentRoadTyp, _x.DrvIn.NavCtryCod, _x.DrvIn.CDCEqpmt.AUDIOsts, _x.DrvIn.CDCEqpmt.HUDsts, _x.DrvIn.CDCEqpmt.ICSsts, _x.DrvIn.CDCEqpmt.ICsts, _x.DrvIn.DA_TauGap_stored, _x.DrvIn.DMSInfo.DMSAlertLvl, _x.DrvIn.DMSInfo.DMSAvlSts, _x.DrvIn.DMSInfo.DMSDrvrAttention, _x.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DrvIn.DMSInfo.DMSFailSafe, _x.DrvIn.DMSInfo.DMSSts, _x.DrvIn.DMSInfo.DMSDrvrFatigue, _x.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.DrvIn.SVCInfo.SVCRiShaFb, _x.DrvIn.SVCInfo.SVCReShaFb, _x.DrvIn.SVCInfo.SVCLeShaFb, _x.DrvIn.SVCInfo.SVCFrntShaFb, _x.DrvIn.SVCInfo.F120ShaFb, _x.DrvIn.SVCInfo.SVCLeShaReq, _x.DrvIn.SVCInfo.SVCFrntShaReq, _x.DrvIn.SVCInfo.SVCReShaReq, _x.DrvIn.SVCInfo.F120ShaReq, _x.DrvIn.SVCInfo.SVCRiShaReq, _x.DrvIn.VehEgyMngtMod, _x.DrvIn.WheelBrkPReLe, _x.DrvIn.WheelBrkPFrntRi, _x.DrvIn.WheelBrkPFrntLe, _x.DrvIn.WheelBrkPReRi, _x.DrvIn.VehAccrModReq, _x.DrvIn.PwrSwapSteerWhlWarn, _x.DrvIn.DriverPSAPRequest, _x.DrvIn.PSAPParkViewStatus, _x.DrvIn.VehPrepReq, _x.DrvIn.StoreDrvrSlotSelnReq, _x.DrvIn.LockConfig, _x.DrvIn.DriverSAPAReq, _x.DrvIn.DriverSAPASlotSelection, _x.UPA.SDWSts, _x.UPA.APASts, _x.UPA.MapObjSts, _x.UPA.UpaSysDi, _x.UPA.UpaSysSts, _x.UPA.UpaSysSrv))
      length = len(self.UPA.USSlot)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.USSlot:
        _x = val1
        buff.write(_get_struct_2I2ifiI10i().pack(_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha))
      length = len(self.UPA.MapObj)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.MapObj:
        _x = val1
        buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
      length = len(self.UPA.ApaSdw)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.ApaSdw:
        length = len(val1.Dst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.Dst.tostring())
      length = len(self.UPA.UsRegnDst)
      buff.write(_struct_I.pack(length))
      for val1 in self.UPA.UsRegnDst:
        _x = val1.SnsrFltSt
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.RegnDst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.RegnDst.tostring())
      _x = self
      buff.write(_get_struct_5iQ().pack(_x.UPA.USSMode, _x.PsapCan.ConnectionSts, _x.PsapCan.StationPlatformSts, _x.PsapCan.VehLongPosInStation, _x.PsapCan.VehLatPosInStation, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Suspension is None:
        self.Suspension = rospy_message_converter.msg.SuspensionInfo()
      if self.VehBody is None:
        self.VehBody = rospy_message_converter.msg.VehBodyInfo()
      if self.DrvIn is None:
        self.DrvIn = rospy_message_converter.msg.DrvInfo()
      if self.UPA is None:
        self.UPA = rospy_message_converter.msg.UPAInfo()
      if self.PsapCan is None:
        self.PsapCan = rospy_message_converter.msg.PsapStationCan()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Suspension.Lvl = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Suspension.LvlAdjm = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.Suspension.LvlAdjm = list(map(bool, self.Suspension.LvlAdjm))
      _x = self
      start = end
      end += 41
      (_x.Suspension.LvlCalCmptl, _x.Suspension.CargoActv, _x.Suspension.CrrntLvl, _x.Suspension.TarLvl, _x.Suspension.ExtraHiPosn, _x.Suspension.ExtraLoPosn, _x.Suspension.EasyEntryEnaSts, _x.Suspension.LvlAdjDrvgMod, _x.Suspension.LvlAdjMod, _x.Suspension.DampgCtrlMod, _x.Suspension.DampgDrvgMod, _x.VehBody.VehStatus.VehState, _x.VehBody.VehStatus.VehStateASIL, _x.VehBody.VehStatus.VehMode,) = _get_struct_2B2i3B7i().unpack(str[start:end])
      self.Suspension.LvlCalCmptl = bool(self.Suspension.LvlCalCmptl)
      self.Suspension.CargoActv = bool(self.Suspension.CargoActv)
      self.Suspension.ExtraHiPosn = bool(self.Suspension.ExtraHiPosn)
      self.Suspension.ExtraLoPosn = bool(self.Suspension.ExtraLoPosn)
      self.Suspension.EasyEntryEnaSts = bool(self.Suspension.EasyEntryEnaSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.Door.DoorAjarSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.VehBody.Door.HoodAjarSts, _x.VehBody.Door.TrAjarSts,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.SeatOccpSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.SeatBltSts = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.FogLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.BeamSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.VehBody.LightSts.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.TurnIndcrLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.MirrLigtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.LgtErrBrkLi = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.VehBody.LightSts.LgtErrBrkLi = list(map(bool, self.VehBody.LightSts.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.LgtErrTurnIndcn = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.VehBody.LightSts.LgtErrTurnIndcn = list(map(bool, self.VehBody.LightSts.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.FogLiFctActvSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 5
      (_x.VehBody.LightSts.LiSnsrData, _x.VehBody.LightSts.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.VehBody.LightSts.LiSnsrFailSts = bool(self.VehBody.LightSts.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.LightSts.DowWarnAmbLeSts = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.VehBody.LightSts.DowWarnAmbLeSts = list(map(bool, self.VehBody.LightSts.DowWarnAmbLeSts))
      _x = self
      start = end
      end += 106
      (_x.VehBody.WipperSts.FrntWiprSts, _x.VehBody.WipperSts.FrntWiperParkSts, _x.VehBody.WipperSts.FrntWipMod, _x.VehBody.WipperSts.FrntWiprReq, _x.VehBody.Time.Yr, _x.VehBody.Time.Mth, _x.VehBody.Time.Day, _x.VehBody.Time.Hr, _x.VehBody.Time.Min, _x.VehBody.Time.Sec, _x.VehBody.CenLockSts, _x.VehBody.TpmsSts, _x.VehBody.DrvState, _x.VehBody.AmbTempValid, _x.VehBody.AmbTemp, _x.VehBody.TrailerModReq, _x.VehBody.SWCAdjModReq, _x.VehBody.NBSDrvrSts, _x.VehBody.PrkgTyp, _x.VehBody.CrashDetd, _x.VehBody.AdsLampReq, _x.VehBody.IntrTemp, _x.VehBody.IntrTempVld, _x.VehBody.MaiLiSet, _x.VehBody.SDWReq, _x.VehBody.UPAReq, _x.VehBody.HornCtrlSts, _x.VehBody.HeadLampsOn, _x.VehBody.CDCCameraReq, _x.VehBody.ECOPlusModSts, _x.VehBody.RpsKeyDist,) = _get_struct_4i6I3iBf4i2Bf4i2BiBi().unpack(str[start:end])
      self.VehBody.AmbTempValid = bool(self.VehBody.AmbTempValid)
      self.VehBody.CrashDetd = bool(self.VehBody.CrashDetd)
      self.VehBody.AdsLampReq = bool(self.VehBody.AdsLampReq)
      self.VehBody.HornCtrlSts = bool(self.VehBody.HornCtrlSts)
      self.VehBody.HeadLampsOn = bool(self.VehBody.HeadLampsOn)
      self.VehBody.ECOPlusModSts = bool(self.VehBody.ECOPlusModSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehBody.MirrorStatus = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.VehBody.RpsMovReq, _x.VehBody.RpsReq,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvIn.StrWhlSwtch.AdUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvIn.StrWhlSwtch.EnUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 391
      (_x.DrvIn.AdFunCfg.AEBOnOffReq, _x.DrvIn.AdFunCfg.DASTactileOnOff, _x.DrvIn.AdFunCfg.DrvAlertSysOnOff, _x.DrvIn.AdFunCfg.FCTAOnOffCmd, _x.DrvIn.AdFunCfg.FCWSetReq, _x.DrvIn.AdFunCfg.LnAssistTctlOnOff, _x.DrvIn.AdFunCfg.LCAOnOff, _x.DrvIn.AdFunCfg.LCATctlWarnOnOff, _x.DrvIn.AdFunCfg.RCTAReq, _x.DrvIn.AdFunCfg.SetHMA, _x.DrvIn.AdFunCfg.SetLnAssiAidTyp, _x.DrvIn.AdFunCfg.SetLaneAssiSnvty, _x.DrvIn.AdFunCfg.RCTABReq, _x.DrvIn.AdFunCfg.SAPAPrkgModReq, _x.DrvIn.AdFunCfg.CDCFailSts, _x.DrvIn.AdFunCfg.Set360AP, _x.DrvIn.AdFunCfg.SetDA_ALCS, _x.DrvIn.AdFunCfg.SetDA_SpeedAssist, _x.DrvIn.AdFunCfg.SetDA_SteerAssist, _x.DrvIn.AdFunCfg.SetSWF, _x.DrvIn.AdFunCfg.ELKOnOff, _x.DrvIn.AdFunCfg.SdowOnOffReq, _x.DrvIn.AdFunCfg.GoNotifierSnvty, _x.DrvIn.AdFunCfg.DrowsinessSwtSts, _x.DrvIn.AdFunCfg.ELKSwtSts, _x.DrvIn.AdFunCfg.DistractionSwtSts, _x.DrvIn.AdFunCfg.SetDA_NOP, _x.DrvIn.AdFunCfg.SetSpeedCtrlSts, _x.DrvIn.AdFunCfg.CurveSpeedAssist, _x.DrvIn.AdFunCfg.TowModActv, _x.DrvIn.AdFunCfg.GoNotifierOnOff, _x.DrvIn.AdFunCfg.AESOnOffSts, _x.DrvIn.AdFunCfg.SwtichDA_NOP, _x.DrvIn.AdFunCfg.SetDA_NOPALC, _x.DrvIn.AdFunCfg.ManHornSwtSts, _x.DrvIn.AdFunCfg.TLNotifierOnOff, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffs, _x.DrvIn.AdFunCfg.CfgTaskSwitch, _x.DrvIn.AdFunCfg.SetDA_SetSpdOffsValue, _x.DrvIn.FogLiPushSwtSts, _x.DrvIn.FrntWiprInterSpd, _x.DrvIn.FrntWiprSwtSts, _x.DrvIn.HiBeamSwtSts, _x.DrvIn.TurnIndcrSwtSts, _x.DrvIn.WiprAutoSwtSts, _x.DrvIn.WshrReWiprSwtSts, _x.DrvIn.SCMFailSts, _x.DrvIn.FogLiSCMCmd, _x.DrvIn.HiBeamSCMCmd, _x.DrvIn.ReWiprSCMCmd, _x.DrvIn.SVCAvl, _x.DrvIn.NaviSpdLim, _x.DrvIn.WTIDispSt, _x.DrvIn.NaviSpdUnit, _x.DrvIn.NaviSpdLimSts, _x.DrvIn.NaviCurrentRoadTyp, _x.DrvIn.NavCtryCod, _x.DrvIn.CDCEqpmt.AUDIOsts, _x.DrvIn.CDCEqpmt.HUDsts, _x.DrvIn.CDCEqpmt.ICSsts, _x.DrvIn.CDCEqpmt.ICsts, _x.DrvIn.DA_TauGap_stored, _x.DrvIn.DMSInfo.DMSAlertLvl, _x.DrvIn.DMSInfo.DMSAvlSts, _x.DrvIn.DMSInfo.DMSDrvrAttention, _x.DrvIn.DMSInfo.DMSDrvrAttentionConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDir, _x.DrvIn.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DrvIn.DMSInfo.DMSDrvrEyeSts, _x.DrvIn.DMSInfo.DMSDrvrEyeStsConfidence, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDir, _x.DrvIn.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DrvIn.DMSInfo.DMSFailSafe, _x.DrvIn.DMSInfo.DMSSts, _x.DrvIn.DMSInfo.DMSDrvrFatigue, _x.DrvIn.DMSInfo.DMSDrvrFatigueConfidence, _x.DrvIn.SVCInfo.SVCRiShaFb, _x.DrvIn.SVCInfo.SVCReShaFb, _x.DrvIn.SVCInfo.SVCLeShaFb, _x.DrvIn.SVCInfo.SVCFrntShaFb, _x.DrvIn.SVCInfo.F120ShaFb, _x.DrvIn.SVCInfo.SVCLeShaReq, _x.DrvIn.SVCInfo.SVCFrntShaReq, _x.DrvIn.SVCInfo.SVCReShaReq, _x.DrvIn.SVCInfo.F120ShaReq, _x.DrvIn.SVCInfo.SVCRiShaReq, _x.DrvIn.VehEgyMngtMod, _x.DrvIn.WheelBrkPReLe, _x.DrvIn.WheelBrkPFrntRi, _x.DrvIn.WheelBrkPFrntLe, _x.DrvIn.WheelBrkPReRi, _x.DrvIn.VehAccrModReq, _x.DrvIn.PwrSwapSteerWhlWarn, _x.DrvIn.DriverPSAPRequest, _x.DrvIn.PSAPParkViewStatus, _x.DrvIn.VehPrepReq, _x.DrvIn.StoreDrvrSlotSelnReq, _x.DrvIn.LockConfig, _x.DrvIn.DriverSAPAReq, _x.DrvIn.DriverSAPASlotSelection, _x.UPA.SDWSts, _x.UPA.APASts, _x.UPA.MapObjSts, _x.UPA.UpaSysDi, _x.UPA.UpaSysSts, _x.UPA.UpaSysSrv,) = _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB().unpack(str[start:end])
      self.DrvIn.AdFunCfg.AESOnOffSts = bool(self.DrvIn.AdFunCfg.AESOnOffSts)
      self.DrvIn.AdFunCfg.SwtichDA_NOP = bool(self.DrvIn.AdFunCfg.SwtichDA_NOP)
      self.DrvIn.AdFunCfg.ManHornSwtSts = bool(self.DrvIn.AdFunCfg.ManHornSwtSts)
      self.DrvIn.AdFunCfg.TLNotifierOnOff = bool(self.DrvIn.AdFunCfg.TLNotifierOnOff)
      self.DrvIn.CDCEqpmt.AUDIOsts = bool(self.DrvIn.CDCEqpmt.AUDIOsts)
      self.DrvIn.CDCEqpmt.HUDsts = bool(self.DrvIn.CDCEqpmt.HUDsts)
      self.DrvIn.CDCEqpmt.ICSsts = bool(self.DrvIn.CDCEqpmt.ICSsts)
      self.DrvIn.CDCEqpmt.ICsts = bool(self.DrvIn.CDCEqpmt.ICsts)
      self.DrvIn.LockConfig = bool(self.DrvIn.LockConfig)
      self.UPA.UpaSysDi = bool(self.UPA.UpaSysDi)
      self.UPA.UpaSysSrv = bool(self.UPA.UpaSysSrv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.USSlot = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.USSlotInfo()
        _x = val1
        start = end
        end += 68
        (_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha,) = _get_struct_2I2ifiI10i().unpack(str[start:end])
        self.UPA.USSlot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.MapObj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MapObjBaseType()
        _x = val1
        start = end
        end += 36
        (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
        self.UPA.MapObj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.ApaSdw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ApaSdwType()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.Dst = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.UPA.ApaSdw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UPA.UsRegnDst = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.UsRegnDstType()
        start = end
        end += 4
        (val1.SnsrFltSt,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.RegnDst = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.UPA.UsRegnDst.append(val1)
      _x = self
      start = end
      end += 28
      (_x.UPA.USSMode, _x.PsapCan.ConnectionSts, _x.PsapCan.StationPlatformSts, _x.PsapCan.VehLongPosInStation, _x.PsapCan.VehLatPosInStation, _x.publish_ptp_ts,) = _get_struct_5iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2i3B7i = None
def _get_struct_2B2i3B7i():
    global _struct_2B2i3B7i
    if _struct_2B2i3B7i is None:
        _struct_2B2i3B7i = struct.Struct("<2B2i3B7i")
    return _struct_2B2i3B7i
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2I2ifiI10i = None
def _get_struct_2I2ifiI10i():
    global _struct_2I2ifiI10i
    if _struct_2I2ifiI10i is None:
        _struct_2I2ifiI10i = struct.Struct("<2I2ifiI10i")
    return _struct_2I2ifiI10i
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB = None
def _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB():
    global _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB
    if _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB is None:
        _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB = struct.Struct("<31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB")
    return _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I3iBiB
_struct_4i6I3iBf4i2Bf4i2BiBi = None
def _get_struct_4i6I3iBf4i2Bf4i2BiBi():
    global _struct_4i6I3iBf4i2Bf4i2BiBi
    if _struct_4i6I3iBf4i2Bf4i2BiBi is None:
        _struct_4i6I3iBf4i2Bf4i2BiBi = struct.Struct("<4i6I3iBf4i2Bf4i2BiBi")
    return _struct_4i6I3iBf4i2Bf4i2BiBi
_struct_5iQ = None
def _get_struct_5iQ():
    global _struct_5iQ
    if _struct_5iQ is None:
        _struct_5iQ = struct.Struct("<5iQ")
    return _struct_5iQ
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i5fifi = None
def _get_struct_i5fifi():
    global _struct_i5fifi
    if _struct_i5fifi is None:
        _struct_i5fifi = struct.Struct("<i5fifi")
    return _struct_i5fifi

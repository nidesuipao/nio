# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarFaultStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RadarFaultStatus(genpy.Message):
  _md5sum = "61337916b76f23e5ddbbab55523e798c"
  _type = "rospy_message_converter/RadarFaultStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RadarDiagnoseCAN rad_fc_fail
RadarDiagnoseCAN rad_fl_fail
RadarDiagnoseCAN rad_fr_fail
RadarDiagnoseCAN rad_rl_fail
RadarDiagnoseCAN rad_rr_fail
RadarActiveFaults rad_fc_act_fault
RadarActiveFaults rad_fl_act_fault
RadarActiveFaults rad_fr_act_fault
RadarActiveFaults rad_rl_act_fault
RadarActiveFaults rad_rr_act_fault
RadarSDKActiveFaults rad_sdk_act_fault
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RadarDiagnoseCAN
bool blok_det
bool volt_low
bool volt_high
bool align_incomp
bool inter_fault
bool align_out_range
bool ivlid_data_adc
bool loss_comm_adc
bool temp_high

================================================================================
MSG: rospy_message_converter/RadarActiveFaults
uint64 act_fault_1
uint64 act_fault_2

================================================================================
MSG: rospy_message_converter/RadarSDKActiveFaults
uint64 sdk_fault_1
uint64 sdk_fault_2
uint64 sdk_fault_3
"""
  __slots__ = ['rad_fc_fail','rad_fl_fail','rad_fr_fail','rad_rl_fail','rad_rr_fail','rad_fc_act_fault','rad_fl_act_fault','rad_fr_act_fault','rad_rl_act_fault','rad_rr_act_fault','rad_sdk_act_fault','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/RadarDiagnoseCAN','rospy_message_converter/RadarDiagnoseCAN','rospy_message_converter/RadarDiagnoseCAN','rospy_message_converter/RadarDiagnoseCAN','rospy_message_converter/RadarDiagnoseCAN','rospy_message_converter/RadarActiveFaults','rospy_message_converter/RadarActiveFaults','rospy_message_converter/RadarActiveFaults','rospy_message_converter/RadarActiveFaults','rospy_message_converter/RadarActiveFaults','rospy_message_converter/RadarSDKActiveFaults','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rad_fc_fail,rad_fl_fail,rad_fr_fail,rad_rl_fail,rad_rr_fail,rad_fc_act_fault,rad_fl_act_fault,rad_fr_act_fault,rad_rl_act_fault,rad_rr_act_fault,rad_sdk_act_fault,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarFaultStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rad_fc_fail is None:
        self.rad_fc_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fl_fail is None:
        self.rad_fl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fr_fail is None:
        self.rad_fr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_rl_fail is None:
        self.rad_rl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_rr_fail is None:
        self.rad_rr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fc_act_fault is None:
        self.rad_fc_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_fl_act_fault is None:
        self.rad_fl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_fr_act_fault is None:
        self.rad_fr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_rl_act_fault is None:
        self.rad_rl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_rr_act_fault is None:
        self.rad_rr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_sdk_act_fault is None:
        self.rad_sdk_act_fault = rospy_message_converter.msg.RadarSDKActiveFaults()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.rad_fc_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      self.rad_fl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      self.rad_fr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      self.rad_rl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      self.rad_rr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      self.rad_fc_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      self.rad_fl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      self.rad_fr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      self.rad_rl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      self.rad_rr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      self.rad_sdk_act_fault = rospy_message_converter.msg.RadarSDKActiveFaults()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_45B14Q().pack(_x.rad_fc_fail.blok_det, _x.rad_fc_fail.volt_low, _x.rad_fc_fail.volt_high, _x.rad_fc_fail.align_incomp, _x.rad_fc_fail.inter_fault, _x.rad_fc_fail.align_out_range, _x.rad_fc_fail.ivlid_data_adc, _x.rad_fc_fail.loss_comm_adc, _x.rad_fc_fail.temp_high, _x.rad_fl_fail.blok_det, _x.rad_fl_fail.volt_low, _x.rad_fl_fail.volt_high, _x.rad_fl_fail.align_incomp, _x.rad_fl_fail.inter_fault, _x.rad_fl_fail.align_out_range, _x.rad_fl_fail.ivlid_data_adc, _x.rad_fl_fail.loss_comm_adc, _x.rad_fl_fail.temp_high, _x.rad_fr_fail.blok_det, _x.rad_fr_fail.volt_low, _x.rad_fr_fail.volt_high, _x.rad_fr_fail.align_incomp, _x.rad_fr_fail.inter_fault, _x.rad_fr_fail.align_out_range, _x.rad_fr_fail.ivlid_data_adc, _x.rad_fr_fail.loss_comm_adc, _x.rad_fr_fail.temp_high, _x.rad_rl_fail.blok_det, _x.rad_rl_fail.volt_low, _x.rad_rl_fail.volt_high, _x.rad_rl_fail.align_incomp, _x.rad_rl_fail.inter_fault, _x.rad_rl_fail.align_out_range, _x.rad_rl_fail.ivlid_data_adc, _x.rad_rl_fail.loss_comm_adc, _x.rad_rl_fail.temp_high, _x.rad_rr_fail.blok_det, _x.rad_rr_fail.volt_low, _x.rad_rr_fail.volt_high, _x.rad_rr_fail.align_incomp, _x.rad_rr_fail.inter_fault, _x.rad_rr_fail.align_out_range, _x.rad_rr_fail.ivlid_data_adc, _x.rad_rr_fail.loss_comm_adc, _x.rad_rr_fail.temp_high, _x.rad_fc_act_fault.act_fault_1, _x.rad_fc_act_fault.act_fault_2, _x.rad_fl_act_fault.act_fault_1, _x.rad_fl_act_fault.act_fault_2, _x.rad_fr_act_fault.act_fault_1, _x.rad_fr_act_fault.act_fault_2, _x.rad_rl_act_fault.act_fault_1, _x.rad_rl_act_fault.act_fault_2, _x.rad_rr_act_fault.act_fault_1, _x.rad_rr_act_fault.act_fault_2, _x.rad_sdk_act_fault.sdk_fault_1, _x.rad_sdk_act_fault.sdk_fault_2, _x.rad_sdk_act_fault.sdk_fault_3, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rad_fc_fail is None:
        self.rad_fc_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fl_fail is None:
        self.rad_fl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fr_fail is None:
        self.rad_fr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_rl_fail is None:
        self.rad_rl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_rr_fail is None:
        self.rad_rr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fc_act_fault is None:
        self.rad_fc_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_fl_act_fault is None:
        self.rad_fl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_fr_act_fault is None:
        self.rad_fr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_rl_act_fault is None:
        self.rad_rl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_rr_act_fault is None:
        self.rad_rr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_sdk_act_fault is None:
        self.rad_sdk_act_fault = rospy_message_converter.msg.RadarSDKActiveFaults()
      end = 0
      _x = self
      start = end
      end += 157
      (_x.rad_fc_fail.blok_det, _x.rad_fc_fail.volt_low, _x.rad_fc_fail.volt_high, _x.rad_fc_fail.align_incomp, _x.rad_fc_fail.inter_fault, _x.rad_fc_fail.align_out_range, _x.rad_fc_fail.ivlid_data_adc, _x.rad_fc_fail.loss_comm_adc, _x.rad_fc_fail.temp_high, _x.rad_fl_fail.blok_det, _x.rad_fl_fail.volt_low, _x.rad_fl_fail.volt_high, _x.rad_fl_fail.align_incomp, _x.rad_fl_fail.inter_fault, _x.rad_fl_fail.align_out_range, _x.rad_fl_fail.ivlid_data_adc, _x.rad_fl_fail.loss_comm_adc, _x.rad_fl_fail.temp_high, _x.rad_fr_fail.blok_det, _x.rad_fr_fail.volt_low, _x.rad_fr_fail.volt_high, _x.rad_fr_fail.align_incomp, _x.rad_fr_fail.inter_fault, _x.rad_fr_fail.align_out_range, _x.rad_fr_fail.ivlid_data_adc, _x.rad_fr_fail.loss_comm_adc, _x.rad_fr_fail.temp_high, _x.rad_rl_fail.blok_det, _x.rad_rl_fail.volt_low, _x.rad_rl_fail.volt_high, _x.rad_rl_fail.align_incomp, _x.rad_rl_fail.inter_fault, _x.rad_rl_fail.align_out_range, _x.rad_rl_fail.ivlid_data_adc, _x.rad_rl_fail.loss_comm_adc, _x.rad_rl_fail.temp_high, _x.rad_rr_fail.blok_det, _x.rad_rr_fail.volt_low, _x.rad_rr_fail.volt_high, _x.rad_rr_fail.align_incomp, _x.rad_rr_fail.inter_fault, _x.rad_rr_fail.align_out_range, _x.rad_rr_fail.ivlid_data_adc, _x.rad_rr_fail.loss_comm_adc, _x.rad_rr_fail.temp_high, _x.rad_fc_act_fault.act_fault_1, _x.rad_fc_act_fault.act_fault_2, _x.rad_fl_act_fault.act_fault_1, _x.rad_fl_act_fault.act_fault_2, _x.rad_fr_act_fault.act_fault_1, _x.rad_fr_act_fault.act_fault_2, _x.rad_rl_act_fault.act_fault_1, _x.rad_rl_act_fault.act_fault_2, _x.rad_rr_act_fault.act_fault_1, _x.rad_rr_act_fault.act_fault_2, _x.rad_sdk_act_fault.sdk_fault_1, _x.rad_sdk_act_fault.sdk_fault_2, _x.rad_sdk_act_fault.sdk_fault_3, _x.publish_ptp_ts,) = _get_struct_45B14Q().unpack(str[start:end])
      self.rad_fc_fail.blok_det = bool(self.rad_fc_fail.blok_det)
      self.rad_fc_fail.volt_low = bool(self.rad_fc_fail.volt_low)
      self.rad_fc_fail.volt_high = bool(self.rad_fc_fail.volt_high)
      self.rad_fc_fail.align_incomp = bool(self.rad_fc_fail.align_incomp)
      self.rad_fc_fail.inter_fault = bool(self.rad_fc_fail.inter_fault)
      self.rad_fc_fail.align_out_range = bool(self.rad_fc_fail.align_out_range)
      self.rad_fc_fail.ivlid_data_adc = bool(self.rad_fc_fail.ivlid_data_adc)
      self.rad_fc_fail.loss_comm_adc = bool(self.rad_fc_fail.loss_comm_adc)
      self.rad_fc_fail.temp_high = bool(self.rad_fc_fail.temp_high)
      self.rad_fl_fail.blok_det = bool(self.rad_fl_fail.blok_det)
      self.rad_fl_fail.volt_low = bool(self.rad_fl_fail.volt_low)
      self.rad_fl_fail.volt_high = bool(self.rad_fl_fail.volt_high)
      self.rad_fl_fail.align_incomp = bool(self.rad_fl_fail.align_incomp)
      self.rad_fl_fail.inter_fault = bool(self.rad_fl_fail.inter_fault)
      self.rad_fl_fail.align_out_range = bool(self.rad_fl_fail.align_out_range)
      self.rad_fl_fail.ivlid_data_adc = bool(self.rad_fl_fail.ivlid_data_adc)
      self.rad_fl_fail.loss_comm_adc = bool(self.rad_fl_fail.loss_comm_adc)
      self.rad_fl_fail.temp_high = bool(self.rad_fl_fail.temp_high)
      self.rad_fr_fail.blok_det = bool(self.rad_fr_fail.blok_det)
      self.rad_fr_fail.volt_low = bool(self.rad_fr_fail.volt_low)
      self.rad_fr_fail.volt_high = bool(self.rad_fr_fail.volt_high)
      self.rad_fr_fail.align_incomp = bool(self.rad_fr_fail.align_incomp)
      self.rad_fr_fail.inter_fault = bool(self.rad_fr_fail.inter_fault)
      self.rad_fr_fail.align_out_range = bool(self.rad_fr_fail.align_out_range)
      self.rad_fr_fail.ivlid_data_adc = bool(self.rad_fr_fail.ivlid_data_adc)
      self.rad_fr_fail.loss_comm_adc = bool(self.rad_fr_fail.loss_comm_adc)
      self.rad_fr_fail.temp_high = bool(self.rad_fr_fail.temp_high)
      self.rad_rl_fail.blok_det = bool(self.rad_rl_fail.blok_det)
      self.rad_rl_fail.volt_low = bool(self.rad_rl_fail.volt_low)
      self.rad_rl_fail.volt_high = bool(self.rad_rl_fail.volt_high)
      self.rad_rl_fail.align_incomp = bool(self.rad_rl_fail.align_incomp)
      self.rad_rl_fail.inter_fault = bool(self.rad_rl_fail.inter_fault)
      self.rad_rl_fail.align_out_range = bool(self.rad_rl_fail.align_out_range)
      self.rad_rl_fail.ivlid_data_adc = bool(self.rad_rl_fail.ivlid_data_adc)
      self.rad_rl_fail.loss_comm_adc = bool(self.rad_rl_fail.loss_comm_adc)
      self.rad_rl_fail.temp_high = bool(self.rad_rl_fail.temp_high)
      self.rad_rr_fail.blok_det = bool(self.rad_rr_fail.blok_det)
      self.rad_rr_fail.volt_low = bool(self.rad_rr_fail.volt_low)
      self.rad_rr_fail.volt_high = bool(self.rad_rr_fail.volt_high)
      self.rad_rr_fail.align_incomp = bool(self.rad_rr_fail.align_incomp)
      self.rad_rr_fail.inter_fault = bool(self.rad_rr_fail.inter_fault)
      self.rad_rr_fail.align_out_range = bool(self.rad_rr_fail.align_out_range)
      self.rad_rr_fail.ivlid_data_adc = bool(self.rad_rr_fail.ivlid_data_adc)
      self.rad_rr_fail.loss_comm_adc = bool(self.rad_rr_fail.loss_comm_adc)
      self.rad_rr_fail.temp_high = bool(self.rad_rr_fail.temp_high)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_45B14Q().pack(_x.rad_fc_fail.blok_det, _x.rad_fc_fail.volt_low, _x.rad_fc_fail.volt_high, _x.rad_fc_fail.align_incomp, _x.rad_fc_fail.inter_fault, _x.rad_fc_fail.align_out_range, _x.rad_fc_fail.ivlid_data_adc, _x.rad_fc_fail.loss_comm_adc, _x.rad_fc_fail.temp_high, _x.rad_fl_fail.blok_det, _x.rad_fl_fail.volt_low, _x.rad_fl_fail.volt_high, _x.rad_fl_fail.align_incomp, _x.rad_fl_fail.inter_fault, _x.rad_fl_fail.align_out_range, _x.rad_fl_fail.ivlid_data_adc, _x.rad_fl_fail.loss_comm_adc, _x.rad_fl_fail.temp_high, _x.rad_fr_fail.blok_det, _x.rad_fr_fail.volt_low, _x.rad_fr_fail.volt_high, _x.rad_fr_fail.align_incomp, _x.rad_fr_fail.inter_fault, _x.rad_fr_fail.align_out_range, _x.rad_fr_fail.ivlid_data_adc, _x.rad_fr_fail.loss_comm_adc, _x.rad_fr_fail.temp_high, _x.rad_rl_fail.blok_det, _x.rad_rl_fail.volt_low, _x.rad_rl_fail.volt_high, _x.rad_rl_fail.align_incomp, _x.rad_rl_fail.inter_fault, _x.rad_rl_fail.align_out_range, _x.rad_rl_fail.ivlid_data_adc, _x.rad_rl_fail.loss_comm_adc, _x.rad_rl_fail.temp_high, _x.rad_rr_fail.blok_det, _x.rad_rr_fail.volt_low, _x.rad_rr_fail.volt_high, _x.rad_rr_fail.align_incomp, _x.rad_rr_fail.inter_fault, _x.rad_rr_fail.align_out_range, _x.rad_rr_fail.ivlid_data_adc, _x.rad_rr_fail.loss_comm_adc, _x.rad_rr_fail.temp_high, _x.rad_fc_act_fault.act_fault_1, _x.rad_fc_act_fault.act_fault_2, _x.rad_fl_act_fault.act_fault_1, _x.rad_fl_act_fault.act_fault_2, _x.rad_fr_act_fault.act_fault_1, _x.rad_fr_act_fault.act_fault_2, _x.rad_rl_act_fault.act_fault_1, _x.rad_rl_act_fault.act_fault_2, _x.rad_rr_act_fault.act_fault_1, _x.rad_rr_act_fault.act_fault_2, _x.rad_sdk_act_fault.sdk_fault_1, _x.rad_sdk_act_fault.sdk_fault_2, _x.rad_sdk_act_fault.sdk_fault_3, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rad_fc_fail is None:
        self.rad_fc_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fl_fail is None:
        self.rad_fl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fr_fail is None:
        self.rad_fr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_rl_fail is None:
        self.rad_rl_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_rr_fail is None:
        self.rad_rr_fail = rospy_message_converter.msg.RadarDiagnoseCAN()
      if self.rad_fc_act_fault is None:
        self.rad_fc_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_fl_act_fault is None:
        self.rad_fl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_fr_act_fault is None:
        self.rad_fr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_rl_act_fault is None:
        self.rad_rl_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_rr_act_fault is None:
        self.rad_rr_act_fault = rospy_message_converter.msg.RadarActiveFaults()
      if self.rad_sdk_act_fault is None:
        self.rad_sdk_act_fault = rospy_message_converter.msg.RadarSDKActiveFaults()
      end = 0
      _x = self
      start = end
      end += 157
      (_x.rad_fc_fail.blok_det, _x.rad_fc_fail.volt_low, _x.rad_fc_fail.volt_high, _x.rad_fc_fail.align_incomp, _x.rad_fc_fail.inter_fault, _x.rad_fc_fail.align_out_range, _x.rad_fc_fail.ivlid_data_adc, _x.rad_fc_fail.loss_comm_adc, _x.rad_fc_fail.temp_high, _x.rad_fl_fail.blok_det, _x.rad_fl_fail.volt_low, _x.rad_fl_fail.volt_high, _x.rad_fl_fail.align_incomp, _x.rad_fl_fail.inter_fault, _x.rad_fl_fail.align_out_range, _x.rad_fl_fail.ivlid_data_adc, _x.rad_fl_fail.loss_comm_adc, _x.rad_fl_fail.temp_high, _x.rad_fr_fail.blok_det, _x.rad_fr_fail.volt_low, _x.rad_fr_fail.volt_high, _x.rad_fr_fail.align_incomp, _x.rad_fr_fail.inter_fault, _x.rad_fr_fail.align_out_range, _x.rad_fr_fail.ivlid_data_adc, _x.rad_fr_fail.loss_comm_adc, _x.rad_fr_fail.temp_high, _x.rad_rl_fail.blok_det, _x.rad_rl_fail.volt_low, _x.rad_rl_fail.volt_high, _x.rad_rl_fail.align_incomp, _x.rad_rl_fail.inter_fault, _x.rad_rl_fail.align_out_range, _x.rad_rl_fail.ivlid_data_adc, _x.rad_rl_fail.loss_comm_adc, _x.rad_rl_fail.temp_high, _x.rad_rr_fail.blok_det, _x.rad_rr_fail.volt_low, _x.rad_rr_fail.volt_high, _x.rad_rr_fail.align_incomp, _x.rad_rr_fail.inter_fault, _x.rad_rr_fail.align_out_range, _x.rad_rr_fail.ivlid_data_adc, _x.rad_rr_fail.loss_comm_adc, _x.rad_rr_fail.temp_high, _x.rad_fc_act_fault.act_fault_1, _x.rad_fc_act_fault.act_fault_2, _x.rad_fl_act_fault.act_fault_1, _x.rad_fl_act_fault.act_fault_2, _x.rad_fr_act_fault.act_fault_1, _x.rad_fr_act_fault.act_fault_2, _x.rad_rl_act_fault.act_fault_1, _x.rad_rl_act_fault.act_fault_2, _x.rad_rr_act_fault.act_fault_1, _x.rad_rr_act_fault.act_fault_2, _x.rad_sdk_act_fault.sdk_fault_1, _x.rad_sdk_act_fault.sdk_fault_2, _x.rad_sdk_act_fault.sdk_fault_3, _x.publish_ptp_ts,) = _get_struct_45B14Q().unpack(str[start:end])
      self.rad_fc_fail.blok_det = bool(self.rad_fc_fail.blok_det)
      self.rad_fc_fail.volt_low = bool(self.rad_fc_fail.volt_low)
      self.rad_fc_fail.volt_high = bool(self.rad_fc_fail.volt_high)
      self.rad_fc_fail.align_incomp = bool(self.rad_fc_fail.align_incomp)
      self.rad_fc_fail.inter_fault = bool(self.rad_fc_fail.inter_fault)
      self.rad_fc_fail.align_out_range = bool(self.rad_fc_fail.align_out_range)
      self.rad_fc_fail.ivlid_data_adc = bool(self.rad_fc_fail.ivlid_data_adc)
      self.rad_fc_fail.loss_comm_adc = bool(self.rad_fc_fail.loss_comm_adc)
      self.rad_fc_fail.temp_high = bool(self.rad_fc_fail.temp_high)
      self.rad_fl_fail.blok_det = bool(self.rad_fl_fail.blok_det)
      self.rad_fl_fail.volt_low = bool(self.rad_fl_fail.volt_low)
      self.rad_fl_fail.volt_high = bool(self.rad_fl_fail.volt_high)
      self.rad_fl_fail.align_incomp = bool(self.rad_fl_fail.align_incomp)
      self.rad_fl_fail.inter_fault = bool(self.rad_fl_fail.inter_fault)
      self.rad_fl_fail.align_out_range = bool(self.rad_fl_fail.align_out_range)
      self.rad_fl_fail.ivlid_data_adc = bool(self.rad_fl_fail.ivlid_data_adc)
      self.rad_fl_fail.loss_comm_adc = bool(self.rad_fl_fail.loss_comm_adc)
      self.rad_fl_fail.temp_high = bool(self.rad_fl_fail.temp_high)
      self.rad_fr_fail.blok_det = bool(self.rad_fr_fail.blok_det)
      self.rad_fr_fail.volt_low = bool(self.rad_fr_fail.volt_low)
      self.rad_fr_fail.volt_high = bool(self.rad_fr_fail.volt_high)
      self.rad_fr_fail.align_incomp = bool(self.rad_fr_fail.align_incomp)
      self.rad_fr_fail.inter_fault = bool(self.rad_fr_fail.inter_fault)
      self.rad_fr_fail.align_out_range = bool(self.rad_fr_fail.align_out_range)
      self.rad_fr_fail.ivlid_data_adc = bool(self.rad_fr_fail.ivlid_data_adc)
      self.rad_fr_fail.loss_comm_adc = bool(self.rad_fr_fail.loss_comm_adc)
      self.rad_fr_fail.temp_high = bool(self.rad_fr_fail.temp_high)
      self.rad_rl_fail.blok_det = bool(self.rad_rl_fail.blok_det)
      self.rad_rl_fail.volt_low = bool(self.rad_rl_fail.volt_low)
      self.rad_rl_fail.volt_high = bool(self.rad_rl_fail.volt_high)
      self.rad_rl_fail.align_incomp = bool(self.rad_rl_fail.align_incomp)
      self.rad_rl_fail.inter_fault = bool(self.rad_rl_fail.inter_fault)
      self.rad_rl_fail.align_out_range = bool(self.rad_rl_fail.align_out_range)
      self.rad_rl_fail.ivlid_data_adc = bool(self.rad_rl_fail.ivlid_data_adc)
      self.rad_rl_fail.loss_comm_adc = bool(self.rad_rl_fail.loss_comm_adc)
      self.rad_rl_fail.temp_high = bool(self.rad_rl_fail.temp_high)
      self.rad_rr_fail.blok_det = bool(self.rad_rr_fail.blok_det)
      self.rad_rr_fail.volt_low = bool(self.rad_rr_fail.volt_low)
      self.rad_rr_fail.volt_high = bool(self.rad_rr_fail.volt_high)
      self.rad_rr_fail.align_incomp = bool(self.rad_rr_fail.align_incomp)
      self.rad_rr_fail.inter_fault = bool(self.rad_rr_fail.inter_fault)
      self.rad_rr_fail.align_out_range = bool(self.rad_rr_fail.align_out_range)
      self.rad_rr_fail.ivlid_data_adc = bool(self.rad_rr_fail.ivlid_data_adc)
      self.rad_rr_fail.loss_comm_adc = bool(self.rad_rr_fail.loss_comm_adc)
      self.rad_rr_fail.temp_high = bool(self.rad_rr_fail.temp_high)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_45B14Q = None
def _get_struct_45B14Q():
    global _struct_45B14Q
    if _struct_45B14Q is None:
        _struct_45B14Q = struct.Struct("<45B14Q")
    return _struct_45B14Q

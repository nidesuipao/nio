# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/InputSignalDbgOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InputSignalDbgOut(genpy.Message):
  _md5sum = "5b15626f020dfa39162e863f6d11e9db"
  _type = "rospy_message_converter/InputSignalDbgOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool has_state_machine
bool has_veh10ms
bool has_veh50ms
bool has_location
bool has_collision_dst
bool has_obj_map
bool has_ads
"""
  __slots__ = ['has_state_machine','has_veh10ms','has_veh50ms','has_location','has_collision_dst','has_obj_map','has_ads']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       has_state_machine,has_veh10ms,has_veh50ms,has_location,has_collision_dst,has_obj_map,has_ads

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InputSignalDbgOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.has_state_machine is None:
        self.has_state_machine = False
      if self.has_veh10ms is None:
        self.has_veh10ms = False
      if self.has_veh50ms is None:
        self.has_veh50ms = False
      if self.has_location is None:
        self.has_location = False
      if self.has_collision_dst is None:
        self.has_collision_dst = False
      if self.has_obj_map is None:
        self.has_obj_map = False
      if self.has_ads is None:
        self.has_ads = False
    else:
      self.has_state_machine = False
      self.has_veh10ms = False
      self.has_veh50ms = False
      self.has_location = False
      self.has_collision_dst = False
      self.has_obj_map = False
      self.has_ads = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.has_state_machine, _x.has_veh10ms, _x.has_veh50ms, _x.has_location, _x.has_collision_dst, _x.has_obj_map, _x.has_ads))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.has_state_machine, _x.has_veh10ms, _x.has_veh50ms, _x.has_location, _x.has_collision_dst, _x.has_obj_map, _x.has_ads,) = _get_struct_7B().unpack(str[start:end])
      self.has_state_machine = bool(self.has_state_machine)
      self.has_veh10ms = bool(self.has_veh10ms)
      self.has_veh50ms = bool(self.has_veh50ms)
      self.has_location = bool(self.has_location)
      self.has_collision_dst = bool(self.has_collision_dst)
      self.has_obj_map = bool(self.has_obj_map)
      self.has_ads = bool(self.has_ads)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.has_state_machine, _x.has_veh10ms, _x.has_veh50ms, _x.has_location, _x.has_collision_dst, _x.has_obj_map, _x.has_ads))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.has_state_machine, _x.has_veh10ms, _x.has_veh50ms, _x.has_location, _x.has_collision_dst, _x.has_obj_map, _x.has_ads,) = _get_struct_7B().unpack(str[start:end])
      self.has_state_machine = bool(self.has_state_machine)
      self.has_veh10ms = bool(self.has_veh10ms)
      self.has_veh50ms = bool(self.has_veh50ms)
      self.has_location = bool(self.has_location)
      self.has_collision_dst = bool(self.has_collision_dst)
      self.has_obj_map = bool(self.has_obj_map)
      self.has_ads = bool(self.has_ads)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B

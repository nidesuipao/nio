# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FusionTrack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FusionTrack(genpy.Message):
  _md5sum = "3ff7537357d71705ce4943956896f24b"
  _type = "rospy_message_converter/FusionTrack"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FusionTracks[] fusion_tracks

================================================================================
MSG: rospy_message_converter/FusionTracks
uint32 id
uint32 age
VcsPos pos
float32 heading
VcsSpeed speed
VcsAccel accel
Dimensions dimension
uint32 meas_status
uint32 class
float32 class_prob
uint32 fus_source
uint32 rad_fusSrc
uint32 conf
MotionStatus mot_status
FusionVariance var
FusionDetectionInfo det_height

================================================================================
MSG: rospy_message_converter/VcsPos
float64 long_pos
float64 lat_pos

================================================================================
MSG: rospy_message_converter/VcsSpeed
float64 long_vel
float64 lat_vel
float64 abs_vel

================================================================================
MSG: rospy_message_converter/VcsAccel
float64 long_accel
float64 lat_accel

================================================================================
MSG: rospy_message_converter/Dimensions
float32 length
float32 width

================================================================================
MSG: rospy_message_converter/MotionStatus
bool f_stationary
bool f_moving
bool f_moveable
bool f_oncoming
bool f_receding
bool f_crossing

================================================================================
MSG: rospy_message_converter/FusionVariance
float32 var_longPos
float32 var_latPos
float32 var_longVel
float32 var_latVel
float32 var_longAcc
float32 var_latAcc

================================================================================
MSG: rospy_message_converter/FusionDetectionInfo
float32 det_max_height
float32 det_min_height
float32 det_avg_height
float32 det_height_std
uint32 num_det
"""
  __slots__ = ['fusion_tracks']
  _slot_types = ['rospy_message_converter/FusionTracks[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fusion_tracks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionTrack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fusion_tracks is None:
        self.fusion_tracks = []
    else:
      self.fusion_tracks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.fusion_tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.fusion_tracks:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.age))
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.long_pos, _x.lat_pos))
        _x = val1.heading
        buff.write(_get_struct_f().pack(_x))
        _v2 = val1.speed
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.long_vel, _x.lat_vel, _x.abs_vel))
        _v3 = val1.accel
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.long_accel, _x.lat_accel))
        _v4 = val1.dimension
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.length, _x.width))
        _x = val1
        buff.write(_get_struct_2If3I().pack(_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf))
        _v5 = val1.mot_status
        _x = _v5
        buff.write(_get_struct_6B().pack(_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing))
        _v6 = val1.var
        _x = _v6
        buff.write(_get_struct_6f().pack(_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc))
        _v7 = val1.det_height
        _x = _v7
        buff.write(_get_struct_4fI().pack(_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fusion_tracks is None:
        self.fusion_tracks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fusion_tracks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FusionTracks()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.age,) = _get_struct_2I().unpack(str[start:end])
        _v8 = val1.pos
        _x = _v8
        start = end
        end += 16
        (_x.long_pos, _x.lat_pos,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (val1.heading,) = _get_struct_f().unpack(str[start:end])
        _v9 = val1.speed
        _x = _v9
        start = end
        end += 24
        (_x.long_vel, _x.lat_vel, _x.abs_vel,) = _get_struct_3d().unpack(str[start:end])
        _v10 = val1.accel
        _x = _v10
        start = end
        end += 16
        (_x.long_accel, _x.lat_accel,) = _get_struct_2d().unpack(str[start:end])
        _v11 = val1.dimension
        _x = _v11
        start = end
        end += 8
        (_x.length, _x.width,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf,) = _get_struct_2If3I().unpack(str[start:end])
        _v12 = val1.mot_status
        _x = _v12
        start = end
        end += 6
        (_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing,) = _get_struct_6B().unpack(str[start:end])
        _v12.f_stationary = bool(_v12.f_stationary)
        _v12.f_moving = bool(_v12.f_moving)
        _v12.f_moveable = bool(_v12.f_moveable)
        _v12.f_oncoming = bool(_v12.f_oncoming)
        _v12.f_receding = bool(_v12.f_receding)
        _v12.f_crossing = bool(_v12.f_crossing)
        _v13 = val1.var
        _x = _v13
        start = end
        end += 24
        (_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc,) = _get_struct_6f().unpack(str[start:end])
        _v14 = val1.det_height
        _x = _v14
        start = end
        end += 20
        (_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det,) = _get_struct_4fI().unpack(str[start:end])
        self.fusion_tracks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.fusion_tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.fusion_tracks:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.age))
        _v15 = val1.pos
        _x = _v15
        buff.write(_get_struct_2d().pack(_x.long_pos, _x.lat_pos))
        _x = val1.heading
        buff.write(_get_struct_f().pack(_x))
        _v16 = val1.speed
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.long_vel, _x.lat_vel, _x.abs_vel))
        _v17 = val1.accel
        _x = _v17
        buff.write(_get_struct_2d().pack(_x.long_accel, _x.lat_accel))
        _v18 = val1.dimension
        _x = _v18
        buff.write(_get_struct_2f().pack(_x.length, _x.width))
        _x = val1
        buff.write(_get_struct_2If3I().pack(_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf))
        _v19 = val1.mot_status
        _x = _v19
        buff.write(_get_struct_6B().pack(_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing))
        _v20 = val1.var
        _x = _v20
        buff.write(_get_struct_6f().pack(_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc))
        _v21 = val1.det_height
        _x = _v21
        buff.write(_get_struct_4fI().pack(_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fusion_tracks is None:
        self.fusion_tracks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fusion_tracks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FusionTracks()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.age,) = _get_struct_2I().unpack(str[start:end])
        _v22 = val1.pos
        _x = _v22
        start = end
        end += 16
        (_x.long_pos, _x.lat_pos,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (val1.heading,) = _get_struct_f().unpack(str[start:end])
        _v23 = val1.speed
        _x = _v23
        start = end
        end += 24
        (_x.long_vel, _x.lat_vel, _x.abs_vel,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.accel
        _x = _v24
        start = end
        end += 16
        (_x.long_accel, _x.lat_accel,) = _get_struct_2d().unpack(str[start:end])
        _v25 = val1.dimension
        _x = _v25
        start = end
        end += 8
        (_x.length, _x.width,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf,) = _get_struct_2If3I().unpack(str[start:end])
        _v26 = val1.mot_status
        _x = _v26
        start = end
        end += 6
        (_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing,) = _get_struct_6B().unpack(str[start:end])
        _v26.f_stationary = bool(_v26.f_stationary)
        _v26.f_moving = bool(_v26.f_moving)
        _v26.f_moveable = bool(_v26.f_moveable)
        _v26.f_oncoming = bool(_v26.f_oncoming)
        _v26.f_receding = bool(_v26.f_receding)
        _v26.f_crossing = bool(_v26.f_crossing)
        _v27 = val1.var
        _x = _v27
        start = end
        end += 24
        (_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc,) = _get_struct_6f().unpack(str[start:end])
        _v28 = val1.det_height
        _x = _v28
        start = end
        end += 20
        (_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det,) = _get_struct_4fI().unpack(str[start:end])
        self.fusion_tracks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2If3I = None
def _get_struct_2If3I():
    global _struct_2If3I
    if _struct_2If3I is None:
        _struct_2If3I = struct.Struct("<2If3I")
    return _struct_2If3I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4fI = None
def _get_struct_4fI():
    global _struct_4fI
    if _struct_4fI is None:
        _struct_4fI = struct.Struct("<4fI")
    return _struct_4fI
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

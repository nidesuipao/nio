# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TemperatureFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TemperatureFaultInfo(genpy.Message):
  _md5sum = "5c3e13e1f3c63181979dc7711a9c056e"
  _type = "rospy_message_converter/TemperatureFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool mcu1_therm1_hightemprature
bool mcu1_therm1_lowtemprature
bool mcu1_therm2_hightemprature
bool mcu1_therm2_lowtemprature
bool mcu1_therm3_hightemprature
bool mcu1_therm3_lowtemprature
bool mcu1_therm4_hightemprature
bool mcu1_therm4_lowtemprature
bool mcu1_therm5_hightemprature
bool mcu1_therm5_lowtemprature
bool mcu2_therm1_hightemprature
bool mcu2_therm1_lowtemprature
bool mcu2_therm2_hightemprature
bool mcu2_therm2_lowtemprature
bool mcu2_therm3_hightemprature
bool mcu2_therm3_lowtemprature
bool mcu2_therm4_hightemprature
bool mcu2_therm4_lowtemprature
bool s1_therm_hightemprature
bool s2_therm_hightemprature
bool s3_therm_hightemprature
bool s4_therm_hightemprature
"""
  __slots__ = ['mcu1_therm1_hightemprature','mcu1_therm1_lowtemprature','mcu1_therm2_hightemprature','mcu1_therm2_lowtemprature','mcu1_therm3_hightemprature','mcu1_therm3_lowtemprature','mcu1_therm4_hightemprature','mcu1_therm4_lowtemprature','mcu1_therm5_hightemprature','mcu1_therm5_lowtemprature','mcu2_therm1_hightemprature','mcu2_therm1_lowtemprature','mcu2_therm2_hightemprature','mcu2_therm2_lowtemprature','mcu2_therm3_hightemprature','mcu2_therm3_lowtemprature','mcu2_therm4_hightemprature','mcu2_therm4_lowtemprature','s1_therm_hightemprature','s2_therm_hightemprature','s3_therm_hightemprature','s4_therm_hightemprature']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mcu1_therm1_hightemprature,mcu1_therm1_lowtemprature,mcu1_therm2_hightemprature,mcu1_therm2_lowtemprature,mcu1_therm3_hightemprature,mcu1_therm3_lowtemprature,mcu1_therm4_hightemprature,mcu1_therm4_lowtemprature,mcu1_therm5_hightemprature,mcu1_therm5_lowtemprature,mcu2_therm1_hightemprature,mcu2_therm1_lowtemprature,mcu2_therm2_hightemprature,mcu2_therm2_lowtemprature,mcu2_therm3_hightemprature,mcu2_therm3_lowtemprature,mcu2_therm4_hightemprature,mcu2_therm4_lowtemprature,s1_therm_hightemprature,s2_therm_hightemprature,s3_therm_hightemprature,s4_therm_hightemprature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TemperatureFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mcu1_therm1_hightemprature is None:
        self.mcu1_therm1_hightemprature = False
      if self.mcu1_therm1_lowtemprature is None:
        self.mcu1_therm1_lowtemprature = False
      if self.mcu1_therm2_hightemprature is None:
        self.mcu1_therm2_hightemprature = False
      if self.mcu1_therm2_lowtemprature is None:
        self.mcu1_therm2_lowtemprature = False
      if self.mcu1_therm3_hightemprature is None:
        self.mcu1_therm3_hightemprature = False
      if self.mcu1_therm3_lowtemprature is None:
        self.mcu1_therm3_lowtemprature = False
      if self.mcu1_therm4_hightemprature is None:
        self.mcu1_therm4_hightemprature = False
      if self.mcu1_therm4_lowtemprature is None:
        self.mcu1_therm4_lowtemprature = False
      if self.mcu1_therm5_hightemprature is None:
        self.mcu1_therm5_hightemprature = False
      if self.mcu1_therm5_lowtemprature is None:
        self.mcu1_therm5_lowtemprature = False
      if self.mcu2_therm1_hightemprature is None:
        self.mcu2_therm1_hightemprature = False
      if self.mcu2_therm1_lowtemprature is None:
        self.mcu2_therm1_lowtemprature = False
      if self.mcu2_therm2_hightemprature is None:
        self.mcu2_therm2_hightemprature = False
      if self.mcu2_therm2_lowtemprature is None:
        self.mcu2_therm2_lowtemprature = False
      if self.mcu2_therm3_hightemprature is None:
        self.mcu2_therm3_hightemprature = False
      if self.mcu2_therm3_lowtemprature is None:
        self.mcu2_therm3_lowtemprature = False
      if self.mcu2_therm4_hightemprature is None:
        self.mcu2_therm4_hightemprature = False
      if self.mcu2_therm4_lowtemprature is None:
        self.mcu2_therm4_lowtemprature = False
      if self.s1_therm_hightemprature is None:
        self.s1_therm_hightemprature = False
      if self.s2_therm_hightemprature is None:
        self.s2_therm_hightemprature = False
      if self.s3_therm_hightemprature is None:
        self.s3_therm_hightemprature = False
      if self.s4_therm_hightemprature is None:
        self.s4_therm_hightemprature = False
    else:
      self.mcu1_therm1_hightemprature = False
      self.mcu1_therm1_lowtemprature = False
      self.mcu1_therm2_hightemprature = False
      self.mcu1_therm2_lowtemprature = False
      self.mcu1_therm3_hightemprature = False
      self.mcu1_therm3_lowtemprature = False
      self.mcu1_therm4_hightemprature = False
      self.mcu1_therm4_lowtemprature = False
      self.mcu1_therm5_hightemprature = False
      self.mcu1_therm5_lowtemprature = False
      self.mcu2_therm1_hightemprature = False
      self.mcu2_therm1_lowtemprature = False
      self.mcu2_therm2_hightemprature = False
      self.mcu2_therm2_lowtemprature = False
      self.mcu2_therm3_hightemprature = False
      self.mcu2_therm3_lowtemprature = False
      self.mcu2_therm4_hightemprature = False
      self.mcu2_therm4_lowtemprature = False
      self.s1_therm_hightemprature = False
      self.s2_therm_hightemprature = False
      self.s3_therm_hightemprature = False
      self.s4_therm_hightemprature = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_22B().pack(_x.mcu1_therm1_hightemprature, _x.mcu1_therm1_lowtemprature, _x.mcu1_therm2_hightemprature, _x.mcu1_therm2_lowtemprature, _x.mcu1_therm3_hightemprature, _x.mcu1_therm3_lowtemprature, _x.mcu1_therm4_hightemprature, _x.mcu1_therm4_lowtemprature, _x.mcu1_therm5_hightemprature, _x.mcu1_therm5_lowtemprature, _x.mcu2_therm1_hightemprature, _x.mcu2_therm1_lowtemprature, _x.mcu2_therm2_hightemprature, _x.mcu2_therm2_lowtemprature, _x.mcu2_therm3_hightemprature, _x.mcu2_therm3_lowtemprature, _x.mcu2_therm4_hightemprature, _x.mcu2_therm4_lowtemprature, _x.s1_therm_hightemprature, _x.s2_therm_hightemprature, _x.s3_therm_hightemprature, _x.s4_therm_hightemprature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.mcu1_therm1_hightemprature, _x.mcu1_therm1_lowtemprature, _x.mcu1_therm2_hightemprature, _x.mcu1_therm2_lowtemprature, _x.mcu1_therm3_hightemprature, _x.mcu1_therm3_lowtemprature, _x.mcu1_therm4_hightemprature, _x.mcu1_therm4_lowtemprature, _x.mcu1_therm5_hightemprature, _x.mcu1_therm5_lowtemprature, _x.mcu2_therm1_hightemprature, _x.mcu2_therm1_lowtemprature, _x.mcu2_therm2_hightemprature, _x.mcu2_therm2_lowtemprature, _x.mcu2_therm3_hightemprature, _x.mcu2_therm3_lowtemprature, _x.mcu2_therm4_hightemprature, _x.mcu2_therm4_lowtemprature, _x.s1_therm_hightemprature, _x.s2_therm_hightemprature, _x.s3_therm_hightemprature, _x.s4_therm_hightemprature,) = _get_struct_22B().unpack(str[start:end])
      self.mcu1_therm1_hightemprature = bool(self.mcu1_therm1_hightemprature)
      self.mcu1_therm1_lowtemprature = bool(self.mcu1_therm1_lowtemprature)
      self.mcu1_therm2_hightemprature = bool(self.mcu1_therm2_hightemprature)
      self.mcu1_therm2_lowtemprature = bool(self.mcu1_therm2_lowtemprature)
      self.mcu1_therm3_hightemprature = bool(self.mcu1_therm3_hightemprature)
      self.mcu1_therm3_lowtemprature = bool(self.mcu1_therm3_lowtemprature)
      self.mcu1_therm4_hightemprature = bool(self.mcu1_therm4_hightemprature)
      self.mcu1_therm4_lowtemprature = bool(self.mcu1_therm4_lowtemprature)
      self.mcu1_therm5_hightemprature = bool(self.mcu1_therm5_hightemprature)
      self.mcu1_therm5_lowtemprature = bool(self.mcu1_therm5_lowtemprature)
      self.mcu2_therm1_hightemprature = bool(self.mcu2_therm1_hightemprature)
      self.mcu2_therm1_lowtemprature = bool(self.mcu2_therm1_lowtemprature)
      self.mcu2_therm2_hightemprature = bool(self.mcu2_therm2_hightemprature)
      self.mcu2_therm2_lowtemprature = bool(self.mcu2_therm2_lowtemprature)
      self.mcu2_therm3_hightemprature = bool(self.mcu2_therm3_hightemprature)
      self.mcu2_therm3_lowtemprature = bool(self.mcu2_therm3_lowtemprature)
      self.mcu2_therm4_hightemprature = bool(self.mcu2_therm4_hightemprature)
      self.mcu2_therm4_lowtemprature = bool(self.mcu2_therm4_lowtemprature)
      self.s1_therm_hightemprature = bool(self.s1_therm_hightemprature)
      self.s2_therm_hightemprature = bool(self.s2_therm_hightemprature)
      self.s3_therm_hightemprature = bool(self.s3_therm_hightemprature)
      self.s4_therm_hightemprature = bool(self.s4_therm_hightemprature)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_22B().pack(_x.mcu1_therm1_hightemprature, _x.mcu1_therm1_lowtemprature, _x.mcu1_therm2_hightemprature, _x.mcu1_therm2_lowtemprature, _x.mcu1_therm3_hightemprature, _x.mcu1_therm3_lowtemprature, _x.mcu1_therm4_hightemprature, _x.mcu1_therm4_lowtemprature, _x.mcu1_therm5_hightemprature, _x.mcu1_therm5_lowtemprature, _x.mcu2_therm1_hightemprature, _x.mcu2_therm1_lowtemprature, _x.mcu2_therm2_hightemprature, _x.mcu2_therm2_lowtemprature, _x.mcu2_therm3_hightemprature, _x.mcu2_therm3_lowtemprature, _x.mcu2_therm4_hightemprature, _x.mcu2_therm4_lowtemprature, _x.s1_therm_hightemprature, _x.s2_therm_hightemprature, _x.s3_therm_hightemprature, _x.s4_therm_hightemprature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.mcu1_therm1_hightemprature, _x.mcu1_therm1_lowtemprature, _x.mcu1_therm2_hightemprature, _x.mcu1_therm2_lowtemprature, _x.mcu1_therm3_hightemprature, _x.mcu1_therm3_lowtemprature, _x.mcu1_therm4_hightemprature, _x.mcu1_therm4_lowtemprature, _x.mcu1_therm5_hightemprature, _x.mcu1_therm5_lowtemprature, _x.mcu2_therm1_hightemprature, _x.mcu2_therm1_lowtemprature, _x.mcu2_therm2_hightemprature, _x.mcu2_therm2_lowtemprature, _x.mcu2_therm3_hightemprature, _x.mcu2_therm3_lowtemprature, _x.mcu2_therm4_hightemprature, _x.mcu2_therm4_lowtemprature, _x.s1_therm_hightemprature, _x.s2_therm_hightemprature, _x.s3_therm_hightemprature, _x.s4_therm_hightemprature,) = _get_struct_22B().unpack(str[start:end])
      self.mcu1_therm1_hightemprature = bool(self.mcu1_therm1_hightemprature)
      self.mcu1_therm1_lowtemprature = bool(self.mcu1_therm1_lowtemprature)
      self.mcu1_therm2_hightemprature = bool(self.mcu1_therm2_hightemprature)
      self.mcu1_therm2_lowtemprature = bool(self.mcu1_therm2_lowtemprature)
      self.mcu1_therm3_hightemprature = bool(self.mcu1_therm3_hightemprature)
      self.mcu1_therm3_lowtemprature = bool(self.mcu1_therm3_lowtemprature)
      self.mcu1_therm4_hightemprature = bool(self.mcu1_therm4_hightemprature)
      self.mcu1_therm4_lowtemprature = bool(self.mcu1_therm4_lowtemprature)
      self.mcu1_therm5_hightemprature = bool(self.mcu1_therm5_hightemprature)
      self.mcu1_therm5_lowtemprature = bool(self.mcu1_therm5_lowtemprature)
      self.mcu2_therm1_hightemprature = bool(self.mcu2_therm1_hightemprature)
      self.mcu2_therm1_lowtemprature = bool(self.mcu2_therm1_lowtemprature)
      self.mcu2_therm2_hightemprature = bool(self.mcu2_therm2_hightemprature)
      self.mcu2_therm2_lowtemprature = bool(self.mcu2_therm2_lowtemprature)
      self.mcu2_therm3_hightemprature = bool(self.mcu2_therm3_hightemprature)
      self.mcu2_therm3_lowtemprature = bool(self.mcu2_therm3_lowtemprature)
      self.mcu2_therm4_hightemprature = bool(self.mcu2_therm4_hightemprature)
      self.mcu2_therm4_lowtemprature = bool(self.mcu2_therm4_lowtemprature)
      self.s1_therm_hightemprature = bool(self.s1_therm_hightemprature)
      self.s2_therm_hightemprature = bool(self.s2_therm_hightemprature)
      self.s3_therm_hightemprature = bool(self.s3_therm_hightemprature)
      self.s4_therm_hightemprature = bool(self.s4_therm_hightemprature)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_22B = None
def _get_struct_22B():
    global _struct_22B
    if _struct_22B is None:
        _struct_22B = struct.Struct("<22B")
    return _struct_22B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FusionTracks.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FusionTracks(genpy.Message):
  _md5sum = "fefaaf39c1eba98fa7bce52dd54f6786"
  _type = "rospy_message_converter/FusionTracks"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
uint32 age
VcsPos pos
float32 heading
VcsSpeed speed
VcsAccel accel
Dimensions dimension
uint32 meas_status
uint32 class
float32 class_prob
uint32 fus_source
uint32 rad_fusSrc
uint32 conf
MotionStatus mot_status
FusionVariance var
FusionDetectionInfo det_height

================================================================================
MSG: rospy_message_converter/VcsPos
float64 long_pos
float64 lat_pos

================================================================================
MSG: rospy_message_converter/VcsSpeed
float64 long_vel
float64 lat_vel
float64 abs_vel

================================================================================
MSG: rospy_message_converter/VcsAccel
float64 long_accel
float64 lat_accel

================================================================================
MSG: rospy_message_converter/Dimensions
float32 length
float32 width

================================================================================
MSG: rospy_message_converter/MotionStatus
bool f_stationary
bool f_moving
bool f_moveable
bool f_oncoming
bool f_receding
bool f_crossing

================================================================================
MSG: rospy_message_converter/FusionVariance
float32 var_longPos
float32 var_latPos
float32 var_longVel
float32 var_latVel
float32 var_longAcc
float32 var_latAcc

================================================================================
MSG: rospy_message_converter/FusionDetectionInfo
float32 det_max_height
float32 det_min_height
float32 det_avg_height
float32 det_height_std
uint32 num_det
"""
  __slots__ = ['id','age','pos','heading','speed','accel','dimension','meas_status','class_','class_prob','fus_source','rad_fusSrc','conf','mot_status','var','det_height']
  _slot_types = ['uint32','uint32','rospy_message_converter/VcsPos','float32','rospy_message_converter/VcsSpeed','rospy_message_converter/VcsAccel','rospy_message_converter/Dimensions','uint32','uint32','float32','uint32','uint32','uint32','rospy_message_converter/MotionStatus','rospy_message_converter/FusionVariance','rospy_message_converter/FusionDetectionInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,pos,heading,speed,accel,dimension,meas_status,class_,class_prob,fus_source,rad_fusSrc,conf,mot_status,var,det_height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionTracks, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0
      if self.pos is None:
        self.pos = rospy_message_converter.msg.VcsPos()
      if self.heading is None:
        self.heading = 0.
      if self.speed is None:
        self.speed = rospy_message_converter.msg.VcsSpeed()
      if self.accel is None:
        self.accel = rospy_message_converter.msg.VcsAccel()
      if self.dimension is None:
        self.dimension = rospy_message_converter.msg.Dimensions()
      if self.meas_status is None:
        self.meas_status = 0
      if self.class_ is None:
        self.class_ = 0
      if self.class_prob is None:
        self.class_prob = 0.
      if self.fus_source is None:
        self.fus_source = 0
      if self.rad_fusSrc is None:
        self.rad_fusSrc = 0
      if self.conf is None:
        self.conf = 0
      if self.mot_status is None:
        self.mot_status = rospy_message_converter.msg.MotionStatus()
      if self.var is None:
        self.var = rospy_message_converter.msg.FusionVariance()
      if self.det_height is None:
        self.det_height = rospy_message_converter.msg.FusionDetectionInfo()
    else:
      self.id = 0
      self.age = 0
      self.pos = rospy_message_converter.msg.VcsPos()
      self.heading = 0.
      self.speed = rospy_message_converter.msg.VcsSpeed()
      self.accel = rospy_message_converter.msg.VcsAccel()
      self.dimension = rospy_message_converter.msg.Dimensions()
      self.meas_status = 0
      self.class_ = 0
      self.class_prob = 0.
      self.fus_source = 0
      self.rad_fusSrc = 0
      self.conf = 0
      self.mot_status = rospy_message_converter.msg.MotionStatus()
      self.var = rospy_message_converter.msg.FusionVariance()
      self.det_height = rospy_message_converter.msg.FusionDetectionInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2df5d2f2If3I6B10fI().pack(_x.id, _x.age, _x.pos.long_pos, _x.pos.lat_pos, _x.heading, _x.speed.long_vel, _x.speed.lat_vel, _x.speed.abs_vel, _x.accel.long_accel, _x.accel.lat_accel, _x.dimension.length, _x.dimension.width, _x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf, _x.mot_status.f_stationary, _x.mot_status.f_moving, _x.mot_status.f_moveable, _x.mot_status.f_oncoming, _x.mot_status.f_receding, _x.mot_status.f_crossing, _x.var.var_longPos, _x.var.var_latPos, _x.var.var_longVel, _x.var.var_latVel, _x.var.var_longAcc, _x.var.var_latAcc, _x.det_height.det_max_height, _x.det_height.det_min_height, _x.det_height.det_avg_height, _x.det_height.det_height_std, _x.det_height.num_det))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = rospy_message_converter.msg.VcsPos()
      if self.speed is None:
        self.speed = rospy_message_converter.msg.VcsSpeed()
      if self.accel is None:
        self.accel = rospy_message_converter.msg.VcsAccel()
      if self.dimension is None:
        self.dimension = rospy_message_converter.msg.Dimensions()
      if self.mot_status is None:
        self.mot_status = rospy_message_converter.msg.MotionStatus()
      if self.var is None:
        self.var = rospy_message_converter.msg.FusionVariance()
      if self.det_height is None:
        self.det_height = rospy_message_converter.msg.FusionDetectionInfo()
      end = 0
      _x = self
      start = end
      end += 150
      (_x.id, _x.age, _x.pos.long_pos, _x.pos.lat_pos, _x.heading, _x.speed.long_vel, _x.speed.lat_vel, _x.speed.abs_vel, _x.accel.long_accel, _x.accel.lat_accel, _x.dimension.length, _x.dimension.width, _x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf, _x.mot_status.f_stationary, _x.mot_status.f_moving, _x.mot_status.f_moveable, _x.mot_status.f_oncoming, _x.mot_status.f_receding, _x.mot_status.f_crossing, _x.var.var_longPos, _x.var.var_latPos, _x.var.var_longVel, _x.var.var_latVel, _x.var.var_longAcc, _x.var.var_latAcc, _x.det_height.det_max_height, _x.det_height.det_min_height, _x.det_height.det_avg_height, _x.det_height.det_height_std, _x.det_height.num_det,) = _get_struct_2I2df5d2f2If3I6B10fI().unpack(str[start:end])
      self.mot_status.f_stationary = bool(self.mot_status.f_stationary)
      self.mot_status.f_moving = bool(self.mot_status.f_moving)
      self.mot_status.f_moveable = bool(self.mot_status.f_moveable)
      self.mot_status.f_oncoming = bool(self.mot_status.f_oncoming)
      self.mot_status.f_receding = bool(self.mot_status.f_receding)
      self.mot_status.f_crossing = bool(self.mot_status.f_crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2df5d2f2If3I6B10fI().pack(_x.id, _x.age, _x.pos.long_pos, _x.pos.lat_pos, _x.heading, _x.speed.long_vel, _x.speed.lat_vel, _x.speed.abs_vel, _x.accel.long_accel, _x.accel.lat_accel, _x.dimension.length, _x.dimension.width, _x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf, _x.mot_status.f_stationary, _x.mot_status.f_moving, _x.mot_status.f_moveable, _x.mot_status.f_oncoming, _x.mot_status.f_receding, _x.mot_status.f_crossing, _x.var.var_longPos, _x.var.var_latPos, _x.var.var_longVel, _x.var.var_latVel, _x.var.var_longAcc, _x.var.var_latAcc, _x.det_height.det_max_height, _x.det_height.det_min_height, _x.det_height.det_avg_height, _x.det_height.det_height_std, _x.det_height.num_det))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = rospy_message_converter.msg.VcsPos()
      if self.speed is None:
        self.speed = rospy_message_converter.msg.VcsSpeed()
      if self.accel is None:
        self.accel = rospy_message_converter.msg.VcsAccel()
      if self.dimension is None:
        self.dimension = rospy_message_converter.msg.Dimensions()
      if self.mot_status is None:
        self.mot_status = rospy_message_converter.msg.MotionStatus()
      if self.var is None:
        self.var = rospy_message_converter.msg.FusionVariance()
      if self.det_height is None:
        self.det_height = rospy_message_converter.msg.FusionDetectionInfo()
      end = 0
      _x = self
      start = end
      end += 150
      (_x.id, _x.age, _x.pos.long_pos, _x.pos.lat_pos, _x.heading, _x.speed.long_vel, _x.speed.lat_vel, _x.speed.abs_vel, _x.accel.long_accel, _x.accel.lat_accel, _x.dimension.length, _x.dimension.width, _x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf, _x.mot_status.f_stationary, _x.mot_status.f_moving, _x.mot_status.f_moveable, _x.mot_status.f_oncoming, _x.mot_status.f_receding, _x.mot_status.f_crossing, _x.var.var_longPos, _x.var.var_latPos, _x.var.var_longVel, _x.var.var_latVel, _x.var.var_longAcc, _x.var.var_latAcc, _x.det_height.det_max_height, _x.det_height.det_min_height, _x.det_height.det_avg_height, _x.det_height.det_height_std, _x.det_height.num_det,) = _get_struct_2I2df5d2f2If3I6B10fI().unpack(str[start:end])
      self.mot_status.f_stationary = bool(self.mot_status.f_stationary)
      self.mot_status.f_moving = bool(self.mot_status.f_moving)
      self.mot_status.f_moveable = bool(self.mot_status.f_moveable)
      self.mot_status.f_oncoming = bool(self.mot_status.f_oncoming)
      self.mot_status.f_receding = bool(self.mot_status.f_receding)
      self.mot_status.f_crossing = bool(self.mot_status.f_crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2df5d2f2If3I6B10fI = None
def _get_struct_2I2df5d2f2If3I6B10fI():
    global _struct_2I2df5d2f2If3I6B10fI
    if _struct_2I2df5d2f2If3I6B10fI is None:
        _struct_2I2df5d2f2If3I6B10fI = struct.Struct("<2I2df5d2f2If3I6B10fI")
    return _struct_2I2df5d2f2If3I6B10fI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/StaticObjects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StaticObjects(genpy.Message):
  _md5sum = "adaf65aea3242c9c7abaee6bbdd57e7e"
  _type = "rospy_message_converter/StaticObjects"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 OBS_Age
uint32 OBS_ID
int32 OBS_Type
float32 OBS_Type_Probability
float32 OBS_Lat_Distance
float32 OBS_Lat_Distance_STD
float32 OBS_Long_Distance
float32 OBS_Long_Distance_STD
float32 OBS_Object_Length
float32 OBS_Object_Length_STD
float32 OBS_Object_Width
float32 OBS_Object_Width_STD
float32 OBS_Object_Height
float32 OBS_Object_Height_STD
int32 source
"""
  __slots__ = ['OBS_Age','OBS_ID','OBS_Type','OBS_Type_Probability','OBS_Lat_Distance','OBS_Lat_Distance_STD','OBS_Long_Distance','OBS_Long_Distance_STD','OBS_Object_Length','OBS_Object_Length_STD','OBS_Object_Width','OBS_Object_Width_STD','OBS_Object_Height','OBS_Object_Height_STD','source']
  _slot_types = ['uint32','uint32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       OBS_Age,OBS_ID,OBS_Type,OBS_Type_Probability,OBS_Lat_Distance,OBS_Lat_Distance_STD,OBS_Long_Distance,OBS_Long_Distance_STD,OBS_Object_Length,OBS_Object_Length_STD,OBS_Object_Width,OBS_Object_Width_STD,OBS_Object_Height,OBS_Object_Height_STD,source

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StaticObjects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.OBS_Age is None:
        self.OBS_Age = 0
      if self.OBS_ID is None:
        self.OBS_ID = 0
      if self.OBS_Type is None:
        self.OBS_Type = 0
      if self.OBS_Type_Probability is None:
        self.OBS_Type_Probability = 0.
      if self.OBS_Lat_Distance is None:
        self.OBS_Lat_Distance = 0.
      if self.OBS_Lat_Distance_STD is None:
        self.OBS_Lat_Distance_STD = 0.
      if self.OBS_Long_Distance is None:
        self.OBS_Long_Distance = 0.
      if self.OBS_Long_Distance_STD is None:
        self.OBS_Long_Distance_STD = 0.
      if self.OBS_Object_Length is None:
        self.OBS_Object_Length = 0.
      if self.OBS_Object_Length_STD is None:
        self.OBS_Object_Length_STD = 0.
      if self.OBS_Object_Width is None:
        self.OBS_Object_Width = 0.
      if self.OBS_Object_Width_STD is None:
        self.OBS_Object_Width_STD = 0.
      if self.OBS_Object_Height is None:
        self.OBS_Object_Height = 0.
      if self.OBS_Object_Height_STD is None:
        self.OBS_Object_Height_STD = 0.
      if self.source is None:
        self.source = 0
    else:
      self.OBS_Age = 0
      self.OBS_ID = 0
      self.OBS_Type = 0
      self.OBS_Type_Probability = 0.
      self.OBS_Lat_Distance = 0.
      self.OBS_Lat_Distance_STD = 0.
      self.OBS_Long_Distance = 0.
      self.OBS_Long_Distance_STD = 0.
      self.OBS_Object_Length = 0.
      self.OBS_Object_Length_STD = 0.
      self.OBS_Object_Width = 0.
      self.OBS_Object_Width_STD = 0.
      self.OBS_Object_Height = 0.
      self.OBS_Object_Height_STD = 0.
      self.source = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii11fi().pack(_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source,) = _get_struct_2Ii11fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii11fi().pack(_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.OBS_Age, _x.OBS_ID, _x.OBS_Type, _x.OBS_Type_Probability, _x.OBS_Lat_Distance, _x.OBS_Lat_Distance_STD, _x.OBS_Long_Distance, _x.OBS_Long_Distance_STD, _x.OBS_Object_Length, _x.OBS_Object_Length_STD, _x.OBS_Object_Width, _x.OBS_Object_Width_STD, _x.OBS_Object_Height, _x.OBS_Object_Height_STD, _x.source,) = _get_struct_2Ii11fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Ii11fi = None
def _get_struct_2Ii11fi():
    global _struct_2Ii11fi
    if _struct_2Ii11fi is None:
        _struct_2Ii11fi = struct.Struct("<2Ii11fi")
    return _struct_2Ii11fi

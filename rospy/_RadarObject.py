# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RadarObject(genpy.Message):
  _md5sum = "4dfb2ff7da6ebadef6d7193b80bbf20d"
  _type = "rospy_message_converter/RadarObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RadarObjectValidStatus valid_status
uint32 source
ObjMotion motion
ObjMotionState motion_state
int32 classification
uint32 sub_class
float32 class_prob
float32 obstacle_prob
float32 conf
uint32 age
uint32 id
int32 ref_point
float32 object_rcs
float32 assoc_det_max_height
float32 assoc_det_min_height
float32 assoc_det_height_std
uint32 assoc_number_of_det
bool f_multi_measures
bool f_overhead_suspicious
uint32 unique_id
bool f_crossing

================================================================================
MSG: rospy_message_converter/RadarObjectValidStatus
bool flag_valid
bool flag_measured
bool flag_hist

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std

================================================================================
MSG: rospy_message_converter/ObjMotionState
bool is_valid
bool is_moving
bool is_movable
bool direction
bool was_moved
bool is_crossing
"""
  __slots__ = ['valid_status','source','motion','motion_state','classification','sub_class','class_prob','obstacle_prob','conf','age','id','ref_point','object_rcs','assoc_det_max_height','assoc_det_min_height','assoc_det_height_std','assoc_number_of_det','f_multi_measures','f_overhead_suspicious','unique_id','f_crossing']
  _slot_types = ['rospy_message_converter/RadarObjectValidStatus','uint32','rospy_message_converter/ObjMotion','rospy_message_converter/ObjMotionState','int32','uint32','float32','float32','float32','uint32','uint32','int32','float32','float32','float32','float32','uint32','bool','bool','uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid_status,source,motion,motion_state,classification,sub_class,class_prob,obstacle_prob,conf,age,id,ref_point,object_rcs,assoc_det_max_height,assoc_det_min_height,assoc_det_height_std,assoc_number_of_det,f_multi_measures,f_overhead_suspicious,unique_id,f_crossing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid_status is None:
        self.valid_status = rospy_message_converter.msg.RadarObjectValidStatus()
      if self.source is None:
        self.source = 0
      if self.motion is None:
        self.motion = rospy_message_converter.msg.ObjMotion()
      if self.motion_state is None:
        self.motion_state = rospy_message_converter.msg.ObjMotionState()
      if self.classification is None:
        self.classification = 0
      if self.sub_class is None:
        self.sub_class = 0
      if self.class_prob is None:
        self.class_prob = 0.
      if self.obstacle_prob is None:
        self.obstacle_prob = 0.
      if self.conf is None:
        self.conf = 0.
      if self.age is None:
        self.age = 0
      if self.id is None:
        self.id = 0
      if self.ref_point is None:
        self.ref_point = 0
      if self.object_rcs is None:
        self.object_rcs = 0.
      if self.assoc_det_max_height is None:
        self.assoc_det_max_height = 0.
      if self.assoc_det_min_height is None:
        self.assoc_det_min_height = 0.
      if self.assoc_det_height_std is None:
        self.assoc_det_height_std = 0.
      if self.assoc_number_of_det is None:
        self.assoc_number_of_det = 0
      if self.f_multi_measures is None:
        self.f_multi_measures = False
      if self.f_overhead_suspicious is None:
        self.f_overhead_suspicious = False
      if self.unique_id is None:
        self.unique_id = 0
      if self.f_crossing is None:
        self.f_crossing = False
    else:
      self.valid_status = rospy_message_converter.msg.RadarObjectValidStatus()
      self.source = 0
      self.motion = rospy_message_converter.msg.ObjMotion()
      self.motion_state = rospy_message_converter.msg.ObjMotionState()
      self.classification = 0
      self.sub_class = 0
      self.class_prob = 0.
      self.obstacle_prob = 0.
      self.conf = 0.
      self.age = 0
      self.id = 0
      self.ref_point = 0
      self.object_rcs = 0.
      self.assoc_det_max_height = 0.
      self.assoc_det_min_height = 0.
      self.assoc_det_height_std = 0.
      self.assoc_number_of_det = 0
      self.f_multi_measures = False
      self.f_overhead_suspicious = False
      self.unique_id = 0
      self.f_crossing = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BI25fif6BiI3f2Ii4fI2BIB().pack(_x.valid_status.flag_valid, _x.valid_status.flag_measured, _x.valid_status.flag_hist, _x.source, _x.motion.pos.x, _x.motion.pos.y, _x.motion.pos.z, _x.motion.pos_std.x_std, _x.motion.pos_std.y_std, _x.motion.pos_std.z_std, _x.motion.vel.vx, _x.motion.vel.vy, _x.motion.vel.vz, _x.motion.vel_std.vx_std, _x.motion.vel_std.vy_std, _x.motion.vel_std.vz_std, _x.motion.acc.ax, _x.motion.acc.ay, _x.motion.acc.az, _x.motion.acc_std.ax_std, _x.motion.acc_std.ay_std, _x.motion.acc_std.az_std, _x.motion.size.length, _x.motion.size.width, _x.motion.size.height, _x.motion.size_std.length_std, _x.motion.size_std.width_std, _x.motion.size_std.height_std, _x.motion.heading, _x.motion.ref_point, _x.motion.heading_rate, _x.motion_state.is_valid, _x.motion_state.is_moving, _x.motion_state.is_movable, _x.motion_state.direction, _x.motion_state.was_moved, _x.motion_state.is_crossing, _x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.valid_status is None:
        self.valid_status = rospy_message_converter.msg.RadarObjectValidStatus()
      if self.motion is None:
        self.motion = rospy_message_converter.msg.ObjMotion()
      if self.motion_state is None:
        self.motion_state = rospy_message_converter.msg.ObjMotionState()
      end = 0
      _x = self
      start = end
      end += 180
      (_x.valid_status.flag_valid, _x.valid_status.flag_measured, _x.valid_status.flag_hist, _x.source, _x.motion.pos.x, _x.motion.pos.y, _x.motion.pos.z, _x.motion.pos_std.x_std, _x.motion.pos_std.y_std, _x.motion.pos_std.z_std, _x.motion.vel.vx, _x.motion.vel.vy, _x.motion.vel.vz, _x.motion.vel_std.vx_std, _x.motion.vel_std.vy_std, _x.motion.vel_std.vz_std, _x.motion.acc.ax, _x.motion.acc.ay, _x.motion.acc.az, _x.motion.acc_std.ax_std, _x.motion.acc_std.ay_std, _x.motion.acc_std.az_std, _x.motion.size.length, _x.motion.size.width, _x.motion.size.height, _x.motion.size_std.length_std, _x.motion.size_std.width_std, _x.motion.size_std.height_std, _x.motion.heading, _x.motion.ref_point, _x.motion.heading_rate, _x.motion_state.is_valid, _x.motion_state.is_moving, _x.motion_state.is_movable, _x.motion_state.direction, _x.motion_state.was_moved, _x.motion_state.is_crossing, _x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_3BI25fif6BiI3f2Ii4fI2BIB().unpack(str[start:end])
      self.valid_status.flag_valid = bool(self.valid_status.flag_valid)
      self.valid_status.flag_measured = bool(self.valid_status.flag_measured)
      self.valid_status.flag_hist = bool(self.valid_status.flag_hist)
      self.motion_state.is_valid = bool(self.motion_state.is_valid)
      self.motion_state.is_moving = bool(self.motion_state.is_moving)
      self.motion_state.is_movable = bool(self.motion_state.is_movable)
      self.motion_state.direction = bool(self.motion_state.direction)
      self.motion_state.was_moved = bool(self.motion_state.was_moved)
      self.motion_state.is_crossing = bool(self.motion_state.is_crossing)
      self.f_multi_measures = bool(self.f_multi_measures)
      self.f_overhead_suspicious = bool(self.f_overhead_suspicious)
      self.f_crossing = bool(self.f_crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BI25fif6BiI3f2Ii4fI2BIB().pack(_x.valid_status.flag_valid, _x.valid_status.flag_measured, _x.valid_status.flag_hist, _x.source, _x.motion.pos.x, _x.motion.pos.y, _x.motion.pos.z, _x.motion.pos_std.x_std, _x.motion.pos_std.y_std, _x.motion.pos_std.z_std, _x.motion.vel.vx, _x.motion.vel.vy, _x.motion.vel.vz, _x.motion.vel_std.vx_std, _x.motion.vel_std.vy_std, _x.motion.vel_std.vz_std, _x.motion.acc.ax, _x.motion.acc.ay, _x.motion.acc.az, _x.motion.acc_std.ax_std, _x.motion.acc_std.ay_std, _x.motion.acc_std.az_std, _x.motion.size.length, _x.motion.size.width, _x.motion.size.height, _x.motion.size_std.length_std, _x.motion.size_std.width_std, _x.motion.size_std.height_std, _x.motion.heading, _x.motion.ref_point, _x.motion.heading_rate, _x.motion_state.is_valid, _x.motion_state.is_moving, _x.motion_state.is_movable, _x.motion_state.direction, _x.motion_state.was_moved, _x.motion_state.is_crossing, _x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.valid_status is None:
        self.valid_status = rospy_message_converter.msg.RadarObjectValidStatus()
      if self.motion is None:
        self.motion = rospy_message_converter.msg.ObjMotion()
      if self.motion_state is None:
        self.motion_state = rospy_message_converter.msg.ObjMotionState()
      end = 0
      _x = self
      start = end
      end += 180
      (_x.valid_status.flag_valid, _x.valid_status.flag_measured, _x.valid_status.flag_hist, _x.source, _x.motion.pos.x, _x.motion.pos.y, _x.motion.pos.z, _x.motion.pos_std.x_std, _x.motion.pos_std.y_std, _x.motion.pos_std.z_std, _x.motion.vel.vx, _x.motion.vel.vy, _x.motion.vel.vz, _x.motion.vel_std.vx_std, _x.motion.vel_std.vy_std, _x.motion.vel_std.vz_std, _x.motion.acc.ax, _x.motion.acc.ay, _x.motion.acc.az, _x.motion.acc_std.ax_std, _x.motion.acc_std.ay_std, _x.motion.acc_std.az_std, _x.motion.size.length, _x.motion.size.width, _x.motion.size.height, _x.motion.size_std.length_std, _x.motion.size_std.width_std, _x.motion.size_std.height_std, _x.motion.heading, _x.motion.ref_point, _x.motion.heading_rate, _x.motion_state.is_valid, _x.motion_state.is_moving, _x.motion_state.is_movable, _x.motion_state.direction, _x.motion_state.was_moved, _x.motion_state.is_crossing, _x.classification, _x.sub_class, _x.class_prob, _x.obstacle_prob, _x.conf, _x.age, _x.id, _x.ref_point, _x.object_rcs, _x.assoc_det_max_height, _x.assoc_det_min_height, _x.assoc_det_height_std, _x.assoc_number_of_det, _x.f_multi_measures, _x.f_overhead_suspicious, _x.unique_id, _x.f_crossing,) = _get_struct_3BI25fif6BiI3f2Ii4fI2BIB().unpack(str[start:end])
      self.valid_status.flag_valid = bool(self.valid_status.flag_valid)
      self.valid_status.flag_measured = bool(self.valid_status.flag_measured)
      self.valid_status.flag_hist = bool(self.valid_status.flag_hist)
      self.motion_state.is_valid = bool(self.motion_state.is_valid)
      self.motion_state.is_moving = bool(self.motion_state.is_moving)
      self.motion_state.is_movable = bool(self.motion_state.is_movable)
      self.motion_state.direction = bool(self.motion_state.direction)
      self.motion_state.was_moved = bool(self.motion_state.was_moved)
      self.motion_state.is_crossing = bool(self.motion_state.is_crossing)
      self.f_multi_measures = bool(self.f_multi_measures)
      self.f_overhead_suspicious = bool(self.f_overhead_suspicious)
      self.f_crossing = bool(self.f_crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BI25fif6BiI3f2Ii4fI2BIB = None
def _get_struct_3BI25fif6BiI3f2Ii4fI2BIB():
    global _struct_3BI25fif6BiI3f2Ii4fI2BIB
    if _struct_3BI25fif6BiI3f2Ii4fI2BIB is None:
        _struct_3BI25fif6BiI3f2Ii4fI2BIB = struct.Struct("<3BI25fif6BiI3f2Ii4fI2BIB")
    return _struct_3BI25fif6BiI3f2Ii4fI2BIB

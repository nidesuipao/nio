# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RequestStru.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RequestStru(genpy.Message):
  _md5sum = "6ac545d79e70ab15e6b969c08794cf88"
  _type = "rospy_message_converter/RequestStru"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 fcwTargetId
uint32 aebTargetId
float32 aebDecelReq
bool aebReq
uint32 aebTargetType
uint32 aebStatus
bool abpReq
bool awbReq
bool ebaReq
bool fcwReq
uint32 fcwTargetType
uint32 fcwStatus
"""
  __slots__ = ['fcwTargetId','aebTargetId','aebDecelReq','aebReq','aebTargetType','aebStatus','abpReq','awbReq','ebaReq','fcwReq','fcwTargetType','fcwStatus']
  _slot_types = ['uint32','uint32','float32','bool','uint32','uint32','bool','bool','bool','bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fcwTargetId,aebTargetId,aebDecelReq,aebReq,aebTargetType,aebStatus,abpReq,awbReq,ebaReq,fcwReq,fcwTargetType,fcwStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestStru, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fcwTargetId is None:
        self.fcwTargetId = 0
      if self.aebTargetId is None:
        self.aebTargetId = 0
      if self.aebDecelReq is None:
        self.aebDecelReq = 0.
      if self.aebReq is None:
        self.aebReq = False
      if self.aebTargetType is None:
        self.aebTargetType = 0
      if self.aebStatus is None:
        self.aebStatus = 0
      if self.abpReq is None:
        self.abpReq = False
      if self.awbReq is None:
        self.awbReq = False
      if self.ebaReq is None:
        self.ebaReq = False
      if self.fcwReq is None:
        self.fcwReq = False
      if self.fcwTargetType is None:
        self.fcwTargetType = 0
      if self.fcwStatus is None:
        self.fcwStatus = 0
    else:
      self.fcwTargetId = 0
      self.aebTargetId = 0
      self.aebDecelReq = 0.
      self.aebReq = False
      self.aebTargetType = 0
      self.aebStatus = 0
      self.abpReq = False
      self.awbReq = False
      self.ebaReq = False
      self.fcwReq = False
      self.fcwTargetType = 0
      self.fcwStatus = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IfB2I4B2I().pack(_x.fcwTargetId, _x.aebTargetId, _x.aebDecelReq, _x.aebReq, _x.aebTargetType, _x.aebStatus, _x.abpReq, _x.awbReq, _x.ebaReq, _x.fcwReq, _x.fcwTargetType, _x.fcwStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.fcwTargetId, _x.aebTargetId, _x.aebDecelReq, _x.aebReq, _x.aebTargetType, _x.aebStatus, _x.abpReq, _x.awbReq, _x.ebaReq, _x.fcwReq, _x.fcwTargetType, _x.fcwStatus,) = _get_struct_2IfB2I4B2I().unpack(str[start:end])
      self.aebReq = bool(self.aebReq)
      self.abpReq = bool(self.abpReq)
      self.awbReq = bool(self.awbReq)
      self.ebaReq = bool(self.ebaReq)
      self.fcwReq = bool(self.fcwReq)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IfB2I4B2I().pack(_x.fcwTargetId, _x.aebTargetId, _x.aebDecelReq, _x.aebReq, _x.aebTargetType, _x.aebStatus, _x.abpReq, _x.awbReq, _x.ebaReq, _x.fcwReq, _x.fcwTargetType, _x.fcwStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.fcwTargetId, _x.aebTargetId, _x.aebDecelReq, _x.aebReq, _x.aebTargetType, _x.aebStatus, _x.abpReq, _x.awbReq, _x.ebaReq, _x.fcwReq, _x.fcwTargetType, _x.fcwStatus,) = _get_struct_2IfB2I4B2I().unpack(str[start:end])
      self.aebReq = bool(self.aebReq)
      self.abpReq = bool(self.abpReq)
      self.awbReq = bool(self.awbReq)
      self.ebaReq = bool(self.ebaReq)
      self.fcwReq = bool(self.fcwReq)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IfB2I4B2I = None
def _get_struct_2IfB2I4B2I():
    global _struct_2IfB2I4B2I
    if _struct_2IfB2I4B2I is None:
        _struct_2IfB2I4B2I = struct.Struct("<2IfB2I4B2I")
    return _struct_2IfB2I4B2I

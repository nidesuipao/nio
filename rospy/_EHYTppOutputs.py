# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EHYTppOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EHYTppOutputs(genpy.Message):
  _md5sum = "438bb1c55435e5f7390b9d6d1697ae8d"
  _type = "rospy_message_converter/EHYTppOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RmeLine tpp_trajectory
float32 latctrl_pt
float32 longctrl_pt
float32 shift_offset
uint32 act_shift_status
uint32[] shift_object_id
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RmeLine
float32 pt_conf
float32 c0
float32 c1
float32 c2
float32 c3
float32 lrange_start
float32 lrange_end
float32 lm_width
int32 line_color
int32 line_type
int32 line_src
"""
  __slots__ = ['tpp_trajectory','latctrl_pt','longctrl_pt','shift_offset','act_shift_status','shift_object_id','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/RmeLine','float32','float32','float32','uint32','uint32[]','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tpp_trajectory,latctrl_pt,longctrl_pt,shift_offset,act_shift_status,shift_object_id,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EHYTppOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tpp_trajectory is None:
        self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      if self.latctrl_pt is None:
        self.latctrl_pt = 0.
      if self.longctrl_pt is None:
        self.longctrl_pt = 0.
      if self.shift_offset is None:
        self.shift_offset = 0.
      if self.act_shift_status is None:
        self.act_shift_status = 0
      if self.shift_object_id is None:
        self.shift_object_id = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      self.latctrl_pt = 0.
      self.longctrl_pt = 0.
      self.shift_offset = 0.
      self.act_shift_status = 0
      self.shift_object_id = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i3fI().pack(_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.latctrl_pt, _x.longctrl_pt, _x.shift_offset, _x.act_shift_status))
      length = len(self.shift_object_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.shift_object_id))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tpp_trajectory is None:
        self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.latctrl_pt, _x.longctrl_pt, _x.shift_offset, _x.act_shift_status,) = _get_struct_8f3i3fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shift_object_id = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i3fI().pack(_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.latctrl_pt, _x.longctrl_pt, _x.shift_offset, _x.act_shift_status))
      length = len(self.shift_object_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.shift_object_id.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tpp_trajectory is None:
        self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.latctrl_pt, _x.longctrl_pt, _x.shift_offset, _x.act_shift_status,) = _get_struct_8f3i3fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shift_object_id = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_8f3i3fI = None
def _get_struct_8f3i3fI():
    global _struct_8f3i3fI
    if _struct_8f3i3fI is None:
        _struct_8f3i3fI = struct.Struct("<8f3i3fI")
    return _struct_8f3i3fI
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

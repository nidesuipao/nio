# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_Roadedge.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class esd_Roadedge(genpy.Message):
  _md5sum = "4eb0acaa702dc0580d44e07fc11aa780"
  _type = "rospy_message_converter/esd_Roadedge"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 esd_LD_RE_Type
int32 esd_LD_RE_Side
int32 esd_LD_RE_From_Host_Index
uint32 esd_LD_RE_ID
uint32 esd_LD_RE_Age
float32 esd_LD_RE_Height
float32 esd_LD_RE_VR_Start
float32 esd_LD_RE_VR_End
esd_PolyLine esd_LD_RE_Line

================================================================================
MSG: rospy_message_converter/esd_PolyLine
float32 esd_line_C0
float32 esd_line_C1
float32 esd_line_C2
float32 esd_line_C3
"""
  __slots__ = ['esd_LD_RE_Type','esd_LD_RE_Side','esd_LD_RE_From_Host_Index','esd_LD_RE_ID','esd_LD_RE_Age','esd_LD_RE_Height','esd_LD_RE_VR_Start','esd_LD_RE_VR_End','esd_LD_RE_Line']
  _slot_types = ['int32','int32','int32','uint32','uint32','float32','float32','float32','rospy_message_converter/esd_PolyLine']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_LD_RE_Type,esd_LD_RE_Side,esd_LD_RE_From_Host_Index,esd_LD_RE_ID,esd_LD_RE_Age,esd_LD_RE_Height,esd_LD_RE_VR_Start,esd_LD_RE_VR_End,esd_LD_RE_Line

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_Roadedge, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_LD_RE_Type is None:
        self.esd_LD_RE_Type = 0
      if self.esd_LD_RE_Side is None:
        self.esd_LD_RE_Side = 0
      if self.esd_LD_RE_From_Host_Index is None:
        self.esd_LD_RE_From_Host_Index = 0
      if self.esd_LD_RE_ID is None:
        self.esd_LD_RE_ID = 0
      if self.esd_LD_RE_Age is None:
        self.esd_LD_RE_Age = 0
      if self.esd_LD_RE_Height is None:
        self.esd_LD_RE_Height = 0.
      if self.esd_LD_RE_VR_Start is None:
        self.esd_LD_RE_VR_Start = 0.
      if self.esd_LD_RE_VR_End is None:
        self.esd_LD_RE_VR_End = 0.
      if self.esd_LD_RE_Line is None:
        self.esd_LD_RE_Line = rospy_message_converter.msg.esd_PolyLine()
    else:
      self.esd_LD_RE_Type = 0
      self.esd_LD_RE_Side = 0
      self.esd_LD_RE_From_Host_Index = 0
      self.esd_LD_RE_ID = 0
      self.esd_LD_RE_Age = 0
      self.esd_LD_RE_Height = 0.
      self.esd_LD_RE_VR_Start = 0.
      self.esd_LD_RE_VR_End = 0.
      self.esd_LD_RE_Line = rospy_message_converter.msg.esd_PolyLine()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i2I7f().pack(_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End, _x.esd_LD_RE_Line.esd_line_C0, _x.esd_LD_RE_Line.esd_line_C1, _x.esd_LD_RE_Line.esd_line_C2, _x.esd_LD_RE_Line.esd_line_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_LD_RE_Line is None:
        self.esd_LD_RE_Line = rospy_message_converter.msg.esd_PolyLine()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End, _x.esd_LD_RE_Line.esd_line_C0, _x.esd_LD_RE_Line.esd_line_C1, _x.esd_LD_RE_Line.esd_line_C2, _x.esd_LD_RE_Line.esd_line_C3,) = _get_struct_3i2I7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i2I7f().pack(_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End, _x.esd_LD_RE_Line.esd_line_C0, _x.esd_LD_RE_Line.esd_line_C1, _x.esd_LD_RE_Line.esd_line_C2, _x.esd_LD_RE_Line.esd_line_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.esd_LD_RE_Line is None:
        self.esd_LD_RE_Line = rospy_message_converter.msg.esd_PolyLine()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.esd_LD_RE_Type, _x.esd_LD_RE_Side, _x.esd_LD_RE_From_Host_Index, _x.esd_LD_RE_ID, _x.esd_LD_RE_Age, _x.esd_LD_RE_Height, _x.esd_LD_RE_VR_Start, _x.esd_LD_RE_VR_End, _x.esd_LD_RE_Line.esd_line_C0, _x.esd_LD_RE_Line.esd_line_C1, _x.esd_LD_RE_Line.esd_line_C2, _x.esd_LD_RE_Line.esd_line_C3,) = _get_struct_3i2I7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i2I7f = None
def _get_struct_3i2I7f():
    global _struct_3i2I7f
    if _struct_3i2I7f is None:
        _struct_3i2I7f = struct.Struct("<3i2I7f")
    return _struct_3i2I7f

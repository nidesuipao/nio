# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SpecialPointList_2D.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SpecialPointList_2D(genpy.Message):
  _md5sum = "83dbd9b505a8405414e907c7c0249731"
  _type = "rospy_message_converter/SpecialPointList_2D"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 SPL_POINT_NUM
Point_2D[] SPL_Points_List
int32[] SPL_Type
uint32[] sensor_id_list

================================================================================
MSG: rospy_message_converter/Point_2D
float32 LD_Point_x
float32 LD_Point_y
"""
  __slots__ = ['SPL_POINT_NUM','SPL_Points_List','SPL_Type','sensor_id_list']
  _slot_types = ['uint32','rospy_message_converter/Point_2D[]','int32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SPL_POINT_NUM,SPL_Points_List,SPL_Type,sensor_id_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpecialPointList_2D, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SPL_POINT_NUM is None:
        self.SPL_POINT_NUM = 0
      if self.SPL_Points_List is None:
        self.SPL_Points_List = []
      if self.SPL_Type is None:
        self.SPL_Type = []
      if self.sensor_id_list is None:
        self.sensor_id_list = []
    else:
      self.SPL_POINT_NUM = 0
      self.SPL_Points_List = []
      self.SPL_Type = []
      self.sensor_id_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.SPL_POINT_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.SPL_Points_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.SPL_Points_List:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
      length = len(self.SPL_Type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SPL_Type))
      length = len(self.sensor_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sensor_id_list))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.SPL_Points_List is None:
        self.SPL_Points_List = None
      end = 0
      start = end
      end += 4
      (self.SPL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.SPL_Points_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point_2D()
        _x = val1
        start = end
        end += 8
        (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
        self.SPL_Points_List.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SPL_Type = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensor_id_list = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.SPL_POINT_NUM
      buff.write(_get_struct_I().pack(_x))
      length = len(self.SPL_Points_List)
      buff.write(_struct_I.pack(length))
      for val1 in self.SPL_Points_List:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.LD_Point_x, _x.LD_Point_y))
      length = len(self.SPL_Type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SPL_Type.tostring())
      length = len(self.sensor_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sensor_id_list.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.SPL_Points_List is None:
        self.SPL_Points_List = None
      end = 0
      start = end
      end += 4
      (self.SPL_POINT_NUM,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.SPL_Points_List = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point_2D()
        _x = val1
        start = end
        end += 8
        (_x.LD_Point_x, _x.LD_Point_y,) = _get_struct_2f().unpack(str[start:end])
        self.SPL_Points_List.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SPL_Type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensor_id_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f

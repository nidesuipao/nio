# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/View.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class View(genpy.Message):
  _md5sum = "d7670b9b8b26c21a2b2cdbc9a7f4fd74"
  _type = "rospy_message_converter/View"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """HeaderInfo header
int32 source
FusionTrack fusion_tracker
TargetSelection sel_tar
RoadBoundary road_boundary
RadarDetections rad_dets
RadarFaultStatus rads_fail

================================================================================
MSG: rospy_message_converter/HeaderInfo
uint64 fusion_timestamp
uint32 fusion_index
uint64[] radar_timestamp
uint32[] radar_lookIndex

================================================================================
MSG: rospy_message_converter/FusionTrack
FusionTracks[] fusion_tracks

================================================================================
MSG: rospy_message_converter/FusionTracks
uint32 id
uint32 age
VcsPos pos
float32 heading
VcsSpeed speed
VcsAccel accel
Dimensions dimension
uint32 meas_status
uint32 class
float32 class_prob
uint32 fus_source
uint32 rad_fusSrc
uint32 conf
MotionStatus mot_status
FusionVariance var
FusionDetectionInfo det_height

================================================================================
MSG: rospy_message_converter/VcsPos
float64 long_pos
float64 lat_pos

================================================================================
MSG: rospy_message_converter/VcsSpeed
float64 long_vel
float64 lat_vel
float64 abs_vel

================================================================================
MSG: rospy_message_converter/VcsAccel
float64 long_accel
float64 lat_accel

================================================================================
MSG: rospy_message_converter/Dimensions
float32 length
float32 width

================================================================================
MSG: rospy_message_converter/MotionStatus
bool f_stationary
bool f_moving
bool f_moveable
bool f_oncoming
bool f_receding
bool f_crossing

================================================================================
MSG: rospy_message_converter/FusionVariance
float32 var_longPos
float32 var_latPos
float32 var_longVel
float32 var_latVel
float32 var_longAcc
float32 var_latAcc

================================================================================
MSG: rospy_message_converter/FusionDetectionInfo
float32 det_max_height
float32 det_min_height
float32 det_avg_height
float32 det_height_std
uint32 num_det

================================================================================
MSG: rospy_message_converter/TargetSelection
uint32[] acc_tar
uint32 aeb_tar
uint32 aeb_conf

================================================================================
MSG: rospy_message_converter/RoadBoundary
LeftFrontGuardRails left_guard
RightFrontGuardRails right_guard
LeftBackBarriers left_barr
RightBackBarriers right_barr

================================================================================
MSG: rospy_message_converter/LeftFrontGuardRails
float32 left_front_c0
float32 left_front_c1
float32 left_front_heading
float32 left_front_offset
uint32 barrier_conf
float32 left_front_start_distance
float32 left_front_end_distance

================================================================================
MSG: rospy_message_converter/RightFrontGuardRails
float32 right_front_c0
float32 right_front_c1
float32 right_front_heading
float32 right_front_offset
uint32 barrier_conf
float32 right_front_start_distance
float32 right_front_end_distance

================================================================================
MSG: rospy_message_converter/LeftBackBarriers
float32 left_back_c0
float32 left_back_c1
float32 left_back_c2
float32 left_back_c3
uint32 barrier_conf
float32 left_back_start_distance
float32 left_back_end_distance

================================================================================
MSG: rospy_message_converter/RightBackBarriers
float32 right_back_c0
float32 right_back_c1
float32 right_back_c2
float32 right_back_c3
uint32 barrier_conf
float32 right_back_start_distance
float32 right_back_end_distance

================================================================================
MSG: rospy_message_converter/RadarDetections
uint64[] rad_det_time
uint32 det_fus_idx
RadarPoints[] rad_pt

================================================================================
MSG: rospy_message_converter/RadarPoints
uint32 det_id
float64 range
float64 range_rate
float64 azimuth_ang
float64 elevation_ang
float32 det_rcs

================================================================================
MSG: rospy_message_converter/RadarFaultStatus
RadarDiagnoseCAN rad_fc_fail
RadarDiagnoseCAN rad_fl_fail
RadarDiagnoseCAN rad_fr_fail
RadarDiagnoseCAN rad_rl_fail
RadarDiagnoseCAN rad_rr_fail
RadarActiveFaults rad_fc_act_fault
RadarActiveFaults rad_fl_act_fault
RadarActiveFaults rad_fr_act_fault
RadarActiveFaults rad_rl_act_fault
RadarActiveFaults rad_rr_act_fault
RadarSDKActiveFaults rad_sdk_act_fault
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RadarDiagnoseCAN
bool blok_det
bool volt_low
bool volt_high
bool align_incomp
bool inter_fault
bool align_out_range
bool ivlid_data_adc
bool loss_comm_adc
bool temp_high

================================================================================
MSG: rospy_message_converter/RadarActiveFaults
uint64 act_fault_1
uint64 act_fault_2

================================================================================
MSG: rospy_message_converter/RadarSDKActiveFaults
uint64 sdk_fault_1
uint64 sdk_fault_2
uint64 sdk_fault_3
"""
  __slots__ = ['header','source','fusion_tracker','sel_tar','road_boundary','rad_dets','rads_fail']
  _slot_types = ['rospy_message_converter/HeaderInfo','int32','rospy_message_converter/FusionTrack','rospy_message_converter/TargetSelection','rospy_message_converter/RoadBoundary','rospy_message_converter/RadarDetections','rospy_message_converter/RadarFaultStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,source,fusion_tracker,sel_tar,road_boundary,rad_dets,rads_fail

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(View, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = rospy_message_converter.msg.HeaderInfo()
      if self.source is None:
        self.source = 0
      if self.fusion_tracker is None:
        self.fusion_tracker = rospy_message_converter.msg.FusionTrack()
      if self.sel_tar is None:
        self.sel_tar = rospy_message_converter.msg.TargetSelection()
      if self.road_boundary is None:
        self.road_boundary = rospy_message_converter.msg.RoadBoundary()
      if self.rad_dets is None:
        self.rad_dets = rospy_message_converter.msg.RadarDetections()
      if self.rads_fail is None:
        self.rads_fail = rospy_message_converter.msg.RadarFaultStatus()
    else:
      self.header = rospy_message_converter.msg.HeaderInfo()
      self.source = 0
      self.fusion_tracker = rospy_message_converter.msg.FusionTrack()
      self.sel_tar = rospy_message_converter.msg.TargetSelection()
      self.road_boundary = rospy_message_converter.msg.RoadBoundary()
      self.rad_dets = rospy_message_converter.msg.RadarDetections()
      self.rads_fail = rospy_message_converter.msg.RadarFaultStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QI().pack(_x.header.fusion_timestamp, _x.header.fusion_index))
      length = len(self.header.radar_timestamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.header.radar_timestamp))
      length = len(self.header.radar_lookIndex)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.header.radar_lookIndex))
      _x = self.source
      buff.write(_get_struct_i().pack(_x))
      length = len(self.fusion_tracker.fusion_tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.fusion_tracker.fusion_tracks:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.age))
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.long_pos, _x.lat_pos))
        _x = val1.heading
        buff.write(_get_struct_f().pack(_x))
        _v2 = val1.speed
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.long_vel, _x.lat_vel, _x.abs_vel))
        _v3 = val1.accel
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.long_accel, _x.lat_accel))
        _v4 = val1.dimension
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.length, _x.width))
        _x = val1
        buff.write(_get_struct_2If3I().pack(_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf))
        _v5 = val1.mot_status
        _x = _v5
        buff.write(_get_struct_6B().pack(_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing))
        _v6 = val1.var
        _x = _v6
        buff.write(_get_struct_6f().pack(_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc))
        _v7 = val1.det_height
        _x = _v7
        buff.write(_get_struct_4fI().pack(_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det))
      length = len(self.sel_tar.acc_tar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sel_tar.acc_tar))
      _x = self
      buff.write(_get_struct_2I4fI6fI6fI6fI2f().pack(_x.sel_tar.aeb_tar, _x.sel_tar.aeb_conf, _x.road_boundary.left_guard.left_front_c0, _x.road_boundary.left_guard.left_front_c1, _x.road_boundary.left_guard.left_front_heading, _x.road_boundary.left_guard.left_front_offset, _x.road_boundary.left_guard.barrier_conf, _x.road_boundary.left_guard.left_front_start_distance, _x.road_boundary.left_guard.left_front_end_distance, _x.road_boundary.right_guard.right_front_c0, _x.road_boundary.right_guard.right_front_c1, _x.road_boundary.right_guard.right_front_heading, _x.road_boundary.right_guard.right_front_offset, _x.road_boundary.right_guard.barrier_conf, _x.road_boundary.right_guard.right_front_start_distance, _x.road_boundary.right_guard.right_front_end_distance, _x.road_boundary.left_barr.left_back_c0, _x.road_boundary.left_barr.left_back_c1, _x.road_boundary.left_barr.left_back_c2, _x.road_boundary.left_barr.left_back_c3, _x.road_boundary.left_barr.barrier_conf, _x.road_boundary.left_barr.left_back_start_distance, _x.road_boundary.left_barr.left_back_end_distance, _x.road_boundary.right_barr.right_back_c0, _x.road_boundary.right_barr.right_back_c1, _x.road_boundary.right_barr.right_back_c2, _x.road_boundary.right_barr.right_back_c3, _x.road_boundary.right_barr.barrier_conf, _x.road_boundary.right_barr.right_back_start_distance, _x.road_boundary.right_barr.right_back_end_distance))
      length = len(self.rad_dets.rad_det_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.rad_dets.rad_det_time))
      _x = self.rad_dets.det_fus_idx
      buff.write(_get_struct_I().pack(_x))
      length = len(self.rad_dets.rad_pt)
      buff.write(_struct_I.pack(length))
      for val1 in self.rad_dets.rad_pt:
        _x = val1
        buff.write(_get_struct_I4df().pack(_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs))
      _x = self
      buff.write(_get_struct_45B14Q().pack(_x.rads_fail.rad_fc_fail.blok_det, _x.rads_fail.rad_fc_fail.volt_low, _x.rads_fail.rad_fc_fail.volt_high, _x.rads_fail.rad_fc_fail.align_incomp, _x.rads_fail.rad_fc_fail.inter_fault, _x.rads_fail.rad_fc_fail.align_out_range, _x.rads_fail.rad_fc_fail.ivlid_data_adc, _x.rads_fail.rad_fc_fail.loss_comm_adc, _x.rads_fail.rad_fc_fail.temp_high, _x.rads_fail.rad_fl_fail.blok_det, _x.rads_fail.rad_fl_fail.volt_low, _x.rads_fail.rad_fl_fail.volt_high, _x.rads_fail.rad_fl_fail.align_incomp, _x.rads_fail.rad_fl_fail.inter_fault, _x.rads_fail.rad_fl_fail.align_out_range, _x.rads_fail.rad_fl_fail.ivlid_data_adc, _x.rads_fail.rad_fl_fail.loss_comm_adc, _x.rads_fail.rad_fl_fail.temp_high, _x.rads_fail.rad_fr_fail.blok_det, _x.rads_fail.rad_fr_fail.volt_low, _x.rads_fail.rad_fr_fail.volt_high, _x.rads_fail.rad_fr_fail.align_incomp, _x.rads_fail.rad_fr_fail.inter_fault, _x.rads_fail.rad_fr_fail.align_out_range, _x.rads_fail.rad_fr_fail.ivlid_data_adc, _x.rads_fail.rad_fr_fail.loss_comm_adc, _x.rads_fail.rad_fr_fail.temp_high, _x.rads_fail.rad_rl_fail.blok_det, _x.rads_fail.rad_rl_fail.volt_low, _x.rads_fail.rad_rl_fail.volt_high, _x.rads_fail.rad_rl_fail.align_incomp, _x.rads_fail.rad_rl_fail.inter_fault, _x.rads_fail.rad_rl_fail.align_out_range, _x.rads_fail.rad_rl_fail.ivlid_data_adc, _x.rads_fail.rad_rl_fail.loss_comm_adc, _x.rads_fail.rad_rl_fail.temp_high, _x.rads_fail.rad_rr_fail.blok_det, _x.rads_fail.rad_rr_fail.volt_low, _x.rads_fail.rad_rr_fail.volt_high, _x.rads_fail.rad_rr_fail.align_incomp, _x.rads_fail.rad_rr_fail.inter_fault, _x.rads_fail.rad_rr_fail.align_out_range, _x.rads_fail.rad_rr_fail.ivlid_data_adc, _x.rads_fail.rad_rr_fail.loss_comm_adc, _x.rads_fail.rad_rr_fail.temp_high, _x.rads_fail.rad_fc_act_fault.act_fault_1, _x.rads_fail.rad_fc_act_fault.act_fault_2, _x.rads_fail.rad_fl_act_fault.act_fault_1, _x.rads_fail.rad_fl_act_fault.act_fault_2, _x.rads_fail.rad_fr_act_fault.act_fault_1, _x.rads_fail.rad_fr_act_fault.act_fault_2, _x.rads_fail.rad_rl_act_fault.act_fault_1, _x.rads_fail.rad_rl_act_fault.act_fault_2, _x.rads_fail.rad_rr_act_fault.act_fault_1, _x.rads_fail.rad_rr_act_fault.act_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_1, _x.rads_fail.rad_sdk_act_fault.sdk_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_3, _x.rads_fail.publish_ptp_ts))
      _x = self.rads_fail.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.rads_fail.counter, _x.rads_fail.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = rospy_message_converter.msg.HeaderInfo()
      if self.fusion_tracker is None:
        self.fusion_tracker = rospy_message_converter.msg.FusionTrack()
      if self.sel_tar is None:
        self.sel_tar = rospy_message_converter.msg.TargetSelection()
      if self.road_boundary is None:
        self.road_boundary = rospy_message_converter.msg.RoadBoundary()
      if self.rad_dets is None:
        self.rad_dets = rospy_message_converter.msg.RadarDetections()
      if self.rads_fail is None:
        self.rads_fail = rospy_message_converter.msg.RadarFaultStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.fusion_timestamp, _x.header.fusion_index,) = _get_struct_QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.header.radar_timestamp = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.header.radar_lookIndex = s.unpack(str[start:end])
      start = end
      end += 4
      (self.source,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fusion_tracker.fusion_tracks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FusionTracks()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.age,) = _get_struct_2I().unpack(str[start:end])
        _v8 = val1.pos
        _x = _v8
        start = end
        end += 16
        (_x.long_pos, _x.lat_pos,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (val1.heading,) = _get_struct_f().unpack(str[start:end])
        _v9 = val1.speed
        _x = _v9
        start = end
        end += 24
        (_x.long_vel, _x.lat_vel, _x.abs_vel,) = _get_struct_3d().unpack(str[start:end])
        _v10 = val1.accel
        _x = _v10
        start = end
        end += 16
        (_x.long_accel, _x.lat_accel,) = _get_struct_2d().unpack(str[start:end])
        _v11 = val1.dimension
        _x = _v11
        start = end
        end += 8
        (_x.length, _x.width,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf,) = _get_struct_2If3I().unpack(str[start:end])
        _v12 = val1.mot_status
        _x = _v12
        start = end
        end += 6
        (_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing,) = _get_struct_6B().unpack(str[start:end])
        _v12.f_stationary = bool(_v12.f_stationary)
        _v12.f_moving = bool(_v12.f_moving)
        _v12.f_moveable = bool(_v12.f_moveable)
        _v12.f_oncoming = bool(_v12.f_oncoming)
        _v12.f_receding = bool(_v12.f_receding)
        _v12.f_crossing = bool(_v12.f_crossing)
        _v13 = val1.var
        _x = _v13
        start = end
        end += 24
        (_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc,) = _get_struct_6f().unpack(str[start:end])
        _v14 = val1.det_height
        _x = _v14
        start = end
        end += 20
        (_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det,) = _get_struct_4fI().unpack(str[start:end])
        self.fusion_tracker.fusion_tracks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sel_tar.acc_tar = s.unpack(str[start:end])
      _x = self
      start = end
      end += 120
      (_x.sel_tar.aeb_tar, _x.sel_tar.aeb_conf, _x.road_boundary.left_guard.left_front_c0, _x.road_boundary.left_guard.left_front_c1, _x.road_boundary.left_guard.left_front_heading, _x.road_boundary.left_guard.left_front_offset, _x.road_boundary.left_guard.barrier_conf, _x.road_boundary.left_guard.left_front_start_distance, _x.road_boundary.left_guard.left_front_end_distance, _x.road_boundary.right_guard.right_front_c0, _x.road_boundary.right_guard.right_front_c1, _x.road_boundary.right_guard.right_front_heading, _x.road_boundary.right_guard.right_front_offset, _x.road_boundary.right_guard.barrier_conf, _x.road_boundary.right_guard.right_front_start_distance, _x.road_boundary.right_guard.right_front_end_distance, _x.road_boundary.left_barr.left_back_c0, _x.road_boundary.left_barr.left_back_c1, _x.road_boundary.left_barr.left_back_c2, _x.road_boundary.left_barr.left_back_c3, _x.road_boundary.left_barr.barrier_conf, _x.road_boundary.left_barr.left_back_start_distance, _x.road_boundary.left_barr.left_back_end_distance, _x.road_boundary.right_barr.right_back_c0, _x.road_boundary.right_barr.right_back_c1, _x.road_boundary.right_barr.right_back_c2, _x.road_boundary.right_barr.right_back_c3, _x.road_boundary.right_barr.barrier_conf, _x.road_boundary.right_barr.right_back_start_distance, _x.road_boundary.right_barr.right_back_end_distance,) = _get_struct_2I4fI6fI6fI6fI2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rad_dets.rad_det_time = s.unpack(str[start:end])
      start = end
      end += 4
      (self.rad_dets.det_fus_idx,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rad_dets.rad_pt = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarPoints()
        _x = val1
        start = end
        end += 40
        (_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs,) = _get_struct_I4df().unpack(str[start:end])
        self.rad_dets.rad_pt.append(val1)
      _x = self
      start = end
      end += 157
      (_x.rads_fail.rad_fc_fail.blok_det, _x.rads_fail.rad_fc_fail.volt_low, _x.rads_fail.rad_fc_fail.volt_high, _x.rads_fail.rad_fc_fail.align_incomp, _x.rads_fail.rad_fc_fail.inter_fault, _x.rads_fail.rad_fc_fail.align_out_range, _x.rads_fail.rad_fc_fail.ivlid_data_adc, _x.rads_fail.rad_fc_fail.loss_comm_adc, _x.rads_fail.rad_fc_fail.temp_high, _x.rads_fail.rad_fl_fail.blok_det, _x.rads_fail.rad_fl_fail.volt_low, _x.rads_fail.rad_fl_fail.volt_high, _x.rads_fail.rad_fl_fail.align_incomp, _x.rads_fail.rad_fl_fail.inter_fault, _x.rads_fail.rad_fl_fail.align_out_range, _x.rads_fail.rad_fl_fail.ivlid_data_adc, _x.rads_fail.rad_fl_fail.loss_comm_adc, _x.rads_fail.rad_fl_fail.temp_high, _x.rads_fail.rad_fr_fail.blok_det, _x.rads_fail.rad_fr_fail.volt_low, _x.rads_fail.rad_fr_fail.volt_high, _x.rads_fail.rad_fr_fail.align_incomp, _x.rads_fail.rad_fr_fail.inter_fault, _x.rads_fail.rad_fr_fail.align_out_range, _x.rads_fail.rad_fr_fail.ivlid_data_adc, _x.rads_fail.rad_fr_fail.loss_comm_adc, _x.rads_fail.rad_fr_fail.temp_high, _x.rads_fail.rad_rl_fail.blok_det, _x.rads_fail.rad_rl_fail.volt_low, _x.rads_fail.rad_rl_fail.volt_high, _x.rads_fail.rad_rl_fail.align_incomp, _x.rads_fail.rad_rl_fail.inter_fault, _x.rads_fail.rad_rl_fail.align_out_range, _x.rads_fail.rad_rl_fail.ivlid_data_adc, _x.rads_fail.rad_rl_fail.loss_comm_adc, _x.rads_fail.rad_rl_fail.temp_high, _x.rads_fail.rad_rr_fail.blok_det, _x.rads_fail.rad_rr_fail.volt_low, _x.rads_fail.rad_rr_fail.volt_high, _x.rads_fail.rad_rr_fail.align_incomp, _x.rads_fail.rad_rr_fail.inter_fault, _x.rads_fail.rad_rr_fail.align_out_range, _x.rads_fail.rad_rr_fail.ivlid_data_adc, _x.rads_fail.rad_rr_fail.loss_comm_adc, _x.rads_fail.rad_rr_fail.temp_high, _x.rads_fail.rad_fc_act_fault.act_fault_1, _x.rads_fail.rad_fc_act_fault.act_fault_2, _x.rads_fail.rad_fl_act_fault.act_fault_1, _x.rads_fail.rad_fl_act_fault.act_fault_2, _x.rads_fail.rad_fr_act_fault.act_fault_1, _x.rads_fail.rad_fr_act_fault.act_fault_2, _x.rads_fail.rad_rl_act_fault.act_fault_1, _x.rads_fail.rad_rl_act_fault.act_fault_2, _x.rads_fail.rad_rr_act_fault.act_fault_1, _x.rads_fail.rad_rr_act_fault.act_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_1, _x.rads_fail.rad_sdk_act_fault.sdk_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_3, _x.rads_fail.publish_ptp_ts,) = _get_struct_45B14Q().unpack(str[start:end])
      self.rads_fail.rad_fc_fail.blok_det = bool(self.rads_fail.rad_fc_fail.blok_det)
      self.rads_fail.rad_fc_fail.volt_low = bool(self.rads_fail.rad_fc_fail.volt_low)
      self.rads_fail.rad_fc_fail.volt_high = bool(self.rads_fail.rad_fc_fail.volt_high)
      self.rads_fail.rad_fc_fail.align_incomp = bool(self.rads_fail.rad_fc_fail.align_incomp)
      self.rads_fail.rad_fc_fail.inter_fault = bool(self.rads_fail.rad_fc_fail.inter_fault)
      self.rads_fail.rad_fc_fail.align_out_range = bool(self.rads_fail.rad_fc_fail.align_out_range)
      self.rads_fail.rad_fc_fail.ivlid_data_adc = bool(self.rads_fail.rad_fc_fail.ivlid_data_adc)
      self.rads_fail.rad_fc_fail.loss_comm_adc = bool(self.rads_fail.rad_fc_fail.loss_comm_adc)
      self.rads_fail.rad_fc_fail.temp_high = bool(self.rads_fail.rad_fc_fail.temp_high)
      self.rads_fail.rad_fl_fail.blok_det = bool(self.rads_fail.rad_fl_fail.blok_det)
      self.rads_fail.rad_fl_fail.volt_low = bool(self.rads_fail.rad_fl_fail.volt_low)
      self.rads_fail.rad_fl_fail.volt_high = bool(self.rads_fail.rad_fl_fail.volt_high)
      self.rads_fail.rad_fl_fail.align_incomp = bool(self.rads_fail.rad_fl_fail.align_incomp)
      self.rads_fail.rad_fl_fail.inter_fault = bool(self.rads_fail.rad_fl_fail.inter_fault)
      self.rads_fail.rad_fl_fail.align_out_range = bool(self.rads_fail.rad_fl_fail.align_out_range)
      self.rads_fail.rad_fl_fail.ivlid_data_adc = bool(self.rads_fail.rad_fl_fail.ivlid_data_adc)
      self.rads_fail.rad_fl_fail.loss_comm_adc = bool(self.rads_fail.rad_fl_fail.loss_comm_adc)
      self.rads_fail.rad_fl_fail.temp_high = bool(self.rads_fail.rad_fl_fail.temp_high)
      self.rads_fail.rad_fr_fail.blok_det = bool(self.rads_fail.rad_fr_fail.blok_det)
      self.rads_fail.rad_fr_fail.volt_low = bool(self.rads_fail.rad_fr_fail.volt_low)
      self.rads_fail.rad_fr_fail.volt_high = bool(self.rads_fail.rad_fr_fail.volt_high)
      self.rads_fail.rad_fr_fail.align_incomp = bool(self.rads_fail.rad_fr_fail.align_incomp)
      self.rads_fail.rad_fr_fail.inter_fault = bool(self.rads_fail.rad_fr_fail.inter_fault)
      self.rads_fail.rad_fr_fail.align_out_range = bool(self.rads_fail.rad_fr_fail.align_out_range)
      self.rads_fail.rad_fr_fail.ivlid_data_adc = bool(self.rads_fail.rad_fr_fail.ivlid_data_adc)
      self.rads_fail.rad_fr_fail.loss_comm_adc = bool(self.rads_fail.rad_fr_fail.loss_comm_adc)
      self.rads_fail.rad_fr_fail.temp_high = bool(self.rads_fail.rad_fr_fail.temp_high)
      self.rads_fail.rad_rl_fail.blok_det = bool(self.rads_fail.rad_rl_fail.blok_det)
      self.rads_fail.rad_rl_fail.volt_low = bool(self.rads_fail.rad_rl_fail.volt_low)
      self.rads_fail.rad_rl_fail.volt_high = bool(self.rads_fail.rad_rl_fail.volt_high)
      self.rads_fail.rad_rl_fail.align_incomp = bool(self.rads_fail.rad_rl_fail.align_incomp)
      self.rads_fail.rad_rl_fail.inter_fault = bool(self.rads_fail.rad_rl_fail.inter_fault)
      self.rads_fail.rad_rl_fail.align_out_range = bool(self.rads_fail.rad_rl_fail.align_out_range)
      self.rads_fail.rad_rl_fail.ivlid_data_adc = bool(self.rads_fail.rad_rl_fail.ivlid_data_adc)
      self.rads_fail.rad_rl_fail.loss_comm_adc = bool(self.rads_fail.rad_rl_fail.loss_comm_adc)
      self.rads_fail.rad_rl_fail.temp_high = bool(self.rads_fail.rad_rl_fail.temp_high)
      self.rads_fail.rad_rr_fail.blok_det = bool(self.rads_fail.rad_rr_fail.blok_det)
      self.rads_fail.rad_rr_fail.volt_low = bool(self.rads_fail.rad_rr_fail.volt_low)
      self.rads_fail.rad_rr_fail.volt_high = bool(self.rads_fail.rad_rr_fail.volt_high)
      self.rads_fail.rad_rr_fail.align_incomp = bool(self.rads_fail.rad_rr_fail.align_incomp)
      self.rads_fail.rad_rr_fail.inter_fault = bool(self.rads_fail.rad_rr_fail.inter_fault)
      self.rads_fail.rad_rr_fail.align_out_range = bool(self.rads_fail.rad_rr_fail.align_out_range)
      self.rads_fail.rad_rr_fail.ivlid_data_adc = bool(self.rads_fail.rad_rr_fail.ivlid_data_adc)
      self.rads_fail.rad_rr_fail.loss_comm_adc = bool(self.rads_fail.rad_rr_fail.loss_comm_adc)
      self.rads_fail.rad_rr_fail.temp_high = bool(self.rads_fail.rad_rr_fail.temp_high)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rads_fail.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rads_fail.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.rads_fail.counter, _x.rads_fail.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QI().pack(_x.header.fusion_timestamp, _x.header.fusion_index))
      length = len(self.header.radar_timestamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.header.radar_timestamp.tostring())
      length = len(self.header.radar_lookIndex)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.header.radar_lookIndex.tostring())
      _x = self.source
      buff.write(_get_struct_i().pack(_x))
      length = len(self.fusion_tracker.fusion_tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.fusion_tracker.fusion_tracks:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.age))
        _v15 = val1.pos
        _x = _v15
        buff.write(_get_struct_2d().pack(_x.long_pos, _x.lat_pos))
        _x = val1.heading
        buff.write(_get_struct_f().pack(_x))
        _v16 = val1.speed
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.long_vel, _x.lat_vel, _x.abs_vel))
        _v17 = val1.accel
        _x = _v17
        buff.write(_get_struct_2d().pack(_x.long_accel, _x.lat_accel))
        _v18 = val1.dimension
        _x = _v18
        buff.write(_get_struct_2f().pack(_x.length, _x.width))
        _x = val1
        buff.write(_get_struct_2If3I().pack(_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf))
        _v19 = val1.mot_status
        _x = _v19
        buff.write(_get_struct_6B().pack(_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing))
        _v20 = val1.var
        _x = _v20
        buff.write(_get_struct_6f().pack(_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc))
        _v21 = val1.det_height
        _x = _v21
        buff.write(_get_struct_4fI().pack(_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det))
      length = len(self.sel_tar.acc_tar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sel_tar.acc_tar.tostring())
      _x = self
      buff.write(_get_struct_2I4fI6fI6fI6fI2f().pack(_x.sel_tar.aeb_tar, _x.sel_tar.aeb_conf, _x.road_boundary.left_guard.left_front_c0, _x.road_boundary.left_guard.left_front_c1, _x.road_boundary.left_guard.left_front_heading, _x.road_boundary.left_guard.left_front_offset, _x.road_boundary.left_guard.barrier_conf, _x.road_boundary.left_guard.left_front_start_distance, _x.road_boundary.left_guard.left_front_end_distance, _x.road_boundary.right_guard.right_front_c0, _x.road_boundary.right_guard.right_front_c1, _x.road_boundary.right_guard.right_front_heading, _x.road_boundary.right_guard.right_front_offset, _x.road_boundary.right_guard.barrier_conf, _x.road_boundary.right_guard.right_front_start_distance, _x.road_boundary.right_guard.right_front_end_distance, _x.road_boundary.left_barr.left_back_c0, _x.road_boundary.left_barr.left_back_c1, _x.road_boundary.left_barr.left_back_c2, _x.road_boundary.left_barr.left_back_c3, _x.road_boundary.left_barr.barrier_conf, _x.road_boundary.left_barr.left_back_start_distance, _x.road_boundary.left_barr.left_back_end_distance, _x.road_boundary.right_barr.right_back_c0, _x.road_boundary.right_barr.right_back_c1, _x.road_boundary.right_barr.right_back_c2, _x.road_boundary.right_barr.right_back_c3, _x.road_boundary.right_barr.barrier_conf, _x.road_boundary.right_barr.right_back_start_distance, _x.road_boundary.right_barr.right_back_end_distance))
      length = len(self.rad_dets.rad_det_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.rad_dets.rad_det_time.tostring())
      _x = self.rad_dets.det_fus_idx
      buff.write(_get_struct_I().pack(_x))
      length = len(self.rad_dets.rad_pt)
      buff.write(_struct_I.pack(length))
      for val1 in self.rad_dets.rad_pt:
        _x = val1
        buff.write(_get_struct_I4df().pack(_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs))
      _x = self
      buff.write(_get_struct_45B14Q().pack(_x.rads_fail.rad_fc_fail.blok_det, _x.rads_fail.rad_fc_fail.volt_low, _x.rads_fail.rad_fc_fail.volt_high, _x.rads_fail.rad_fc_fail.align_incomp, _x.rads_fail.rad_fc_fail.inter_fault, _x.rads_fail.rad_fc_fail.align_out_range, _x.rads_fail.rad_fc_fail.ivlid_data_adc, _x.rads_fail.rad_fc_fail.loss_comm_adc, _x.rads_fail.rad_fc_fail.temp_high, _x.rads_fail.rad_fl_fail.blok_det, _x.rads_fail.rad_fl_fail.volt_low, _x.rads_fail.rad_fl_fail.volt_high, _x.rads_fail.rad_fl_fail.align_incomp, _x.rads_fail.rad_fl_fail.inter_fault, _x.rads_fail.rad_fl_fail.align_out_range, _x.rads_fail.rad_fl_fail.ivlid_data_adc, _x.rads_fail.rad_fl_fail.loss_comm_adc, _x.rads_fail.rad_fl_fail.temp_high, _x.rads_fail.rad_fr_fail.blok_det, _x.rads_fail.rad_fr_fail.volt_low, _x.rads_fail.rad_fr_fail.volt_high, _x.rads_fail.rad_fr_fail.align_incomp, _x.rads_fail.rad_fr_fail.inter_fault, _x.rads_fail.rad_fr_fail.align_out_range, _x.rads_fail.rad_fr_fail.ivlid_data_adc, _x.rads_fail.rad_fr_fail.loss_comm_adc, _x.rads_fail.rad_fr_fail.temp_high, _x.rads_fail.rad_rl_fail.blok_det, _x.rads_fail.rad_rl_fail.volt_low, _x.rads_fail.rad_rl_fail.volt_high, _x.rads_fail.rad_rl_fail.align_incomp, _x.rads_fail.rad_rl_fail.inter_fault, _x.rads_fail.rad_rl_fail.align_out_range, _x.rads_fail.rad_rl_fail.ivlid_data_adc, _x.rads_fail.rad_rl_fail.loss_comm_adc, _x.rads_fail.rad_rl_fail.temp_high, _x.rads_fail.rad_rr_fail.blok_det, _x.rads_fail.rad_rr_fail.volt_low, _x.rads_fail.rad_rr_fail.volt_high, _x.rads_fail.rad_rr_fail.align_incomp, _x.rads_fail.rad_rr_fail.inter_fault, _x.rads_fail.rad_rr_fail.align_out_range, _x.rads_fail.rad_rr_fail.ivlid_data_adc, _x.rads_fail.rad_rr_fail.loss_comm_adc, _x.rads_fail.rad_rr_fail.temp_high, _x.rads_fail.rad_fc_act_fault.act_fault_1, _x.rads_fail.rad_fc_act_fault.act_fault_2, _x.rads_fail.rad_fl_act_fault.act_fault_1, _x.rads_fail.rad_fl_act_fault.act_fault_2, _x.rads_fail.rad_fr_act_fault.act_fault_1, _x.rads_fail.rad_fr_act_fault.act_fault_2, _x.rads_fail.rad_rl_act_fault.act_fault_1, _x.rads_fail.rad_rl_act_fault.act_fault_2, _x.rads_fail.rad_rr_act_fault.act_fault_1, _x.rads_fail.rad_rr_act_fault.act_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_1, _x.rads_fail.rad_sdk_act_fault.sdk_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_3, _x.rads_fail.publish_ptp_ts))
      _x = self.rads_fail.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.rads_fail.counter, _x.rads_fail.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = rospy_message_converter.msg.HeaderInfo()
      if self.fusion_tracker is None:
        self.fusion_tracker = rospy_message_converter.msg.FusionTrack()
      if self.sel_tar is None:
        self.sel_tar = rospy_message_converter.msg.TargetSelection()
      if self.road_boundary is None:
        self.road_boundary = rospy_message_converter.msg.RoadBoundary()
      if self.rad_dets is None:
        self.rad_dets = rospy_message_converter.msg.RadarDetections()
      if self.rads_fail is None:
        self.rads_fail = rospy_message_converter.msg.RadarFaultStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.fusion_timestamp, _x.header.fusion_index,) = _get_struct_QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.header.radar_timestamp = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.header.radar_lookIndex = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (self.source,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fusion_tracker.fusion_tracks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FusionTracks()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.age,) = _get_struct_2I().unpack(str[start:end])
        _v22 = val1.pos
        _x = _v22
        start = end
        end += 16
        (_x.long_pos, _x.lat_pos,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (val1.heading,) = _get_struct_f().unpack(str[start:end])
        _v23 = val1.speed
        _x = _v23
        start = end
        end += 24
        (_x.long_vel, _x.lat_vel, _x.abs_vel,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.accel
        _x = _v24
        start = end
        end += 16
        (_x.long_accel, _x.lat_accel,) = _get_struct_2d().unpack(str[start:end])
        _v25 = val1.dimension
        _x = _v25
        start = end
        end += 8
        (_x.length, _x.width,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.meas_status, _x.class_, _x.class_prob, _x.fus_source, _x.rad_fusSrc, _x.conf,) = _get_struct_2If3I().unpack(str[start:end])
        _v26 = val1.mot_status
        _x = _v26
        start = end
        end += 6
        (_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing,) = _get_struct_6B().unpack(str[start:end])
        _v26.f_stationary = bool(_v26.f_stationary)
        _v26.f_moving = bool(_v26.f_moving)
        _v26.f_moveable = bool(_v26.f_moveable)
        _v26.f_oncoming = bool(_v26.f_oncoming)
        _v26.f_receding = bool(_v26.f_receding)
        _v26.f_crossing = bool(_v26.f_crossing)
        _v27 = val1.var
        _x = _v27
        start = end
        end += 24
        (_x.var_longPos, _x.var_latPos, _x.var_longVel, _x.var_latVel, _x.var_longAcc, _x.var_latAcc,) = _get_struct_6f().unpack(str[start:end])
        _v28 = val1.det_height
        _x = _v28
        start = end
        end += 20
        (_x.det_max_height, _x.det_min_height, _x.det_avg_height, _x.det_height_std, _x.num_det,) = _get_struct_4fI().unpack(str[start:end])
        self.fusion_tracker.fusion_tracks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sel_tar.acc_tar = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 120
      (_x.sel_tar.aeb_tar, _x.sel_tar.aeb_conf, _x.road_boundary.left_guard.left_front_c0, _x.road_boundary.left_guard.left_front_c1, _x.road_boundary.left_guard.left_front_heading, _x.road_boundary.left_guard.left_front_offset, _x.road_boundary.left_guard.barrier_conf, _x.road_boundary.left_guard.left_front_start_distance, _x.road_boundary.left_guard.left_front_end_distance, _x.road_boundary.right_guard.right_front_c0, _x.road_boundary.right_guard.right_front_c1, _x.road_boundary.right_guard.right_front_heading, _x.road_boundary.right_guard.right_front_offset, _x.road_boundary.right_guard.barrier_conf, _x.road_boundary.right_guard.right_front_start_distance, _x.road_boundary.right_guard.right_front_end_distance, _x.road_boundary.left_barr.left_back_c0, _x.road_boundary.left_barr.left_back_c1, _x.road_boundary.left_barr.left_back_c2, _x.road_boundary.left_barr.left_back_c3, _x.road_boundary.left_barr.barrier_conf, _x.road_boundary.left_barr.left_back_start_distance, _x.road_boundary.left_barr.left_back_end_distance, _x.road_boundary.right_barr.right_back_c0, _x.road_boundary.right_barr.right_back_c1, _x.road_boundary.right_barr.right_back_c2, _x.road_boundary.right_barr.right_back_c3, _x.road_boundary.right_barr.barrier_conf, _x.road_boundary.right_barr.right_back_start_distance, _x.road_boundary.right_barr.right_back_end_distance,) = _get_struct_2I4fI6fI6fI6fI2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rad_dets.rad_det_time = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (self.rad_dets.det_fus_idx,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rad_dets.rad_pt = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarPoints()
        _x = val1
        start = end
        end += 40
        (_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs,) = _get_struct_I4df().unpack(str[start:end])
        self.rad_dets.rad_pt.append(val1)
      _x = self
      start = end
      end += 157
      (_x.rads_fail.rad_fc_fail.blok_det, _x.rads_fail.rad_fc_fail.volt_low, _x.rads_fail.rad_fc_fail.volt_high, _x.rads_fail.rad_fc_fail.align_incomp, _x.rads_fail.rad_fc_fail.inter_fault, _x.rads_fail.rad_fc_fail.align_out_range, _x.rads_fail.rad_fc_fail.ivlid_data_adc, _x.rads_fail.rad_fc_fail.loss_comm_adc, _x.rads_fail.rad_fc_fail.temp_high, _x.rads_fail.rad_fl_fail.blok_det, _x.rads_fail.rad_fl_fail.volt_low, _x.rads_fail.rad_fl_fail.volt_high, _x.rads_fail.rad_fl_fail.align_incomp, _x.rads_fail.rad_fl_fail.inter_fault, _x.rads_fail.rad_fl_fail.align_out_range, _x.rads_fail.rad_fl_fail.ivlid_data_adc, _x.rads_fail.rad_fl_fail.loss_comm_adc, _x.rads_fail.rad_fl_fail.temp_high, _x.rads_fail.rad_fr_fail.blok_det, _x.rads_fail.rad_fr_fail.volt_low, _x.rads_fail.rad_fr_fail.volt_high, _x.rads_fail.rad_fr_fail.align_incomp, _x.rads_fail.rad_fr_fail.inter_fault, _x.rads_fail.rad_fr_fail.align_out_range, _x.rads_fail.rad_fr_fail.ivlid_data_adc, _x.rads_fail.rad_fr_fail.loss_comm_adc, _x.rads_fail.rad_fr_fail.temp_high, _x.rads_fail.rad_rl_fail.blok_det, _x.rads_fail.rad_rl_fail.volt_low, _x.rads_fail.rad_rl_fail.volt_high, _x.rads_fail.rad_rl_fail.align_incomp, _x.rads_fail.rad_rl_fail.inter_fault, _x.rads_fail.rad_rl_fail.align_out_range, _x.rads_fail.rad_rl_fail.ivlid_data_adc, _x.rads_fail.rad_rl_fail.loss_comm_adc, _x.rads_fail.rad_rl_fail.temp_high, _x.rads_fail.rad_rr_fail.blok_det, _x.rads_fail.rad_rr_fail.volt_low, _x.rads_fail.rad_rr_fail.volt_high, _x.rads_fail.rad_rr_fail.align_incomp, _x.rads_fail.rad_rr_fail.inter_fault, _x.rads_fail.rad_rr_fail.align_out_range, _x.rads_fail.rad_rr_fail.ivlid_data_adc, _x.rads_fail.rad_rr_fail.loss_comm_adc, _x.rads_fail.rad_rr_fail.temp_high, _x.rads_fail.rad_fc_act_fault.act_fault_1, _x.rads_fail.rad_fc_act_fault.act_fault_2, _x.rads_fail.rad_fl_act_fault.act_fault_1, _x.rads_fail.rad_fl_act_fault.act_fault_2, _x.rads_fail.rad_fr_act_fault.act_fault_1, _x.rads_fail.rad_fr_act_fault.act_fault_2, _x.rads_fail.rad_rl_act_fault.act_fault_1, _x.rads_fail.rad_rl_act_fault.act_fault_2, _x.rads_fail.rad_rr_act_fault.act_fault_1, _x.rads_fail.rad_rr_act_fault.act_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_1, _x.rads_fail.rad_sdk_act_fault.sdk_fault_2, _x.rads_fail.rad_sdk_act_fault.sdk_fault_3, _x.rads_fail.publish_ptp_ts,) = _get_struct_45B14Q().unpack(str[start:end])
      self.rads_fail.rad_fc_fail.blok_det = bool(self.rads_fail.rad_fc_fail.blok_det)
      self.rads_fail.rad_fc_fail.volt_low = bool(self.rads_fail.rad_fc_fail.volt_low)
      self.rads_fail.rad_fc_fail.volt_high = bool(self.rads_fail.rad_fc_fail.volt_high)
      self.rads_fail.rad_fc_fail.align_incomp = bool(self.rads_fail.rad_fc_fail.align_incomp)
      self.rads_fail.rad_fc_fail.inter_fault = bool(self.rads_fail.rad_fc_fail.inter_fault)
      self.rads_fail.rad_fc_fail.align_out_range = bool(self.rads_fail.rad_fc_fail.align_out_range)
      self.rads_fail.rad_fc_fail.ivlid_data_adc = bool(self.rads_fail.rad_fc_fail.ivlid_data_adc)
      self.rads_fail.rad_fc_fail.loss_comm_adc = bool(self.rads_fail.rad_fc_fail.loss_comm_adc)
      self.rads_fail.rad_fc_fail.temp_high = bool(self.rads_fail.rad_fc_fail.temp_high)
      self.rads_fail.rad_fl_fail.blok_det = bool(self.rads_fail.rad_fl_fail.blok_det)
      self.rads_fail.rad_fl_fail.volt_low = bool(self.rads_fail.rad_fl_fail.volt_low)
      self.rads_fail.rad_fl_fail.volt_high = bool(self.rads_fail.rad_fl_fail.volt_high)
      self.rads_fail.rad_fl_fail.align_incomp = bool(self.rads_fail.rad_fl_fail.align_incomp)
      self.rads_fail.rad_fl_fail.inter_fault = bool(self.rads_fail.rad_fl_fail.inter_fault)
      self.rads_fail.rad_fl_fail.align_out_range = bool(self.rads_fail.rad_fl_fail.align_out_range)
      self.rads_fail.rad_fl_fail.ivlid_data_adc = bool(self.rads_fail.rad_fl_fail.ivlid_data_adc)
      self.rads_fail.rad_fl_fail.loss_comm_adc = bool(self.rads_fail.rad_fl_fail.loss_comm_adc)
      self.rads_fail.rad_fl_fail.temp_high = bool(self.rads_fail.rad_fl_fail.temp_high)
      self.rads_fail.rad_fr_fail.blok_det = bool(self.rads_fail.rad_fr_fail.blok_det)
      self.rads_fail.rad_fr_fail.volt_low = bool(self.rads_fail.rad_fr_fail.volt_low)
      self.rads_fail.rad_fr_fail.volt_high = bool(self.rads_fail.rad_fr_fail.volt_high)
      self.rads_fail.rad_fr_fail.align_incomp = bool(self.rads_fail.rad_fr_fail.align_incomp)
      self.rads_fail.rad_fr_fail.inter_fault = bool(self.rads_fail.rad_fr_fail.inter_fault)
      self.rads_fail.rad_fr_fail.align_out_range = bool(self.rads_fail.rad_fr_fail.align_out_range)
      self.rads_fail.rad_fr_fail.ivlid_data_adc = bool(self.rads_fail.rad_fr_fail.ivlid_data_adc)
      self.rads_fail.rad_fr_fail.loss_comm_adc = bool(self.rads_fail.rad_fr_fail.loss_comm_adc)
      self.rads_fail.rad_fr_fail.temp_high = bool(self.rads_fail.rad_fr_fail.temp_high)
      self.rads_fail.rad_rl_fail.blok_det = bool(self.rads_fail.rad_rl_fail.blok_det)
      self.rads_fail.rad_rl_fail.volt_low = bool(self.rads_fail.rad_rl_fail.volt_low)
      self.rads_fail.rad_rl_fail.volt_high = bool(self.rads_fail.rad_rl_fail.volt_high)
      self.rads_fail.rad_rl_fail.align_incomp = bool(self.rads_fail.rad_rl_fail.align_incomp)
      self.rads_fail.rad_rl_fail.inter_fault = bool(self.rads_fail.rad_rl_fail.inter_fault)
      self.rads_fail.rad_rl_fail.align_out_range = bool(self.rads_fail.rad_rl_fail.align_out_range)
      self.rads_fail.rad_rl_fail.ivlid_data_adc = bool(self.rads_fail.rad_rl_fail.ivlid_data_adc)
      self.rads_fail.rad_rl_fail.loss_comm_adc = bool(self.rads_fail.rad_rl_fail.loss_comm_adc)
      self.rads_fail.rad_rl_fail.temp_high = bool(self.rads_fail.rad_rl_fail.temp_high)
      self.rads_fail.rad_rr_fail.blok_det = bool(self.rads_fail.rad_rr_fail.blok_det)
      self.rads_fail.rad_rr_fail.volt_low = bool(self.rads_fail.rad_rr_fail.volt_low)
      self.rads_fail.rad_rr_fail.volt_high = bool(self.rads_fail.rad_rr_fail.volt_high)
      self.rads_fail.rad_rr_fail.align_incomp = bool(self.rads_fail.rad_rr_fail.align_incomp)
      self.rads_fail.rad_rr_fail.inter_fault = bool(self.rads_fail.rad_rr_fail.inter_fault)
      self.rads_fail.rad_rr_fail.align_out_range = bool(self.rads_fail.rad_rr_fail.align_out_range)
      self.rads_fail.rad_rr_fail.ivlid_data_adc = bool(self.rads_fail.rad_rr_fail.ivlid_data_adc)
      self.rads_fail.rad_rr_fail.loss_comm_adc = bool(self.rads_fail.rad_rr_fail.loss_comm_adc)
      self.rads_fail.rad_rr_fail.temp_high = bool(self.rads_fail.rad_rr_fail.temp_high)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rads_fail.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rads_fail.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.rads_fail.counter, _x.rads_fail.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2I4fI6fI6fI6fI2f = None
def _get_struct_2I4fI6fI6fI6fI2f():
    global _struct_2I4fI6fI6fI6fI2f
    if _struct_2I4fI6fI6fI6fI2f is None:
        _struct_2I4fI6fI6fI6fI2f = struct.Struct("<2I4fI6fI6fI6fI2f")
    return _struct_2I4fI6fI6fI6fI2f
_struct_2If3I = None
def _get_struct_2If3I():
    global _struct_2If3I
    if _struct_2If3I is None:
        _struct_2If3I = struct.Struct("<2If3I")
    return _struct_2If3I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_45B14Q = None
def _get_struct_45B14Q():
    global _struct_45B14Q
    if _struct_45B14Q is None:
        _struct_45B14Q = struct.Struct("<45B14Q")
    return _struct_45B14Q
_struct_4fI = None
def _get_struct_4fI():
    global _struct_4fI
    if _struct_4fI is None:
        _struct_4fI = struct.Struct("<4fI")
    return _struct_4fI
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_I4df = None
def _get_struct_I4df():
    global _struct_I4df
    if _struct_I4df is None:
        _struct_I4df = struct.Struct("<I4df")
    return _struct_I4df
_struct_QI = None
def _get_struct_QI():
    global _struct_QI
    if _struct_QI is None:
        _struct_QI = struct.Struct("<QI")
    return _struct_QI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EHYTsiOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EHYTsiOutputs(genpy.Message):
  _md5sum = "114f3699ee3c4b3c3d318f090521893f"
  _type = "rospy_message_converter/EHYTsiOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TgtObj[] tsi_obj
TgtObj[] rm_tsi_out
TcaTarget tca_out
uint32 tsi_status
bool tsi_flg_cipvlost
bool tsi_ego_lane_changed
uint32 svc_frnt_obstacle_status
PedTarget ped_out
uint32[] bsd_hmi_id
uint32[] lca_hmi_id
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/TgtObj
uint32 id
uint32 obj_index
uint32 confidence
float32 lon_pos_ccs
float32 lon_pos_vcs
float32 lon_pos_vcs_std
float32 lon_vel
float32 lon_vel_std
float32 lon_acc
float32 lat_pos_ccs
float32 lat_pos_vcs
float32 lat_pos_vcs_std
float32 lat_vel
float32 lat_vel_std
float32 lat_vel_ccs
float32 lat_acc
int32 status
int32 type
int32 valid
uint32 age
float32 width
float32 length
float32 height
float32 phi_angle
float32 dphi_angle_rate
int32 fusion_source
float32 ttc
int32 blinker_info
uint32 brake_lights
float32 prob_lane_change
int32 dirLaneChange
uint32 age_in_path

================================================================================
MSG: rospy_message_converter/TcaTarget
TgtObj[] tca_obj
uint32 valid_tgt_num
TgtObj[] tca_obj_left
TgtObj[] tca_obj_right

================================================================================
MSG: rospy_message_converter/PedTarget
TgtObj[] obj_host
TgtObj[] obj_left
TgtObj[] obj_right
"""
  __slots__ = ['tsi_obj','rm_tsi_out','tca_out','tsi_status','tsi_flg_cipvlost','tsi_ego_lane_changed','svc_frnt_obstacle_status','ped_out','bsd_hmi_id','lca_hmi_id','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/TgtObj[]','rospy_message_converter/TgtObj[]','rospy_message_converter/TcaTarget','uint32','bool','bool','uint32','rospy_message_converter/PedTarget','uint32[]','uint32[]','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tsi_obj,rm_tsi_out,tca_out,tsi_status,tsi_flg_cipvlost,tsi_ego_lane_changed,svc_frnt_obstacle_status,ped_out,bsd_hmi_id,lca_hmi_id,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EHYTsiOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tsi_obj is None:
        self.tsi_obj = []
      if self.rm_tsi_out is None:
        self.rm_tsi_out = []
      if self.tca_out is None:
        self.tca_out = rospy_message_converter.msg.TcaTarget()
      if self.tsi_status is None:
        self.tsi_status = 0
      if self.tsi_flg_cipvlost is None:
        self.tsi_flg_cipvlost = False
      if self.tsi_ego_lane_changed is None:
        self.tsi_ego_lane_changed = False
      if self.svc_frnt_obstacle_status is None:
        self.svc_frnt_obstacle_status = 0
      if self.ped_out is None:
        self.ped_out = rospy_message_converter.msg.PedTarget()
      if self.bsd_hmi_id is None:
        self.bsd_hmi_id = []
      if self.lca_hmi_id is None:
        self.lca_hmi_id = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.tsi_obj = []
      self.rm_tsi_out = []
      self.tca_out = rospy_message_converter.msg.TcaTarget()
      self.tsi_status = 0
      self.tsi_flg_cipvlost = False
      self.tsi_ego_lane_changed = False
      self.svc_frnt_obstacle_status = 0
      self.ped_out = rospy_message_converter.msg.PedTarget()
      self.bsd_hmi_id = []
      self.lca_hmi_id = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.tsi_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.tsi_obj:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.rm_tsi_out)
      buff.write(_struct_I.pack(length))
      for val1 in self.rm_tsi_out:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.tca_out.tca_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.tca_out.tca_obj:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      _x = self.tca_out.valid_tgt_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tca_out.tca_obj_left)
      buff.write(_struct_I.pack(length))
      for val1 in self.tca_out.tca_obj_left:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.tca_out.tca_obj_right)
      buff.write(_struct_I.pack(length))
      for val1 in self.tca_out.tca_obj_right:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      _x = self
      buff.write(_get_struct_I2BI().pack(_x.tsi_status, _x.tsi_flg_cipvlost, _x.tsi_ego_lane_changed, _x.svc_frnt_obstacle_status))
      length = len(self.ped_out.obj_host)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_out.obj_host:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.ped_out.obj_left)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_out.obj_left:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.ped_out.obj_right)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_out.obj_right:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.bsd_hmi_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsd_hmi_id))
      length = len(self.lca_hmi_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.lca_hmi_id))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tsi_obj is None:
        self.tsi_obj = None
      if self.rm_tsi_out is None:
        self.rm_tsi_out = None
      if self.tca_out is None:
        self.tca_out = rospy_message_converter.msg.TcaTarget()
      if self.ped_out is None:
        self.ped_out = rospy_message_converter.msg.PedTarget()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tsi_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tsi_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rm_tsi_out = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.rm_tsi_out.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tca_out.tca_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tca_out.tca_obj.append(val1)
      start = end
      end += 4
      (self.tca_out.valid_tgt_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tca_out.tca_obj_left = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tca_out.tca_obj_left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tca_out.tca_obj_right = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tca_out.tca_obj_right.append(val1)
      _x = self
      start = end
      end += 10
      (_x.tsi_status, _x.tsi_flg_cipvlost, _x.tsi_ego_lane_changed, _x.svc_frnt_obstacle_status,) = _get_struct_I2BI().unpack(str[start:end])
      self.tsi_flg_cipvlost = bool(self.tsi_flg_cipvlost)
      self.tsi_ego_lane_changed = bool(self.tsi_ego_lane_changed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_out.obj_host = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.ped_out.obj_host.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_out.obj_left = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.ped_out.obj_left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_out.obj_right = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.ped_out.obj_right.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsd_hmi_id = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lca_hmi_id = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.tsi_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.tsi_obj:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.rm_tsi_out)
      buff.write(_struct_I.pack(length))
      for val1 in self.rm_tsi_out:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.tca_out.tca_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.tca_out.tca_obj:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      _x = self.tca_out.valid_tgt_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.tca_out.tca_obj_left)
      buff.write(_struct_I.pack(length))
      for val1 in self.tca_out.tca_obj_left:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.tca_out.tca_obj_right)
      buff.write(_struct_I.pack(length))
      for val1 in self.tca_out.tca_obj_right:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      _x = self
      buff.write(_get_struct_I2BI().pack(_x.tsi_status, _x.tsi_flg_cipvlost, _x.tsi_ego_lane_changed, _x.svc_frnt_obstacle_status))
      length = len(self.ped_out.obj_host)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_out.obj_host:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.ped_out.obj_left)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_out.obj_left:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.ped_out.obj_right)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_out.obj_right:
        _x = val1
        buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
      length = len(self.bsd_hmi_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsd_hmi_id.tostring())
      length = len(self.lca_hmi_id)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.lca_hmi_id.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tsi_obj is None:
        self.tsi_obj = None
      if self.rm_tsi_out is None:
        self.rm_tsi_out = None
      if self.tca_out is None:
        self.tca_out = rospy_message_converter.msg.TcaTarget()
      if self.ped_out is None:
        self.ped_out = rospy_message_converter.msg.PedTarget()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tsi_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tsi_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rm_tsi_out = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.rm_tsi_out.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tca_out.tca_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tca_out.tca_obj.append(val1)
      start = end
      end += 4
      (self.tca_out.valid_tgt_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tca_out.tca_obj_left = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tca_out.tca_obj_left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tca_out.tca_obj_right = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.tca_out.tca_obj_right.append(val1)
      _x = self
      start = end
      end += 10
      (_x.tsi_status, _x.tsi_flg_cipvlost, _x.tsi_ego_lane_changed, _x.svc_frnt_obstacle_status,) = _get_struct_I2BI().unpack(str[start:end])
      self.tsi_flg_cipvlost = bool(self.tsi_flg_cipvlost)
      self.tsi_ego_lane_changed = bool(self.tsi_ego_lane_changed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_out.obj_host = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.ped_out.obj_host.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_out.obj_left = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.ped_out.obj_left.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_out.obj_right = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TgtObj()
        _x = val1
        start = end
        end += 128
        (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
        self.ped_out.obj_right.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsd_hmi_id = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lca_hmi_id = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3I13f3iI5fifiIfiI = None
def _get_struct_3I13f3iI5fifiIfiI():
    global _struct_3I13f3iI5fifiIfiI
    if _struct_3I13f3iI5fifiIfiI is None:
        _struct_3I13f3iI5fifiIfiI = struct.Struct("<3I13f3iI5fifiIfiI")
    return _struct_3I13f3iI5fifiIfiI
_struct_I2BI = None
def _get_struct_I2BI():
    global _struct_I2BI
    if _struct_I2BI is None:
        _struct_I2BI = struct.Struct("<I2BI")
    return _struct_I2BI
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

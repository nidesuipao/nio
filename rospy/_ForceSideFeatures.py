# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ForceSideFeatures.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ForceSideFeatures(genpy.Message):
  _md5sum = "6198ded76260e0b63feae01a7f7395a2"
  _type = "rospy_message_converter/ForceSideFeatures"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RadRr01 rad_rr_01
RadFl01 rad_fl_01
RadFr01 rad_fr_01
RadFc01 rad_fc_01
RadFC03 rad_fc_03
AdcEps02 adc_eps_02
CamFc03 cam_fc_03
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RadRr01
uint32 bsdlca_onoff_sts
uint32 bsdlca_left_sts
uint32 bsdlca_right_sts
uint32 bsdlca_left_warn_req
uint32 bsdlca_right_warn_req
uint32 bsdlca_haptic_onoff_sts
uint32 ext_req
uint32 sdow_onoff_sts
uint32 sdow_left_sts
uint32 sdow_right_sts
uint32 sdow_left_warn_req
uint32 sdow_right_warn_req
uint32 rcta_onoff_sts
uint32 rcta_left_sts
uint32 rcta_right_sts
uint32 rcta_left_warn_req
uint32 rcta_right_warn_req
uint32 mirr_light_left_req
uint32 mirr_light_right_req
uint32 rear_rad_fault_disp

================================================================================
MSG: rospy_message_converter/RadFl01
uint32 fcta_left_sts
uint32 fcta_left_warn_req
uint32 front_left_rad_fault_disp

================================================================================
MSG: rospy_message_converter/RadFr01
uint32 fcta_right_sts
uint32 fcta_right_warn_req
uint32 front_right_rad_fault_disp

================================================================================
MSG: rospy_message_converter/RadFc01
uint32 acc_decel_stop_req
uint32 drv_off_req
float32 acc_max_jerk_accel
float32 acc_min_jerk_accel
uint32 acc_mode
uint32 acc_shutdown_req
float32 acc_tar_accel
uint32 vlc_func_req

================================================================================
MSG: rospy_message_converter/RadFC03
uint32 rcta_brk_sts

================================================================================
MSG: rospy_message_converter/AdcEps02
uint32 adc1_eps_hvi_req
uint32 adc1_eps_hvi_req_val

================================================================================
MSG: rospy_message_converter/CamFc03
uint32 fcta_onoff_sts
"""
  __slots__ = ['rad_rr_01','rad_fl_01','rad_fr_01','rad_fc_01','rad_fc_03','adc_eps_02','cam_fc_03','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/RadRr01','rospy_message_converter/RadFl01','rospy_message_converter/RadFr01','rospy_message_converter/RadFc01','rospy_message_converter/RadFC03','rospy_message_converter/AdcEps02','rospy_message_converter/CamFc03','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rad_rr_01,rad_fl_01,rad_fr_01,rad_fc_01,rad_fc_03,adc_eps_02,cam_fc_03,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ForceSideFeatures, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rad_rr_01 is None:
        self.rad_rr_01 = rospy_message_converter.msg.RadRr01()
      if self.rad_fl_01 is None:
        self.rad_fl_01 = rospy_message_converter.msg.RadFl01()
      if self.rad_fr_01 is None:
        self.rad_fr_01 = rospy_message_converter.msg.RadFr01()
      if self.rad_fc_01 is None:
        self.rad_fc_01 = rospy_message_converter.msg.RadFc01()
      if self.rad_fc_03 is None:
        self.rad_fc_03 = rospy_message_converter.msg.RadFC03()
      if self.adc_eps_02 is None:
        self.adc_eps_02 = rospy_message_converter.msg.AdcEps02()
      if self.cam_fc_03 is None:
        self.cam_fc_03 = rospy_message_converter.msg.CamFc03()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.rad_rr_01 = rospy_message_converter.msg.RadRr01()
      self.rad_fl_01 = rospy_message_converter.msg.RadFl01()
      self.rad_fr_01 = rospy_message_converter.msg.RadFr01()
      self.rad_fc_01 = rospy_message_converter.msg.RadFc01()
      self.rad_fc_03 = rospy_message_converter.msg.RadFC03()
      self.adc_eps_02 = rospy_message_converter.msg.AdcEps02()
      self.cam_fc_03 = rospy_message_converter.msg.CamFc03()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_28I2f2If5IQ().pack(_x.rad_rr_01.bsdlca_onoff_sts, _x.rad_rr_01.bsdlca_left_sts, _x.rad_rr_01.bsdlca_right_sts, _x.rad_rr_01.bsdlca_left_warn_req, _x.rad_rr_01.bsdlca_right_warn_req, _x.rad_rr_01.bsdlca_haptic_onoff_sts, _x.rad_rr_01.ext_req, _x.rad_rr_01.sdow_onoff_sts, _x.rad_rr_01.sdow_left_sts, _x.rad_rr_01.sdow_right_sts, _x.rad_rr_01.sdow_left_warn_req, _x.rad_rr_01.sdow_right_warn_req, _x.rad_rr_01.rcta_onoff_sts, _x.rad_rr_01.rcta_left_sts, _x.rad_rr_01.rcta_right_sts, _x.rad_rr_01.rcta_left_warn_req, _x.rad_rr_01.rcta_right_warn_req, _x.rad_rr_01.mirr_light_left_req, _x.rad_rr_01.mirr_light_right_req, _x.rad_rr_01.rear_rad_fault_disp, _x.rad_fl_01.fcta_left_sts, _x.rad_fl_01.fcta_left_warn_req, _x.rad_fl_01.front_left_rad_fault_disp, _x.rad_fr_01.fcta_right_sts, _x.rad_fr_01.fcta_right_warn_req, _x.rad_fr_01.front_right_rad_fault_disp, _x.rad_fc_01.acc_decel_stop_req, _x.rad_fc_01.drv_off_req, _x.rad_fc_01.acc_max_jerk_accel, _x.rad_fc_01.acc_min_jerk_accel, _x.rad_fc_01.acc_mode, _x.rad_fc_01.acc_shutdown_req, _x.rad_fc_01.acc_tar_accel, _x.rad_fc_01.vlc_func_req, _x.rad_fc_03.rcta_brk_sts, _x.adc_eps_02.adc1_eps_hvi_req, _x.adc_eps_02.adc1_eps_hvi_req_val, _x.cam_fc_03.fcta_onoff_sts, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rad_rr_01 is None:
        self.rad_rr_01 = rospy_message_converter.msg.RadRr01()
      if self.rad_fl_01 is None:
        self.rad_fl_01 = rospy_message_converter.msg.RadFl01()
      if self.rad_fr_01 is None:
        self.rad_fr_01 = rospy_message_converter.msg.RadFr01()
      if self.rad_fc_01 is None:
        self.rad_fc_01 = rospy_message_converter.msg.RadFc01()
      if self.rad_fc_03 is None:
        self.rad_fc_03 = rospy_message_converter.msg.RadFC03()
      if self.adc_eps_02 is None:
        self.adc_eps_02 = rospy_message_converter.msg.AdcEps02()
      if self.cam_fc_03 is None:
        self.cam_fc_03 = rospy_message_converter.msg.CamFc03()
      end = 0
      _x = self
      start = end
      end += 160
      (_x.rad_rr_01.bsdlca_onoff_sts, _x.rad_rr_01.bsdlca_left_sts, _x.rad_rr_01.bsdlca_right_sts, _x.rad_rr_01.bsdlca_left_warn_req, _x.rad_rr_01.bsdlca_right_warn_req, _x.rad_rr_01.bsdlca_haptic_onoff_sts, _x.rad_rr_01.ext_req, _x.rad_rr_01.sdow_onoff_sts, _x.rad_rr_01.sdow_left_sts, _x.rad_rr_01.sdow_right_sts, _x.rad_rr_01.sdow_left_warn_req, _x.rad_rr_01.sdow_right_warn_req, _x.rad_rr_01.rcta_onoff_sts, _x.rad_rr_01.rcta_left_sts, _x.rad_rr_01.rcta_right_sts, _x.rad_rr_01.rcta_left_warn_req, _x.rad_rr_01.rcta_right_warn_req, _x.rad_rr_01.mirr_light_left_req, _x.rad_rr_01.mirr_light_right_req, _x.rad_rr_01.rear_rad_fault_disp, _x.rad_fl_01.fcta_left_sts, _x.rad_fl_01.fcta_left_warn_req, _x.rad_fl_01.front_left_rad_fault_disp, _x.rad_fr_01.fcta_right_sts, _x.rad_fr_01.fcta_right_warn_req, _x.rad_fr_01.front_right_rad_fault_disp, _x.rad_fc_01.acc_decel_stop_req, _x.rad_fc_01.drv_off_req, _x.rad_fc_01.acc_max_jerk_accel, _x.rad_fc_01.acc_min_jerk_accel, _x.rad_fc_01.acc_mode, _x.rad_fc_01.acc_shutdown_req, _x.rad_fc_01.acc_tar_accel, _x.rad_fc_01.vlc_func_req, _x.rad_fc_03.rcta_brk_sts, _x.adc_eps_02.adc1_eps_hvi_req, _x.adc_eps_02.adc1_eps_hvi_req_val, _x.cam_fc_03.fcta_onoff_sts, _x.publish_ptp_ts,) = _get_struct_28I2f2If5IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_28I2f2If5IQ().pack(_x.rad_rr_01.bsdlca_onoff_sts, _x.rad_rr_01.bsdlca_left_sts, _x.rad_rr_01.bsdlca_right_sts, _x.rad_rr_01.bsdlca_left_warn_req, _x.rad_rr_01.bsdlca_right_warn_req, _x.rad_rr_01.bsdlca_haptic_onoff_sts, _x.rad_rr_01.ext_req, _x.rad_rr_01.sdow_onoff_sts, _x.rad_rr_01.sdow_left_sts, _x.rad_rr_01.sdow_right_sts, _x.rad_rr_01.sdow_left_warn_req, _x.rad_rr_01.sdow_right_warn_req, _x.rad_rr_01.rcta_onoff_sts, _x.rad_rr_01.rcta_left_sts, _x.rad_rr_01.rcta_right_sts, _x.rad_rr_01.rcta_left_warn_req, _x.rad_rr_01.rcta_right_warn_req, _x.rad_rr_01.mirr_light_left_req, _x.rad_rr_01.mirr_light_right_req, _x.rad_rr_01.rear_rad_fault_disp, _x.rad_fl_01.fcta_left_sts, _x.rad_fl_01.fcta_left_warn_req, _x.rad_fl_01.front_left_rad_fault_disp, _x.rad_fr_01.fcta_right_sts, _x.rad_fr_01.fcta_right_warn_req, _x.rad_fr_01.front_right_rad_fault_disp, _x.rad_fc_01.acc_decel_stop_req, _x.rad_fc_01.drv_off_req, _x.rad_fc_01.acc_max_jerk_accel, _x.rad_fc_01.acc_min_jerk_accel, _x.rad_fc_01.acc_mode, _x.rad_fc_01.acc_shutdown_req, _x.rad_fc_01.acc_tar_accel, _x.rad_fc_01.vlc_func_req, _x.rad_fc_03.rcta_brk_sts, _x.adc_eps_02.adc1_eps_hvi_req, _x.adc_eps_02.adc1_eps_hvi_req_val, _x.cam_fc_03.fcta_onoff_sts, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rad_rr_01 is None:
        self.rad_rr_01 = rospy_message_converter.msg.RadRr01()
      if self.rad_fl_01 is None:
        self.rad_fl_01 = rospy_message_converter.msg.RadFl01()
      if self.rad_fr_01 is None:
        self.rad_fr_01 = rospy_message_converter.msg.RadFr01()
      if self.rad_fc_01 is None:
        self.rad_fc_01 = rospy_message_converter.msg.RadFc01()
      if self.rad_fc_03 is None:
        self.rad_fc_03 = rospy_message_converter.msg.RadFC03()
      if self.adc_eps_02 is None:
        self.adc_eps_02 = rospy_message_converter.msg.AdcEps02()
      if self.cam_fc_03 is None:
        self.cam_fc_03 = rospy_message_converter.msg.CamFc03()
      end = 0
      _x = self
      start = end
      end += 160
      (_x.rad_rr_01.bsdlca_onoff_sts, _x.rad_rr_01.bsdlca_left_sts, _x.rad_rr_01.bsdlca_right_sts, _x.rad_rr_01.bsdlca_left_warn_req, _x.rad_rr_01.bsdlca_right_warn_req, _x.rad_rr_01.bsdlca_haptic_onoff_sts, _x.rad_rr_01.ext_req, _x.rad_rr_01.sdow_onoff_sts, _x.rad_rr_01.sdow_left_sts, _x.rad_rr_01.sdow_right_sts, _x.rad_rr_01.sdow_left_warn_req, _x.rad_rr_01.sdow_right_warn_req, _x.rad_rr_01.rcta_onoff_sts, _x.rad_rr_01.rcta_left_sts, _x.rad_rr_01.rcta_right_sts, _x.rad_rr_01.rcta_left_warn_req, _x.rad_rr_01.rcta_right_warn_req, _x.rad_rr_01.mirr_light_left_req, _x.rad_rr_01.mirr_light_right_req, _x.rad_rr_01.rear_rad_fault_disp, _x.rad_fl_01.fcta_left_sts, _x.rad_fl_01.fcta_left_warn_req, _x.rad_fl_01.front_left_rad_fault_disp, _x.rad_fr_01.fcta_right_sts, _x.rad_fr_01.fcta_right_warn_req, _x.rad_fr_01.front_right_rad_fault_disp, _x.rad_fc_01.acc_decel_stop_req, _x.rad_fc_01.drv_off_req, _x.rad_fc_01.acc_max_jerk_accel, _x.rad_fc_01.acc_min_jerk_accel, _x.rad_fc_01.acc_mode, _x.rad_fc_01.acc_shutdown_req, _x.rad_fc_01.acc_tar_accel, _x.rad_fc_01.vlc_func_req, _x.rad_fc_03.rcta_brk_sts, _x.adc_eps_02.adc1_eps_hvi_req, _x.adc_eps_02.adc1_eps_hvi_req_val, _x.cam_fc_03.fcta_onoff_sts, _x.publish_ptp_ts,) = _get_struct_28I2f2If5IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_28I2f2If5IQ = None
def _get_struct_28I2f2If5IQ():
    global _struct_28I2f2If5IQ
    if _struct_28I2f2If5IQ is None:
        _struct_28I2f2If5IQ = struct.Struct("<28I2f2If5IQ")
    return _struct_28I2f2If5IQ
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

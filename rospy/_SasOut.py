# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SasOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SasOut(genpy.Message):
  _md5sum = "3f709025b6150d24292918f8fbe01b0e"
  _type = "rospy_message_converter/SasOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 SpeedLimitValue
uint32 SpeedUnit
int32 SpeedLimitAttribute
int32 SpeedLimitTakeover
uint32 SupSignType
uint32 SupSignAttribute
uint32 RoadFeatureWarningSign
uint32 TrafficLightSts
uint32 LocalHazards
int32 SLIFState
int32 SLWFWarnTrigger
"""
  __slots__ = ['SpeedLimitValue','SpeedUnit','SpeedLimitAttribute','SpeedLimitTakeover','SupSignType','SupSignAttribute','RoadFeatureWarningSign','TrafficLightSts','LocalHazards','SLIFState','SLWFWarnTrigger']
  _slot_types = ['uint32','uint32','int32','int32','uint32','uint32','uint32','uint32','uint32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SpeedLimitValue,SpeedUnit,SpeedLimitAttribute,SpeedLimitTakeover,SupSignType,SupSignAttribute,RoadFeatureWarningSign,TrafficLightSts,LocalHazards,SLIFState,SLWFWarnTrigger

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SasOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SpeedLimitValue is None:
        self.SpeedLimitValue = 0
      if self.SpeedUnit is None:
        self.SpeedUnit = 0
      if self.SpeedLimitAttribute is None:
        self.SpeedLimitAttribute = 0
      if self.SpeedLimitTakeover is None:
        self.SpeedLimitTakeover = 0
      if self.SupSignType is None:
        self.SupSignType = 0
      if self.SupSignAttribute is None:
        self.SupSignAttribute = 0
      if self.RoadFeatureWarningSign is None:
        self.RoadFeatureWarningSign = 0
      if self.TrafficLightSts is None:
        self.TrafficLightSts = 0
      if self.LocalHazards is None:
        self.LocalHazards = 0
      if self.SLIFState is None:
        self.SLIFState = 0
      if self.SLWFWarnTrigger is None:
        self.SLWFWarnTrigger = 0
    else:
      self.SpeedLimitValue = 0
      self.SpeedUnit = 0
      self.SpeedLimitAttribute = 0
      self.SpeedLimitTakeover = 0
      self.SupSignType = 0
      self.SupSignAttribute = 0
      self.RoadFeatureWarningSign = 0
      self.TrafficLightSts = 0
      self.LocalHazards = 0
      self.SLIFState = 0
      self.SLWFWarnTrigger = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i5I2i().pack(_x.SpeedLimitValue, _x.SpeedUnit, _x.SpeedLimitAttribute, _x.SpeedLimitTakeover, _x.SupSignType, _x.SupSignAttribute, _x.RoadFeatureWarningSign, _x.TrafficLightSts, _x.LocalHazards, _x.SLIFState, _x.SLWFWarnTrigger))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.SpeedLimitValue, _x.SpeedUnit, _x.SpeedLimitAttribute, _x.SpeedLimitTakeover, _x.SupSignType, _x.SupSignAttribute, _x.RoadFeatureWarningSign, _x.TrafficLightSts, _x.LocalHazards, _x.SLIFState, _x.SLWFWarnTrigger,) = _get_struct_2I2i5I2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i5I2i().pack(_x.SpeedLimitValue, _x.SpeedUnit, _x.SpeedLimitAttribute, _x.SpeedLimitTakeover, _x.SupSignType, _x.SupSignAttribute, _x.RoadFeatureWarningSign, _x.TrafficLightSts, _x.LocalHazards, _x.SLIFState, _x.SLWFWarnTrigger))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.SpeedLimitValue, _x.SpeedUnit, _x.SpeedLimitAttribute, _x.SpeedLimitTakeover, _x.SupSignType, _x.SupSignAttribute, _x.RoadFeatureWarningSign, _x.TrafficLightSts, _x.LocalHazards, _x.SLIFState, _x.SLWFWarnTrigger,) = _get_struct_2I2i5I2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i5I2i = None
def _get_struct_2I2i5I2i():
    global _struct_2I2i5I2i
    if _struct_2I2i5I2i is None:
        _struct_2I2i5I2i = struct.Struct("<2I2i5I2i")
    return _struct_2I2i5I2i

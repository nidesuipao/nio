# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdLaneList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdLaneList(genpy.Message):
  _md5sum = "1a5b95b3404de78eb60f0187559eef54"
  _type = "rospy_message_converter/HdLaneList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """HdLane[] lane_list

================================================================================
MSG: rospy_message_converter/HdLane
uint64 id
int32 turn
MapPolyline central_line
uint64 left_boundary_id
uint64 right_boundary_id
Predecessor[] predecessors
Successor[] successors
float64 min_speed_limit
float64 max_speed_limit
NeightborSegment left_forward_neighbor
NeightborSegment right_forward_neighbor
NeightborSegment[] left_forward_neighbors
NeightborSegment[] right_forward_neighbors
NeightborSegment[] left_reverse_neighbors
NeightborSegment[] right_reverse_neighbors
Overlap[] overlaps
uint64 lane_group_id
int32 connection_type
int32 sequence_id
int32 lane_type
float64 length
float64[] OBSOLETE_width
float64[] width
float64[] centerline_s
uint32 lane_status
bool lane_used_in_both_directions
uint32 tile_id
float64 advisory_speed_limit
DowngradeLaneSegment[] downgrade_lane_segments
float64 electronic_eye_speed_limit
float64 max_lane_group_speed_limit

================================================================================
MSG: rospy_message_converter/MapPolyline
float64[] x
float64[] y
float64[] z

================================================================================
MSG: rospy_message_converter/Predecessor
uint64 self_id
uint64 other_id

================================================================================
MSG: rospy_message_converter/Successor
uint64 self_id
uint64 other_id

================================================================================
MSG: rospy_message_converter/NeightborSegment
uint64 self_id
uint64 other_id
float64 self_start_s
float64 self_end_s
float64 other_start_s
float64 other_end_s

================================================================================
MSG: rospy_message_converter/Overlap
uint64 self_id
uint64 other_id
int32 type
float64 start_s
float64 end_s

================================================================================
MSG: rospy_message_converter/DowngradeLaneSegment
int32 ad_mode_type
float64 start_s
float64 end_s
int32 info_value
int32 dynamic_info
int32 road_scenario_type
"""
  __slots__ = ['lane_list']
  _slot_types = ['rospy_message_converter/HdLane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdLaneList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane_list is None:
        self.lane_list = []
    else:
      self.lane_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_list:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.id, _x.turn))
        _v1 = val1.central_line
        length = len(_v1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.x))
        length = len(_v1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.y))
        length = len(_v1.z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.z))
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.left_boundary_id, _x.right_boundary_id))
        length = len(val1.predecessors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.predecessors:
          _x = val2
          buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
        length = len(val1.successors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.successors:
          _x = val2
          buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.min_speed_limit, _x.max_speed_limit))
        _v2 = val1.left_forward_neighbor
        _x = _v2
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        _v3 = val1.right_forward_neighbor
        _x = _v3
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.left_forward_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_forward_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.right_forward_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_forward_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.left_reverse_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_reverse_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.right_reverse_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_reverse_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.overlaps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.overlaps:
          _x = val2
          buff.write(_get_struct_2Qi2d().pack(_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s))
        _x = val1
        buff.write(_get_struct_Q3id().pack(_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length))
        length = len(val1.OBSOLETE_width)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.OBSOLETE_width))
        length = len(val1.width)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.width))
        length = len(val1.centerline_s)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.centerline_s))
        _x = val1
        buff.write(_get_struct_IBId().pack(_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit))
        length = len(val1.downgrade_lane_segments)
        buff.write(_struct_I.pack(length))
        for val2 in val1.downgrade_lane_segments:
          _x = val2
          buff.write(_get_struct_i2d3i().pack(_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_list is None:
        self.lane_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HdLane()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.turn,) = _get_struct_Qi().unpack(str[start:end])
        _v4 = val1.central_line
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v4.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v4.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v4.z = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.left_boundary_id, _x.right_boundary_id,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.predecessors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Predecessor()
          _x = val2
          start = end
          end += 16
          (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
          val1.predecessors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.successors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Successor()
          _x = val2
          start = end
          end += 16
          (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
          val1.successors.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.min_speed_limit, _x.max_speed_limit,) = _get_struct_2d().unpack(str[start:end])
        _v5 = val1.left_forward_neighbor
        _x = _v5
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        _v6 = val1.right_forward_neighbor
        _x = _v6
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_forward_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.left_forward_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_forward_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.right_forward_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_reverse_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.left_reverse_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_reverse_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.right_reverse_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.overlaps = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Overlap()
          _x = val2
          start = end
          end += 36
          (_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s,) = _get_struct_2Qi2d().unpack(str[start:end])
          val1.overlaps.append(val2)
        _x = val1
        start = end
        end += 28
        (_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length,) = _get_struct_Q3id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.OBSOLETE_width = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.width = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.centerline_s = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 17
        (_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit,) = _get_struct_IBId().unpack(str[start:end])
        val1.lane_used_in_both_directions = bool(val1.lane_used_in_both_directions)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.downgrade_lane_segments = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.DowngradeLaneSegment()
          _x = val2
          start = end
          end += 32
          (_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_i2d3i().unpack(str[start:end])
          val1.downgrade_lane_segments.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit,) = _get_struct_2d().unpack(str[start:end])
        self.lane_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_list:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.id, _x.turn))
        _v7 = val1.central_line
        length = len(_v7.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v7.x.tostring())
        length = len(_v7.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v7.y.tostring())
        length = len(_v7.z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v7.z.tostring())
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.left_boundary_id, _x.right_boundary_id))
        length = len(val1.predecessors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.predecessors:
          _x = val2
          buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
        length = len(val1.successors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.successors:
          _x = val2
          buff.write(_get_struct_2Q().pack(_x.self_id, _x.other_id))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.min_speed_limit, _x.max_speed_limit))
        _v8 = val1.left_forward_neighbor
        _x = _v8
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        _v9 = val1.right_forward_neighbor
        _x = _v9
        buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.left_forward_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_forward_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.right_forward_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_forward_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.left_reverse_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.left_reverse_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.right_reverse_neighbors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.right_reverse_neighbors:
          _x = val2
          buff.write(_get_struct_2Q4d().pack(_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s))
        length = len(val1.overlaps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.overlaps:
          _x = val2
          buff.write(_get_struct_2Qi2d().pack(_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s))
        _x = val1
        buff.write(_get_struct_Q3id().pack(_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length))
        length = len(val1.OBSOLETE_width)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.OBSOLETE_width.tostring())
        length = len(val1.width)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.width.tostring())
        length = len(val1.centerline_s)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.centerline_s.tostring())
        _x = val1
        buff.write(_get_struct_IBId().pack(_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit))
        length = len(val1.downgrade_lane_segments)
        buff.write(_struct_I.pack(length))
        for val2 in val1.downgrade_lane_segments:
          _x = val2
          buff.write(_get_struct_i2d3i().pack(_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_list is None:
        self.lane_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HdLane()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.turn,) = _get_struct_Qi().unpack(str[start:end])
        _v10 = val1.central_line
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v10.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v10.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v10.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 16
        (_x.left_boundary_id, _x.right_boundary_id,) = _get_struct_2Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.predecessors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Predecessor()
          _x = val2
          start = end
          end += 16
          (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
          val1.predecessors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.successors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Successor()
          _x = val2
          start = end
          end += 16
          (_x.self_id, _x.other_id,) = _get_struct_2Q().unpack(str[start:end])
          val1.successors.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.min_speed_limit, _x.max_speed_limit,) = _get_struct_2d().unpack(str[start:end])
        _v11 = val1.left_forward_neighbor
        _x = _v11
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        _v12 = val1.right_forward_neighbor
        _x = _v12
        start = end
        end += 48
        (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_forward_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.left_forward_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_forward_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.right_forward_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.left_reverse_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.left_reverse_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.right_reverse_neighbors = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.NeightborSegment()
          _x = val2
          start = end
          end += 48
          (_x.self_id, _x.other_id, _x.self_start_s, _x.self_end_s, _x.other_start_s, _x.other_end_s,) = _get_struct_2Q4d().unpack(str[start:end])
          val1.right_reverse_neighbors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.overlaps = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Overlap()
          _x = val2
          start = end
          end += 36
          (_x.self_id, _x.other_id, _x.type, _x.start_s, _x.end_s,) = _get_struct_2Qi2d().unpack(str[start:end])
          val1.overlaps.append(val2)
        _x = val1
        start = end
        end += 28
        (_x.lane_group_id, _x.connection_type, _x.sequence_id, _x.lane_type, _x.length,) = _get_struct_Q3id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.OBSOLETE_width = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.width = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.centerline_s = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 17
        (_x.lane_status, _x.lane_used_in_both_directions, _x.tile_id, _x.advisory_speed_limit,) = _get_struct_IBId().unpack(str[start:end])
        val1.lane_used_in_both_directions = bool(val1.lane_used_in_both_directions)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.downgrade_lane_segments = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.DowngradeLaneSegment()
          _x = val2
          start = end
          end += 32
          (_x.ad_mode_type, _x.start_s, _x.end_s, _x.info_value, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_i2d3i().unpack(str[start:end])
          val1.downgrade_lane_segments.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.electronic_eye_speed_limit, _x.max_lane_group_speed_limit,) = _get_struct_2d().unpack(str[start:end])
        self.lane_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2Q4d = None
def _get_struct_2Q4d():
    global _struct_2Q4d
    if _struct_2Q4d is None:
        _struct_2Q4d = struct.Struct("<2Q4d")
    return _struct_2Q4d
_struct_2Qi2d = None
def _get_struct_2Qi2d():
    global _struct_2Qi2d
    if _struct_2Qi2d is None:
        _struct_2Qi2d = struct.Struct("<2Qi2d")
    return _struct_2Qi2d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_IBId = None
def _get_struct_IBId():
    global _struct_IBId
    if _struct_IBId is None:
        _struct_IBId = struct.Struct("<IBId")
    return _struct_IBId
_struct_Q3id = None
def _get_struct_Q3id():
    global _struct_Q3id
    if _struct_Q3id is None:
        _struct_Q3id = struct.Struct("<Q3id")
    return _struct_Q3id
_struct_Qi = None
def _get_struct_Qi():
    global _struct_Qi
    if _struct_Qi is None:
        _struct_Qi = struct.Struct("<Qi")
    return _struct_Qi
_struct_i2d3i = None
def _get_struct_i2d3i():
    global _struct_i2d3i
    if _struct_i2d3i is None:
        _struct_i2d3i = struct.Struct("<i2d3i")
    return _struct_i2d3i

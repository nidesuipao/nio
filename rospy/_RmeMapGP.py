# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RmeMapGP.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RmeMapGP(genpy.Message):
  _md5sum = "2112fddae5984f31d05c3b6c70813ac3"
  _type = "rospy_message_converter/RmeMapGP"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 gp_distance
uint32 gp_type
float32 recom_speed
float32 link_length
uint32 recom_lane_idx
uint32 recom_speed_id
uint32 recom_speed_src
uint32 recom_speed_conf
bool spd_unit
int32 sup_sign_typ
int32 sup_sign_attr
"""
  __slots__ = ['gp_distance','gp_type','recom_speed','link_length','recom_lane_idx','recom_speed_id','recom_speed_src','recom_speed_conf','spd_unit','sup_sign_typ','sup_sign_attr']
  _slot_types = ['float32','uint32','float32','float32','uint32','uint32','uint32','uint32','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gp_distance,gp_type,recom_speed,link_length,recom_lane_idx,recom_speed_id,recom_speed_src,recom_speed_conf,spd_unit,sup_sign_typ,sup_sign_attr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RmeMapGP, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gp_distance is None:
        self.gp_distance = 0.
      if self.gp_type is None:
        self.gp_type = 0
      if self.recom_speed is None:
        self.recom_speed = 0.
      if self.link_length is None:
        self.link_length = 0.
      if self.recom_lane_idx is None:
        self.recom_lane_idx = 0
      if self.recom_speed_id is None:
        self.recom_speed_id = 0
      if self.recom_speed_src is None:
        self.recom_speed_src = 0
      if self.recom_speed_conf is None:
        self.recom_speed_conf = 0
      if self.spd_unit is None:
        self.spd_unit = False
      if self.sup_sign_typ is None:
        self.sup_sign_typ = 0
      if self.sup_sign_attr is None:
        self.sup_sign_attr = 0
    else:
      self.gp_distance = 0.
      self.gp_type = 0
      self.recom_speed = 0.
      self.link_length = 0.
      self.recom_lane_idx = 0
      self.recom_speed_id = 0
      self.recom_speed_src = 0
      self.recom_speed_conf = 0
      self.spd_unit = False
      self.sup_sign_typ = 0
      self.sup_sign_attr = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fI2f4IB2i().pack(_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr,) = _get_struct_fI2f4IB2i().unpack(str[start:end])
      self.spd_unit = bool(self.spd_unit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fI2f4IB2i().pack(_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr,) = _get_struct_fI2f4IB2i().unpack(str[start:end])
      self.spd_unit = bool(self.spd_unit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fI2f4IB2i = None
def _get_struct_fI2f4IB2i():
    global _struct_fI2f4IB2i
    if _struct_fI2f4IB2i is None:
        _struct_fI2f4IB2i = struct.Struct("<fI2f4IB2i")
    return _struct_fI2f4IB2i

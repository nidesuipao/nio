# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehSpdInfos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehSpdInfos(genpy.Message):
  _md5sum = "960dec644087887b566426919b9ff6e0"
  _type = "rospy_message_converter/VehSpdInfos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 VehSpdSts
int32 VehMovgDir
float32 VehSpdkph
float32 VehSpdmps
float32 VehFiltLngAcc
int32 VehSpdASILDSts
float32 VehSpdASILD
float32 VehDispSpd
int32 VCUVehDispSpdSts
uint64[] timestamp_ptp_ns
"""
  __slots__ = ['VehSpdSts','VehMovgDir','VehSpdkph','VehSpdmps','VehFiltLngAcc','VehSpdASILDSts','VehSpdASILD','VehDispSpd','VCUVehDispSpdSts','timestamp_ptp_ns']
  _slot_types = ['int32','int32','float32','float32','float32','int32','float32','float32','int32','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VehSpdSts,VehMovgDir,VehSpdkph,VehSpdmps,VehFiltLngAcc,VehSpdASILDSts,VehSpdASILD,VehDispSpd,VCUVehDispSpdSts,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehSpdInfos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VehSpdSts is None:
        self.VehSpdSts = 0
      if self.VehMovgDir is None:
        self.VehMovgDir = 0
      if self.VehSpdkph is None:
        self.VehSpdkph = 0.
      if self.VehSpdmps is None:
        self.VehSpdmps = 0.
      if self.VehFiltLngAcc is None:
        self.VehFiltLngAcc = 0.
      if self.VehSpdASILDSts is None:
        self.VehSpdASILDSts = 0
      if self.VehSpdASILD is None:
        self.VehSpdASILD = 0.
      if self.VehDispSpd is None:
        self.VehDispSpd = 0.
      if self.VCUVehDispSpdSts is None:
        self.VCUVehDispSpdSts = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = []
    else:
      self.VehSpdSts = 0
      self.VehMovgDir = 0
      self.VehSpdkph = 0.
      self.VehSpdmps = 0.
      self.VehFiltLngAcc = 0.
      self.VehSpdASILDSts = 0
      self.VehSpdASILD = 0.
      self.VehDispSpd = 0.
      self.VCUVehDispSpdSts = 0
      self.timestamp_ptp_ns = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3fi2fi().pack(_x.VehSpdSts, _x.VehMovgDir, _x.VehSpdkph, _x.VehSpdmps, _x.VehFiltLngAcc, _x.VehSpdASILDSts, _x.VehSpdASILD, _x.VehDispSpd, _x.VCUVehDispSpdSts))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.VehSpdSts, _x.VehMovgDir, _x.VehSpdkph, _x.VehSpdmps, _x.VehFiltLngAcc, _x.VehSpdASILDSts, _x.VehSpdASILD, _x.VehDispSpd, _x.VCUVehDispSpdSts,) = _get_struct_2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3fi2fi().pack(_x.VehSpdSts, _x.VehMovgDir, _x.VehSpdkph, _x.VehSpdmps, _x.VehFiltLngAcc, _x.VehSpdASILDSts, _x.VehSpdASILD, _x.VehDispSpd, _x.VCUVehDispSpdSts))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.timestamp_ptp_ns.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.VehSpdSts, _x.VehMovgDir, _x.VehSpdkph, _x.VehSpdmps, _x.VehFiltLngAcc, _x.VehSpdASILDSts, _x.VehSpdASILD, _x.VehDispSpd, _x.VCUVehDispSpdSts,) = _get_struct_2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3fi2fi = None
def _get_struct_2i3fi2fi():
    global _struct_2i3fi2fi
    if _struct_2i3fi2fi is None:
        _struct_2i3fi2fi = struct.Struct("<2i3fi2fi")
    return _struct_2i3fi2fi

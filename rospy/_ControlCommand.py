# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ControlCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ControlCommand(genpy.Message):
  _md5sum = "3a91d4b0af88cf05d20cf8697a3b3b72"
  _type = "rospy_message_converter/ControlCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 throttle
int32 brake
float64 steering_rate
float64 steering_angle
float64 steering_torque
bool parking_brake
float64 speed
float64 acceleration
float64 axle_torqaue
float64 stop_distance
int32 gear_location
int32 control_mode
SimpleLateralDebug simple_lat_debug
control_statemachine_DebugOut par_control_statemachine
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SimpleLateralDebug
float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
float64 lateral_acceleration
float64 lateral_jerk
float64 ref_heading_rate
float64 heading_rate
float64 ref_heading_acceleration
float64 heading_acceleration
float64 heading_error_acceleration
float64 ref_heading_jerk
float64 heading_jerk
float64 heading_error_jerk
float64 lateral_error_feedback
float64 heading_error_feedback
TrajectoryPoint current_target_point
float64 steer_angle_feedback_augment

================================================================================
MSG: rospy_message_converter/TrajectoryPoint
PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a

================================================================================
MSG: rospy_message_converter/control_statemachine_DebugOut
bool estop
string status
int32 control_state
bool is_finish
int32 aborttype
bool is_eps_hand_shake_ok
bool is_vcu_hand_shake_ok
int32 Gear_request
float32 Steering_output
float32 current_location_x
float32 current_location_y
float32 target_location_x
float32 target_location_y
int32 bind_status
bool has_receive_10ms
bool has_receive_bind
bool has_receive_planning
bool has_receive_location
float32 steer_angle_feedback
float32 steer_angle_feedforward
float64 stop_distance
float64 sum_s
"""
  __slots__ = ['throttle','brake','steering_rate','steering_angle','steering_torque','parking_brake','speed','acceleration','axle_torqaue','stop_distance','gear_location','control_mode','simple_lat_debug','par_control_statemachine','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['float64','int32','float64','float64','float64','bool','float64','float64','float64','float64','int32','int32','rospy_message_converter/SimpleLateralDebug','rospy_message_converter/control_statemachine_DebugOut','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       throttle,brake,steering_rate,steering_angle,steering_torque,parking_brake,speed,acceleration,axle_torqaue,stop_distance,gear_location,control_mode,simple_lat_debug,par_control_statemachine,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.throttle is None:
        self.throttle = 0.
      if self.brake is None:
        self.brake = 0
      if self.steering_rate is None:
        self.steering_rate = 0.
      if self.steering_angle is None:
        self.steering_angle = 0.
      if self.steering_torque is None:
        self.steering_torque = 0.
      if self.parking_brake is None:
        self.parking_brake = False
      if self.speed is None:
        self.speed = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.axle_torqaue is None:
        self.axle_torqaue = 0.
      if self.stop_distance is None:
        self.stop_distance = 0.
      if self.gear_location is None:
        self.gear_location = 0
      if self.control_mode is None:
        self.control_mode = 0
      if self.simple_lat_debug is None:
        self.simple_lat_debug = rospy_message_converter.msg.SimpleLateralDebug()
      if self.par_control_statemachine is None:
        self.par_control_statemachine = rospy_message_converter.msg.control_statemachine_DebugOut()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.throttle = 0.
      self.brake = 0
      self.steering_rate = 0.
      self.steering_angle = 0.
      self.steering_torque = 0.
      self.parking_brake = False
      self.speed = 0.
      self.acceleration = 0.
      self.axle_torqaue = 0.
      self.stop_distance = 0.
      self.gear_location = 0
      self.control_mode = 0
      self.simple_lat_debug = rospy_message_converter.msg.SimpleLateralDebug()
      self.par_control_statemachine = rospy_message_converter.msg.control_statemachine_DebugOut()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di3dB4d2i37d().pack(_x.throttle, _x.brake, _x.steering_rate, _x.steering_angle, _x.steering_torque, _x.parking_brake, _x.speed, _x.acceleration, _x.axle_torqaue, _x.stop_distance, _x.gear_location, _x.control_mode, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.simple_lat_debug.lateral_acceleration, _x.simple_lat_debug.lateral_jerk, _x.simple_lat_debug.ref_heading_rate, _x.simple_lat_debug.heading_rate, _x.simple_lat_debug.ref_heading_acceleration, _x.simple_lat_debug.heading_acceleration, _x.simple_lat_debug.heading_error_acceleration, _x.simple_lat_debug.ref_heading_jerk, _x.simple_lat_debug.heading_jerk, _x.simple_lat_debug.heading_error_jerk, _x.simple_lat_debug.lateral_error_feedback, _x.simple_lat_debug.heading_error_feedback, _x.simple_lat_debug.current_target_point.path_point.x, _x.simple_lat_debug.current_target_point.path_point.y, _x.simple_lat_debug.current_target_point.path_point.z, _x.simple_lat_debug.current_target_point.path_point.theta, _x.simple_lat_debug.current_target_point.path_point.kappa, _x.simple_lat_debug.current_target_point.path_point.s, _x.simple_lat_debug.current_target_point.path_point.dkappa, _x.simple_lat_debug.current_target_point.path_point.ddkappa))
      _x = self.simple_lat_debug.current_target_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14didB().pack(_x.simple_lat_debug.current_target_point.path_point.x_derivative, _x.simple_lat_debug.current_target_point.path_point.y_derivative, _x.simple_lat_debug.current_target_point.v, _x.simple_lat_debug.current_target_point.a, _x.simple_lat_debug.current_target_point.relative_time, _x.simple_lat_debug.current_target_point.da, _x.simple_lat_debug.current_target_point.steer, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_x, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_y, _x.simple_lat_debug.current_target_point.gaussian_info.correlation, _x.simple_lat_debug.current_target_point.gaussian_info.area_probability, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_a, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_b, _x.simple_lat_debug.current_target_point.gaussian_info.theta_a, _x.simple_lat_debug.current_target_point.gear, _x.simple_lat_debug.steer_angle_feedback_augment, _x.par_control_statemachine.estop))
      _x = self.par_control_statemachine.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iBi2Bi5fi4B2f2dQ().pack(_x.par_control_statemachine.control_state, _x.par_control_statemachine.is_finish, _x.par_control_statemachine.aborttype, _x.par_control_statemachine.is_eps_hand_shake_ok, _x.par_control_statemachine.is_vcu_hand_shake_ok, _x.par_control_statemachine.Gear_request, _x.par_control_statemachine.Steering_output, _x.par_control_statemachine.current_location_x, _x.par_control_statemachine.current_location_y, _x.par_control_statemachine.target_location_x, _x.par_control_statemachine.target_location_y, _x.par_control_statemachine.bind_status, _x.par_control_statemachine.has_receive_10ms, _x.par_control_statemachine.has_receive_bind, _x.par_control_statemachine.has_receive_planning, _x.par_control_statemachine.has_receive_location, _x.par_control_statemachine.steer_angle_feedback, _x.par_control_statemachine.steer_angle_feedforward, _x.par_control_statemachine.stop_distance, _x.par_control_statemachine.sum_s, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.simple_lat_debug is None:
        self.simple_lat_debug = rospy_message_converter.msg.SimpleLateralDebug()
      if self.par_control_statemachine is None:
        self.par_control_statemachine = rospy_message_converter.msg.control_statemachine_DebugOut()
      end = 0
      _x = self
      start = end
      end += 373
      (_x.throttle, _x.brake, _x.steering_rate, _x.steering_angle, _x.steering_torque, _x.parking_brake, _x.speed, _x.acceleration, _x.axle_torqaue, _x.stop_distance, _x.gear_location, _x.control_mode, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.simple_lat_debug.lateral_acceleration, _x.simple_lat_debug.lateral_jerk, _x.simple_lat_debug.ref_heading_rate, _x.simple_lat_debug.heading_rate, _x.simple_lat_debug.ref_heading_acceleration, _x.simple_lat_debug.heading_acceleration, _x.simple_lat_debug.heading_error_acceleration, _x.simple_lat_debug.ref_heading_jerk, _x.simple_lat_debug.heading_jerk, _x.simple_lat_debug.heading_error_jerk, _x.simple_lat_debug.lateral_error_feedback, _x.simple_lat_debug.heading_error_feedback, _x.simple_lat_debug.current_target_point.path_point.x, _x.simple_lat_debug.current_target_point.path_point.y, _x.simple_lat_debug.current_target_point.path_point.z, _x.simple_lat_debug.current_target_point.path_point.theta, _x.simple_lat_debug.current_target_point.path_point.kappa, _x.simple_lat_debug.current_target_point.path_point.s, _x.simple_lat_debug.current_target_point.path_point.dkappa, _x.simple_lat_debug.current_target_point.path_point.ddkappa,) = _get_struct_di3dB4d2i37d().unpack(str[start:end])
      self.parking_brake = bool(self.parking_brake)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.simple_lat_debug.current_target_point.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.simple_lat_debug.current_target_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 125
      (_x.simple_lat_debug.current_target_point.path_point.x_derivative, _x.simple_lat_debug.current_target_point.path_point.y_derivative, _x.simple_lat_debug.current_target_point.v, _x.simple_lat_debug.current_target_point.a, _x.simple_lat_debug.current_target_point.relative_time, _x.simple_lat_debug.current_target_point.da, _x.simple_lat_debug.current_target_point.steer, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_x, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_y, _x.simple_lat_debug.current_target_point.gaussian_info.correlation, _x.simple_lat_debug.current_target_point.gaussian_info.area_probability, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_a, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_b, _x.simple_lat_debug.current_target_point.gaussian_info.theta_a, _x.simple_lat_debug.current_target_point.gear, _x.simple_lat_debug.steer_angle_feedback_augment, _x.par_control_statemachine.estop,) = _get_struct_14didB().unpack(str[start:end])
      self.par_control_statemachine.estop = bool(self.par_control_statemachine.estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.par_control_statemachine.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.par_control_statemachine.status = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.par_control_statemachine.control_state, _x.par_control_statemachine.is_finish, _x.par_control_statemachine.aborttype, _x.par_control_statemachine.is_eps_hand_shake_ok, _x.par_control_statemachine.is_vcu_hand_shake_ok, _x.par_control_statemachine.Gear_request, _x.par_control_statemachine.Steering_output, _x.par_control_statemachine.current_location_x, _x.par_control_statemachine.current_location_y, _x.par_control_statemachine.target_location_x, _x.par_control_statemachine.target_location_y, _x.par_control_statemachine.bind_status, _x.par_control_statemachine.has_receive_10ms, _x.par_control_statemachine.has_receive_bind, _x.par_control_statemachine.has_receive_planning, _x.par_control_statemachine.has_receive_location, _x.par_control_statemachine.steer_angle_feedback, _x.par_control_statemachine.steer_angle_feedforward, _x.par_control_statemachine.stop_distance, _x.par_control_statemachine.sum_s, _x.publish_ptp_ts,) = _get_struct_iBi2Bi5fi4B2f2dQ().unpack(str[start:end])
      self.par_control_statemachine.is_finish = bool(self.par_control_statemachine.is_finish)
      self.par_control_statemachine.is_eps_hand_shake_ok = bool(self.par_control_statemachine.is_eps_hand_shake_ok)
      self.par_control_statemachine.is_vcu_hand_shake_ok = bool(self.par_control_statemachine.is_vcu_hand_shake_ok)
      self.par_control_statemachine.has_receive_10ms = bool(self.par_control_statemachine.has_receive_10ms)
      self.par_control_statemachine.has_receive_bind = bool(self.par_control_statemachine.has_receive_bind)
      self.par_control_statemachine.has_receive_planning = bool(self.par_control_statemachine.has_receive_planning)
      self.par_control_statemachine.has_receive_location = bool(self.par_control_statemachine.has_receive_location)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di3dB4d2i37d().pack(_x.throttle, _x.brake, _x.steering_rate, _x.steering_angle, _x.steering_torque, _x.parking_brake, _x.speed, _x.acceleration, _x.axle_torqaue, _x.stop_distance, _x.gear_location, _x.control_mode, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.simple_lat_debug.lateral_acceleration, _x.simple_lat_debug.lateral_jerk, _x.simple_lat_debug.ref_heading_rate, _x.simple_lat_debug.heading_rate, _x.simple_lat_debug.ref_heading_acceleration, _x.simple_lat_debug.heading_acceleration, _x.simple_lat_debug.heading_error_acceleration, _x.simple_lat_debug.ref_heading_jerk, _x.simple_lat_debug.heading_jerk, _x.simple_lat_debug.heading_error_jerk, _x.simple_lat_debug.lateral_error_feedback, _x.simple_lat_debug.heading_error_feedback, _x.simple_lat_debug.current_target_point.path_point.x, _x.simple_lat_debug.current_target_point.path_point.y, _x.simple_lat_debug.current_target_point.path_point.z, _x.simple_lat_debug.current_target_point.path_point.theta, _x.simple_lat_debug.current_target_point.path_point.kappa, _x.simple_lat_debug.current_target_point.path_point.s, _x.simple_lat_debug.current_target_point.path_point.dkappa, _x.simple_lat_debug.current_target_point.path_point.ddkappa))
      _x = self.simple_lat_debug.current_target_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14didB().pack(_x.simple_lat_debug.current_target_point.path_point.x_derivative, _x.simple_lat_debug.current_target_point.path_point.y_derivative, _x.simple_lat_debug.current_target_point.v, _x.simple_lat_debug.current_target_point.a, _x.simple_lat_debug.current_target_point.relative_time, _x.simple_lat_debug.current_target_point.da, _x.simple_lat_debug.current_target_point.steer, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_x, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_y, _x.simple_lat_debug.current_target_point.gaussian_info.correlation, _x.simple_lat_debug.current_target_point.gaussian_info.area_probability, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_a, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_b, _x.simple_lat_debug.current_target_point.gaussian_info.theta_a, _x.simple_lat_debug.current_target_point.gear, _x.simple_lat_debug.steer_angle_feedback_augment, _x.par_control_statemachine.estop))
      _x = self.par_control_statemachine.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iBi2Bi5fi4B2f2dQ().pack(_x.par_control_statemachine.control_state, _x.par_control_statemachine.is_finish, _x.par_control_statemachine.aborttype, _x.par_control_statemachine.is_eps_hand_shake_ok, _x.par_control_statemachine.is_vcu_hand_shake_ok, _x.par_control_statemachine.Gear_request, _x.par_control_statemachine.Steering_output, _x.par_control_statemachine.current_location_x, _x.par_control_statemachine.current_location_y, _x.par_control_statemachine.target_location_x, _x.par_control_statemachine.target_location_y, _x.par_control_statemachine.bind_status, _x.par_control_statemachine.has_receive_10ms, _x.par_control_statemachine.has_receive_bind, _x.par_control_statemachine.has_receive_planning, _x.par_control_statemachine.has_receive_location, _x.par_control_statemachine.steer_angle_feedback, _x.par_control_statemachine.steer_angle_feedforward, _x.par_control_statemachine.stop_distance, _x.par_control_statemachine.sum_s, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.simple_lat_debug is None:
        self.simple_lat_debug = rospy_message_converter.msg.SimpleLateralDebug()
      if self.par_control_statemachine is None:
        self.par_control_statemachine = rospy_message_converter.msg.control_statemachine_DebugOut()
      end = 0
      _x = self
      start = end
      end += 373
      (_x.throttle, _x.brake, _x.steering_rate, _x.steering_angle, _x.steering_torque, _x.parking_brake, _x.speed, _x.acceleration, _x.axle_torqaue, _x.stop_distance, _x.gear_location, _x.control_mode, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.simple_lat_debug.lateral_acceleration, _x.simple_lat_debug.lateral_jerk, _x.simple_lat_debug.ref_heading_rate, _x.simple_lat_debug.heading_rate, _x.simple_lat_debug.ref_heading_acceleration, _x.simple_lat_debug.heading_acceleration, _x.simple_lat_debug.heading_error_acceleration, _x.simple_lat_debug.ref_heading_jerk, _x.simple_lat_debug.heading_jerk, _x.simple_lat_debug.heading_error_jerk, _x.simple_lat_debug.lateral_error_feedback, _x.simple_lat_debug.heading_error_feedback, _x.simple_lat_debug.current_target_point.path_point.x, _x.simple_lat_debug.current_target_point.path_point.y, _x.simple_lat_debug.current_target_point.path_point.z, _x.simple_lat_debug.current_target_point.path_point.theta, _x.simple_lat_debug.current_target_point.path_point.kappa, _x.simple_lat_debug.current_target_point.path_point.s, _x.simple_lat_debug.current_target_point.path_point.dkappa, _x.simple_lat_debug.current_target_point.path_point.ddkappa,) = _get_struct_di3dB4d2i37d().unpack(str[start:end])
      self.parking_brake = bool(self.parking_brake)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.simple_lat_debug.current_target_point.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.simple_lat_debug.current_target_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 125
      (_x.simple_lat_debug.current_target_point.path_point.x_derivative, _x.simple_lat_debug.current_target_point.path_point.y_derivative, _x.simple_lat_debug.current_target_point.v, _x.simple_lat_debug.current_target_point.a, _x.simple_lat_debug.current_target_point.relative_time, _x.simple_lat_debug.current_target_point.da, _x.simple_lat_debug.current_target_point.steer, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_x, _x.simple_lat_debug.current_target_point.gaussian_info.sigma_y, _x.simple_lat_debug.current_target_point.gaussian_info.correlation, _x.simple_lat_debug.current_target_point.gaussian_info.area_probability, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_a, _x.simple_lat_debug.current_target_point.gaussian_info.ellipse_b, _x.simple_lat_debug.current_target_point.gaussian_info.theta_a, _x.simple_lat_debug.current_target_point.gear, _x.simple_lat_debug.steer_angle_feedback_augment, _x.par_control_statemachine.estop,) = _get_struct_14didB().unpack(str[start:end])
      self.par_control_statemachine.estop = bool(self.par_control_statemachine.estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.par_control_statemachine.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.par_control_statemachine.status = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.par_control_statemachine.control_state, _x.par_control_statemachine.is_finish, _x.par_control_statemachine.aborttype, _x.par_control_statemachine.is_eps_hand_shake_ok, _x.par_control_statemachine.is_vcu_hand_shake_ok, _x.par_control_statemachine.Gear_request, _x.par_control_statemachine.Steering_output, _x.par_control_statemachine.current_location_x, _x.par_control_statemachine.current_location_y, _x.par_control_statemachine.target_location_x, _x.par_control_statemachine.target_location_y, _x.par_control_statemachine.bind_status, _x.par_control_statemachine.has_receive_10ms, _x.par_control_statemachine.has_receive_bind, _x.par_control_statemachine.has_receive_planning, _x.par_control_statemachine.has_receive_location, _x.par_control_statemachine.steer_angle_feedback, _x.par_control_statemachine.steer_angle_feedforward, _x.par_control_statemachine.stop_distance, _x.par_control_statemachine.sum_s, _x.publish_ptp_ts,) = _get_struct_iBi2Bi5fi4B2f2dQ().unpack(str[start:end])
      self.par_control_statemachine.is_finish = bool(self.par_control_statemachine.is_finish)
      self.par_control_statemachine.is_eps_hand_shake_ok = bool(self.par_control_statemachine.is_eps_hand_shake_ok)
      self.par_control_statemachine.is_vcu_hand_shake_ok = bool(self.par_control_statemachine.is_vcu_hand_shake_ok)
      self.par_control_statemachine.has_receive_10ms = bool(self.par_control_statemachine.has_receive_10ms)
      self.par_control_statemachine.has_receive_bind = bool(self.par_control_statemachine.has_receive_bind)
      self.par_control_statemachine.has_receive_planning = bool(self.par_control_statemachine.has_receive_planning)
      self.par_control_statemachine.has_receive_location = bool(self.par_control_statemachine.has_receive_location)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14didB = None
def _get_struct_14didB():
    global _struct_14didB
    if _struct_14didB is None:
        _struct_14didB = struct.Struct("<14didB")
    return _struct_14didB
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_di3dB4d2i37d = None
def _get_struct_di3dB4d2i37d():
    global _struct_di3dB4d2i37d
    if _struct_di3dB4d2i37d is None:
        _struct_di3dB4d2i37d = struct.Struct("<di3dB4d2i37d")
    return _struct_di3dB4d2i37d
_struct_iBi2Bi5fi4B2f2dQ = None
def _get_struct_iBi2Bi5fi4B2f2dQ():
    global _struct_iBi2Bi5fi4B2f2dQ
    if _struct_iBi2Bi5fi4B2f2dQ is None:
        _struct_iBi2Bi5fi4B2f2dQ = struct.Struct("<iBi2Bi5fi4B2f2dQ")
    return _struct_iBi2Bi5fi4B2f2dQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParkStInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ParkStInfo(genpy.Message):
  _md5sum = "7dc11922027462a0e1dda5f6c704735c"
  _type = "rospy_message_converter/ParkStInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 PrkgTypSts
int32 SAPAOpMode
int32 SApaStatus
int32 APAReq
uint32 APASlotTrackID
int32 SVCReq
int32 SApaDrivingDir
int32[] SApaPscSlot
int32[] SApaPocSLot
int32 SApaInstruction
uint32 SApaStopDstDisp
int32 SVCEDRReq
uint32 SApaAbortReason
uint32 SAPATextInfo
int32 PSAPOutInstruction
int32 PSAPInstruction
int32 PsapTextInfo
int32 PSAPAbortReason
int32 PSAPHMIStatus
int32 PSAPDrivingDir
uint32 PSAPStopDstDisp
int32 PSAPOutHMIStatus
uint32 SApaProgress
int32 PrkgActvFeatureTyp
"""
  __slots__ = ['PrkgTypSts','SAPAOpMode','SApaStatus','APAReq','APASlotTrackID','SVCReq','SApaDrivingDir','SApaPscSlot','SApaPocSLot','SApaInstruction','SApaStopDstDisp','SVCEDRReq','SApaAbortReason','SAPATextInfo','PSAPOutInstruction','PSAPInstruction','PsapTextInfo','PSAPAbortReason','PSAPHMIStatus','PSAPDrivingDir','PSAPStopDstDisp','PSAPOutHMIStatus','SApaProgress','PrkgActvFeatureTyp']
  _slot_types = ['int32','int32','int32','int32','uint32','int32','int32','int32[]','int32[]','int32','uint32','int32','uint32','uint32','int32','int32','int32','int32','int32','int32','uint32','int32','uint32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PrkgTypSts,SAPAOpMode,SApaStatus,APAReq,APASlotTrackID,SVCReq,SApaDrivingDir,SApaPscSlot,SApaPocSLot,SApaInstruction,SApaStopDstDisp,SVCEDRReq,SApaAbortReason,SAPATextInfo,PSAPOutInstruction,PSAPInstruction,PsapTextInfo,PSAPAbortReason,PSAPHMIStatus,PSAPDrivingDir,PSAPStopDstDisp,PSAPOutHMIStatus,SApaProgress,PrkgActvFeatureTyp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkStInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.PrkgTypSts is None:
        self.PrkgTypSts = 0
      if self.SAPAOpMode is None:
        self.SAPAOpMode = 0
      if self.SApaStatus is None:
        self.SApaStatus = 0
      if self.APAReq is None:
        self.APAReq = 0
      if self.APASlotTrackID is None:
        self.APASlotTrackID = 0
      if self.SVCReq is None:
        self.SVCReq = 0
      if self.SApaDrivingDir is None:
        self.SApaDrivingDir = 0
      if self.SApaPscSlot is None:
        self.SApaPscSlot = []
      if self.SApaPocSLot is None:
        self.SApaPocSLot = []
      if self.SApaInstruction is None:
        self.SApaInstruction = 0
      if self.SApaStopDstDisp is None:
        self.SApaStopDstDisp = 0
      if self.SVCEDRReq is None:
        self.SVCEDRReq = 0
      if self.SApaAbortReason is None:
        self.SApaAbortReason = 0
      if self.SAPATextInfo is None:
        self.SAPATextInfo = 0
      if self.PSAPOutInstruction is None:
        self.PSAPOutInstruction = 0
      if self.PSAPInstruction is None:
        self.PSAPInstruction = 0
      if self.PsapTextInfo is None:
        self.PsapTextInfo = 0
      if self.PSAPAbortReason is None:
        self.PSAPAbortReason = 0
      if self.PSAPHMIStatus is None:
        self.PSAPHMIStatus = 0
      if self.PSAPDrivingDir is None:
        self.PSAPDrivingDir = 0
      if self.PSAPStopDstDisp is None:
        self.PSAPStopDstDisp = 0
      if self.PSAPOutHMIStatus is None:
        self.PSAPOutHMIStatus = 0
      if self.SApaProgress is None:
        self.SApaProgress = 0
      if self.PrkgActvFeatureTyp is None:
        self.PrkgActvFeatureTyp = 0
    else:
      self.PrkgTypSts = 0
      self.SAPAOpMode = 0
      self.SApaStatus = 0
      self.APAReq = 0
      self.APASlotTrackID = 0
      self.SVCReq = 0
      self.SApaDrivingDir = 0
      self.SApaPscSlot = []
      self.SApaPocSLot = []
      self.SApaInstruction = 0
      self.SApaStopDstDisp = 0
      self.SVCEDRReq = 0
      self.SApaAbortReason = 0
      self.SAPATextInfo = 0
      self.PSAPOutInstruction = 0
      self.PSAPInstruction = 0
      self.PsapTextInfo = 0
      self.PSAPAbortReason = 0
      self.PSAPHMIStatus = 0
      self.PSAPDrivingDir = 0
      self.PSAPStopDstDisp = 0
      self.PSAPOutHMIStatus = 0
      self.SApaProgress = 0
      self.PrkgActvFeatureTyp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4iI2i().pack(_x.PrkgTypSts, _x.SAPAOpMode, _x.SApaStatus, _x.APAReq, _x.APASlotTrackID, _x.SVCReq, _x.SApaDrivingDir))
      length = len(self.SApaPscSlot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SApaPscSlot))
      length = len(self.SApaPocSLot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SApaPocSLot))
      _x = self
      buff.write(_get_struct_iIi2I6iIiIi().pack(_x.SApaInstruction, _x.SApaStopDstDisp, _x.SVCEDRReq, _x.SApaAbortReason, _x.SAPATextInfo, _x.PSAPOutInstruction, _x.PSAPInstruction, _x.PsapTextInfo, _x.PSAPAbortReason, _x.PSAPHMIStatus, _x.PSAPDrivingDir, _x.PSAPStopDstDisp, _x.PSAPOutHMIStatus, _x.SApaProgress, _x.PrkgActvFeatureTyp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.PrkgTypSts, _x.SAPAOpMode, _x.SApaStatus, _x.APAReq, _x.APASlotTrackID, _x.SVCReq, _x.SApaDrivingDir,) = _get_struct_4iI2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SApaPscSlot = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SApaPocSLot = s.unpack(str[start:end])
      _x = self
      start = end
      end += 60
      (_x.SApaInstruction, _x.SApaStopDstDisp, _x.SVCEDRReq, _x.SApaAbortReason, _x.SAPATextInfo, _x.PSAPOutInstruction, _x.PSAPInstruction, _x.PsapTextInfo, _x.PSAPAbortReason, _x.PSAPHMIStatus, _x.PSAPDrivingDir, _x.PSAPStopDstDisp, _x.PSAPOutHMIStatus, _x.SApaProgress, _x.PrkgActvFeatureTyp,) = _get_struct_iIi2I6iIiIi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4iI2i().pack(_x.PrkgTypSts, _x.SAPAOpMode, _x.SApaStatus, _x.APAReq, _x.APASlotTrackID, _x.SVCReq, _x.SApaDrivingDir))
      length = len(self.SApaPscSlot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SApaPscSlot.tostring())
      length = len(self.SApaPocSLot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SApaPocSLot.tostring())
      _x = self
      buff.write(_get_struct_iIi2I6iIiIi().pack(_x.SApaInstruction, _x.SApaStopDstDisp, _x.SVCEDRReq, _x.SApaAbortReason, _x.SAPATextInfo, _x.PSAPOutInstruction, _x.PSAPInstruction, _x.PsapTextInfo, _x.PSAPAbortReason, _x.PSAPHMIStatus, _x.PSAPDrivingDir, _x.PSAPStopDstDisp, _x.PSAPOutHMIStatus, _x.SApaProgress, _x.PrkgActvFeatureTyp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.PrkgTypSts, _x.SAPAOpMode, _x.SApaStatus, _x.APAReq, _x.APASlotTrackID, _x.SVCReq, _x.SApaDrivingDir,) = _get_struct_4iI2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SApaPscSlot = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SApaPocSLot = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 60
      (_x.SApaInstruction, _x.SApaStopDstDisp, _x.SVCEDRReq, _x.SApaAbortReason, _x.SAPATextInfo, _x.PSAPOutInstruction, _x.PSAPInstruction, _x.PsapTextInfo, _x.PSAPAbortReason, _x.PSAPHMIStatus, _x.PSAPDrivingDir, _x.PSAPStopDstDisp, _x.PSAPOutHMIStatus, _x.SApaProgress, _x.PrkgActvFeatureTyp,) = _get_struct_iIi2I6iIiIi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4iI2i = None
def _get_struct_4iI2i():
    global _struct_4iI2i
    if _struct_4iI2i is None:
        _struct_4iI2i = struct.Struct("<4iI2i")
    return _struct_4iI2i
_struct_iIi2I6iIiIi = None
def _get_struct_iIi2I6iIiIi():
    global _struct_iIi2I6iIiIi
    if _struct_iIi2I6iIiIi is None:
        _struct_iIi2I6iIiIi = struct.Struct("<iIi2I6iIiIi")
    return _struct_iIi2I6iIiIi

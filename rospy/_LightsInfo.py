# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LightsInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LightsInfo(genpy.Message):
  _md5sum = "9f6ff6962d7aa8570fa9d22872ebc258"
  _type = "rospy_message_converter/LightsInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[] FogLiSts
int32[] BeamSts
int32 HzrdWarnSts
int32[] TurnIndcrLiSts
int32[] MirrLigtSts
bool[] LgtErrBrkLi
bool[] LgtErrTurnIndcn
int32[] FogLiFctActvSts
uint32 LiSnsrData
bool LiSnsrFailSts
bool[] DowWarnAmbLeSts
"""
  __slots__ = ['FogLiSts','BeamSts','HzrdWarnSts','TurnIndcrLiSts','MirrLigtSts','LgtErrBrkLi','LgtErrTurnIndcn','FogLiFctActvSts','LiSnsrData','LiSnsrFailSts','DowWarnAmbLeSts']
  _slot_types = ['int32[]','int32[]','int32','int32[]','int32[]','bool[]','bool[]','int32[]','uint32','bool','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FogLiSts,BeamSts,HzrdWarnSts,TurnIndcrLiSts,MirrLigtSts,LgtErrBrkLi,LgtErrTurnIndcn,FogLiFctActvSts,LiSnsrData,LiSnsrFailSts,DowWarnAmbLeSts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LightsInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FogLiSts is None:
        self.FogLiSts = []
      if self.BeamSts is None:
        self.BeamSts = []
      if self.HzrdWarnSts is None:
        self.HzrdWarnSts = 0
      if self.TurnIndcrLiSts is None:
        self.TurnIndcrLiSts = []
      if self.MirrLigtSts is None:
        self.MirrLigtSts = []
      if self.LgtErrBrkLi is None:
        self.LgtErrBrkLi = []
      if self.LgtErrTurnIndcn is None:
        self.LgtErrTurnIndcn = []
      if self.FogLiFctActvSts is None:
        self.FogLiFctActvSts = []
      if self.LiSnsrData is None:
        self.LiSnsrData = 0
      if self.LiSnsrFailSts is None:
        self.LiSnsrFailSts = False
      if self.DowWarnAmbLeSts is None:
        self.DowWarnAmbLeSts = []
    else:
      self.FogLiSts = []
      self.BeamSts = []
      self.HzrdWarnSts = 0
      self.TurnIndcrLiSts = []
      self.MirrLigtSts = []
      self.LgtErrBrkLi = []
      self.LgtErrTurnIndcn = []
      self.FogLiFctActvSts = []
      self.LiSnsrData = 0
      self.LiSnsrFailSts = False
      self.DowWarnAmbLeSts = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.FogLiSts))
      length = len(self.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.BeamSts))
      _x = self.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.TurnIndcrLiSts))
      length = len(self.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.MirrLigtSts))
      length = len(self.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.LgtErrBrkLi))
      length = len(self.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.LgtErrTurnIndcn))
      length = len(self.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.FogLiFctActvSts))
      _x = self
      buff.write(_get_struct_IB().pack(_x.LiSnsrData, _x.LiSnsrFailSts))
      length = len(self.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.DowWarnAmbLeSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FogLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BeamSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TurnIndcrLiSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.MirrLigtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LgtErrBrkLi = s.unpack(str[start:end])
      self.LgtErrBrkLi = list(map(bool, self.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LgtErrTurnIndcn = s.unpack(str[start:end])
      self.LgtErrTurnIndcn = list(map(bool, self.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FogLiFctActvSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.LiSnsrData, _x.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.LiSnsrFailSts = bool(self.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DowWarnAmbLeSts = s.unpack(str[start:end])
      self.DowWarnAmbLeSts = list(map(bool, self.DowWarnAmbLeSts))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.FogLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.FogLiSts.tostring())
      length = len(self.BeamSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.BeamSts.tostring())
      _x = self.HzrdWarnSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.TurnIndcrLiSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.TurnIndcrLiSts.tostring())
      length = len(self.MirrLigtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.MirrLigtSts.tostring())
      length = len(self.LgtErrBrkLi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.LgtErrBrkLi.tostring())
      length = len(self.LgtErrTurnIndcn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.LgtErrTurnIndcn.tostring())
      length = len(self.FogLiFctActvSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.FogLiFctActvSts.tostring())
      _x = self
      buff.write(_get_struct_IB().pack(_x.LiSnsrData, _x.LiSnsrFailSts))
      length = len(self.DowWarnAmbLeSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.DowWarnAmbLeSts.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FogLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BeamSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.HzrdWarnSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TurnIndcrLiSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.MirrLigtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LgtErrBrkLi = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.LgtErrBrkLi = list(map(bool, self.LgtErrBrkLi))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LgtErrTurnIndcn = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.LgtErrTurnIndcn = list(map(bool, self.LgtErrTurnIndcn))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FogLiFctActvSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 5
      (_x.LiSnsrData, _x.LiSnsrFailSts,) = _get_struct_IB().unpack(str[start:end])
      self.LiSnsrFailSts = bool(self.LiSnsrFailSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DowWarnAmbLeSts = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.DowWarnAmbLeSts = list(map(bool, self.DowWarnAmbLeSts))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

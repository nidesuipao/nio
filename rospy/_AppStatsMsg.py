# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AppStatsMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AppStatsMsg(genpy.Message):
  _md5sum = "8ca00c0a9e29947dd065159b9884a41b"
  _type = "rospy_message_converter/AppStatsMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 app_id
string version
string car_info
StatsMsg[] sms

================================================================================
MSG: rospy_message_converter/StatsMsg
uint64 module_id
uint64 date_from_ts
uint64 date_to_ts
TagValues[] vals

================================================================================
MSG: rospy_message_converter/TagValues
string tag
string[] contents
"""
  __slots__ = ['app_id','version','car_info','sms']
  _slot_types = ['uint64','string','string','rospy_message_converter/StatsMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       app_id,version,car_info,sms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AppStatsMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.app_id is None:
        self.app_id = 0
      if self.version is None:
        self.version = ''
      if self.car_info is None:
        self.car_info = ''
      if self.sms is None:
        self.sms = []
    else:
      self.app_id = 0
      self.version = ''
      self.car_info = ''
      self.sms = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.app_id
      buff.write(_get_struct_Q().pack(_x))
      _x = self.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.car_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.sms)
      buff.write(_struct_I.pack(length))
      for val1 in self.sms:
        _x = val1
        buff.write(_get_struct_3Q().pack(_x.module_id, _x.date_from_ts, _x.date_to_ts))
        length = len(val1.vals)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vals:
          _x = val2.tag
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.contents)
          buff.write(_struct_I.pack(length))
          for val3 in val2.contents:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sms is None:
        self.sms = None
      end = 0
      start = end
      end += 8
      (self.app_id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.car_info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.car_info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StatsMsg()
        _x = val1
        start = end
        end += 24
        (_x.module_id, _x.date_from_ts, _x.date_to_ts,) = _get_struct_3Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vals = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.TagValues()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tag = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.tag = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.contents = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.contents.append(val3)
          val1.vals.append(val2)
        self.sms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.app_id
      buff.write(_get_struct_Q().pack(_x))
      _x = self.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.car_info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.sms)
      buff.write(_struct_I.pack(length))
      for val1 in self.sms:
        _x = val1
        buff.write(_get_struct_3Q().pack(_x.module_id, _x.date_from_ts, _x.date_to_ts))
        length = len(val1.vals)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vals:
          _x = val2.tag
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.contents)
          buff.write(_struct_I.pack(length))
          for val3 in val2.contents:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sms is None:
        self.sms = None
      end = 0
      start = end
      end += 8
      (self.app_id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.car_info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.car_info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StatsMsg()
        _x = val1
        start = end
        end += 24
        (_x.module_id, _x.date_from_ts, _x.date_to_ts,) = _get_struct_3Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vals = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.TagValues()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tag = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.tag = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.contents = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.contents.append(val3)
          val1.vals.append(val2)
        self.sms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Q = None
def _get_struct_3Q():
    global _struct_3Q
    if _struct_3Q is None:
        _struct_3Q = struct.Struct("<3Q")
    return _struct_3Q
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

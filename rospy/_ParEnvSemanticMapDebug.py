# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvSemanticMapDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvSemanticMapDebug(genpy.Message):
  _md5sum = "c28011c47cd508ff720c102b99cea809"
  _type = "rospy_message_converter/ParEnvSemanticMapDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 module_state
bool vehicle_state_valid
bool uss_instance_valid
bool svc_instance_valid
int32 feature_type
int32 feature_state
float32 latest_location_odom_x
float32 latest_location_odom_y
float32 latest_location_odom_theta
float32 latest_location_psap_x
float32 latest_location_psap_y
float32 latest_location_psap_theta
uint32 slot_num
uint32 slot_corner_valid_num
uint32 slot_parkstop_valid_num
uint32 slot_curb_valid_num
ParEnvSlotObjectResult left_corner
ParEnvSlotObjectResult right_corner
ParEnvSlotObjectResult curb_or_parkstop
ParEnvSlotAssembyResult[] slot_results

================================================================================
MSG: rospy_message_converter/ParEnvSlotObjectResult
uint32 slot_id
float32 project_x_margin
float32 project_y_margin
ParEnvObjectInfo object_x_margin
ParEnvObjectInfo object_y_margin

================================================================================
MSG: rospy_message_converter/ParEnvObjectInfo
int32 type
int32 src
ParEnvObjectPoint pt
ParEnvObjectSegment line
ParEnvObjectPolygon polygon

================================================================================
MSG: rospy_message_converter/ParEnvObjectPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/ParEnvObjectSegment
ParEnvObjectPoint pt1
ParEnvObjectPoint pt2

================================================================================
MSG: rospy_message_converter/ParEnvObjectPolygon
ParEnvObjectPoint[] pts

================================================================================
MSG: rospy_message_converter/ParEnvSlotAssembyResult
ParEnvSlotObjectResult left_corner
ParEnvSlotObjectResult right_corner
ParEnvSlotObjectResult curb_or_parkstop
"""
  __slots__ = ['module_state','vehicle_state_valid','uss_instance_valid','svc_instance_valid','feature_type','feature_state','latest_location_odom_x','latest_location_odom_y','latest_location_odom_theta','latest_location_psap_x','latest_location_psap_y','latest_location_psap_theta','slot_num','slot_corner_valid_num','slot_parkstop_valid_num','slot_curb_valid_num','left_corner','right_corner','curb_or_parkstop','slot_results']
  _slot_types = ['int32','bool','bool','bool','int32','int32','float32','float32','float32','float32','float32','float32','uint32','uint32','uint32','uint32','rospy_message_converter/ParEnvSlotObjectResult','rospy_message_converter/ParEnvSlotObjectResult','rospy_message_converter/ParEnvSlotObjectResult','rospy_message_converter/ParEnvSlotAssembyResult[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       module_state,vehicle_state_valid,uss_instance_valid,svc_instance_valid,feature_type,feature_state,latest_location_odom_x,latest_location_odom_y,latest_location_odom_theta,latest_location_psap_x,latest_location_psap_y,latest_location_psap_theta,slot_num,slot_corner_valid_num,slot_parkstop_valid_num,slot_curb_valid_num,left_corner,right_corner,curb_or_parkstop,slot_results

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvSemanticMapDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.module_state is None:
        self.module_state = 0
      if self.vehicle_state_valid is None:
        self.vehicle_state_valid = False
      if self.uss_instance_valid is None:
        self.uss_instance_valid = False
      if self.svc_instance_valid is None:
        self.svc_instance_valid = False
      if self.feature_type is None:
        self.feature_type = 0
      if self.feature_state is None:
        self.feature_state = 0
      if self.latest_location_odom_x is None:
        self.latest_location_odom_x = 0.
      if self.latest_location_odom_y is None:
        self.latest_location_odom_y = 0.
      if self.latest_location_odom_theta is None:
        self.latest_location_odom_theta = 0.
      if self.latest_location_psap_x is None:
        self.latest_location_psap_x = 0.
      if self.latest_location_psap_y is None:
        self.latest_location_psap_y = 0.
      if self.latest_location_psap_theta is None:
        self.latest_location_psap_theta = 0.
      if self.slot_num is None:
        self.slot_num = 0
      if self.slot_corner_valid_num is None:
        self.slot_corner_valid_num = 0
      if self.slot_parkstop_valid_num is None:
        self.slot_parkstop_valid_num = 0
      if self.slot_curb_valid_num is None:
        self.slot_curb_valid_num = 0
      if self.left_corner is None:
        self.left_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.right_corner is None:
        self.right_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.curb_or_parkstop is None:
        self.curb_or_parkstop = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.slot_results is None:
        self.slot_results = []
    else:
      self.module_state = 0
      self.vehicle_state_valid = False
      self.uss_instance_valid = False
      self.svc_instance_valid = False
      self.feature_type = 0
      self.feature_state = 0
      self.latest_location_odom_x = 0.
      self.latest_location_odom_y = 0.
      self.latest_location_odom_theta = 0.
      self.latest_location_psap_x = 0.
      self.latest_location_psap_y = 0.
      self.latest_location_psap_theta = 0.
      self.slot_num = 0
      self.slot_corner_valid_num = 0
      self.slot_parkstop_valid_num = 0
      self.slot_curb_valid_num = 0
      self.left_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      self.right_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      self.curb_or_parkstop = rospy_message_converter.msg.ParEnvSlotObjectResult()
      self.slot_results = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3B2i6f5I2f2i6f().pack(_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.svc_instance_valid, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.slot_num, _x.slot_corner_valid_num, _x.slot_parkstop_valid_num, _x.slot_curb_valid_num, _x.left_corner.slot_id, _x.left_corner.project_x_margin, _x.left_corner.project_y_margin, _x.left_corner.object_x_margin.type, _x.left_corner.object_x_margin.src, _x.left_corner.object_x_margin.pt.x, _x.left_corner.object_x_margin.pt.y, _x.left_corner.object_x_margin.line.pt1.x, _x.left_corner.object_x_margin.line.pt1.y, _x.left_corner.object_x_margin.line.pt2.x, _x.left_corner.object_x_margin.line.pt2.y))
      length = len(self.left_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.left_corner.object_y_margin.type, _x.left_corner.object_y_margin.src, _x.left_corner.object_y_margin.pt.x, _x.left_corner.object_y_margin.pt.y, _x.left_corner.object_y_margin.line.pt1.x, _x.left_corner.object_y_margin.line.pt1.y, _x.left_corner.object_y_margin.line.pt2.x, _x.left_corner.object_y_margin.line.pt2.y))
      length = len(self.left_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.right_corner.slot_id, _x.right_corner.project_x_margin, _x.right_corner.project_y_margin, _x.right_corner.object_x_margin.type, _x.right_corner.object_x_margin.src, _x.right_corner.object_x_margin.pt.x, _x.right_corner.object_x_margin.pt.y, _x.right_corner.object_x_margin.line.pt1.x, _x.right_corner.object_x_margin.line.pt1.y, _x.right_corner.object_x_margin.line.pt2.x, _x.right_corner.object_x_margin.line.pt2.y))
      length = len(self.right_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.right_corner.object_y_margin.type, _x.right_corner.object_y_margin.src, _x.right_corner.object_y_margin.pt.x, _x.right_corner.object_y_margin.pt.y, _x.right_corner.object_y_margin.line.pt1.x, _x.right_corner.object_y_margin.line.pt1.y, _x.right_corner.object_y_margin.line.pt2.x, _x.right_corner.object_y_margin.line.pt2.y))
      length = len(self.right_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.curb_or_parkstop.slot_id, _x.curb_or_parkstop.project_x_margin, _x.curb_or_parkstop.project_y_margin, _x.curb_or_parkstop.object_x_margin.type, _x.curb_or_parkstop.object_x_margin.src, _x.curb_or_parkstop.object_x_margin.pt.x, _x.curb_or_parkstop.object_x_margin.pt.y, _x.curb_or_parkstop.object_x_margin.line.pt1.x, _x.curb_or_parkstop.object_x_margin.line.pt1.y, _x.curb_or_parkstop.object_x_margin.line.pt2.x, _x.curb_or_parkstop.object_x_margin.line.pt2.y))
      length = len(self.curb_or_parkstop.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.curb_or_parkstop.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.curb_or_parkstop.object_y_margin.type, _x.curb_or_parkstop.object_y_margin.src, _x.curb_or_parkstop.object_y_margin.pt.x, _x.curb_or_parkstop.object_y_margin.pt.y, _x.curb_or_parkstop.object_y_margin.line.pt1.x, _x.curb_or_parkstop.object_y_margin.line.pt1.y, _x.curb_or_parkstop.object_y_margin.line.pt2.x, _x.curb_or_parkstop.object_y_margin.line.pt2.y))
      length = len(self.curb_or_parkstop.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.curb_or_parkstop.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.slot_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.slot_results:
        _v1 = val1.left_corner
        _x = _v1
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v2 = _v1.object_x_margin
        _x = _v2
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v3 = _v2.pt
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = _v2.line
        _v5 = _v4.pt1
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = _v4.pt2
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v7 = _v2.polygon
        length = len(_v7.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v7.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v8 = _v1.object_y_margin
        _x = _v8
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v9 = _v8.pt
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v10 = _v8.line
        _v11 = _v10.pt1
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = _v10.pt2
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v13 = _v8.polygon
        length = len(_v13.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v13.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v14 = val1.right_corner
        _x = _v14
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v15 = _v14.object_x_margin
        _x = _v15
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v16 = _v15.pt
        _x = _v16
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v17 = _v15.line
        _v18 = _v17.pt1
        _x = _v18
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v19 = _v17.pt2
        _x = _v19
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v20 = _v15.polygon
        length = len(_v20.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v20.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v21 = _v14.object_y_margin
        _x = _v21
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v22 = _v21.pt
        _x = _v22
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v23 = _v21.line
        _v24 = _v23.pt1
        _x = _v24
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v25 = _v23.pt2
        _x = _v25
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v26 = _v21.polygon
        length = len(_v26.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v26.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v27 = val1.curb_or_parkstop
        _x = _v27
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v28 = _v27.object_x_margin
        _x = _v28
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v29 = _v28.pt
        _x = _v29
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v30 = _v28.line
        _v31 = _v30.pt1
        _x = _v31
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v32 = _v30.pt2
        _x = _v32
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v33 = _v28.polygon
        length = len(_v33.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v33.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v34 = _v27.object_y_margin
        _x = _v34
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v35 = _v34.pt
        _x = _v35
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v36 = _v34.line
        _v37 = _v36.pt1
        _x = _v37
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v38 = _v36.pt2
        _x = _v38
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v39 = _v34.polygon
        length = len(_v39.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v39.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_corner is None:
        self.left_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.right_corner is None:
        self.right_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.curb_or_parkstop is None:
        self.curb_or_parkstop = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.slot_results is None:
        self.slot_results = None
      end = 0
      _x = self
      start = end
      end += 99
      (_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.svc_instance_valid, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.slot_num, _x.slot_corner_valid_num, _x.slot_parkstop_valid_num, _x.slot_curb_valid_num, _x.left_corner.slot_id, _x.left_corner.project_x_margin, _x.left_corner.project_y_margin, _x.left_corner.object_x_margin.type, _x.left_corner.object_x_margin.src, _x.left_corner.object_x_margin.pt.x, _x.left_corner.object_x_margin.pt.y, _x.left_corner.object_x_margin.line.pt1.x, _x.left_corner.object_x_margin.line.pt1.y, _x.left_corner.object_x_margin.line.pt2.x, _x.left_corner.object_x_margin.line.pt2.y,) = _get_struct_i3B2i6f5I2f2i6f().unpack(str[start:end])
      self.vehicle_state_valid = bool(self.vehicle_state_valid)
      self.uss_instance_valid = bool(self.uss_instance_valid)
      self.svc_instance_valid = bool(self.svc_instance_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.left_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.left_corner.object_y_margin.type, _x.left_corner.object_y_margin.src, _x.left_corner.object_y_margin.pt.x, _x.left_corner.object_y_margin.pt.y, _x.left_corner.object_y_margin.line.pt1.x, _x.left_corner.object_y_margin.line.pt1.y, _x.left_corner.object_y_margin.line.pt2.x, _x.left_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.left_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.right_corner.slot_id, _x.right_corner.project_x_margin, _x.right_corner.project_y_margin, _x.right_corner.object_x_margin.type, _x.right_corner.object_x_margin.src, _x.right_corner.object_x_margin.pt.x, _x.right_corner.object_x_margin.pt.y, _x.right_corner.object_x_margin.line.pt1.x, _x.right_corner.object_x_margin.line.pt1.y, _x.right_corner.object_x_margin.line.pt2.x, _x.right_corner.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.right_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.right_corner.object_y_margin.type, _x.right_corner.object_y_margin.src, _x.right_corner.object_y_margin.pt.x, _x.right_corner.object_y_margin.pt.y, _x.right_corner.object_y_margin.line.pt1.x, _x.right_corner.object_y_margin.line.pt1.y, _x.right_corner.object_y_margin.line.pt2.x, _x.right_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.right_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.curb_or_parkstop.slot_id, _x.curb_or_parkstop.project_x_margin, _x.curb_or_parkstop.project_y_margin, _x.curb_or_parkstop.object_x_margin.type, _x.curb_or_parkstop.object_x_margin.src, _x.curb_or_parkstop.object_x_margin.pt.x, _x.curb_or_parkstop.object_x_margin.pt.y, _x.curb_or_parkstop.object_x_margin.line.pt1.x, _x.curb_or_parkstop.object_x_margin.line.pt1.y, _x.curb_or_parkstop.object_x_margin.line.pt2.x, _x.curb_or_parkstop.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curb_or_parkstop.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.curb_or_parkstop.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.curb_or_parkstop.object_y_margin.type, _x.curb_or_parkstop.object_y_margin.src, _x.curb_or_parkstop.object_y_margin.pt.x, _x.curb_or_parkstop.object_y_margin.pt.y, _x.curb_or_parkstop.object_y_margin.line.pt1.x, _x.curb_or_parkstop.object_y_margin.line.pt1.y, _x.curb_or_parkstop.object_y_margin.line.pt2.x, _x.curb_or_parkstop.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curb_or_parkstop.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.curb_or_parkstop.object_y_margin.polygon.pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slot_results = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvSlotAssembyResult()
        _v40 = val1.left_corner
        _x = _v40
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v41 = _v40.object_x_margin
        _x = _v41
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v42 = _v41.pt
        _x = _v42
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v43 = _v41.line
        _v44 = _v43.pt1
        _x = _v44
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v45 = _v43.pt2
        _x = _v45
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v46 = _v41.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v46.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v46.pts.append(val5)
        _v47 = _v40.object_y_margin
        _x = _v47
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v48 = _v47.pt
        _x = _v48
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v49 = _v47.line
        _v50 = _v49.pt1
        _x = _v50
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v51 = _v49.pt2
        _x = _v51
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v52 = _v47.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v52.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v52.pts.append(val5)
        _v53 = val1.right_corner
        _x = _v53
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v54 = _v53.object_x_margin
        _x = _v54
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v55 = _v54.pt
        _x = _v55
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v56 = _v54.line
        _v57 = _v56.pt1
        _x = _v57
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v58 = _v56.pt2
        _x = _v58
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v59 = _v54.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v59.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v59.pts.append(val5)
        _v60 = _v53.object_y_margin
        _x = _v60
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v61 = _v60.pt
        _x = _v61
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v62 = _v60.line
        _v63 = _v62.pt1
        _x = _v63
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v64 = _v62.pt2
        _x = _v64
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v65 = _v60.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v65.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v65.pts.append(val5)
        _v66 = val1.curb_or_parkstop
        _x = _v66
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v67 = _v66.object_x_margin
        _x = _v67
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v68 = _v67.pt
        _x = _v68
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v69 = _v67.line
        _v70 = _v69.pt1
        _x = _v70
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v71 = _v69.pt2
        _x = _v71
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v72 = _v67.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v72.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v72.pts.append(val5)
        _v73 = _v66.object_y_margin
        _x = _v73
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v74 = _v73.pt
        _x = _v74
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v75 = _v73.line
        _v76 = _v75.pt1
        _x = _v76
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v77 = _v75.pt2
        _x = _v77
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v78 = _v73.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v78.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v78.pts.append(val5)
        self.slot_results.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3B2i6f5I2f2i6f().pack(_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.svc_instance_valid, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.slot_num, _x.slot_corner_valid_num, _x.slot_parkstop_valid_num, _x.slot_curb_valid_num, _x.left_corner.slot_id, _x.left_corner.project_x_margin, _x.left_corner.project_y_margin, _x.left_corner.object_x_margin.type, _x.left_corner.object_x_margin.src, _x.left_corner.object_x_margin.pt.x, _x.left_corner.object_x_margin.pt.y, _x.left_corner.object_x_margin.line.pt1.x, _x.left_corner.object_x_margin.line.pt1.y, _x.left_corner.object_x_margin.line.pt2.x, _x.left_corner.object_x_margin.line.pt2.y))
      length = len(self.left_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.left_corner.object_y_margin.type, _x.left_corner.object_y_margin.src, _x.left_corner.object_y_margin.pt.x, _x.left_corner.object_y_margin.pt.y, _x.left_corner.object_y_margin.line.pt1.x, _x.left_corner.object_y_margin.line.pt1.y, _x.left_corner.object_y_margin.line.pt2.x, _x.left_corner.object_y_margin.line.pt2.y))
      length = len(self.left_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.right_corner.slot_id, _x.right_corner.project_x_margin, _x.right_corner.project_y_margin, _x.right_corner.object_x_margin.type, _x.right_corner.object_x_margin.src, _x.right_corner.object_x_margin.pt.x, _x.right_corner.object_x_margin.pt.y, _x.right_corner.object_x_margin.line.pt1.x, _x.right_corner.object_x_margin.line.pt1.y, _x.right_corner.object_x_margin.line.pt2.x, _x.right_corner.object_x_margin.line.pt2.y))
      length = len(self.right_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.right_corner.object_y_margin.type, _x.right_corner.object_y_margin.src, _x.right_corner.object_y_margin.pt.x, _x.right_corner.object_y_margin.pt.y, _x.right_corner.object_y_margin.line.pt1.x, _x.right_corner.object_y_margin.line.pt1.y, _x.right_corner.object_y_margin.line.pt2.x, _x.right_corner.object_y_margin.line.pt2.y))
      length = len(self.right_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.curb_or_parkstop.slot_id, _x.curb_or_parkstop.project_x_margin, _x.curb_or_parkstop.project_y_margin, _x.curb_or_parkstop.object_x_margin.type, _x.curb_or_parkstop.object_x_margin.src, _x.curb_or_parkstop.object_x_margin.pt.x, _x.curb_or_parkstop.object_x_margin.pt.y, _x.curb_or_parkstop.object_x_margin.line.pt1.x, _x.curb_or_parkstop.object_x_margin.line.pt1.y, _x.curb_or_parkstop.object_x_margin.line.pt2.x, _x.curb_or_parkstop.object_x_margin.line.pt2.y))
      length = len(self.curb_or_parkstop.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.curb_or_parkstop.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.curb_or_parkstop.object_y_margin.type, _x.curb_or_parkstop.object_y_margin.src, _x.curb_or_parkstop.object_y_margin.pt.x, _x.curb_or_parkstop.object_y_margin.pt.y, _x.curb_or_parkstop.object_y_margin.line.pt1.x, _x.curb_or_parkstop.object_y_margin.line.pt1.y, _x.curb_or_parkstop.object_y_margin.line.pt2.x, _x.curb_or_parkstop.object_y_margin.line.pt2.y))
      length = len(self.curb_or_parkstop.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.curb_or_parkstop.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.slot_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.slot_results:
        _v79 = val1.left_corner
        _x = _v79
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v80 = _v79.object_x_margin
        _x = _v80
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v81 = _v80.pt
        _x = _v81
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v82 = _v80.line
        _v83 = _v82.pt1
        _x = _v83
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v84 = _v82.pt2
        _x = _v84
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v85 = _v80.polygon
        length = len(_v85.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v85.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v86 = _v79.object_y_margin
        _x = _v86
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v87 = _v86.pt
        _x = _v87
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v88 = _v86.line
        _v89 = _v88.pt1
        _x = _v89
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v90 = _v88.pt2
        _x = _v90
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v91 = _v86.polygon
        length = len(_v91.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v91.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v92 = val1.right_corner
        _x = _v92
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v93 = _v92.object_x_margin
        _x = _v93
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v94 = _v93.pt
        _x = _v94
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v95 = _v93.line
        _v96 = _v95.pt1
        _x = _v96
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v97 = _v95.pt2
        _x = _v97
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v98 = _v93.polygon
        length = len(_v98.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v98.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v99 = _v92.object_y_margin
        _x = _v99
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v100 = _v99.pt
        _x = _v100
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v101 = _v99.line
        _v102 = _v101.pt1
        _x = _v102
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v103 = _v101.pt2
        _x = _v103
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v104 = _v99.polygon
        length = len(_v104.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v104.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v105 = val1.curb_or_parkstop
        _x = _v105
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v106 = _v105.object_x_margin
        _x = _v106
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v107 = _v106.pt
        _x = _v107
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v108 = _v106.line
        _v109 = _v108.pt1
        _x = _v109
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v110 = _v108.pt2
        _x = _v110
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v111 = _v106.polygon
        length = len(_v111.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v111.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v112 = _v105.object_y_margin
        _x = _v112
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v113 = _v112.pt
        _x = _v113
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v114 = _v112.line
        _v115 = _v114.pt1
        _x = _v115
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v116 = _v114.pt2
        _x = _v116
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v117 = _v112.polygon
        length = len(_v117.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v117.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_corner is None:
        self.left_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.right_corner is None:
        self.right_corner = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.curb_or_parkstop is None:
        self.curb_or_parkstop = rospy_message_converter.msg.ParEnvSlotObjectResult()
      if self.slot_results is None:
        self.slot_results = None
      end = 0
      _x = self
      start = end
      end += 99
      (_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.svc_instance_valid, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.slot_num, _x.slot_corner_valid_num, _x.slot_parkstop_valid_num, _x.slot_curb_valid_num, _x.left_corner.slot_id, _x.left_corner.project_x_margin, _x.left_corner.project_y_margin, _x.left_corner.object_x_margin.type, _x.left_corner.object_x_margin.src, _x.left_corner.object_x_margin.pt.x, _x.left_corner.object_x_margin.pt.y, _x.left_corner.object_x_margin.line.pt1.x, _x.left_corner.object_x_margin.line.pt1.y, _x.left_corner.object_x_margin.line.pt2.x, _x.left_corner.object_x_margin.line.pt2.y,) = _get_struct_i3B2i6f5I2f2i6f().unpack(str[start:end])
      self.vehicle_state_valid = bool(self.vehicle_state_valid)
      self.uss_instance_valid = bool(self.uss_instance_valid)
      self.svc_instance_valid = bool(self.svc_instance_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.left_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.left_corner.object_y_margin.type, _x.left_corner.object_y_margin.src, _x.left_corner.object_y_margin.pt.x, _x.left_corner.object_y_margin.pt.y, _x.left_corner.object_y_margin.line.pt1.x, _x.left_corner.object_y_margin.line.pt1.y, _x.left_corner.object_y_margin.line.pt2.x, _x.left_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.left_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.right_corner.slot_id, _x.right_corner.project_x_margin, _x.right_corner.project_y_margin, _x.right_corner.object_x_margin.type, _x.right_corner.object_x_margin.src, _x.right_corner.object_x_margin.pt.x, _x.right_corner.object_x_margin.pt.y, _x.right_corner.object_x_margin.line.pt1.x, _x.right_corner.object_x_margin.line.pt1.y, _x.right_corner.object_x_margin.line.pt2.x, _x.right_corner.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.right_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.right_corner.object_y_margin.type, _x.right_corner.object_y_margin.src, _x.right_corner.object_y_margin.pt.x, _x.right_corner.object_y_margin.pt.y, _x.right_corner.object_y_margin.line.pt1.x, _x.right_corner.object_y_margin.line.pt1.y, _x.right_corner.object_y_margin.line.pt2.x, _x.right_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.right_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.curb_or_parkstop.slot_id, _x.curb_or_parkstop.project_x_margin, _x.curb_or_parkstop.project_y_margin, _x.curb_or_parkstop.object_x_margin.type, _x.curb_or_parkstop.object_x_margin.src, _x.curb_or_parkstop.object_x_margin.pt.x, _x.curb_or_parkstop.object_x_margin.pt.y, _x.curb_or_parkstop.object_x_margin.line.pt1.x, _x.curb_or_parkstop.object_x_margin.line.pt1.y, _x.curb_or_parkstop.object_x_margin.line.pt2.x, _x.curb_or_parkstop.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curb_or_parkstop.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.curb_or_parkstop.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.curb_or_parkstop.object_y_margin.type, _x.curb_or_parkstop.object_y_margin.src, _x.curb_or_parkstop.object_y_margin.pt.x, _x.curb_or_parkstop.object_y_margin.pt.y, _x.curb_or_parkstop.object_y_margin.line.pt1.x, _x.curb_or_parkstop.object_y_margin.line.pt1.y, _x.curb_or_parkstop.object_y_margin.line.pt2.x, _x.curb_or_parkstop.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curb_or_parkstop.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.curb_or_parkstop.object_y_margin.polygon.pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slot_results = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvSlotAssembyResult()
        _v118 = val1.left_corner
        _x = _v118
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v119 = _v118.object_x_margin
        _x = _v119
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v120 = _v119.pt
        _x = _v120
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v121 = _v119.line
        _v122 = _v121.pt1
        _x = _v122
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v123 = _v121.pt2
        _x = _v123
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v124 = _v119.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v124.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v124.pts.append(val5)
        _v125 = _v118.object_y_margin
        _x = _v125
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v126 = _v125.pt
        _x = _v126
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v127 = _v125.line
        _v128 = _v127.pt1
        _x = _v128
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v129 = _v127.pt2
        _x = _v129
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v130 = _v125.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v130.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v130.pts.append(val5)
        _v131 = val1.right_corner
        _x = _v131
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v132 = _v131.object_x_margin
        _x = _v132
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v133 = _v132.pt
        _x = _v133
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v134 = _v132.line
        _v135 = _v134.pt1
        _x = _v135
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v136 = _v134.pt2
        _x = _v136
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v137 = _v132.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v137.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v137.pts.append(val5)
        _v138 = _v131.object_y_margin
        _x = _v138
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v139 = _v138.pt
        _x = _v139
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v140 = _v138.line
        _v141 = _v140.pt1
        _x = _v141
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v142 = _v140.pt2
        _x = _v142
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v143 = _v138.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v143.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v143.pts.append(val5)
        _v144 = val1.curb_or_parkstop
        _x = _v144
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v145 = _v144.object_x_margin
        _x = _v145
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v146 = _v145.pt
        _x = _v146
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v147 = _v145.line
        _v148 = _v147.pt1
        _x = _v148
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v149 = _v147.pt2
        _x = _v149
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v150 = _v145.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v150.pts.append(val5)
        _v151 = _v144.object_y_margin
        _x = _v151
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v152 = _v151.pt
        _x = _v152
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v153 = _v151.line
        _v154 = _v153.pt1
        _x = _v154
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v155 = _v153.pt2
        _x = _v155
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v156 = _v151.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v156.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v156.pts.append(val5)
        self.slot_results.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i6f = None
def _get_struct_2i6f():
    global _struct_2i6f
    if _struct_2i6f is None:
        _struct_2i6f = struct.Struct("<2i6f")
    return _struct_2i6f
_struct_I2f = None
def _get_struct_I2f():
    global _struct_I2f
    if _struct_I2f is None:
        _struct_I2f = struct.Struct("<I2f")
    return _struct_I2f
_struct_I2f2i6f = None
def _get_struct_I2f2i6f():
    global _struct_I2f2i6f
    if _struct_I2f2i6f is None:
        _struct_I2f2i6f = struct.Struct("<I2f2i6f")
    return _struct_I2f2i6f
_struct_i3B2i6f5I2f2i6f = None
def _get_struct_i3B2i6f5I2f2i6f():
    global _struct_i3B2i6f5I2f2i6f
    if _struct_i3B2i6f5I2f2i6f is None:
        _struct_i3B2i6f5I2f2i6f = struct.Struct("<i3B2i6f5I2f2i6f")
    return _struct_i3B2i6f5I2f2i6f

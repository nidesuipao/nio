# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvDebug(genpy.Message):
  _md5sum = "446a53394dba77c3dc90ce99ffcc1711"
  _type = "rospy_message_converter/ParEnvDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParEnvInputDebug input_debug
ParEnvSystemDebug system_debug
ParEnvObjectMapDebug object_map_debug
ParEnvSemanticMapDebug semantic_map_debug
ParEnvCollisionCheckerDebug collision_checker_debug
ParEnvSlotsGenerateDebug slots_generate_debug
ParEnvReserved env_reserved_debug
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ParEnvInputDebug
ParEnvInputData vehicle_10
ParEnvInputData vehicle_50
ParEnvInputData svc
ParEnvInputData location
ParEnvInputData state_machine
ParEnvInputData planning_result
ParEnvInputData psap_station
ParEnvInputUssState uss_state
SVCDetectionStatus svc_state
ParFusedLocation location_info
StateMachine state_machine_info
uint32 planning_slot_size
PsapStationInfo psap_station_info
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/ParEnvInputData
bool is_received
uint64 counter
uint64 timestamp
uint64 elapsed_time

================================================================================
MSG: rospy_message_converter/ParEnvInputUssState
int32 sdw_status
int32 apa_status
int32 map_obj_statue
int32 upa_sys_status
int32 uss_mode

================================================================================
MSG: rospy_message_converter/SVCDetectionStatus
int32 svc_det_status_type
bool svcsapa_detection_avl
bool svcpowerswap_detection_avl
int32 svc_det_sub_status_type
SVCAlarm[] svc_alarms
SVCFault[] svc_faults
bool is_dlb_triggered
SVCDLBRequest dlb_request

================================================================================
MSG: rospy_message_converter/SVCAlarm
int32 alarm_type
int32 alarm_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCFault
int32 fault_type
int32 fault_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCDLBRequest
int32 index
int32 dlb_reason_type
int32 dlb_reason_code
uint64 dlb_begin_timestamp_utc
uint64 dlb_end_timestamp_utc
string description

================================================================================
MSG: rospy_message_converter/ParFusedLocation
ParLocation loc_odom
ParLocation loc_slot
ParLocation loc_fused
int32 wheel_odom_status
int32 imu_status
int32 svc_status
int32 lidar_status
NodeInfo node_info
int32 slot_status
int32 psap_station_info_status
int32 psap_station_entrance_type
PSAPResult psap_result
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ParLocation
uint64 timestamp
bool location_valid
ParPoint position
ParQuaternion orientation
float32 easting
float32 northing
float32 height
float32 speed
float32 sum_s

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ParQuaternion
float32 x
float32 y
float32 z
float32 w

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer

================================================================================
MSG: rospy_message_converter/PSAPResult
uint64 timestamp
PSAPObject[] objects
SVCPoint veh_loc
float32 veh_loc_z
SVCOrientation veh_orientation
bool veh_loc_valid
PSAPSlot slot
int32 coordinate_type

================================================================================
MSG: rospy_message_converter/PSAPObject
int32 obj_type
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
int32 marker_id

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/SVCOrientation
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: rospy_message_converter/PSAPSlot
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
SVCPoint veh_pos
float32 veh_psi
int32 slot_status

================================================================================
MSG: rospy_message_converter/StateMachine
NodeInfo node_info
int32 feature_status
SlotBase target_slot
int32 operation_mode
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SlotBase
int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/PsapStationInfo
string station_id
int32 station_gen
int32 station_type
int32 station_entrance_type
float32 slope_length
bool station_available
string offline_reason
float32 station_platform_height
float32 station_tagb_to_slot_dst_x
float32 station_ref_offset
float32 station_reserved
float32 station_tagc_to_slot_dst_x
uint64 timestamp_ptp_ns
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ParEnvSystemDebug
NodeInfo env_app_info
bool psap_mode
uint64 psap_process_time
bool sapa_mode
uint64 sapa_process_time
uint64 obj_map_process_time
uint64 collision_checker_process_time
uint64 slots_process_time
uint64 semantic_map_process_time
uint64 ego_gear
float32 ego_speed
float32 ego_steering
bool ego_is_standstill
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/ParEnvObjectMapDebug
int32 module_state
bool vehicle_state_valid
bool uss_instance_valid
bool uss_instance_frame_updated
bool svc_instance_valid
bool svc_instance_frame_updated
bool is_psap_left
int32 feature_type
int32 feature_state
float32 latest_location_odom_x
float32 latest_location_odom_y
float32 latest_location_odom_theta
float32 latest_location_psap_x
float32 latest_location_psap_y
float32 latest_location_psap_theta
uint32 uss_valid_input_num
uint32 uss_high_filtered_num
uint32 uss_high_line_num
uint32 uss_high_point_num
uint32 uss_timesync_state
float32 uss_timesync_reserve
uint32 uss_current_objects_num
uint32 uss_fused_objects_num
uint32 uss_associated_num
ParEnvAssociationInfo[] uss_pairing
uint32 uss_update_num
uint32 uss_increase_num
uint32 fs_input_num
uint32 fs_valid_num
uint32 fs_timesync_state
float32 fs_timesync_reserve
uint32 fs_current_pts_num
uint32 fs_reserve_type1_num
uint32 fs_reserve_type2_num
uint32 fs_reserve_type3_num
uint32 fs_reserve_type4_num
uint32 fs_reserve_type5_num
uint32 od_input_num
uint32 od_valid_num
uint32 od_timesync_state
float32 od_timesync_reserve
uint32 od_current_object_num
uint32 od_fused_objects_num
uint32 od_associated_num
ParEnvAssociationInfo[] od_pairing
uint32 od_reserve_type1_num
uint32 od_reserve_type2_num
uint32 od_reserve_type3_num
uint32 od_reserve_type4_num
uint32 od_reserve_type5_num
ParEnvAssociationInfo[] fusion_result
uint32 roi_filtered_num
ParEnvObjectSegment[] roi_filtered_segments
ParEnvObjectPoint[] roi_filtered_points
float32 uss_debug_float_reserve1
float32 uss_debug_float_reserve2
float32 uss_debug_float_reserve3
float32 uss_debug_float_reserve4
float32 uss_debug_float_reserve5
float32 uss_debug_float_reserve6
float32 uss_debug_float_reserve7
float32 uss_debug_float_reserve8
float32 uss_debug_float_reserve9
float32 uss_debug_float_reserve10
int32 uss_debug_int32_reserve1
int32 uss_debug_int32_reserve2
int32 uss_debug_int32_reserve3
int32 uss_debug_int32_reserve4
int32 uss_debug_int32_reserve5
int32 uss_debug_int32_reserve6
int32 uss_debug_int32_reserve7
int32 uss_debug_int32_reserve8
int32 uss_debug_int32_reserve9
int32 uss_debug_int32_reserve10
float32 svc_debug_float_reserve1
float32 svc_debug_float_reserve2
float32 svc_debug_float_reserve3
float32 svc_debug_float_reserve4
float32 svc_debug_float_reserve5
float32 svc_debug_float_reserve6
float32 svc_debug_float_reserve7
float32 svc_debug_float_reserve8
float32 svc_debug_float_reserve9
float32 svc_debug_float_reserve10
int32 svc_debug_int32_reserve1
int32 svc_debug_int32_reserve2
int32 svc_debug_int32_reserve3
int32 svc_debug_int32_reserve4
int32 svc_debug_int32_reserve5
int32 svc_debug_int32_reserve6
int32 svc_debug_int32_reserve7
int32 svc_debug_int32_reserve8
int32 svc_debug_int32_reserve9
int32 svc_debug_int32_reserve10

================================================================================
MSG: rospy_message_converter/ParEnvAssociationInfo
int32 index1
int32 index2
ParEnvObjectInfo obj1
ParEnvObjectInfo obj2
int32 reserve1
int32 reserve2

================================================================================
MSG: rospy_message_converter/ParEnvObjectInfo
int32 type
int32 src
ParEnvObjectPoint pt
ParEnvObjectSegment line
ParEnvObjectPolygon polygon

================================================================================
MSG: rospy_message_converter/ParEnvObjectPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/ParEnvObjectSegment
ParEnvObjectPoint pt1
ParEnvObjectPoint pt2

================================================================================
MSG: rospy_message_converter/ParEnvObjectPolygon
ParEnvObjectPoint[] pts

================================================================================
MSG: rospy_message_converter/ParEnvSemanticMapDebug
int32 module_state
bool vehicle_state_valid
bool uss_instance_valid
bool svc_instance_valid
int32 feature_type
int32 feature_state
float32 latest_location_odom_x
float32 latest_location_odom_y
float32 latest_location_odom_theta
float32 latest_location_psap_x
float32 latest_location_psap_y
float32 latest_location_psap_theta
uint32 slot_num
uint32 slot_corner_valid_num
uint32 slot_parkstop_valid_num
uint32 slot_curb_valid_num
ParEnvSlotObjectResult left_corner
ParEnvSlotObjectResult right_corner
ParEnvSlotObjectResult curb_or_parkstop
ParEnvSlotAssembyResult[] slot_results

================================================================================
MSG: rospy_message_converter/ParEnvSlotObjectResult
uint32 slot_id
float32 project_x_margin
float32 project_y_margin
ParEnvObjectInfo object_x_margin
ParEnvObjectInfo object_y_margin

================================================================================
MSG: rospy_message_converter/ParEnvSlotAssembyResult
ParEnvSlotObjectResult left_corner
ParEnvSlotObjectResult right_corner
ParEnvSlotObjectResult curb_or_parkstop

================================================================================
MSG: rospy_message_converter/ParEnvCollisionCheckerDebug
bool is_load_config
float32 wheel_curve
bool is_larger_outlines
ParEnvCollisionData forward_dst
ParEnvCollisionData backward_dst
ParEnvCollisionData direct_forward_dst
ParEnvCollisionData direct_backward_dst
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/ParEnvCollisionData
float32 crash_distance
float32 obj_distance
float32 uss_region_distance
float32 center_x
float32 center_y
float32 center_yaw
ParEnvObjectPoint crash_pt1
ParEnvObjectPoint crash_pt2
uint32 path_index

================================================================================
MSG: rospy_message_converter/ParEnvSlotsGenerateDebug
float32 ego_x
float32 ego_y
float32 ego_yaw
uint32 uss_slots_size
uint32 svc_slots_size
uint32 planning_return_slots_size
uint32 planning_slots_size
uint32 bind_slots_size
uint32 hmi_slots_size
ParkSlot psap_slot
psapMapObject psap_hmi
float32 psap_ad_pose_x
float32 psap_ad_pose_y
float32 psap_ad_pose_yaw
uint32 planning_ok_slots_size
uint32 track_slot_index
ParkSlot sapa_guidance_slot
bool guidance_slot_planning_ok
float32 guidance_slot_size_x
float32 guidance_slot_size_y
bool is_guidance_slot_narrow
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/ParkSlot
SlotBase slot
bool left_corner_exist
ParPoint left_corner_pt1
ParPoint left_corner_pt2
bool right_corner_exist
ParPoint right_corner_pt1
ParPoint right_corner_pt2
bool curb_exist
ParPoint curb_pt1
ParPoint curb_pt2
bool slot_bumper
ParPoint slot_bumper_pt1
ParPoint slot_bumper_pt2
ParPoint left_corner_pt3
ParPoint right_corner_pt3
bool corner_pt3_exist
ParPoint virtual_channel_pt1
ParPoint virtual_channel_pt2
bool virtual_channel_exist
int32 left_corner_type
int32 right_corner_type
uint32 slot_update_count
bool replan_suggest

================================================================================
MSG: rospy_message_converter/psapMapObject
int32 psapMapObjectType
bool psapMapObjectValid
float32 psapMapObjectPointX1
float32 psapMapObjectPointY1
float32 psapMapObjectPointX2
float32 psapMapObjectPointY2
float32 psapMapObjectPointX3
float32 psapMapObjectPointY3
float32 psapMapObjectPointX4
float32 psapMapObjectPointY4

================================================================================
MSG: rospy_message_converter/ParEnvReserved
float32 reserved_0
float32 reserved_1
float32 reserved_2
float32 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
float32 reserved_8
float32 reserved_9
float32 reserved_10
float32 reserved_11
float32 reserved_12
float32 reserved_13
float32 reserved_14
float32 reserved_15
float32 reserved_16
float32 reserved_17
float32 reserved_18
float32 reserved_19
float32 reserved_20
float32 reserved_21
float32 reserved_22
float32 reserved_23
float32 reserved_24
float32 reserved_25
float32 reserved_26
float32 reserved_27
float32 reserved_28
float32 reserved_29
uint32 reserved_30
uint32 reserved_31
uint32 reserved_32
uint32 reserved_33
uint32 reserved_34
uint32 reserved_35
uint32 reserved_36
uint32 reserved_37
uint32 reserved_38
uint32 reserved_39
uint32 reserved_40
uint32 reserved_41
uint32 reserved_42
uint32 reserved_43
uint32 reserved_44
uint32 reserved_45
uint32 reserved_46
uint32 reserved_47
uint32 reserved_48
uint32 reserved_49
uint32 reserved_50
uint32 reserved_51
uint32 reserved_52
uint32 reserved_53
uint32 reserved_54
uint32 reserved_55
uint32 reserved_56
uint32 reserved_57
uint32 reserved_58
uint32 reserved_59
"""
  __slots__ = ['input_debug','system_debug','object_map_debug','semantic_map_debug','collision_checker_debug','slots_generate_debug','env_reserved_debug','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/ParEnvInputDebug','rospy_message_converter/ParEnvSystemDebug','rospy_message_converter/ParEnvObjectMapDebug','rospy_message_converter/ParEnvSemanticMapDebug','rospy_message_converter/ParEnvCollisionCheckerDebug','rospy_message_converter/ParEnvSlotsGenerateDebug','rospy_message_converter/ParEnvReserved','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input_debug,system_debug,object_map_debug,semantic_map_debug,collision_checker_debug,slots_generate_debug,env_reserved_debug,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input_debug is None:
        self.input_debug = rospy_message_converter.msg.ParEnvInputDebug()
      if self.system_debug is None:
        self.system_debug = rospy_message_converter.msg.ParEnvSystemDebug()
      if self.object_map_debug is None:
        self.object_map_debug = rospy_message_converter.msg.ParEnvObjectMapDebug()
      if self.semantic_map_debug is None:
        self.semantic_map_debug = rospy_message_converter.msg.ParEnvSemanticMapDebug()
      if self.collision_checker_debug is None:
        self.collision_checker_debug = rospy_message_converter.msg.ParEnvCollisionCheckerDebug()
      if self.slots_generate_debug is None:
        self.slots_generate_debug = rospy_message_converter.msg.ParEnvSlotsGenerateDebug()
      if self.env_reserved_debug is None:
        self.env_reserved_debug = rospy_message_converter.msg.ParEnvReserved()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.input_debug = rospy_message_converter.msg.ParEnvInputDebug()
      self.system_debug = rospy_message_converter.msg.ParEnvSystemDebug()
      self.object_map_debug = rospy_message_converter.msg.ParEnvObjectMapDebug()
      self.semantic_map_debug = rospy_message_converter.msg.ParEnvSemanticMapDebug()
      self.collision_checker_debug = rospy_message_converter.msg.ParEnvCollisionCheckerDebug()
      self.slots_generate_debug = rospy_message_converter.msg.ParEnvSlotsGenerateDebug()
      self.env_reserved_debug = rospy_message_converter.msg.ParEnvReserved()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().pack(_x.input_debug.vehicle_10.is_received, _x.input_debug.vehicle_10.counter, _x.input_debug.vehicle_10.timestamp, _x.input_debug.vehicle_10.elapsed_time, _x.input_debug.vehicle_50.is_received, _x.input_debug.vehicle_50.counter, _x.input_debug.vehicle_50.timestamp, _x.input_debug.vehicle_50.elapsed_time, _x.input_debug.svc.is_received, _x.input_debug.svc.counter, _x.input_debug.svc.timestamp, _x.input_debug.svc.elapsed_time, _x.input_debug.location.is_received, _x.input_debug.location.counter, _x.input_debug.location.timestamp, _x.input_debug.location.elapsed_time, _x.input_debug.state_machine.is_received, _x.input_debug.state_machine.counter, _x.input_debug.state_machine.timestamp, _x.input_debug.state_machine.elapsed_time, _x.input_debug.planning_result.is_received, _x.input_debug.planning_result.counter, _x.input_debug.planning_result.timestamp, _x.input_debug.planning_result.elapsed_time, _x.input_debug.psap_station.is_received, _x.input_debug.psap_station.counter, _x.input_debug.psap_station.timestamp, _x.input_debug.psap_station.elapsed_time, _x.input_debug.uss_state.sdw_status, _x.input_debug.uss_state.apa_status, _x.input_debug.uss_state.map_obj_statue, _x.input_debug.uss_state.upa_sys_status, _x.input_debug.uss_state.uss_mode, _x.input_debug.svc_state.svc_det_status_type, _x.input_debug.svc_state.svcsapa_detection_avl, _x.input_debug.svc_state.svcpowerswap_detection_avl, _x.input_debug.svc_state.svc_det_sub_status_type))
      length = len(self.input_debug.svc_state.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_debug.svc_state.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.input_debug.svc_state.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_debug.svc_state.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.input_debug.svc_state.is_dlb_triggered, _x.input_debug.svc_state.dlb_request.index, _x.input_debug.svc_state.dlb_request.dlb_reason_type, _x.input_debug.svc_state.dlb_request.dlb_reason_code, _x.input_debug.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.input_debug.svc_state.dlb_request.dlb_end_timestamp_utc))
      _x = self.input_debug.svc_state.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QB12fQB12fQB12f6i().pack(_x.input_debug.location_info.loc_odom.timestamp, _x.input_debug.location_info.loc_odom.location_valid, _x.input_debug.location_info.loc_odom.position.x, _x.input_debug.location_info.loc_odom.position.y, _x.input_debug.location_info.loc_odom.position.z, _x.input_debug.location_info.loc_odom.orientation.x, _x.input_debug.location_info.loc_odom.orientation.y, _x.input_debug.location_info.loc_odom.orientation.z, _x.input_debug.location_info.loc_odom.orientation.w, _x.input_debug.location_info.loc_odom.easting, _x.input_debug.location_info.loc_odom.northing, _x.input_debug.location_info.loc_odom.height, _x.input_debug.location_info.loc_odom.speed, _x.input_debug.location_info.loc_odom.sum_s, _x.input_debug.location_info.loc_slot.timestamp, _x.input_debug.location_info.loc_slot.location_valid, _x.input_debug.location_info.loc_slot.position.x, _x.input_debug.location_info.loc_slot.position.y, _x.input_debug.location_info.loc_slot.position.z, _x.input_debug.location_info.loc_slot.orientation.x, _x.input_debug.location_info.loc_slot.orientation.y, _x.input_debug.location_info.loc_slot.orientation.z, _x.input_debug.location_info.loc_slot.orientation.w, _x.input_debug.location_info.loc_slot.easting, _x.input_debug.location_info.loc_slot.northing, _x.input_debug.location_info.loc_slot.height, _x.input_debug.location_info.loc_slot.speed, _x.input_debug.location_info.loc_slot.sum_s, _x.input_debug.location_info.loc_fused.timestamp, _x.input_debug.location_info.loc_fused.location_valid, _x.input_debug.location_info.loc_fused.position.x, _x.input_debug.location_info.loc_fused.position.y, _x.input_debug.location_info.loc_fused.position.z, _x.input_debug.location_info.loc_fused.orientation.x, _x.input_debug.location_info.loc_fused.orientation.y, _x.input_debug.location_info.loc_fused.orientation.z, _x.input_debug.location_info.loc_fused.orientation.w, _x.input_debug.location_info.loc_fused.easting, _x.input_debug.location_info.loc_fused.northing, _x.input_debug.location_info.loc_fused.height, _x.input_debug.location_info.loc_fused.speed, _x.input_debug.location_info.loc_fused.sum_s, _x.input_debug.location_info.wheel_odom_status, _x.input_debug.location_info.imu_status, _x.input_debug.location_info.svc_status, _x.input_debug.location_info.lidar_status, _x.input_debug.location_info.node_info.node_status, _x.input_debug.location_info.node_info.feature_type))
      _x = self.input_debug.location_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.input_debug.location_info.node_info.counter, _x.input_debug.location_info.node_info.timestamp))
      _x = self.input_debug.location_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.input_debug.location_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.input_debug.location_info.node_info.buffer))
      _x = self
      buff.write(_get_struct_3iQ().pack(_x.input_debug.location_info.slot_status, _x.input_debug.location_info.psap_station_info_status, _x.input_debug.location_info.psap_station_entrance_type, _x.input_debug.location_info.psap_result.timestamp))
      length = len(self.input_debug.location_info.psap_result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_debug.location_info.psap_result.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pt1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.pt2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.pt3
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.pt4
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2iQ().pack(_x.input_debug.location_info.psap_result.veh_loc.x, _x.input_debug.location_info.psap_result.veh_loc.y, _x.input_debug.location_info.psap_result.veh_loc_z, _x.input_debug.location_info.psap_result.veh_orientation.roll, _x.input_debug.location_info.psap_result.veh_orientation.pitch, _x.input_debug.location_info.psap_result.veh_orientation.yaw, _x.input_debug.location_info.psap_result.veh_loc_valid, _x.input_debug.location_info.psap_result.slot.pt1.x, _x.input_debug.location_info.psap_result.slot.pt1.y, _x.input_debug.location_info.psap_result.slot.pt2.x, _x.input_debug.location_info.psap_result.slot.pt2.y, _x.input_debug.location_info.psap_result.slot.pt3.x, _x.input_debug.location_info.psap_result.slot.pt3.y, _x.input_debug.location_info.psap_result.slot.pt4.x, _x.input_debug.location_info.psap_result.slot.pt4.y, _x.input_debug.location_info.psap_result.slot.veh_pos.x, _x.input_debug.location_info.psap_result.slot.veh_pos.y, _x.input_debug.location_info.psap_result.slot.veh_psi, _x.input_debug.location_info.psap_result.slot.slot_status, _x.input_debug.location_info.psap_result.coordinate_type, _x.input_debug.location_info.publish_ptp_ts))
      _x = self.input_debug.location_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q2i().pack(_x.input_debug.location_info.counter, _x.input_debug.location_info.publish_ts, _x.input_debug.state_machine_info.node_info.node_status, _x.input_debug.state_machine_info.node_info.feature_type))
      _x = self.input_debug.state_machine_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.input_debug.state_machine_info.node_info.counter, _x.input_debug.state_machine_info.node_info.timestamp))
      _x = self.input_debug.state_machine_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.input_debug.state_machine_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.input_debug.state_machine_info.node_info.buffer))
      _x = self
      buff.write(_get_struct_4i12f2i6f3ifiQ().pack(_x.input_debug.state_machine_info.feature_status, _x.input_debug.state_machine_info.target_slot.hmi_index, _x.input_debug.state_machine_info.target_slot.svc_index, _x.input_debug.state_machine_info.target_slot.uss_index, _x.input_debug.state_machine_info.target_slot.pt1.x, _x.input_debug.state_machine_info.target_slot.pt1.y, _x.input_debug.state_machine_info.target_slot.pt1.z, _x.input_debug.state_machine_info.target_slot.pt2.x, _x.input_debug.state_machine_info.target_slot.pt2.y, _x.input_debug.state_machine_info.target_slot.pt2.z, _x.input_debug.state_machine_info.target_slot.pt3.x, _x.input_debug.state_machine_info.target_slot.pt3.y, _x.input_debug.state_machine_info.target_slot.pt3.z, _x.input_debug.state_machine_info.target_slot.pt4.x, _x.input_debug.state_machine_info.target_slot.pt4.y, _x.input_debug.state_machine_info.target_slot.pt4.z, _x.input_debug.state_machine_info.target_slot.type, _x.input_debug.state_machine_info.target_slot.source, _x.input_debug.state_machine_info.target_slot.size_x, _x.input_debug.state_machine_info.target_slot.size_y, _x.input_debug.state_machine_info.target_slot.VehPos.x, _x.input_debug.state_machine_info.target_slot.VehPos.y, _x.input_debug.state_machine_info.target_slot.VehPos.z, _x.input_debug.state_machine_info.target_slot.VehPsi, _x.input_debug.state_machine_info.target_slot.status, _x.input_debug.state_machine_info.target_slot.fov, _x.input_debug.state_machine_info.target_slot.planning_result, _x.input_debug.state_machine_info.target_slot.slot_angle, _x.input_debug.state_machine_info.operation_mode, _x.input_debug.state_machine_info.publish_ptp_ts))
      _x = self.input_debug.state_machine_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QI().pack(_x.input_debug.state_machine_info.counter, _x.input_debug.state_machine_info.publish_ts, _x.input_debug.planning_slot_size))
      _x = self.input_debug.psap_station_info.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3ifB().pack(_x.input_debug.psap_station_info.station_gen, _x.input_debug.psap_station_info.station_type, _x.input_debug.psap_station_info.station_entrance_type, _x.input_debug.psap_station_info.slope_length, _x.input_debug.psap_station_info.station_available))
      _x = self.input_debug.psap_station_info.offline_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2Q().pack(_x.input_debug.psap_station_info.station_platform_height, _x.input_debug.psap_station_info.station_tagb_to_slot_dst_x, _x.input_debug.psap_station_info.station_ref_offset, _x.input_debug.psap_station_info.station_reserved, _x.input_debug.psap_station_info.station_tagc_to_slot_dst_x, _x.input_debug.psap_station_info.timestamp_ptp_ns, _x.input_debug.psap_station_info.publish_ptp_ts))
      _x = self.input_debug.psap_station_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6Q4f2B().pack(_x.input_debug.psap_station_info.counter, _x.input_debug.psap_station_info.publish_ts, _x.input_debug.reserved_0, _x.input_debug.reserved_1, _x.input_debug.reserved_2, _x.input_debug.reserved_3, _x.input_debug.reserved_4, _x.input_debug.reserved_5, _x.input_debug.reserved_6, _x.input_debug.reserved_7, _x.input_debug.reserved_8, _x.input_debug.reserved_9))
      _x = self.input_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.system_debug.env_app_info.node_status, _x.system_debug.env_app_info.feature_type))
      _x = self.system_debug.env_app_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.system_debug.env_app_info.counter, _x.system_debug.env_app_info.timestamp))
      _x = self.system_debug.env_app_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.system_debug.env_app_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.system_debug.env_app_info.buffer))
      _x = self
      buff.write(_get_struct_BQB6Q2fB4Q4f2B().pack(_x.system_debug.psap_mode, _x.system_debug.psap_process_time, _x.system_debug.sapa_mode, _x.system_debug.sapa_process_time, _x.system_debug.obj_map_process_time, _x.system_debug.collision_checker_process_time, _x.system_debug.slots_process_time, _x.system_debug.semantic_map_process_time, _x.system_debug.ego_gear, _x.system_debug.ego_speed, _x.system_debug.ego_steering, _x.system_debug.ego_is_standstill, _x.system_debug.reserved_0, _x.system_debug.reserved_1, _x.system_debug.reserved_2, _x.system_debug.reserved_3, _x.system_debug.reserved_4, _x.system_debug.reserved_5, _x.system_debug.reserved_6, _x.system_debug.reserved_7, _x.system_debug.reserved_8, _x.system_debug.reserved_9))
      _x = self.system_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6B2i6f5If3I().pack(_x.object_map_debug.module_state, _x.object_map_debug.vehicle_state_valid, _x.object_map_debug.uss_instance_valid, _x.object_map_debug.uss_instance_frame_updated, _x.object_map_debug.svc_instance_valid, _x.object_map_debug.svc_instance_frame_updated, _x.object_map_debug.is_psap_left, _x.object_map_debug.feature_type, _x.object_map_debug.feature_state, _x.object_map_debug.latest_location_odom_x, _x.object_map_debug.latest_location_odom_y, _x.object_map_debug.latest_location_odom_theta, _x.object_map_debug.latest_location_psap_x, _x.object_map_debug.latest_location_psap_y, _x.object_map_debug.latest_location_psap_theta, _x.object_map_debug.uss_valid_input_num, _x.object_map_debug.uss_high_filtered_num, _x.object_map_debug.uss_high_line_num, _x.object_map_debug.uss_high_point_num, _x.object_map_debug.uss_timesync_state, _x.object_map_debug.uss_timesync_reserve, _x.object_map_debug.uss_current_objects_num, _x.object_map_debug.uss_fused_objects_num, _x.object_map_debug.uss_associated_num))
      length = len(self.object_map_debug.uss_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.uss_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v5 = val1.obj1
        _x = _v5
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v6 = _v5.pt
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v7 = _v5.line
        _v8 = _v7.pt1
        _x = _v8
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v9 = _v7.pt2
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v10 = _v5.polygon
        length = len(_v10.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v10.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = val1.obj2
        _x = _v11
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v12 = _v11.pt
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v13 = _v11.line
        _v14 = _v13.pt1
        _x = _v14
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v15 = _v13.pt2
        _x = _v15
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v16 = _v11.polygon
        length = len(_v16.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v16.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5If9If3I().pack(_x.object_map_debug.uss_update_num, _x.object_map_debug.uss_increase_num, _x.object_map_debug.fs_input_num, _x.object_map_debug.fs_valid_num, _x.object_map_debug.fs_timesync_state, _x.object_map_debug.fs_timesync_reserve, _x.object_map_debug.fs_current_pts_num, _x.object_map_debug.fs_reserve_type1_num, _x.object_map_debug.fs_reserve_type2_num, _x.object_map_debug.fs_reserve_type3_num, _x.object_map_debug.fs_reserve_type4_num, _x.object_map_debug.fs_reserve_type5_num, _x.object_map_debug.od_input_num, _x.object_map_debug.od_valid_num, _x.object_map_debug.od_timesync_state, _x.object_map_debug.od_timesync_reserve, _x.object_map_debug.od_current_object_num, _x.object_map_debug.od_fused_objects_num, _x.object_map_debug.od_associated_num))
      length = len(self.object_map_debug.od_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.od_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v17 = val1.obj1
        _x = _v17
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v18 = _v17.pt
        _x = _v18
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v19 = _v17.line
        _v20 = _v19.pt1
        _x = _v20
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v21 = _v19.pt2
        _x = _v21
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v22 = _v17.polygon
        length = len(_v22.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v22.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v23 = val1.obj2
        _x = _v23
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v24 = _v23.pt
        _x = _v24
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v25 = _v23.line
        _v26 = _v25.pt1
        _x = _v26
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v27 = _v25.pt2
        _x = _v27
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v28 = _v23.polygon
        length = len(_v28.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v28.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5I().pack(_x.object_map_debug.od_reserve_type1_num, _x.object_map_debug.od_reserve_type2_num, _x.object_map_debug.od_reserve_type3_num, _x.object_map_debug.od_reserve_type4_num, _x.object_map_debug.od_reserve_type5_num))
      length = len(self.object_map_debug.fusion_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.fusion_result:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v29 = val1.obj1
        _x = _v29
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v30 = _v29.pt
        _x = _v30
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v31 = _v29.line
        _v32 = _v31.pt1
        _x = _v32
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v33 = _v31.pt2
        _x = _v33
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v34 = _v29.polygon
        length = len(_v34.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v34.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v35 = val1.obj2
        _x = _v35
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v36 = _v35.pt
        _x = _v36
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v37 = _v35.line
        _v38 = _v37.pt1
        _x = _v38
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v39 = _v37.pt2
        _x = _v39
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v40 = _v35.polygon
        length = len(_v40.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v40.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self.object_map_debug.roi_filtered_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.object_map_debug.roi_filtered_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.roi_filtered_segments:
        _v41 = val1.pt1
        _x = _v41
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v42 = val1.pt2
        _x = _v42
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.object_map_debug.roi_filtered_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.roi_filtered_points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_10f10i10f11i3B2i6f5I2f2i6f().pack(_x.object_map_debug.uss_debug_float_reserve1, _x.object_map_debug.uss_debug_float_reserve2, _x.object_map_debug.uss_debug_float_reserve3, _x.object_map_debug.uss_debug_float_reserve4, _x.object_map_debug.uss_debug_float_reserve5, _x.object_map_debug.uss_debug_float_reserve6, _x.object_map_debug.uss_debug_float_reserve7, _x.object_map_debug.uss_debug_float_reserve8, _x.object_map_debug.uss_debug_float_reserve9, _x.object_map_debug.uss_debug_float_reserve10, _x.object_map_debug.uss_debug_int32_reserve1, _x.object_map_debug.uss_debug_int32_reserve2, _x.object_map_debug.uss_debug_int32_reserve3, _x.object_map_debug.uss_debug_int32_reserve4, _x.object_map_debug.uss_debug_int32_reserve5, _x.object_map_debug.uss_debug_int32_reserve6, _x.object_map_debug.uss_debug_int32_reserve7, _x.object_map_debug.uss_debug_int32_reserve8, _x.object_map_debug.uss_debug_int32_reserve9, _x.object_map_debug.uss_debug_int32_reserve10, _x.object_map_debug.svc_debug_float_reserve1, _x.object_map_debug.svc_debug_float_reserve2, _x.object_map_debug.svc_debug_float_reserve3, _x.object_map_debug.svc_debug_float_reserve4, _x.object_map_debug.svc_debug_float_reserve5, _x.object_map_debug.svc_debug_float_reserve6, _x.object_map_debug.svc_debug_float_reserve7, _x.object_map_debug.svc_debug_float_reserve8, _x.object_map_debug.svc_debug_float_reserve9, _x.object_map_debug.svc_debug_float_reserve10, _x.object_map_debug.svc_debug_int32_reserve1, _x.object_map_debug.svc_debug_int32_reserve2, _x.object_map_debug.svc_debug_int32_reserve3, _x.object_map_debug.svc_debug_int32_reserve4, _x.object_map_debug.svc_debug_int32_reserve5, _x.object_map_debug.svc_debug_int32_reserve6, _x.object_map_debug.svc_debug_int32_reserve7, _x.object_map_debug.svc_debug_int32_reserve8, _x.object_map_debug.svc_debug_int32_reserve9, _x.object_map_debug.svc_debug_int32_reserve10, _x.semantic_map_debug.module_state, _x.semantic_map_debug.vehicle_state_valid, _x.semantic_map_debug.uss_instance_valid, _x.semantic_map_debug.svc_instance_valid, _x.semantic_map_debug.feature_type, _x.semantic_map_debug.feature_state, _x.semantic_map_debug.latest_location_odom_x, _x.semantic_map_debug.latest_location_odom_y, _x.semantic_map_debug.latest_location_odom_theta, _x.semantic_map_debug.latest_location_psap_x, _x.semantic_map_debug.latest_location_psap_y, _x.semantic_map_debug.latest_location_psap_theta, _x.semantic_map_debug.slot_num, _x.semantic_map_debug.slot_corner_valid_num, _x.semantic_map_debug.slot_parkstop_valid_num, _x.semantic_map_debug.slot_curb_valid_num, _x.semantic_map_debug.left_corner.slot_id, _x.semantic_map_debug.left_corner.project_x_margin, _x.semantic_map_debug.left_corner.project_y_margin, _x.semantic_map_debug.left_corner.object_x_margin.type, _x.semantic_map_debug.left_corner.object_x_margin.src, _x.semantic_map_debug.left_corner.object_x_margin.pt.x, _x.semantic_map_debug.left_corner.object_x_margin.pt.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.y))
      length = len(self.semantic_map_debug.left_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.left_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.semantic_map_debug.left_corner.object_y_margin.type, _x.semantic_map_debug.left_corner.object_y_margin.src, _x.semantic_map_debug.left_corner.object_y_margin.pt.x, _x.semantic_map_debug.left_corner.object_y_margin.pt.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.y))
      length = len(self.semantic_map_debug.left_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.left_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.semantic_map_debug.right_corner.slot_id, _x.semantic_map_debug.right_corner.project_x_margin, _x.semantic_map_debug.right_corner.project_y_margin, _x.semantic_map_debug.right_corner.object_x_margin.type, _x.semantic_map_debug.right_corner.object_x_margin.src, _x.semantic_map_debug.right_corner.object_x_margin.pt.x, _x.semantic_map_debug.right_corner.object_x_margin.pt.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.y))
      length = len(self.semantic_map_debug.right_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.right_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.semantic_map_debug.right_corner.object_y_margin.type, _x.semantic_map_debug.right_corner.object_y_margin.src, _x.semantic_map_debug.right_corner.object_y_margin.pt.x, _x.semantic_map_debug.right_corner.object_y_margin.pt.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.y))
      length = len(self.semantic_map_debug.right_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.right_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.semantic_map_debug.curb_or_parkstop.slot_id, _x.semantic_map_debug.curb_or_parkstop.project_x_margin, _x.semantic_map_debug.curb_or_parkstop.project_y_margin, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.y))
      length = len(self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.semantic_map_debug.curb_or_parkstop.object_y_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.y))
      length = len(self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.semantic_map_debug.slot_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.slot_results:
        _v43 = val1.left_corner
        _x = _v43
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v44 = _v43.object_x_margin
        _x = _v44
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v45 = _v44.pt
        _x = _v45
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v46 = _v44.line
        _v47 = _v46.pt1
        _x = _v47
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v48 = _v46.pt2
        _x = _v48
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v49 = _v44.polygon
        length = len(_v49.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v49.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v50 = _v43.object_y_margin
        _x = _v50
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v51 = _v50.pt
        _x = _v51
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v52 = _v50.line
        _v53 = _v52.pt1
        _x = _v53
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v54 = _v52.pt2
        _x = _v54
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v55 = _v50.polygon
        length = len(_v55.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v55.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v56 = val1.right_corner
        _x = _v56
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v57 = _v56.object_x_margin
        _x = _v57
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v58 = _v57.pt
        _x = _v58
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v59 = _v57.line
        _v60 = _v59.pt1
        _x = _v60
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v61 = _v59.pt2
        _x = _v61
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v62 = _v57.polygon
        length = len(_v62.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v62.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v63 = _v56.object_y_margin
        _x = _v63
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v64 = _v63.pt
        _x = _v64
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v65 = _v63.line
        _v66 = _v65.pt1
        _x = _v66
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v67 = _v65.pt2
        _x = _v67
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v68 = _v63.polygon
        length = len(_v68.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v68.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v69 = val1.curb_or_parkstop
        _x = _v69
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v70 = _v69.object_x_margin
        _x = _v70
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v71 = _v70.pt
        _x = _v71
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v72 = _v70.line
        _v73 = _v72.pt1
        _x = _v73
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v74 = _v72.pt2
        _x = _v74
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v75 = _v70.polygon
        length = len(_v75.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v75.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v76 = _v69.object_y_margin
        _x = _v76
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v77 = _v76.pt
        _x = _v77
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v78 = _v76.line
        _v79 = _v78.pt1
        _x = _v79
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v80 = _v78.pt2
        _x = _v80
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v81 = _v76.polygon
        length = len(_v81.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v81.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_BfB10fI10fI10fI10fI4Q4f2B().pack(_x.collision_checker_debug.is_load_config, _x.collision_checker_debug.wheel_curve, _x.collision_checker_debug.is_larger_outlines, _x.collision_checker_debug.forward_dst.crash_distance, _x.collision_checker_debug.forward_dst.obj_distance, _x.collision_checker_debug.forward_dst.uss_region_distance, _x.collision_checker_debug.forward_dst.center_x, _x.collision_checker_debug.forward_dst.center_y, _x.collision_checker_debug.forward_dst.center_yaw, _x.collision_checker_debug.forward_dst.crash_pt1.x, _x.collision_checker_debug.forward_dst.crash_pt1.y, _x.collision_checker_debug.forward_dst.crash_pt2.x, _x.collision_checker_debug.forward_dst.crash_pt2.y, _x.collision_checker_debug.forward_dst.path_index, _x.collision_checker_debug.backward_dst.crash_distance, _x.collision_checker_debug.backward_dst.obj_distance, _x.collision_checker_debug.backward_dst.uss_region_distance, _x.collision_checker_debug.backward_dst.center_x, _x.collision_checker_debug.backward_dst.center_y, _x.collision_checker_debug.backward_dst.center_yaw, _x.collision_checker_debug.backward_dst.crash_pt1.x, _x.collision_checker_debug.backward_dst.crash_pt1.y, _x.collision_checker_debug.backward_dst.crash_pt2.x, _x.collision_checker_debug.backward_dst.crash_pt2.y, _x.collision_checker_debug.backward_dst.path_index, _x.collision_checker_debug.direct_forward_dst.crash_distance, _x.collision_checker_debug.direct_forward_dst.obj_distance, _x.collision_checker_debug.direct_forward_dst.uss_region_distance, _x.collision_checker_debug.direct_forward_dst.center_x, _x.collision_checker_debug.direct_forward_dst.center_y, _x.collision_checker_debug.direct_forward_dst.center_yaw, _x.collision_checker_debug.direct_forward_dst.crash_pt1.x, _x.collision_checker_debug.direct_forward_dst.crash_pt1.y, _x.collision_checker_debug.direct_forward_dst.crash_pt2.x, _x.collision_checker_debug.direct_forward_dst.crash_pt2.y, _x.collision_checker_debug.direct_forward_dst.path_index, _x.collision_checker_debug.direct_backward_dst.crash_distance, _x.collision_checker_debug.direct_backward_dst.obj_distance, _x.collision_checker_debug.direct_backward_dst.uss_region_distance, _x.collision_checker_debug.direct_backward_dst.center_x, _x.collision_checker_debug.direct_backward_dst.center_y, _x.collision_checker_debug.direct_backward_dst.center_yaw, _x.collision_checker_debug.direct_backward_dst.crash_pt1.x, _x.collision_checker_debug.direct_backward_dst.crash_pt1.y, _x.collision_checker_debug.direct_backward_dst.crash_pt2.x, _x.collision_checker_debug.direct_backward_dst.crash_pt2.y, _x.collision_checker_debug.direct_backward_dst.path_index, _x.collision_checker_debug.reserved_0, _x.collision_checker_debug.reserved_1, _x.collision_checker_debug.reserved_2, _x.collision_checker_debug.reserved_3, _x.collision_checker_debug.reserved_4, _x.collision_checker_debug.reserved_5, _x.collision_checker_debug.reserved_6, _x.collision_checker_debug.reserved_7, _x.collision_checker_debug.reserved_8, _x.collision_checker_debug.reserved_9))
      _x = self.collision_checker_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B().pack(_x.slots_generate_debug.ego_x, _x.slots_generate_debug.ego_y, _x.slots_generate_debug.ego_yaw, _x.slots_generate_debug.uss_slots_size, _x.slots_generate_debug.svc_slots_size, _x.slots_generate_debug.planning_return_slots_size, _x.slots_generate_debug.planning_slots_size, _x.slots_generate_debug.bind_slots_size, _x.slots_generate_debug.hmi_slots_size, _x.slots_generate_debug.psap_slot.slot.hmi_index, _x.slots_generate_debug.psap_slot.slot.svc_index, _x.slots_generate_debug.psap_slot.slot.uss_index, _x.slots_generate_debug.psap_slot.slot.pt1.x, _x.slots_generate_debug.psap_slot.slot.pt1.y, _x.slots_generate_debug.psap_slot.slot.pt1.z, _x.slots_generate_debug.psap_slot.slot.pt2.x, _x.slots_generate_debug.psap_slot.slot.pt2.y, _x.slots_generate_debug.psap_slot.slot.pt2.z, _x.slots_generate_debug.psap_slot.slot.pt3.x, _x.slots_generate_debug.psap_slot.slot.pt3.y, _x.slots_generate_debug.psap_slot.slot.pt3.z, _x.slots_generate_debug.psap_slot.slot.pt4.x, _x.slots_generate_debug.psap_slot.slot.pt4.y, _x.slots_generate_debug.psap_slot.slot.pt4.z, _x.slots_generate_debug.psap_slot.slot.type, _x.slots_generate_debug.psap_slot.slot.source, _x.slots_generate_debug.psap_slot.slot.size_x, _x.slots_generate_debug.psap_slot.slot.size_y, _x.slots_generate_debug.psap_slot.slot.VehPos.x, _x.slots_generate_debug.psap_slot.slot.VehPos.y, _x.slots_generate_debug.psap_slot.slot.VehPos.z, _x.slots_generate_debug.psap_slot.slot.VehPsi, _x.slots_generate_debug.psap_slot.slot.status, _x.slots_generate_debug.psap_slot.slot.fov, _x.slots_generate_debug.psap_slot.slot.planning_result, _x.slots_generate_debug.psap_slot.slot.slot_angle, _x.slots_generate_debug.psap_slot.left_corner_exist, _x.slots_generate_debug.psap_slot.left_corner_pt1.x, _x.slots_generate_debug.psap_slot.left_corner_pt1.y, _x.slots_generate_debug.psap_slot.left_corner_pt1.z, _x.slots_generate_debug.psap_slot.left_corner_pt2.x, _x.slots_generate_debug.psap_slot.left_corner_pt2.y, _x.slots_generate_debug.psap_slot.left_corner_pt2.z, _x.slots_generate_debug.psap_slot.right_corner_exist, _x.slots_generate_debug.psap_slot.right_corner_pt1.x, _x.slots_generate_debug.psap_slot.right_corner_pt1.y, _x.slots_generate_debug.psap_slot.right_corner_pt1.z, _x.slots_generate_debug.psap_slot.right_corner_pt2.x, _x.slots_generate_debug.psap_slot.right_corner_pt2.y, _x.slots_generate_debug.psap_slot.right_corner_pt2.z, _x.slots_generate_debug.psap_slot.curb_exist, _x.slots_generate_debug.psap_slot.curb_pt1.x, _x.slots_generate_debug.psap_slot.curb_pt1.y, _x.slots_generate_debug.psap_slot.curb_pt1.z, _x.slots_generate_debug.psap_slot.curb_pt2.x, _x.slots_generate_debug.psap_slot.curb_pt2.y, _x.slots_generate_debug.psap_slot.curb_pt2.z, _x.slots_generate_debug.psap_slot.slot_bumper, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.z, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.z, _x.slots_generate_debug.psap_slot.left_corner_pt3.x, _x.slots_generate_debug.psap_slot.left_corner_pt3.y, _x.slots_generate_debug.psap_slot.left_corner_pt3.z, _x.slots_generate_debug.psap_slot.right_corner_pt3.x, _x.slots_generate_debug.psap_slot.right_corner_pt3.y, _x.slots_generate_debug.psap_slot.right_corner_pt3.z, _x.slots_generate_debug.psap_slot.corner_pt3_exist, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.z, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.z, _x.slots_generate_debug.psap_slot.virtual_channel_exist, _x.slots_generate_debug.psap_slot.left_corner_type, _x.slots_generate_debug.psap_slot.right_corner_type, _x.slots_generate_debug.psap_slot.slot_update_count, _x.slots_generate_debug.psap_slot.replan_suggest, _x.slots_generate_debug.psap_hmi.psapMapObjectType, _x.slots_generate_debug.psap_hmi.psapMapObjectValid, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX4, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY4, _x.slots_generate_debug.psap_ad_pose_x, _x.slots_generate_debug.psap_ad_pose_y, _x.slots_generate_debug.psap_ad_pose_yaw, _x.slots_generate_debug.planning_ok_slots_size, _x.slots_generate_debug.track_slot_index, _x.slots_generate_debug.sapa_guidance_slot.slot.hmi_index, _x.slots_generate_debug.sapa_guidance_slot.slot.svc_index, _x.slots_generate_debug.sapa_guidance_slot.slot.uss_index, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.z, _x.slots_generate_debug.sapa_guidance_slot.slot.type, _x.slots_generate_debug.sapa_guidance_slot.slot.source, _x.slots_generate_debug.sapa_guidance_slot.slot.size_x, _x.slots_generate_debug.sapa_guidance_slot.slot.size_y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.x, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.z, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPsi, _x.slots_generate_debug.sapa_guidance_slot.slot.status, _x.slots_generate_debug.sapa_guidance_slot.slot.fov, _x.slots_generate_debug.sapa_guidance_slot.slot.planning_result, _x.slots_generate_debug.sapa_guidance_slot.slot.slot_angle, _x.slots_generate_debug.sapa_guidance_slot.left_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.curb_exist, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_type, _x.slots_generate_debug.sapa_guidance_slot.right_corner_type, _x.slots_generate_debug.sapa_guidance_slot.slot_update_count, _x.slots_generate_debug.sapa_guidance_slot.replan_suggest, _x.slots_generate_debug.guidance_slot_planning_ok, _x.slots_generate_debug.guidance_slot_size_x, _x.slots_generate_debug.guidance_slot_size_y, _x.slots_generate_debug.is_guidance_slot_narrow, _x.slots_generate_debug.reserved_0, _x.slots_generate_debug.reserved_1, _x.slots_generate_debug.reserved_2, _x.slots_generate_debug.reserved_3, _x.slots_generate_debug.reserved_4, _x.slots_generate_debug.reserved_5, _x.slots_generate_debug.reserved_6, _x.slots_generate_debug.reserved_7, _x.slots_generate_debug.reserved_8, _x.slots_generate_debug.reserved_9))
      _x = self.slots_generate_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30f30IQ().pack(_x.env_reserved_debug.reserved_0, _x.env_reserved_debug.reserved_1, _x.env_reserved_debug.reserved_2, _x.env_reserved_debug.reserved_3, _x.env_reserved_debug.reserved_4, _x.env_reserved_debug.reserved_5, _x.env_reserved_debug.reserved_6, _x.env_reserved_debug.reserved_7, _x.env_reserved_debug.reserved_8, _x.env_reserved_debug.reserved_9, _x.env_reserved_debug.reserved_10, _x.env_reserved_debug.reserved_11, _x.env_reserved_debug.reserved_12, _x.env_reserved_debug.reserved_13, _x.env_reserved_debug.reserved_14, _x.env_reserved_debug.reserved_15, _x.env_reserved_debug.reserved_16, _x.env_reserved_debug.reserved_17, _x.env_reserved_debug.reserved_18, _x.env_reserved_debug.reserved_19, _x.env_reserved_debug.reserved_20, _x.env_reserved_debug.reserved_21, _x.env_reserved_debug.reserved_22, _x.env_reserved_debug.reserved_23, _x.env_reserved_debug.reserved_24, _x.env_reserved_debug.reserved_25, _x.env_reserved_debug.reserved_26, _x.env_reserved_debug.reserved_27, _x.env_reserved_debug.reserved_28, _x.env_reserved_debug.reserved_29, _x.env_reserved_debug.reserved_30, _x.env_reserved_debug.reserved_31, _x.env_reserved_debug.reserved_32, _x.env_reserved_debug.reserved_33, _x.env_reserved_debug.reserved_34, _x.env_reserved_debug.reserved_35, _x.env_reserved_debug.reserved_36, _x.env_reserved_debug.reserved_37, _x.env_reserved_debug.reserved_38, _x.env_reserved_debug.reserved_39, _x.env_reserved_debug.reserved_40, _x.env_reserved_debug.reserved_41, _x.env_reserved_debug.reserved_42, _x.env_reserved_debug.reserved_43, _x.env_reserved_debug.reserved_44, _x.env_reserved_debug.reserved_45, _x.env_reserved_debug.reserved_46, _x.env_reserved_debug.reserved_47, _x.env_reserved_debug.reserved_48, _x.env_reserved_debug.reserved_49, _x.env_reserved_debug.reserved_50, _x.env_reserved_debug.reserved_51, _x.env_reserved_debug.reserved_52, _x.env_reserved_debug.reserved_53, _x.env_reserved_debug.reserved_54, _x.env_reserved_debug.reserved_55, _x.env_reserved_debug.reserved_56, _x.env_reserved_debug.reserved_57, _x.env_reserved_debug.reserved_58, _x.env_reserved_debug.reserved_59, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input_debug is None:
        self.input_debug = rospy_message_converter.msg.ParEnvInputDebug()
      if self.system_debug is None:
        self.system_debug = rospy_message_converter.msg.ParEnvSystemDebug()
      if self.object_map_debug is None:
        self.object_map_debug = rospy_message_converter.msg.ParEnvObjectMapDebug()
      if self.semantic_map_debug is None:
        self.semantic_map_debug = rospy_message_converter.msg.ParEnvSemanticMapDebug()
      if self.collision_checker_debug is None:
        self.collision_checker_debug = rospy_message_converter.msg.ParEnvCollisionCheckerDebug()
      if self.slots_generate_debug is None:
        self.slots_generate_debug = rospy_message_converter.msg.ParEnvSlotsGenerateDebug()
      if self.env_reserved_debug is None:
        self.env_reserved_debug = rospy_message_converter.msg.ParEnvReserved()
      end = 0
      _x = self
      start = end
      end += 205
      (_x.input_debug.vehicle_10.is_received, _x.input_debug.vehicle_10.counter, _x.input_debug.vehicle_10.timestamp, _x.input_debug.vehicle_10.elapsed_time, _x.input_debug.vehicle_50.is_received, _x.input_debug.vehicle_50.counter, _x.input_debug.vehicle_50.timestamp, _x.input_debug.vehicle_50.elapsed_time, _x.input_debug.svc.is_received, _x.input_debug.svc.counter, _x.input_debug.svc.timestamp, _x.input_debug.svc.elapsed_time, _x.input_debug.location.is_received, _x.input_debug.location.counter, _x.input_debug.location.timestamp, _x.input_debug.location.elapsed_time, _x.input_debug.state_machine.is_received, _x.input_debug.state_machine.counter, _x.input_debug.state_machine.timestamp, _x.input_debug.state_machine.elapsed_time, _x.input_debug.planning_result.is_received, _x.input_debug.planning_result.counter, _x.input_debug.planning_result.timestamp, _x.input_debug.planning_result.elapsed_time, _x.input_debug.psap_station.is_received, _x.input_debug.psap_station.counter, _x.input_debug.psap_station.timestamp, _x.input_debug.psap_station.elapsed_time, _x.input_debug.uss_state.sdw_status, _x.input_debug.uss_state.apa_status, _x.input_debug.uss_state.map_obj_statue, _x.input_debug.uss_state.upa_sys_status, _x.input_debug.uss_state.uss_mode, _x.input_debug.svc_state.svc_det_status_type, _x.input_debug.svc_state.svcsapa_detection_avl, _x.input_debug.svc_state.svcpowerswap_detection_avl, _x.input_debug.svc_state.svc_det_sub_status_type,) = _get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().unpack(str[start:end])
      self.input_debug.vehicle_10.is_received = bool(self.input_debug.vehicle_10.is_received)
      self.input_debug.vehicle_50.is_received = bool(self.input_debug.vehicle_50.is_received)
      self.input_debug.svc.is_received = bool(self.input_debug.svc.is_received)
      self.input_debug.location.is_received = bool(self.input_debug.location.is_received)
      self.input_debug.state_machine.is_received = bool(self.input_debug.state_machine.is_received)
      self.input_debug.planning_result.is_received = bool(self.input_debug.planning_result.is_received)
      self.input_debug.psap_station.is_received = bool(self.input_debug.psap_station.is_received)
      self.input_debug.svc_state.svcsapa_detection_avl = bool(self.input_debug.svc_state.svcsapa_detection_avl)
      self.input_debug.svc_state.svcpowerswap_detection_avl = bool(self.input_debug.svc_state.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_debug.svc_state.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.input_debug.svc_state.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_debug.svc_state.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.input_debug.svc_state.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.input_debug.svc_state.is_dlb_triggered, _x.input_debug.svc_state.dlb_request.index, _x.input_debug.svc_state.dlb_request.dlb_reason_type, _x.input_debug.svc_state.dlb_request.dlb_reason_code, _x.input_debug.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.input_debug.svc_state.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.input_debug.svc_state.is_dlb_triggered = bool(self.input_debug.svc_state.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.svc_state.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.svc_state.dlb_request.description = str[start:end]
      _x = self
      start = end
      end += 195
      (_x.input_debug.location_info.loc_odom.timestamp, _x.input_debug.location_info.loc_odom.location_valid, _x.input_debug.location_info.loc_odom.position.x, _x.input_debug.location_info.loc_odom.position.y, _x.input_debug.location_info.loc_odom.position.z, _x.input_debug.location_info.loc_odom.orientation.x, _x.input_debug.location_info.loc_odom.orientation.y, _x.input_debug.location_info.loc_odom.orientation.z, _x.input_debug.location_info.loc_odom.orientation.w, _x.input_debug.location_info.loc_odom.easting, _x.input_debug.location_info.loc_odom.northing, _x.input_debug.location_info.loc_odom.height, _x.input_debug.location_info.loc_odom.speed, _x.input_debug.location_info.loc_odom.sum_s, _x.input_debug.location_info.loc_slot.timestamp, _x.input_debug.location_info.loc_slot.location_valid, _x.input_debug.location_info.loc_slot.position.x, _x.input_debug.location_info.loc_slot.position.y, _x.input_debug.location_info.loc_slot.position.z, _x.input_debug.location_info.loc_slot.orientation.x, _x.input_debug.location_info.loc_slot.orientation.y, _x.input_debug.location_info.loc_slot.orientation.z, _x.input_debug.location_info.loc_slot.orientation.w, _x.input_debug.location_info.loc_slot.easting, _x.input_debug.location_info.loc_slot.northing, _x.input_debug.location_info.loc_slot.height, _x.input_debug.location_info.loc_slot.speed, _x.input_debug.location_info.loc_slot.sum_s, _x.input_debug.location_info.loc_fused.timestamp, _x.input_debug.location_info.loc_fused.location_valid, _x.input_debug.location_info.loc_fused.position.x, _x.input_debug.location_info.loc_fused.position.y, _x.input_debug.location_info.loc_fused.position.z, _x.input_debug.location_info.loc_fused.orientation.x, _x.input_debug.location_info.loc_fused.orientation.y, _x.input_debug.location_info.loc_fused.orientation.z, _x.input_debug.location_info.loc_fused.orientation.w, _x.input_debug.location_info.loc_fused.easting, _x.input_debug.location_info.loc_fused.northing, _x.input_debug.location_info.loc_fused.height, _x.input_debug.location_info.loc_fused.speed, _x.input_debug.location_info.loc_fused.sum_s, _x.input_debug.location_info.wheel_odom_status, _x.input_debug.location_info.imu_status, _x.input_debug.location_info.svc_status, _x.input_debug.location_info.lidar_status, _x.input_debug.location_info.node_info.node_status, _x.input_debug.location_info.node_info.feature_type,) = _get_struct_QB12fQB12fQB12f6i().unpack(str[start:end])
      self.input_debug.location_info.loc_odom.location_valid = bool(self.input_debug.location_info.loc_odom.location_valid)
      self.input_debug.location_info.loc_slot.location_valid = bool(self.input_debug.location_info.loc_slot.location_valid)
      self.input_debug.location_info.loc_fused.location_valid = bool(self.input_debug.location_info.loc_fused.location_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.location_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.location_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.input_debug.location_info.node_info.counter, _x.input_debug.location_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.location_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.location_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.input_debug.location_info.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.input_debug.location_info.slot_status, _x.input_debug.location_info.psap_station_info_status, _x.input_debug.location_info.psap_station_entrance_type, _x.input_debug.location_info.psap_result.timestamp,) = _get_struct_3iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_debug.location_info.psap_result.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v82 = val1.pt1
        _x = _v82
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v83 = val1.pt2
        _x = _v83
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v84 = val1.pt3
        _x = _v84
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v85 = val1.pt4
        _x = _v85
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.input_debug.location_info.psap_result.objects.append(val1)
      _x = self
      start = end
      end += 85
      (_x.input_debug.location_info.psap_result.veh_loc.x, _x.input_debug.location_info.psap_result.veh_loc.y, _x.input_debug.location_info.psap_result.veh_loc_z, _x.input_debug.location_info.psap_result.veh_orientation.roll, _x.input_debug.location_info.psap_result.veh_orientation.pitch, _x.input_debug.location_info.psap_result.veh_orientation.yaw, _x.input_debug.location_info.psap_result.veh_loc_valid, _x.input_debug.location_info.psap_result.slot.pt1.x, _x.input_debug.location_info.psap_result.slot.pt1.y, _x.input_debug.location_info.psap_result.slot.pt2.x, _x.input_debug.location_info.psap_result.slot.pt2.y, _x.input_debug.location_info.psap_result.slot.pt3.x, _x.input_debug.location_info.psap_result.slot.pt3.y, _x.input_debug.location_info.psap_result.slot.pt4.x, _x.input_debug.location_info.psap_result.slot.pt4.y, _x.input_debug.location_info.psap_result.slot.veh_pos.x, _x.input_debug.location_info.psap_result.slot.veh_pos.y, _x.input_debug.location_info.psap_result.slot.veh_psi, _x.input_debug.location_info.psap_result.slot.slot_status, _x.input_debug.location_info.psap_result.coordinate_type, _x.input_debug.location_info.publish_ptp_ts,) = _get_struct_6fB11f2iQ().unpack(str[start:end])
      self.input_debug.location_info.psap_result.veh_loc_valid = bool(self.input_debug.location_info.psap_result.veh_loc_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.location_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.location_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.input_debug.location_info.counter, _x.input_debug.location_info.publish_ts, _x.input_debug.state_machine_info.node_info.node_status, _x.input_debug.state_machine_info.node_info.feature_type,) = _get_struct_2Q2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.state_machine_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.state_machine_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.input_debug.state_machine_info.node_info.counter, _x.input_debug.state_machine_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.state_machine_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.state_machine_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.input_debug.state_machine_info.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 124
      (_x.input_debug.state_machine_info.feature_status, _x.input_debug.state_machine_info.target_slot.hmi_index, _x.input_debug.state_machine_info.target_slot.svc_index, _x.input_debug.state_machine_info.target_slot.uss_index, _x.input_debug.state_machine_info.target_slot.pt1.x, _x.input_debug.state_machine_info.target_slot.pt1.y, _x.input_debug.state_machine_info.target_slot.pt1.z, _x.input_debug.state_machine_info.target_slot.pt2.x, _x.input_debug.state_machine_info.target_slot.pt2.y, _x.input_debug.state_machine_info.target_slot.pt2.z, _x.input_debug.state_machine_info.target_slot.pt3.x, _x.input_debug.state_machine_info.target_slot.pt3.y, _x.input_debug.state_machine_info.target_slot.pt3.z, _x.input_debug.state_machine_info.target_slot.pt4.x, _x.input_debug.state_machine_info.target_slot.pt4.y, _x.input_debug.state_machine_info.target_slot.pt4.z, _x.input_debug.state_machine_info.target_slot.type, _x.input_debug.state_machine_info.target_slot.source, _x.input_debug.state_machine_info.target_slot.size_x, _x.input_debug.state_machine_info.target_slot.size_y, _x.input_debug.state_machine_info.target_slot.VehPos.x, _x.input_debug.state_machine_info.target_slot.VehPos.y, _x.input_debug.state_machine_info.target_slot.VehPos.z, _x.input_debug.state_machine_info.target_slot.VehPsi, _x.input_debug.state_machine_info.target_slot.status, _x.input_debug.state_machine_info.target_slot.fov, _x.input_debug.state_machine_info.target_slot.planning_result, _x.input_debug.state_machine_info.target_slot.slot_angle, _x.input_debug.state_machine_info.operation_mode, _x.input_debug.state_machine_info.publish_ptp_ts,) = _get_struct_4i12f2i6f3ifiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.state_machine_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.state_machine_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.input_debug.state_machine_info.counter, _x.input_debug.state_machine_info.publish_ts, _x.input_debug.planning_slot_size,) = _get_struct_2QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.psap_station_info.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.psap_station_info.station_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.input_debug.psap_station_info.station_gen, _x.input_debug.psap_station_info.station_type, _x.input_debug.psap_station_info.station_entrance_type, _x.input_debug.psap_station_info.slope_length, _x.input_debug.psap_station_info.station_available,) = _get_struct_3ifB().unpack(str[start:end])
      self.input_debug.psap_station_info.station_available = bool(self.input_debug.psap_station_info.station_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.psap_station_info.offline_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.psap_station_info.offline_reason = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.input_debug.psap_station_info.station_platform_height, _x.input_debug.psap_station_info.station_tagb_to_slot_dst_x, _x.input_debug.psap_station_info.station_ref_offset, _x.input_debug.psap_station_info.station_reserved, _x.input_debug.psap_station_info.station_tagc_to_slot_dst_x, _x.input_debug.psap_station_info.timestamp_ptp_ns, _x.input_debug.psap_station_info.publish_ptp_ts,) = _get_struct_5f2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.psap_station_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.psap_station_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.input_debug.psap_station_info.counter, _x.input_debug.psap_station_info.publish_ts, _x.input_debug.reserved_0, _x.input_debug.reserved_1, _x.input_debug.reserved_2, _x.input_debug.reserved_3, _x.input_debug.reserved_4, _x.input_debug.reserved_5, _x.input_debug.reserved_6, _x.input_debug.reserved_7, _x.input_debug.reserved_8, _x.input_debug.reserved_9,) = _get_struct_6Q4f2B().unpack(str[start:end])
      self.input_debug.reserved_8 = bool(self.input_debug.reserved_8)
      self.input_debug.reserved_9 = bool(self.input_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.system_debug.env_app_info.node_status, _x.system_debug.env_app_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_debug.env_app_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_debug.env_app_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.system_debug.env_app_info.counter, _x.system_debug.env_app_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_debug.env_app_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_debug.env_app_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.system_debug.env_app_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 117
      (_x.system_debug.psap_mode, _x.system_debug.psap_process_time, _x.system_debug.sapa_mode, _x.system_debug.sapa_process_time, _x.system_debug.obj_map_process_time, _x.system_debug.collision_checker_process_time, _x.system_debug.slots_process_time, _x.system_debug.semantic_map_process_time, _x.system_debug.ego_gear, _x.system_debug.ego_speed, _x.system_debug.ego_steering, _x.system_debug.ego_is_standstill, _x.system_debug.reserved_0, _x.system_debug.reserved_1, _x.system_debug.reserved_2, _x.system_debug.reserved_3, _x.system_debug.reserved_4, _x.system_debug.reserved_5, _x.system_debug.reserved_6, _x.system_debug.reserved_7, _x.system_debug.reserved_8, _x.system_debug.reserved_9,) = _get_struct_BQB6Q2fB4Q4f2B().unpack(str[start:end])
      self.system_debug.psap_mode = bool(self.system_debug.psap_mode)
      self.system_debug.sapa_mode = bool(self.system_debug.sapa_mode)
      self.system_debug.ego_is_standstill = bool(self.system_debug.ego_is_standstill)
      self.system_debug.reserved_8 = bool(self.system_debug.reserved_8)
      self.system_debug.reserved_9 = bool(self.system_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.object_map_debug.module_state, _x.object_map_debug.vehicle_state_valid, _x.object_map_debug.uss_instance_valid, _x.object_map_debug.uss_instance_frame_updated, _x.object_map_debug.svc_instance_valid, _x.object_map_debug.svc_instance_frame_updated, _x.object_map_debug.is_psap_left, _x.object_map_debug.feature_type, _x.object_map_debug.feature_state, _x.object_map_debug.latest_location_odom_x, _x.object_map_debug.latest_location_odom_y, _x.object_map_debug.latest_location_odom_theta, _x.object_map_debug.latest_location_psap_x, _x.object_map_debug.latest_location_psap_y, _x.object_map_debug.latest_location_psap_theta, _x.object_map_debug.uss_valid_input_num, _x.object_map_debug.uss_high_filtered_num, _x.object_map_debug.uss_high_line_num, _x.object_map_debug.uss_high_point_num, _x.object_map_debug.uss_timesync_state, _x.object_map_debug.uss_timesync_reserve, _x.object_map_debug.uss_current_objects_num, _x.object_map_debug.uss_fused_objects_num, _x.object_map_debug.uss_associated_num,) = _get_struct_i6B2i6f5If3I().unpack(str[start:end])
      self.object_map_debug.vehicle_state_valid = bool(self.object_map_debug.vehicle_state_valid)
      self.object_map_debug.uss_instance_valid = bool(self.object_map_debug.uss_instance_valid)
      self.object_map_debug.uss_instance_frame_updated = bool(self.object_map_debug.uss_instance_frame_updated)
      self.object_map_debug.svc_instance_valid = bool(self.object_map_debug.svc_instance_valid)
      self.object_map_debug.svc_instance_frame_updated = bool(self.object_map_debug.svc_instance_frame_updated)
      self.object_map_debug.is_psap_left = bool(self.object_map_debug.is_psap_left)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.uss_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v86 = val1.obj1
        _x = _v86
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v87 = _v86.pt
        _x = _v87
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v88 = _v86.line
        _v89 = _v88.pt1
        _x = _v89
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v90 = _v88.pt2
        _x = _v90
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v91 = _v86.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v91.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v91.pts.append(val4)
        _v92 = val1.obj2
        _x = _v92
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v93 = _v92.pt
        _x = _v93
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v94 = _v92.line
        _v95 = _v94.pt1
        _x = _v95
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v96 = _v94.pt2
        _x = _v96
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v97 = _v92.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v97.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v97.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.object_map_debug.uss_pairing.append(val1)
      _x = self
      start = end
      end += 76
      (_x.object_map_debug.uss_update_num, _x.object_map_debug.uss_increase_num, _x.object_map_debug.fs_input_num, _x.object_map_debug.fs_valid_num, _x.object_map_debug.fs_timesync_state, _x.object_map_debug.fs_timesync_reserve, _x.object_map_debug.fs_current_pts_num, _x.object_map_debug.fs_reserve_type1_num, _x.object_map_debug.fs_reserve_type2_num, _x.object_map_debug.fs_reserve_type3_num, _x.object_map_debug.fs_reserve_type4_num, _x.object_map_debug.fs_reserve_type5_num, _x.object_map_debug.od_input_num, _x.object_map_debug.od_valid_num, _x.object_map_debug.od_timesync_state, _x.object_map_debug.od_timesync_reserve, _x.object_map_debug.od_current_object_num, _x.object_map_debug.od_fused_objects_num, _x.object_map_debug.od_associated_num,) = _get_struct_5If9If3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.od_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v98 = val1.obj1
        _x = _v98
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v99 = _v98.pt
        _x = _v99
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v100 = _v98.line
        _v101 = _v100.pt1
        _x = _v101
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v102 = _v100.pt2
        _x = _v102
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v103 = _v98.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v103.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v103.pts.append(val4)
        _v104 = val1.obj2
        _x = _v104
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v105 = _v104.pt
        _x = _v105
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v106 = _v104.line
        _v107 = _v106.pt1
        _x = _v107
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v108 = _v106.pt2
        _x = _v108
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v109 = _v104.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v109.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v109.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.object_map_debug.od_pairing.append(val1)
      _x = self
      start = end
      end += 20
      (_x.object_map_debug.od_reserve_type1_num, _x.object_map_debug.od_reserve_type2_num, _x.object_map_debug.od_reserve_type3_num, _x.object_map_debug.od_reserve_type4_num, _x.object_map_debug.od_reserve_type5_num,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.fusion_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v110 = val1.obj1
        _x = _v110
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v111 = _v110.pt
        _x = _v111
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v112 = _v110.line
        _v113 = _v112.pt1
        _x = _v113
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v114 = _v112.pt2
        _x = _v114
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v115 = _v110.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v115.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v115.pts.append(val4)
        _v116 = val1.obj2
        _x = _v116
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v117 = _v116.pt
        _x = _v117
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v118 = _v116.line
        _v119 = _v118.pt1
        _x = _v119
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v120 = _v118.pt2
        _x = _v120
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v121 = _v116.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v121.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v121.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.object_map_debug.fusion_result.append(val1)
      start = end
      end += 4
      (self.object_map_debug.roi_filtered_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.roi_filtered_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectSegment()
        _v122 = val1.pt1
        _x = _v122
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v123 = val1.pt2
        _x = _v123
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_map_debug.roi_filtered_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.roi_filtered_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_map_debug.roi_filtered_points.append(val1)
      _x = self
      start = end
      end += 259
      (_x.object_map_debug.uss_debug_float_reserve1, _x.object_map_debug.uss_debug_float_reserve2, _x.object_map_debug.uss_debug_float_reserve3, _x.object_map_debug.uss_debug_float_reserve4, _x.object_map_debug.uss_debug_float_reserve5, _x.object_map_debug.uss_debug_float_reserve6, _x.object_map_debug.uss_debug_float_reserve7, _x.object_map_debug.uss_debug_float_reserve8, _x.object_map_debug.uss_debug_float_reserve9, _x.object_map_debug.uss_debug_float_reserve10, _x.object_map_debug.uss_debug_int32_reserve1, _x.object_map_debug.uss_debug_int32_reserve2, _x.object_map_debug.uss_debug_int32_reserve3, _x.object_map_debug.uss_debug_int32_reserve4, _x.object_map_debug.uss_debug_int32_reserve5, _x.object_map_debug.uss_debug_int32_reserve6, _x.object_map_debug.uss_debug_int32_reserve7, _x.object_map_debug.uss_debug_int32_reserve8, _x.object_map_debug.uss_debug_int32_reserve9, _x.object_map_debug.uss_debug_int32_reserve10, _x.object_map_debug.svc_debug_float_reserve1, _x.object_map_debug.svc_debug_float_reserve2, _x.object_map_debug.svc_debug_float_reserve3, _x.object_map_debug.svc_debug_float_reserve4, _x.object_map_debug.svc_debug_float_reserve5, _x.object_map_debug.svc_debug_float_reserve6, _x.object_map_debug.svc_debug_float_reserve7, _x.object_map_debug.svc_debug_float_reserve8, _x.object_map_debug.svc_debug_float_reserve9, _x.object_map_debug.svc_debug_float_reserve10, _x.object_map_debug.svc_debug_int32_reserve1, _x.object_map_debug.svc_debug_int32_reserve2, _x.object_map_debug.svc_debug_int32_reserve3, _x.object_map_debug.svc_debug_int32_reserve4, _x.object_map_debug.svc_debug_int32_reserve5, _x.object_map_debug.svc_debug_int32_reserve6, _x.object_map_debug.svc_debug_int32_reserve7, _x.object_map_debug.svc_debug_int32_reserve8, _x.object_map_debug.svc_debug_int32_reserve9, _x.object_map_debug.svc_debug_int32_reserve10, _x.semantic_map_debug.module_state, _x.semantic_map_debug.vehicle_state_valid, _x.semantic_map_debug.uss_instance_valid, _x.semantic_map_debug.svc_instance_valid, _x.semantic_map_debug.feature_type, _x.semantic_map_debug.feature_state, _x.semantic_map_debug.latest_location_odom_x, _x.semantic_map_debug.latest_location_odom_y, _x.semantic_map_debug.latest_location_odom_theta, _x.semantic_map_debug.latest_location_psap_x, _x.semantic_map_debug.latest_location_psap_y, _x.semantic_map_debug.latest_location_psap_theta, _x.semantic_map_debug.slot_num, _x.semantic_map_debug.slot_corner_valid_num, _x.semantic_map_debug.slot_parkstop_valid_num, _x.semantic_map_debug.slot_curb_valid_num, _x.semantic_map_debug.left_corner.slot_id, _x.semantic_map_debug.left_corner.project_x_margin, _x.semantic_map_debug.left_corner.project_y_margin, _x.semantic_map_debug.left_corner.object_x_margin.type, _x.semantic_map_debug.left_corner.object_x_margin.src, _x.semantic_map_debug.left_corner.object_x_margin.pt.x, _x.semantic_map_debug.left_corner.object_x_margin.pt.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.y,) = _get_struct_10f10i10f11i3B2i6f5I2f2i6f().unpack(str[start:end])
      self.semantic_map_debug.vehicle_state_valid = bool(self.semantic_map_debug.vehicle_state_valid)
      self.semantic_map_debug.uss_instance_valid = bool(self.semantic_map_debug.uss_instance_valid)
      self.semantic_map_debug.svc_instance_valid = bool(self.semantic_map_debug.svc_instance_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.left_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.left_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.semantic_map_debug.left_corner.object_y_margin.type, _x.semantic_map_debug.left_corner.object_y_margin.src, _x.semantic_map_debug.left_corner.object_y_margin.pt.x, _x.semantic_map_debug.left_corner.object_y_margin.pt.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.left_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.left_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.semantic_map_debug.right_corner.slot_id, _x.semantic_map_debug.right_corner.project_x_margin, _x.semantic_map_debug.right_corner.project_y_margin, _x.semantic_map_debug.right_corner.object_x_margin.type, _x.semantic_map_debug.right_corner.object_x_margin.src, _x.semantic_map_debug.right_corner.object_x_margin.pt.x, _x.semantic_map_debug.right_corner.object_x_margin.pt.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.right_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.right_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.semantic_map_debug.right_corner.object_y_margin.type, _x.semantic_map_debug.right_corner.object_y_margin.src, _x.semantic_map_debug.right_corner.object_y_margin.pt.x, _x.semantic_map_debug.right_corner.object_y_margin.pt.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.right_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.right_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.semantic_map_debug.curb_or_parkstop.slot_id, _x.semantic_map_debug.curb_or_parkstop.project_x_margin, _x.semantic_map_debug.curb_or_parkstop.project_y_margin, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.semantic_map_debug.curb_or_parkstop.object_y_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.slot_results = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvSlotAssembyResult()
        _v124 = val1.left_corner
        _x = _v124
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v125 = _v124.object_x_margin
        _x = _v125
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v126 = _v125.pt
        _x = _v126
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v127 = _v125.line
        _v128 = _v127.pt1
        _x = _v128
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v129 = _v127.pt2
        _x = _v129
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v130 = _v125.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v130.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v130.pts.append(val5)
        _v131 = _v124.object_y_margin
        _x = _v131
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v132 = _v131.pt
        _x = _v132
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v133 = _v131.line
        _v134 = _v133.pt1
        _x = _v134
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v135 = _v133.pt2
        _x = _v135
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v136 = _v131.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v136.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v136.pts.append(val5)
        _v137 = val1.right_corner
        _x = _v137
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v138 = _v137.object_x_margin
        _x = _v138
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v139 = _v138.pt
        _x = _v139
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v140 = _v138.line
        _v141 = _v140.pt1
        _x = _v141
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v142 = _v140.pt2
        _x = _v142
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v143 = _v138.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v143.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v143.pts.append(val5)
        _v144 = _v137.object_y_margin
        _x = _v144
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v145 = _v144.pt
        _x = _v145
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v146 = _v144.line
        _v147 = _v146.pt1
        _x = _v147
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v148 = _v146.pt2
        _x = _v148
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v149 = _v144.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v149.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v149.pts.append(val5)
        _v150 = val1.curb_or_parkstop
        _x = _v150
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v151 = _v150.object_x_margin
        _x = _v151
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v152 = _v151.pt
        _x = _v152
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v153 = _v151.line
        _v154 = _v153.pt1
        _x = _v154
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v155 = _v153.pt2
        _x = _v155
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v156 = _v151.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v156.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v156.pts.append(val5)
        _v157 = _v150.object_y_margin
        _x = _v157
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v158 = _v157.pt
        _x = _v158
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v159 = _v157.line
        _v160 = _v159.pt1
        _x = _v160
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v161 = _v159.pt2
        _x = _v161
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v162 = _v157.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v162.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v162.pts.append(val5)
        self.semantic_map_debug.slot_results.append(val1)
      _x = self
      start = end
      end += 232
      (_x.collision_checker_debug.is_load_config, _x.collision_checker_debug.wheel_curve, _x.collision_checker_debug.is_larger_outlines, _x.collision_checker_debug.forward_dst.crash_distance, _x.collision_checker_debug.forward_dst.obj_distance, _x.collision_checker_debug.forward_dst.uss_region_distance, _x.collision_checker_debug.forward_dst.center_x, _x.collision_checker_debug.forward_dst.center_y, _x.collision_checker_debug.forward_dst.center_yaw, _x.collision_checker_debug.forward_dst.crash_pt1.x, _x.collision_checker_debug.forward_dst.crash_pt1.y, _x.collision_checker_debug.forward_dst.crash_pt2.x, _x.collision_checker_debug.forward_dst.crash_pt2.y, _x.collision_checker_debug.forward_dst.path_index, _x.collision_checker_debug.backward_dst.crash_distance, _x.collision_checker_debug.backward_dst.obj_distance, _x.collision_checker_debug.backward_dst.uss_region_distance, _x.collision_checker_debug.backward_dst.center_x, _x.collision_checker_debug.backward_dst.center_y, _x.collision_checker_debug.backward_dst.center_yaw, _x.collision_checker_debug.backward_dst.crash_pt1.x, _x.collision_checker_debug.backward_dst.crash_pt1.y, _x.collision_checker_debug.backward_dst.crash_pt2.x, _x.collision_checker_debug.backward_dst.crash_pt2.y, _x.collision_checker_debug.backward_dst.path_index, _x.collision_checker_debug.direct_forward_dst.crash_distance, _x.collision_checker_debug.direct_forward_dst.obj_distance, _x.collision_checker_debug.direct_forward_dst.uss_region_distance, _x.collision_checker_debug.direct_forward_dst.center_x, _x.collision_checker_debug.direct_forward_dst.center_y, _x.collision_checker_debug.direct_forward_dst.center_yaw, _x.collision_checker_debug.direct_forward_dst.crash_pt1.x, _x.collision_checker_debug.direct_forward_dst.crash_pt1.y, _x.collision_checker_debug.direct_forward_dst.crash_pt2.x, _x.collision_checker_debug.direct_forward_dst.crash_pt2.y, _x.collision_checker_debug.direct_forward_dst.path_index, _x.collision_checker_debug.direct_backward_dst.crash_distance, _x.collision_checker_debug.direct_backward_dst.obj_distance, _x.collision_checker_debug.direct_backward_dst.uss_region_distance, _x.collision_checker_debug.direct_backward_dst.center_x, _x.collision_checker_debug.direct_backward_dst.center_y, _x.collision_checker_debug.direct_backward_dst.center_yaw, _x.collision_checker_debug.direct_backward_dst.crash_pt1.x, _x.collision_checker_debug.direct_backward_dst.crash_pt1.y, _x.collision_checker_debug.direct_backward_dst.crash_pt2.x, _x.collision_checker_debug.direct_backward_dst.crash_pt2.y, _x.collision_checker_debug.direct_backward_dst.path_index, _x.collision_checker_debug.reserved_0, _x.collision_checker_debug.reserved_1, _x.collision_checker_debug.reserved_2, _x.collision_checker_debug.reserved_3, _x.collision_checker_debug.reserved_4, _x.collision_checker_debug.reserved_5, _x.collision_checker_debug.reserved_6, _x.collision_checker_debug.reserved_7, _x.collision_checker_debug.reserved_8, _x.collision_checker_debug.reserved_9,) = _get_struct_BfB10fI10fI10fI10fI4Q4f2B().unpack(str[start:end])
      self.collision_checker_debug.is_load_config = bool(self.collision_checker_debug.is_load_config)
      self.collision_checker_debug.is_larger_outlines = bool(self.collision_checker_debug.is_larger_outlines)
      self.collision_checker_debug.reserved_8 = bool(self.collision_checker_debug.reserved_8)
      self.collision_checker_debug.reserved_9 = bool(self.collision_checker_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.collision_checker_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.collision_checker_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 695
      (_x.slots_generate_debug.ego_x, _x.slots_generate_debug.ego_y, _x.slots_generate_debug.ego_yaw, _x.slots_generate_debug.uss_slots_size, _x.slots_generate_debug.svc_slots_size, _x.slots_generate_debug.planning_return_slots_size, _x.slots_generate_debug.planning_slots_size, _x.slots_generate_debug.bind_slots_size, _x.slots_generate_debug.hmi_slots_size, _x.slots_generate_debug.psap_slot.slot.hmi_index, _x.slots_generate_debug.psap_slot.slot.svc_index, _x.slots_generate_debug.psap_slot.slot.uss_index, _x.slots_generate_debug.psap_slot.slot.pt1.x, _x.slots_generate_debug.psap_slot.slot.pt1.y, _x.slots_generate_debug.psap_slot.slot.pt1.z, _x.slots_generate_debug.psap_slot.slot.pt2.x, _x.slots_generate_debug.psap_slot.slot.pt2.y, _x.slots_generate_debug.psap_slot.slot.pt2.z, _x.slots_generate_debug.psap_slot.slot.pt3.x, _x.slots_generate_debug.psap_slot.slot.pt3.y, _x.slots_generate_debug.psap_slot.slot.pt3.z, _x.slots_generate_debug.psap_slot.slot.pt4.x, _x.slots_generate_debug.psap_slot.slot.pt4.y, _x.slots_generate_debug.psap_slot.slot.pt4.z, _x.slots_generate_debug.psap_slot.slot.type, _x.slots_generate_debug.psap_slot.slot.source, _x.slots_generate_debug.psap_slot.slot.size_x, _x.slots_generate_debug.psap_slot.slot.size_y, _x.slots_generate_debug.psap_slot.slot.VehPos.x, _x.slots_generate_debug.psap_slot.slot.VehPos.y, _x.slots_generate_debug.psap_slot.slot.VehPos.z, _x.slots_generate_debug.psap_slot.slot.VehPsi, _x.slots_generate_debug.psap_slot.slot.status, _x.slots_generate_debug.psap_slot.slot.fov, _x.slots_generate_debug.psap_slot.slot.planning_result, _x.slots_generate_debug.psap_slot.slot.slot_angle, _x.slots_generate_debug.psap_slot.left_corner_exist, _x.slots_generate_debug.psap_slot.left_corner_pt1.x, _x.slots_generate_debug.psap_slot.left_corner_pt1.y, _x.slots_generate_debug.psap_slot.left_corner_pt1.z, _x.slots_generate_debug.psap_slot.left_corner_pt2.x, _x.slots_generate_debug.psap_slot.left_corner_pt2.y, _x.slots_generate_debug.psap_slot.left_corner_pt2.z, _x.slots_generate_debug.psap_slot.right_corner_exist, _x.slots_generate_debug.psap_slot.right_corner_pt1.x, _x.slots_generate_debug.psap_slot.right_corner_pt1.y, _x.slots_generate_debug.psap_slot.right_corner_pt1.z, _x.slots_generate_debug.psap_slot.right_corner_pt2.x, _x.slots_generate_debug.psap_slot.right_corner_pt2.y, _x.slots_generate_debug.psap_slot.right_corner_pt2.z, _x.slots_generate_debug.psap_slot.curb_exist, _x.slots_generate_debug.psap_slot.curb_pt1.x, _x.slots_generate_debug.psap_slot.curb_pt1.y, _x.slots_generate_debug.psap_slot.curb_pt1.z, _x.slots_generate_debug.psap_slot.curb_pt2.x, _x.slots_generate_debug.psap_slot.curb_pt2.y, _x.slots_generate_debug.psap_slot.curb_pt2.z, _x.slots_generate_debug.psap_slot.slot_bumper, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.z, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.z, _x.slots_generate_debug.psap_slot.left_corner_pt3.x, _x.slots_generate_debug.psap_slot.left_corner_pt3.y, _x.slots_generate_debug.psap_slot.left_corner_pt3.z, _x.slots_generate_debug.psap_slot.right_corner_pt3.x, _x.slots_generate_debug.psap_slot.right_corner_pt3.y, _x.slots_generate_debug.psap_slot.right_corner_pt3.z, _x.slots_generate_debug.psap_slot.corner_pt3_exist, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.z, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.z, _x.slots_generate_debug.psap_slot.virtual_channel_exist, _x.slots_generate_debug.psap_slot.left_corner_type, _x.slots_generate_debug.psap_slot.right_corner_type, _x.slots_generate_debug.psap_slot.slot_update_count, _x.slots_generate_debug.psap_slot.replan_suggest, _x.slots_generate_debug.psap_hmi.psapMapObjectType, _x.slots_generate_debug.psap_hmi.psapMapObjectValid, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX4, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY4, _x.slots_generate_debug.psap_ad_pose_x, _x.slots_generate_debug.psap_ad_pose_y, _x.slots_generate_debug.psap_ad_pose_yaw, _x.slots_generate_debug.planning_ok_slots_size, _x.slots_generate_debug.track_slot_index, _x.slots_generate_debug.sapa_guidance_slot.slot.hmi_index, _x.slots_generate_debug.sapa_guidance_slot.slot.svc_index, _x.slots_generate_debug.sapa_guidance_slot.slot.uss_index, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.z, _x.slots_generate_debug.sapa_guidance_slot.slot.type, _x.slots_generate_debug.sapa_guidance_slot.slot.source, _x.slots_generate_debug.sapa_guidance_slot.slot.size_x, _x.slots_generate_debug.sapa_guidance_slot.slot.size_y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.x, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.z, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPsi, _x.slots_generate_debug.sapa_guidance_slot.slot.status, _x.slots_generate_debug.sapa_guidance_slot.slot.fov, _x.slots_generate_debug.sapa_guidance_slot.slot.planning_result, _x.slots_generate_debug.sapa_guidance_slot.slot.slot_angle, _x.slots_generate_debug.sapa_guidance_slot.left_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.curb_exist, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_type, _x.slots_generate_debug.sapa_guidance_slot.right_corner_type, _x.slots_generate_debug.sapa_guidance_slot.slot_update_count, _x.slots_generate_debug.sapa_guidance_slot.replan_suggest, _x.slots_generate_debug.guidance_slot_planning_ok, _x.slots_generate_debug.guidance_slot_size_x, _x.slots_generate_debug.guidance_slot_size_y, _x.slots_generate_debug.is_guidance_slot_narrow, _x.slots_generate_debug.reserved_0, _x.slots_generate_debug.reserved_1, _x.slots_generate_debug.reserved_2, _x.slots_generate_debug.reserved_3, _x.slots_generate_debug.reserved_4, _x.slots_generate_debug.reserved_5, _x.slots_generate_debug.reserved_6, _x.slots_generate_debug.reserved_7, _x.slots_generate_debug.reserved_8, _x.slots_generate_debug.reserved_9,) = _get_struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B().unpack(str[start:end])
      self.slots_generate_debug.psap_slot.left_corner_exist = bool(self.slots_generate_debug.psap_slot.left_corner_exist)
      self.slots_generate_debug.psap_slot.right_corner_exist = bool(self.slots_generate_debug.psap_slot.right_corner_exist)
      self.slots_generate_debug.psap_slot.curb_exist = bool(self.slots_generate_debug.psap_slot.curb_exist)
      self.slots_generate_debug.psap_slot.slot_bumper = bool(self.slots_generate_debug.psap_slot.slot_bumper)
      self.slots_generate_debug.psap_slot.corner_pt3_exist = bool(self.slots_generate_debug.psap_slot.corner_pt3_exist)
      self.slots_generate_debug.psap_slot.virtual_channel_exist = bool(self.slots_generate_debug.psap_slot.virtual_channel_exist)
      self.slots_generate_debug.psap_slot.replan_suggest = bool(self.slots_generate_debug.psap_slot.replan_suggest)
      self.slots_generate_debug.psap_hmi.psapMapObjectValid = bool(self.slots_generate_debug.psap_hmi.psapMapObjectValid)
      self.slots_generate_debug.sapa_guidance_slot.left_corner_exist = bool(self.slots_generate_debug.sapa_guidance_slot.left_corner_exist)
      self.slots_generate_debug.sapa_guidance_slot.right_corner_exist = bool(self.slots_generate_debug.sapa_guidance_slot.right_corner_exist)
      self.slots_generate_debug.sapa_guidance_slot.curb_exist = bool(self.slots_generate_debug.sapa_guidance_slot.curb_exist)
      self.slots_generate_debug.sapa_guidance_slot.slot_bumper = bool(self.slots_generate_debug.sapa_guidance_slot.slot_bumper)
      self.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist = bool(self.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist)
      self.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist = bool(self.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist)
      self.slots_generate_debug.sapa_guidance_slot.replan_suggest = bool(self.slots_generate_debug.sapa_guidance_slot.replan_suggest)
      self.slots_generate_debug.guidance_slot_planning_ok = bool(self.slots_generate_debug.guidance_slot_planning_ok)
      self.slots_generate_debug.is_guidance_slot_narrow = bool(self.slots_generate_debug.is_guidance_slot_narrow)
      self.slots_generate_debug.reserved_8 = bool(self.slots_generate_debug.reserved_8)
      self.slots_generate_debug.reserved_9 = bool(self.slots_generate_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slots_generate_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slots_generate_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 248
      (_x.env_reserved_debug.reserved_0, _x.env_reserved_debug.reserved_1, _x.env_reserved_debug.reserved_2, _x.env_reserved_debug.reserved_3, _x.env_reserved_debug.reserved_4, _x.env_reserved_debug.reserved_5, _x.env_reserved_debug.reserved_6, _x.env_reserved_debug.reserved_7, _x.env_reserved_debug.reserved_8, _x.env_reserved_debug.reserved_9, _x.env_reserved_debug.reserved_10, _x.env_reserved_debug.reserved_11, _x.env_reserved_debug.reserved_12, _x.env_reserved_debug.reserved_13, _x.env_reserved_debug.reserved_14, _x.env_reserved_debug.reserved_15, _x.env_reserved_debug.reserved_16, _x.env_reserved_debug.reserved_17, _x.env_reserved_debug.reserved_18, _x.env_reserved_debug.reserved_19, _x.env_reserved_debug.reserved_20, _x.env_reserved_debug.reserved_21, _x.env_reserved_debug.reserved_22, _x.env_reserved_debug.reserved_23, _x.env_reserved_debug.reserved_24, _x.env_reserved_debug.reserved_25, _x.env_reserved_debug.reserved_26, _x.env_reserved_debug.reserved_27, _x.env_reserved_debug.reserved_28, _x.env_reserved_debug.reserved_29, _x.env_reserved_debug.reserved_30, _x.env_reserved_debug.reserved_31, _x.env_reserved_debug.reserved_32, _x.env_reserved_debug.reserved_33, _x.env_reserved_debug.reserved_34, _x.env_reserved_debug.reserved_35, _x.env_reserved_debug.reserved_36, _x.env_reserved_debug.reserved_37, _x.env_reserved_debug.reserved_38, _x.env_reserved_debug.reserved_39, _x.env_reserved_debug.reserved_40, _x.env_reserved_debug.reserved_41, _x.env_reserved_debug.reserved_42, _x.env_reserved_debug.reserved_43, _x.env_reserved_debug.reserved_44, _x.env_reserved_debug.reserved_45, _x.env_reserved_debug.reserved_46, _x.env_reserved_debug.reserved_47, _x.env_reserved_debug.reserved_48, _x.env_reserved_debug.reserved_49, _x.env_reserved_debug.reserved_50, _x.env_reserved_debug.reserved_51, _x.env_reserved_debug.reserved_52, _x.env_reserved_debug.reserved_53, _x.env_reserved_debug.reserved_54, _x.env_reserved_debug.reserved_55, _x.env_reserved_debug.reserved_56, _x.env_reserved_debug.reserved_57, _x.env_reserved_debug.reserved_58, _x.env_reserved_debug.reserved_59, _x.publish_ptp_ts,) = _get_struct_30f30IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().pack(_x.input_debug.vehicle_10.is_received, _x.input_debug.vehicle_10.counter, _x.input_debug.vehicle_10.timestamp, _x.input_debug.vehicle_10.elapsed_time, _x.input_debug.vehicle_50.is_received, _x.input_debug.vehicle_50.counter, _x.input_debug.vehicle_50.timestamp, _x.input_debug.vehicle_50.elapsed_time, _x.input_debug.svc.is_received, _x.input_debug.svc.counter, _x.input_debug.svc.timestamp, _x.input_debug.svc.elapsed_time, _x.input_debug.location.is_received, _x.input_debug.location.counter, _x.input_debug.location.timestamp, _x.input_debug.location.elapsed_time, _x.input_debug.state_machine.is_received, _x.input_debug.state_machine.counter, _x.input_debug.state_machine.timestamp, _x.input_debug.state_machine.elapsed_time, _x.input_debug.planning_result.is_received, _x.input_debug.planning_result.counter, _x.input_debug.planning_result.timestamp, _x.input_debug.planning_result.elapsed_time, _x.input_debug.psap_station.is_received, _x.input_debug.psap_station.counter, _x.input_debug.psap_station.timestamp, _x.input_debug.psap_station.elapsed_time, _x.input_debug.uss_state.sdw_status, _x.input_debug.uss_state.apa_status, _x.input_debug.uss_state.map_obj_statue, _x.input_debug.uss_state.upa_sys_status, _x.input_debug.uss_state.uss_mode, _x.input_debug.svc_state.svc_det_status_type, _x.input_debug.svc_state.svcsapa_detection_avl, _x.input_debug.svc_state.svcpowerswap_detection_avl, _x.input_debug.svc_state.svc_det_sub_status_type))
      length = len(self.input_debug.svc_state.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_debug.svc_state.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.input_debug.svc_state.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_debug.svc_state.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.input_debug.svc_state.is_dlb_triggered, _x.input_debug.svc_state.dlb_request.index, _x.input_debug.svc_state.dlb_request.dlb_reason_type, _x.input_debug.svc_state.dlb_request.dlb_reason_code, _x.input_debug.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.input_debug.svc_state.dlb_request.dlb_end_timestamp_utc))
      _x = self.input_debug.svc_state.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QB12fQB12fQB12f6i().pack(_x.input_debug.location_info.loc_odom.timestamp, _x.input_debug.location_info.loc_odom.location_valid, _x.input_debug.location_info.loc_odom.position.x, _x.input_debug.location_info.loc_odom.position.y, _x.input_debug.location_info.loc_odom.position.z, _x.input_debug.location_info.loc_odom.orientation.x, _x.input_debug.location_info.loc_odom.orientation.y, _x.input_debug.location_info.loc_odom.orientation.z, _x.input_debug.location_info.loc_odom.orientation.w, _x.input_debug.location_info.loc_odom.easting, _x.input_debug.location_info.loc_odom.northing, _x.input_debug.location_info.loc_odom.height, _x.input_debug.location_info.loc_odom.speed, _x.input_debug.location_info.loc_odom.sum_s, _x.input_debug.location_info.loc_slot.timestamp, _x.input_debug.location_info.loc_slot.location_valid, _x.input_debug.location_info.loc_slot.position.x, _x.input_debug.location_info.loc_slot.position.y, _x.input_debug.location_info.loc_slot.position.z, _x.input_debug.location_info.loc_slot.orientation.x, _x.input_debug.location_info.loc_slot.orientation.y, _x.input_debug.location_info.loc_slot.orientation.z, _x.input_debug.location_info.loc_slot.orientation.w, _x.input_debug.location_info.loc_slot.easting, _x.input_debug.location_info.loc_slot.northing, _x.input_debug.location_info.loc_slot.height, _x.input_debug.location_info.loc_slot.speed, _x.input_debug.location_info.loc_slot.sum_s, _x.input_debug.location_info.loc_fused.timestamp, _x.input_debug.location_info.loc_fused.location_valid, _x.input_debug.location_info.loc_fused.position.x, _x.input_debug.location_info.loc_fused.position.y, _x.input_debug.location_info.loc_fused.position.z, _x.input_debug.location_info.loc_fused.orientation.x, _x.input_debug.location_info.loc_fused.orientation.y, _x.input_debug.location_info.loc_fused.orientation.z, _x.input_debug.location_info.loc_fused.orientation.w, _x.input_debug.location_info.loc_fused.easting, _x.input_debug.location_info.loc_fused.northing, _x.input_debug.location_info.loc_fused.height, _x.input_debug.location_info.loc_fused.speed, _x.input_debug.location_info.loc_fused.sum_s, _x.input_debug.location_info.wheel_odom_status, _x.input_debug.location_info.imu_status, _x.input_debug.location_info.svc_status, _x.input_debug.location_info.lidar_status, _x.input_debug.location_info.node_info.node_status, _x.input_debug.location_info.node_info.feature_type))
      _x = self.input_debug.location_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.input_debug.location_info.node_info.counter, _x.input_debug.location_info.node_info.timestamp))
      _x = self.input_debug.location_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.input_debug.location_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.input_debug.location_info.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_3iQ().pack(_x.input_debug.location_info.slot_status, _x.input_debug.location_info.psap_station_info_status, _x.input_debug.location_info.psap_station_entrance_type, _x.input_debug.location_info.psap_result.timestamp))
      length = len(self.input_debug.location_info.psap_result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_debug.location_info.psap_result.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v163 = val1.pt1
        _x = _v163
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v164 = val1.pt2
        _x = _v164
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v165 = val1.pt3
        _x = _v165
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v166 = val1.pt4
        _x = _v166
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2iQ().pack(_x.input_debug.location_info.psap_result.veh_loc.x, _x.input_debug.location_info.psap_result.veh_loc.y, _x.input_debug.location_info.psap_result.veh_loc_z, _x.input_debug.location_info.psap_result.veh_orientation.roll, _x.input_debug.location_info.psap_result.veh_orientation.pitch, _x.input_debug.location_info.psap_result.veh_orientation.yaw, _x.input_debug.location_info.psap_result.veh_loc_valid, _x.input_debug.location_info.psap_result.slot.pt1.x, _x.input_debug.location_info.psap_result.slot.pt1.y, _x.input_debug.location_info.psap_result.slot.pt2.x, _x.input_debug.location_info.psap_result.slot.pt2.y, _x.input_debug.location_info.psap_result.slot.pt3.x, _x.input_debug.location_info.psap_result.slot.pt3.y, _x.input_debug.location_info.psap_result.slot.pt4.x, _x.input_debug.location_info.psap_result.slot.pt4.y, _x.input_debug.location_info.psap_result.slot.veh_pos.x, _x.input_debug.location_info.psap_result.slot.veh_pos.y, _x.input_debug.location_info.psap_result.slot.veh_psi, _x.input_debug.location_info.psap_result.slot.slot_status, _x.input_debug.location_info.psap_result.coordinate_type, _x.input_debug.location_info.publish_ptp_ts))
      _x = self.input_debug.location_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q2i().pack(_x.input_debug.location_info.counter, _x.input_debug.location_info.publish_ts, _x.input_debug.state_machine_info.node_info.node_status, _x.input_debug.state_machine_info.node_info.feature_type))
      _x = self.input_debug.state_machine_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.input_debug.state_machine_info.node_info.counter, _x.input_debug.state_machine_info.node_info.timestamp))
      _x = self.input_debug.state_machine_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.input_debug.state_machine_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.input_debug.state_machine_info.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_4i12f2i6f3ifiQ().pack(_x.input_debug.state_machine_info.feature_status, _x.input_debug.state_machine_info.target_slot.hmi_index, _x.input_debug.state_machine_info.target_slot.svc_index, _x.input_debug.state_machine_info.target_slot.uss_index, _x.input_debug.state_machine_info.target_slot.pt1.x, _x.input_debug.state_machine_info.target_slot.pt1.y, _x.input_debug.state_machine_info.target_slot.pt1.z, _x.input_debug.state_machine_info.target_slot.pt2.x, _x.input_debug.state_machine_info.target_slot.pt2.y, _x.input_debug.state_machine_info.target_slot.pt2.z, _x.input_debug.state_machine_info.target_slot.pt3.x, _x.input_debug.state_machine_info.target_slot.pt3.y, _x.input_debug.state_machine_info.target_slot.pt3.z, _x.input_debug.state_machine_info.target_slot.pt4.x, _x.input_debug.state_machine_info.target_slot.pt4.y, _x.input_debug.state_machine_info.target_slot.pt4.z, _x.input_debug.state_machine_info.target_slot.type, _x.input_debug.state_machine_info.target_slot.source, _x.input_debug.state_machine_info.target_slot.size_x, _x.input_debug.state_machine_info.target_slot.size_y, _x.input_debug.state_machine_info.target_slot.VehPos.x, _x.input_debug.state_machine_info.target_slot.VehPos.y, _x.input_debug.state_machine_info.target_slot.VehPos.z, _x.input_debug.state_machine_info.target_slot.VehPsi, _x.input_debug.state_machine_info.target_slot.status, _x.input_debug.state_machine_info.target_slot.fov, _x.input_debug.state_machine_info.target_slot.planning_result, _x.input_debug.state_machine_info.target_slot.slot_angle, _x.input_debug.state_machine_info.operation_mode, _x.input_debug.state_machine_info.publish_ptp_ts))
      _x = self.input_debug.state_machine_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QI().pack(_x.input_debug.state_machine_info.counter, _x.input_debug.state_machine_info.publish_ts, _x.input_debug.planning_slot_size))
      _x = self.input_debug.psap_station_info.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3ifB().pack(_x.input_debug.psap_station_info.station_gen, _x.input_debug.psap_station_info.station_type, _x.input_debug.psap_station_info.station_entrance_type, _x.input_debug.psap_station_info.slope_length, _x.input_debug.psap_station_info.station_available))
      _x = self.input_debug.psap_station_info.offline_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2Q().pack(_x.input_debug.psap_station_info.station_platform_height, _x.input_debug.psap_station_info.station_tagb_to_slot_dst_x, _x.input_debug.psap_station_info.station_ref_offset, _x.input_debug.psap_station_info.station_reserved, _x.input_debug.psap_station_info.station_tagc_to_slot_dst_x, _x.input_debug.psap_station_info.timestamp_ptp_ns, _x.input_debug.psap_station_info.publish_ptp_ts))
      _x = self.input_debug.psap_station_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6Q4f2B().pack(_x.input_debug.psap_station_info.counter, _x.input_debug.psap_station_info.publish_ts, _x.input_debug.reserved_0, _x.input_debug.reserved_1, _x.input_debug.reserved_2, _x.input_debug.reserved_3, _x.input_debug.reserved_4, _x.input_debug.reserved_5, _x.input_debug.reserved_6, _x.input_debug.reserved_7, _x.input_debug.reserved_8, _x.input_debug.reserved_9))
      _x = self.input_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.system_debug.env_app_info.node_status, _x.system_debug.env_app_info.feature_type))
      _x = self.system_debug.env_app_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.system_debug.env_app_info.counter, _x.system_debug.env_app_info.timestamp))
      _x = self.system_debug.env_app_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.system_debug.env_app_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.system_debug.env_app_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_BQB6Q2fB4Q4f2B().pack(_x.system_debug.psap_mode, _x.system_debug.psap_process_time, _x.system_debug.sapa_mode, _x.system_debug.sapa_process_time, _x.system_debug.obj_map_process_time, _x.system_debug.collision_checker_process_time, _x.system_debug.slots_process_time, _x.system_debug.semantic_map_process_time, _x.system_debug.ego_gear, _x.system_debug.ego_speed, _x.system_debug.ego_steering, _x.system_debug.ego_is_standstill, _x.system_debug.reserved_0, _x.system_debug.reserved_1, _x.system_debug.reserved_2, _x.system_debug.reserved_3, _x.system_debug.reserved_4, _x.system_debug.reserved_5, _x.system_debug.reserved_6, _x.system_debug.reserved_7, _x.system_debug.reserved_8, _x.system_debug.reserved_9))
      _x = self.system_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6B2i6f5If3I().pack(_x.object_map_debug.module_state, _x.object_map_debug.vehicle_state_valid, _x.object_map_debug.uss_instance_valid, _x.object_map_debug.uss_instance_frame_updated, _x.object_map_debug.svc_instance_valid, _x.object_map_debug.svc_instance_frame_updated, _x.object_map_debug.is_psap_left, _x.object_map_debug.feature_type, _x.object_map_debug.feature_state, _x.object_map_debug.latest_location_odom_x, _x.object_map_debug.latest_location_odom_y, _x.object_map_debug.latest_location_odom_theta, _x.object_map_debug.latest_location_psap_x, _x.object_map_debug.latest_location_psap_y, _x.object_map_debug.latest_location_psap_theta, _x.object_map_debug.uss_valid_input_num, _x.object_map_debug.uss_high_filtered_num, _x.object_map_debug.uss_high_line_num, _x.object_map_debug.uss_high_point_num, _x.object_map_debug.uss_timesync_state, _x.object_map_debug.uss_timesync_reserve, _x.object_map_debug.uss_current_objects_num, _x.object_map_debug.uss_fused_objects_num, _x.object_map_debug.uss_associated_num))
      length = len(self.object_map_debug.uss_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.uss_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v167 = val1.obj1
        _x = _v167
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v168 = _v167.pt
        _x = _v168
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v169 = _v167.line
        _v170 = _v169.pt1
        _x = _v170
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v171 = _v169.pt2
        _x = _v171
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v172 = _v167.polygon
        length = len(_v172.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v172.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v173 = val1.obj2
        _x = _v173
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v174 = _v173.pt
        _x = _v174
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v175 = _v173.line
        _v176 = _v175.pt1
        _x = _v176
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v177 = _v175.pt2
        _x = _v177
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v178 = _v173.polygon
        length = len(_v178.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v178.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5If9If3I().pack(_x.object_map_debug.uss_update_num, _x.object_map_debug.uss_increase_num, _x.object_map_debug.fs_input_num, _x.object_map_debug.fs_valid_num, _x.object_map_debug.fs_timesync_state, _x.object_map_debug.fs_timesync_reserve, _x.object_map_debug.fs_current_pts_num, _x.object_map_debug.fs_reserve_type1_num, _x.object_map_debug.fs_reserve_type2_num, _x.object_map_debug.fs_reserve_type3_num, _x.object_map_debug.fs_reserve_type4_num, _x.object_map_debug.fs_reserve_type5_num, _x.object_map_debug.od_input_num, _x.object_map_debug.od_valid_num, _x.object_map_debug.od_timesync_state, _x.object_map_debug.od_timesync_reserve, _x.object_map_debug.od_current_object_num, _x.object_map_debug.od_fused_objects_num, _x.object_map_debug.od_associated_num))
      length = len(self.object_map_debug.od_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.od_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v179 = val1.obj1
        _x = _v179
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v180 = _v179.pt
        _x = _v180
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v181 = _v179.line
        _v182 = _v181.pt1
        _x = _v182
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v183 = _v181.pt2
        _x = _v183
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v184 = _v179.polygon
        length = len(_v184.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v184.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v185 = val1.obj2
        _x = _v185
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v186 = _v185.pt
        _x = _v186
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v187 = _v185.line
        _v188 = _v187.pt1
        _x = _v188
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v189 = _v187.pt2
        _x = _v189
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v190 = _v185.polygon
        length = len(_v190.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v190.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5I().pack(_x.object_map_debug.od_reserve_type1_num, _x.object_map_debug.od_reserve_type2_num, _x.object_map_debug.od_reserve_type3_num, _x.object_map_debug.od_reserve_type4_num, _x.object_map_debug.od_reserve_type5_num))
      length = len(self.object_map_debug.fusion_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.fusion_result:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v191 = val1.obj1
        _x = _v191
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v192 = _v191.pt
        _x = _v192
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v193 = _v191.line
        _v194 = _v193.pt1
        _x = _v194
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v195 = _v193.pt2
        _x = _v195
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v196 = _v191.polygon
        length = len(_v196.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v196.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v197 = val1.obj2
        _x = _v197
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v198 = _v197.pt
        _x = _v198
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v199 = _v197.line
        _v200 = _v199.pt1
        _x = _v200
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v201 = _v199.pt2
        _x = _v201
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v202 = _v197.polygon
        length = len(_v202.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v202.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self.object_map_debug.roi_filtered_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.object_map_debug.roi_filtered_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.roi_filtered_segments:
        _v203 = val1.pt1
        _x = _v203
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v204 = val1.pt2
        _x = _v204
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.object_map_debug.roi_filtered_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_map_debug.roi_filtered_points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_10f10i10f11i3B2i6f5I2f2i6f().pack(_x.object_map_debug.uss_debug_float_reserve1, _x.object_map_debug.uss_debug_float_reserve2, _x.object_map_debug.uss_debug_float_reserve3, _x.object_map_debug.uss_debug_float_reserve4, _x.object_map_debug.uss_debug_float_reserve5, _x.object_map_debug.uss_debug_float_reserve6, _x.object_map_debug.uss_debug_float_reserve7, _x.object_map_debug.uss_debug_float_reserve8, _x.object_map_debug.uss_debug_float_reserve9, _x.object_map_debug.uss_debug_float_reserve10, _x.object_map_debug.uss_debug_int32_reserve1, _x.object_map_debug.uss_debug_int32_reserve2, _x.object_map_debug.uss_debug_int32_reserve3, _x.object_map_debug.uss_debug_int32_reserve4, _x.object_map_debug.uss_debug_int32_reserve5, _x.object_map_debug.uss_debug_int32_reserve6, _x.object_map_debug.uss_debug_int32_reserve7, _x.object_map_debug.uss_debug_int32_reserve8, _x.object_map_debug.uss_debug_int32_reserve9, _x.object_map_debug.uss_debug_int32_reserve10, _x.object_map_debug.svc_debug_float_reserve1, _x.object_map_debug.svc_debug_float_reserve2, _x.object_map_debug.svc_debug_float_reserve3, _x.object_map_debug.svc_debug_float_reserve4, _x.object_map_debug.svc_debug_float_reserve5, _x.object_map_debug.svc_debug_float_reserve6, _x.object_map_debug.svc_debug_float_reserve7, _x.object_map_debug.svc_debug_float_reserve8, _x.object_map_debug.svc_debug_float_reserve9, _x.object_map_debug.svc_debug_float_reserve10, _x.object_map_debug.svc_debug_int32_reserve1, _x.object_map_debug.svc_debug_int32_reserve2, _x.object_map_debug.svc_debug_int32_reserve3, _x.object_map_debug.svc_debug_int32_reserve4, _x.object_map_debug.svc_debug_int32_reserve5, _x.object_map_debug.svc_debug_int32_reserve6, _x.object_map_debug.svc_debug_int32_reserve7, _x.object_map_debug.svc_debug_int32_reserve8, _x.object_map_debug.svc_debug_int32_reserve9, _x.object_map_debug.svc_debug_int32_reserve10, _x.semantic_map_debug.module_state, _x.semantic_map_debug.vehicle_state_valid, _x.semantic_map_debug.uss_instance_valid, _x.semantic_map_debug.svc_instance_valid, _x.semantic_map_debug.feature_type, _x.semantic_map_debug.feature_state, _x.semantic_map_debug.latest_location_odom_x, _x.semantic_map_debug.latest_location_odom_y, _x.semantic_map_debug.latest_location_odom_theta, _x.semantic_map_debug.latest_location_psap_x, _x.semantic_map_debug.latest_location_psap_y, _x.semantic_map_debug.latest_location_psap_theta, _x.semantic_map_debug.slot_num, _x.semantic_map_debug.slot_corner_valid_num, _x.semantic_map_debug.slot_parkstop_valid_num, _x.semantic_map_debug.slot_curb_valid_num, _x.semantic_map_debug.left_corner.slot_id, _x.semantic_map_debug.left_corner.project_x_margin, _x.semantic_map_debug.left_corner.project_y_margin, _x.semantic_map_debug.left_corner.object_x_margin.type, _x.semantic_map_debug.left_corner.object_x_margin.src, _x.semantic_map_debug.left_corner.object_x_margin.pt.x, _x.semantic_map_debug.left_corner.object_x_margin.pt.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.y))
      length = len(self.semantic_map_debug.left_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.left_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.semantic_map_debug.left_corner.object_y_margin.type, _x.semantic_map_debug.left_corner.object_y_margin.src, _x.semantic_map_debug.left_corner.object_y_margin.pt.x, _x.semantic_map_debug.left_corner.object_y_margin.pt.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.y))
      length = len(self.semantic_map_debug.left_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.left_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.semantic_map_debug.right_corner.slot_id, _x.semantic_map_debug.right_corner.project_x_margin, _x.semantic_map_debug.right_corner.project_y_margin, _x.semantic_map_debug.right_corner.object_x_margin.type, _x.semantic_map_debug.right_corner.object_x_margin.src, _x.semantic_map_debug.right_corner.object_x_margin.pt.x, _x.semantic_map_debug.right_corner.object_x_margin.pt.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.y))
      length = len(self.semantic_map_debug.right_corner.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.right_corner.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.semantic_map_debug.right_corner.object_y_margin.type, _x.semantic_map_debug.right_corner.object_y_margin.src, _x.semantic_map_debug.right_corner.object_y_margin.pt.x, _x.semantic_map_debug.right_corner.object_y_margin.pt.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.y))
      length = len(self.semantic_map_debug.right_corner.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.right_corner.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I2f2i6f().pack(_x.semantic_map_debug.curb_or_parkstop.slot_id, _x.semantic_map_debug.curb_or_parkstop.project_x_margin, _x.semantic_map_debug.curb_or_parkstop.project_y_margin, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.y))
      length = len(self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.semantic_map_debug.curb_or_parkstop.object_y_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.y))
      length = len(self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.semantic_map_debug.slot_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.semantic_map_debug.slot_results:
        _v205 = val1.left_corner
        _x = _v205
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v206 = _v205.object_x_margin
        _x = _v206
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v207 = _v206.pt
        _x = _v207
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v208 = _v206.line
        _v209 = _v208.pt1
        _x = _v209
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v210 = _v208.pt2
        _x = _v210
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v211 = _v206.polygon
        length = len(_v211.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v211.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v212 = _v205.object_y_margin
        _x = _v212
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v213 = _v212.pt
        _x = _v213
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v214 = _v212.line
        _v215 = _v214.pt1
        _x = _v215
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v216 = _v214.pt2
        _x = _v216
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v217 = _v212.polygon
        length = len(_v217.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v217.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v218 = val1.right_corner
        _x = _v218
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v219 = _v218.object_x_margin
        _x = _v219
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v220 = _v219.pt
        _x = _v220
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v221 = _v219.line
        _v222 = _v221.pt1
        _x = _v222
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v223 = _v221.pt2
        _x = _v223
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v224 = _v219.polygon
        length = len(_v224.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v224.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v225 = _v218.object_y_margin
        _x = _v225
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v226 = _v225.pt
        _x = _v226
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v227 = _v225.line
        _v228 = _v227.pt1
        _x = _v228
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v229 = _v227.pt2
        _x = _v229
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v230 = _v225.polygon
        length = len(_v230.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v230.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v231 = val1.curb_or_parkstop
        _x = _v231
        buff.write(_get_struct_I2f().pack(_x.slot_id, _x.project_x_margin, _x.project_y_margin))
        _v232 = _v231.object_x_margin
        _x = _v232
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v233 = _v232.pt
        _x = _v233
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v234 = _v232.line
        _v235 = _v234.pt1
        _x = _v235
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v236 = _v234.pt2
        _x = _v236
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v237 = _v232.polygon
        length = len(_v237.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v237.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v238 = _v231.object_y_margin
        _x = _v238
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v239 = _v238.pt
        _x = _v239
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v240 = _v238.line
        _v241 = _v240.pt1
        _x = _v241
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v242 = _v240.pt2
        _x = _v242
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v243 = _v238.polygon
        length = len(_v243.pts)
        buff.write(_struct_I.pack(length))
        for val5 in _v243.pts:
          _x = val5
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_BfB10fI10fI10fI10fI4Q4f2B().pack(_x.collision_checker_debug.is_load_config, _x.collision_checker_debug.wheel_curve, _x.collision_checker_debug.is_larger_outlines, _x.collision_checker_debug.forward_dst.crash_distance, _x.collision_checker_debug.forward_dst.obj_distance, _x.collision_checker_debug.forward_dst.uss_region_distance, _x.collision_checker_debug.forward_dst.center_x, _x.collision_checker_debug.forward_dst.center_y, _x.collision_checker_debug.forward_dst.center_yaw, _x.collision_checker_debug.forward_dst.crash_pt1.x, _x.collision_checker_debug.forward_dst.crash_pt1.y, _x.collision_checker_debug.forward_dst.crash_pt2.x, _x.collision_checker_debug.forward_dst.crash_pt2.y, _x.collision_checker_debug.forward_dst.path_index, _x.collision_checker_debug.backward_dst.crash_distance, _x.collision_checker_debug.backward_dst.obj_distance, _x.collision_checker_debug.backward_dst.uss_region_distance, _x.collision_checker_debug.backward_dst.center_x, _x.collision_checker_debug.backward_dst.center_y, _x.collision_checker_debug.backward_dst.center_yaw, _x.collision_checker_debug.backward_dst.crash_pt1.x, _x.collision_checker_debug.backward_dst.crash_pt1.y, _x.collision_checker_debug.backward_dst.crash_pt2.x, _x.collision_checker_debug.backward_dst.crash_pt2.y, _x.collision_checker_debug.backward_dst.path_index, _x.collision_checker_debug.direct_forward_dst.crash_distance, _x.collision_checker_debug.direct_forward_dst.obj_distance, _x.collision_checker_debug.direct_forward_dst.uss_region_distance, _x.collision_checker_debug.direct_forward_dst.center_x, _x.collision_checker_debug.direct_forward_dst.center_y, _x.collision_checker_debug.direct_forward_dst.center_yaw, _x.collision_checker_debug.direct_forward_dst.crash_pt1.x, _x.collision_checker_debug.direct_forward_dst.crash_pt1.y, _x.collision_checker_debug.direct_forward_dst.crash_pt2.x, _x.collision_checker_debug.direct_forward_dst.crash_pt2.y, _x.collision_checker_debug.direct_forward_dst.path_index, _x.collision_checker_debug.direct_backward_dst.crash_distance, _x.collision_checker_debug.direct_backward_dst.obj_distance, _x.collision_checker_debug.direct_backward_dst.uss_region_distance, _x.collision_checker_debug.direct_backward_dst.center_x, _x.collision_checker_debug.direct_backward_dst.center_y, _x.collision_checker_debug.direct_backward_dst.center_yaw, _x.collision_checker_debug.direct_backward_dst.crash_pt1.x, _x.collision_checker_debug.direct_backward_dst.crash_pt1.y, _x.collision_checker_debug.direct_backward_dst.crash_pt2.x, _x.collision_checker_debug.direct_backward_dst.crash_pt2.y, _x.collision_checker_debug.direct_backward_dst.path_index, _x.collision_checker_debug.reserved_0, _x.collision_checker_debug.reserved_1, _x.collision_checker_debug.reserved_2, _x.collision_checker_debug.reserved_3, _x.collision_checker_debug.reserved_4, _x.collision_checker_debug.reserved_5, _x.collision_checker_debug.reserved_6, _x.collision_checker_debug.reserved_7, _x.collision_checker_debug.reserved_8, _x.collision_checker_debug.reserved_9))
      _x = self.collision_checker_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B().pack(_x.slots_generate_debug.ego_x, _x.slots_generate_debug.ego_y, _x.slots_generate_debug.ego_yaw, _x.slots_generate_debug.uss_slots_size, _x.slots_generate_debug.svc_slots_size, _x.slots_generate_debug.planning_return_slots_size, _x.slots_generate_debug.planning_slots_size, _x.slots_generate_debug.bind_slots_size, _x.slots_generate_debug.hmi_slots_size, _x.slots_generate_debug.psap_slot.slot.hmi_index, _x.slots_generate_debug.psap_slot.slot.svc_index, _x.slots_generate_debug.psap_slot.slot.uss_index, _x.slots_generate_debug.psap_slot.slot.pt1.x, _x.slots_generate_debug.psap_slot.slot.pt1.y, _x.slots_generate_debug.psap_slot.slot.pt1.z, _x.slots_generate_debug.psap_slot.slot.pt2.x, _x.slots_generate_debug.psap_slot.slot.pt2.y, _x.slots_generate_debug.psap_slot.slot.pt2.z, _x.slots_generate_debug.psap_slot.slot.pt3.x, _x.slots_generate_debug.psap_slot.slot.pt3.y, _x.slots_generate_debug.psap_slot.slot.pt3.z, _x.slots_generate_debug.psap_slot.slot.pt4.x, _x.slots_generate_debug.psap_slot.slot.pt4.y, _x.slots_generate_debug.psap_slot.slot.pt4.z, _x.slots_generate_debug.psap_slot.slot.type, _x.slots_generate_debug.psap_slot.slot.source, _x.slots_generate_debug.psap_slot.slot.size_x, _x.slots_generate_debug.psap_slot.slot.size_y, _x.slots_generate_debug.psap_slot.slot.VehPos.x, _x.slots_generate_debug.psap_slot.slot.VehPos.y, _x.slots_generate_debug.psap_slot.slot.VehPos.z, _x.slots_generate_debug.psap_slot.slot.VehPsi, _x.slots_generate_debug.psap_slot.slot.status, _x.slots_generate_debug.psap_slot.slot.fov, _x.slots_generate_debug.psap_slot.slot.planning_result, _x.slots_generate_debug.psap_slot.slot.slot_angle, _x.slots_generate_debug.psap_slot.left_corner_exist, _x.slots_generate_debug.psap_slot.left_corner_pt1.x, _x.slots_generate_debug.psap_slot.left_corner_pt1.y, _x.slots_generate_debug.psap_slot.left_corner_pt1.z, _x.slots_generate_debug.psap_slot.left_corner_pt2.x, _x.slots_generate_debug.psap_slot.left_corner_pt2.y, _x.slots_generate_debug.psap_slot.left_corner_pt2.z, _x.slots_generate_debug.psap_slot.right_corner_exist, _x.slots_generate_debug.psap_slot.right_corner_pt1.x, _x.slots_generate_debug.psap_slot.right_corner_pt1.y, _x.slots_generate_debug.psap_slot.right_corner_pt1.z, _x.slots_generate_debug.psap_slot.right_corner_pt2.x, _x.slots_generate_debug.psap_slot.right_corner_pt2.y, _x.slots_generate_debug.psap_slot.right_corner_pt2.z, _x.slots_generate_debug.psap_slot.curb_exist, _x.slots_generate_debug.psap_slot.curb_pt1.x, _x.slots_generate_debug.psap_slot.curb_pt1.y, _x.slots_generate_debug.psap_slot.curb_pt1.z, _x.slots_generate_debug.psap_slot.curb_pt2.x, _x.slots_generate_debug.psap_slot.curb_pt2.y, _x.slots_generate_debug.psap_slot.curb_pt2.z, _x.slots_generate_debug.psap_slot.slot_bumper, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.z, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.z, _x.slots_generate_debug.psap_slot.left_corner_pt3.x, _x.slots_generate_debug.psap_slot.left_corner_pt3.y, _x.slots_generate_debug.psap_slot.left_corner_pt3.z, _x.slots_generate_debug.psap_slot.right_corner_pt3.x, _x.slots_generate_debug.psap_slot.right_corner_pt3.y, _x.slots_generate_debug.psap_slot.right_corner_pt3.z, _x.slots_generate_debug.psap_slot.corner_pt3_exist, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.z, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.z, _x.slots_generate_debug.psap_slot.virtual_channel_exist, _x.slots_generate_debug.psap_slot.left_corner_type, _x.slots_generate_debug.psap_slot.right_corner_type, _x.slots_generate_debug.psap_slot.slot_update_count, _x.slots_generate_debug.psap_slot.replan_suggest, _x.slots_generate_debug.psap_hmi.psapMapObjectType, _x.slots_generate_debug.psap_hmi.psapMapObjectValid, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX4, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY4, _x.slots_generate_debug.psap_ad_pose_x, _x.slots_generate_debug.psap_ad_pose_y, _x.slots_generate_debug.psap_ad_pose_yaw, _x.slots_generate_debug.planning_ok_slots_size, _x.slots_generate_debug.track_slot_index, _x.slots_generate_debug.sapa_guidance_slot.slot.hmi_index, _x.slots_generate_debug.sapa_guidance_slot.slot.svc_index, _x.slots_generate_debug.sapa_guidance_slot.slot.uss_index, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.z, _x.slots_generate_debug.sapa_guidance_slot.slot.type, _x.slots_generate_debug.sapa_guidance_slot.slot.source, _x.slots_generate_debug.sapa_guidance_slot.slot.size_x, _x.slots_generate_debug.sapa_guidance_slot.slot.size_y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.x, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.z, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPsi, _x.slots_generate_debug.sapa_guidance_slot.slot.status, _x.slots_generate_debug.sapa_guidance_slot.slot.fov, _x.slots_generate_debug.sapa_guidance_slot.slot.planning_result, _x.slots_generate_debug.sapa_guidance_slot.slot.slot_angle, _x.slots_generate_debug.sapa_guidance_slot.left_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.curb_exist, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_type, _x.slots_generate_debug.sapa_guidance_slot.right_corner_type, _x.slots_generate_debug.sapa_guidance_slot.slot_update_count, _x.slots_generate_debug.sapa_guidance_slot.replan_suggest, _x.slots_generate_debug.guidance_slot_planning_ok, _x.slots_generate_debug.guidance_slot_size_x, _x.slots_generate_debug.guidance_slot_size_y, _x.slots_generate_debug.is_guidance_slot_narrow, _x.slots_generate_debug.reserved_0, _x.slots_generate_debug.reserved_1, _x.slots_generate_debug.reserved_2, _x.slots_generate_debug.reserved_3, _x.slots_generate_debug.reserved_4, _x.slots_generate_debug.reserved_5, _x.slots_generate_debug.reserved_6, _x.slots_generate_debug.reserved_7, _x.slots_generate_debug.reserved_8, _x.slots_generate_debug.reserved_9))
      _x = self.slots_generate_debug.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_30f30IQ().pack(_x.env_reserved_debug.reserved_0, _x.env_reserved_debug.reserved_1, _x.env_reserved_debug.reserved_2, _x.env_reserved_debug.reserved_3, _x.env_reserved_debug.reserved_4, _x.env_reserved_debug.reserved_5, _x.env_reserved_debug.reserved_6, _x.env_reserved_debug.reserved_7, _x.env_reserved_debug.reserved_8, _x.env_reserved_debug.reserved_9, _x.env_reserved_debug.reserved_10, _x.env_reserved_debug.reserved_11, _x.env_reserved_debug.reserved_12, _x.env_reserved_debug.reserved_13, _x.env_reserved_debug.reserved_14, _x.env_reserved_debug.reserved_15, _x.env_reserved_debug.reserved_16, _x.env_reserved_debug.reserved_17, _x.env_reserved_debug.reserved_18, _x.env_reserved_debug.reserved_19, _x.env_reserved_debug.reserved_20, _x.env_reserved_debug.reserved_21, _x.env_reserved_debug.reserved_22, _x.env_reserved_debug.reserved_23, _x.env_reserved_debug.reserved_24, _x.env_reserved_debug.reserved_25, _x.env_reserved_debug.reserved_26, _x.env_reserved_debug.reserved_27, _x.env_reserved_debug.reserved_28, _x.env_reserved_debug.reserved_29, _x.env_reserved_debug.reserved_30, _x.env_reserved_debug.reserved_31, _x.env_reserved_debug.reserved_32, _x.env_reserved_debug.reserved_33, _x.env_reserved_debug.reserved_34, _x.env_reserved_debug.reserved_35, _x.env_reserved_debug.reserved_36, _x.env_reserved_debug.reserved_37, _x.env_reserved_debug.reserved_38, _x.env_reserved_debug.reserved_39, _x.env_reserved_debug.reserved_40, _x.env_reserved_debug.reserved_41, _x.env_reserved_debug.reserved_42, _x.env_reserved_debug.reserved_43, _x.env_reserved_debug.reserved_44, _x.env_reserved_debug.reserved_45, _x.env_reserved_debug.reserved_46, _x.env_reserved_debug.reserved_47, _x.env_reserved_debug.reserved_48, _x.env_reserved_debug.reserved_49, _x.env_reserved_debug.reserved_50, _x.env_reserved_debug.reserved_51, _x.env_reserved_debug.reserved_52, _x.env_reserved_debug.reserved_53, _x.env_reserved_debug.reserved_54, _x.env_reserved_debug.reserved_55, _x.env_reserved_debug.reserved_56, _x.env_reserved_debug.reserved_57, _x.env_reserved_debug.reserved_58, _x.env_reserved_debug.reserved_59, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input_debug is None:
        self.input_debug = rospy_message_converter.msg.ParEnvInputDebug()
      if self.system_debug is None:
        self.system_debug = rospy_message_converter.msg.ParEnvSystemDebug()
      if self.object_map_debug is None:
        self.object_map_debug = rospy_message_converter.msg.ParEnvObjectMapDebug()
      if self.semantic_map_debug is None:
        self.semantic_map_debug = rospy_message_converter.msg.ParEnvSemanticMapDebug()
      if self.collision_checker_debug is None:
        self.collision_checker_debug = rospy_message_converter.msg.ParEnvCollisionCheckerDebug()
      if self.slots_generate_debug is None:
        self.slots_generate_debug = rospy_message_converter.msg.ParEnvSlotsGenerateDebug()
      if self.env_reserved_debug is None:
        self.env_reserved_debug = rospy_message_converter.msg.ParEnvReserved()
      end = 0
      _x = self
      start = end
      end += 205
      (_x.input_debug.vehicle_10.is_received, _x.input_debug.vehicle_10.counter, _x.input_debug.vehicle_10.timestamp, _x.input_debug.vehicle_10.elapsed_time, _x.input_debug.vehicle_50.is_received, _x.input_debug.vehicle_50.counter, _x.input_debug.vehicle_50.timestamp, _x.input_debug.vehicle_50.elapsed_time, _x.input_debug.svc.is_received, _x.input_debug.svc.counter, _x.input_debug.svc.timestamp, _x.input_debug.svc.elapsed_time, _x.input_debug.location.is_received, _x.input_debug.location.counter, _x.input_debug.location.timestamp, _x.input_debug.location.elapsed_time, _x.input_debug.state_machine.is_received, _x.input_debug.state_machine.counter, _x.input_debug.state_machine.timestamp, _x.input_debug.state_machine.elapsed_time, _x.input_debug.planning_result.is_received, _x.input_debug.planning_result.counter, _x.input_debug.planning_result.timestamp, _x.input_debug.planning_result.elapsed_time, _x.input_debug.psap_station.is_received, _x.input_debug.psap_station.counter, _x.input_debug.psap_station.timestamp, _x.input_debug.psap_station.elapsed_time, _x.input_debug.uss_state.sdw_status, _x.input_debug.uss_state.apa_status, _x.input_debug.uss_state.map_obj_statue, _x.input_debug.uss_state.upa_sys_status, _x.input_debug.uss_state.uss_mode, _x.input_debug.svc_state.svc_det_status_type, _x.input_debug.svc_state.svcsapa_detection_avl, _x.input_debug.svc_state.svcpowerswap_detection_avl, _x.input_debug.svc_state.svc_det_sub_status_type,) = _get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().unpack(str[start:end])
      self.input_debug.vehicle_10.is_received = bool(self.input_debug.vehicle_10.is_received)
      self.input_debug.vehicle_50.is_received = bool(self.input_debug.vehicle_50.is_received)
      self.input_debug.svc.is_received = bool(self.input_debug.svc.is_received)
      self.input_debug.location.is_received = bool(self.input_debug.location.is_received)
      self.input_debug.state_machine.is_received = bool(self.input_debug.state_machine.is_received)
      self.input_debug.planning_result.is_received = bool(self.input_debug.planning_result.is_received)
      self.input_debug.psap_station.is_received = bool(self.input_debug.psap_station.is_received)
      self.input_debug.svc_state.svcsapa_detection_avl = bool(self.input_debug.svc_state.svcsapa_detection_avl)
      self.input_debug.svc_state.svcpowerswap_detection_avl = bool(self.input_debug.svc_state.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_debug.svc_state.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.input_debug.svc_state.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_debug.svc_state.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.input_debug.svc_state.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.input_debug.svc_state.is_dlb_triggered, _x.input_debug.svc_state.dlb_request.index, _x.input_debug.svc_state.dlb_request.dlb_reason_type, _x.input_debug.svc_state.dlb_request.dlb_reason_code, _x.input_debug.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.input_debug.svc_state.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.input_debug.svc_state.is_dlb_triggered = bool(self.input_debug.svc_state.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.svc_state.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.svc_state.dlb_request.description = str[start:end]
      _x = self
      start = end
      end += 195
      (_x.input_debug.location_info.loc_odom.timestamp, _x.input_debug.location_info.loc_odom.location_valid, _x.input_debug.location_info.loc_odom.position.x, _x.input_debug.location_info.loc_odom.position.y, _x.input_debug.location_info.loc_odom.position.z, _x.input_debug.location_info.loc_odom.orientation.x, _x.input_debug.location_info.loc_odom.orientation.y, _x.input_debug.location_info.loc_odom.orientation.z, _x.input_debug.location_info.loc_odom.orientation.w, _x.input_debug.location_info.loc_odom.easting, _x.input_debug.location_info.loc_odom.northing, _x.input_debug.location_info.loc_odom.height, _x.input_debug.location_info.loc_odom.speed, _x.input_debug.location_info.loc_odom.sum_s, _x.input_debug.location_info.loc_slot.timestamp, _x.input_debug.location_info.loc_slot.location_valid, _x.input_debug.location_info.loc_slot.position.x, _x.input_debug.location_info.loc_slot.position.y, _x.input_debug.location_info.loc_slot.position.z, _x.input_debug.location_info.loc_slot.orientation.x, _x.input_debug.location_info.loc_slot.orientation.y, _x.input_debug.location_info.loc_slot.orientation.z, _x.input_debug.location_info.loc_slot.orientation.w, _x.input_debug.location_info.loc_slot.easting, _x.input_debug.location_info.loc_slot.northing, _x.input_debug.location_info.loc_slot.height, _x.input_debug.location_info.loc_slot.speed, _x.input_debug.location_info.loc_slot.sum_s, _x.input_debug.location_info.loc_fused.timestamp, _x.input_debug.location_info.loc_fused.location_valid, _x.input_debug.location_info.loc_fused.position.x, _x.input_debug.location_info.loc_fused.position.y, _x.input_debug.location_info.loc_fused.position.z, _x.input_debug.location_info.loc_fused.orientation.x, _x.input_debug.location_info.loc_fused.orientation.y, _x.input_debug.location_info.loc_fused.orientation.z, _x.input_debug.location_info.loc_fused.orientation.w, _x.input_debug.location_info.loc_fused.easting, _x.input_debug.location_info.loc_fused.northing, _x.input_debug.location_info.loc_fused.height, _x.input_debug.location_info.loc_fused.speed, _x.input_debug.location_info.loc_fused.sum_s, _x.input_debug.location_info.wheel_odom_status, _x.input_debug.location_info.imu_status, _x.input_debug.location_info.svc_status, _x.input_debug.location_info.lidar_status, _x.input_debug.location_info.node_info.node_status, _x.input_debug.location_info.node_info.feature_type,) = _get_struct_QB12fQB12fQB12f6i().unpack(str[start:end])
      self.input_debug.location_info.loc_odom.location_valid = bool(self.input_debug.location_info.loc_odom.location_valid)
      self.input_debug.location_info.loc_slot.location_valid = bool(self.input_debug.location_info.loc_slot.location_valid)
      self.input_debug.location_info.loc_fused.location_valid = bool(self.input_debug.location_info.loc_fused.location_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.location_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.location_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.input_debug.location_info.node_info.counter, _x.input_debug.location_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.location_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.location_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.input_debug.location_info.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 20
      (_x.input_debug.location_info.slot_status, _x.input_debug.location_info.psap_station_info_status, _x.input_debug.location_info.psap_station_entrance_type, _x.input_debug.location_info.psap_result.timestamp,) = _get_struct_3iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_debug.location_info.psap_result.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v244 = val1.pt1
        _x = _v244
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v245 = val1.pt2
        _x = _v245
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v246 = val1.pt3
        _x = _v246
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v247 = val1.pt4
        _x = _v247
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.input_debug.location_info.psap_result.objects.append(val1)
      _x = self
      start = end
      end += 85
      (_x.input_debug.location_info.psap_result.veh_loc.x, _x.input_debug.location_info.psap_result.veh_loc.y, _x.input_debug.location_info.psap_result.veh_loc_z, _x.input_debug.location_info.psap_result.veh_orientation.roll, _x.input_debug.location_info.psap_result.veh_orientation.pitch, _x.input_debug.location_info.psap_result.veh_orientation.yaw, _x.input_debug.location_info.psap_result.veh_loc_valid, _x.input_debug.location_info.psap_result.slot.pt1.x, _x.input_debug.location_info.psap_result.slot.pt1.y, _x.input_debug.location_info.psap_result.slot.pt2.x, _x.input_debug.location_info.psap_result.slot.pt2.y, _x.input_debug.location_info.psap_result.slot.pt3.x, _x.input_debug.location_info.psap_result.slot.pt3.y, _x.input_debug.location_info.psap_result.slot.pt4.x, _x.input_debug.location_info.psap_result.slot.pt4.y, _x.input_debug.location_info.psap_result.slot.veh_pos.x, _x.input_debug.location_info.psap_result.slot.veh_pos.y, _x.input_debug.location_info.psap_result.slot.veh_psi, _x.input_debug.location_info.psap_result.slot.slot_status, _x.input_debug.location_info.psap_result.coordinate_type, _x.input_debug.location_info.publish_ptp_ts,) = _get_struct_6fB11f2iQ().unpack(str[start:end])
      self.input_debug.location_info.psap_result.veh_loc_valid = bool(self.input_debug.location_info.psap_result.veh_loc_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.location_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.location_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.input_debug.location_info.counter, _x.input_debug.location_info.publish_ts, _x.input_debug.state_machine_info.node_info.node_status, _x.input_debug.state_machine_info.node_info.feature_type,) = _get_struct_2Q2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.state_machine_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.state_machine_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.input_debug.state_machine_info.node_info.counter, _x.input_debug.state_machine_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.state_machine_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.state_machine_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.input_debug.state_machine_info.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 124
      (_x.input_debug.state_machine_info.feature_status, _x.input_debug.state_machine_info.target_slot.hmi_index, _x.input_debug.state_machine_info.target_slot.svc_index, _x.input_debug.state_machine_info.target_slot.uss_index, _x.input_debug.state_machine_info.target_slot.pt1.x, _x.input_debug.state_machine_info.target_slot.pt1.y, _x.input_debug.state_machine_info.target_slot.pt1.z, _x.input_debug.state_machine_info.target_slot.pt2.x, _x.input_debug.state_machine_info.target_slot.pt2.y, _x.input_debug.state_machine_info.target_slot.pt2.z, _x.input_debug.state_machine_info.target_slot.pt3.x, _x.input_debug.state_machine_info.target_slot.pt3.y, _x.input_debug.state_machine_info.target_slot.pt3.z, _x.input_debug.state_machine_info.target_slot.pt4.x, _x.input_debug.state_machine_info.target_slot.pt4.y, _x.input_debug.state_machine_info.target_slot.pt4.z, _x.input_debug.state_machine_info.target_slot.type, _x.input_debug.state_machine_info.target_slot.source, _x.input_debug.state_machine_info.target_slot.size_x, _x.input_debug.state_machine_info.target_slot.size_y, _x.input_debug.state_machine_info.target_slot.VehPos.x, _x.input_debug.state_machine_info.target_slot.VehPos.y, _x.input_debug.state_machine_info.target_slot.VehPos.z, _x.input_debug.state_machine_info.target_slot.VehPsi, _x.input_debug.state_machine_info.target_slot.status, _x.input_debug.state_machine_info.target_slot.fov, _x.input_debug.state_machine_info.target_slot.planning_result, _x.input_debug.state_machine_info.target_slot.slot_angle, _x.input_debug.state_machine_info.operation_mode, _x.input_debug.state_machine_info.publish_ptp_ts,) = _get_struct_4i12f2i6f3ifiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.state_machine_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.state_machine_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.input_debug.state_machine_info.counter, _x.input_debug.state_machine_info.publish_ts, _x.input_debug.planning_slot_size,) = _get_struct_2QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.psap_station_info.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.psap_station_info.station_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.input_debug.psap_station_info.station_gen, _x.input_debug.psap_station_info.station_type, _x.input_debug.psap_station_info.station_entrance_type, _x.input_debug.psap_station_info.slope_length, _x.input_debug.psap_station_info.station_available,) = _get_struct_3ifB().unpack(str[start:end])
      self.input_debug.psap_station_info.station_available = bool(self.input_debug.psap_station_info.station_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.psap_station_info.offline_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.psap_station_info.offline_reason = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.input_debug.psap_station_info.station_platform_height, _x.input_debug.psap_station_info.station_tagb_to_slot_dst_x, _x.input_debug.psap_station_info.station_ref_offset, _x.input_debug.psap_station_info.station_reserved, _x.input_debug.psap_station_info.station_tagc_to_slot_dst_x, _x.input_debug.psap_station_info.timestamp_ptp_ns, _x.input_debug.psap_station_info.publish_ptp_ts,) = _get_struct_5f2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.psap_station_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.psap_station_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.input_debug.psap_station_info.counter, _x.input_debug.psap_station_info.publish_ts, _x.input_debug.reserved_0, _x.input_debug.reserved_1, _x.input_debug.reserved_2, _x.input_debug.reserved_3, _x.input_debug.reserved_4, _x.input_debug.reserved_5, _x.input_debug.reserved_6, _x.input_debug.reserved_7, _x.input_debug.reserved_8, _x.input_debug.reserved_9,) = _get_struct_6Q4f2B().unpack(str[start:end])
      self.input_debug.reserved_8 = bool(self.input_debug.reserved_8)
      self.input_debug.reserved_9 = bool(self.input_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.system_debug.env_app_info.node_status, _x.system_debug.env_app_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_debug.env_app_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_debug.env_app_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.system_debug.env_app_info.counter, _x.system_debug.env_app_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_debug.env_app_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_debug.env_app_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.system_debug.env_app_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 117
      (_x.system_debug.psap_mode, _x.system_debug.psap_process_time, _x.system_debug.sapa_mode, _x.system_debug.sapa_process_time, _x.system_debug.obj_map_process_time, _x.system_debug.collision_checker_process_time, _x.system_debug.slots_process_time, _x.system_debug.semantic_map_process_time, _x.system_debug.ego_gear, _x.system_debug.ego_speed, _x.system_debug.ego_steering, _x.system_debug.ego_is_standstill, _x.system_debug.reserved_0, _x.system_debug.reserved_1, _x.system_debug.reserved_2, _x.system_debug.reserved_3, _x.system_debug.reserved_4, _x.system_debug.reserved_5, _x.system_debug.reserved_6, _x.system_debug.reserved_7, _x.system_debug.reserved_8, _x.system_debug.reserved_9,) = _get_struct_BQB6Q2fB4Q4f2B().unpack(str[start:end])
      self.system_debug.psap_mode = bool(self.system_debug.psap_mode)
      self.system_debug.sapa_mode = bool(self.system_debug.sapa_mode)
      self.system_debug.ego_is_standstill = bool(self.system_debug.ego_is_standstill)
      self.system_debug.reserved_8 = bool(self.system_debug.reserved_8)
      self.system_debug.reserved_9 = bool(self.system_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.system_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.object_map_debug.module_state, _x.object_map_debug.vehicle_state_valid, _x.object_map_debug.uss_instance_valid, _x.object_map_debug.uss_instance_frame_updated, _x.object_map_debug.svc_instance_valid, _x.object_map_debug.svc_instance_frame_updated, _x.object_map_debug.is_psap_left, _x.object_map_debug.feature_type, _x.object_map_debug.feature_state, _x.object_map_debug.latest_location_odom_x, _x.object_map_debug.latest_location_odom_y, _x.object_map_debug.latest_location_odom_theta, _x.object_map_debug.latest_location_psap_x, _x.object_map_debug.latest_location_psap_y, _x.object_map_debug.latest_location_psap_theta, _x.object_map_debug.uss_valid_input_num, _x.object_map_debug.uss_high_filtered_num, _x.object_map_debug.uss_high_line_num, _x.object_map_debug.uss_high_point_num, _x.object_map_debug.uss_timesync_state, _x.object_map_debug.uss_timesync_reserve, _x.object_map_debug.uss_current_objects_num, _x.object_map_debug.uss_fused_objects_num, _x.object_map_debug.uss_associated_num,) = _get_struct_i6B2i6f5If3I().unpack(str[start:end])
      self.object_map_debug.vehicle_state_valid = bool(self.object_map_debug.vehicle_state_valid)
      self.object_map_debug.uss_instance_valid = bool(self.object_map_debug.uss_instance_valid)
      self.object_map_debug.uss_instance_frame_updated = bool(self.object_map_debug.uss_instance_frame_updated)
      self.object_map_debug.svc_instance_valid = bool(self.object_map_debug.svc_instance_valid)
      self.object_map_debug.svc_instance_frame_updated = bool(self.object_map_debug.svc_instance_frame_updated)
      self.object_map_debug.is_psap_left = bool(self.object_map_debug.is_psap_left)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.uss_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v248 = val1.obj1
        _x = _v248
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v249 = _v248.pt
        _x = _v249
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v250 = _v248.line
        _v251 = _v250.pt1
        _x = _v251
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v252 = _v250.pt2
        _x = _v252
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v253 = _v248.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v253.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v253.pts.append(val4)
        _v254 = val1.obj2
        _x = _v254
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v255 = _v254.pt
        _x = _v255
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v256 = _v254.line
        _v257 = _v256.pt1
        _x = _v257
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v258 = _v256.pt2
        _x = _v258
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v259 = _v254.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v259.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v259.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.object_map_debug.uss_pairing.append(val1)
      _x = self
      start = end
      end += 76
      (_x.object_map_debug.uss_update_num, _x.object_map_debug.uss_increase_num, _x.object_map_debug.fs_input_num, _x.object_map_debug.fs_valid_num, _x.object_map_debug.fs_timesync_state, _x.object_map_debug.fs_timesync_reserve, _x.object_map_debug.fs_current_pts_num, _x.object_map_debug.fs_reserve_type1_num, _x.object_map_debug.fs_reserve_type2_num, _x.object_map_debug.fs_reserve_type3_num, _x.object_map_debug.fs_reserve_type4_num, _x.object_map_debug.fs_reserve_type5_num, _x.object_map_debug.od_input_num, _x.object_map_debug.od_valid_num, _x.object_map_debug.od_timesync_state, _x.object_map_debug.od_timesync_reserve, _x.object_map_debug.od_current_object_num, _x.object_map_debug.od_fused_objects_num, _x.object_map_debug.od_associated_num,) = _get_struct_5If9If3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.od_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v260 = val1.obj1
        _x = _v260
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v261 = _v260.pt
        _x = _v261
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v262 = _v260.line
        _v263 = _v262.pt1
        _x = _v263
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v264 = _v262.pt2
        _x = _v264
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v265 = _v260.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v265.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v265.pts.append(val4)
        _v266 = val1.obj2
        _x = _v266
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v267 = _v266.pt
        _x = _v267
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v268 = _v266.line
        _v269 = _v268.pt1
        _x = _v269
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v270 = _v268.pt2
        _x = _v270
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v271 = _v266.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v271.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v271.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.object_map_debug.od_pairing.append(val1)
      _x = self
      start = end
      end += 20
      (_x.object_map_debug.od_reserve_type1_num, _x.object_map_debug.od_reserve_type2_num, _x.object_map_debug.od_reserve_type3_num, _x.object_map_debug.od_reserve_type4_num, _x.object_map_debug.od_reserve_type5_num,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.fusion_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v272 = val1.obj1
        _x = _v272
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v273 = _v272.pt
        _x = _v273
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v274 = _v272.line
        _v275 = _v274.pt1
        _x = _v275
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v276 = _v274.pt2
        _x = _v276
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v277 = _v272.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v277.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v277.pts.append(val4)
        _v278 = val1.obj2
        _x = _v278
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v279 = _v278.pt
        _x = _v279
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v280 = _v278.line
        _v281 = _v280.pt1
        _x = _v281
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v282 = _v280.pt2
        _x = _v282
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v283 = _v278.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v283.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v283.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.object_map_debug.fusion_result.append(val1)
      start = end
      end += 4
      (self.object_map_debug.roi_filtered_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.roi_filtered_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectSegment()
        _v284 = val1.pt1
        _x = _v284
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v285 = val1.pt2
        _x = _v285
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_map_debug.roi_filtered_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_map_debug.roi_filtered_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.object_map_debug.roi_filtered_points.append(val1)
      _x = self
      start = end
      end += 259
      (_x.object_map_debug.uss_debug_float_reserve1, _x.object_map_debug.uss_debug_float_reserve2, _x.object_map_debug.uss_debug_float_reserve3, _x.object_map_debug.uss_debug_float_reserve4, _x.object_map_debug.uss_debug_float_reserve5, _x.object_map_debug.uss_debug_float_reserve6, _x.object_map_debug.uss_debug_float_reserve7, _x.object_map_debug.uss_debug_float_reserve8, _x.object_map_debug.uss_debug_float_reserve9, _x.object_map_debug.uss_debug_float_reserve10, _x.object_map_debug.uss_debug_int32_reserve1, _x.object_map_debug.uss_debug_int32_reserve2, _x.object_map_debug.uss_debug_int32_reserve3, _x.object_map_debug.uss_debug_int32_reserve4, _x.object_map_debug.uss_debug_int32_reserve5, _x.object_map_debug.uss_debug_int32_reserve6, _x.object_map_debug.uss_debug_int32_reserve7, _x.object_map_debug.uss_debug_int32_reserve8, _x.object_map_debug.uss_debug_int32_reserve9, _x.object_map_debug.uss_debug_int32_reserve10, _x.object_map_debug.svc_debug_float_reserve1, _x.object_map_debug.svc_debug_float_reserve2, _x.object_map_debug.svc_debug_float_reserve3, _x.object_map_debug.svc_debug_float_reserve4, _x.object_map_debug.svc_debug_float_reserve5, _x.object_map_debug.svc_debug_float_reserve6, _x.object_map_debug.svc_debug_float_reserve7, _x.object_map_debug.svc_debug_float_reserve8, _x.object_map_debug.svc_debug_float_reserve9, _x.object_map_debug.svc_debug_float_reserve10, _x.object_map_debug.svc_debug_int32_reserve1, _x.object_map_debug.svc_debug_int32_reserve2, _x.object_map_debug.svc_debug_int32_reserve3, _x.object_map_debug.svc_debug_int32_reserve4, _x.object_map_debug.svc_debug_int32_reserve5, _x.object_map_debug.svc_debug_int32_reserve6, _x.object_map_debug.svc_debug_int32_reserve7, _x.object_map_debug.svc_debug_int32_reserve8, _x.object_map_debug.svc_debug_int32_reserve9, _x.object_map_debug.svc_debug_int32_reserve10, _x.semantic_map_debug.module_state, _x.semantic_map_debug.vehicle_state_valid, _x.semantic_map_debug.uss_instance_valid, _x.semantic_map_debug.svc_instance_valid, _x.semantic_map_debug.feature_type, _x.semantic_map_debug.feature_state, _x.semantic_map_debug.latest_location_odom_x, _x.semantic_map_debug.latest_location_odom_y, _x.semantic_map_debug.latest_location_odom_theta, _x.semantic_map_debug.latest_location_psap_x, _x.semantic_map_debug.latest_location_psap_y, _x.semantic_map_debug.latest_location_psap_theta, _x.semantic_map_debug.slot_num, _x.semantic_map_debug.slot_corner_valid_num, _x.semantic_map_debug.slot_parkstop_valid_num, _x.semantic_map_debug.slot_curb_valid_num, _x.semantic_map_debug.left_corner.slot_id, _x.semantic_map_debug.left_corner.project_x_margin, _x.semantic_map_debug.left_corner.project_y_margin, _x.semantic_map_debug.left_corner.object_x_margin.type, _x.semantic_map_debug.left_corner.object_x_margin.src, _x.semantic_map_debug.left_corner.object_x_margin.pt.x, _x.semantic_map_debug.left_corner.object_x_margin.pt.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_x_margin.line.pt2.y,) = _get_struct_10f10i10f11i3B2i6f5I2f2i6f().unpack(str[start:end])
      self.semantic_map_debug.vehicle_state_valid = bool(self.semantic_map_debug.vehicle_state_valid)
      self.semantic_map_debug.uss_instance_valid = bool(self.semantic_map_debug.uss_instance_valid)
      self.semantic_map_debug.svc_instance_valid = bool(self.semantic_map_debug.svc_instance_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.left_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.left_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.semantic_map_debug.left_corner.object_y_margin.type, _x.semantic_map_debug.left_corner.object_y_margin.src, _x.semantic_map_debug.left_corner.object_y_margin.pt.x, _x.semantic_map_debug.left_corner.object_y_margin.pt.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.left_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.left_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.left_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.semantic_map_debug.right_corner.slot_id, _x.semantic_map_debug.right_corner.project_x_margin, _x.semantic_map_debug.right_corner.project_y_margin, _x.semantic_map_debug.right_corner.object_x_margin.type, _x.semantic_map_debug.right_corner.object_x_margin.src, _x.semantic_map_debug.right_corner.object_x_margin.pt.x, _x.semantic_map_debug.right_corner.object_x_margin.pt.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.right_corner.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.right_corner.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.semantic_map_debug.right_corner.object_y_margin.type, _x.semantic_map_debug.right_corner.object_y_margin.src, _x.semantic_map_debug.right_corner.object_y_margin.pt.x, _x.semantic_map_debug.right_corner.object_y_margin.pt.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt1.y, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.x, _x.semantic_map_debug.right_corner.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.right_corner.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.right_corner.object_y_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 44
      (_x.semantic_map_debug.curb_or_parkstop.slot_id, _x.semantic_map_debug.curb_or_parkstop.project_x_margin, _x.semantic_map_debug.curb_or_parkstop.project_y_margin, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_x_margin.line.pt2.y,) = _get_struct_I2f2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.curb_or_parkstop.object_x_margin.polygon.pts.append(val1)
      _x = self
      start = end
      end += 32
      (_x.semantic_map_debug.curb_or_parkstop.object_y_margin.type, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.src, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.pt.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt1.y, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.x, _x.semantic_map_debug.curb_or_parkstop.object_y_margin.line.pt2.y,) = _get_struct_2i6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.semantic_map_debug.curb_or_parkstop.object_y_margin.polygon.pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.semantic_map_debug.slot_results = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvSlotAssembyResult()
        _v286 = val1.left_corner
        _x = _v286
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v287 = _v286.object_x_margin
        _x = _v287
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v288 = _v287.pt
        _x = _v288
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v289 = _v287.line
        _v290 = _v289.pt1
        _x = _v290
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v291 = _v289.pt2
        _x = _v291
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v292 = _v287.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v292.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v292.pts.append(val5)
        _v293 = _v286.object_y_margin
        _x = _v293
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v294 = _v293.pt
        _x = _v294
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v295 = _v293.line
        _v296 = _v295.pt1
        _x = _v296
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v297 = _v295.pt2
        _x = _v297
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v298 = _v293.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v298.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v298.pts.append(val5)
        _v299 = val1.right_corner
        _x = _v299
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v300 = _v299.object_x_margin
        _x = _v300
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v301 = _v300.pt
        _x = _v301
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v302 = _v300.line
        _v303 = _v302.pt1
        _x = _v303
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v304 = _v302.pt2
        _x = _v304
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v305 = _v300.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v305.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v305.pts.append(val5)
        _v306 = _v299.object_y_margin
        _x = _v306
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v307 = _v306.pt
        _x = _v307
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v308 = _v306.line
        _v309 = _v308.pt1
        _x = _v309
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v310 = _v308.pt2
        _x = _v310
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v311 = _v306.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v311.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v311.pts.append(val5)
        _v312 = val1.curb_or_parkstop
        _x = _v312
        start = end
        end += 12
        (_x.slot_id, _x.project_x_margin, _x.project_y_margin,) = _get_struct_I2f().unpack(str[start:end])
        _v313 = _v312.object_x_margin
        _x = _v313
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v314 = _v313.pt
        _x = _v314
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v315 = _v313.line
        _v316 = _v315.pt1
        _x = _v316
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v317 = _v315.pt2
        _x = _v317
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v318 = _v313.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v318.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v318.pts.append(val5)
        _v319 = _v312.object_y_margin
        _x = _v319
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v320 = _v319.pt
        _x = _v320
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v321 = _v319.line
        _v322 = _v321.pt1
        _x = _v322
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v323 = _v321.pt2
        _x = _v323
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v324 = _v319.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v324.pts = []
        for i in range(0, length):
          val5 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val5
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v324.pts.append(val5)
        self.semantic_map_debug.slot_results.append(val1)
      _x = self
      start = end
      end += 232
      (_x.collision_checker_debug.is_load_config, _x.collision_checker_debug.wheel_curve, _x.collision_checker_debug.is_larger_outlines, _x.collision_checker_debug.forward_dst.crash_distance, _x.collision_checker_debug.forward_dst.obj_distance, _x.collision_checker_debug.forward_dst.uss_region_distance, _x.collision_checker_debug.forward_dst.center_x, _x.collision_checker_debug.forward_dst.center_y, _x.collision_checker_debug.forward_dst.center_yaw, _x.collision_checker_debug.forward_dst.crash_pt1.x, _x.collision_checker_debug.forward_dst.crash_pt1.y, _x.collision_checker_debug.forward_dst.crash_pt2.x, _x.collision_checker_debug.forward_dst.crash_pt2.y, _x.collision_checker_debug.forward_dst.path_index, _x.collision_checker_debug.backward_dst.crash_distance, _x.collision_checker_debug.backward_dst.obj_distance, _x.collision_checker_debug.backward_dst.uss_region_distance, _x.collision_checker_debug.backward_dst.center_x, _x.collision_checker_debug.backward_dst.center_y, _x.collision_checker_debug.backward_dst.center_yaw, _x.collision_checker_debug.backward_dst.crash_pt1.x, _x.collision_checker_debug.backward_dst.crash_pt1.y, _x.collision_checker_debug.backward_dst.crash_pt2.x, _x.collision_checker_debug.backward_dst.crash_pt2.y, _x.collision_checker_debug.backward_dst.path_index, _x.collision_checker_debug.direct_forward_dst.crash_distance, _x.collision_checker_debug.direct_forward_dst.obj_distance, _x.collision_checker_debug.direct_forward_dst.uss_region_distance, _x.collision_checker_debug.direct_forward_dst.center_x, _x.collision_checker_debug.direct_forward_dst.center_y, _x.collision_checker_debug.direct_forward_dst.center_yaw, _x.collision_checker_debug.direct_forward_dst.crash_pt1.x, _x.collision_checker_debug.direct_forward_dst.crash_pt1.y, _x.collision_checker_debug.direct_forward_dst.crash_pt2.x, _x.collision_checker_debug.direct_forward_dst.crash_pt2.y, _x.collision_checker_debug.direct_forward_dst.path_index, _x.collision_checker_debug.direct_backward_dst.crash_distance, _x.collision_checker_debug.direct_backward_dst.obj_distance, _x.collision_checker_debug.direct_backward_dst.uss_region_distance, _x.collision_checker_debug.direct_backward_dst.center_x, _x.collision_checker_debug.direct_backward_dst.center_y, _x.collision_checker_debug.direct_backward_dst.center_yaw, _x.collision_checker_debug.direct_backward_dst.crash_pt1.x, _x.collision_checker_debug.direct_backward_dst.crash_pt1.y, _x.collision_checker_debug.direct_backward_dst.crash_pt2.x, _x.collision_checker_debug.direct_backward_dst.crash_pt2.y, _x.collision_checker_debug.direct_backward_dst.path_index, _x.collision_checker_debug.reserved_0, _x.collision_checker_debug.reserved_1, _x.collision_checker_debug.reserved_2, _x.collision_checker_debug.reserved_3, _x.collision_checker_debug.reserved_4, _x.collision_checker_debug.reserved_5, _x.collision_checker_debug.reserved_6, _x.collision_checker_debug.reserved_7, _x.collision_checker_debug.reserved_8, _x.collision_checker_debug.reserved_9,) = _get_struct_BfB10fI10fI10fI10fI4Q4f2B().unpack(str[start:end])
      self.collision_checker_debug.is_load_config = bool(self.collision_checker_debug.is_load_config)
      self.collision_checker_debug.is_larger_outlines = bool(self.collision_checker_debug.is_larger_outlines)
      self.collision_checker_debug.reserved_8 = bool(self.collision_checker_debug.reserved_8)
      self.collision_checker_debug.reserved_9 = bool(self.collision_checker_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.collision_checker_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.collision_checker_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 695
      (_x.slots_generate_debug.ego_x, _x.slots_generate_debug.ego_y, _x.slots_generate_debug.ego_yaw, _x.slots_generate_debug.uss_slots_size, _x.slots_generate_debug.svc_slots_size, _x.slots_generate_debug.planning_return_slots_size, _x.slots_generate_debug.planning_slots_size, _x.slots_generate_debug.bind_slots_size, _x.slots_generate_debug.hmi_slots_size, _x.slots_generate_debug.psap_slot.slot.hmi_index, _x.slots_generate_debug.psap_slot.slot.svc_index, _x.slots_generate_debug.psap_slot.slot.uss_index, _x.slots_generate_debug.psap_slot.slot.pt1.x, _x.slots_generate_debug.psap_slot.slot.pt1.y, _x.slots_generate_debug.psap_slot.slot.pt1.z, _x.slots_generate_debug.psap_slot.slot.pt2.x, _x.slots_generate_debug.psap_slot.slot.pt2.y, _x.slots_generate_debug.psap_slot.slot.pt2.z, _x.slots_generate_debug.psap_slot.slot.pt3.x, _x.slots_generate_debug.psap_slot.slot.pt3.y, _x.slots_generate_debug.psap_slot.slot.pt3.z, _x.slots_generate_debug.psap_slot.slot.pt4.x, _x.slots_generate_debug.psap_slot.slot.pt4.y, _x.slots_generate_debug.psap_slot.slot.pt4.z, _x.slots_generate_debug.psap_slot.slot.type, _x.slots_generate_debug.psap_slot.slot.source, _x.slots_generate_debug.psap_slot.slot.size_x, _x.slots_generate_debug.psap_slot.slot.size_y, _x.slots_generate_debug.psap_slot.slot.VehPos.x, _x.slots_generate_debug.psap_slot.slot.VehPos.y, _x.slots_generate_debug.psap_slot.slot.VehPos.z, _x.slots_generate_debug.psap_slot.slot.VehPsi, _x.slots_generate_debug.psap_slot.slot.status, _x.slots_generate_debug.psap_slot.slot.fov, _x.slots_generate_debug.psap_slot.slot.planning_result, _x.slots_generate_debug.psap_slot.slot.slot_angle, _x.slots_generate_debug.psap_slot.left_corner_exist, _x.slots_generate_debug.psap_slot.left_corner_pt1.x, _x.slots_generate_debug.psap_slot.left_corner_pt1.y, _x.slots_generate_debug.psap_slot.left_corner_pt1.z, _x.slots_generate_debug.psap_slot.left_corner_pt2.x, _x.slots_generate_debug.psap_slot.left_corner_pt2.y, _x.slots_generate_debug.psap_slot.left_corner_pt2.z, _x.slots_generate_debug.psap_slot.right_corner_exist, _x.slots_generate_debug.psap_slot.right_corner_pt1.x, _x.slots_generate_debug.psap_slot.right_corner_pt1.y, _x.slots_generate_debug.psap_slot.right_corner_pt1.z, _x.slots_generate_debug.psap_slot.right_corner_pt2.x, _x.slots_generate_debug.psap_slot.right_corner_pt2.y, _x.slots_generate_debug.psap_slot.right_corner_pt2.z, _x.slots_generate_debug.psap_slot.curb_exist, _x.slots_generate_debug.psap_slot.curb_pt1.x, _x.slots_generate_debug.psap_slot.curb_pt1.y, _x.slots_generate_debug.psap_slot.curb_pt1.z, _x.slots_generate_debug.psap_slot.curb_pt2.x, _x.slots_generate_debug.psap_slot.curb_pt2.y, _x.slots_generate_debug.psap_slot.curb_pt2.z, _x.slots_generate_debug.psap_slot.slot_bumper, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt1.z, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.x, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.y, _x.slots_generate_debug.psap_slot.slot_bumper_pt2.z, _x.slots_generate_debug.psap_slot.left_corner_pt3.x, _x.slots_generate_debug.psap_slot.left_corner_pt3.y, _x.slots_generate_debug.psap_slot.left_corner_pt3.z, _x.slots_generate_debug.psap_slot.right_corner_pt3.x, _x.slots_generate_debug.psap_slot.right_corner_pt3.y, _x.slots_generate_debug.psap_slot.right_corner_pt3.z, _x.slots_generate_debug.psap_slot.corner_pt3_exist, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt1.z, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.x, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.y, _x.slots_generate_debug.psap_slot.virtual_channel_pt2.z, _x.slots_generate_debug.psap_slot.virtual_channel_exist, _x.slots_generate_debug.psap_slot.left_corner_type, _x.slots_generate_debug.psap_slot.right_corner_type, _x.slots_generate_debug.psap_slot.slot_update_count, _x.slots_generate_debug.psap_slot.replan_suggest, _x.slots_generate_debug.psap_hmi.psapMapObjectType, _x.slots_generate_debug.psap_hmi.psapMapObjectValid, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY1, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY2, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY3, _x.slots_generate_debug.psap_hmi.psapMapObjectPointX4, _x.slots_generate_debug.psap_hmi.psapMapObjectPointY4, _x.slots_generate_debug.psap_ad_pose_x, _x.slots_generate_debug.psap_ad_pose_y, _x.slots_generate_debug.psap_ad_pose_yaw, _x.slots_generate_debug.planning_ok_slots_size, _x.slots_generate_debug.track_slot_index, _x.slots_generate_debug.sapa_guidance_slot.slot.hmi_index, _x.slots_generate_debug.sapa_guidance_slot.slot.svc_index, _x.slots_generate_debug.sapa_guidance_slot.slot.uss_index, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt3.z, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.x, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.y, _x.slots_generate_debug.sapa_guidance_slot.slot.pt4.z, _x.slots_generate_debug.sapa_guidance_slot.slot.type, _x.slots_generate_debug.sapa_guidance_slot.slot.source, _x.slots_generate_debug.sapa_guidance_slot.slot.size_x, _x.slots_generate_debug.sapa_guidance_slot.slot.size_y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.x, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.y, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPos.z, _x.slots_generate_debug.sapa_guidance_slot.slot.VehPsi, _x.slots_generate_debug.sapa_guidance_slot.slot.status, _x.slots_generate_debug.sapa_guidance_slot.slot.fov, _x.slots_generate_debug.sapa_guidance_slot.slot.planning_result, _x.slots_generate_debug.sapa_guidance_slot.slot.slot_angle, _x.slots_generate_debug.sapa_guidance_slot.left_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_exist, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.curb_exist, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.curb_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.slot_bumper_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.left_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.x, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.y, _x.slots_generate_debug.sapa_guidance_slot.right_corner_pt3.z, _x.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt1.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.x, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.y, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_pt2.z, _x.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist, _x.slots_generate_debug.sapa_guidance_slot.left_corner_type, _x.slots_generate_debug.sapa_guidance_slot.right_corner_type, _x.slots_generate_debug.sapa_guidance_slot.slot_update_count, _x.slots_generate_debug.sapa_guidance_slot.replan_suggest, _x.slots_generate_debug.guidance_slot_planning_ok, _x.slots_generate_debug.guidance_slot_size_x, _x.slots_generate_debug.guidance_slot_size_y, _x.slots_generate_debug.is_guidance_slot_narrow, _x.slots_generate_debug.reserved_0, _x.slots_generate_debug.reserved_1, _x.slots_generate_debug.reserved_2, _x.slots_generate_debug.reserved_3, _x.slots_generate_debug.reserved_4, _x.slots_generate_debug.reserved_5, _x.slots_generate_debug.reserved_6, _x.slots_generate_debug.reserved_7, _x.slots_generate_debug.reserved_8, _x.slots_generate_debug.reserved_9,) = _get_struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B().unpack(str[start:end])
      self.slots_generate_debug.psap_slot.left_corner_exist = bool(self.slots_generate_debug.psap_slot.left_corner_exist)
      self.slots_generate_debug.psap_slot.right_corner_exist = bool(self.slots_generate_debug.psap_slot.right_corner_exist)
      self.slots_generate_debug.psap_slot.curb_exist = bool(self.slots_generate_debug.psap_slot.curb_exist)
      self.slots_generate_debug.psap_slot.slot_bumper = bool(self.slots_generate_debug.psap_slot.slot_bumper)
      self.slots_generate_debug.psap_slot.corner_pt3_exist = bool(self.slots_generate_debug.psap_slot.corner_pt3_exist)
      self.slots_generate_debug.psap_slot.virtual_channel_exist = bool(self.slots_generate_debug.psap_slot.virtual_channel_exist)
      self.slots_generate_debug.psap_slot.replan_suggest = bool(self.slots_generate_debug.psap_slot.replan_suggest)
      self.slots_generate_debug.psap_hmi.psapMapObjectValid = bool(self.slots_generate_debug.psap_hmi.psapMapObjectValid)
      self.slots_generate_debug.sapa_guidance_slot.left_corner_exist = bool(self.slots_generate_debug.sapa_guidance_slot.left_corner_exist)
      self.slots_generate_debug.sapa_guidance_slot.right_corner_exist = bool(self.slots_generate_debug.sapa_guidance_slot.right_corner_exist)
      self.slots_generate_debug.sapa_guidance_slot.curb_exist = bool(self.slots_generate_debug.sapa_guidance_slot.curb_exist)
      self.slots_generate_debug.sapa_guidance_slot.slot_bumper = bool(self.slots_generate_debug.sapa_guidance_slot.slot_bumper)
      self.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist = bool(self.slots_generate_debug.sapa_guidance_slot.corner_pt3_exist)
      self.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist = bool(self.slots_generate_debug.sapa_guidance_slot.virtual_channel_exist)
      self.slots_generate_debug.sapa_guidance_slot.replan_suggest = bool(self.slots_generate_debug.sapa_guidance_slot.replan_suggest)
      self.slots_generate_debug.guidance_slot_planning_ok = bool(self.slots_generate_debug.guidance_slot_planning_ok)
      self.slots_generate_debug.is_guidance_slot_narrow = bool(self.slots_generate_debug.is_guidance_slot_narrow)
      self.slots_generate_debug.reserved_8 = bool(self.slots_generate_debug.reserved_8)
      self.slots_generate_debug.reserved_9 = bool(self.slots_generate_debug.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.slots_generate_debug.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.slots_generate_debug.reserved_10 = str[start:end]
      _x = self
      start = end
      end += 248
      (_x.env_reserved_debug.reserved_0, _x.env_reserved_debug.reserved_1, _x.env_reserved_debug.reserved_2, _x.env_reserved_debug.reserved_3, _x.env_reserved_debug.reserved_4, _x.env_reserved_debug.reserved_5, _x.env_reserved_debug.reserved_6, _x.env_reserved_debug.reserved_7, _x.env_reserved_debug.reserved_8, _x.env_reserved_debug.reserved_9, _x.env_reserved_debug.reserved_10, _x.env_reserved_debug.reserved_11, _x.env_reserved_debug.reserved_12, _x.env_reserved_debug.reserved_13, _x.env_reserved_debug.reserved_14, _x.env_reserved_debug.reserved_15, _x.env_reserved_debug.reserved_16, _x.env_reserved_debug.reserved_17, _x.env_reserved_debug.reserved_18, _x.env_reserved_debug.reserved_19, _x.env_reserved_debug.reserved_20, _x.env_reserved_debug.reserved_21, _x.env_reserved_debug.reserved_22, _x.env_reserved_debug.reserved_23, _x.env_reserved_debug.reserved_24, _x.env_reserved_debug.reserved_25, _x.env_reserved_debug.reserved_26, _x.env_reserved_debug.reserved_27, _x.env_reserved_debug.reserved_28, _x.env_reserved_debug.reserved_29, _x.env_reserved_debug.reserved_30, _x.env_reserved_debug.reserved_31, _x.env_reserved_debug.reserved_32, _x.env_reserved_debug.reserved_33, _x.env_reserved_debug.reserved_34, _x.env_reserved_debug.reserved_35, _x.env_reserved_debug.reserved_36, _x.env_reserved_debug.reserved_37, _x.env_reserved_debug.reserved_38, _x.env_reserved_debug.reserved_39, _x.env_reserved_debug.reserved_40, _x.env_reserved_debug.reserved_41, _x.env_reserved_debug.reserved_42, _x.env_reserved_debug.reserved_43, _x.env_reserved_debug.reserved_44, _x.env_reserved_debug.reserved_45, _x.env_reserved_debug.reserved_46, _x.env_reserved_debug.reserved_47, _x.env_reserved_debug.reserved_48, _x.env_reserved_debug.reserved_49, _x.env_reserved_debug.reserved_50, _x.env_reserved_debug.reserved_51, _x.env_reserved_debug.reserved_52, _x.env_reserved_debug.reserved_53, _x.env_reserved_debug.reserved_54, _x.env_reserved_debug.reserved_55, _x.env_reserved_debug.reserved_56, _x.env_reserved_debug.reserved_57, _x.env_reserved_debug.reserved_58, _x.env_reserved_debug.reserved_59, _x.publish_ptp_ts,) = _get_struct_30f30IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f10i10f11i3B2i6f5I2f2i6f = None
def _get_struct_10f10i10f11i3B2i6f5I2f2i6f():
    global _struct_10f10i10f11i3B2i6f5I2f2i6f
    if _struct_10f10i10f11i3B2i6f5I2f2i6f is None:
        _struct_10f10i10f11i3B2i6f5I2f2i6f = struct.Struct("<10f10i10f11i3B2i6f5I2f2i6f")
    return _struct_10f10i10f11i3B2i6f5I2f2i6f
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2Q2i = None
def _get_struct_2Q2i():
    global _struct_2Q2i
    if _struct_2Q2i is None:
        _struct_2Q2i = struct.Struct("<2Q2i")
    return _struct_2Q2i
_struct_2QI = None
def _get_struct_2QI():
    global _struct_2QI
    if _struct_2QI is None:
        _struct_2QI = struct.Struct("<2QI")
    return _struct_2QI
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i2Qi = None
def _get_struct_2i2Qi():
    global _struct_2i2Qi
    if _struct_2i2Qi is None:
        _struct_2i2Qi = struct.Struct("<2i2Qi")
    return _struct_2i2Qi
_struct_2i6f = None
def _get_struct_2i6f():
    global _struct_2i6f
    if _struct_2i6f is None:
        _struct_2i6f = struct.Struct("<2i6f")
    return _struct_2i6f
_struct_30f30IQ = None
def _get_struct_30f30IQ():
    global _struct_30f30IQ
    if _struct_30f30IQ is None:
        _struct_30f30IQ = struct.Struct("<30f30IQ")
    return _struct_30f30IQ
_struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B = None
def _get_struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B():
    global _struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B
    if _struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B is None:
        _struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B = struct.Struct("<3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B")
    return _struct_3f6I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iIBiB11f2I3i12f2i6f3ifB6fB6fB6fB12fB6fB2iI2B2fB4Q4f2B
_struct_3iQ = None
def _get_struct_3iQ():
    global _struct_3iQ
    if _struct_3iQ is None:
        _struct_3iQ = struct.Struct("<3iQ")
    return _struct_3iQ
_struct_3ifB = None
def _get_struct_3ifB():
    global _struct_3ifB
    if _struct_3ifB is None:
        _struct_3ifB = struct.Struct("<3ifB")
    return _struct_3ifB
_struct_4i12f2i6f3ifiQ = None
def _get_struct_4i12f2i6f3ifiQ():
    global _struct_4i12f2i6f3ifiQ
    if _struct_4i12f2i6f3ifiQ is None:
        _struct_4i12f2i6f3ifiQ = struct.Struct("<4i12f2i6f3ifiQ")
    return _struct_4i12f2i6f3ifiQ
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
_struct_5If9If3I = None
def _get_struct_5If9If3I():
    global _struct_5If9If3I
    if _struct_5If9If3I is None:
        _struct_5If9If3I = struct.Struct("<5If9If3I")
    return _struct_5If9If3I
_struct_5f2Q = None
def _get_struct_5f2Q():
    global _struct_5f2Q
    if _struct_5f2Q is None:
        _struct_5f2Q = struct.Struct("<5f2Q")
    return _struct_5f2Q
_struct_6Q4f2B = None
def _get_struct_6Q4f2B():
    global _struct_6Q4f2B
    if _struct_6Q4f2B is None:
        _struct_6Q4f2B = struct.Struct("<6Q4f2B")
    return _struct_6Q4f2B
_struct_6fB11f2iQ = None
def _get_struct_6fB11f2iQ():
    global _struct_6fB11f2iQ
    if _struct_6fB11f2iQ is None:
        _struct_6fB11f2iQ = struct.Struct("<6fB11f2iQ")
    return _struct_6fB11f2iQ
_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi = None
def _get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi():
    global _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi
    if _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi is None:
        _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi = struct.Struct("<B3QB3QB3QB3QB3QB3QB3Q6i2Bi")
    return _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi
_struct_B3i2Q = None
def _get_struct_B3i2Q():
    global _struct_B3i2Q
    if _struct_B3i2Q is None:
        _struct_B3i2Q = struct.Struct("<B3i2Q")
    return _struct_B3i2Q
_struct_BQB6Q2fB4Q4f2B = None
def _get_struct_BQB6Q2fB4Q4f2B():
    global _struct_BQB6Q2fB4Q4f2B
    if _struct_BQB6Q2fB4Q4f2B is None:
        _struct_BQB6Q2fB4Q4f2B = struct.Struct("<BQB6Q2fB4Q4f2B")
    return _struct_BQB6Q2fB4Q4f2B
_struct_BfB10fI10fI10fI10fI4Q4f2B = None
def _get_struct_BfB10fI10fI10fI10fI4Q4f2B():
    global _struct_BfB10fI10fI10fI10fI4Q4f2B
    if _struct_BfB10fI10fI10fI10fI4Q4f2B is None:
        _struct_BfB10fI10fI10fI10fI4Q4f2B = struct.Struct("<BfB10fI10fI10fI10fI4Q4f2B")
    return _struct_BfB10fI10fI10fI10fI4Q4f2B
_struct_I2f = None
def _get_struct_I2f():
    global _struct_I2f
    if _struct_I2f is None:
        _struct_I2f = struct.Struct("<I2f")
    return _struct_I2f
_struct_I2f2i6f = None
def _get_struct_I2f2i6f():
    global _struct_I2f2i6f
    if _struct_I2f2i6f is None:
        _struct_I2f2i6f = struct.Struct("<I2f2i6f")
    return _struct_I2f2i6f
_struct_QB12fQB12fQB12f6i = None
def _get_struct_QB12fQB12fQB12f6i():
    global _struct_QB12fQB12fQB12f6i
    if _struct_QB12fQB12fQB12f6i is None:
        _struct_QB12fQB12fQB12f6i = struct.Struct("<QB12fQB12fQB12f6i")
    return _struct_QB12fQB12fQB12f6i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i6B2i6f5If3I = None
def _get_struct_i6B2i6f5If3I():
    global _struct_i6B2i6f5If3I
    if _struct_i6B2i6f5If3I is None:
        _struct_i6B2i6f5If3I = struct.Struct("<i6B2i6f5If3I")
    return _struct_i6B2i6f5If3I

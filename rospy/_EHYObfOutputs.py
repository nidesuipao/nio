# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EHYObfOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EHYObfOutputs(genpy.Message):
  _md5sum = "88fe4d345ed25c2aab722c862ca8024a"
  _type = "rospy_message_converter/EHYObfOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ObfObject[] obf_objects
int32 obf_status
bool obf_rear_object_detected
uint64 timestamp
uint64 timestamp_perception
uint64 timestamp_radar
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ObfObject
FusObject fuseobj
CameraObjSup cam_sup_info
RadarObjSup rdr_sup_info
FusObjSup fus_sup_info

================================================================================
MSG: rospy_message_converter/FusObject
uint32 id
ObjPos pos_vcs
ObjPos pos_ccs
ObjVel vel_vcs
ObjVel vel_ccs
ObjAcc acc
int32 object_status
int32 valid_status
ObfClassification type
int32 blinker_info
int32 brake_info
uint32 age
uint32 age_ms
ObjSize size
float32 heading
float32 heading_rate
float32 dist_from_left_lane
float32 dist_from_right_lane
uint32 tracklet_match_list_len
uint32[] tracklet_match_list
uint32[] tracket_loss_match_cnt_list
uint32 vision_match_id
uint32 vision_match_idx
uint32 fusion_source
uint32 lost_cnt
float32 angle
uint32 moving_cnt
uint32 merged_obj_idx_list_length
uint32[] merged_obj_idx_list
uint32 motion_category
uint32 fusion_source_his
float32 vision_exist_prob
uint32 vision_match_cnt
uint32 radar_match_cnt
uint32 move_status
ObjLaneLoc lane_location
float32 confidence
float32[] type_prob
PredictionTrajectory[] pred_traj
ObstacleIntent intent
Point3D[] polygon_point
bool is_predicted_cutin

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObfClassification
int32 obj_main_class
uint32 obj_sub_class

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjLaneLoc
uint32 lane_index
int32 lane_id
int32 lane_id_debounced
uint32 debounced_cnt
float32 vx_ccs
float32 vy_ccs
float32 dy_ccs
float32 hd_angle_2_lane
float32 dy_min
float32 dy_max

================================================================================
MSG: rospy_message_converter/PredictionTrajectory
PredictionPathPoint[] trajectory
float32 probability

================================================================================
MSG: rospy_message_converter/PredictionPathPoint
float32 x
float32 y
int32 time_delta
float32 speed
float32 heading

================================================================================
MSG: rospy_message_converter/ObstacleIntent
int32 type

================================================================================
MSG: rospy_message_converter/Point3D
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/CameraObjSup
float32 mature_to_coast_lon_dst
float32 start_dx
uint32 age_frame
uint32 age_second
uint32 color
bool is_very_close
float32 ttc_inverse
bool is_blocked_parts
bool is_blocked_left
bool is_blocked_right
int32 hb_status
float32 cut_angle
float32 cut_distance
int32 measuring_status

================================================================================
MSG: rospy_message_converter/RadarObjSup
int32 radar_src
float32 start_dx
float32 rcs

================================================================================
MSG: rospy_message_converter/FusObjSup
uint32[] track_cnt
uint32 moving_cnt
bool fsp_cam_obj_disagree
MatchInfo[] radar_match_list
MatchInfo vision_match
ObjMotion[] meas_motion
int32[] merged_idx
uint32 debug_reserved

================================================================================
MSG: rospy_message_converter/MatchInfo
uint32 id
uint32 idx
uint32 loose_match_cnt

================================================================================
MSG: rospy_message_converter/ObjMotion
ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std
"""
  __slots__ = ['obf_objects','obf_status','obf_rear_object_detected','timestamp','timestamp_perception','timestamp_radar','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/ObfObject[]','int32','bool','uint64','uint64','uint64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obf_objects,obf_status,obf_rear_object_detected,timestamp,timestamp_perception,timestamp_radar,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EHYObfOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obf_objects is None:
        self.obf_objects = []
      if self.obf_status is None:
        self.obf_status = 0
      if self.obf_rear_object_detected is None:
        self.obf_rear_object_detected = False
      if self.timestamp is None:
        self.timestamp = 0
      if self.timestamp_perception is None:
        self.timestamp_perception = 0
      if self.timestamp_radar is None:
        self.timestamp_radar = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.obf_objects = []
      self.obf_status = 0
      self.obf_rear_object_detected = False
      self.timestamp = 0
      self.timestamp_perception = 0
      self.timestamp_radar = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.obf_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.obf_objects:
        _v1 = val1.fuseobj
        _x = _v1.id
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.pos_vcs
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.pos_ccs
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v4 = _v1.vel_vcs
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v5 = _v1.vel_ccs
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v6 = _v1.acc
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.object_status, _x.valid_status))
        _v7 = _v1.type
        _x = _v7
        buff.write(_get_struct_iI().pack(_x.obj_main_class, _x.obj_sub_class))
        _x = _v1
        buff.write(_get_struct_2i2I().pack(_x.blinker_info, _x.brake_info, _x.age, _x.age_ms))
        _v8 = _v1.size
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _x = _v1
        buff.write(_get_struct_4fI().pack(_x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len))
        length = len(_v1.tracklet_match_list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v1.tracklet_match_list))
        length = len(_v1.tracket_loss_match_cnt_list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v1.tracket_loss_match_cnt_list))
        _x = _v1
        buff.write(_get_struct_4If2I().pack(_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length))
        length = len(_v1.merged_obj_idx_list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v1.merged_obj_idx_list))
        _x = _v1
        buff.write(_get_struct_2If3I().pack(_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status))
        _v9 = _v1.lane_location
        _x = _v9
        buff.write(_get_struct_I2iI6f().pack(_x.lane_index, _x.lane_id, _x.lane_id_debounced, _x.debounced_cnt, _x.vx_ccs, _x.vy_ccs, _x.dy_ccs, _x.hd_angle_2_lane, _x.dy_min, _x.dy_max))
        _x = _v1.confidence
        buff.write(_get_struct_f().pack(_x))
        length = len(_v1.type_prob)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v1.type_prob))
        length = len(_v1.pred_traj)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.pred_traj:
          length = len(val3.trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.trajectory:
            _x = val4
            buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
          _x = val3.probability
          buff.write(_get_struct_f().pack(_x))
        _v10 = _v1.intent
        _x = _v10.type
        buff.write(_get_struct_i().pack(_x))
        length = len(_v1.polygon_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.polygon_point:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v1.is_predicted_cutin
        buff.write(_get_struct_B().pack(_x))
        _v11 = val1.cam_sup_info
        _x = _v11
        buff.write(_get_struct_2f3IBf3Bi2fi().pack(_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status))
        _v12 = val1.rdr_sup_info
        _x = _v12
        buff.write(_get_struct_i2f().pack(_x.radar_src, _x.start_dx, _x.rcs))
        _v13 = val1.fus_sup_info
        length = len(_v13.track_cnt)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v13.track_cnt))
        _x = _v13
        buff.write(_get_struct_IB().pack(_x.moving_cnt, _x.fsp_cam_obj_disagree))
        length = len(_v13.radar_match_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.radar_match_list:
          _x = val3
          buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
        _v14 = _v13.vision_match
        _x = _v14
        buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
        length = len(_v13.meas_motion)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.meas_motion:
          _v15 = val3.pos
          _x = _v15
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v16 = val3.pos_std
          _x = _v16
          buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
          _v17 = val3.vel
          _x = _v17
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _v18 = val3.vel_std
          _x = _v18
          buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
          _v19 = val3.acc
          _x = _v19
          buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
          _v20 = val3.acc_std
          _x = _v20
          buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
          _v21 = val3.size
          _x = _v21
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v22 = val3.size_std
          _x = _v22
          buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
          _x = val3
          buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
        length = len(_v13.merged_idx)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*_v13.merged_idx))
        _x = _v13.debug_reserved
        buff.write(_get_struct_I().pack(_x))
      _x = self
      buff.write(_get_struct_iB4Q().pack(_x.obf_status, _x.obf_rear_object_detected, _x.timestamp, _x.timestamp_perception, _x.timestamp_radar, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obf_objects is None:
        self.obf_objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obf_objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObfObject()
        _v23 = val1.fuseobj
        start = end
        end += 4
        (_v23.id,) = _get_struct_I().unpack(str[start:end])
        _v24 = _v23.pos_vcs
        _x = _v24
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v25 = _v23.pos_ccs
        _x = _v25
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v26 = _v23.vel_vcs
        _x = _v26
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v27 = _v23.vel_ccs
        _x = _v27
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v28 = _v23.acc
        _x = _v28
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _x = _v23
        start = end
        end += 8
        (_x.object_status, _x.valid_status,) = _get_struct_2i().unpack(str[start:end])
        _v29 = _v23.type
        _x = _v29
        start = end
        end += 8
        (_x.obj_main_class, _x.obj_sub_class,) = _get_struct_iI().unpack(str[start:end])
        _x = _v23
        start = end
        end += 16
        (_x.blinker_info, _x.brake_info, _x.age, _x.age_ms,) = _get_struct_2i2I().unpack(str[start:end])
        _v30 = _v23.size
        _x = _v30
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _x = _v23
        start = end
        end += 20
        (_x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len,) = _get_struct_4fI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v23.tracklet_match_list = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v23.tracket_loss_match_cnt_list = s.unpack(str[start:end])
        _x = _v23
        start = end
        end += 28
        (_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length,) = _get_struct_4If2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v23.merged_obj_idx_list = s.unpack(str[start:end])
        _x = _v23
        start = end
        end += 24
        (_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status,) = _get_struct_2If3I().unpack(str[start:end])
        _v31 = _v23.lane_location
        _x = _v31
        start = end
        end += 40
        (_x.lane_index, _x.lane_id, _x.lane_id_debounced, _x.debounced_cnt, _x.vx_ccs, _x.vy_ccs, _x.dy_ccs, _x.hd_angle_2_lane, _x.dy_min, _x.dy_max,) = _get_struct_I2iI6f().unpack(str[start:end])
        start = end
        end += 4
        (_v23.confidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v23.type_prob = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.pred_traj = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.PredictionTrajectory()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.trajectory = []
          for i in range(0, length):
            val4 = rospy_message_converter.msg.PredictionPathPoint()
            _x = val4
            start = end
            end += 20
            (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
            val3.trajectory.append(val4)
          start = end
          end += 4
          (val3.probability,) = _get_struct_f().unpack(str[start:end])
          _v23.pred_traj.append(val3)
        _v32 = _v23.intent
        start = end
        end += 4
        (_v32.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.polygon_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.Point3D()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v23.polygon_point.append(val3)
        start = end
        end += 1
        (_v23.is_predicted_cutin,) = _get_struct_B().unpack(str[start:end])
        _v23.is_predicted_cutin = bool(_v23.is_predicted_cutin)
        _v33 = val1.cam_sup_info
        _x = _v33
        start = end
        end += 44
        (_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status,) = _get_struct_2f3IBf3Bi2fi().unpack(str[start:end])
        _v33.is_very_close = bool(_v33.is_very_close)
        _v33.is_blocked_parts = bool(_v33.is_blocked_parts)
        _v33.is_blocked_left = bool(_v33.is_blocked_left)
        _v33.is_blocked_right = bool(_v33.is_blocked_right)
        _v34 = val1.rdr_sup_info
        _x = _v34
        start = end
        end += 12
        (_x.radar_src, _x.start_dx, _x.rcs,) = _get_struct_i2f().unpack(str[start:end])
        _v35 = val1.fus_sup_info
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v35.track_cnt = s.unpack(str[start:end])
        _x = _v35
        start = end
        end += 5
        (_x.moving_cnt, _x.fsp_cam_obj_disagree,) = _get_struct_IB().unpack(str[start:end])
        _v35.fsp_cam_obj_disagree = bool(_v35.fsp_cam_obj_disagree)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v35.radar_match_list = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.MatchInfo()
          _x = val3
          start = end
          end += 12
          (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
          _v35.radar_match_list.append(val3)
        _v36 = _v35.vision_match
        _x = _v36
        start = end
        end += 12
        (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v35.meas_motion = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.ObjMotion()
          _v37 = val3.pos
          _x = _v37
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v38 = val3.pos_std
          _x = _v38
          start = end
          end += 12
          (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
          _v39 = val3.vel
          _x = _v39
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _v40 = val3.vel_std
          _x = _v40
          start = end
          end += 12
          (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
          _v41 = val3.acc
          _x = _v41
          start = end
          end += 12
          (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
          _v42 = val3.acc_std
          _x = _v42
          start = end
          end += 12
          (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
          _v43 = val3.size
          _x = _v43
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v44 = val3.size_std
          _x = _v44
          start = end
          end += 12
          (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
          _x = val3
          start = end
          end += 12
          (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
          _v35.meas_motion.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v35.merged_idx = s.unpack(str[start:end])
        start = end
        end += 4
        (_v35.debug_reserved,) = _get_struct_I().unpack(str[start:end])
        self.obf_objects.append(val1)
      _x = self
      start = end
      end += 37
      (_x.obf_status, _x.obf_rear_object_detected, _x.timestamp, _x.timestamp_perception, _x.timestamp_radar, _x.publish_ptp_ts,) = _get_struct_iB4Q().unpack(str[start:end])
      self.obf_rear_object_detected = bool(self.obf_rear_object_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.obf_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.obf_objects:
        _v45 = val1.fuseobj
        _x = _v45.id
        buff.write(_get_struct_I().pack(_x))
        _v46 = _v45.pos_vcs
        _x = _v46
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v47 = _v45.pos_ccs
        _x = _v47
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v48 = _v45.vel_vcs
        _x = _v48
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v49 = _v45.vel_ccs
        _x = _v49
        buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
        _v50 = _v45.acc
        _x = _v50
        buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
        _x = _v45
        buff.write(_get_struct_2i().pack(_x.object_status, _x.valid_status))
        _v51 = _v45.type
        _x = _v51
        buff.write(_get_struct_iI().pack(_x.obj_main_class, _x.obj_sub_class))
        _x = _v45
        buff.write(_get_struct_2i2I().pack(_x.blinker_info, _x.brake_info, _x.age, _x.age_ms))
        _v52 = _v45.size
        _x = _v52
        buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
        _x = _v45
        buff.write(_get_struct_4fI().pack(_x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len))
        length = len(_v45.tracklet_match_list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v45.tracklet_match_list.tostring())
        length = len(_v45.tracket_loss_match_cnt_list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v45.tracket_loss_match_cnt_list.tostring())
        _x = _v45
        buff.write(_get_struct_4If2I().pack(_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length))
        length = len(_v45.merged_obj_idx_list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v45.merged_obj_idx_list.tostring())
        _x = _v45
        buff.write(_get_struct_2If3I().pack(_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status))
        _v53 = _v45.lane_location
        _x = _v53
        buff.write(_get_struct_I2iI6f().pack(_x.lane_index, _x.lane_id, _x.lane_id_debounced, _x.debounced_cnt, _x.vx_ccs, _x.vy_ccs, _x.dy_ccs, _x.hd_angle_2_lane, _x.dy_min, _x.dy_max))
        _x = _v45.confidence
        buff.write(_get_struct_f().pack(_x))
        length = len(_v45.type_prob)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v45.type_prob.tostring())
        length = len(_v45.pred_traj)
        buff.write(_struct_I.pack(length))
        for val3 in _v45.pred_traj:
          length = len(val3.trajectory)
          buff.write(_struct_I.pack(length))
          for val4 in val3.trajectory:
            _x = val4
            buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
          _x = val3.probability
          buff.write(_get_struct_f().pack(_x))
        _v54 = _v45.intent
        _x = _v54.type
        buff.write(_get_struct_i().pack(_x))
        length = len(_v45.polygon_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v45.polygon_point:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v45.is_predicted_cutin
        buff.write(_get_struct_B().pack(_x))
        _v55 = val1.cam_sup_info
        _x = _v55
        buff.write(_get_struct_2f3IBf3Bi2fi().pack(_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status))
        _v56 = val1.rdr_sup_info
        _x = _v56
        buff.write(_get_struct_i2f().pack(_x.radar_src, _x.start_dx, _x.rcs))
        _v57 = val1.fus_sup_info
        length = len(_v57.track_cnt)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v57.track_cnt.tostring())
        _x = _v57
        buff.write(_get_struct_IB().pack(_x.moving_cnt, _x.fsp_cam_obj_disagree))
        length = len(_v57.radar_match_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.radar_match_list:
          _x = val3
          buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
        _v58 = _v57.vision_match
        _x = _v58
        buff.write(_get_struct_3I().pack(_x.id, _x.idx, _x.loose_match_cnt))
        length = len(_v57.meas_motion)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.meas_motion:
          _v59 = val3.pos
          _x = _v59
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _v60 = val3.pos_std
          _x = _v60
          buff.write(_get_struct_3f().pack(_x.x_std, _x.y_std, _x.z_std))
          _v61 = val3.vel
          _x = _v61
          buff.write(_get_struct_3f().pack(_x.vx, _x.vy, _x.vz))
          _v62 = val3.vel_std
          _x = _v62
          buff.write(_get_struct_3f().pack(_x.vx_std, _x.vy_std, _x.vz_std))
          _v63 = val3.acc
          _x = _v63
          buff.write(_get_struct_3f().pack(_x.ax, _x.ay, _x.az))
          _v64 = val3.acc_std
          _x = _v64
          buff.write(_get_struct_3f().pack(_x.ax_std, _x.ay_std, _x.az_std))
          _v65 = val3.size
          _x = _v65
          buff.write(_get_struct_3f().pack(_x.length, _x.width, _x.height))
          _v66 = val3.size_std
          _x = _v66
          buff.write(_get_struct_3f().pack(_x.length_std, _x.width_std, _x.height_std))
          _x = val3
          buff.write(_get_struct_fif().pack(_x.heading, _x.ref_point, _x.heading_rate))
        length = len(_v57.merged_idx)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v57.merged_idx.tostring())
        _x = _v57.debug_reserved
        buff.write(_get_struct_I().pack(_x))
      _x = self
      buff.write(_get_struct_iB4Q().pack(_x.obf_status, _x.obf_rear_object_detected, _x.timestamp, _x.timestamp_perception, _x.timestamp_radar, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obf_objects is None:
        self.obf_objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obf_objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObfObject()
        _v67 = val1.fuseobj
        start = end
        end += 4
        (_v67.id,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.pos_vcs
        _x = _v68
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v69 = _v67.pos_ccs
        _x = _v69
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v70 = _v67.vel_vcs
        _x = _v70
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v71 = _v67.vel_ccs
        _x = _v71
        start = end
        end += 12
        (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
        _v72 = _v67.acc
        _x = _v72
        start = end
        end += 12
        (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
        _x = _v67
        start = end
        end += 8
        (_x.object_status, _x.valid_status,) = _get_struct_2i().unpack(str[start:end])
        _v73 = _v67.type
        _x = _v73
        start = end
        end += 8
        (_x.obj_main_class, _x.obj_sub_class,) = _get_struct_iI().unpack(str[start:end])
        _x = _v67
        start = end
        end += 16
        (_x.blinker_info, _x.brake_info, _x.age, _x.age_ms,) = _get_struct_2i2I().unpack(str[start:end])
        _v74 = _v67.size
        _x = _v74
        start = end
        end += 12
        (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
        _x = _v67
        start = end
        end += 20
        (_x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len,) = _get_struct_4fI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v67.tracklet_match_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v67.tracket_loss_match_cnt_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        _x = _v67
        start = end
        end += 28
        (_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length,) = _get_struct_4If2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v67.merged_obj_idx_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        _x = _v67
        start = end
        end += 24
        (_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status,) = _get_struct_2If3I().unpack(str[start:end])
        _v75 = _v67.lane_location
        _x = _v75
        start = end
        end += 40
        (_x.lane_index, _x.lane_id, _x.lane_id_debounced, _x.debounced_cnt, _x.vx_ccs, _x.vy_ccs, _x.dy_ccs, _x.hd_angle_2_lane, _x.dy_min, _x.dy_max,) = _get_struct_I2iI6f().unpack(str[start:end])
        start = end
        end += 4
        (_v67.confidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v67.type_prob = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v67.pred_traj = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.PredictionTrajectory()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.trajectory = []
          for i in range(0, length):
            val4 = rospy_message_converter.msg.PredictionPathPoint()
            _x = val4
            start = end
            end += 20
            (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
            val3.trajectory.append(val4)
          start = end
          end += 4
          (val3.probability,) = _get_struct_f().unpack(str[start:end])
          _v67.pred_traj.append(val3)
        _v76 = _v67.intent
        start = end
        end += 4
        (_v76.type,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v67.polygon_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.Point3D()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v67.polygon_point.append(val3)
        start = end
        end += 1
        (_v67.is_predicted_cutin,) = _get_struct_B().unpack(str[start:end])
        _v67.is_predicted_cutin = bool(_v67.is_predicted_cutin)
        _v77 = val1.cam_sup_info
        _x = _v77
        start = end
        end += 44
        (_x.mature_to_coast_lon_dst, _x.start_dx, _x.age_frame, _x.age_second, _x.color, _x.is_very_close, _x.ttc_inverse, _x.is_blocked_parts, _x.is_blocked_left, _x.is_blocked_right, _x.hb_status, _x.cut_angle, _x.cut_distance, _x.measuring_status,) = _get_struct_2f3IBf3Bi2fi().unpack(str[start:end])
        _v77.is_very_close = bool(_v77.is_very_close)
        _v77.is_blocked_parts = bool(_v77.is_blocked_parts)
        _v77.is_blocked_left = bool(_v77.is_blocked_left)
        _v77.is_blocked_right = bool(_v77.is_blocked_right)
        _v78 = val1.rdr_sup_info
        _x = _v78
        start = end
        end += 12
        (_x.radar_src, _x.start_dx, _x.rcs,) = _get_struct_i2f().unpack(str[start:end])
        _v79 = val1.fus_sup_info
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v79.track_cnt = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        _x = _v79
        start = end
        end += 5
        (_x.moving_cnt, _x.fsp_cam_obj_disagree,) = _get_struct_IB().unpack(str[start:end])
        _v79.fsp_cam_obj_disagree = bool(_v79.fsp_cam_obj_disagree)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v79.radar_match_list = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.MatchInfo()
          _x = val3
          start = end
          end += 12
          (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
          _v79.radar_match_list.append(val3)
        _v80 = _v79.vision_match
        _x = _v80
        start = end
        end += 12
        (_x.id, _x.idx, _x.loose_match_cnt,) = _get_struct_3I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v79.meas_motion = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.ObjMotion()
          _v81 = val3.pos
          _x = _v81
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v82 = val3.pos_std
          _x = _v82
          start = end
          end += 12
          (_x.x_std, _x.y_std, _x.z_std,) = _get_struct_3f().unpack(str[start:end])
          _v83 = val3.vel
          _x = _v83
          start = end
          end += 12
          (_x.vx, _x.vy, _x.vz,) = _get_struct_3f().unpack(str[start:end])
          _v84 = val3.vel_std
          _x = _v84
          start = end
          end += 12
          (_x.vx_std, _x.vy_std, _x.vz_std,) = _get_struct_3f().unpack(str[start:end])
          _v85 = val3.acc
          _x = _v85
          start = end
          end += 12
          (_x.ax, _x.ay, _x.az,) = _get_struct_3f().unpack(str[start:end])
          _v86 = val3.acc_std
          _x = _v86
          start = end
          end += 12
          (_x.ax_std, _x.ay_std, _x.az_std,) = _get_struct_3f().unpack(str[start:end])
          _v87 = val3.size
          _x = _v87
          start = end
          end += 12
          (_x.length, _x.width, _x.height,) = _get_struct_3f().unpack(str[start:end])
          _v88 = val3.size_std
          _x = _v88
          start = end
          end += 12
          (_x.length_std, _x.width_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
          _x = val3
          start = end
          end += 12
          (_x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_fif().unpack(str[start:end])
          _v79.meas_motion.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v79.merged_idx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (_v79.debug_reserved,) = _get_struct_I().unpack(str[start:end])
        self.obf_objects.append(val1)
      _x = self
      start = end
      end += 37
      (_x.obf_status, _x.obf_rear_object_detected, _x.timestamp, _x.timestamp_perception, _x.timestamp_radar, _x.publish_ptp_ts,) = _get_struct_iB4Q().unpack(str[start:end])
      self.obf_rear_object_detected = bool(self.obf_rear_object_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If3I = None
def _get_struct_2If3I():
    global _struct_2If3I
    if _struct_2If3I is None:
        _struct_2If3I = struct.Struct("<2If3I")
    return _struct_2If3I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f3IBf3Bi2fi = None
def _get_struct_2f3IBf3Bi2fi():
    global _struct_2f3IBf3Bi2fi
    if _struct_2f3IBf3Bi2fi is None:
        _struct_2f3IBf3Bi2fi = struct.Struct("<2f3IBf3Bi2fi")
    return _struct_2f3IBf3Bi2fi
_struct_2fi2f = None
def _get_struct_2fi2f():
    global _struct_2fi2f
    if _struct_2fi2f is None:
        _struct_2fi2f = struct.Struct("<2fi2f")
    return _struct_2fi2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i2I = None
def _get_struct_2i2I():
    global _struct_2i2I
    if _struct_2i2I is None:
        _struct_2i2I = struct.Struct("<2i2I")
    return _struct_2i2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4If2I = None
def _get_struct_4If2I():
    global _struct_4If2I
    if _struct_4If2I is None:
        _struct_4If2I = struct.Struct("<4If2I")
    return _struct_4If2I
_struct_4fI = None
def _get_struct_4fI():
    global _struct_4fI
    if _struct_4fI is None:
        _struct_4fI = struct.Struct("<4fI")
    return _struct_4fI
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I2iI6f = None
def _get_struct_I2iI6f():
    global _struct_I2iI6f
    if _struct_I2iI6f is None:
        _struct_I2iI6f = struct.Struct("<I2iI6f")
    return _struct_I2iI6f
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fif = None
def _get_struct_fif():
    global _struct_fif
    if _struct_fif is None:
        _struct_fif = struct.Struct("<fif")
    return _struct_fif
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2f = None
def _get_struct_i2f():
    global _struct_i2f
    if _struct_i2f is None:
        _struct_i2f = struct.Struct("<i2f")
    return _struct_i2f
_struct_iB4Q = None
def _get_struct_iB4Q():
    global _struct_iB4Q
    if _struct_iB4Q is None:
        _struct_iB4Q = struct.Struct("<iB4Q")
    return _struct_iB4Q
_struct_iI = None
def _get_struct_iI():
    global _struct_iI
    if _struct_iI is None:
        _struct_iI = struct.Struct("<iI")
    return _struct_iI

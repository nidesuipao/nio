# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ADS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ADS(genpy.Message):
  _md5sum = "0274c2adc8344ad6ee157317ede10840"
  _type = "rospy_message_converter/ADS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LowSpdFunInfo LowSpdFun
ActuatorIf Actuator
DrvIntractInfo DrvrIF
uint64 publish_ptp_ts
uint32 crc
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LowSpdFunInfo
ParkStInfo ParkSt
SummonStInfo SummonSt

================================================================================
MSG: rospy_message_converter/ParkStInfo
int32 PrkgTypSts
int32 SAPAOpMode
int32 SApaStatus
int32 APAReq
uint32 APASlotTrackID
int32 SVCReq
int32 SApaDrivingDir
int32[] SApaPscSlot
int32[] SApaPocSLot
int32 SApaInstruction
uint32 SApaStopDstDisp
int32 SVCEDRReq
uint32 SApaAbortReason
uint32 SAPATextInfo
int32 PSAPOutInstruction
int32 PSAPInstruction
int32 PsapTextInfo
int32 PSAPAbortReason
int32 PSAPHMIStatus
int32 PSAPDrivingDir
uint32 PSAPStopDstDisp
int32 PSAPOutHMIStatus
uint32 SApaProgress
int32 PrkgActvFeatureTyp

================================================================================
MSG: rospy_message_converter/SummonStInfo
uint32 NBSInstruction
int32 NBSBlkage
uint32 NBSAbortReason
bool NBSBlkageFrntLe
bool NBSBlkageFrntRi
bool NBSBlkageReLe
bool NBSBlkageReRi
int32[] RpsDir_Avail
uint32 RpsTextInfo
int32 RpsSlotSts
uint32 RpsProgress
bool RpsStandstillReq
int32 RpsSts
int32 RpsLockUnlckCtrl
int32 RpsInstruction
uint32 RpsAbortReason

================================================================================
MSG: rospy_message_converter/ActuatorIf
LngLwSpdCtrlIf LngLwSpdCtrl
LatCtrlIf LatCtrl
LngCtrlEmrgIf LngCtrlEmrgnc
LngctrlCmfrtIf LngCtrlCmfrt
VehModMngIfInfo VehModMng
SafeStateInfo SafetyState
BodyCtrlIfInfo BodyCtrlIf

================================================================================
MSG: rospy_message_converter/LngLwSpdCtrlIf
int32 FctSeln
int32 CntrlModReq
int32 LLCSt
int32 TarGearReq
float32 TarSpdKph
float32 StopDst
int32 ShutdownModReq
int32 EPBReq
float32 VehDstToVSlot
float32 SlopeDstOffset
int32 VCU_ObjModTyp
float32 VCU_ObjModLonDst
float32 VCU_ObjModLatDst

================================================================================
MSG: rospy_message_converter/LatCtrlIf
int32 ACIReqVld
float32 ACIReqSAE
float32 ACISafLimAngDyn
uint32 ACISafLimAngRM
float32 ACISafLimAngDynOffs
uint32 ACISafLimRate
uint32 ACIRampRate
uint32 ACISafLimAngLM
uint32 ACISafLimMode
int32 CTIReqVal
float32 CTIReqSAE
int32 StrIFReq
uint32 HVIReq
int32 HVIReqVld
int32 ACITsuSup
int32 ACIOvrdThr

================================================================================
MSG: rospy_message_converter/LngCtrlEmrgIf
bool AEBDecelReq
float32 AEBTarDecel
bool EBADecelReq
bool ABPReq
uint32 AWBSnvtyLvl
bool AWBReq
uint32 ABASnvtyLvl
bool ABAReq
bool AEBDecelReq_DummyForDVR

================================================================================
MSG: rospy_message_converter/LngctrlCmfrtIf
int32 VLCReqFct
int32 VLCMode
float32 VLCTarA
float32 VLCMinJerkA
float32 VLCMaxJerkA
bool VLCDrvOffReq
bool VLCDecToStopReq
int32 VLCShutdownModReq
int32 AD_ActvSftyBltReq

================================================================================
MSG: rospy_message_converter/VehModMngIfInfo
int32 ADDrvTypReq
int32 DDMReq

================================================================================
MSG: rospy_message_converter/SafeStateInfo
uint32 SafetyState1

================================================================================
MSG: rospy_message_converter/BodyCtrlIfInfo
int32 MirrFoldUnfoldExtReq
int32 ADCWiperCtrl
bool WSHeatReq
bool WSHeatReqValid

================================================================================
MSG: rospy_message_converter/DrvIntractInfo
SpdDispAndCfgInfo SpdDispAndCfg
SdowBsdIfInfo SdowBSD
CTAWarnIfInfo CTAWarn
BodyIfInfo BodyCtrl
LngWarnSafetyIfInfo LngWarnSafe
NpIfInfo NpDrvIF
CAMCInfo CAMCSts
ADSysInfo ADSysSts
DMSInfo DMSIF
ADIcsInfo ADIcsIF
FuncEDRInfo FuncEDR

================================================================================
MSG: rospy_message_converter/SpdDispAndCfgInfo
int32 SAS_SLIF_State
int32 SAS_SLWF_WarnTrigger
int32 SAS_SpeedLimitAttribute
int32 SAS_SpeedLimitTakeover
bool SAS_SpeedLimitUnit
uint32 SAS_SpeedLimitValue
bool SAS_SupSignAttribute
uint32 SAS_SupSignType
uint32 SAS_LocalHzrd
uint32 SAS_RdFtrWarnSign
uint32 SAS_TrffcLghtSts

================================================================================
MSG: rospy_message_converter/SdowBsdIfInfo
bool SDOWOnOffSts
bool LCAHapticOnOffSts
bool BSDLCAOnOffSts
int32[] SDOWWarnSts
int32 ExtReqRAD_RR
int32[] SDOWWarnReq
int32[] BSDLCASts
int32[] BSDLCAReWarnReq
int32[] FrntRSDSDisp
int32 ReRiRSDSDisp

================================================================================
MSG: rospy_message_converter/CTAWarnIfInfo
int32 FCTAOnOffSts
bool RCTAOnOffSts
int32 FCTASts
int32 RCTABrkSts
int32[] CTAFrntWarnReq
int32[] CTAReWarnReq
int32[] RCTAWarnSts
int32[] FCTAWarnSts
int32 RCTABOnOffSts

================================================================================
MSG: rospy_message_converter/BodyIfInfo
LightIfInfo LightIf
int32 DoorUnlckReq
int32 RemLogSts
int32 HornCtrlReq
bool ECOPlusModReqSts

================================================================================
MSG: rospy_message_converter/LightIfInfo
bool HMAHiBeamReq
int32 HMASts
int32[] MirrLightReq

================================================================================
MSG: rospy_message_converter/LngWarnSafetyIfInfo
int32 FCWSetSts
int32 AEBSts
int32 PcwWarnReq
int32 AESWarningSts
int32 AESSts
int32 RearAEBSts

================================================================================
MSG: rospy_message_converter/NpIfInfo
uint32 Textinfo
int32 GoNotifyReq
int32 LnAssiTyp
int32 LnAssiSnvty
bool LnAstHptcOnOffSts
int32 LnAssistSts
int32 DANADSts
int32 AdasLeLine
int32 AdasRiLine
int32 TurnLightReq
int32 TauGapSet
bool DisplaySetSpeedSwtch
bool SetSpeedUnit
uint32 DisplaySetSpd
uint32 DA_NAD_WTI
uint32 ALCSsts
int32 LatCtrlTarLe
int32 LatCtrlTarRi
bool LongCtrlTar
int32 TauGapChangeDisp
int32 HODsymbol
int32 ELKSts
int32 ESFWarningSts
int32 EASSts
int32 EASWarningLevel
bool EcallReq
bool DA_FreeSpaceIntrusion
uint32 DA_NOP_ALC_Sts
int32 DA_NOP_Avl
uint32 DA_LaneChgSupReason
int32 ADCDoorLockReq
uint32 DA_NOP_WTIs
uint32 DA_iACC_WTIs
uint32 DA_Pilot_WTIs
bool DA_SysFailSymbol
int32 DA_SetSpeedAnimation
int32 DMSIntrvSnvtyReq
int32 DMSFaultInfo
int32 ADBSysErrSts
uint32 DA_NopWTI

================================================================================
MSG: rospy_message_converter/CAMCInfo
bool DVRFltSts
bool CAM_FrntFltSts
bool CAM_LeFltSts
bool CAM_ReFltSts
bool CAM_RiFltSts

================================================================================
MSG: rospy_message_converter/ADSysInfo
uint32 AD_SysSts
int32 ADCUSSMode
int32 ADCsts
int32 ADC_SystemState
int32 LidarSts
int32 Camera_FrntWideSts
int32 SnsrCamera_SurroundLeSts
int32 SnsrCamera_ReSts
int32 SnsrCamera_SideFrntRiSts
int32 SnsrCamera_SurroundRiSts
int32 SnsrCamera_SideReRiSts
int32 SnsrCamera_FrntNarrowSts
int32 SnsrCamera_SideReLeSts
int32 SnsrCamera_SurroundFrntSts
int32 SnsrCamera_SurroundReSts
int32 SnsrCamera_SideFrntLeSts

================================================================================
MSG: rospy_message_converter/DMSInfo
int32 DrowsinessLevel
int32 DrowsinessSts
int32 DistractionLevel
int32 DistractionSts

================================================================================
MSG: rospy_message_converter/ADIcsInfo
bool ShowSwtichDA_NOP
bool ShowSetDA_NOP
int32 ShowSetSWF
int32 ShowSetCHA
bool ShowSetDA_ALCS
uint32 ShowSetDA_SpdAssist
bool ShowSetDA_SetSpdCtrl
uint32 ShowSetDA_NOPALC
uint32 ShowSetDA_SteerAssist
bool ShowSet360AP
bool ShowSetDA_CurveSpdAssist
bool ADC_VehDisp_Warn
int32 ReRADfeatures_FactoryDft
int32 LaneFeautres_FactoryDft

================================================================================
MSG: rospy_message_converter/FuncEDRInfo
int32 LnAssistSts_EDR
int32 LnAssiTyp_EDR
int32 AdasLeLine_EDR
int32 ACSF_B1_Sts_EDR
int32 AdasRiLine_EDR
int32 ELKSts_EDR
int32 ACSF_D_Sts_EDR
int32 ACSF_B2_Sts_EDR
int32 ACSF_A_Sts_EDR
int32 ACSF_C_Sts_EDR
int32 ACSF_E_Sts_EDR
int32 ACCSts_EDR
int32 ESFWarningSts_EDR
"""
  __slots__ = ['LowSpdFun','Actuator','DrvrIF','publish_ptp_ts','crc','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/LowSpdFunInfo','rospy_message_converter/ActuatorIf','rospy_message_converter/DrvIntractInfo','uint64','uint32','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LowSpdFun,Actuator,DrvrIF,publish_ptp_ts,crc,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LowSpdFun is None:
        self.LowSpdFun = rospy_message_converter.msg.LowSpdFunInfo()
      if self.Actuator is None:
        self.Actuator = rospy_message_converter.msg.ActuatorIf()
      if self.DrvrIF is None:
        self.DrvrIF = rospy_message_converter.msg.DrvIntractInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.crc is None:
        self.crc = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.LowSpdFun = rospy_message_converter.msg.LowSpdFunInfo()
      self.Actuator = rospy_message_converter.msg.ActuatorIf()
      self.DrvrIF = rospy_message_converter.msg.DrvIntractInfo()
      self.publish_ptp_ts = 0
      self.crc = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4iI2i().pack(_x.LowSpdFun.ParkSt.PrkgTypSts, _x.LowSpdFun.ParkSt.SAPAOpMode, _x.LowSpdFun.ParkSt.SApaStatus, _x.LowSpdFun.ParkSt.APAReq, _x.LowSpdFun.ParkSt.APASlotTrackID, _x.LowSpdFun.ParkSt.SVCReq, _x.LowSpdFun.ParkSt.SApaDrivingDir))
      length = len(self.LowSpdFun.ParkSt.SApaPscSlot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LowSpdFun.ParkSt.SApaPscSlot))
      length = len(self.LowSpdFun.ParkSt.SApaPocSLot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LowSpdFun.ParkSt.SApaPocSLot))
      _x = self
      buff.write(_get_struct_iIi2I6iIiIiIiI4B().pack(_x.LowSpdFun.ParkSt.SApaInstruction, _x.LowSpdFun.ParkSt.SApaStopDstDisp, _x.LowSpdFun.ParkSt.SVCEDRReq, _x.LowSpdFun.ParkSt.SApaAbortReason, _x.LowSpdFun.ParkSt.SAPATextInfo, _x.LowSpdFun.ParkSt.PSAPOutInstruction, _x.LowSpdFun.ParkSt.PSAPInstruction, _x.LowSpdFun.ParkSt.PsapTextInfo, _x.LowSpdFun.ParkSt.PSAPAbortReason, _x.LowSpdFun.ParkSt.PSAPHMIStatus, _x.LowSpdFun.ParkSt.PSAPDrivingDir, _x.LowSpdFun.ParkSt.PSAPStopDstDisp, _x.LowSpdFun.ParkSt.PSAPOutHMIStatus, _x.LowSpdFun.ParkSt.SApaProgress, _x.LowSpdFun.ParkSt.PrkgActvFeatureTyp, _x.LowSpdFun.SummonSt.NBSInstruction, _x.LowSpdFun.SummonSt.NBSBlkage, _x.LowSpdFun.SummonSt.NBSAbortReason, _x.LowSpdFun.SummonSt.NBSBlkageFrntLe, _x.LowSpdFun.SummonSt.NBSBlkageFrntRi, _x.LowSpdFun.SummonSt.NBSBlkageReLe, _x.LowSpdFun.SummonSt.NBSBlkageReRi))
      length = len(self.LowSpdFun.SummonSt.RpsDir_Avail)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.LowSpdFun.SummonSt.RpsDir_Avail))
      _x = self
      buff.write(_get_struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B().pack(_x.LowSpdFun.SummonSt.RpsTextInfo, _x.LowSpdFun.SummonSt.RpsSlotSts, _x.LowSpdFun.SummonSt.RpsProgress, _x.LowSpdFun.SummonSt.RpsStandstillReq, _x.LowSpdFun.SummonSt.RpsSts, _x.LowSpdFun.SummonSt.RpsLockUnlckCtrl, _x.LowSpdFun.SummonSt.RpsInstruction, _x.LowSpdFun.SummonSt.RpsAbortReason, _x.Actuator.LngLwSpdCtrl.FctSeln, _x.Actuator.LngLwSpdCtrl.CntrlModReq, _x.Actuator.LngLwSpdCtrl.LLCSt, _x.Actuator.LngLwSpdCtrl.TarGearReq, _x.Actuator.LngLwSpdCtrl.TarSpdKph, _x.Actuator.LngLwSpdCtrl.StopDst, _x.Actuator.LngLwSpdCtrl.ShutdownModReq, _x.Actuator.LngLwSpdCtrl.EPBReq, _x.Actuator.LngLwSpdCtrl.VehDstToVSlot, _x.Actuator.LngLwSpdCtrl.SlopeDstOffset, _x.Actuator.LngLwSpdCtrl.VCU_ObjModTyp, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLonDst, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLatDst, _x.Actuator.LatCtrl.ACIReqVld, _x.Actuator.LatCtrl.ACIReqSAE, _x.Actuator.LatCtrl.ACISafLimAngDyn, _x.Actuator.LatCtrl.ACISafLimAngRM, _x.Actuator.LatCtrl.ACISafLimAngDynOffs, _x.Actuator.LatCtrl.ACISafLimRate, _x.Actuator.LatCtrl.ACIRampRate, _x.Actuator.LatCtrl.ACISafLimAngLM, _x.Actuator.LatCtrl.ACISafLimMode, _x.Actuator.LatCtrl.CTIReqVal, _x.Actuator.LatCtrl.CTIReqSAE, _x.Actuator.LatCtrl.StrIFReq, _x.Actuator.LatCtrl.HVIReq, _x.Actuator.LatCtrl.HVIReqVld, _x.Actuator.LatCtrl.ACITsuSup, _x.Actuator.LatCtrl.ACIOvrdThr, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq, _x.Actuator.LngCtrlEmrgnc.AEBTarDecel, _x.Actuator.LngCtrlEmrgnc.EBADecelReq, _x.Actuator.LngCtrlEmrgnc.ABPReq, _x.Actuator.LngCtrlEmrgnc.AWBSnvtyLvl, _x.Actuator.LngCtrlEmrgnc.AWBReq, _x.Actuator.LngCtrlEmrgnc.ABASnvtyLvl, _x.Actuator.LngCtrlEmrgnc.ABAReq, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.Actuator.LngCtrlCmfrt.VLCReqFct, _x.Actuator.LngCtrlCmfrt.VLCMode, _x.Actuator.LngCtrlCmfrt.VLCTarA, _x.Actuator.LngCtrlCmfrt.VLCMinJerkA, _x.Actuator.LngCtrlCmfrt.VLCMaxJerkA, _x.Actuator.LngCtrlCmfrt.VLCDrvOffReq, _x.Actuator.LngCtrlCmfrt.VLCDecToStopReq, _x.Actuator.LngCtrlCmfrt.VLCShutdownModReq, _x.Actuator.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.Actuator.VehModMng.ADDrvTypReq, _x.Actuator.VehModMng.DDMReq, _x.Actuator.SafetyState.SafetyState1, _x.Actuator.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.Actuator.BodyCtrlIf.ADCWiperCtrl, _x.Actuator.BodyCtrlIf.WSHeatReq, _x.Actuator.BodyCtrlIf.WSHeatReqValid, _x.DrvrIF.SpdDispAndCfg.SAS_SLIF_State, _x.DrvrIF.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitValue, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignType, _x.DrvrIF.SpdDispAndCfg.SAS_LocalHzrd, _x.DrvrIF.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.DrvrIF.SpdDispAndCfg.SAS_TrffcLghtSts, _x.DrvrIF.SdowBSD.SDOWOnOffSts, _x.DrvrIF.SdowBSD.LCAHapticOnOffSts, _x.DrvrIF.SdowBSD.BSDLCAOnOffSts))
      length = len(self.DrvrIF.SdowBSD.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.SdowBSD.SDOWWarnSts))
      _x = self.DrvrIF.SdowBSD.ExtReqRAD_RR
      buff.write(_get_struct_i().pack(_x))
      length = len(self.DrvrIF.SdowBSD.SDOWWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.SdowBSD.SDOWWarnReq))
      length = len(self.DrvrIF.SdowBSD.BSDLCASts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.SdowBSD.BSDLCASts))
      length = len(self.DrvrIF.SdowBSD.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.SdowBSD.BSDLCAReWarnReq))
      length = len(self.DrvrIF.SdowBSD.FrntRSDSDisp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.SdowBSD.FrntRSDSDisp))
      _x = self
      buff.write(_get_struct_2iB2i().pack(_x.DrvrIF.SdowBSD.ReRiRSDSDisp, _x.DrvrIF.CTAWarn.FCTAOnOffSts, _x.DrvrIF.CTAWarn.RCTAOnOffSts, _x.DrvrIF.CTAWarn.FCTASts, _x.DrvrIF.CTAWarn.RCTABrkSts))
      length = len(self.DrvrIF.CTAWarn.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.CTAWarn.CTAFrntWarnReq))
      length = len(self.DrvrIF.CTAWarn.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.CTAWarn.CTAReWarnReq))
      length = len(self.DrvrIF.CTAWarn.RCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.CTAWarn.RCTAWarnSts))
      length = len(self.DrvrIF.CTAWarn.FCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.CTAWarn.FCTAWarnSts))
      _x = self
      buff.write(_get_struct_iBi().pack(_x.DrvrIF.CTAWarn.RCTABOnOffSts, _x.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq, _x.DrvrIF.BodyCtrl.LightIf.HMASts))
      length = len(self.DrvrIF.BodyCtrl.LightIf.MirrLightReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.DrvrIF.BodyCtrl.LightIf.MirrLightReq))
      _x = self
      buff.write(_get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI().pack(_x.DrvrIF.BodyCtrl.DoorUnlckReq, _x.DrvrIF.BodyCtrl.RemLogSts, _x.DrvrIF.BodyCtrl.HornCtrlReq, _x.DrvrIF.BodyCtrl.ECOPlusModReqSts, _x.DrvrIF.LngWarnSafe.FCWSetSts, _x.DrvrIF.LngWarnSafe.AEBSts, _x.DrvrIF.LngWarnSafe.PcwWarnReq, _x.DrvrIF.LngWarnSafe.AESWarningSts, _x.DrvrIF.LngWarnSafe.AESSts, _x.DrvrIF.LngWarnSafe.RearAEBSts, _x.DrvrIF.NpDrvIF.Textinfo, _x.DrvrIF.NpDrvIF.GoNotifyReq, _x.DrvrIF.NpDrvIF.LnAssiTyp, _x.DrvrIF.NpDrvIF.LnAssiSnvty, _x.DrvrIF.NpDrvIF.LnAstHptcOnOffSts, _x.DrvrIF.NpDrvIF.LnAssistSts, _x.DrvrIF.NpDrvIF.DANADSts, _x.DrvrIF.NpDrvIF.AdasLeLine, _x.DrvrIF.NpDrvIF.AdasRiLine, _x.DrvrIF.NpDrvIF.TurnLightReq, _x.DrvrIF.NpDrvIF.TauGapSet, _x.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch, _x.DrvrIF.NpDrvIF.SetSpeedUnit, _x.DrvrIF.NpDrvIF.DisplaySetSpd, _x.DrvrIF.NpDrvIF.DA_NAD_WTI, _x.DrvrIF.NpDrvIF.ALCSsts, _x.DrvrIF.NpDrvIF.LatCtrlTarLe, _x.DrvrIF.NpDrvIF.LatCtrlTarRi, _x.DrvrIF.NpDrvIF.LongCtrlTar, _x.DrvrIF.NpDrvIF.TauGapChangeDisp, _x.DrvrIF.NpDrvIF.HODsymbol, _x.DrvrIF.NpDrvIF.ELKSts, _x.DrvrIF.NpDrvIF.ESFWarningSts, _x.DrvrIF.NpDrvIF.EASSts, _x.DrvrIF.NpDrvIF.EASWarningLevel, _x.DrvrIF.NpDrvIF.EcallReq, _x.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion, _x.DrvrIF.NpDrvIF.DA_NOP_ALC_Sts, _x.DrvrIF.NpDrvIF.DA_NOP_Avl, _x.DrvrIF.NpDrvIF.DA_LaneChgSupReason, _x.DrvrIF.NpDrvIF.ADCDoorLockReq, _x.DrvrIF.NpDrvIF.DA_NOP_WTIs, _x.DrvrIF.NpDrvIF.DA_iACC_WTIs, _x.DrvrIF.NpDrvIF.DA_Pilot_WTIs, _x.DrvrIF.NpDrvIF.DA_SysFailSymbol, _x.DrvrIF.NpDrvIF.DA_SetSpeedAnimation, _x.DrvrIF.NpDrvIF.DMSIntrvSnvtyReq, _x.DrvrIF.NpDrvIF.DMSFaultInfo, _x.DrvrIF.NpDrvIF.ADBSysErrSts, _x.DrvrIF.NpDrvIF.DA_NopWTI, _x.DrvrIF.CAMCSts.DVRFltSts, _x.DrvrIF.CAMCSts.CAM_FrntFltSts, _x.DrvrIF.CAMCSts.CAM_LeFltSts, _x.DrvrIF.CAMCSts.CAM_ReFltSts, _x.DrvrIF.CAMCSts.CAM_RiFltSts, _x.DrvrIF.ADSysSts.AD_SysSts, _x.DrvrIF.ADSysSts.ADCUSSMode, _x.DrvrIF.ADSysSts.ADCsts, _x.DrvrIF.ADSysSts.ADC_SystemState, _x.DrvrIF.ADSysSts.LidarSts, _x.DrvrIF.ADSysSts.Camera_FrntWideSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_ReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_FrntNarrowSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundFrntSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DrvrIF.DMSIF.DrowsinessLevel, _x.DrvrIF.DMSIF.DrowsinessSts, _x.DrvrIF.DMSIF.DistractionLevel, _x.DrvrIF.DMSIF.DistractionSts, _x.DrvrIF.ADIcsIF.ShowSwtichDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetSWF, _x.DrvrIF.ADIcsIF.ShowSetCHA, _x.DrvrIF.ADIcsIF.ShowSetDA_ALCS, _x.DrvrIF.ADIcsIF.ShowSetDA_SpdAssist, _x.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.DrvrIF.ADIcsIF.ShowSetDA_NOPALC, _x.DrvrIF.ADIcsIF.ShowSetDA_SteerAssist, _x.DrvrIF.ADIcsIF.ShowSet360AP, _x.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.DrvrIF.ADIcsIF.ADC_VehDisp_Warn, _x.DrvrIF.ADIcsIF.ReRADfeatures_FactoryDft, _x.DrvrIF.ADIcsIF.LaneFeautres_FactoryDft, _x.DrvrIF.FuncEDR.LnAssistSts_EDR, _x.DrvrIF.FuncEDR.LnAssiTyp_EDR, _x.DrvrIF.FuncEDR.AdasLeLine_EDR, _x.DrvrIF.FuncEDR.ACSF_B1_Sts_EDR, _x.DrvrIF.FuncEDR.AdasRiLine_EDR, _x.DrvrIF.FuncEDR.ELKSts_EDR, _x.DrvrIF.FuncEDR.ACSF_D_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_B2_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_A_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_C_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_E_Sts_EDR, _x.DrvrIF.FuncEDR.ACCSts_EDR, _x.DrvrIF.FuncEDR.ESFWarningSts_EDR, _x.publish_ptp_ts, _x.crc))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LowSpdFun is None:
        self.LowSpdFun = rospy_message_converter.msg.LowSpdFunInfo()
      if self.Actuator is None:
        self.Actuator = rospy_message_converter.msg.ActuatorIf()
      if self.DrvrIF is None:
        self.DrvrIF = rospy_message_converter.msg.DrvIntractInfo()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.LowSpdFun.ParkSt.PrkgTypSts, _x.LowSpdFun.ParkSt.SAPAOpMode, _x.LowSpdFun.ParkSt.SApaStatus, _x.LowSpdFun.ParkSt.APAReq, _x.LowSpdFun.ParkSt.APASlotTrackID, _x.LowSpdFun.ParkSt.SVCReq, _x.LowSpdFun.ParkSt.SApaDrivingDir,) = _get_struct_4iI2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LowSpdFun.ParkSt.SApaPscSlot = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LowSpdFun.ParkSt.SApaPocSLot = s.unpack(str[start:end])
      _x = self
      start = end
      end += 76
      (_x.LowSpdFun.ParkSt.SApaInstruction, _x.LowSpdFun.ParkSt.SApaStopDstDisp, _x.LowSpdFun.ParkSt.SVCEDRReq, _x.LowSpdFun.ParkSt.SApaAbortReason, _x.LowSpdFun.ParkSt.SAPATextInfo, _x.LowSpdFun.ParkSt.PSAPOutInstruction, _x.LowSpdFun.ParkSt.PSAPInstruction, _x.LowSpdFun.ParkSt.PsapTextInfo, _x.LowSpdFun.ParkSt.PSAPAbortReason, _x.LowSpdFun.ParkSt.PSAPHMIStatus, _x.LowSpdFun.ParkSt.PSAPDrivingDir, _x.LowSpdFun.ParkSt.PSAPStopDstDisp, _x.LowSpdFun.ParkSt.PSAPOutHMIStatus, _x.LowSpdFun.ParkSt.SApaProgress, _x.LowSpdFun.ParkSt.PrkgActvFeatureTyp, _x.LowSpdFun.SummonSt.NBSInstruction, _x.LowSpdFun.SummonSt.NBSBlkage, _x.LowSpdFun.SummonSt.NBSAbortReason, _x.LowSpdFun.SummonSt.NBSBlkageFrntLe, _x.LowSpdFun.SummonSt.NBSBlkageFrntRi, _x.LowSpdFun.SummonSt.NBSBlkageReLe, _x.LowSpdFun.SummonSt.NBSBlkageReRi,) = _get_struct_iIi2I6iIiIiIiI4B().unpack(str[start:end])
      self.LowSpdFun.SummonSt.NBSBlkageFrntLe = bool(self.LowSpdFun.SummonSt.NBSBlkageFrntLe)
      self.LowSpdFun.SummonSt.NBSBlkageFrntRi = bool(self.LowSpdFun.SummonSt.NBSBlkageFrntRi)
      self.LowSpdFun.SummonSt.NBSBlkageReLe = bool(self.LowSpdFun.SummonSt.NBSBlkageReLe)
      self.LowSpdFun.SummonSt.NBSBlkageReRi = bool(self.LowSpdFun.SummonSt.NBSBlkageReRi)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LowSpdFun.SummonSt.RpsDir_Avail = s.unpack(str[start:end])
      _x = self
      start = end
      end += 256
      (_x.LowSpdFun.SummonSt.RpsTextInfo, _x.LowSpdFun.SummonSt.RpsSlotSts, _x.LowSpdFun.SummonSt.RpsProgress, _x.LowSpdFun.SummonSt.RpsStandstillReq, _x.LowSpdFun.SummonSt.RpsSts, _x.LowSpdFun.SummonSt.RpsLockUnlckCtrl, _x.LowSpdFun.SummonSt.RpsInstruction, _x.LowSpdFun.SummonSt.RpsAbortReason, _x.Actuator.LngLwSpdCtrl.FctSeln, _x.Actuator.LngLwSpdCtrl.CntrlModReq, _x.Actuator.LngLwSpdCtrl.LLCSt, _x.Actuator.LngLwSpdCtrl.TarGearReq, _x.Actuator.LngLwSpdCtrl.TarSpdKph, _x.Actuator.LngLwSpdCtrl.StopDst, _x.Actuator.LngLwSpdCtrl.ShutdownModReq, _x.Actuator.LngLwSpdCtrl.EPBReq, _x.Actuator.LngLwSpdCtrl.VehDstToVSlot, _x.Actuator.LngLwSpdCtrl.SlopeDstOffset, _x.Actuator.LngLwSpdCtrl.VCU_ObjModTyp, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLonDst, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLatDst, _x.Actuator.LatCtrl.ACIReqVld, _x.Actuator.LatCtrl.ACIReqSAE, _x.Actuator.LatCtrl.ACISafLimAngDyn, _x.Actuator.LatCtrl.ACISafLimAngRM, _x.Actuator.LatCtrl.ACISafLimAngDynOffs, _x.Actuator.LatCtrl.ACISafLimRate, _x.Actuator.LatCtrl.ACIRampRate, _x.Actuator.LatCtrl.ACISafLimAngLM, _x.Actuator.LatCtrl.ACISafLimMode, _x.Actuator.LatCtrl.CTIReqVal, _x.Actuator.LatCtrl.CTIReqSAE, _x.Actuator.LatCtrl.StrIFReq, _x.Actuator.LatCtrl.HVIReq, _x.Actuator.LatCtrl.HVIReqVld, _x.Actuator.LatCtrl.ACITsuSup, _x.Actuator.LatCtrl.ACIOvrdThr, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq, _x.Actuator.LngCtrlEmrgnc.AEBTarDecel, _x.Actuator.LngCtrlEmrgnc.EBADecelReq, _x.Actuator.LngCtrlEmrgnc.ABPReq, _x.Actuator.LngCtrlEmrgnc.AWBSnvtyLvl, _x.Actuator.LngCtrlEmrgnc.AWBReq, _x.Actuator.LngCtrlEmrgnc.ABASnvtyLvl, _x.Actuator.LngCtrlEmrgnc.ABAReq, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.Actuator.LngCtrlCmfrt.VLCReqFct, _x.Actuator.LngCtrlCmfrt.VLCMode, _x.Actuator.LngCtrlCmfrt.VLCTarA, _x.Actuator.LngCtrlCmfrt.VLCMinJerkA, _x.Actuator.LngCtrlCmfrt.VLCMaxJerkA, _x.Actuator.LngCtrlCmfrt.VLCDrvOffReq, _x.Actuator.LngCtrlCmfrt.VLCDecToStopReq, _x.Actuator.LngCtrlCmfrt.VLCShutdownModReq, _x.Actuator.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.Actuator.VehModMng.ADDrvTypReq, _x.Actuator.VehModMng.DDMReq, _x.Actuator.SafetyState.SafetyState1, _x.Actuator.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.Actuator.BodyCtrlIf.ADCWiperCtrl, _x.Actuator.BodyCtrlIf.WSHeatReq, _x.Actuator.BodyCtrlIf.WSHeatReqValid, _x.DrvrIF.SpdDispAndCfg.SAS_SLIF_State, _x.DrvrIF.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitValue, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignType, _x.DrvrIF.SpdDispAndCfg.SAS_LocalHzrd, _x.DrvrIF.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.DrvrIF.SpdDispAndCfg.SAS_TrffcLghtSts, _x.DrvrIF.SdowBSD.SDOWOnOffSts, _x.DrvrIF.SdowBSD.LCAHapticOnOffSts, _x.DrvrIF.SdowBSD.BSDLCAOnOffSts,) = _get_struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B().unpack(str[start:end])
      self.LowSpdFun.SummonSt.RpsStandstillReq = bool(self.LowSpdFun.SummonSt.RpsStandstillReq)
      self.Actuator.LngCtrlEmrgnc.AEBDecelReq = bool(self.Actuator.LngCtrlEmrgnc.AEBDecelReq)
      self.Actuator.LngCtrlEmrgnc.EBADecelReq = bool(self.Actuator.LngCtrlEmrgnc.EBADecelReq)
      self.Actuator.LngCtrlEmrgnc.ABPReq = bool(self.Actuator.LngCtrlEmrgnc.ABPReq)
      self.Actuator.LngCtrlEmrgnc.AWBReq = bool(self.Actuator.LngCtrlEmrgnc.AWBReq)
      self.Actuator.LngCtrlEmrgnc.ABAReq = bool(self.Actuator.LngCtrlEmrgnc.ABAReq)
      self.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR = bool(self.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR)
      self.Actuator.LngCtrlCmfrt.VLCDrvOffReq = bool(self.Actuator.LngCtrlCmfrt.VLCDrvOffReq)
      self.Actuator.LngCtrlCmfrt.VLCDecToStopReq = bool(self.Actuator.LngCtrlCmfrt.VLCDecToStopReq)
      self.Actuator.BodyCtrlIf.WSHeatReq = bool(self.Actuator.BodyCtrlIf.WSHeatReq)
      self.Actuator.BodyCtrlIf.WSHeatReqValid = bool(self.Actuator.BodyCtrlIf.WSHeatReqValid)
      self.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit = bool(self.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit)
      self.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute = bool(self.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute)
      self.DrvrIF.SdowBSD.SDOWOnOffSts = bool(self.DrvrIF.SdowBSD.SDOWOnOffSts)
      self.DrvrIF.SdowBSD.LCAHapticOnOffSts = bool(self.DrvrIF.SdowBSD.LCAHapticOnOffSts)
      self.DrvrIF.SdowBSD.BSDLCAOnOffSts = bool(self.DrvrIF.SdowBSD.BSDLCAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.SDOWWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (self.DrvrIF.SdowBSD.ExtReqRAD_RR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.SDOWWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.BSDLCASts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.BSDLCAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.FrntRSDSDisp = s.unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.DrvrIF.SdowBSD.ReRiRSDSDisp, _x.DrvrIF.CTAWarn.FCTAOnOffSts, _x.DrvrIF.CTAWarn.RCTAOnOffSts, _x.DrvrIF.CTAWarn.FCTASts, _x.DrvrIF.CTAWarn.RCTABrkSts,) = _get_struct_2iB2i().unpack(str[start:end])
      self.DrvrIF.CTAWarn.RCTAOnOffSts = bool(self.DrvrIF.CTAWarn.RCTAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.CTAFrntWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.CTAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.RCTAWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.FCTAWarnSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.DrvrIF.CTAWarn.RCTABOnOffSts, _x.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq, _x.DrvrIF.BodyCtrl.LightIf.HMASts,) = _get_struct_iBi().unpack(str[start:end])
      self.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq = bool(self.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.BodyCtrl.LightIf.MirrLightReq = s.unpack(str[start:end])
      _x = self
      start = end
      end += 360
      (_x.DrvrIF.BodyCtrl.DoorUnlckReq, _x.DrvrIF.BodyCtrl.RemLogSts, _x.DrvrIF.BodyCtrl.HornCtrlReq, _x.DrvrIF.BodyCtrl.ECOPlusModReqSts, _x.DrvrIF.LngWarnSafe.FCWSetSts, _x.DrvrIF.LngWarnSafe.AEBSts, _x.DrvrIF.LngWarnSafe.PcwWarnReq, _x.DrvrIF.LngWarnSafe.AESWarningSts, _x.DrvrIF.LngWarnSafe.AESSts, _x.DrvrIF.LngWarnSafe.RearAEBSts, _x.DrvrIF.NpDrvIF.Textinfo, _x.DrvrIF.NpDrvIF.GoNotifyReq, _x.DrvrIF.NpDrvIF.LnAssiTyp, _x.DrvrIF.NpDrvIF.LnAssiSnvty, _x.DrvrIF.NpDrvIF.LnAstHptcOnOffSts, _x.DrvrIF.NpDrvIF.LnAssistSts, _x.DrvrIF.NpDrvIF.DANADSts, _x.DrvrIF.NpDrvIF.AdasLeLine, _x.DrvrIF.NpDrvIF.AdasRiLine, _x.DrvrIF.NpDrvIF.TurnLightReq, _x.DrvrIF.NpDrvIF.TauGapSet, _x.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch, _x.DrvrIF.NpDrvIF.SetSpeedUnit, _x.DrvrIF.NpDrvIF.DisplaySetSpd, _x.DrvrIF.NpDrvIF.DA_NAD_WTI, _x.DrvrIF.NpDrvIF.ALCSsts, _x.DrvrIF.NpDrvIF.LatCtrlTarLe, _x.DrvrIF.NpDrvIF.LatCtrlTarRi, _x.DrvrIF.NpDrvIF.LongCtrlTar, _x.DrvrIF.NpDrvIF.TauGapChangeDisp, _x.DrvrIF.NpDrvIF.HODsymbol, _x.DrvrIF.NpDrvIF.ELKSts, _x.DrvrIF.NpDrvIF.ESFWarningSts, _x.DrvrIF.NpDrvIF.EASSts, _x.DrvrIF.NpDrvIF.EASWarningLevel, _x.DrvrIF.NpDrvIF.EcallReq, _x.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion, _x.DrvrIF.NpDrvIF.DA_NOP_ALC_Sts, _x.DrvrIF.NpDrvIF.DA_NOP_Avl, _x.DrvrIF.NpDrvIF.DA_LaneChgSupReason, _x.DrvrIF.NpDrvIF.ADCDoorLockReq, _x.DrvrIF.NpDrvIF.DA_NOP_WTIs, _x.DrvrIF.NpDrvIF.DA_iACC_WTIs, _x.DrvrIF.NpDrvIF.DA_Pilot_WTIs, _x.DrvrIF.NpDrvIF.DA_SysFailSymbol, _x.DrvrIF.NpDrvIF.DA_SetSpeedAnimation, _x.DrvrIF.NpDrvIF.DMSIntrvSnvtyReq, _x.DrvrIF.NpDrvIF.DMSFaultInfo, _x.DrvrIF.NpDrvIF.ADBSysErrSts, _x.DrvrIF.NpDrvIF.DA_NopWTI, _x.DrvrIF.CAMCSts.DVRFltSts, _x.DrvrIF.CAMCSts.CAM_FrntFltSts, _x.DrvrIF.CAMCSts.CAM_LeFltSts, _x.DrvrIF.CAMCSts.CAM_ReFltSts, _x.DrvrIF.CAMCSts.CAM_RiFltSts, _x.DrvrIF.ADSysSts.AD_SysSts, _x.DrvrIF.ADSysSts.ADCUSSMode, _x.DrvrIF.ADSysSts.ADCsts, _x.DrvrIF.ADSysSts.ADC_SystemState, _x.DrvrIF.ADSysSts.LidarSts, _x.DrvrIF.ADSysSts.Camera_FrntWideSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_ReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_FrntNarrowSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundFrntSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DrvrIF.DMSIF.DrowsinessLevel, _x.DrvrIF.DMSIF.DrowsinessSts, _x.DrvrIF.DMSIF.DistractionLevel, _x.DrvrIF.DMSIF.DistractionSts, _x.DrvrIF.ADIcsIF.ShowSwtichDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetSWF, _x.DrvrIF.ADIcsIF.ShowSetCHA, _x.DrvrIF.ADIcsIF.ShowSetDA_ALCS, _x.DrvrIF.ADIcsIF.ShowSetDA_SpdAssist, _x.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.DrvrIF.ADIcsIF.ShowSetDA_NOPALC, _x.DrvrIF.ADIcsIF.ShowSetDA_SteerAssist, _x.DrvrIF.ADIcsIF.ShowSet360AP, _x.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.DrvrIF.ADIcsIF.ADC_VehDisp_Warn, _x.DrvrIF.ADIcsIF.ReRADfeatures_FactoryDft, _x.DrvrIF.ADIcsIF.LaneFeautres_FactoryDft, _x.DrvrIF.FuncEDR.LnAssistSts_EDR, _x.DrvrIF.FuncEDR.LnAssiTyp_EDR, _x.DrvrIF.FuncEDR.AdasLeLine_EDR, _x.DrvrIF.FuncEDR.ACSF_B1_Sts_EDR, _x.DrvrIF.FuncEDR.AdasRiLine_EDR, _x.DrvrIF.FuncEDR.ELKSts_EDR, _x.DrvrIF.FuncEDR.ACSF_D_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_B2_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_A_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_C_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_E_Sts_EDR, _x.DrvrIF.FuncEDR.ACCSts_EDR, _x.DrvrIF.FuncEDR.ESFWarningSts_EDR, _x.publish_ptp_ts, _x.crc,) = _get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI().unpack(str[start:end])
      self.DrvrIF.BodyCtrl.ECOPlusModReqSts = bool(self.DrvrIF.BodyCtrl.ECOPlusModReqSts)
      self.DrvrIF.NpDrvIF.LnAstHptcOnOffSts = bool(self.DrvrIF.NpDrvIF.LnAstHptcOnOffSts)
      self.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch = bool(self.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch)
      self.DrvrIF.NpDrvIF.SetSpeedUnit = bool(self.DrvrIF.NpDrvIF.SetSpeedUnit)
      self.DrvrIF.NpDrvIF.LongCtrlTar = bool(self.DrvrIF.NpDrvIF.LongCtrlTar)
      self.DrvrIF.NpDrvIF.EcallReq = bool(self.DrvrIF.NpDrvIF.EcallReq)
      self.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion = bool(self.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion)
      self.DrvrIF.NpDrvIF.DA_SysFailSymbol = bool(self.DrvrIF.NpDrvIF.DA_SysFailSymbol)
      self.DrvrIF.CAMCSts.DVRFltSts = bool(self.DrvrIF.CAMCSts.DVRFltSts)
      self.DrvrIF.CAMCSts.CAM_FrntFltSts = bool(self.DrvrIF.CAMCSts.CAM_FrntFltSts)
      self.DrvrIF.CAMCSts.CAM_LeFltSts = bool(self.DrvrIF.CAMCSts.CAM_LeFltSts)
      self.DrvrIF.CAMCSts.CAM_ReFltSts = bool(self.DrvrIF.CAMCSts.CAM_ReFltSts)
      self.DrvrIF.CAMCSts.CAM_RiFltSts = bool(self.DrvrIF.CAMCSts.CAM_RiFltSts)
      self.DrvrIF.ADIcsIF.ShowSwtichDA_NOP = bool(self.DrvrIF.ADIcsIF.ShowSwtichDA_NOP)
      self.DrvrIF.ADIcsIF.ShowSetDA_NOP = bool(self.DrvrIF.ADIcsIF.ShowSetDA_NOP)
      self.DrvrIF.ADIcsIF.ShowSetDA_ALCS = bool(self.DrvrIF.ADIcsIF.ShowSetDA_ALCS)
      self.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl = bool(self.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl)
      self.DrvrIF.ADIcsIF.ShowSet360AP = bool(self.DrvrIF.ADIcsIF.ShowSet360AP)
      self.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist = bool(self.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist)
      self.DrvrIF.ADIcsIF.ADC_VehDisp_Warn = bool(self.DrvrIF.ADIcsIF.ADC_VehDisp_Warn)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4iI2i().pack(_x.LowSpdFun.ParkSt.PrkgTypSts, _x.LowSpdFun.ParkSt.SAPAOpMode, _x.LowSpdFun.ParkSt.SApaStatus, _x.LowSpdFun.ParkSt.APAReq, _x.LowSpdFun.ParkSt.APASlotTrackID, _x.LowSpdFun.ParkSt.SVCReq, _x.LowSpdFun.ParkSt.SApaDrivingDir))
      length = len(self.LowSpdFun.ParkSt.SApaPscSlot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LowSpdFun.ParkSt.SApaPscSlot.tostring())
      length = len(self.LowSpdFun.ParkSt.SApaPocSLot)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LowSpdFun.ParkSt.SApaPocSLot.tostring())
      _x = self
      buff.write(_get_struct_iIi2I6iIiIiIiI4B().pack(_x.LowSpdFun.ParkSt.SApaInstruction, _x.LowSpdFun.ParkSt.SApaStopDstDisp, _x.LowSpdFun.ParkSt.SVCEDRReq, _x.LowSpdFun.ParkSt.SApaAbortReason, _x.LowSpdFun.ParkSt.SAPATextInfo, _x.LowSpdFun.ParkSt.PSAPOutInstruction, _x.LowSpdFun.ParkSt.PSAPInstruction, _x.LowSpdFun.ParkSt.PsapTextInfo, _x.LowSpdFun.ParkSt.PSAPAbortReason, _x.LowSpdFun.ParkSt.PSAPHMIStatus, _x.LowSpdFun.ParkSt.PSAPDrivingDir, _x.LowSpdFun.ParkSt.PSAPStopDstDisp, _x.LowSpdFun.ParkSt.PSAPOutHMIStatus, _x.LowSpdFun.ParkSt.SApaProgress, _x.LowSpdFun.ParkSt.PrkgActvFeatureTyp, _x.LowSpdFun.SummonSt.NBSInstruction, _x.LowSpdFun.SummonSt.NBSBlkage, _x.LowSpdFun.SummonSt.NBSAbortReason, _x.LowSpdFun.SummonSt.NBSBlkageFrntLe, _x.LowSpdFun.SummonSt.NBSBlkageFrntRi, _x.LowSpdFun.SummonSt.NBSBlkageReLe, _x.LowSpdFun.SummonSt.NBSBlkageReRi))
      length = len(self.LowSpdFun.SummonSt.RpsDir_Avail)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.LowSpdFun.SummonSt.RpsDir_Avail.tostring())
      _x = self
      buff.write(_get_struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B().pack(_x.LowSpdFun.SummonSt.RpsTextInfo, _x.LowSpdFun.SummonSt.RpsSlotSts, _x.LowSpdFun.SummonSt.RpsProgress, _x.LowSpdFun.SummonSt.RpsStandstillReq, _x.LowSpdFun.SummonSt.RpsSts, _x.LowSpdFun.SummonSt.RpsLockUnlckCtrl, _x.LowSpdFun.SummonSt.RpsInstruction, _x.LowSpdFun.SummonSt.RpsAbortReason, _x.Actuator.LngLwSpdCtrl.FctSeln, _x.Actuator.LngLwSpdCtrl.CntrlModReq, _x.Actuator.LngLwSpdCtrl.LLCSt, _x.Actuator.LngLwSpdCtrl.TarGearReq, _x.Actuator.LngLwSpdCtrl.TarSpdKph, _x.Actuator.LngLwSpdCtrl.StopDst, _x.Actuator.LngLwSpdCtrl.ShutdownModReq, _x.Actuator.LngLwSpdCtrl.EPBReq, _x.Actuator.LngLwSpdCtrl.VehDstToVSlot, _x.Actuator.LngLwSpdCtrl.SlopeDstOffset, _x.Actuator.LngLwSpdCtrl.VCU_ObjModTyp, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLonDst, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLatDst, _x.Actuator.LatCtrl.ACIReqVld, _x.Actuator.LatCtrl.ACIReqSAE, _x.Actuator.LatCtrl.ACISafLimAngDyn, _x.Actuator.LatCtrl.ACISafLimAngRM, _x.Actuator.LatCtrl.ACISafLimAngDynOffs, _x.Actuator.LatCtrl.ACISafLimRate, _x.Actuator.LatCtrl.ACIRampRate, _x.Actuator.LatCtrl.ACISafLimAngLM, _x.Actuator.LatCtrl.ACISafLimMode, _x.Actuator.LatCtrl.CTIReqVal, _x.Actuator.LatCtrl.CTIReqSAE, _x.Actuator.LatCtrl.StrIFReq, _x.Actuator.LatCtrl.HVIReq, _x.Actuator.LatCtrl.HVIReqVld, _x.Actuator.LatCtrl.ACITsuSup, _x.Actuator.LatCtrl.ACIOvrdThr, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq, _x.Actuator.LngCtrlEmrgnc.AEBTarDecel, _x.Actuator.LngCtrlEmrgnc.EBADecelReq, _x.Actuator.LngCtrlEmrgnc.ABPReq, _x.Actuator.LngCtrlEmrgnc.AWBSnvtyLvl, _x.Actuator.LngCtrlEmrgnc.AWBReq, _x.Actuator.LngCtrlEmrgnc.ABASnvtyLvl, _x.Actuator.LngCtrlEmrgnc.ABAReq, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.Actuator.LngCtrlCmfrt.VLCReqFct, _x.Actuator.LngCtrlCmfrt.VLCMode, _x.Actuator.LngCtrlCmfrt.VLCTarA, _x.Actuator.LngCtrlCmfrt.VLCMinJerkA, _x.Actuator.LngCtrlCmfrt.VLCMaxJerkA, _x.Actuator.LngCtrlCmfrt.VLCDrvOffReq, _x.Actuator.LngCtrlCmfrt.VLCDecToStopReq, _x.Actuator.LngCtrlCmfrt.VLCShutdownModReq, _x.Actuator.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.Actuator.VehModMng.ADDrvTypReq, _x.Actuator.VehModMng.DDMReq, _x.Actuator.SafetyState.SafetyState1, _x.Actuator.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.Actuator.BodyCtrlIf.ADCWiperCtrl, _x.Actuator.BodyCtrlIf.WSHeatReq, _x.Actuator.BodyCtrlIf.WSHeatReqValid, _x.DrvrIF.SpdDispAndCfg.SAS_SLIF_State, _x.DrvrIF.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitValue, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignType, _x.DrvrIF.SpdDispAndCfg.SAS_LocalHzrd, _x.DrvrIF.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.DrvrIF.SpdDispAndCfg.SAS_TrffcLghtSts, _x.DrvrIF.SdowBSD.SDOWOnOffSts, _x.DrvrIF.SdowBSD.LCAHapticOnOffSts, _x.DrvrIF.SdowBSD.BSDLCAOnOffSts))
      length = len(self.DrvrIF.SdowBSD.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.SdowBSD.SDOWWarnSts.tostring())
      _x = self.DrvrIF.SdowBSD.ExtReqRAD_RR
      buff.write(_get_struct_i().pack(_x))
      length = len(self.DrvrIF.SdowBSD.SDOWWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.SdowBSD.SDOWWarnReq.tostring())
      length = len(self.DrvrIF.SdowBSD.BSDLCASts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.SdowBSD.BSDLCASts.tostring())
      length = len(self.DrvrIF.SdowBSD.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.SdowBSD.BSDLCAReWarnReq.tostring())
      length = len(self.DrvrIF.SdowBSD.FrntRSDSDisp)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.SdowBSD.FrntRSDSDisp.tostring())
      _x = self
      buff.write(_get_struct_2iB2i().pack(_x.DrvrIF.SdowBSD.ReRiRSDSDisp, _x.DrvrIF.CTAWarn.FCTAOnOffSts, _x.DrvrIF.CTAWarn.RCTAOnOffSts, _x.DrvrIF.CTAWarn.FCTASts, _x.DrvrIF.CTAWarn.RCTABrkSts))
      length = len(self.DrvrIF.CTAWarn.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.CTAWarn.CTAFrntWarnReq.tostring())
      length = len(self.DrvrIF.CTAWarn.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.CTAWarn.CTAReWarnReq.tostring())
      length = len(self.DrvrIF.CTAWarn.RCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.CTAWarn.RCTAWarnSts.tostring())
      length = len(self.DrvrIF.CTAWarn.FCTAWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.CTAWarn.FCTAWarnSts.tostring())
      _x = self
      buff.write(_get_struct_iBi().pack(_x.DrvrIF.CTAWarn.RCTABOnOffSts, _x.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq, _x.DrvrIF.BodyCtrl.LightIf.HMASts))
      length = len(self.DrvrIF.BodyCtrl.LightIf.MirrLightReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.DrvrIF.BodyCtrl.LightIf.MirrLightReq.tostring())
      _x = self
      buff.write(_get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI().pack(_x.DrvrIF.BodyCtrl.DoorUnlckReq, _x.DrvrIF.BodyCtrl.RemLogSts, _x.DrvrIF.BodyCtrl.HornCtrlReq, _x.DrvrIF.BodyCtrl.ECOPlusModReqSts, _x.DrvrIF.LngWarnSafe.FCWSetSts, _x.DrvrIF.LngWarnSafe.AEBSts, _x.DrvrIF.LngWarnSafe.PcwWarnReq, _x.DrvrIF.LngWarnSafe.AESWarningSts, _x.DrvrIF.LngWarnSafe.AESSts, _x.DrvrIF.LngWarnSafe.RearAEBSts, _x.DrvrIF.NpDrvIF.Textinfo, _x.DrvrIF.NpDrvIF.GoNotifyReq, _x.DrvrIF.NpDrvIF.LnAssiTyp, _x.DrvrIF.NpDrvIF.LnAssiSnvty, _x.DrvrIF.NpDrvIF.LnAstHptcOnOffSts, _x.DrvrIF.NpDrvIF.LnAssistSts, _x.DrvrIF.NpDrvIF.DANADSts, _x.DrvrIF.NpDrvIF.AdasLeLine, _x.DrvrIF.NpDrvIF.AdasRiLine, _x.DrvrIF.NpDrvIF.TurnLightReq, _x.DrvrIF.NpDrvIF.TauGapSet, _x.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch, _x.DrvrIF.NpDrvIF.SetSpeedUnit, _x.DrvrIF.NpDrvIF.DisplaySetSpd, _x.DrvrIF.NpDrvIF.DA_NAD_WTI, _x.DrvrIF.NpDrvIF.ALCSsts, _x.DrvrIF.NpDrvIF.LatCtrlTarLe, _x.DrvrIF.NpDrvIF.LatCtrlTarRi, _x.DrvrIF.NpDrvIF.LongCtrlTar, _x.DrvrIF.NpDrvIF.TauGapChangeDisp, _x.DrvrIF.NpDrvIF.HODsymbol, _x.DrvrIF.NpDrvIF.ELKSts, _x.DrvrIF.NpDrvIF.ESFWarningSts, _x.DrvrIF.NpDrvIF.EASSts, _x.DrvrIF.NpDrvIF.EASWarningLevel, _x.DrvrIF.NpDrvIF.EcallReq, _x.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion, _x.DrvrIF.NpDrvIF.DA_NOP_ALC_Sts, _x.DrvrIF.NpDrvIF.DA_NOP_Avl, _x.DrvrIF.NpDrvIF.DA_LaneChgSupReason, _x.DrvrIF.NpDrvIF.ADCDoorLockReq, _x.DrvrIF.NpDrvIF.DA_NOP_WTIs, _x.DrvrIF.NpDrvIF.DA_iACC_WTIs, _x.DrvrIF.NpDrvIF.DA_Pilot_WTIs, _x.DrvrIF.NpDrvIF.DA_SysFailSymbol, _x.DrvrIF.NpDrvIF.DA_SetSpeedAnimation, _x.DrvrIF.NpDrvIF.DMSIntrvSnvtyReq, _x.DrvrIF.NpDrvIF.DMSFaultInfo, _x.DrvrIF.NpDrvIF.ADBSysErrSts, _x.DrvrIF.NpDrvIF.DA_NopWTI, _x.DrvrIF.CAMCSts.DVRFltSts, _x.DrvrIF.CAMCSts.CAM_FrntFltSts, _x.DrvrIF.CAMCSts.CAM_LeFltSts, _x.DrvrIF.CAMCSts.CAM_ReFltSts, _x.DrvrIF.CAMCSts.CAM_RiFltSts, _x.DrvrIF.ADSysSts.AD_SysSts, _x.DrvrIF.ADSysSts.ADCUSSMode, _x.DrvrIF.ADSysSts.ADCsts, _x.DrvrIF.ADSysSts.ADC_SystemState, _x.DrvrIF.ADSysSts.LidarSts, _x.DrvrIF.ADSysSts.Camera_FrntWideSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_ReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_FrntNarrowSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundFrntSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DrvrIF.DMSIF.DrowsinessLevel, _x.DrvrIF.DMSIF.DrowsinessSts, _x.DrvrIF.DMSIF.DistractionLevel, _x.DrvrIF.DMSIF.DistractionSts, _x.DrvrIF.ADIcsIF.ShowSwtichDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetSWF, _x.DrvrIF.ADIcsIF.ShowSetCHA, _x.DrvrIF.ADIcsIF.ShowSetDA_ALCS, _x.DrvrIF.ADIcsIF.ShowSetDA_SpdAssist, _x.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.DrvrIF.ADIcsIF.ShowSetDA_NOPALC, _x.DrvrIF.ADIcsIF.ShowSetDA_SteerAssist, _x.DrvrIF.ADIcsIF.ShowSet360AP, _x.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.DrvrIF.ADIcsIF.ADC_VehDisp_Warn, _x.DrvrIF.ADIcsIF.ReRADfeatures_FactoryDft, _x.DrvrIF.ADIcsIF.LaneFeautres_FactoryDft, _x.DrvrIF.FuncEDR.LnAssistSts_EDR, _x.DrvrIF.FuncEDR.LnAssiTyp_EDR, _x.DrvrIF.FuncEDR.AdasLeLine_EDR, _x.DrvrIF.FuncEDR.ACSF_B1_Sts_EDR, _x.DrvrIF.FuncEDR.AdasRiLine_EDR, _x.DrvrIF.FuncEDR.ELKSts_EDR, _x.DrvrIF.FuncEDR.ACSF_D_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_B2_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_A_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_C_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_E_Sts_EDR, _x.DrvrIF.FuncEDR.ACCSts_EDR, _x.DrvrIF.FuncEDR.ESFWarningSts_EDR, _x.publish_ptp_ts, _x.crc))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LowSpdFun is None:
        self.LowSpdFun = rospy_message_converter.msg.LowSpdFunInfo()
      if self.Actuator is None:
        self.Actuator = rospy_message_converter.msg.ActuatorIf()
      if self.DrvrIF is None:
        self.DrvrIF = rospy_message_converter.msg.DrvIntractInfo()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.LowSpdFun.ParkSt.PrkgTypSts, _x.LowSpdFun.ParkSt.SAPAOpMode, _x.LowSpdFun.ParkSt.SApaStatus, _x.LowSpdFun.ParkSt.APAReq, _x.LowSpdFun.ParkSt.APASlotTrackID, _x.LowSpdFun.ParkSt.SVCReq, _x.LowSpdFun.ParkSt.SApaDrivingDir,) = _get_struct_4iI2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LowSpdFun.ParkSt.SApaPscSlot = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LowSpdFun.ParkSt.SApaPocSLot = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 76
      (_x.LowSpdFun.ParkSt.SApaInstruction, _x.LowSpdFun.ParkSt.SApaStopDstDisp, _x.LowSpdFun.ParkSt.SVCEDRReq, _x.LowSpdFun.ParkSt.SApaAbortReason, _x.LowSpdFun.ParkSt.SAPATextInfo, _x.LowSpdFun.ParkSt.PSAPOutInstruction, _x.LowSpdFun.ParkSt.PSAPInstruction, _x.LowSpdFun.ParkSt.PsapTextInfo, _x.LowSpdFun.ParkSt.PSAPAbortReason, _x.LowSpdFun.ParkSt.PSAPHMIStatus, _x.LowSpdFun.ParkSt.PSAPDrivingDir, _x.LowSpdFun.ParkSt.PSAPStopDstDisp, _x.LowSpdFun.ParkSt.PSAPOutHMIStatus, _x.LowSpdFun.ParkSt.SApaProgress, _x.LowSpdFun.ParkSt.PrkgActvFeatureTyp, _x.LowSpdFun.SummonSt.NBSInstruction, _x.LowSpdFun.SummonSt.NBSBlkage, _x.LowSpdFun.SummonSt.NBSAbortReason, _x.LowSpdFun.SummonSt.NBSBlkageFrntLe, _x.LowSpdFun.SummonSt.NBSBlkageFrntRi, _x.LowSpdFun.SummonSt.NBSBlkageReLe, _x.LowSpdFun.SummonSt.NBSBlkageReRi,) = _get_struct_iIi2I6iIiIiIiI4B().unpack(str[start:end])
      self.LowSpdFun.SummonSt.NBSBlkageFrntLe = bool(self.LowSpdFun.SummonSt.NBSBlkageFrntLe)
      self.LowSpdFun.SummonSt.NBSBlkageFrntRi = bool(self.LowSpdFun.SummonSt.NBSBlkageFrntRi)
      self.LowSpdFun.SummonSt.NBSBlkageReLe = bool(self.LowSpdFun.SummonSt.NBSBlkageReLe)
      self.LowSpdFun.SummonSt.NBSBlkageReRi = bool(self.LowSpdFun.SummonSt.NBSBlkageReRi)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LowSpdFun.SummonSt.RpsDir_Avail = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 256
      (_x.LowSpdFun.SummonSt.RpsTextInfo, _x.LowSpdFun.SummonSt.RpsSlotSts, _x.LowSpdFun.SummonSt.RpsProgress, _x.LowSpdFun.SummonSt.RpsStandstillReq, _x.LowSpdFun.SummonSt.RpsSts, _x.LowSpdFun.SummonSt.RpsLockUnlckCtrl, _x.LowSpdFun.SummonSt.RpsInstruction, _x.LowSpdFun.SummonSt.RpsAbortReason, _x.Actuator.LngLwSpdCtrl.FctSeln, _x.Actuator.LngLwSpdCtrl.CntrlModReq, _x.Actuator.LngLwSpdCtrl.LLCSt, _x.Actuator.LngLwSpdCtrl.TarGearReq, _x.Actuator.LngLwSpdCtrl.TarSpdKph, _x.Actuator.LngLwSpdCtrl.StopDst, _x.Actuator.LngLwSpdCtrl.ShutdownModReq, _x.Actuator.LngLwSpdCtrl.EPBReq, _x.Actuator.LngLwSpdCtrl.VehDstToVSlot, _x.Actuator.LngLwSpdCtrl.SlopeDstOffset, _x.Actuator.LngLwSpdCtrl.VCU_ObjModTyp, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLonDst, _x.Actuator.LngLwSpdCtrl.VCU_ObjModLatDst, _x.Actuator.LatCtrl.ACIReqVld, _x.Actuator.LatCtrl.ACIReqSAE, _x.Actuator.LatCtrl.ACISafLimAngDyn, _x.Actuator.LatCtrl.ACISafLimAngRM, _x.Actuator.LatCtrl.ACISafLimAngDynOffs, _x.Actuator.LatCtrl.ACISafLimRate, _x.Actuator.LatCtrl.ACIRampRate, _x.Actuator.LatCtrl.ACISafLimAngLM, _x.Actuator.LatCtrl.ACISafLimMode, _x.Actuator.LatCtrl.CTIReqVal, _x.Actuator.LatCtrl.CTIReqSAE, _x.Actuator.LatCtrl.StrIFReq, _x.Actuator.LatCtrl.HVIReq, _x.Actuator.LatCtrl.HVIReqVld, _x.Actuator.LatCtrl.ACITsuSup, _x.Actuator.LatCtrl.ACIOvrdThr, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq, _x.Actuator.LngCtrlEmrgnc.AEBTarDecel, _x.Actuator.LngCtrlEmrgnc.EBADecelReq, _x.Actuator.LngCtrlEmrgnc.ABPReq, _x.Actuator.LngCtrlEmrgnc.AWBSnvtyLvl, _x.Actuator.LngCtrlEmrgnc.AWBReq, _x.Actuator.LngCtrlEmrgnc.ABASnvtyLvl, _x.Actuator.LngCtrlEmrgnc.ABAReq, _x.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.Actuator.LngCtrlCmfrt.VLCReqFct, _x.Actuator.LngCtrlCmfrt.VLCMode, _x.Actuator.LngCtrlCmfrt.VLCTarA, _x.Actuator.LngCtrlCmfrt.VLCMinJerkA, _x.Actuator.LngCtrlCmfrt.VLCMaxJerkA, _x.Actuator.LngCtrlCmfrt.VLCDrvOffReq, _x.Actuator.LngCtrlCmfrt.VLCDecToStopReq, _x.Actuator.LngCtrlCmfrt.VLCShutdownModReq, _x.Actuator.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.Actuator.VehModMng.ADDrvTypReq, _x.Actuator.VehModMng.DDMReq, _x.Actuator.SafetyState.SafetyState1, _x.Actuator.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.Actuator.BodyCtrlIf.ADCWiperCtrl, _x.Actuator.BodyCtrlIf.WSHeatReq, _x.Actuator.BodyCtrlIf.WSHeatReqValid, _x.DrvrIF.SpdDispAndCfg.SAS_SLIF_State, _x.DrvrIF.SpdDispAndCfg.SAS_SLWF_WarnTrigger, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitTakeover, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit, _x.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitValue, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute, _x.DrvrIF.SpdDispAndCfg.SAS_SupSignType, _x.DrvrIF.SpdDispAndCfg.SAS_LocalHzrd, _x.DrvrIF.SpdDispAndCfg.SAS_RdFtrWarnSign, _x.DrvrIF.SpdDispAndCfg.SAS_TrffcLghtSts, _x.DrvrIF.SdowBSD.SDOWOnOffSts, _x.DrvrIF.SdowBSD.LCAHapticOnOffSts, _x.DrvrIF.SdowBSD.BSDLCAOnOffSts,) = _get_struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B().unpack(str[start:end])
      self.LowSpdFun.SummonSt.RpsStandstillReq = bool(self.LowSpdFun.SummonSt.RpsStandstillReq)
      self.Actuator.LngCtrlEmrgnc.AEBDecelReq = bool(self.Actuator.LngCtrlEmrgnc.AEBDecelReq)
      self.Actuator.LngCtrlEmrgnc.EBADecelReq = bool(self.Actuator.LngCtrlEmrgnc.EBADecelReq)
      self.Actuator.LngCtrlEmrgnc.ABPReq = bool(self.Actuator.LngCtrlEmrgnc.ABPReq)
      self.Actuator.LngCtrlEmrgnc.AWBReq = bool(self.Actuator.LngCtrlEmrgnc.AWBReq)
      self.Actuator.LngCtrlEmrgnc.ABAReq = bool(self.Actuator.LngCtrlEmrgnc.ABAReq)
      self.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR = bool(self.Actuator.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR)
      self.Actuator.LngCtrlCmfrt.VLCDrvOffReq = bool(self.Actuator.LngCtrlCmfrt.VLCDrvOffReq)
      self.Actuator.LngCtrlCmfrt.VLCDecToStopReq = bool(self.Actuator.LngCtrlCmfrt.VLCDecToStopReq)
      self.Actuator.BodyCtrlIf.WSHeatReq = bool(self.Actuator.BodyCtrlIf.WSHeatReq)
      self.Actuator.BodyCtrlIf.WSHeatReqValid = bool(self.Actuator.BodyCtrlIf.WSHeatReqValid)
      self.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit = bool(self.DrvrIF.SpdDispAndCfg.SAS_SpeedLimitUnit)
      self.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute = bool(self.DrvrIF.SpdDispAndCfg.SAS_SupSignAttribute)
      self.DrvrIF.SdowBSD.SDOWOnOffSts = bool(self.DrvrIF.SdowBSD.SDOWOnOffSts)
      self.DrvrIF.SdowBSD.LCAHapticOnOffSts = bool(self.DrvrIF.SdowBSD.LCAHapticOnOffSts)
      self.DrvrIF.SdowBSD.BSDLCAOnOffSts = bool(self.DrvrIF.SdowBSD.BSDLCAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.SDOWWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.DrvrIF.SdowBSD.ExtReqRAD_RR,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.SDOWWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.BSDLCASts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.BSDLCAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.SdowBSD.FrntRSDSDisp = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 17
      (_x.DrvrIF.SdowBSD.ReRiRSDSDisp, _x.DrvrIF.CTAWarn.FCTAOnOffSts, _x.DrvrIF.CTAWarn.RCTAOnOffSts, _x.DrvrIF.CTAWarn.FCTASts, _x.DrvrIF.CTAWarn.RCTABrkSts,) = _get_struct_2iB2i().unpack(str[start:end])
      self.DrvrIF.CTAWarn.RCTAOnOffSts = bool(self.DrvrIF.CTAWarn.RCTAOnOffSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.CTAFrntWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.CTAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.RCTAWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.CTAWarn.FCTAWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 9
      (_x.DrvrIF.CTAWarn.RCTABOnOffSts, _x.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq, _x.DrvrIF.BodyCtrl.LightIf.HMASts,) = _get_struct_iBi().unpack(str[start:end])
      self.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq = bool(self.DrvrIF.BodyCtrl.LightIf.HMAHiBeamReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DrvrIF.BodyCtrl.LightIf.MirrLightReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 360
      (_x.DrvrIF.BodyCtrl.DoorUnlckReq, _x.DrvrIF.BodyCtrl.RemLogSts, _x.DrvrIF.BodyCtrl.HornCtrlReq, _x.DrvrIF.BodyCtrl.ECOPlusModReqSts, _x.DrvrIF.LngWarnSafe.FCWSetSts, _x.DrvrIF.LngWarnSafe.AEBSts, _x.DrvrIF.LngWarnSafe.PcwWarnReq, _x.DrvrIF.LngWarnSafe.AESWarningSts, _x.DrvrIF.LngWarnSafe.AESSts, _x.DrvrIF.LngWarnSafe.RearAEBSts, _x.DrvrIF.NpDrvIF.Textinfo, _x.DrvrIF.NpDrvIF.GoNotifyReq, _x.DrvrIF.NpDrvIF.LnAssiTyp, _x.DrvrIF.NpDrvIF.LnAssiSnvty, _x.DrvrIF.NpDrvIF.LnAstHptcOnOffSts, _x.DrvrIF.NpDrvIF.LnAssistSts, _x.DrvrIF.NpDrvIF.DANADSts, _x.DrvrIF.NpDrvIF.AdasLeLine, _x.DrvrIF.NpDrvIF.AdasRiLine, _x.DrvrIF.NpDrvIF.TurnLightReq, _x.DrvrIF.NpDrvIF.TauGapSet, _x.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch, _x.DrvrIF.NpDrvIF.SetSpeedUnit, _x.DrvrIF.NpDrvIF.DisplaySetSpd, _x.DrvrIF.NpDrvIF.DA_NAD_WTI, _x.DrvrIF.NpDrvIF.ALCSsts, _x.DrvrIF.NpDrvIF.LatCtrlTarLe, _x.DrvrIF.NpDrvIF.LatCtrlTarRi, _x.DrvrIF.NpDrvIF.LongCtrlTar, _x.DrvrIF.NpDrvIF.TauGapChangeDisp, _x.DrvrIF.NpDrvIF.HODsymbol, _x.DrvrIF.NpDrvIF.ELKSts, _x.DrvrIF.NpDrvIF.ESFWarningSts, _x.DrvrIF.NpDrvIF.EASSts, _x.DrvrIF.NpDrvIF.EASWarningLevel, _x.DrvrIF.NpDrvIF.EcallReq, _x.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion, _x.DrvrIF.NpDrvIF.DA_NOP_ALC_Sts, _x.DrvrIF.NpDrvIF.DA_NOP_Avl, _x.DrvrIF.NpDrvIF.DA_LaneChgSupReason, _x.DrvrIF.NpDrvIF.ADCDoorLockReq, _x.DrvrIF.NpDrvIF.DA_NOP_WTIs, _x.DrvrIF.NpDrvIF.DA_iACC_WTIs, _x.DrvrIF.NpDrvIF.DA_Pilot_WTIs, _x.DrvrIF.NpDrvIF.DA_SysFailSymbol, _x.DrvrIF.NpDrvIF.DA_SetSpeedAnimation, _x.DrvrIF.NpDrvIF.DMSIntrvSnvtyReq, _x.DrvrIF.NpDrvIF.DMSFaultInfo, _x.DrvrIF.NpDrvIF.ADBSysErrSts, _x.DrvrIF.NpDrvIF.DA_NopWTI, _x.DrvrIF.CAMCSts.DVRFltSts, _x.DrvrIF.CAMCSts.CAM_FrntFltSts, _x.DrvrIF.CAMCSts.CAM_LeFltSts, _x.DrvrIF.CAMCSts.CAM_ReFltSts, _x.DrvrIF.CAMCSts.CAM_RiFltSts, _x.DrvrIF.ADSysSts.AD_SysSts, _x.DrvrIF.ADSysSts.ADCUSSMode, _x.DrvrIF.ADSysSts.ADCsts, _x.DrvrIF.ADSysSts.ADC_SystemState, _x.DrvrIF.ADSysSts.LidarSts, _x.DrvrIF.ADSysSts.Camera_FrntWideSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_ReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReRiSts, _x.DrvrIF.ADSysSts.SnsrCamera_FrntNarrowSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideReLeSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundFrntSts, _x.DrvrIF.ADSysSts.SnsrCamera_SurroundReSts, _x.DrvrIF.ADSysSts.SnsrCamera_SideFrntLeSts, _x.DrvrIF.DMSIF.DrowsinessLevel, _x.DrvrIF.DMSIF.DrowsinessSts, _x.DrvrIF.DMSIF.DistractionLevel, _x.DrvrIF.DMSIF.DistractionSts, _x.DrvrIF.ADIcsIF.ShowSwtichDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetDA_NOP, _x.DrvrIF.ADIcsIF.ShowSetSWF, _x.DrvrIF.ADIcsIF.ShowSetCHA, _x.DrvrIF.ADIcsIF.ShowSetDA_ALCS, _x.DrvrIF.ADIcsIF.ShowSetDA_SpdAssist, _x.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl, _x.DrvrIF.ADIcsIF.ShowSetDA_NOPALC, _x.DrvrIF.ADIcsIF.ShowSetDA_SteerAssist, _x.DrvrIF.ADIcsIF.ShowSet360AP, _x.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist, _x.DrvrIF.ADIcsIF.ADC_VehDisp_Warn, _x.DrvrIF.ADIcsIF.ReRADfeatures_FactoryDft, _x.DrvrIF.ADIcsIF.LaneFeautres_FactoryDft, _x.DrvrIF.FuncEDR.LnAssistSts_EDR, _x.DrvrIF.FuncEDR.LnAssiTyp_EDR, _x.DrvrIF.FuncEDR.AdasLeLine_EDR, _x.DrvrIF.FuncEDR.ACSF_B1_Sts_EDR, _x.DrvrIF.FuncEDR.AdasRiLine_EDR, _x.DrvrIF.FuncEDR.ELKSts_EDR, _x.DrvrIF.FuncEDR.ACSF_D_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_B2_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_A_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_C_Sts_EDR, _x.DrvrIF.FuncEDR.ACSF_E_Sts_EDR, _x.DrvrIF.FuncEDR.ACCSts_EDR, _x.DrvrIF.FuncEDR.ESFWarningSts_EDR, _x.publish_ptp_ts, _x.crc,) = _get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI().unpack(str[start:end])
      self.DrvrIF.BodyCtrl.ECOPlusModReqSts = bool(self.DrvrIF.BodyCtrl.ECOPlusModReqSts)
      self.DrvrIF.NpDrvIF.LnAstHptcOnOffSts = bool(self.DrvrIF.NpDrvIF.LnAstHptcOnOffSts)
      self.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch = bool(self.DrvrIF.NpDrvIF.DisplaySetSpeedSwtch)
      self.DrvrIF.NpDrvIF.SetSpeedUnit = bool(self.DrvrIF.NpDrvIF.SetSpeedUnit)
      self.DrvrIF.NpDrvIF.LongCtrlTar = bool(self.DrvrIF.NpDrvIF.LongCtrlTar)
      self.DrvrIF.NpDrvIF.EcallReq = bool(self.DrvrIF.NpDrvIF.EcallReq)
      self.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion = bool(self.DrvrIF.NpDrvIF.DA_FreeSpaceIntrusion)
      self.DrvrIF.NpDrvIF.DA_SysFailSymbol = bool(self.DrvrIF.NpDrvIF.DA_SysFailSymbol)
      self.DrvrIF.CAMCSts.DVRFltSts = bool(self.DrvrIF.CAMCSts.DVRFltSts)
      self.DrvrIF.CAMCSts.CAM_FrntFltSts = bool(self.DrvrIF.CAMCSts.CAM_FrntFltSts)
      self.DrvrIF.CAMCSts.CAM_LeFltSts = bool(self.DrvrIF.CAMCSts.CAM_LeFltSts)
      self.DrvrIF.CAMCSts.CAM_ReFltSts = bool(self.DrvrIF.CAMCSts.CAM_ReFltSts)
      self.DrvrIF.CAMCSts.CAM_RiFltSts = bool(self.DrvrIF.CAMCSts.CAM_RiFltSts)
      self.DrvrIF.ADIcsIF.ShowSwtichDA_NOP = bool(self.DrvrIF.ADIcsIF.ShowSwtichDA_NOP)
      self.DrvrIF.ADIcsIF.ShowSetDA_NOP = bool(self.DrvrIF.ADIcsIF.ShowSetDA_NOP)
      self.DrvrIF.ADIcsIF.ShowSetDA_ALCS = bool(self.DrvrIF.ADIcsIF.ShowSetDA_ALCS)
      self.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl = bool(self.DrvrIF.ADIcsIF.ShowSetDA_SetSpdCtrl)
      self.DrvrIF.ADIcsIF.ShowSet360AP = bool(self.DrvrIF.ADIcsIF.ShowSet360AP)
      self.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist = bool(self.DrvrIF.ADIcsIF.ShowSetDA_CurveSpdAssist)
      self.DrvrIF.ADIcsIF.ADC_VehDisp_Warn = bool(self.DrvrIF.ADIcsIF.ADC_VehDisp_Warn)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2iB2i = None
def _get_struct_2iB2i():
    global _struct_2iB2i
    if _struct_2iB2i is None:
        _struct_2iB2i = struct.Struct("<2iB2i")
    return _struct_2iB2i
_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI = None
def _get_struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI():
    global _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI
    if _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI is None:
        _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI = struct.Struct("<3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI")
    return _struct_3iB6iI3iB6i2B3I2iB6i2BIiIi3IB4iI5BI19i2B2iBIB2I3B15iQI
_struct_4iI2i = None
def _get_struct_4iI2i():
    global _struct_4iI2i
    if _struct_4iI2i is None:
        _struct_4iI2i = struct.Struct("<4iI2i")
    return _struct_4iI2i
_struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B = None
def _get_struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B():
    global _struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B
    if _struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B is None:
        _struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B = struct.Struct("<IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B")
    return _struct_IiIB3iI4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B4iBIB4I3B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iBi = None
def _get_struct_iBi():
    global _struct_iBi
    if _struct_iBi is None:
        _struct_iBi = struct.Struct("<iBi")
    return _struct_iBi
_struct_iIi2I6iIiIiIiI4B = None
def _get_struct_iIi2I6iIiIiIiI4B():
    global _struct_iIi2I6iIiIiIiI4B
    if _struct_iIi2I6iIiIiIiI4B is None:
        _struct_iIi2I6iIiIiIiI4B = struct.Struct("<iIi2I6iIiIiIiI4B")
    return _struct_iIi2I6iIiIiIiI4B

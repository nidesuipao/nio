# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/Interface_DebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Interface_DebugOut(genpy.Message):
  _md5sum = "a107ae82adb54247f3a205e150b325aa"
  _type = "rospy_message_converter/Interface_DebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 Interface_VEH10ms_state
int32 Interface_VEH50ms_state
int32 Interface_SVCPerception_state
int32 Interface_PsapStationInfo_state
int32 Interface_SemanticMap_state
int32 Interface_PVATResult_state
int32 Interface_StateMachine_state
int32 Interface_ParFusedLocation_state
bool Interface_is_publish_odom
bool Interface_is_publish_psap_result
bool Interface_is_publish_sapa_result
"""
  __slots__ = ['Interface_VEH10ms_state','Interface_VEH50ms_state','Interface_SVCPerception_state','Interface_PsapStationInfo_state','Interface_SemanticMap_state','Interface_PVATResult_state','Interface_StateMachine_state','Interface_ParFusedLocation_state','Interface_is_publish_odom','Interface_is_publish_psap_result','Interface_is_publish_sapa_result']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Interface_VEH10ms_state,Interface_VEH50ms_state,Interface_SVCPerception_state,Interface_PsapStationInfo_state,Interface_SemanticMap_state,Interface_PVATResult_state,Interface_StateMachine_state,Interface_ParFusedLocation_state,Interface_is_publish_odom,Interface_is_publish_psap_result,Interface_is_publish_sapa_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Interface_DebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Interface_VEH10ms_state is None:
        self.Interface_VEH10ms_state = 0
      if self.Interface_VEH50ms_state is None:
        self.Interface_VEH50ms_state = 0
      if self.Interface_SVCPerception_state is None:
        self.Interface_SVCPerception_state = 0
      if self.Interface_PsapStationInfo_state is None:
        self.Interface_PsapStationInfo_state = 0
      if self.Interface_SemanticMap_state is None:
        self.Interface_SemanticMap_state = 0
      if self.Interface_PVATResult_state is None:
        self.Interface_PVATResult_state = 0
      if self.Interface_StateMachine_state is None:
        self.Interface_StateMachine_state = 0
      if self.Interface_ParFusedLocation_state is None:
        self.Interface_ParFusedLocation_state = 0
      if self.Interface_is_publish_odom is None:
        self.Interface_is_publish_odom = False
      if self.Interface_is_publish_psap_result is None:
        self.Interface_is_publish_psap_result = False
      if self.Interface_is_publish_sapa_result is None:
        self.Interface_is_publish_sapa_result = False
    else:
      self.Interface_VEH10ms_state = 0
      self.Interface_VEH50ms_state = 0
      self.Interface_SVCPerception_state = 0
      self.Interface_PsapStationInfo_state = 0
      self.Interface_SemanticMap_state = 0
      self.Interface_PVATResult_state = 0
      self.Interface_StateMachine_state = 0
      self.Interface_ParFusedLocation_state = 0
      self.Interface_is_publish_odom = False
      self.Interface_is_publish_psap_result = False
      self.Interface_is_publish_sapa_result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8i3B().pack(_x.Interface_VEH10ms_state, _x.Interface_VEH50ms_state, _x.Interface_SVCPerception_state, _x.Interface_PsapStationInfo_state, _x.Interface_SemanticMap_state, _x.Interface_PVATResult_state, _x.Interface_StateMachine_state, _x.Interface_ParFusedLocation_state, _x.Interface_is_publish_odom, _x.Interface_is_publish_psap_result, _x.Interface_is_publish_sapa_result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.Interface_VEH10ms_state, _x.Interface_VEH50ms_state, _x.Interface_SVCPerception_state, _x.Interface_PsapStationInfo_state, _x.Interface_SemanticMap_state, _x.Interface_PVATResult_state, _x.Interface_StateMachine_state, _x.Interface_ParFusedLocation_state, _x.Interface_is_publish_odom, _x.Interface_is_publish_psap_result, _x.Interface_is_publish_sapa_result,) = _get_struct_8i3B().unpack(str[start:end])
      self.Interface_is_publish_odom = bool(self.Interface_is_publish_odom)
      self.Interface_is_publish_psap_result = bool(self.Interface_is_publish_psap_result)
      self.Interface_is_publish_sapa_result = bool(self.Interface_is_publish_sapa_result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8i3B().pack(_x.Interface_VEH10ms_state, _x.Interface_VEH50ms_state, _x.Interface_SVCPerception_state, _x.Interface_PsapStationInfo_state, _x.Interface_SemanticMap_state, _x.Interface_PVATResult_state, _x.Interface_StateMachine_state, _x.Interface_ParFusedLocation_state, _x.Interface_is_publish_odom, _x.Interface_is_publish_psap_result, _x.Interface_is_publish_sapa_result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.Interface_VEH10ms_state, _x.Interface_VEH50ms_state, _x.Interface_SVCPerception_state, _x.Interface_PsapStationInfo_state, _x.Interface_SemanticMap_state, _x.Interface_PVATResult_state, _x.Interface_StateMachine_state, _x.Interface_ParFusedLocation_state, _x.Interface_is_publish_odom, _x.Interface_is_publish_psap_result, _x.Interface_is_publish_sapa_result,) = _get_struct_8i3B().unpack(str[start:end])
      self.Interface_is_publish_odom = bool(self.Interface_is_publish_odom)
      self.Interface_is_publish_psap_result = bool(self.Interface_is_publish_psap_result)
      self.Interface_is_publish_sapa_result = bool(self.Interface_is_publish_sapa_result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8i3B = None
def _get_struct_8i3B():
    global _struct_8i3B
    if _struct_8i3B is None:
        _struct_8i3B = struct.Struct("<8i3B")
    return _struct_8i3B

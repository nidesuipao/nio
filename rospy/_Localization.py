# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/Localization.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class Localization(genpy.Message):
  _md5sum = "db0481965f016117394256e433683458"
  _type = "rospy_message_converter/Localization"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 time
LocalizationPose pose
float64[] pose_covariance
float64 pose_confidence
LocalizationVelocity velocity
float64[] velocity_covariance
float64 velocity_confidence
LocalizationPose global_pose
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LocalizationPose
float64 x
float64 y
float64 z
float64 roll
float64 yaw
float64 pitch

================================================================================
MSG: rospy_message_converter/LocalizationVelocity
float64 x
float64 y
float64 z
"""
  __slots__ = ['time','pose','pose_covariance','pose_confidence','velocity','velocity_covariance','velocity_confidence','global_pose','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['float64','rospy_message_converter/LocalizationPose','float64[]','float64','rospy_message_converter/LocalizationVelocity','float64[]','float64','rospy_message_converter/LocalizationPose','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,pose,pose_covariance,pose_confidence,velocity,velocity_covariance,velocity_confidence,global_pose,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Localization, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.pose is None:
        self.pose = rospy_message_converter.msg.LocalizationPose()
      if self.pose_covariance is None:
        self.pose_covariance = []
      if self.pose_confidence is None:
        self.pose_confidence = 0.
      if self.velocity is None:
        self.velocity = rospy_message_converter.msg.LocalizationVelocity()
      if self.velocity_covariance is None:
        self.velocity_covariance = []
      if self.velocity_confidence is None:
        self.velocity_confidence = 0.
      if self.global_pose is None:
        self.global_pose = rospy_message_converter.msg.LocalizationPose()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.time = 0.
      self.pose = rospy_message_converter.msg.LocalizationPose()
      self.pose_covariance = []
      self.pose_confidence = 0.
      self.velocity = rospy_message_converter.msg.LocalizationVelocity()
      self.velocity_covariance = []
      self.velocity_confidence = 0.
      self.global_pose = rospy_message_converter.msg.LocalizationPose()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.time, _x.pose.x, _x.pose.y, _x.pose.z, _x.pose.roll, _x.pose.yaw, _x.pose.pitch))
      length = len(self.pose_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pose_covariance))
      _x = self
      buff.write(_get_struct_4d().pack(_x.pose_confidence, _x.velocity.x, _x.velocity.y, _x.velocity.z))
      length = len(self.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.velocity_covariance))
      _x = self
      buff.write(_get_struct_7dQ().pack(_x.velocity_confidence, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.global_pose.roll, _x.global_pose.yaw, _x.global_pose.pitch, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = rospy_message_converter.msg.LocalizationPose()
      if self.velocity is None:
        self.velocity = rospy_message_converter.msg.LocalizationVelocity()
      if self.global_pose is None:
        self.global_pose = rospy_message_converter.msg.LocalizationPose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.time, _x.pose.x, _x.pose.y, _x.pose.z, _x.pose.roll, _x.pose.yaw, _x.pose.pitch,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_covariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.pose_confidence, _x.velocity.x, _x.velocity.y, _x.velocity.z,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_covariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 64
      (_x.velocity_confidence, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.global_pose.roll, _x.global_pose.yaw, _x.global_pose.pitch, _x.publish_ptp_ts,) = _get_struct_7dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.time, _x.pose.x, _x.pose.y, _x.pose.z, _x.pose.roll, _x.pose.yaw, _x.pose.pitch))
      length = len(self.pose_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pose_covariance.tostring())
      _x = self
      buff.write(_get_struct_4d().pack(_x.pose_confidence, _x.velocity.x, _x.velocity.y, _x.velocity.z))
      length = len(self.velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_7dQ().pack(_x.velocity_confidence, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.global_pose.roll, _x.global_pose.yaw, _x.global_pose.pitch, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = rospy_message_converter.msg.LocalizationPose()
      if self.velocity is None:
        self.velocity = rospy_message_converter.msg.LocalizationVelocity()
      if self.global_pose is None:
        self.global_pose = rospy_message_converter.msg.LocalizationPose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.time, _x.pose.x, _x.pose.y, _x.pose.z, _x.pose.roll, _x.pose.yaw, _x.pose.pitch,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pose_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.pose_confidence, _x.velocity.x, _x.velocity.y, _x.velocity.z,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 64
      (_x.velocity_confidence, _x.global_pose.x, _x.global_pose.y, _x.global_pose.z, _x.global_pose.roll, _x.global_pose.yaw, _x.global_pose.pitch, _x.publish_ptp_ts,) = _get_struct_7dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7dQ = None
def _get_struct_7dQ():
    global _struct_7dQ
    if _struct_7dQ is None:
        _struct_7dQ = struct.Struct("<7dQ")
    return _struct_7dQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DMS_EyeStatusResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DMS_EyeStatusResult(genpy.Message):
  _md5sum = "f0ccaec151aab1fa51d72039462ddbab"
  _type = "rospy_message_converter/DMS_EyeStatusResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 left_eye
float32 left_open_confidence
float32 left_visible_percent
DMSVector left_eye_gaze_vector
DMSPosition3f left_eye_position
int32 right_eye
float32 right_open_confidence
float32 right_visible_percent
DMSVector right_eye_gaze_vector
DMSPosition3f right_eye_position

================================================================================
MSG: rospy_message_converter/DMSVector
bool is_valid
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/DMSPosition3f
bool is_valid
float32 x
float32 y
float32 z
"""
  __slots__ = ['left_eye','left_open_confidence','left_visible_percent','left_eye_gaze_vector','left_eye_position','right_eye','right_open_confidence','right_visible_percent','right_eye_gaze_vector','right_eye_position']
  _slot_types = ['int32','float32','float32','rospy_message_converter/DMSVector','rospy_message_converter/DMSPosition3f','int32','float32','float32','rospy_message_converter/DMSVector','rospy_message_converter/DMSPosition3f']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_eye,left_open_confidence,left_visible_percent,left_eye_gaze_vector,left_eye_position,right_eye,right_open_confidence,right_visible_percent,right_eye_gaze_vector,right_eye_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DMS_EyeStatusResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_eye is None:
        self.left_eye = 0
      if self.left_open_confidence is None:
        self.left_open_confidence = 0.
      if self.left_visible_percent is None:
        self.left_visible_percent = 0.
      if self.left_eye_gaze_vector is None:
        self.left_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      if self.left_eye_position is None:
        self.left_eye_position = rospy_message_converter.msg.DMSPosition3f()
      if self.right_eye is None:
        self.right_eye = 0
      if self.right_open_confidence is None:
        self.right_open_confidence = 0.
      if self.right_visible_percent is None:
        self.right_visible_percent = 0.
      if self.right_eye_gaze_vector is None:
        self.right_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      if self.right_eye_position is None:
        self.right_eye_position = rospy_message_converter.msg.DMSPosition3f()
    else:
      self.left_eye = 0
      self.left_open_confidence = 0.
      self.left_visible_percent = 0.
      self.left_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      self.left_eye_position = rospy_message_converter.msg.DMSPosition3f()
      self.right_eye = 0
      self.right_open_confidence = 0.
      self.right_visible_percent = 0.
      self.right_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      self.right_eye_position = rospy_message_converter.msg.DMSPosition3f()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2fB3fB3fi2fB3fB3f().pack(_x.left_eye, _x.left_open_confidence, _x.left_visible_percent, _x.left_eye_gaze_vector.is_valid, _x.left_eye_gaze_vector.x, _x.left_eye_gaze_vector.y, _x.left_eye_gaze_vector.z, _x.left_eye_position.is_valid, _x.left_eye_position.x, _x.left_eye_position.y, _x.left_eye_position.z, _x.right_eye, _x.right_open_confidence, _x.right_visible_percent, _x.right_eye_gaze_vector.is_valid, _x.right_eye_gaze_vector.x, _x.right_eye_gaze_vector.y, _x.right_eye_gaze_vector.z, _x.right_eye_position.is_valid, _x.right_eye_position.x, _x.right_eye_position.y, _x.right_eye_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_eye_gaze_vector is None:
        self.left_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      if self.left_eye_position is None:
        self.left_eye_position = rospy_message_converter.msg.DMSPosition3f()
      if self.right_eye_gaze_vector is None:
        self.right_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      if self.right_eye_position is None:
        self.right_eye_position = rospy_message_converter.msg.DMSPosition3f()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.left_eye, _x.left_open_confidence, _x.left_visible_percent, _x.left_eye_gaze_vector.is_valid, _x.left_eye_gaze_vector.x, _x.left_eye_gaze_vector.y, _x.left_eye_gaze_vector.z, _x.left_eye_position.is_valid, _x.left_eye_position.x, _x.left_eye_position.y, _x.left_eye_position.z, _x.right_eye, _x.right_open_confidence, _x.right_visible_percent, _x.right_eye_gaze_vector.is_valid, _x.right_eye_gaze_vector.x, _x.right_eye_gaze_vector.y, _x.right_eye_gaze_vector.z, _x.right_eye_position.is_valid, _x.right_eye_position.x, _x.right_eye_position.y, _x.right_eye_position.z,) = _get_struct_i2fB3fB3fi2fB3fB3f().unpack(str[start:end])
      self.left_eye_gaze_vector.is_valid = bool(self.left_eye_gaze_vector.is_valid)
      self.left_eye_position.is_valid = bool(self.left_eye_position.is_valid)
      self.right_eye_gaze_vector.is_valid = bool(self.right_eye_gaze_vector.is_valid)
      self.right_eye_position.is_valid = bool(self.right_eye_position.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2fB3fB3fi2fB3fB3f().pack(_x.left_eye, _x.left_open_confidence, _x.left_visible_percent, _x.left_eye_gaze_vector.is_valid, _x.left_eye_gaze_vector.x, _x.left_eye_gaze_vector.y, _x.left_eye_gaze_vector.z, _x.left_eye_position.is_valid, _x.left_eye_position.x, _x.left_eye_position.y, _x.left_eye_position.z, _x.right_eye, _x.right_open_confidence, _x.right_visible_percent, _x.right_eye_gaze_vector.is_valid, _x.right_eye_gaze_vector.x, _x.right_eye_gaze_vector.y, _x.right_eye_gaze_vector.z, _x.right_eye_position.is_valid, _x.right_eye_position.x, _x.right_eye_position.y, _x.right_eye_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_eye_gaze_vector is None:
        self.left_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      if self.left_eye_position is None:
        self.left_eye_position = rospy_message_converter.msg.DMSPosition3f()
      if self.right_eye_gaze_vector is None:
        self.right_eye_gaze_vector = rospy_message_converter.msg.DMSVector()
      if self.right_eye_position is None:
        self.right_eye_position = rospy_message_converter.msg.DMSPosition3f()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.left_eye, _x.left_open_confidence, _x.left_visible_percent, _x.left_eye_gaze_vector.is_valid, _x.left_eye_gaze_vector.x, _x.left_eye_gaze_vector.y, _x.left_eye_gaze_vector.z, _x.left_eye_position.is_valid, _x.left_eye_position.x, _x.left_eye_position.y, _x.left_eye_position.z, _x.right_eye, _x.right_open_confidence, _x.right_visible_percent, _x.right_eye_gaze_vector.is_valid, _x.right_eye_gaze_vector.x, _x.right_eye_gaze_vector.y, _x.right_eye_gaze_vector.z, _x.right_eye_position.is_valid, _x.right_eye_position.x, _x.right_eye_position.y, _x.right_eye_position.z,) = _get_struct_i2fB3fB3fi2fB3fB3f().unpack(str[start:end])
      self.left_eye_gaze_vector.is_valid = bool(self.left_eye_gaze_vector.is_valid)
      self.left_eye_position.is_valid = bool(self.left_eye_position.is_valid)
      self.right_eye_gaze_vector.is_valid = bool(self.right_eye_gaze_vector.is_valid)
      self.right_eye_position.is_valid = bool(self.right_eye_position.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2fB3fB3fi2fB3fB3f = None
def _get_struct_i2fB3fB3fi2fB3fB3f():
    global _struct_i2fB3fB3fi2fB3fB3f
    if _struct_i2fB3fB3fi2fB3fB3f is None:
        _struct_i2fB3fB3fi2fB3fB3f = struct.Struct("<i2fB3fB3fi2fB3fB3f")
    return _struct_i2fB3fB3fi2fB3fB3f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LidarObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LidarObject(genpy.Message):
  _md5sum = "bdf735776c998023edbdebf87d9f1109"
  _type = "rospy_message_converter/LidarObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 sensor_id
uint32 object_id
int32 class_type
float32 x
float32 y
float32 z
float32 width
float32 height
float32 length
float32 yaw
float32 score
float32 second_return_ration
float32 high_reflection_ration
float32[] statistics_feature
"""
  __slots__ = ['sensor_id','object_id','class_type','x','y','z','width','height','length','yaw','score','second_return_ration','high_reflection_ration','statistics_feature']
  _slot_types = ['uint32','uint32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor_id,object_id,class_type,x,y,z,width,height,length,yaw,score,second_return_ration,high_reflection_ration,statistics_feature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LidarObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.object_id is None:
        self.object_id = 0
      if self.class_type is None:
        self.class_type = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.length is None:
        self.length = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.score is None:
        self.score = 0.
      if self.second_return_ration is None:
        self.second_return_ration = 0.
      if self.high_reflection_ration is None:
        self.high_reflection_ration = 0.
      if self.statistics_feature is None:
        self.statistics_feature = []
    else:
      self.sensor_id = 0
      self.object_id = 0
      self.class_type = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.width = 0.
      self.height = 0.
      self.length = 0.
      self.yaw = 0.
      self.score = 0.
      self.second_return_ration = 0.
      self.high_reflection_ration = 0.
      self.statistics_feature = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii10f().pack(_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration))
      length = len(self.statistics_feature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statistics_feature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration,) = _get_struct_2Ii10f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statistics_feature = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ii10f().pack(_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration))
      length = len(self.statistics_feature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statistics_feature.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration,) = _get_struct_2Ii10f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statistics_feature = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Ii10f = None
def _get_struct_2Ii10f():
    global _struct_2Ii10f
    if _struct_2Ii10f is None:
        _struct_2Ii10f = struct.Struct("<2Ii10f")
    return _struct_2Ii10f

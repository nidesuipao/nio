# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AEBFlagOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AEBFlagOut(genpy.Message):
  _md5sum = "9513aa0419ab4578aaa3cda47e1c9a3b"
  _type = "rospy_message_converter/AEBFlagOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 VD_Pattern_SetA
uint32 VD_Pattern_SetB
uint32 VD_Pattern_SetC
uint32 VD_Pattern_SetD
uint32 VD_Pattern_SetE
uint32 VD_Pattern_SetF
uint32 VD_Pattern_SetG
uint32 PD_Pattern_SetA
uint32 PD_Pattern_SetB
uint32 PD_Pattern_SetC
uint32 PD_Pattern_SetD
uint32 PD_Pattern_SetE
uint32 PD_Pattern_SetF
uint32 PD_Pattern_SetG
int32 VD_class
int32 PD_class
"""
  __slots__ = ['VD_Pattern_SetA','VD_Pattern_SetB','VD_Pattern_SetC','VD_Pattern_SetD','VD_Pattern_SetE','VD_Pattern_SetF','VD_Pattern_SetG','PD_Pattern_SetA','PD_Pattern_SetB','PD_Pattern_SetC','PD_Pattern_SetD','PD_Pattern_SetE','PD_Pattern_SetF','PD_Pattern_SetG','VD_class','PD_class']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VD_Pattern_SetA,VD_Pattern_SetB,VD_Pattern_SetC,VD_Pattern_SetD,VD_Pattern_SetE,VD_Pattern_SetF,VD_Pattern_SetG,PD_Pattern_SetA,PD_Pattern_SetB,PD_Pattern_SetC,PD_Pattern_SetD,PD_Pattern_SetE,PD_Pattern_SetF,PD_Pattern_SetG,VD_class,PD_class

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AEBFlagOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VD_Pattern_SetA is None:
        self.VD_Pattern_SetA = 0
      if self.VD_Pattern_SetB is None:
        self.VD_Pattern_SetB = 0
      if self.VD_Pattern_SetC is None:
        self.VD_Pattern_SetC = 0
      if self.VD_Pattern_SetD is None:
        self.VD_Pattern_SetD = 0
      if self.VD_Pattern_SetE is None:
        self.VD_Pattern_SetE = 0
      if self.VD_Pattern_SetF is None:
        self.VD_Pattern_SetF = 0
      if self.VD_Pattern_SetG is None:
        self.VD_Pattern_SetG = 0
      if self.PD_Pattern_SetA is None:
        self.PD_Pattern_SetA = 0
      if self.PD_Pattern_SetB is None:
        self.PD_Pattern_SetB = 0
      if self.PD_Pattern_SetC is None:
        self.PD_Pattern_SetC = 0
      if self.PD_Pattern_SetD is None:
        self.PD_Pattern_SetD = 0
      if self.PD_Pattern_SetE is None:
        self.PD_Pattern_SetE = 0
      if self.PD_Pattern_SetF is None:
        self.PD_Pattern_SetF = 0
      if self.PD_Pattern_SetG is None:
        self.PD_Pattern_SetG = 0
      if self.VD_class is None:
        self.VD_class = 0
      if self.PD_class is None:
        self.PD_class = 0
    else:
      self.VD_Pattern_SetA = 0
      self.VD_Pattern_SetB = 0
      self.VD_Pattern_SetC = 0
      self.VD_Pattern_SetD = 0
      self.VD_Pattern_SetE = 0
      self.VD_Pattern_SetF = 0
      self.VD_Pattern_SetG = 0
      self.PD_Pattern_SetA = 0
      self.PD_Pattern_SetB = 0
      self.PD_Pattern_SetC = 0
      self.PD_Pattern_SetD = 0
      self.PD_Pattern_SetE = 0
      self.PD_Pattern_SetF = 0
      self.PD_Pattern_SetG = 0
      self.VD_class = 0
      self.PD_class = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14I2i().pack(_x.VD_Pattern_SetA, _x.VD_Pattern_SetB, _x.VD_Pattern_SetC, _x.VD_Pattern_SetD, _x.VD_Pattern_SetE, _x.VD_Pattern_SetF, _x.VD_Pattern_SetG, _x.PD_Pattern_SetA, _x.PD_Pattern_SetB, _x.PD_Pattern_SetC, _x.PD_Pattern_SetD, _x.PD_Pattern_SetE, _x.PD_Pattern_SetF, _x.PD_Pattern_SetG, _x.VD_class, _x.PD_class))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.VD_Pattern_SetA, _x.VD_Pattern_SetB, _x.VD_Pattern_SetC, _x.VD_Pattern_SetD, _x.VD_Pattern_SetE, _x.VD_Pattern_SetF, _x.VD_Pattern_SetG, _x.PD_Pattern_SetA, _x.PD_Pattern_SetB, _x.PD_Pattern_SetC, _x.PD_Pattern_SetD, _x.PD_Pattern_SetE, _x.PD_Pattern_SetF, _x.PD_Pattern_SetG, _x.VD_class, _x.PD_class,) = _get_struct_14I2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14I2i().pack(_x.VD_Pattern_SetA, _x.VD_Pattern_SetB, _x.VD_Pattern_SetC, _x.VD_Pattern_SetD, _x.VD_Pattern_SetE, _x.VD_Pattern_SetF, _x.VD_Pattern_SetG, _x.PD_Pattern_SetA, _x.PD_Pattern_SetB, _x.PD_Pattern_SetC, _x.PD_Pattern_SetD, _x.PD_Pattern_SetE, _x.PD_Pattern_SetF, _x.PD_Pattern_SetG, _x.VD_class, _x.PD_class))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.VD_Pattern_SetA, _x.VD_Pattern_SetB, _x.VD_Pattern_SetC, _x.VD_Pattern_SetD, _x.VD_Pattern_SetE, _x.VD_Pattern_SetF, _x.VD_Pattern_SetG, _x.PD_Pattern_SetA, _x.PD_Pattern_SetB, _x.PD_Pattern_SetC, _x.PD_Pattern_SetD, _x.PD_Pattern_SetE, _x.PD_Pattern_SetF, _x.PD_Pattern_SetG, _x.VD_class, _x.PD_class,) = _get_struct_14I2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14I2i = None
def _get_struct_14I2i():
    global _struct_14I2i
    if _struct_14I2i is None:
        _struct_14I2i = struct.Struct("<14I2i")
    return _struct_14I2i

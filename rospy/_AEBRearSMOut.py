# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AEBRearSMOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AEBRearSMOut(genpy.Message):
  _md5sum = "2da591cf881edfdf8acf06f328ad5b0c"
  _type = "rospy_message_converter/AEBRearSMOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool off_cdn
bool stdby_cdn
bool psv_cdn
uint32 psv_cdn_bit
bool fail_cdn
bool active_cdn
uint32 sm_state
"""
  __slots__ = ['off_cdn','stdby_cdn','psv_cdn','psv_cdn_bit','fail_cdn','active_cdn','sm_state']
  _slot_types = ['bool','bool','bool','uint32','bool','bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       off_cdn,stdby_cdn,psv_cdn,psv_cdn_bit,fail_cdn,active_cdn,sm_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AEBRearSMOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.off_cdn is None:
        self.off_cdn = False
      if self.stdby_cdn is None:
        self.stdby_cdn = False
      if self.psv_cdn is None:
        self.psv_cdn = False
      if self.psv_cdn_bit is None:
        self.psv_cdn_bit = 0
      if self.fail_cdn is None:
        self.fail_cdn = False
      if self.active_cdn is None:
        self.active_cdn = False
      if self.sm_state is None:
        self.sm_state = 0
    else:
      self.off_cdn = False
      self.stdby_cdn = False
      self.psv_cdn = False
      self.psv_cdn_bit = 0
      self.fail_cdn = False
      self.active_cdn = False
      self.sm_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BI2BI().pack(_x.off_cdn, _x.stdby_cdn, _x.psv_cdn, _x.psv_cdn_bit, _x.fail_cdn, _x.active_cdn, _x.sm_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.off_cdn, _x.stdby_cdn, _x.psv_cdn, _x.psv_cdn_bit, _x.fail_cdn, _x.active_cdn, _x.sm_state,) = _get_struct_3BI2BI().unpack(str[start:end])
      self.off_cdn = bool(self.off_cdn)
      self.stdby_cdn = bool(self.stdby_cdn)
      self.psv_cdn = bool(self.psv_cdn)
      self.fail_cdn = bool(self.fail_cdn)
      self.active_cdn = bool(self.active_cdn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BI2BI().pack(_x.off_cdn, _x.stdby_cdn, _x.psv_cdn, _x.psv_cdn_bit, _x.fail_cdn, _x.active_cdn, _x.sm_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.off_cdn, _x.stdby_cdn, _x.psv_cdn, _x.psv_cdn_bit, _x.fail_cdn, _x.active_cdn, _x.sm_state,) = _get_struct_3BI2BI().unpack(str[start:end])
      self.off_cdn = bool(self.off_cdn)
      self.stdby_cdn = bool(self.stdby_cdn)
      self.psv_cdn = bool(self.psv_cdn)
      self.fail_cdn = bool(self.fail_cdn)
      self.active_cdn = bool(self.active_cdn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BI2BI = None
def _get_struct_3BI2BI():
    global _struct_3BI2BI
    if _struct_3BI2BI is None:
        _struct_3BI2BI = struct.Struct("<3BI2BI")
    return _struct_3BI2BI

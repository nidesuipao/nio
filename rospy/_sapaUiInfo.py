# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/sapaUiInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class sapaUiInfo(genpy.Message):
  _md5sum = "e0c8313fda74be845e90d718c2981bc1"
  _type = "rospy_message_converter/sapaUiInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """sapaSlotUi[] sapaSlotUiResults
sapaPillarUi[] sapaPillarUiResults
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/sapaSlotUi
int32 slotIndex
int32 slotStatusUiType
float32 slotUiSizeX
float32 slotUiSizeY
sapaUiPoint slotUiVehPos
float32 slotUiVehPsi
int32 slotUiType
bool slotUiIsTarget
bool slotUIWithParkStop
bool slotUiIsNarrow
bool slotUiIsStored
sapaParkStopUi[] slotUiParkStops

================================================================================
MSG: rospy_message_converter/sapaUiPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/sapaParkStopUi
sapaUiPoint sapaParkStopUiPoint1
sapaUiPoint sapaParkStopUiPoint2

================================================================================
MSG: rospy_message_converter/sapaPillarUi
sapaUiPoint sapaPillarUiPoint1
sapaUiPoint sapaPillarUiPoint2
sapaUiPoint sapaPillarUiPoint3
sapaUiPoint sapaPillarUiPoint4
bool pillarIsValid
"""
  __slots__ = ['sapaSlotUiResults','sapaPillarUiResults','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/sapaSlotUi[]','rospy_message_converter/sapaPillarUi[]','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sapaSlotUiResults,sapaPillarUiResults,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sapaUiInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sapaSlotUiResults is None:
        self.sapaSlotUiResults = []
      if self.sapaPillarUiResults is None:
        self.sapaPillarUiResults = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.sapaSlotUiResults = []
      self.sapaPillarUiResults = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.sapaSlotUiResults)
      buff.write(_struct_I.pack(length))
      for val1 in self.sapaSlotUiResults:
        _x = val1
        buff.write(_get_struct_2i2f().pack(_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY))
        _v1 = val1.slotUiVehPos
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_fi4B().pack(_x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored))
        length = len(val1.slotUiParkStops)
        buff.write(_struct_I.pack(length))
        for val2 in val1.slotUiParkStops:
          _v2 = val2.sapaParkStopUiPoint1
          _x = _v2
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
          _v3 = val2.sapaParkStopUiPoint2
          _x = _v3
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.sapaPillarUiResults)
      buff.write(_struct_I.pack(length))
      for val1 in self.sapaPillarUiResults:
        _v4 = val1.sapaPillarUiPoint1
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v5 = val1.sapaPillarUiPoint2
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = val1.sapaPillarUiPoint3
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v7 = val1.sapaPillarUiPoint4
        _x = _v7
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.pillarIsValid
        buff.write(_get_struct_B().pack(_x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sapaSlotUiResults is None:
        self.sapaSlotUiResults = None
      if self.sapaPillarUiResults is None:
        self.sapaPillarUiResults = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sapaSlotUiResults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.sapaSlotUi()
        _x = val1
        start = end
        end += 16
        (_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY,) = _get_struct_2i2f().unpack(str[start:end])
        _v8 = val1.slotUiVehPos
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored,) = _get_struct_fi4B().unpack(str[start:end])
        val1.slotUiIsTarget = bool(val1.slotUiIsTarget)
        val1.slotUIWithParkStop = bool(val1.slotUIWithParkStop)
        val1.slotUiIsNarrow = bool(val1.slotUiIsNarrow)
        val1.slotUiIsStored = bool(val1.slotUiIsStored)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.slotUiParkStops = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.sapaParkStopUi()
          _v9 = val2.sapaParkStopUiPoint1
          _x = _v9
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v10 = val2.sapaParkStopUiPoint2
          _x = _v10
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          val1.slotUiParkStops.append(val2)
        self.sapaSlotUiResults.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sapaPillarUiResults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.sapaPillarUi()
        _v11 = val1.sapaPillarUiPoint1
        _x = _v11
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v12 = val1.sapaPillarUiPoint2
        _x = _v12
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v13 = val1.sapaPillarUiPoint3
        _x = _v13
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v14 = val1.sapaPillarUiPoint4
        _x = _v14
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 1
        (val1.pillarIsValid,) = _get_struct_B().unpack(str[start:end])
        val1.pillarIsValid = bool(val1.pillarIsValid)
        self.sapaPillarUiResults.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.sapaSlotUiResults)
      buff.write(_struct_I.pack(length))
      for val1 in self.sapaSlotUiResults:
        _x = val1
        buff.write(_get_struct_2i2f().pack(_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY))
        _v15 = val1.slotUiVehPos
        _x = _v15
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_fi4B().pack(_x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored))
        length = len(val1.slotUiParkStops)
        buff.write(_struct_I.pack(length))
        for val2 in val1.slotUiParkStops:
          _v16 = val2.sapaParkStopUiPoint1
          _x = _v16
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
          _v17 = val2.sapaParkStopUiPoint2
          _x = _v17
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.sapaPillarUiResults)
      buff.write(_struct_I.pack(length))
      for val1 in self.sapaPillarUiResults:
        _v18 = val1.sapaPillarUiPoint1
        _x = _v18
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v19 = val1.sapaPillarUiPoint2
        _x = _v19
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v20 = val1.sapaPillarUiPoint3
        _x = _v20
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v21 = val1.sapaPillarUiPoint4
        _x = _v21
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.pillarIsValid
        buff.write(_get_struct_B().pack(_x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sapaSlotUiResults is None:
        self.sapaSlotUiResults = None
      if self.sapaPillarUiResults is None:
        self.sapaPillarUiResults = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sapaSlotUiResults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.sapaSlotUi()
        _x = val1
        start = end
        end += 16
        (_x.slotIndex, _x.slotStatusUiType, _x.slotUiSizeX, _x.slotUiSizeY,) = _get_struct_2i2f().unpack(str[start:end])
        _v22 = val1.slotUiVehPos
        _x = _v22
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.slotUiVehPsi, _x.slotUiType, _x.slotUiIsTarget, _x.slotUIWithParkStop, _x.slotUiIsNarrow, _x.slotUiIsStored,) = _get_struct_fi4B().unpack(str[start:end])
        val1.slotUiIsTarget = bool(val1.slotUiIsTarget)
        val1.slotUIWithParkStop = bool(val1.slotUIWithParkStop)
        val1.slotUiIsNarrow = bool(val1.slotUiIsNarrow)
        val1.slotUiIsStored = bool(val1.slotUiIsStored)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.slotUiParkStops = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.sapaParkStopUi()
          _v23 = val2.sapaParkStopUiPoint1
          _x = _v23
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v24 = val2.sapaParkStopUiPoint2
          _x = _v24
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          val1.slotUiParkStops.append(val2)
        self.sapaSlotUiResults.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sapaPillarUiResults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.sapaPillarUi()
        _v25 = val1.sapaPillarUiPoint1
        _x = _v25
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v26 = val1.sapaPillarUiPoint2
        _x = _v26
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v27 = val1.sapaPillarUiPoint3
        _x = _v27
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v28 = val1.sapaPillarUiPoint4
        _x = _v28
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 1
        (val1.pillarIsValid,) = _get_struct_B().unpack(str[start:end])
        val1.pillarIsValid = bool(val1.pillarIsValid)
        self.sapaPillarUiResults.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i2f = None
def _get_struct_2i2f():
    global _struct_2i2f
    if _struct_2i2f is None:
        _struct_2i2f = struct.Struct("<2i2f")
    return _struct_2i2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_fi4B = None
def _get_struct_fi4B():
    global _struct_fi4B
    if _struct_fi4B is None:
        _struct_fi4B = struct.Struct("<fi4B")
    return _struct_fi4B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SecondaryPowerFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SecondaryPowerFaultInfo(genpy.Message):
  _md5sum = "6cd990d60fd3df98f0c8bc4d9591c729"
  _type = "rospy_message_converter/SecondaryPowerFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool BAT_IN2_VSENSE_Overvoltage
bool BAT_IN2_VSENSE_Undervoltage
bool BAT_FIN2_DIO_VSENSE_Overvoltage
bool BAT_FIN2_DIO_VSENSE_Undervoltage
bool P14V_MAIN2_VSENSE_Overvoltage
bool P14V_MAIN2_VSENSE_Undervoltage
bool P5V8_TLF2_VSENSE_Overvoltage
bool P5V8_TLF2_VSENSE_Undervoltage
bool IBAT2_OUT_Overvoltage
bool IBAT2_OUT_Undervoltage
bool V_PP3V3_CHCAN2_Overvoltage
bool V_PP3V3_CHCAN2_Undervoltage
bool V_PP5V_MAIN2_Overvoltage
bool V_PP5V_MAIN2_Undervoltage
bool V_PP14V_S3_Overvoltage
bool V_PP14V_S3_Undervoltage
bool V_PP5V_S3_Overvoltage
bool V_PP5V_S3_Undervoltage
bool V_PP14V_S4_Overvoltage
bool V_PP14V_S4_Undervoltage
bool V_PP5V_S4_Overvoltage
bool V_PP5V_S4_Undervoltage
bool V_PP12V_REG2_Overvoltage
bool V_PP12V_REG2_Undervoltage
bool V_PP3V3_MISC2_Overvoltage
bool V_PP3V3_MISC2_Undervoltage
bool V_PP1V05_SPR2_Overvoltage
bool V_PP1V05_SPR2_Undervoltage
bool V_PP1V5_SPR2_Overvoltage
bool V_PP1V5_SPR2_Undervoltage
bool V_PP1V8_MISC2_Overvoltage
bool V_PP1V8_MISC2_Undervoltage
bool V_PP0V9_PHY2_Overvoltage
bool V_PP0V9_PHY2_Undervoltage
bool V_PP1V2_DES2_Overvoltage
bool V_PP1V2_DES2_Undervoltage
bool V_PP1V8_DES2_Overvoltage
bool V_PP1V8_DES2_Undervoltage
bool V_PP3V3_TXVPHY2_Overvoltage
bool V_PP3V3_TXVPHY2_Undervoltage
bool V_PP3V3_S3_Overvoltage
bool V_PP3V3_S3_Undervoltage
bool V_PP1V8_S3_Overvoltage
bool V_PP1V8_S3_Undervoltage
bool V_PP3V3_S4_Overvoltage
bool V_PP3V3_S4_Undervoltage
bool V_PP1V8_S4_Overvoltage
bool V_PP1V8_S4_Undervoltage
bool P14V_S3_ISEN_Overvoltage
bool P14V_S3_ISEN_Undervoltage
bool P14V_S4_ISEN_Overvoltage
bool P14V_S4_ISEN_Undervoltage
bool V_PP1V8_MCU2_Overvoltage
bool V_PP1V8_MCU2_Undervoltage
bool BAT_IN2_VSENSE_2nd_Overvoltage
bool BAT_IN2_VSENSE_2nd_Undervoltage
bool BAT_IN12_VSENSE_Overvoltage
bool BAT_IN12_VSENSE_Undervoltage
bool P3V3_MCU12_VSENSE_Overvoltage
bool P3V3_MCU12_VSENSE_Undervoltage
bool V_PP1V2_S3_Overvoltage
bool V_PP1V2_S3_Undervoltage
bool V_PPVCC_UFS3_2V5_Overvoltage
bool V_PPVCC_UFS3_2V5_Undervoltage
bool V_PP1V2_S4_Overvoltage
bool V_PP1V2_S4_Undervoltage
bool V_PPVCC_UFS4_2V5_Overvoltage
bool V_PPVCC_UFS4_2V5_Undervoltage
"""
  __slots__ = ['BAT_IN2_VSENSE_Overvoltage','BAT_IN2_VSENSE_Undervoltage','BAT_FIN2_DIO_VSENSE_Overvoltage','BAT_FIN2_DIO_VSENSE_Undervoltage','P14V_MAIN2_VSENSE_Overvoltage','P14V_MAIN2_VSENSE_Undervoltage','P5V8_TLF2_VSENSE_Overvoltage','P5V8_TLF2_VSENSE_Undervoltage','IBAT2_OUT_Overvoltage','IBAT2_OUT_Undervoltage','V_PP3V3_CHCAN2_Overvoltage','V_PP3V3_CHCAN2_Undervoltage','V_PP5V_MAIN2_Overvoltage','V_PP5V_MAIN2_Undervoltage','V_PP14V_S3_Overvoltage','V_PP14V_S3_Undervoltage','V_PP5V_S3_Overvoltage','V_PP5V_S3_Undervoltage','V_PP14V_S4_Overvoltage','V_PP14V_S4_Undervoltage','V_PP5V_S4_Overvoltage','V_PP5V_S4_Undervoltage','V_PP12V_REG2_Overvoltage','V_PP12V_REG2_Undervoltage','V_PP3V3_MISC2_Overvoltage','V_PP3V3_MISC2_Undervoltage','V_PP1V05_SPR2_Overvoltage','V_PP1V05_SPR2_Undervoltage','V_PP1V5_SPR2_Overvoltage','V_PP1V5_SPR2_Undervoltage','V_PP1V8_MISC2_Overvoltage','V_PP1V8_MISC2_Undervoltage','V_PP0V9_PHY2_Overvoltage','V_PP0V9_PHY2_Undervoltage','V_PP1V2_DES2_Overvoltage','V_PP1V2_DES2_Undervoltage','V_PP1V8_DES2_Overvoltage','V_PP1V8_DES2_Undervoltage','V_PP3V3_TXVPHY2_Overvoltage','V_PP3V3_TXVPHY2_Undervoltage','V_PP3V3_S3_Overvoltage','V_PP3V3_S3_Undervoltage','V_PP1V8_S3_Overvoltage','V_PP1V8_S3_Undervoltage','V_PP3V3_S4_Overvoltage','V_PP3V3_S4_Undervoltage','V_PP1V8_S4_Overvoltage','V_PP1V8_S4_Undervoltage','P14V_S3_ISEN_Overvoltage','P14V_S3_ISEN_Undervoltage','P14V_S4_ISEN_Overvoltage','P14V_S4_ISEN_Undervoltage','V_PP1V8_MCU2_Overvoltage','V_PP1V8_MCU2_Undervoltage','BAT_IN2_VSENSE_2nd_Overvoltage','BAT_IN2_VSENSE_2nd_Undervoltage','BAT_IN12_VSENSE_Overvoltage','BAT_IN12_VSENSE_Undervoltage','P3V3_MCU12_VSENSE_Overvoltage','P3V3_MCU12_VSENSE_Undervoltage','V_PP1V2_S3_Overvoltage','V_PP1V2_S3_Undervoltage','V_PPVCC_UFS3_2V5_Overvoltage','V_PPVCC_UFS3_2V5_Undervoltage','V_PP1V2_S4_Overvoltage','V_PP1V2_S4_Undervoltage','V_PPVCC_UFS4_2V5_Overvoltage','V_PPVCC_UFS4_2V5_Undervoltage']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       BAT_IN2_VSENSE_Overvoltage,BAT_IN2_VSENSE_Undervoltage,BAT_FIN2_DIO_VSENSE_Overvoltage,BAT_FIN2_DIO_VSENSE_Undervoltage,P14V_MAIN2_VSENSE_Overvoltage,P14V_MAIN2_VSENSE_Undervoltage,P5V8_TLF2_VSENSE_Overvoltage,P5V8_TLF2_VSENSE_Undervoltage,IBAT2_OUT_Overvoltage,IBAT2_OUT_Undervoltage,V_PP3V3_CHCAN2_Overvoltage,V_PP3V3_CHCAN2_Undervoltage,V_PP5V_MAIN2_Overvoltage,V_PP5V_MAIN2_Undervoltage,V_PP14V_S3_Overvoltage,V_PP14V_S3_Undervoltage,V_PP5V_S3_Overvoltage,V_PP5V_S3_Undervoltage,V_PP14V_S4_Overvoltage,V_PP14V_S4_Undervoltage,V_PP5V_S4_Overvoltage,V_PP5V_S4_Undervoltage,V_PP12V_REG2_Overvoltage,V_PP12V_REG2_Undervoltage,V_PP3V3_MISC2_Overvoltage,V_PP3V3_MISC2_Undervoltage,V_PP1V05_SPR2_Overvoltage,V_PP1V05_SPR2_Undervoltage,V_PP1V5_SPR2_Overvoltage,V_PP1V5_SPR2_Undervoltage,V_PP1V8_MISC2_Overvoltage,V_PP1V8_MISC2_Undervoltage,V_PP0V9_PHY2_Overvoltage,V_PP0V9_PHY2_Undervoltage,V_PP1V2_DES2_Overvoltage,V_PP1V2_DES2_Undervoltage,V_PP1V8_DES2_Overvoltage,V_PP1V8_DES2_Undervoltage,V_PP3V3_TXVPHY2_Overvoltage,V_PP3V3_TXVPHY2_Undervoltage,V_PP3V3_S3_Overvoltage,V_PP3V3_S3_Undervoltage,V_PP1V8_S3_Overvoltage,V_PP1V8_S3_Undervoltage,V_PP3V3_S4_Overvoltage,V_PP3V3_S4_Undervoltage,V_PP1V8_S4_Overvoltage,V_PP1V8_S4_Undervoltage,P14V_S3_ISEN_Overvoltage,P14V_S3_ISEN_Undervoltage,P14V_S4_ISEN_Overvoltage,P14V_S4_ISEN_Undervoltage,V_PP1V8_MCU2_Overvoltage,V_PP1V8_MCU2_Undervoltage,BAT_IN2_VSENSE_2nd_Overvoltage,BAT_IN2_VSENSE_2nd_Undervoltage,BAT_IN12_VSENSE_Overvoltage,BAT_IN12_VSENSE_Undervoltage,P3V3_MCU12_VSENSE_Overvoltage,P3V3_MCU12_VSENSE_Undervoltage,V_PP1V2_S3_Overvoltage,V_PP1V2_S3_Undervoltage,V_PPVCC_UFS3_2V5_Overvoltage,V_PPVCC_UFS3_2V5_Undervoltage,V_PP1V2_S4_Overvoltage,V_PP1V2_S4_Undervoltage,V_PPVCC_UFS4_2V5_Overvoltage,V_PPVCC_UFS4_2V5_Undervoltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SecondaryPowerFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.BAT_IN2_VSENSE_Overvoltage is None:
        self.BAT_IN2_VSENSE_Overvoltage = False
      if self.BAT_IN2_VSENSE_Undervoltage is None:
        self.BAT_IN2_VSENSE_Undervoltage = False
      if self.BAT_FIN2_DIO_VSENSE_Overvoltage is None:
        self.BAT_FIN2_DIO_VSENSE_Overvoltage = False
      if self.BAT_FIN2_DIO_VSENSE_Undervoltage is None:
        self.BAT_FIN2_DIO_VSENSE_Undervoltage = False
      if self.P14V_MAIN2_VSENSE_Overvoltage is None:
        self.P14V_MAIN2_VSENSE_Overvoltage = False
      if self.P14V_MAIN2_VSENSE_Undervoltage is None:
        self.P14V_MAIN2_VSENSE_Undervoltage = False
      if self.P5V8_TLF2_VSENSE_Overvoltage is None:
        self.P5V8_TLF2_VSENSE_Overvoltage = False
      if self.P5V8_TLF2_VSENSE_Undervoltage is None:
        self.P5V8_TLF2_VSENSE_Undervoltage = False
      if self.IBAT2_OUT_Overvoltage is None:
        self.IBAT2_OUT_Overvoltage = False
      if self.IBAT2_OUT_Undervoltage is None:
        self.IBAT2_OUT_Undervoltage = False
      if self.V_PP3V3_CHCAN2_Overvoltage is None:
        self.V_PP3V3_CHCAN2_Overvoltage = False
      if self.V_PP3V3_CHCAN2_Undervoltage is None:
        self.V_PP3V3_CHCAN2_Undervoltage = False
      if self.V_PP5V_MAIN2_Overvoltage is None:
        self.V_PP5V_MAIN2_Overvoltage = False
      if self.V_PP5V_MAIN2_Undervoltage is None:
        self.V_PP5V_MAIN2_Undervoltage = False
      if self.V_PP14V_S3_Overvoltage is None:
        self.V_PP14V_S3_Overvoltage = False
      if self.V_PP14V_S3_Undervoltage is None:
        self.V_PP14V_S3_Undervoltage = False
      if self.V_PP5V_S3_Overvoltage is None:
        self.V_PP5V_S3_Overvoltage = False
      if self.V_PP5V_S3_Undervoltage is None:
        self.V_PP5V_S3_Undervoltage = False
      if self.V_PP14V_S4_Overvoltage is None:
        self.V_PP14V_S4_Overvoltage = False
      if self.V_PP14V_S4_Undervoltage is None:
        self.V_PP14V_S4_Undervoltage = False
      if self.V_PP5V_S4_Overvoltage is None:
        self.V_PP5V_S4_Overvoltage = False
      if self.V_PP5V_S4_Undervoltage is None:
        self.V_PP5V_S4_Undervoltage = False
      if self.V_PP12V_REG2_Overvoltage is None:
        self.V_PP12V_REG2_Overvoltage = False
      if self.V_PP12V_REG2_Undervoltage is None:
        self.V_PP12V_REG2_Undervoltage = False
      if self.V_PP3V3_MISC2_Overvoltage is None:
        self.V_PP3V3_MISC2_Overvoltage = False
      if self.V_PP3V3_MISC2_Undervoltage is None:
        self.V_PP3V3_MISC2_Undervoltage = False
      if self.V_PP1V05_SPR2_Overvoltage is None:
        self.V_PP1V05_SPR2_Overvoltage = False
      if self.V_PP1V05_SPR2_Undervoltage is None:
        self.V_PP1V05_SPR2_Undervoltage = False
      if self.V_PP1V5_SPR2_Overvoltage is None:
        self.V_PP1V5_SPR2_Overvoltage = False
      if self.V_PP1V5_SPR2_Undervoltage is None:
        self.V_PP1V5_SPR2_Undervoltage = False
      if self.V_PP1V8_MISC2_Overvoltage is None:
        self.V_PP1V8_MISC2_Overvoltage = False
      if self.V_PP1V8_MISC2_Undervoltage is None:
        self.V_PP1V8_MISC2_Undervoltage = False
      if self.V_PP0V9_PHY2_Overvoltage is None:
        self.V_PP0V9_PHY2_Overvoltage = False
      if self.V_PP0V9_PHY2_Undervoltage is None:
        self.V_PP0V9_PHY2_Undervoltage = False
      if self.V_PP1V2_DES2_Overvoltage is None:
        self.V_PP1V2_DES2_Overvoltage = False
      if self.V_PP1V2_DES2_Undervoltage is None:
        self.V_PP1V2_DES2_Undervoltage = False
      if self.V_PP1V8_DES2_Overvoltage is None:
        self.V_PP1V8_DES2_Overvoltage = False
      if self.V_PP1V8_DES2_Undervoltage is None:
        self.V_PP1V8_DES2_Undervoltage = False
      if self.V_PP3V3_TXVPHY2_Overvoltage is None:
        self.V_PP3V3_TXVPHY2_Overvoltage = False
      if self.V_PP3V3_TXVPHY2_Undervoltage is None:
        self.V_PP3V3_TXVPHY2_Undervoltage = False
      if self.V_PP3V3_S3_Overvoltage is None:
        self.V_PP3V3_S3_Overvoltage = False
      if self.V_PP3V3_S3_Undervoltage is None:
        self.V_PP3V3_S3_Undervoltage = False
      if self.V_PP1V8_S3_Overvoltage is None:
        self.V_PP1V8_S3_Overvoltage = False
      if self.V_PP1V8_S3_Undervoltage is None:
        self.V_PP1V8_S3_Undervoltage = False
      if self.V_PP3V3_S4_Overvoltage is None:
        self.V_PP3V3_S4_Overvoltage = False
      if self.V_PP3V3_S4_Undervoltage is None:
        self.V_PP3V3_S4_Undervoltage = False
      if self.V_PP1V8_S4_Overvoltage is None:
        self.V_PP1V8_S4_Overvoltage = False
      if self.V_PP1V8_S4_Undervoltage is None:
        self.V_PP1V8_S4_Undervoltage = False
      if self.P14V_S3_ISEN_Overvoltage is None:
        self.P14V_S3_ISEN_Overvoltage = False
      if self.P14V_S3_ISEN_Undervoltage is None:
        self.P14V_S3_ISEN_Undervoltage = False
      if self.P14V_S4_ISEN_Overvoltage is None:
        self.P14V_S4_ISEN_Overvoltage = False
      if self.P14V_S4_ISEN_Undervoltage is None:
        self.P14V_S4_ISEN_Undervoltage = False
      if self.V_PP1V8_MCU2_Overvoltage is None:
        self.V_PP1V8_MCU2_Overvoltage = False
      if self.V_PP1V8_MCU2_Undervoltage is None:
        self.V_PP1V8_MCU2_Undervoltage = False
      if self.BAT_IN2_VSENSE_2nd_Overvoltage is None:
        self.BAT_IN2_VSENSE_2nd_Overvoltage = False
      if self.BAT_IN2_VSENSE_2nd_Undervoltage is None:
        self.BAT_IN2_VSENSE_2nd_Undervoltage = False
      if self.BAT_IN12_VSENSE_Overvoltage is None:
        self.BAT_IN12_VSENSE_Overvoltage = False
      if self.BAT_IN12_VSENSE_Undervoltage is None:
        self.BAT_IN12_VSENSE_Undervoltage = False
      if self.P3V3_MCU12_VSENSE_Overvoltage is None:
        self.P3V3_MCU12_VSENSE_Overvoltage = False
      if self.P3V3_MCU12_VSENSE_Undervoltage is None:
        self.P3V3_MCU12_VSENSE_Undervoltage = False
      if self.V_PP1V2_S3_Overvoltage is None:
        self.V_PP1V2_S3_Overvoltage = False
      if self.V_PP1V2_S3_Undervoltage is None:
        self.V_PP1V2_S3_Undervoltage = False
      if self.V_PPVCC_UFS3_2V5_Overvoltage is None:
        self.V_PPVCC_UFS3_2V5_Overvoltage = False
      if self.V_PPVCC_UFS3_2V5_Undervoltage is None:
        self.V_PPVCC_UFS3_2V5_Undervoltage = False
      if self.V_PP1V2_S4_Overvoltage is None:
        self.V_PP1V2_S4_Overvoltage = False
      if self.V_PP1V2_S4_Undervoltage is None:
        self.V_PP1V2_S4_Undervoltage = False
      if self.V_PPVCC_UFS4_2V5_Overvoltage is None:
        self.V_PPVCC_UFS4_2V5_Overvoltage = False
      if self.V_PPVCC_UFS4_2V5_Undervoltage is None:
        self.V_PPVCC_UFS4_2V5_Undervoltage = False
    else:
      self.BAT_IN2_VSENSE_Overvoltage = False
      self.BAT_IN2_VSENSE_Undervoltage = False
      self.BAT_FIN2_DIO_VSENSE_Overvoltage = False
      self.BAT_FIN2_DIO_VSENSE_Undervoltage = False
      self.P14V_MAIN2_VSENSE_Overvoltage = False
      self.P14V_MAIN2_VSENSE_Undervoltage = False
      self.P5V8_TLF2_VSENSE_Overvoltage = False
      self.P5V8_TLF2_VSENSE_Undervoltage = False
      self.IBAT2_OUT_Overvoltage = False
      self.IBAT2_OUT_Undervoltage = False
      self.V_PP3V3_CHCAN2_Overvoltage = False
      self.V_PP3V3_CHCAN2_Undervoltage = False
      self.V_PP5V_MAIN2_Overvoltage = False
      self.V_PP5V_MAIN2_Undervoltage = False
      self.V_PP14V_S3_Overvoltage = False
      self.V_PP14V_S3_Undervoltage = False
      self.V_PP5V_S3_Overvoltage = False
      self.V_PP5V_S3_Undervoltage = False
      self.V_PP14V_S4_Overvoltage = False
      self.V_PP14V_S4_Undervoltage = False
      self.V_PP5V_S4_Overvoltage = False
      self.V_PP5V_S4_Undervoltage = False
      self.V_PP12V_REG2_Overvoltage = False
      self.V_PP12V_REG2_Undervoltage = False
      self.V_PP3V3_MISC2_Overvoltage = False
      self.V_PP3V3_MISC2_Undervoltage = False
      self.V_PP1V05_SPR2_Overvoltage = False
      self.V_PP1V05_SPR2_Undervoltage = False
      self.V_PP1V5_SPR2_Overvoltage = False
      self.V_PP1V5_SPR2_Undervoltage = False
      self.V_PP1V8_MISC2_Overvoltage = False
      self.V_PP1V8_MISC2_Undervoltage = False
      self.V_PP0V9_PHY2_Overvoltage = False
      self.V_PP0V9_PHY2_Undervoltage = False
      self.V_PP1V2_DES2_Overvoltage = False
      self.V_PP1V2_DES2_Undervoltage = False
      self.V_PP1V8_DES2_Overvoltage = False
      self.V_PP1V8_DES2_Undervoltage = False
      self.V_PP3V3_TXVPHY2_Overvoltage = False
      self.V_PP3V3_TXVPHY2_Undervoltage = False
      self.V_PP3V3_S3_Overvoltage = False
      self.V_PP3V3_S3_Undervoltage = False
      self.V_PP1V8_S3_Overvoltage = False
      self.V_PP1V8_S3_Undervoltage = False
      self.V_PP3V3_S4_Overvoltage = False
      self.V_PP3V3_S4_Undervoltage = False
      self.V_PP1V8_S4_Overvoltage = False
      self.V_PP1V8_S4_Undervoltage = False
      self.P14V_S3_ISEN_Overvoltage = False
      self.P14V_S3_ISEN_Undervoltage = False
      self.P14V_S4_ISEN_Overvoltage = False
      self.P14V_S4_ISEN_Undervoltage = False
      self.V_PP1V8_MCU2_Overvoltage = False
      self.V_PP1V8_MCU2_Undervoltage = False
      self.BAT_IN2_VSENSE_2nd_Overvoltage = False
      self.BAT_IN2_VSENSE_2nd_Undervoltage = False
      self.BAT_IN12_VSENSE_Overvoltage = False
      self.BAT_IN12_VSENSE_Undervoltage = False
      self.P3V3_MCU12_VSENSE_Overvoltage = False
      self.P3V3_MCU12_VSENSE_Undervoltage = False
      self.V_PP1V2_S3_Overvoltage = False
      self.V_PP1V2_S3_Undervoltage = False
      self.V_PPVCC_UFS3_2V5_Overvoltage = False
      self.V_PPVCC_UFS3_2V5_Undervoltage = False
      self.V_PP1V2_S4_Overvoltage = False
      self.V_PP1V2_S4_Undervoltage = False
      self.V_PPVCC_UFS4_2V5_Overvoltage = False
      self.V_PPVCC_UFS4_2V5_Undervoltage = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_68B().pack(_x.BAT_IN2_VSENSE_Overvoltage, _x.BAT_IN2_VSENSE_Undervoltage, _x.BAT_FIN2_DIO_VSENSE_Overvoltage, _x.BAT_FIN2_DIO_VSENSE_Undervoltage, _x.P14V_MAIN2_VSENSE_Overvoltage, _x.P14V_MAIN2_VSENSE_Undervoltage, _x.P5V8_TLF2_VSENSE_Overvoltage, _x.P5V8_TLF2_VSENSE_Undervoltage, _x.IBAT2_OUT_Overvoltage, _x.IBAT2_OUT_Undervoltage, _x.V_PP3V3_CHCAN2_Overvoltage, _x.V_PP3V3_CHCAN2_Undervoltage, _x.V_PP5V_MAIN2_Overvoltage, _x.V_PP5V_MAIN2_Undervoltage, _x.V_PP14V_S3_Overvoltage, _x.V_PP14V_S3_Undervoltage, _x.V_PP5V_S3_Overvoltage, _x.V_PP5V_S3_Undervoltage, _x.V_PP14V_S4_Overvoltage, _x.V_PP14V_S4_Undervoltage, _x.V_PP5V_S4_Overvoltage, _x.V_PP5V_S4_Undervoltage, _x.V_PP12V_REG2_Overvoltage, _x.V_PP12V_REG2_Undervoltage, _x.V_PP3V3_MISC2_Overvoltage, _x.V_PP3V3_MISC2_Undervoltage, _x.V_PP1V05_SPR2_Overvoltage, _x.V_PP1V05_SPR2_Undervoltage, _x.V_PP1V5_SPR2_Overvoltage, _x.V_PP1V5_SPR2_Undervoltage, _x.V_PP1V8_MISC2_Overvoltage, _x.V_PP1V8_MISC2_Undervoltage, _x.V_PP0V9_PHY2_Overvoltage, _x.V_PP0V9_PHY2_Undervoltage, _x.V_PP1V2_DES2_Overvoltage, _x.V_PP1V2_DES2_Undervoltage, _x.V_PP1V8_DES2_Overvoltage, _x.V_PP1V8_DES2_Undervoltage, _x.V_PP3V3_TXVPHY2_Overvoltage, _x.V_PP3V3_TXVPHY2_Undervoltage, _x.V_PP3V3_S3_Overvoltage, _x.V_PP3V3_S3_Undervoltage, _x.V_PP1V8_S3_Overvoltage, _x.V_PP1V8_S3_Undervoltage, _x.V_PP3V3_S4_Overvoltage, _x.V_PP3V3_S4_Undervoltage, _x.V_PP1V8_S4_Overvoltage, _x.V_PP1V8_S4_Undervoltage, _x.P14V_S3_ISEN_Overvoltage, _x.P14V_S3_ISEN_Undervoltage, _x.P14V_S4_ISEN_Overvoltage, _x.P14V_S4_ISEN_Undervoltage, _x.V_PP1V8_MCU2_Overvoltage, _x.V_PP1V8_MCU2_Undervoltage, _x.BAT_IN2_VSENSE_2nd_Overvoltage, _x.BAT_IN2_VSENSE_2nd_Undervoltage, _x.BAT_IN12_VSENSE_Overvoltage, _x.BAT_IN12_VSENSE_Undervoltage, _x.P3V3_MCU12_VSENSE_Overvoltage, _x.P3V3_MCU12_VSENSE_Undervoltage, _x.V_PP1V2_S3_Overvoltage, _x.V_PP1V2_S3_Undervoltage, _x.V_PPVCC_UFS3_2V5_Overvoltage, _x.V_PPVCC_UFS3_2V5_Undervoltage, _x.V_PP1V2_S4_Overvoltage, _x.V_PP1V2_S4_Undervoltage, _x.V_PPVCC_UFS4_2V5_Overvoltage, _x.V_PPVCC_UFS4_2V5_Undervoltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.BAT_IN2_VSENSE_Overvoltage, _x.BAT_IN2_VSENSE_Undervoltage, _x.BAT_FIN2_DIO_VSENSE_Overvoltage, _x.BAT_FIN2_DIO_VSENSE_Undervoltage, _x.P14V_MAIN2_VSENSE_Overvoltage, _x.P14V_MAIN2_VSENSE_Undervoltage, _x.P5V8_TLF2_VSENSE_Overvoltage, _x.P5V8_TLF2_VSENSE_Undervoltage, _x.IBAT2_OUT_Overvoltage, _x.IBAT2_OUT_Undervoltage, _x.V_PP3V3_CHCAN2_Overvoltage, _x.V_PP3V3_CHCAN2_Undervoltage, _x.V_PP5V_MAIN2_Overvoltage, _x.V_PP5V_MAIN2_Undervoltage, _x.V_PP14V_S3_Overvoltage, _x.V_PP14V_S3_Undervoltage, _x.V_PP5V_S3_Overvoltage, _x.V_PP5V_S3_Undervoltage, _x.V_PP14V_S4_Overvoltage, _x.V_PP14V_S4_Undervoltage, _x.V_PP5V_S4_Overvoltage, _x.V_PP5V_S4_Undervoltage, _x.V_PP12V_REG2_Overvoltage, _x.V_PP12V_REG2_Undervoltage, _x.V_PP3V3_MISC2_Overvoltage, _x.V_PP3V3_MISC2_Undervoltage, _x.V_PP1V05_SPR2_Overvoltage, _x.V_PP1V05_SPR2_Undervoltage, _x.V_PP1V5_SPR2_Overvoltage, _x.V_PP1V5_SPR2_Undervoltage, _x.V_PP1V8_MISC2_Overvoltage, _x.V_PP1V8_MISC2_Undervoltage, _x.V_PP0V9_PHY2_Overvoltage, _x.V_PP0V9_PHY2_Undervoltage, _x.V_PP1V2_DES2_Overvoltage, _x.V_PP1V2_DES2_Undervoltage, _x.V_PP1V8_DES2_Overvoltage, _x.V_PP1V8_DES2_Undervoltage, _x.V_PP3V3_TXVPHY2_Overvoltage, _x.V_PP3V3_TXVPHY2_Undervoltage, _x.V_PP3V3_S3_Overvoltage, _x.V_PP3V3_S3_Undervoltage, _x.V_PP1V8_S3_Overvoltage, _x.V_PP1V8_S3_Undervoltage, _x.V_PP3V3_S4_Overvoltage, _x.V_PP3V3_S4_Undervoltage, _x.V_PP1V8_S4_Overvoltage, _x.V_PP1V8_S4_Undervoltage, _x.P14V_S3_ISEN_Overvoltage, _x.P14V_S3_ISEN_Undervoltage, _x.P14V_S4_ISEN_Overvoltage, _x.P14V_S4_ISEN_Undervoltage, _x.V_PP1V8_MCU2_Overvoltage, _x.V_PP1V8_MCU2_Undervoltage, _x.BAT_IN2_VSENSE_2nd_Overvoltage, _x.BAT_IN2_VSENSE_2nd_Undervoltage, _x.BAT_IN12_VSENSE_Overvoltage, _x.BAT_IN12_VSENSE_Undervoltage, _x.P3V3_MCU12_VSENSE_Overvoltage, _x.P3V3_MCU12_VSENSE_Undervoltage, _x.V_PP1V2_S3_Overvoltage, _x.V_PP1V2_S3_Undervoltage, _x.V_PPVCC_UFS3_2V5_Overvoltage, _x.V_PPVCC_UFS3_2V5_Undervoltage, _x.V_PP1V2_S4_Overvoltage, _x.V_PP1V2_S4_Undervoltage, _x.V_PPVCC_UFS4_2V5_Overvoltage, _x.V_PPVCC_UFS4_2V5_Undervoltage,) = _get_struct_68B().unpack(str[start:end])
      self.BAT_IN2_VSENSE_Overvoltage = bool(self.BAT_IN2_VSENSE_Overvoltage)
      self.BAT_IN2_VSENSE_Undervoltage = bool(self.BAT_IN2_VSENSE_Undervoltage)
      self.BAT_FIN2_DIO_VSENSE_Overvoltage = bool(self.BAT_FIN2_DIO_VSENSE_Overvoltage)
      self.BAT_FIN2_DIO_VSENSE_Undervoltage = bool(self.BAT_FIN2_DIO_VSENSE_Undervoltage)
      self.P14V_MAIN2_VSENSE_Overvoltage = bool(self.P14V_MAIN2_VSENSE_Overvoltage)
      self.P14V_MAIN2_VSENSE_Undervoltage = bool(self.P14V_MAIN2_VSENSE_Undervoltage)
      self.P5V8_TLF2_VSENSE_Overvoltage = bool(self.P5V8_TLF2_VSENSE_Overvoltage)
      self.P5V8_TLF2_VSENSE_Undervoltage = bool(self.P5V8_TLF2_VSENSE_Undervoltage)
      self.IBAT2_OUT_Overvoltage = bool(self.IBAT2_OUT_Overvoltage)
      self.IBAT2_OUT_Undervoltage = bool(self.IBAT2_OUT_Undervoltage)
      self.V_PP3V3_CHCAN2_Overvoltage = bool(self.V_PP3V3_CHCAN2_Overvoltage)
      self.V_PP3V3_CHCAN2_Undervoltage = bool(self.V_PP3V3_CHCAN2_Undervoltage)
      self.V_PP5V_MAIN2_Overvoltage = bool(self.V_PP5V_MAIN2_Overvoltage)
      self.V_PP5V_MAIN2_Undervoltage = bool(self.V_PP5V_MAIN2_Undervoltage)
      self.V_PP14V_S3_Overvoltage = bool(self.V_PP14V_S3_Overvoltage)
      self.V_PP14V_S3_Undervoltage = bool(self.V_PP14V_S3_Undervoltage)
      self.V_PP5V_S3_Overvoltage = bool(self.V_PP5V_S3_Overvoltage)
      self.V_PP5V_S3_Undervoltage = bool(self.V_PP5V_S3_Undervoltage)
      self.V_PP14V_S4_Overvoltage = bool(self.V_PP14V_S4_Overvoltage)
      self.V_PP14V_S4_Undervoltage = bool(self.V_PP14V_S4_Undervoltage)
      self.V_PP5V_S4_Overvoltage = bool(self.V_PP5V_S4_Overvoltage)
      self.V_PP5V_S4_Undervoltage = bool(self.V_PP5V_S4_Undervoltage)
      self.V_PP12V_REG2_Overvoltage = bool(self.V_PP12V_REG2_Overvoltage)
      self.V_PP12V_REG2_Undervoltage = bool(self.V_PP12V_REG2_Undervoltage)
      self.V_PP3V3_MISC2_Overvoltage = bool(self.V_PP3V3_MISC2_Overvoltage)
      self.V_PP3V3_MISC2_Undervoltage = bool(self.V_PP3V3_MISC2_Undervoltage)
      self.V_PP1V05_SPR2_Overvoltage = bool(self.V_PP1V05_SPR2_Overvoltage)
      self.V_PP1V05_SPR2_Undervoltage = bool(self.V_PP1V05_SPR2_Undervoltage)
      self.V_PP1V5_SPR2_Overvoltage = bool(self.V_PP1V5_SPR2_Overvoltage)
      self.V_PP1V5_SPR2_Undervoltage = bool(self.V_PP1V5_SPR2_Undervoltage)
      self.V_PP1V8_MISC2_Overvoltage = bool(self.V_PP1V8_MISC2_Overvoltage)
      self.V_PP1V8_MISC2_Undervoltage = bool(self.V_PP1V8_MISC2_Undervoltage)
      self.V_PP0V9_PHY2_Overvoltage = bool(self.V_PP0V9_PHY2_Overvoltage)
      self.V_PP0V9_PHY2_Undervoltage = bool(self.V_PP0V9_PHY2_Undervoltage)
      self.V_PP1V2_DES2_Overvoltage = bool(self.V_PP1V2_DES2_Overvoltage)
      self.V_PP1V2_DES2_Undervoltage = bool(self.V_PP1V2_DES2_Undervoltage)
      self.V_PP1V8_DES2_Overvoltage = bool(self.V_PP1V8_DES2_Overvoltage)
      self.V_PP1V8_DES2_Undervoltage = bool(self.V_PP1V8_DES2_Undervoltage)
      self.V_PP3V3_TXVPHY2_Overvoltage = bool(self.V_PP3V3_TXVPHY2_Overvoltage)
      self.V_PP3V3_TXVPHY2_Undervoltage = bool(self.V_PP3V3_TXVPHY2_Undervoltage)
      self.V_PP3V3_S3_Overvoltage = bool(self.V_PP3V3_S3_Overvoltage)
      self.V_PP3V3_S3_Undervoltage = bool(self.V_PP3V3_S3_Undervoltage)
      self.V_PP1V8_S3_Overvoltage = bool(self.V_PP1V8_S3_Overvoltage)
      self.V_PP1V8_S3_Undervoltage = bool(self.V_PP1V8_S3_Undervoltage)
      self.V_PP3V3_S4_Overvoltage = bool(self.V_PP3V3_S4_Overvoltage)
      self.V_PP3V3_S4_Undervoltage = bool(self.V_PP3V3_S4_Undervoltage)
      self.V_PP1V8_S4_Overvoltage = bool(self.V_PP1V8_S4_Overvoltage)
      self.V_PP1V8_S4_Undervoltage = bool(self.V_PP1V8_S4_Undervoltage)
      self.P14V_S3_ISEN_Overvoltage = bool(self.P14V_S3_ISEN_Overvoltage)
      self.P14V_S3_ISEN_Undervoltage = bool(self.P14V_S3_ISEN_Undervoltage)
      self.P14V_S4_ISEN_Overvoltage = bool(self.P14V_S4_ISEN_Overvoltage)
      self.P14V_S4_ISEN_Undervoltage = bool(self.P14V_S4_ISEN_Undervoltage)
      self.V_PP1V8_MCU2_Overvoltage = bool(self.V_PP1V8_MCU2_Overvoltage)
      self.V_PP1V8_MCU2_Undervoltage = bool(self.V_PP1V8_MCU2_Undervoltage)
      self.BAT_IN2_VSENSE_2nd_Overvoltage = bool(self.BAT_IN2_VSENSE_2nd_Overvoltage)
      self.BAT_IN2_VSENSE_2nd_Undervoltage = bool(self.BAT_IN2_VSENSE_2nd_Undervoltage)
      self.BAT_IN12_VSENSE_Overvoltage = bool(self.BAT_IN12_VSENSE_Overvoltage)
      self.BAT_IN12_VSENSE_Undervoltage = bool(self.BAT_IN12_VSENSE_Undervoltage)
      self.P3V3_MCU12_VSENSE_Overvoltage = bool(self.P3V3_MCU12_VSENSE_Overvoltage)
      self.P3V3_MCU12_VSENSE_Undervoltage = bool(self.P3V3_MCU12_VSENSE_Undervoltage)
      self.V_PP1V2_S3_Overvoltage = bool(self.V_PP1V2_S3_Overvoltage)
      self.V_PP1V2_S3_Undervoltage = bool(self.V_PP1V2_S3_Undervoltage)
      self.V_PPVCC_UFS3_2V5_Overvoltage = bool(self.V_PPVCC_UFS3_2V5_Overvoltage)
      self.V_PPVCC_UFS3_2V5_Undervoltage = bool(self.V_PPVCC_UFS3_2V5_Undervoltage)
      self.V_PP1V2_S4_Overvoltage = bool(self.V_PP1V2_S4_Overvoltage)
      self.V_PP1V2_S4_Undervoltage = bool(self.V_PP1V2_S4_Undervoltage)
      self.V_PPVCC_UFS4_2V5_Overvoltage = bool(self.V_PPVCC_UFS4_2V5_Overvoltage)
      self.V_PPVCC_UFS4_2V5_Undervoltage = bool(self.V_PPVCC_UFS4_2V5_Undervoltage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_68B().pack(_x.BAT_IN2_VSENSE_Overvoltage, _x.BAT_IN2_VSENSE_Undervoltage, _x.BAT_FIN2_DIO_VSENSE_Overvoltage, _x.BAT_FIN2_DIO_VSENSE_Undervoltage, _x.P14V_MAIN2_VSENSE_Overvoltage, _x.P14V_MAIN2_VSENSE_Undervoltage, _x.P5V8_TLF2_VSENSE_Overvoltage, _x.P5V8_TLF2_VSENSE_Undervoltage, _x.IBAT2_OUT_Overvoltage, _x.IBAT2_OUT_Undervoltage, _x.V_PP3V3_CHCAN2_Overvoltage, _x.V_PP3V3_CHCAN2_Undervoltage, _x.V_PP5V_MAIN2_Overvoltage, _x.V_PP5V_MAIN2_Undervoltage, _x.V_PP14V_S3_Overvoltage, _x.V_PP14V_S3_Undervoltage, _x.V_PP5V_S3_Overvoltage, _x.V_PP5V_S3_Undervoltage, _x.V_PP14V_S4_Overvoltage, _x.V_PP14V_S4_Undervoltage, _x.V_PP5V_S4_Overvoltage, _x.V_PP5V_S4_Undervoltage, _x.V_PP12V_REG2_Overvoltage, _x.V_PP12V_REG2_Undervoltage, _x.V_PP3V3_MISC2_Overvoltage, _x.V_PP3V3_MISC2_Undervoltage, _x.V_PP1V05_SPR2_Overvoltage, _x.V_PP1V05_SPR2_Undervoltage, _x.V_PP1V5_SPR2_Overvoltage, _x.V_PP1V5_SPR2_Undervoltage, _x.V_PP1V8_MISC2_Overvoltage, _x.V_PP1V8_MISC2_Undervoltage, _x.V_PP0V9_PHY2_Overvoltage, _x.V_PP0V9_PHY2_Undervoltage, _x.V_PP1V2_DES2_Overvoltage, _x.V_PP1V2_DES2_Undervoltage, _x.V_PP1V8_DES2_Overvoltage, _x.V_PP1V8_DES2_Undervoltage, _x.V_PP3V3_TXVPHY2_Overvoltage, _x.V_PP3V3_TXVPHY2_Undervoltage, _x.V_PP3V3_S3_Overvoltage, _x.V_PP3V3_S3_Undervoltage, _x.V_PP1V8_S3_Overvoltage, _x.V_PP1V8_S3_Undervoltage, _x.V_PP3V3_S4_Overvoltage, _x.V_PP3V3_S4_Undervoltage, _x.V_PP1V8_S4_Overvoltage, _x.V_PP1V8_S4_Undervoltage, _x.P14V_S3_ISEN_Overvoltage, _x.P14V_S3_ISEN_Undervoltage, _x.P14V_S4_ISEN_Overvoltage, _x.P14V_S4_ISEN_Undervoltage, _x.V_PP1V8_MCU2_Overvoltage, _x.V_PP1V8_MCU2_Undervoltage, _x.BAT_IN2_VSENSE_2nd_Overvoltage, _x.BAT_IN2_VSENSE_2nd_Undervoltage, _x.BAT_IN12_VSENSE_Overvoltage, _x.BAT_IN12_VSENSE_Undervoltage, _x.P3V3_MCU12_VSENSE_Overvoltage, _x.P3V3_MCU12_VSENSE_Undervoltage, _x.V_PP1V2_S3_Overvoltage, _x.V_PP1V2_S3_Undervoltage, _x.V_PPVCC_UFS3_2V5_Overvoltage, _x.V_PPVCC_UFS3_2V5_Undervoltage, _x.V_PP1V2_S4_Overvoltage, _x.V_PP1V2_S4_Undervoltage, _x.V_PPVCC_UFS4_2V5_Overvoltage, _x.V_PPVCC_UFS4_2V5_Undervoltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.BAT_IN2_VSENSE_Overvoltage, _x.BAT_IN2_VSENSE_Undervoltage, _x.BAT_FIN2_DIO_VSENSE_Overvoltage, _x.BAT_FIN2_DIO_VSENSE_Undervoltage, _x.P14V_MAIN2_VSENSE_Overvoltage, _x.P14V_MAIN2_VSENSE_Undervoltage, _x.P5V8_TLF2_VSENSE_Overvoltage, _x.P5V8_TLF2_VSENSE_Undervoltage, _x.IBAT2_OUT_Overvoltage, _x.IBAT2_OUT_Undervoltage, _x.V_PP3V3_CHCAN2_Overvoltage, _x.V_PP3V3_CHCAN2_Undervoltage, _x.V_PP5V_MAIN2_Overvoltage, _x.V_PP5V_MAIN2_Undervoltage, _x.V_PP14V_S3_Overvoltage, _x.V_PP14V_S3_Undervoltage, _x.V_PP5V_S3_Overvoltage, _x.V_PP5V_S3_Undervoltage, _x.V_PP14V_S4_Overvoltage, _x.V_PP14V_S4_Undervoltage, _x.V_PP5V_S4_Overvoltage, _x.V_PP5V_S4_Undervoltage, _x.V_PP12V_REG2_Overvoltage, _x.V_PP12V_REG2_Undervoltage, _x.V_PP3V3_MISC2_Overvoltage, _x.V_PP3V3_MISC2_Undervoltage, _x.V_PP1V05_SPR2_Overvoltage, _x.V_PP1V05_SPR2_Undervoltage, _x.V_PP1V5_SPR2_Overvoltage, _x.V_PP1V5_SPR2_Undervoltage, _x.V_PP1V8_MISC2_Overvoltage, _x.V_PP1V8_MISC2_Undervoltage, _x.V_PP0V9_PHY2_Overvoltage, _x.V_PP0V9_PHY2_Undervoltage, _x.V_PP1V2_DES2_Overvoltage, _x.V_PP1V2_DES2_Undervoltage, _x.V_PP1V8_DES2_Overvoltage, _x.V_PP1V8_DES2_Undervoltage, _x.V_PP3V3_TXVPHY2_Overvoltage, _x.V_PP3V3_TXVPHY2_Undervoltage, _x.V_PP3V3_S3_Overvoltage, _x.V_PP3V3_S3_Undervoltage, _x.V_PP1V8_S3_Overvoltage, _x.V_PP1V8_S3_Undervoltage, _x.V_PP3V3_S4_Overvoltage, _x.V_PP3V3_S4_Undervoltage, _x.V_PP1V8_S4_Overvoltage, _x.V_PP1V8_S4_Undervoltage, _x.P14V_S3_ISEN_Overvoltage, _x.P14V_S3_ISEN_Undervoltage, _x.P14V_S4_ISEN_Overvoltage, _x.P14V_S4_ISEN_Undervoltage, _x.V_PP1V8_MCU2_Overvoltage, _x.V_PP1V8_MCU2_Undervoltage, _x.BAT_IN2_VSENSE_2nd_Overvoltage, _x.BAT_IN2_VSENSE_2nd_Undervoltage, _x.BAT_IN12_VSENSE_Overvoltage, _x.BAT_IN12_VSENSE_Undervoltage, _x.P3V3_MCU12_VSENSE_Overvoltage, _x.P3V3_MCU12_VSENSE_Undervoltage, _x.V_PP1V2_S3_Overvoltage, _x.V_PP1V2_S3_Undervoltage, _x.V_PPVCC_UFS3_2V5_Overvoltage, _x.V_PPVCC_UFS3_2V5_Undervoltage, _x.V_PP1V2_S4_Overvoltage, _x.V_PP1V2_S4_Undervoltage, _x.V_PPVCC_UFS4_2V5_Overvoltage, _x.V_PPVCC_UFS4_2V5_Undervoltage,) = _get_struct_68B().unpack(str[start:end])
      self.BAT_IN2_VSENSE_Overvoltage = bool(self.BAT_IN2_VSENSE_Overvoltage)
      self.BAT_IN2_VSENSE_Undervoltage = bool(self.BAT_IN2_VSENSE_Undervoltage)
      self.BAT_FIN2_DIO_VSENSE_Overvoltage = bool(self.BAT_FIN2_DIO_VSENSE_Overvoltage)
      self.BAT_FIN2_DIO_VSENSE_Undervoltage = bool(self.BAT_FIN2_DIO_VSENSE_Undervoltage)
      self.P14V_MAIN2_VSENSE_Overvoltage = bool(self.P14V_MAIN2_VSENSE_Overvoltage)
      self.P14V_MAIN2_VSENSE_Undervoltage = bool(self.P14V_MAIN2_VSENSE_Undervoltage)
      self.P5V8_TLF2_VSENSE_Overvoltage = bool(self.P5V8_TLF2_VSENSE_Overvoltage)
      self.P5V8_TLF2_VSENSE_Undervoltage = bool(self.P5V8_TLF2_VSENSE_Undervoltage)
      self.IBAT2_OUT_Overvoltage = bool(self.IBAT2_OUT_Overvoltage)
      self.IBAT2_OUT_Undervoltage = bool(self.IBAT2_OUT_Undervoltage)
      self.V_PP3V3_CHCAN2_Overvoltage = bool(self.V_PP3V3_CHCAN2_Overvoltage)
      self.V_PP3V3_CHCAN2_Undervoltage = bool(self.V_PP3V3_CHCAN2_Undervoltage)
      self.V_PP5V_MAIN2_Overvoltage = bool(self.V_PP5V_MAIN2_Overvoltage)
      self.V_PP5V_MAIN2_Undervoltage = bool(self.V_PP5V_MAIN2_Undervoltage)
      self.V_PP14V_S3_Overvoltage = bool(self.V_PP14V_S3_Overvoltage)
      self.V_PP14V_S3_Undervoltage = bool(self.V_PP14V_S3_Undervoltage)
      self.V_PP5V_S3_Overvoltage = bool(self.V_PP5V_S3_Overvoltage)
      self.V_PP5V_S3_Undervoltage = bool(self.V_PP5V_S3_Undervoltage)
      self.V_PP14V_S4_Overvoltage = bool(self.V_PP14V_S4_Overvoltage)
      self.V_PP14V_S4_Undervoltage = bool(self.V_PP14V_S4_Undervoltage)
      self.V_PP5V_S4_Overvoltage = bool(self.V_PP5V_S4_Overvoltage)
      self.V_PP5V_S4_Undervoltage = bool(self.V_PP5V_S4_Undervoltage)
      self.V_PP12V_REG2_Overvoltage = bool(self.V_PP12V_REG2_Overvoltage)
      self.V_PP12V_REG2_Undervoltage = bool(self.V_PP12V_REG2_Undervoltage)
      self.V_PP3V3_MISC2_Overvoltage = bool(self.V_PP3V3_MISC2_Overvoltage)
      self.V_PP3V3_MISC2_Undervoltage = bool(self.V_PP3V3_MISC2_Undervoltage)
      self.V_PP1V05_SPR2_Overvoltage = bool(self.V_PP1V05_SPR2_Overvoltage)
      self.V_PP1V05_SPR2_Undervoltage = bool(self.V_PP1V05_SPR2_Undervoltage)
      self.V_PP1V5_SPR2_Overvoltage = bool(self.V_PP1V5_SPR2_Overvoltage)
      self.V_PP1V5_SPR2_Undervoltage = bool(self.V_PP1V5_SPR2_Undervoltage)
      self.V_PP1V8_MISC2_Overvoltage = bool(self.V_PP1V8_MISC2_Overvoltage)
      self.V_PP1V8_MISC2_Undervoltage = bool(self.V_PP1V8_MISC2_Undervoltage)
      self.V_PP0V9_PHY2_Overvoltage = bool(self.V_PP0V9_PHY2_Overvoltage)
      self.V_PP0V9_PHY2_Undervoltage = bool(self.V_PP0V9_PHY2_Undervoltage)
      self.V_PP1V2_DES2_Overvoltage = bool(self.V_PP1V2_DES2_Overvoltage)
      self.V_PP1V2_DES2_Undervoltage = bool(self.V_PP1V2_DES2_Undervoltage)
      self.V_PP1V8_DES2_Overvoltage = bool(self.V_PP1V8_DES2_Overvoltage)
      self.V_PP1V8_DES2_Undervoltage = bool(self.V_PP1V8_DES2_Undervoltage)
      self.V_PP3V3_TXVPHY2_Overvoltage = bool(self.V_PP3V3_TXVPHY2_Overvoltage)
      self.V_PP3V3_TXVPHY2_Undervoltage = bool(self.V_PP3V3_TXVPHY2_Undervoltage)
      self.V_PP3V3_S3_Overvoltage = bool(self.V_PP3V3_S3_Overvoltage)
      self.V_PP3V3_S3_Undervoltage = bool(self.V_PP3V3_S3_Undervoltage)
      self.V_PP1V8_S3_Overvoltage = bool(self.V_PP1V8_S3_Overvoltage)
      self.V_PP1V8_S3_Undervoltage = bool(self.V_PP1V8_S3_Undervoltage)
      self.V_PP3V3_S4_Overvoltage = bool(self.V_PP3V3_S4_Overvoltage)
      self.V_PP3V3_S4_Undervoltage = bool(self.V_PP3V3_S4_Undervoltage)
      self.V_PP1V8_S4_Overvoltage = bool(self.V_PP1V8_S4_Overvoltage)
      self.V_PP1V8_S4_Undervoltage = bool(self.V_PP1V8_S4_Undervoltage)
      self.P14V_S3_ISEN_Overvoltage = bool(self.P14V_S3_ISEN_Overvoltage)
      self.P14V_S3_ISEN_Undervoltage = bool(self.P14V_S3_ISEN_Undervoltage)
      self.P14V_S4_ISEN_Overvoltage = bool(self.P14V_S4_ISEN_Overvoltage)
      self.P14V_S4_ISEN_Undervoltage = bool(self.P14V_S4_ISEN_Undervoltage)
      self.V_PP1V8_MCU2_Overvoltage = bool(self.V_PP1V8_MCU2_Overvoltage)
      self.V_PP1V8_MCU2_Undervoltage = bool(self.V_PP1V8_MCU2_Undervoltage)
      self.BAT_IN2_VSENSE_2nd_Overvoltage = bool(self.BAT_IN2_VSENSE_2nd_Overvoltage)
      self.BAT_IN2_VSENSE_2nd_Undervoltage = bool(self.BAT_IN2_VSENSE_2nd_Undervoltage)
      self.BAT_IN12_VSENSE_Overvoltage = bool(self.BAT_IN12_VSENSE_Overvoltage)
      self.BAT_IN12_VSENSE_Undervoltage = bool(self.BAT_IN12_VSENSE_Undervoltage)
      self.P3V3_MCU12_VSENSE_Overvoltage = bool(self.P3V3_MCU12_VSENSE_Overvoltage)
      self.P3V3_MCU12_VSENSE_Undervoltage = bool(self.P3V3_MCU12_VSENSE_Undervoltage)
      self.V_PP1V2_S3_Overvoltage = bool(self.V_PP1V2_S3_Overvoltage)
      self.V_PP1V2_S3_Undervoltage = bool(self.V_PP1V2_S3_Undervoltage)
      self.V_PPVCC_UFS3_2V5_Overvoltage = bool(self.V_PPVCC_UFS3_2V5_Overvoltage)
      self.V_PPVCC_UFS3_2V5_Undervoltage = bool(self.V_PPVCC_UFS3_2V5_Undervoltage)
      self.V_PP1V2_S4_Overvoltage = bool(self.V_PP1V2_S4_Overvoltage)
      self.V_PP1V2_S4_Undervoltage = bool(self.V_PP1V2_S4_Undervoltage)
      self.V_PPVCC_UFS4_2V5_Overvoltage = bool(self.V_PPVCC_UFS4_2V5_Overvoltage)
      self.V_PPVCC_UFS4_2V5_Undervoltage = bool(self.V_PPVCC_UFS4_2V5_Undervoltage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_68B = None
def _get_struct_68B():
    global _struct_68B
    if _struct_68B is None:
        _struct_68B = struct.Struct("<68B")
    return _struct_68B

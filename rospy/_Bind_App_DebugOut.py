# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/Bind_App_DebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Bind_App_DebugOut(genpy.Message):
  _md5sum = "bf20e36c368e8bbc82f57de4d9d38179"
  _type = "rospy_message_converter/Bind_App_DebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool App_check_validity
bool App_is_psap_override
bool App_is_sapa_override
uint32 App_running_feature_type
"""
  __slots__ = ['App_check_validity','App_is_psap_override','App_is_sapa_override','App_running_feature_type']
  _slot_types = ['bool','bool','bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       App_check_validity,App_is_psap_override,App_is_sapa_override,App_running_feature_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Bind_App_DebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.App_check_validity is None:
        self.App_check_validity = False
      if self.App_is_psap_override is None:
        self.App_is_psap_override = False
      if self.App_is_sapa_override is None:
        self.App_is_sapa_override = False
      if self.App_running_feature_type is None:
        self.App_running_feature_type = 0
    else:
      self.App_check_validity = False
      self.App_is_psap_override = False
      self.App_is_sapa_override = False
      self.App_running_feature_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BI().pack(_x.App_check_validity, _x.App_is_psap_override, _x.App_is_sapa_override, _x.App_running_feature_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.App_check_validity, _x.App_is_psap_override, _x.App_is_sapa_override, _x.App_running_feature_type,) = _get_struct_3BI().unpack(str[start:end])
      self.App_check_validity = bool(self.App_check_validity)
      self.App_is_psap_override = bool(self.App_is_psap_override)
      self.App_is_sapa_override = bool(self.App_is_sapa_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BI().pack(_x.App_check_validity, _x.App_is_psap_override, _x.App_is_sapa_override, _x.App_running_feature_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.App_check_validity, _x.App_is_psap_override, _x.App_is_sapa_override, _x.App_running_feature_type,) = _get_struct_3BI().unpack(str[start:end])
      self.App_check_validity = bool(self.App_check_validity)
      self.App_is_psap_override = bool(self.App_is_psap_override)
      self.App_is_sapa_override = bool(self.App_is_sapa_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BI = None
def _get_struct_3BI():
    global _struct_3BI
    if _struct_3BI is None:
        _struct_3BI = struct.Struct("<3BI")
    return _struct_3BI

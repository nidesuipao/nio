# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParSemanticMap.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParSemanticMap(genpy.Message):
  _md5sum = "4c4bd6472a19ffb4b19f48cbfbb9b307"
  _type = "rospy_message_converter/ParSemanticMap"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParkingInInfo parking_in
ParkingOutInfo parking_out
NodeInfo node_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ParkingInInfo
ParkSlot[] slots

================================================================================
MSG: rospy_message_converter/ParkSlot
SlotBase slot
bool left_corner_exist
ParPoint left_corner_pt1
ParPoint left_corner_pt2
bool right_corner_exist
ParPoint right_corner_pt1
ParPoint right_corner_pt2
bool curb_exist
ParPoint curb_pt1
ParPoint curb_pt2
bool slot_bumper
ParPoint slot_bumper_pt1
ParPoint slot_bumper_pt2
ParPoint left_corner_pt3
ParPoint right_corner_pt3
bool corner_pt3_exist
ParPoint virtual_channel_pt1
ParPoint virtual_channel_pt2
bool virtual_channel_exist
int32 left_corner_type
int32 right_corner_type
uint32 slot_update_count
bool replan_suggest

================================================================================
MSG: rospy_message_converter/SlotBase
int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ParkingOutInfo
bool left_obstacle_exist
bool right_obstacle_exist
bool front_obstacle_exist
ParPoint left_obstacle_point
ParPoint right_obstacle_point
float32 front_obstacle_distance
ParkSlot[] slots

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer
"""
  __slots__ = ['parking_in','parking_out','node_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/ParkingInInfo','rospy_message_converter/ParkingOutInfo','rospy_message_converter/NodeInfo','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       parking_in,parking_out,node_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParSemanticMap, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.parking_in is None:
        self.parking_in = rospy_message_converter.msg.ParkingInInfo()
      if self.parking_out is None:
        self.parking_out = rospy_message_converter.msg.ParkingOutInfo()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.parking_in = rospy_message_converter.msg.ParkingInInfo()
      self.parking_out = rospy_message_converter.msg.ParkingOutInfo()
      self.node_info = rospy_message_converter.msg.NodeInfo()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.parking_in.slots)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_in.slots:
        _v1 = val1.slot
        _x = _v1
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v2 = _v1.pt1
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.pt2
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v4 = _v1.pt3
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v5 = _v1.pt4
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v1
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v6 = _v1.VehPos
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v1
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = val1.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v7 = val1.left_corner_pt1
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v8 = val1.left_corner_pt2
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v9 = val1.right_corner_pt1
        _x = _v9
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v10 = val1.right_corner_pt2
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v11 = val1.curb_pt1
        _x = _v11
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v12 = val1.curb_pt2
        _x = _v12
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v13 = val1.slot_bumper_pt1
        _x = _v13
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v14 = val1.slot_bumper_pt2
        _x = _v14
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v15 = val1.left_corner_pt3
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v16 = val1.right_corner_pt3
        _x = _v16
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v17 = val1.virtual_channel_pt1
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v18 = val1.virtual_channel_pt2
        _x = _v18
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
      _x = self
      buff.write(_get_struct_3B7f().pack(_x.parking_out.left_obstacle_exist, _x.parking_out.right_obstacle_exist, _x.parking_out.front_obstacle_exist, _x.parking_out.left_obstacle_point.x, _x.parking_out.left_obstacle_point.y, _x.parking_out.left_obstacle_point.z, _x.parking_out.right_obstacle_point.x, _x.parking_out.right_obstacle_point.y, _x.parking_out.right_obstacle_point.z, _x.parking_out.front_obstacle_distance))
      length = len(self.parking_out.slots)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_out.slots:
        _v19 = val1.slot
        _x = _v19
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v20 = _v19.pt1
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v21 = _v19.pt2
        _x = _v21
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v22 = _v19.pt3
        _x = _v22
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v23 = _v19.pt4
        _x = _v23
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v19
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v24 = _v19.VehPos
        _x = _v24
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v19
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = val1.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v25 = val1.left_corner_pt1
        _x = _v25
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v26 = val1.left_corner_pt2
        _x = _v26
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v27 = val1.right_corner_pt1
        _x = _v27
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v28 = val1.right_corner_pt2
        _x = _v28
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v29 = val1.curb_pt1
        _x = _v29
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v30 = val1.curb_pt2
        _x = _v30
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v31 = val1.slot_bumper_pt1
        _x = _v31
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v32 = val1.slot_bumper_pt2
        _x = _v32
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v33 = val1.left_corner_pt3
        _x = _v33
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v34 = val1.right_corner_pt3
        _x = _v34
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v35 = val1.virtual_channel_pt1
        _x = _v35
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v36 = val1.virtual_channel_pt2
        _x = _v36
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
      _x = self
      buff.write(_get_struct_2i().pack(_x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.node_info.buffer))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parking_in is None:
        self.parking_in = rospy_message_converter.msg.ParkingInInfo()
      if self.parking_out is None:
        self.parking_out = rospy_message_converter.msg.ParkingOutInfo()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_in.slots = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParkSlot()
        _v37 = val1.slot
        _x = _v37
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v38 = _v37.pt1
        _x = _v38
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v39 = _v37.pt2
        _x = _v39
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v40 = _v37.pt3
        _x = _v40
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v41 = _v37.pt4
        _x = _v41
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v37
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v42 = _v37.VehPos
        _x = _v42
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v37
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (val1.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.left_corner_exist = bool(val1.left_corner_exist)
        _v43 = val1.left_corner_pt1
        _x = _v43
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v44 = val1.left_corner_pt2
        _x = _v44
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.right_corner_exist = bool(val1.right_corner_exist)
        _v45 = val1.right_corner_pt1
        _x = _v45
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v46 = val1.right_corner_pt2
        _x = _v46
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.curb_exist,) = _get_struct_B().unpack(str[start:end])
        val1.curb_exist = bool(val1.curb_exist)
        _v47 = val1.curb_pt1
        _x = _v47
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v48 = val1.curb_pt2
        _x = _v48
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        val1.slot_bumper = bool(val1.slot_bumper)
        _v49 = val1.slot_bumper_pt1
        _x = _v49
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v50 = val1.slot_bumper_pt2
        _x = _v50
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v51 = val1.left_corner_pt3
        _x = _v51
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v52 = val1.right_corner_pt3
        _x = _v52
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        val1.corner_pt3_exist = bool(val1.corner_pt3_exist)
        _v53 = val1.virtual_channel_pt1
        _x = _v53
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v54 = val1.virtual_channel_pt2
        _x = _v54
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        val1.virtual_channel_exist = bool(val1.virtual_channel_exist)
        val1.replan_suggest = bool(val1.replan_suggest)
        self.parking_in.slots.append(val1)
      _x = self
      start = end
      end += 31
      (_x.parking_out.left_obstacle_exist, _x.parking_out.right_obstacle_exist, _x.parking_out.front_obstacle_exist, _x.parking_out.left_obstacle_point.x, _x.parking_out.left_obstacle_point.y, _x.parking_out.left_obstacle_point.z, _x.parking_out.right_obstacle_point.x, _x.parking_out.right_obstacle_point.y, _x.parking_out.right_obstacle_point.z, _x.parking_out.front_obstacle_distance,) = _get_struct_3B7f().unpack(str[start:end])
      self.parking_out.left_obstacle_exist = bool(self.parking_out.left_obstacle_exist)
      self.parking_out.right_obstacle_exist = bool(self.parking_out.right_obstacle_exist)
      self.parking_out.front_obstacle_exist = bool(self.parking_out.front_obstacle_exist)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_out.slots = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParkSlot()
        _v55 = val1.slot
        _x = _v55
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v56 = _v55.pt1
        _x = _v56
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v57 = _v55.pt2
        _x = _v57
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v58 = _v55.pt3
        _x = _v58
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v59 = _v55.pt4
        _x = _v59
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v55
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v60 = _v55.VehPos
        _x = _v60
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v55
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (val1.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.left_corner_exist = bool(val1.left_corner_exist)
        _v61 = val1.left_corner_pt1
        _x = _v61
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v62 = val1.left_corner_pt2
        _x = _v62
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.right_corner_exist = bool(val1.right_corner_exist)
        _v63 = val1.right_corner_pt1
        _x = _v63
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v64 = val1.right_corner_pt2
        _x = _v64
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.curb_exist,) = _get_struct_B().unpack(str[start:end])
        val1.curb_exist = bool(val1.curb_exist)
        _v65 = val1.curb_pt1
        _x = _v65
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v66 = val1.curb_pt2
        _x = _v66
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        val1.slot_bumper = bool(val1.slot_bumper)
        _v67 = val1.slot_bumper_pt1
        _x = _v67
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v68 = val1.slot_bumper_pt2
        _x = _v68
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v69 = val1.left_corner_pt3
        _x = _v69
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v70 = val1.right_corner_pt3
        _x = _v70
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        val1.corner_pt3_exist = bool(val1.corner_pt3_exist)
        _v71 = val1.virtual_channel_pt1
        _x = _v71
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v72 = val1.virtual_channel_pt2
        _x = _v72
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        val1.virtual_channel_exist = bool(val1.virtual_channel_exist)
        val1.replan_suggest = bool(val1.replan_suggest)
        self.parking_out.slots.append(val1)
      _x = self
      start = end
      end += 8
      (_x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.parking_in.slots)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_in.slots:
        _v73 = val1.slot
        _x = _v73
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v74 = _v73.pt1
        _x = _v74
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v75 = _v73.pt2
        _x = _v75
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v76 = _v73.pt3
        _x = _v76
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v77 = _v73.pt4
        _x = _v77
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v73
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v78 = _v73.VehPos
        _x = _v78
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v73
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = val1.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v79 = val1.left_corner_pt1
        _x = _v79
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v80 = val1.left_corner_pt2
        _x = _v80
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v81 = val1.right_corner_pt1
        _x = _v81
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v82 = val1.right_corner_pt2
        _x = _v82
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v83 = val1.curb_pt1
        _x = _v83
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v84 = val1.curb_pt2
        _x = _v84
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v85 = val1.slot_bumper_pt1
        _x = _v85
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v86 = val1.slot_bumper_pt2
        _x = _v86
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v87 = val1.left_corner_pt3
        _x = _v87
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v88 = val1.right_corner_pt3
        _x = _v88
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v89 = val1.virtual_channel_pt1
        _x = _v89
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v90 = val1.virtual_channel_pt2
        _x = _v90
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
      _x = self
      buff.write(_get_struct_3B7f().pack(_x.parking_out.left_obstacle_exist, _x.parking_out.right_obstacle_exist, _x.parking_out.front_obstacle_exist, _x.parking_out.left_obstacle_point.x, _x.parking_out.left_obstacle_point.y, _x.parking_out.left_obstacle_point.z, _x.parking_out.right_obstacle_point.x, _x.parking_out.right_obstacle_point.y, _x.parking_out.right_obstacle_point.z, _x.parking_out.front_obstacle_distance))
      length = len(self.parking_out.slots)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_out.slots:
        _v91 = val1.slot
        _x = _v91
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v92 = _v91.pt1
        _x = _v92
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v93 = _v91.pt2
        _x = _v93
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v94 = _v91.pt3
        _x = _v94
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v95 = _v91.pt4
        _x = _v95
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v91
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v96 = _v91.VehPos
        _x = _v96
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v91
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = val1.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v97 = val1.left_corner_pt1
        _x = _v97
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v98 = val1.left_corner_pt2
        _x = _v98
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v99 = val1.right_corner_pt1
        _x = _v99
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v100 = val1.right_corner_pt2
        _x = _v100
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v101 = val1.curb_pt1
        _x = _v101
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v102 = val1.curb_pt2
        _x = _v102
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v103 = val1.slot_bumper_pt1
        _x = _v103
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v104 = val1.slot_bumper_pt2
        _x = _v104
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v105 = val1.left_corner_pt3
        _x = _v105
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v106 = val1.right_corner_pt3
        _x = _v106
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v107 = val1.virtual_channel_pt1
        _x = _v107
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v108 = val1.virtual_channel_pt2
        _x = _v108
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
      _x = self
      buff.write(_get_struct_2i().pack(_x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.node_info.buffer.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parking_in is None:
        self.parking_in = rospy_message_converter.msg.ParkingInInfo()
      if self.parking_out is None:
        self.parking_out = rospy_message_converter.msg.ParkingOutInfo()
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_in.slots = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParkSlot()
        _v109 = val1.slot
        _x = _v109
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v110 = _v109.pt1
        _x = _v110
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v111 = _v109.pt2
        _x = _v111
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v112 = _v109.pt3
        _x = _v112
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v113 = _v109.pt4
        _x = _v113
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v109
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v114 = _v109.VehPos
        _x = _v114
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v109
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (val1.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.left_corner_exist = bool(val1.left_corner_exist)
        _v115 = val1.left_corner_pt1
        _x = _v115
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v116 = val1.left_corner_pt2
        _x = _v116
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.right_corner_exist = bool(val1.right_corner_exist)
        _v117 = val1.right_corner_pt1
        _x = _v117
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v118 = val1.right_corner_pt2
        _x = _v118
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.curb_exist,) = _get_struct_B().unpack(str[start:end])
        val1.curb_exist = bool(val1.curb_exist)
        _v119 = val1.curb_pt1
        _x = _v119
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v120 = val1.curb_pt2
        _x = _v120
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        val1.slot_bumper = bool(val1.slot_bumper)
        _v121 = val1.slot_bumper_pt1
        _x = _v121
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v122 = val1.slot_bumper_pt2
        _x = _v122
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v123 = val1.left_corner_pt3
        _x = _v123
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v124 = val1.right_corner_pt3
        _x = _v124
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        val1.corner_pt3_exist = bool(val1.corner_pt3_exist)
        _v125 = val1.virtual_channel_pt1
        _x = _v125
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v126 = val1.virtual_channel_pt2
        _x = _v126
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        val1.virtual_channel_exist = bool(val1.virtual_channel_exist)
        val1.replan_suggest = bool(val1.replan_suggest)
        self.parking_in.slots.append(val1)
      _x = self
      start = end
      end += 31
      (_x.parking_out.left_obstacle_exist, _x.parking_out.right_obstacle_exist, _x.parking_out.front_obstacle_exist, _x.parking_out.left_obstacle_point.x, _x.parking_out.left_obstacle_point.y, _x.parking_out.left_obstacle_point.z, _x.parking_out.right_obstacle_point.x, _x.parking_out.right_obstacle_point.y, _x.parking_out.right_obstacle_point.z, _x.parking_out.front_obstacle_distance,) = _get_struct_3B7f().unpack(str[start:end])
      self.parking_out.left_obstacle_exist = bool(self.parking_out.left_obstacle_exist)
      self.parking_out.right_obstacle_exist = bool(self.parking_out.right_obstacle_exist)
      self.parking_out.front_obstacle_exist = bool(self.parking_out.front_obstacle_exist)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_out.slots = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParkSlot()
        _v127 = val1.slot
        _x = _v127
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v128 = _v127.pt1
        _x = _v128
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v129 = _v127.pt2
        _x = _v129
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v130 = _v127.pt3
        _x = _v130
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v131 = _v127.pt4
        _x = _v131
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v127
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v132 = _v127.VehPos
        _x = _v132
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v127
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (val1.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.left_corner_exist = bool(val1.left_corner_exist)
        _v133 = val1.left_corner_pt1
        _x = _v133
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v134 = val1.left_corner_pt2
        _x = _v134
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        val1.right_corner_exist = bool(val1.right_corner_exist)
        _v135 = val1.right_corner_pt1
        _x = _v135
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v136 = val1.right_corner_pt2
        _x = _v136
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.curb_exist,) = _get_struct_B().unpack(str[start:end])
        val1.curb_exist = bool(val1.curb_exist)
        _v137 = val1.curb_pt1
        _x = _v137
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v138 = val1.curb_pt2
        _x = _v138
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        val1.slot_bumper = bool(val1.slot_bumper)
        _v139 = val1.slot_bumper_pt1
        _x = _v139
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v140 = val1.slot_bumper_pt2
        _x = _v140
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v141 = val1.left_corner_pt3
        _x = _v141
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v142 = val1.right_corner_pt3
        _x = _v142
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        val1.corner_pt3_exist = bool(val1.corner_pt3_exist)
        _v143 = val1.virtual_channel_pt1
        _x = _v143
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v144 = val1.virtual_channel_pt2
        _x = _v144
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        val1.virtual_channel_exist = bool(val1.virtual_channel_exist)
        val1.replan_suggest = bool(val1.replan_suggest)
        self.parking_out.slots.append(val1)
      _x = self
      start = end
      end += 8
      (_x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i2f = None
def _get_struct_2i2f():
    global _struct_2i2f
    if _struct_2i2f is None:
        _struct_2i2f = struct.Struct("<2i2f")
    return _struct_2i2f
_struct_3B7f = None
def _get_struct_3B7f():
    global _struct_3B7f
    if _struct_3B7f is None:
        _struct_3B7f = struct.Struct("<3B7f")
    return _struct_3B7f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2iIB = None
def _get_struct_B2iIB():
    global _struct_B2iIB
    if _struct_B2iIB is None:
        _struct_B2iIB = struct.Struct("<B2iIB")
    return _struct_B2iIB
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_f3if = None
def _get_struct_f3if():
    global _struct_f3if
    if _struct_f3if is None:
        _struct_f3if = struct.Struct("<f3if")
    return _struct_f3if

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BCUFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BCUFimInfo(genpy.Message):
  _md5sum = "4735fc90badfd944b34d041c66558668"
  _type = "rospy_message_converter/BCUFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool FIM_CHS1_BCU_CAN_Error
bool FIM_CHS1_BCU_01_MsgError
bool FIM_CHS1_BCU_02_MsgError
bool FIM_CHS1_BCU_03_MsgError
bool FIM_CHS1_BCU_04_MsgError
bool FIM_CHS1_BCU_07_MsgError
bool FIM_CHS1_BCU_08_MsgError
bool FIM_CHS1_BCU_09_MsgError
bool FIM_CHS1_BCU_16_MsgError
bool FIM_CHS2_BCU_CAN_Error
bool FIM_CHS2_BCU_16_MsgError
"""
  __slots__ = ['FIM_CHS1_BCU_CAN_Error','FIM_CHS1_BCU_01_MsgError','FIM_CHS1_BCU_02_MsgError','FIM_CHS1_BCU_03_MsgError','FIM_CHS1_BCU_04_MsgError','FIM_CHS1_BCU_07_MsgError','FIM_CHS1_BCU_08_MsgError','FIM_CHS1_BCU_09_MsgError','FIM_CHS1_BCU_16_MsgError','FIM_CHS2_BCU_CAN_Error','FIM_CHS2_BCU_16_MsgError']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FIM_CHS1_BCU_CAN_Error,FIM_CHS1_BCU_01_MsgError,FIM_CHS1_BCU_02_MsgError,FIM_CHS1_BCU_03_MsgError,FIM_CHS1_BCU_04_MsgError,FIM_CHS1_BCU_07_MsgError,FIM_CHS1_BCU_08_MsgError,FIM_CHS1_BCU_09_MsgError,FIM_CHS1_BCU_16_MsgError,FIM_CHS2_BCU_CAN_Error,FIM_CHS2_BCU_16_MsgError

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BCUFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FIM_CHS1_BCU_CAN_Error is None:
        self.FIM_CHS1_BCU_CAN_Error = False
      if self.FIM_CHS1_BCU_01_MsgError is None:
        self.FIM_CHS1_BCU_01_MsgError = False
      if self.FIM_CHS1_BCU_02_MsgError is None:
        self.FIM_CHS1_BCU_02_MsgError = False
      if self.FIM_CHS1_BCU_03_MsgError is None:
        self.FIM_CHS1_BCU_03_MsgError = False
      if self.FIM_CHS1_BCU_04_MsgError is None:
        self.FIM_CHS1_BCU_04_MsgError = False
      if self.FIM_CHS1_BCU_07_MsgError is None:
        self.FIM_CHS1_BCU_07_MsgError = False
      if self.FIM_CHS1_BCU_08_MsgError is None:
        self.FIM_CHS1_BCU_08_MsgError = False
      if self.FIM_CHS1_BCU_09_MsgError is None:
        self.FIM_CHS1_BCU_09_MsgError = False
      if self.FIM_CHS1_BCU_16_MsgError is None:
        self.FIM_CHS1_BCU_16_MsgError = False
      if self.FIM_CHS2_BCU_CAN_Error is None:
        self.FIM_CHS2_BCU_CAN_Error = False
      if self.FIM_CHS2_BCU_16_MsgError is None:
        self.FIM_CHS2_BCU_16_MsgError = False
    else:
      self.FIM_CHS1_BCU_CAN_Error = False
      self.FIM_CHS1_BCU_01_MsgError = False
      self.FIM_CHS1_BCU_02_MsgError = False
      self.FIM_CHS1_BCU_03_MsgError = False
      self.FIM_CHS1_BCU_04_MsgError = False
      self.FIM_CHS1_BCU_07_MsgError = False
      self.FIM_CHS1_BCU_08_MsgError = False
      self.FIM_CHS1_BCU_09_MsgError = False
      self.FIM_CHS1_BCU_16_MsgError = False
      self.FIM_CHS2_BCU_CAN_Error = False
      self.FIM_CHS2_BCU_16_MsgError = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.FIM_CHS1_BCU_CAN_Error, _x.FIM_CHS1_BCU_01_MsgError, _x.FIM_CHS1_BCU_02_MsgError, _x.FIM_CHS1_BCU_03_MsgError, _x.FIM_CHS1_BCU_04_MsgError, _x.FIM_CHS1_BCU_07_MsgError, _x.FIM_CHS1_BCU_08_MsgError, _x.FIM_CHS1_BCU_09_MsgError, _x.FIM_CHS1_BCU_16_MsgError, _x.FIM_CHS2_BCU_CAN_Error, _x.FIM_CHS2_BCU_16_MsgError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.FIM_CHS1_BCU_CAN_Error, _x.FIM_CHS1_BCU_01_MsgError, _x.FIM_CHS1_BCU_02_MsgError, _x.FIM_CHS1_BCU_03_MsgError, _x.FIM_CHS1_BCU_04_MsgError, _x.FIM_CHS1_BCU_07_MsgError, _x.FIM_CHS1_BCU_08_MsgError, _x.FIM_CHS1_BCU_09_MsgError, _x.FIM_CHS1_BCU_16_MsgError, _x.FIM_CHS2_BCU_CAN_Error, _x.FIM_CHS2_BCU_16_MsgError,) = _get_struct_11B().unpack(str[start:end])
      self.FIM_CHS1_BCU_CAN_Error = bool(self.FIM_CHS1_BCU_CAN_Error)
      self.FIM_CHS1_BCU_01_MsgError = bool(self.FIM_CHS1_BCU_01_MsgError)
      self.FIM_CHS1_BCU_02_MsgError = bool(self.FIM_CHS1_BCU_02_MsgError)
      self.FIM_CHS1_BCU_03_MsgError = bool(self.FIM_CHS1_BCU_03_MsgError)
      self.FIM_CHS1_BCU_04_MsgError = bool(self.FIM_CHS1_BCU_04_MsgError)
      self.FIM_CHS1_BCU_07_MsgError = bool(self.FIM_CHS1_BCU_07_MsgError)
      self.FIM_CHS1_BCU_08_MsgError = bool(self.FIM_CHS1_BCU_08_MsgError)
      self.FIM_CHS1_BCU_09_MsgError = bool(self.FIM_CHS1_BCU_09_MsgError)
      self.FIM_CHS1_BCU_16_MsgError = bool(self.FIM_CHS1_BCU_16_MsgError)
      self.FIM_CHS2_BCU_CAN_Error = bool(self.FIM_CHS2_BCU_CAN_Error)
      self.FIM_CHS2_BCU_16_MsgError = bool(self.FIM_CHS2_BCU_16_MsgError)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.FIM_CHS1_BCU_CAN_Error, _x.FIM_CHS1_BCU_01_MsgError, _x.FIM_CHS1_BCU_02_MsgError, _x.FIM_CHS1_BCU_03_MsgError, _x.FIM_CHS1_BCU_04_MsgError, _x.FIM_CHS1_BCU_07_MsgError, _x.FIM_CHS1_BCU_08_MsgError, _x.FIM_CHS1_BCU_09_MsgError, _x.FIM_CHS1_BCU_16_MsgError, _x.FIM_CHS2_BCU_CAN_Error, _x.FIM_CHS2_BCU_16_MsgError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.FIM_CHS1_BCU_CAN_Error, _x.FIM_CHS1_BCU_01_MsgError, _x.FIM_CHS1_BCU_02_MsgError, _x.FIM_CHS1_BCU_03_MsgError, _x.FIM_CHS1_BCU_04_MsgError, _x.FIM_CHS1_BCU_07_MsgError, _x.FIM_CHS1_BCU_08_MsgError, _x.FIM_CHS1_BCU_09_MsgError, _x.FIM_CHS1_BCU_16_MsgError, _x.FIM_CHS2_BCU_CAN_Error, _x.FIM_CHS2_BCU_16_MsgError,) = _get_struct_11B().unpack(str[start:end])
      self.FIM_CHS1_BCU_CAN_Error = bool(self.FIM_CHS1_BCU_CAN_Error)
      self.FIM_CHS1_BCU_01_MsgError = bool(self.FIM_CHS1_BCU_01_MsgError)
      self.FIM_CHS1_BCU_02_MsgError = bool(self.FIM_CHS1_BCU_02_MsgError)
      self.FIM_CHS1_BCU_03_MsgError = bool(self.FIM_CHS1_BCU_03_MsgError)
      self.FIM_CHS1_BCU_04_MsgError = bool(self.FIM_CHS1_BCU_04_MsgError)
      self.FIM_CHS1_BCU_07_MsgError = bool(self.FIM_CHS1_BCU_07_MsgError)
      self.FIM_CHS1_BCU_08_MsgError = bool(self.FIM_CHS1_BCU_08_MsgError)
      self.FIM_CHS1_BCU_09_MsgError = bool(self.FIM_CHS1_BCU_09_MsgError)
      self.FIM_CHS1_BCU_16_MsgError = bool(self.FIM_CHS1_BCU_16_MsgError)
      self.FIM_CHS2_BCU_CAN_Error = bool(self.FIM_CHS2_BCU_CAN_Error)
      self.FIM_CHS2_BCU_16_MsgError = bool(self.FIM_CHS2_BCU_16_MsgError)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11B = None
def _get_struct_11B():
    global _struct_11B
    if _struct_11B is None:
        _struct_11B = struct.Struct("<11B")
    return _struct_11B

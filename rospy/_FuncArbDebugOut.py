# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FuncArbDebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FuncArbDebugOut(genpy.Message):
  _md5sum = "78301fcd9e9bef06cb1be3eee50208ce"
  _type = "rospy_message_converter/FuncArbDebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FeatureFuncData[] func_data
bool da_req_actv
bool pa_req_actv
int32 aa_base_algo_sts
int32 last_aa_base_algo_mode
int32 mode_change_trig
bool shutdown_req
bool da_general_enable
FeatureFuncWti wti_trig
FeatureFuncSts current_lat_func
FeatureFuncSts current_long_func
FeatureFuncSts target_lat_func
FeatureFuncSts target_long_func
int32 arb_running_st
bool hpms_full_mode_succeed
bool hpms_full_mode_failed
bool hpms_default_mode_succeed
bool hpms_default_mode_failed
ArbMsgSts msg_sts
CameraReqOut camera_req
AaBaseAlgoReqOut aa_base_algo_req
HmpsReqOut hpms_req
FamHmiReqOut hmi_req
bool pa_general_enable
bool hero_button_trig
bool is_resume_actv
int32 lat_output_feature_type
int32 long_output_feature_type
FeatureFuncSts[] func_sts
float64[] reserved
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FeatureFuncData
FeatureFuncConditions conditions
FeatureFuncWti wti
FeatureFuncReqOut req_out

================================================================================
MSG: rospy_message_converter/FeatureFuncConditions
bool req_updated
bool general_enable
bool activate_enable
bool blocked
bool actv_trig
bool deactv_trig
bool control_lost

================================================================================
MSG: rospy_message_converter/FeatureFuncWti
bool trig
uint32 wti

================================================================================
MSG: rospy_message_converter/FeatureFuncReqOut
int32 id
string name
int32 req

================================================================================
MSG: rospy_message_converter/FeatureFuncSts
int32 id
string name
int32 sts
int32 req_func_id

================================================================================
MSG: rospy_message_converter/ArbMsgSts
int32 msg_sts_fct_out
int32 msg_sts_fcts_out
int32 msg_sts_parking_out
int32 msg_sts_dms_eas
int32 msg_sts_aa_base_algo_sts
int32 msg_sts_hw_mode
int32 msg_sts_hw_mode_rsp
int32 msg_sts_soc_shutdown_req
int32 msg_sts_camera_sts
int32 msg_sts_camera_sal_sts
int32 msg_sts_veh_10ms
int32 msg_sts_veh_50ms
int32 msg_sts_dms_can
int32 msg_sts_aa_nbc
int32[] msg_sts_reserved

================================================================================
MSG: rospy_message_converter/CameraReqOut
bool side_camera_req
bool camera_sal_req
int32 camera_sal_req_sts

================================================================================
MSG: rospy_message_converter/AaBaseAlgoReqOut
bool is_req_actv
int32 req
int32 req_sts

================================================================================
MSG: rospy_message_converter/HmpsReqOut
bool is_req_actv
int32 req
int32 req_sts
int32 shutdown_rsp

================================================================================
MSG: rospy_message_converter/FamHmiReqOut
bool show_set_360_ap
bool show_set_cha
bool eco_plus_mode_req_sts
"""
  __slots__ = ['func_data','da_req_actv','pa_req_actv','aa_base_algo_sts','last_aa_base_algo_mode','mode_change_trig','shutdown_req','da_general_enable','wti_trig','current_lat_func','current_long_func','target_lat_func','target_long_func','arb_running_st','hpms_full_mode_succeed','hpms_full_mode_failed','hpms_default_mode_succeed','hpms_default_mode_failed','msg_sts','camera_req','aa_base_algo_req','hpms_req','hmi_req','pa_general_enable','hero_button_trig','is_resume_actv','lat_output_feature_type','long_output_feature_type','func_sts','reserved','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/FeatureFuncData[]','bool','bool','int32','int32','int32','bool','bool','rospy_message_converter/FeatureFuncWti','rospy_message_converter/FeatureFuncSts','rospy_message_converter/FeatureFuncSts','rospy_message_converter/FeatureFuncSts','rospy_message_converter/FeatureFuncSts','int32','bool','bool','bool','bool','rospy_message_converter/ArbMsgSts','rospy_message_converter/CameraReqOut','rospy_message_converter/AaBaseAlgoReqOut','rospy_message_converter/HmpsReqOut','rospy_message_converter/FamHmiReqOut','bool','bool','bool','int32','int32','rospy_message_converter/FeatureFuncSts[]','float64[]','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       func_data,da_req_actv,pa_req_actv,aa_base_algo_sts,last_aa_base_algo_mode,mode_change_trig,shutdown_req,da_general_enable,wti_trig,current_lat_func,current_long_func,target_lat_func,target_long_func,arb_running_st,hpms_full_mode_succeed,hpms_full_mode_failed,hpms_default_mode_succeed,hpms_default_mode_failed,msg_sts,camera_req,aa_base_algo_req,hpms_req,hmi_req,pa_general_enable,hero_button_trig,is_resume_actv,lat_output_feature_type,long_output_feature_type,func_sts,reserved,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FuncArbDebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.func_data is None:
        self.func_data = []
      if self.da_req_actv is None:
        self.da_req_actv = False
      if self.pa_req_actv is None:
        self.pa_req_actv = False
      if self.aa_base_algo_sts is None:
        self.aa_base_algo_sts = 0
      if self.last_aa_base_algo_mode is None:
        self.last_aa_base_algo_mode = 0
      if self.mode_change_trig is None:
        self.mode_change_trig = 0
      if self.shutdown_req is None:
        self.shutdown_req = False
      if self.da_general_enable is None:
        self.da_general_enable = False
      if self.wti_trig is None:
        self.wti_trig = rospy_message_converter.msg.FeatureFuncWti()
      if self.current_lat_func is None:
        self.current_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.current_long_func is None:
        self.current_long_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.target_lat_func is None:
        self.target_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.target_long_func is None:
        self.target_long_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.arb_running_st is None:
        self.arb_running_st = 0
      if self.hpms_full_mode_succeed is None:
        self.hpms_full_mode_succeed = False
      if self.hpms_full_mode_failed is None:
        self.hpms_full_mode_failed = False
      if self.hpms_default_mode_succeed is None:
        self.hpms_default_mode_succeed = False
      if self.hpms_default_mode_failed is None:
        self.hpms_default_mode_failed = False
      if self.msg_sts is None:
        self.msg_sts = rospy_message_converter.msg.ArbMsgSts()
      if self.camera_req is None:
        self.camera_req = rospy_message_converter.msg.CameraReqOut()
      if self.aa_base_algo_req is None:
        self.aa_base_algo_req = rospy_message_converter.msg.AaBaseAlgoReqOut()
      if self.hpms_req is None:
        self.hpms_req = rospy_message_converter.msg.HmpsReqOut()
      if self.hmi_req is None:
        self.hmi_req = rospy_message_converter.msg.FamHmiReqOut()
      if self.pa_general_enable is None:
        self.pa_general_enable = False
      if self.hero_button_trig is None:
        self.hero_button_trig = False
      if self.is_resume_actv is None:
        self.is_resume_actv = False
      if self.lat_output_feature_type is None:
        self.lat_output_feature_type = 0
      if self.long_output_feature_type is None:
        self.long_output_feature_type = 0
      if self.func_sts is None:
        self.func_sts = []
      if self.reserved is None:
        self.reserved = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.func_data = []
      self.da_req_actv = False
      self.pa_req_actv = False
      self.aa_base_algo_sts = 0
      self.last_aa_base_algo_mode = 0
      self.mode_change_trig = 0
      self.shutdown_req = False
      self.da_general_enable = False
      self.wti_trig = rospy_message_converter.msg.FeatureFuncWti()
      self.current_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      self.current_long_func = rospy_message_converter.msg.FeatureFuncSts()
      self.target_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      self.target_long_func = rospy_message_converter.msg.FeatureFuncSts()
      self.arb_running_st = 0
      self.hpms_full_mode_succeed = False
      self.hpms_full_mode_failed = False
      self.hpms_default_mode_succeed = False
      self.hpms_default_mode_failed = False
      self.msg_sts = rospy_message_converter.msg.ArbMsgSts()
      self.camera_req = rospy_message_converter.msg.CameraReqOut()
      self.aa_base_algo_req = rospy_message_converter.msg.AaBaseAlgoReqOut()
      self.hpms_req = rospy_message_converter.msg.HmpsReqOut()
      self.hmi_req = rospy_message_converter.msg.FamHmiReqOut()
      self.pa_general_enable = False
      self.hero_button_trig = False
      self.is_resume_actv = False
      self.lat_output_feature_type = 0
      self.long_output_feature_type = 0
      self.func_sts = []
      self.reserved = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.func_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.func_data:
        _v1 = val1.conditions
        _x = _v1
        buff.write(_get_struct_7B().pack(_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost))
        _v2 = val1.wti
        _x = _v2
        buff.write(_get_struct_BI().pack(_x.trig, _x.wti))
        _v3 = val1.req_out
        _x = _v3.id
        buff.write(_get_struct_i().pack(_x))
        _x = _v3.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v3.req
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_2B3i3BIi().pack(_x.da_req_actv, _x.pa_req_actv, _x.aa_base_algo_sts, _x.last_aa_base_algo_mode, _x.mode_change_trig, _x.shutdown_req, _x.da_general_enable, _x.wti_trig.trig, _x.wti_trig.wti, _x.current_lat_func.id))
      _x = self.current_lat_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.current_lat_func.sts, _x.current_lat_func.req_func_id, _x.current_long_func.id))
      _x = self.current_long_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.current_long_func.sts, _x.current_long_func.req_func_id, _x.target_lat_func.id))
      _x = self.target_lat_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.target_lat_func.sts, _x.target_lat_func.req_func_id, _x.target_long_func.id))
      _x = self.target_long_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i4B14i().pack(_x.target_long_func.sts, _x.target_long_func.req_func_id, _x.arb_running_st, _x.hpms_full_mode_succeed, _x.hpms_full_mode_failed, _x.hpms_default_mode_succeed, _x.hpms_default_mode_failed, _x.msg_sts.msg_sts_fct_out, _x.msg_sts.msg_sts_fcts_out, _x.msg_sts.msg_sts_parking_out, _x.msg_sts.msg_sts_dms_eas, _x.msg_sts.msg_sts_aa_base_algo_sts, _x.msg_sts.msg_sts_hw_mode, _x.msg_sts.msg_sts_hw_mode_rsp, _x.msg_sts.msg_sts_soc_shutdown_req, _x.msg_sts.msg_sts_camera_sts, _x.msg_sts.msg_sts_camera_sal_sts, _x.msg_sts.msg_sts_veh_10ms, _x.msg_sts.msg_sts_veh_50ms, _x.msg_sts.msg_sts_dms_can, _x.msg_sts.msg_sts_aa_nbc))
      length = len(self.msg_sts.msg_sts_reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.msg_sts.msg_sts_reserved))
      _x = self
      buff.write(_get_struct_2BiB2iB3i6B2i().pack(_x.camera_req.side_camera_req, _x.camera_req.camera_sal_req, _x.camera_req.camera_sal_req_sts, _x.aa_base_algo_req.is_req_actv, _x.aa_base_algo_req.req, _x.aa_base_algo_req.req_sts, _x.hpms_req.is_req_actv, _x.hpms_req.req, _x.hpms_req.req_sts, _x.hpms_req.shutdown_rsp, _x.hmi_req.show_set_360_ap, _x.hmi_req.show_set_cha, _x.hmi_req.eco_plus_mode_req_sts, _x.pa_general_enable, _x.hero_button_trig, _x.is_resume_actv, _x.lat_output_feature_type, _x.long_output_feature_type))
      length = len(self.func_sts)
      buff.write(_struct_I.pack(length))
      for val1 in self.func_sts:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.sts, _x.req_func_id))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.func_data is None:
        self.func_data = None
      if self.wti_trig is None:
        self.wti_trig = rospy_message_converter.msg.FeatureFuncWti()
      if self.current_lat_func is None:
        self.current_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.current_long_func is None:
        self.current_long_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.target_lat_func is None:
        self.target_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.target_long_func is None:
        self.target_long_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.msg_sts is None:
        self.msg_sts = rospy_message_converter.msg.ArbMsgSts()
      if self.camera_req is None:
        self.camera_req = rospy_message_converter.msg.CameraReqOut()
      if self.aa_base_algo_req is None:
        self.aa_base_algo_req = rospy_message_converter.msg.AaBaseAlgoReqOut()
      if self.hpms_req is None:
        self.hpms_req = rospy_message_converter.msg.HmpsReqOut()
      if self.hmi_req is None:
        self.hmi_req = rospy_message_converter.msg.FamHmiReqOut()
      if self.func_sts is None:
        self.func_sts = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.func_data = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FeatureFuncData()
        _v4 = val1.conditions
        _x = _v4
        start = end
        end += 7
        (_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost,) = _get_struct_7B().unpack(str[start:end])
        _v4.req_updated = bool(_v4.req_updated)
        _v4.general_enable = bool(_v4.general_enable)
        _v4.activate_enable = bool(_v4.activate_enable)
        _v4.blocked = bool(_v4.blocked)
        _v4.actv_trig = bool(_v4.actv_trig)
        _v4.deactv_trig = bool(_v4.deactv_trig)
        _v4.control_lost = bool(_v4.control_lost)
        _v5 = val1.wti
        _x = _v5
        start = end
        end += 5
        (_x.trig, _x.wti,) = _get_struct_BI().unpack(str[start:end])
        _v5.trig = bool(_v5.trig)
        _v6 = val1.req_out
        start = end
        end += 4
        (_v6.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v6.name = str[start:end]
        start = end
        end += 4
        (_v6.req,) = _get_struct_i().unpack(str[start:end])
        self.func_data.append(val1)
      _x = self
      start = end
      end += 25
      (_x.da_req_actv, _x.pa_req_actv, _x.aa_base_algo_sts, _x.last_aa_base_algo_mode, _x.mode_change_trig, _x.shutdown_req, _x.da_general_enable, _x.wti_trig.trig, _x.wti_trig.wti, _x.current_lat_func.id,) = _get_struct_2B3i3BIi().unpack(str[start:end])
      self.da_req_actv = bool(self.da_req_actv)
      self.pa_req_actv = bool(self.pa_req_actv)
      self.shutdown_req = bool(self.shutdown_req)
      self.da_general_enable = bool(self.da_general_enable)
      self.wti_trig.trig = bool(self.wti_trig.trig)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_lat_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_lat_func.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.current_lat_func.sts, _x.current_lat_func.req_func_id, _x.current_long_func.id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_long_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_long_func.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.current_long_func.sts, _x.current_long_func.req_func_id, _x.target_lat_func.id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_lat_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_lat_func.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.target_lat_func.sts, _x.target_lat_func.req_func_id, _x.target_long_func.id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_long_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_long_func.name = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.target_long_func.sts, _x.target_long_func.req_func_id, _x.arb_running_st, _x.hpms_full_mode_succeed, _x.hpms_full_mode_failed, _x.hpms_default_mode_succeed, _x.hpms_default_mode_failed, _x.msg_sts.msg_sts_fct_out, _x.msg_sts.msg_sts_fcts_out, _x.msg_sts.msg_sts_parking_out, _x.msg_sts.msg_sts_dms_eas, _x.msg_sts.msg_sts_aa_base_algo_sts, _x.msg_sts.msg_sts_hw_mode, _x.msg_sts.msg_sts_hw_mode_rsp, _x.msg_sts.msg_sts_soc_shutdown_req, _x.msg_sts.msg_sts_camera_sts, _x.msg_sts.msg_sts_camera_sal_sts, _x.msg_sts.msg_sts_veh_10ms, _x.msg_sts.msg_sts_veh_50ms, _x.msg_sts.msg_sts_dms_can, _x.msg_sts.msg_sts_aa_nbc,) = _get_struct_3i4B14i().unpack(str[start:end])
      self.hpms_full_mode_succeed = bool(self.hpms_full_mode_succeed)
      self.hpms_full_mode_failed = bool(self.hpms_full_mode_failed)
      self.hpms_default_mode_succeed = bool(self.hpms_default_mode_succeed)
      self.hpms_default_mode_failed = bool(self.hpms_default_mode_failed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.msg_sts.msg_sts_reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 42
      (_x.camera_req.side_camera_req, _x.camera_req.camera_sal_req, _x.camera_req.camera_sal_req_sts, _x.aa_base_algo_req.is_req_actv, _x.aa_base_algo_req.req, _x.aa_base_algo_req.req_sts, _x.hpms_req.is_req_actv, _x.hpms_req.req, _x.hpms_req.req_sts, _x.hpms_req.shutdown_rsp, _x.hmi_req.show_set_360_ap, _x.hmi_req.show_set_cha, _x.hmi_req.eco_plus_mode_req_sts, _x.pa_general_enable, _x.hero_button_trig, _x.is_resume_actv, _x.lat_output_feature_type, _x.long_output_feature_type,) = _get_struct_2BiB2iB3i6B2i().unpack(str[start:end])
      self.camera_req.side_camera_req = bool(self.camera_req.side_camera_req)
      self.camera_req.camera_sal_req = bool(self.camera_req.camera_sal_req)
      self.aa_base_algo_req.is_req_actv = bool(self.aa_base_algo_req.is_req_actv)
      self.hpms_req.is_req_actv = bool(self.hpms_req.is_req_actv)
      self.hmi_req.show_set_360_ap = bool(self.hmi_req.show_set_360_ap)
      self.hmi_req.show_set_cha = bool(self.hmi_req.show_set_cha)
      self.hmi_req.eco_plus_mode_req_sts = bool(self.hmi_req.eco_plus_mode_req_sts)
      self.pa_general_enable = bool(self.pa_general_enable)
      self.hero_button_trig = bool(self.hero_button_trig)
      self.is_resume_actv = bool(self.is_resume_actv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.func_sts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FeatureFuncSts()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.sts, _x.req_func_id,) = _get_struct_2i().unpack(str[start:end])
        self.func_sts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.func_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.func_data:
        _v7 = val1.conditions
        _x = _v7
        buff.write(_get_struct_7B().pack(_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost))
        _v8 = val1.wti
        _x = _v8
        buff.write(_get_struct_BI().pack(_x.trig, _x.wti))
        _v9 = val1.req_out
        _x = _v9.id
        buff.write(_get_struct_i().pack(_x))
        _x = _v9.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v9.req
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_2B3i3BIi().pack(_x.da_req_actv, _x.pa_req_actv, _x.aa_base_algo_sts, _x.last_aa_base_algo_mode, _x.mode_change_trig, _x.shutdown_req, _x.da_general_enable, _x.wti_trig.trig, _x.wti_trig.wti, _x.current_lat_func.id))
      _x = self.current_lat_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.current_lat_func.sts, _x.current_lat_func.req_func_id, _x.current_long_func.id))
      _x = self.current_long_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.current_long_func.sts, _x.current_long_func.req_func_id, _x.target_lat_func.id))
      _x = self.target_lat_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.target_lat_func.sts, _x.target_lat_func.req_func_id, _x.target_long_func.id))
      _x = self.target_long_func.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i4B14i().pack(_x.target_long_func.sts, _x.target_long_func.req_func_id, _x.arb_running_st, _x.hpms_full_mode_succeed, _x.hpms_full_mode_failed, _x.hpms_default_mode_succeed, _x.hpms_default_mode_failed, _x.msg_sts.msg_sts_fct_out, _x.msg_sts.msg_sts_fcts_out, _x.msg_sts.msg_sts_parking_out, _x.msg_sts.msg_sts_dms_eas, _x.msg_sts.msg_sts_aa_base_algo_sts, _x.msg_sts.msg_sts_hw_mode, _x.msg_sts.msg_sts_hw_mode_rsp, _x.msg_sts.msg_sts_soc_shutdown_req, _x.msg_sts.msg_sts_camera_sts, _x.msg_sts.msg_sts_camera_sal_sts, _x.msg_sts.msg_sts_veh_10ms, _x.msg_sts.msg_sts_veh_50ms, _x.msg_sts.msg_sts_dms_can, _x.msg_sts.msg_sts_aa_nbc))
      length = len(self.msg_sts.msg_sts_reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.msg_sts.msg_sts_reserved.tostring())
      _x = self
      buff.write(_get_struct_2BiB2iB3i6B2i().pack(_x.camera_req.side_camera_req, _x.camera_req.camera_sal_req, _x.camera_req.camera_sal_req_sts, _x.aa_base_algo_req.is_req_actv, _x.aa_base_algo_req.req, _x.aa_base_algo_req.req_sts, _x.hpms_req.is_req_actv, _x.hpms_req.req, _x.hpms_req.req_sts, _x.hpms_req.shutdown_rsp, _x.hmi_req.show_set_360_ap, _x.hmi_req.show_set_cha, _x.hmi_req.eco_plus_mode_req_sts, _x.pa_general_enable, _x.hero_button_trig, _x.is_resume_actv, _x.lat_output_feature_type, _x.long_output_feature_type))
      length = len(self.func_sts)
      buff.write(_struct_I.pack(length))
      for val1 in self.func_sts:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.sts, _x.req_func_id))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.reserved.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.func_data is None:
        self.func_data = None
      if self.wti_trig is None:
        self.wti_trig = rospy_message_converter.msg.FeatureFuncWti()
      if self.current_lat_func is None:
        self.current_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.current_long_func is None:
        self.current_long_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.target_lat_func is None:
        self.target_lat_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.target_long_func is None:
        self.target_long_func = rospy_message_converter.msg.FeatureFuncSts()
      if self.msg_sts is None:
        self.msg_sts = rospy_message_converter.msg.ArbMsgSts()
      if self.camera_req is None:
        self.camera_req = rospy_message_converter.msg.CameraReqOut()
      if self.aa_base_algo_req is None:
        self.aa_base_algo_req = rospy_message_converter.msg.AaBaseAlgoReqOut()
      if self.hpms_req is None:
        self.hpms_req = rospy_message_converter.msg.HmpsReqOut()
      if self.hmi_req is None:
        self.hmi_req = rospy_message_converter.msg.FamHmiReqOut()
      if self.func_sts is None:
        self.func_sts = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.func_data = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FeatureFuncData()
        _v10 = val1.conditions
        _x = _v10
        start = end
        end += 7
        (_x.req_updated, _x.general_enable, _x.activate_enable, _x.blocked, _x.actv_trig, _x.deactv_trig, _x.control_lost,) = _get_struct_7B().unpack(str[start:end])
        _v10.req_updated = bool(_v10.req_updated)
        _v10.general_enable = bool(_v10.general_enable)
        _v10.activate_enable = bool(_v10.activate_enable)
        _v10.blocked = bool(_v10.blocked)
        _v10.actv_trig = bool(_v10.actv_trig)
        _v10.deactv_trig = bool(_v10.deactv_trig)
        _v10.control_lost = bool(_v10.control_lost)
        _v11 = val1.wti
        _x = _v11
        start = end
        end += 5
        (_x.trig, _x.wti,) = _get_struct_BI().unpack(str[start:end])
        _v11.trig = bool(_v11.trig)
        _v12 = val1.req_out
        start = end
        end += 4
        (_v12.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v12.name = str[start:end]
        start = end
        end += 4
        (_v12.req,) = _get_struct_i().unpack(str[start:end])
        self.func_data.append(val1)
      _x = self
      start = end
      end += 25
      (_x.da_req_actv, _x.pa_req_actv, _x.aa_base_algo_sts, _x.last_aa_base_algo_mode, _x.mode_change_trig, _x.shutdown_req, _x.da_general_enable, _x.wti_trig.trig, _x.wti_trig.wti, _x.current_lat_func.id,) = _get_struct_2B3i3BIi().unpack(str[start:end])
      self.da_req_actv = bool(self.da_req_actv)
      self.pa_req_actv = bool(self.pa_req_actv)
      self.shutdown_req = bool(self.shutdown_req)
      self.da_general_enable = bool(self.da_general_enable)
      self.wti_trig.trig = bool(self.wti_trig.trig)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_lat_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_lat_func.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.current_lat_func.sts, _x.current_lat_func.req_func_id, _x.current_long_func.id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_long_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_long_func.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.current_long_func.sts, _x.current_long_func.req_func_id, _x.target_lat_func.id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_lat_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_lat_func.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.target_lat_func.sts, _x.target_lat_func.req_func_id, _x.target_long_func.id,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_long_func.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_long_func.name = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.target_long_func.sts, _x.target_long_func.req_func_id, _x.arb_running_st, _x.hpms_full_mode_succeed, _x.hpms_full_mode_failed, _x.hpms_default_mode_succeed, _x.hpms_default_mode_failed, _x.msg_sts.msg_sts_fct_out, _x.msg_sts.msg_sts_fcts_out, _x.msg_sts.msg_sts_parking_out, _x.msg_sts.msg_sts_dms_eas, _x.msg_sts.msg_sts_aa_base_algo_sts, _x.msg_sts.msg_sts_hw_mode, _x.msg_sts.msg_sts_hw_mode_rsp, _x.msg_sts.msg_sts_soc_shutdown_req, _x.msg_sts.msg_sts_camera_sts, _x.msg_sts.msg_sts_camera_sal_sts, _x.msg_sts.msg_sts_veh_10ms, _x.msg_sts.msg_sts_veh_50ms, _x.msg_sts.msg_sts_dms_can, _x.msg_sts.msg_sts_aa_nbc,) = _get_struct_3i4B14i().unpack(str[start:end])
      self.hpms_full_mode_succeed = bool(self.hpms_full_mode_succeed)
      self.hpms_full_mode_failed = bool(self.hpms_full_mode_failed)
      self.hpms_default_mode_succeed = bool(self.hpms_default_mode_succeed)
      self.hpms_default_mode_failed = bool(self.hpms_default_mode_failed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.msg_sts.msg_sts_reserved = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 42
      (_x.camera_req.side_camera_req, _x.camera_req.camera_sal_req, _x.camera_req.camera_sal_req_sts, _x.aa_base_algo_req.is_req_actv, _x.aa_base_algo_req.req, _x.aa_base_algo_req.req_sts, _x.hpms_req.is_req_actv, _x.hpms_req.req, _x.hpms_req.req_sts, _x.hpms_req.shutdown_rsp, _x.hmi_req.show_set_360_ap, _x.hmi_req.show_set_cha, _x.hmi_req.eco_plus_mode_req_sts, _x.pa_general_enable, _x.hero_button_trig, _x.is_resume_actv, _x.lat_output_feature_type, _x.long_output_feature_type,) = _get_struct_2BiB2iB3i6B2i().unpack(str[start:end])
      self.camera_req.side_camera_req = bool(self.camera_req.side_camera_req)
      self.camera_req.camera_sal_req = bool(self.camera_req.camera_sal_req)
      self.aa_base_algo_req.is_req_actv = bool(self.aa_base_algo_req.is_req_actv)
      self.hpms_req.is_req_actv = bool(self.hpms_req.is_req_actv)
      self.hmi_req.show_set_360_ap = bool(self.hmi_req.show_set_360_ap)
      self.hmi_req.show_set_cha = bool(self.hmi_req.show_set_cha)
      self.hmi_req.eco_plus_mode_req_sts = bool(self.hmi_req.eco_plus_mode_req_sts)
      self.pa_general_enable = bool(self.pa_general_enable)
      self.hero_button_trig = bool(self.hero_button_trig)
      self.is_resume_actv = bool(self.is_resume_actv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.func_sts = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FeatureFuncSts()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.sts, _x.req_func_id,) = _get_struct_2i().unpack(str[start:end])
        self.func_sts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3i3BIi = None
def _get_struct_2B3i3BIi():
    global _struct_2B3i3BIi
    if _struct_2B3i3BIi is None:
        _struct_2B3i3BIi = struct.Struct("<2B3i3BIi")
    return _struct_2B3i3BIi
_struct_2BiB2iB3i6B2i = None
def _get_struct_2BiB2iB3i6B2i():
    global _struct_2BiB2iB3i6B2i
    if _struct_2BiB2iB3i6B2i is None:
        _struct_2BiB2iB3i6B2i = struct.Struct("<2BiB2iB3i6B2i")
    return _struct_2BiB2iB3i6B2i
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_3i4B14i = None
def _get_struct_3i4B14i():
    global _struct_3i4B14i
    if _struct_3i4B14i is None:
        _struct_3i4B14i = struct.Struct("<3i4B14i")
    return _struct_3i4B14i
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

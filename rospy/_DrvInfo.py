# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DrvInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DrvInfo(genpy.Message):
  _md5sum = "e1362be17207d041087bcfc39d6cfa64"
  _type = "rospy_message_converter/DrvInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """StrWhlSwtchInfo StrWhlSwtch
AdFunCfgInfo AdFunCfg
int32 FogLiPushSwtSts
int32 FrntWiprInterSpd
int32 FrntWiprSwtSts
int32 HiBeamSwtSts
int32 TurnIndcrSwtSts
int32 WiprAutoSwtSts
int32 WshrReWiprSwtSts
int32 SCMFailSts
int32 FogLiSCMCmd
int32 HiBeamSCMCmd
int32 ReWiprSCMCmd
int32 SVCAvl
uint32 NaviSpdLim
int32 WTIDispSt
int32 NaviSpdUnit
int32 NaviSpdLimSts
int32 NaviCurrentRoadTyp
uint32 NavCtryCod
CDCEqpmtInfo CDCEqpmt
int32 DA_TauGap_stored
DMSFncInfo DMSInfo
SVCFncInfo SVCInfo
int32 VehEgyMngtMod
float32 WheelBrkPReLe
float32 WheelBrkPFrntRi
float32 WheelBrkPFrntLe
float32 WheelBrkPReRi
int32 VehAccrModReq
int32 PwrSwapSteerWhlWarn
int32 DriverPSAPRequest
int32 PSAPParkViewStatus
int32 VehPrepReq
int32 StoreDrvrSlotSelnReq
bool LockConfig
uint32 DriverSAPAReq
uint32 DriverSAPASlotSelection

================================================================================
MSG: rospy_message_converter/StrWhlSwtchInfo
int32[] AdUpSwtSts
int32[] EnUpSwtSts

================================================================================
MSG: rospy_message_converter/AdFunCfgInfo
int32 AEBOnOffReq
int32 DASTactileOnOff
int32 DrvAlertSysOnOff
int32 FCTAOnOffCmd
int32 FCWSetReq
int32 LnAssistTctlOnOff
int32 LCAOnOff
int32 LCATctlWarnOnOff
int32 RCTAReq
int32 SetHMA
int32 SetLnAssiAidTyp
int32 SetLaneAssiSnvty
int32 RCTABReq
int32 SAPAPrkgModReq
int32 CDCFailSts
int32 Set360AP
int32 SetDA_ALCS
int32 SetDA_SpeedAssist
int32 SetDA_SteerAssist
int32 SetSWF
int32 ELKOnOff
int32 SdowOnOffReq
int32 GoNotifierSnvty
int32 DrowsinessSwtSts
int32 ELKSwtSts
int32 DistractionSwtSts
int32 SetDA_NOP
int32 SetSpeedCtrlSts
int32 CurveSpeedAssist
int32 TowModActv
int32 GoNotifierOnOff
bool AESOnOffSts
bool SwtichDA_NOP
int32 SetDA_NOPALC
bool ManHornSwtSts
bool TLNotifierOnOff
int32 SetDA_SetSpdOffs
int32 CfgTaskSwitch
int32 SetDA_SetSpdOffsValue

================================================================================
MSG: rospy_message_converter/CDCEqpmtInfo
bool AUDIOsts
bool HUDsts
bool ICSsts
bool ICsts

================================================================================
MSG: rospy_message_converter/DMSFncInfo
int32 DMSAlertLvl
int32 DMSAvlSts
int32 DMSDrvrAttention
uint32 DMSDrvrAttentionConfidence
int32 DMSDrvrEyeGazeDir
uint32 DMSDrvrEyeGazeDirConfidence
int32 DMSDrvrEyeSts
uint32 DMSDrvrEyeStsConfidence
int32 DMSDrvrHdPoseDir
uint32 DMSDrvrHdPoseDirConfidence
int32 DMSFailSafe
int32 DMSSts
int32 DMSDrvrFatigue
uint32 DMSDrvrFatigueConfidence

================================================================================
MSG: rospy_message_converter/SVCFncInfo
int32 SVCRiShaFb
int32 SVCReShaFb
int32 SVCLeShaFb
int32 SVCFrntShaFb
int32 F120ShaFb
int32 SVCLeShaReq
int32 SVCFrntShaReq
int32 SVCReShaReq
int32 F120ShaReq
int32 SVCRiShaReq
"""
  __slots__ = ['StrWhlSwtch','AdFunCfg','FogLiPushSwtSts','FrntWiprInterSpd','FrntWiprSwtSts','HiBeamSwtSts','TurnIndcrSwtSts','WiprAutoSwtSts','WshrReWiprSwtSts','SCMFailSts','FogLiSCMCmd','HiBeamSCMCmd','ReWiprSCMCmd','SVCAvl','NaviSpdLim','WTIDispSt','NaviSpdUnit','NaviSpdLimSts','NaviCurrentRoadTyp','NavCtryCod','CDCEqpmt','DA_TauGap_stored','DMSInfo','SVCInfo','VehEgyMngtMod','WheelBrkPReLe','WheelBrkPFrntRi','WheelBrkPFrntLe','WheelBrkPReRi','VehAccrModReq','PwrSwapSteerWhlWarn','DriverPSAPRequest','PSAPParkViewStatus','VehPrepReq','StoreDrvrSlotSelnReq','LockConfig','DriverSAPAReq','DriverSAPASlotSelection']
  _slot_types = ['rospy_message_converter/StrWhlSwtchInfo','rospy_message_converter/AdFunCfgInfo','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','uint32','int32','int32','int32','int32','uint32','rospy_message_converter/CDCEqpmtInfo','int32','rospy_message_converter/DMSFncInfo','rospy_message_converter/SVCFncInfo','int32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       StrWhlSwtch,AdFunCfg,FogLiPushSwtSts,FrntWiprInterSpd,FrntWiprSwtSts,HiBeamSwtSts,TurnIndcrSwtSts,WiprAutoSwtSts,WshrReWiprSwtSts,SCMFailSts,FogLiSCMCmd,HiBeamSCMCmd,ReWiprSCMCmd,SVCAvl,NaviSpdLim,WTIDispSt,NaviSpdUnit,NaviSpdLimSts,NaviCurrentRoadTyp,NavCtryCod,CDCEqpmt,DA_TauGap_stored,DMSInfo,SVCInfo,VehEgyMngtMod,WheelBrkPReLe,WheelBrkPFrntRi,WheelBrkPFrntLe,WheelBrkPReRi,VehAccrModReq,PwrSwapSteerWhlWarn,DriverPSAPRequest,PSAPParkViewStatus,VehPrepReq,StoreDrvrSlotSelnReq,LockConfig,DriverSAPAReq,DriverSAPASlotSelection

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DrvInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.StrWhlSwtch is None:
        self.StrWhlSwtch = rospy_message_converter.msg.StrWhlSwtchInfo()
      if self.AdFunCfg is None:
        self.AdFunCfg = rospy_message_converter.msg.AdFunCfgInfo()
      if self.FogLiPushSwtSts is None:
        self.FogLiPushSwtSts = 0
      if self.FrntWiprInterSpd is None:
        self.FrntWiprInterSpd = 0
      if self.FrntWiprSwtSts is None:
        self.FrntWiprSwtSts = 0
      if self.HiBeamSwtSts is None:
        self.HiBeamSwtSts = 0
      if self.TurnIndcrSwtSts is None:
        self.TurnIndcrSwtSts = 0
      if self.WiprAutoSwtSts is None:
        self.WiprAutoSwtSts = 0
      if self.WshrReWiprSwtSts is None:
        self.WshrReWiprSwtSts = 0
      if self.SCMFailSts is None:
        self.SCMFailSts = 0
      if self.FogLiSCMCmd is None:
        self.FogLiSCMCmd = 0
      if self.HiBeamSCMCmd is None:
        self.HiBeamSCMCmd = 0
      if self.ReWiprSCMCmd is None:
        self.ReWiprSCMCmd = 0
      if self.SVCAvl is None:
        self.SVCAvl = 0
      if self.NaviSpdLim is None:
        self.NaviSpdLim = 0
      if self.WTIDispSt is None:
        self.WTIDispSt = 0
      if self.NaviSpdUnit is None:
        self.NaviSpdUnit = 0
      if self.NaviSpdLimSts is None:
        self.NaviSpdLimSts = 0
      if self.NaviCurrentRoadTyp is None:
        self.NaviCurrentRoadTyp = 0
      if self.NavCtryCod is None:
        self.NavCtryCod = 0
      if self.CDCEqpmt is None:
        self.CDCEqpmt = rospy_message_converter.msg.CDCEqpmtInfo()
      if self.DA_TauGap_stored is None:
        self.DA_TauGap_stored = 0
      if self.DMSInfo is None:
        self.DMSInfo = rospy_message_converter.msg.DMSFncInfo()
      if self.SVCInfo is None:
        self.SVCInfo = rospy_message_converter.msg.SVCFncInfo()
      if self.VehEgyMngtMod is None:
        self.VehEgyMngtMod = 0
      if self.WheelBrkPReLe is None:
        self.WheelBrkPReLe = 0.
      if self.WheelBrkPFrntRi is None:
        self.WheelBrkPFrntRi = 0.
      if self.WheelBrkPFrntLe is None:
        self.WheelBrkPFrntLe = 0.
      if self.WheelBrkPReRi is None:
        self.WheelBrkPReRi = 0.
      if self.VehAccrModReq is None:
        self.VehAccrModReq = 0
      if self.PwrSwapSteerWhlWarn is None:
        self.PwrSwapSteerWhlWarn = 0
      if self.DriverPSAPRequest is None:
        self.DriverPSAPRequest = 0
      if self.PSAPParkViewStatus is None:
        self.PSAPParkViewStatus = 0
      if self.VehPrepReq is None:
        self.VehPrepReq = 0
      if self.StoreDrvrSlotSelnReq is None:
        self.StoreDrvrSlotSelnReq = 0
      if self.LockConfig is None:
        self.LockConfig = False
      if self.DriverSAPAReq is None:
        self.DriverSAPAReq = 0
      if self.DriverSAPASlotSelection is None:
        self.DriverSAPASlotSelection = 0
    else:
      self.StrWhlSwtch = rospy_message_converter.msg.StrWhlSwtchInfo()
      self.AdFunCfg = rospy_message_converter.msg.AdFunCfgInfo()
      self.FogLiPushSwtSts = 0
      self.FrntWiprInterSpd = 0
      self.FrntWiprSwtSts = 0
      self.HiBeamSwtSts = 0
      self.TurnIndcrSwtSts = 0
      self.WiprAutoSwtSts = 0
      self.WshrReWiprSwtSts = 0
      self.SCMFailSts = 0
      self.FogLiSCMCmd = 0
      self.HiBeamSCMCmd = 0
      self.ReWiprSCMCmd = 0
      self.SVCAvl = 0
      self.NaviSpdLim = 0
      self.WTIDispSt = 0
      self.NaviSpdUnit = 0
      self.NaviSpdLimSts = 0
      self.NaviCurrentRoadTyp = 0
      self.NavCtryCod = 0
      self.CDCEqpmt = rospy_message_converter.msg.CDCEqpmtInfo()
      self.DA_TauGap_stored = 0
      self.DMSInfo = rospy_message_converter.msg.DMSFncInfo()
      self.SVCInfo = rospy_message_converter.msg.SVCFncInfo()
      self.VehEgyMngtMod = 0
      self.WheelBrkPReLe = 0.
      self.WheelBrkPFrntRi = 0.
      self.WheelBrkPFrntLe = 0.
      self.WheelBrkPReRi = 0.
      self.VehAccrModReq = 0
      self.PwrSwapSteerWhlWarn = 0
      self.DriverPSAPRequest = 0
      self.PSAPParkViewStatus = 0
      self.VehPrepReq = 0
      self.StoreDrvrSlotSelnReq = 0
      self.LockConfig = False
      self.DriverSAPAReq = 0
      self.DriverSAPASlotSelection = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.StrWhlSwtch.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.StrWhlSwtch.AdUpSwtSts))
      length = len(self.StrWhlSwtch.EnUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.StrWhlSwtch.EnUpSwtSts))
      _x = self
      buff.write(_get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I().pack(_x.AdFunCfg.AEBOnOffReq, _x.AdFunCfg.DASTactileOnOff, _x.AdFunCfg.DrvAlertSysOnOff, _x.AdFunCfg.FCTAOnOffCmd, _x.AdFunCfg.FCWSetReq, _x.AdFunCfg.LnAssistTctlOnOff, _x.AdFunCfg.LCAOnOff, _x.AdFunCfg.LCATctlWarnOnOff, _x.AdFunCfg.RCTAReq, _x.AdFunCfg.SetHMA, _x.AdFunCfg.SetLnAssiAidTyp, _x.AdFunCfg.SetLaneAssiSnvty, _x.AdFunCfg.RCTABReq, _x.AdFunCfg.SAPAPrkgModReq, _x.AdFunCfg.CDCFailSts, _x.AdFunCfg.Set360AP, _x.AdFunCfg.SetDA_ALCS, _x.AdFunCfg.SetDA_SpeedAssist, _x.AdFunCfg.SetDA_SteerAssist, _x.AdFunCfg.SetSWF, _x.AdFunCfg.ELKOnOff, _x.AdFunCfg.SdowOnOffReq, _x.AdFunCfg.GoNotifierSnvty, _x.AdFunCfg.DrowsinessSwtSts, _x.AdFunCfg.ELKSwtSts, _x.AdFunCfg.DistractionSwtSts, _x.AdFunCfg.SetDA_NOP, _x.AdFunCfg.SetSpeedCtrlSts, _x.AdFunCfg.CurveSpeedAssist, _x.AdFunCfg.TowModActv, _x.AdFunCfg.GoNotifierOnOff, _x.AdFunCfg.AESOnOffSts, _x.AdFunCfg.SwtichDA_NOP, _x.AdFunCfg.SetDA_NOPALC, _x.AdFunCfg.ManHornSwtSts, _x.AdFunCfg.TLNotifierOnOff, _x.AdFunCfg.SetDA_SetSpdOffs, _x.AdFunCfg.CfgTaskSwitch, _x.AdFunCfg.SetDA_SetSpdOffsValue, _x.FogLiPushSwtSts, _x.FrntWiprInterSpd, _x.FrntWiprSwtSts, _x.HiBeamSwtSts, _x.TurnIndcrSwtSts, _x.WiprAutoSwtSts, _x.WshrReWiprSwtSts, _x.SCMFailSts, _x.FogLiSCMCmd, _x.HiBeamSCMCmd, _x.ReWiprSCMCmd, _x.SVCAvl, _x.NaviSpdLim, _x.WTIDispSt, _x.NaviSpdUnit, _x.NaviSpdLimSts, _x.NaviCurrentRoadTyp, _x.NavCtryCod, _x.CDCEqpmt.AUDIOsts, _x.CDCEqpmt.HUDsts, _x.CDCEqpmt.ICSsts, _x.CDCEqpmt.ICsts, _x.DA_TauGap_stored, _x.DMSInfo.DMSAlertLvl, _x.DMSInfo.DMSAvlSts, _x.DMSInfo.DMSDrvrAttention, _x.DMSInfo.DMSDrvrAttentionConfidence, _x.DMSInfo.DMSDrvrEyeGazeDir, _x.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DMSInfo.DMSDrvrEyeSts, _x.DMSInfo.DMSDrvrEyeStsConfidence, _x.DMSInfo.DMSDrvrHdPoseDir, _x.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DMSInfo.DMSFailSafe, _x.DMSInfo.DMSSts, _x.DMSInfo.DMSDrvrFatigue, _x.DMSInfo.DMSDrvrFatigueConfidence, _x.SVCInfo.SVCRiShaFb, _x.SVCInfo.SVCReShaFb, _x.SVCInfo.SVCLeShaFb, _x.SVCInfo.SVCFrntShaFb, _x.SVCInfo.F120ShaFb, _x.SVCInfo.SVCLeShaReq, _x.SVCInfo.SVCFrntShaReq, _x.SVCInfo.SVCReShaReq, _x.SVCInfo.F120ShaReq, _x.SVCInfo.SVCRiShaReq, _x.VehEgyMngtMod, _x.WheelBrkPReLe, _x.WheelBrkPFrntRi, _x.WheelBrkPFrntLe, _x.WheelBrkPReRi, _x.VehAccrModReq, _x.PwrSwapSteerWhlWarn, _x.DriverPSAPRequest, _x.PSAPParkViewStatus, _x.VehPrepReq, _x.StoreDrvrSlotSelnReq, _x.LockConfig, _x.DriverSAPAReq, _x.DriverSAPASlotSelection))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.StrWhlSwtch is None:
        self.StrWhlSwtch = rospy_message_converter.msg.StrWhlSwtchInfo()
      if self.AdFunCfg is None:
        self.AdFunCfg = rospy_message_converter.msg.AdFunCfgInfo()
      if self.CDCEqpmt is None:
        self.CDCEqpmt = rospy_message_converter.msg.CDCEqpmtInfo()
      if self.DMSInfo is None:
        self.DMSInfo = rospy_message_converter.msg.DMSFncInfo()
      if self.SVCInfo is None:
        self.SVCInfo = rospy_message_converter.msg.SVCFncInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.StrWhlSwtch.AdUpSwtSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.StrWhlSwtch.EnUpSwtSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 373
      (_x.AdFunCfg.AEBOnOffReq, _x.AdFunCfg.DASTactileOnOff, _x.AdFunCfg.DrvAlertSysOnOff, _x.AdFunCfg.FCTAOnOffCmd, _x.AdFunCfg.FCWSetReq, _x.AdFunCfg.LnAssistTctlOnOff, _x.AdFunCfg.LCAOnOff, _x.AdFunCfg.LCATctlWarnOnOff, _x.AdFunCfg.RCTAReq, _x.AdFunCfg.SetHMA, _x.AdFunCfg.SetLnAssiAidTyp, _x.AdFunCfg.SetLaneAssiSnvty, _x.AdFunCfg.RCTABReq, _x.AdFunCfg.SAPAPrkgModReq, _x.AdFunCfg.CDCFailSts, _x.AdFunCfg.Set360AP, _x.AdFunCfg.SetDA_ALCS, _x.AdFunCfg.SetDA_SpeedAssist, _x.AdFunCfg.SetDA_SteerAssist, _x.AdFunCfg.SetSWF, _x.AdFunCfg.ELKOnOff, _x.AdFunCfg.SdowOnOffReq, _x.AdFunCfg.GoNotifierSnvty, _x.AdFunCfg.DrowsinessSwtSts, _x.AdFunCfg.ELKSwtSts, _x.AdFunCfg.DistractionSwtSts, _x.AdFunCfg.SetDA_NOP, _x.AdFunCfg.SetSpeedCtrlSts, _x.AdFunCfg.CurveSpeedAssist, _x.AdFunCfg.TowModActv, _x.AdFunCfg.GoNotifierOnOff, _x.AdFunCfg.AESOnOffSts, _x.AdFunCfg.SwtichDA_NOP, _x.AdFunCfg.SetDA_NOPALC, _x.AdFunCfg.ManHornSwtSts, _x.AdFunCfg.TLNotifierOnOff, _x.AdFunCfg.SetDA_SetSpdOffs, _x.AdFunCfg.CfgTaskSwitch, _x.AdFunCfg.SetDA_SetSpdOffsValue, _x.FogLiPushSwtSts, _x.FrntWiprInterSpd, _x.FrntWiprSwtSts, _x.HiBeamSwtSts, _x.TurnIndcrSwtSts, _x.WiprAutoSwtSts, _x.WshrReWiprSwtSts, _x.SCMFailSts, _x.FogLiSCMCmd, _x.HiBeamSCMCmd, _x.ReWiprSCMCmd, _x.SVCAvl, _x.NaviSpdLim, _x.WTIDispSt, _x.NaviSpdUnit, _x.NaviSpdLimSts, _x.NaviCurrentRoadTyp, _x.NavCtryCod, _x.CDCEqpmt.AUDIOsts, _x.CDCEqpmt.HUDsts, _x.CDCEqpmt.ICSsts, _x.CDCEqpmt.ICsts, _x.DA_TauGap_stored, _x.DMSInfo.DMSAlertLvl, _x.DMSInfo.DMSAvlSts, _x.DMSInfo.DMSDrvrAttention, _x.DMSInfo.DMSDrvrAttentionConfidence, _x.DMSInfo.DMSDrvrEyeGazeDir, _x.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DMSInfo.DMSDrvrEyeSts, _x.DMSInfo.DMSDrvrEyeStsConfidence, _x.DMSInfo.DMSDrvrHdPoseDir, _x.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DMSInfo.DMSFailSafe, _x.DMSInfo.DMSSts, _x.DMSInfo.DMSDrvrFatigue, _x.DMSInfo.DMSDrvrFatigueConfidence, _x.SVCInfo.SVCRiShaFb, _x.SVCInfo.SVCReShaFb, _x.SVCInfo.SVCLeShaFb, _x.SVCInfo.SVCFrntShaFb, _x.SVCInfo.F120ShaFb, _x.SVCInfo.SVCLeShaReq, _x.SVCInfo.SVCFrntShaReq, _x.SVCInfo.SVCReShaReq, _x.SVCInfo.F120ShaReq, _x.SVCInfo.SVCRiShaReq, _x.VehEgyMngtMod, _x.WheelBrkPReLe, _x.WheelBrkPFrntRi, _x.WheelBrkPFrntLe, _x.WheelBrkPReRi, _x.VehAccrModReq, _x.PwrSwapSteerWhlWarn, _x.DriverPSAPRequest, _x.PSAPParkViewStatus, _x.VehPrepReq, _x.StoreDrvrSlotSelnReq, _x.LockConfig, _x.DriverSAPAReq, _x.DriverSAPASlotSelection,) = _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I().unpack(str[start:end])
      self.AdFunCfg.AESOnOffSts = bool(self.AdFunCfg.AESOnOffSts)
      self.AdFunCfg.SwtichDA_NOP = bool(self.AdFunCfg.SwtichDA_NOP)
      self.AdFunCfg.ManHornSwtSts = bool(self.AdFunCfg.ManHornSwtSts)
      self.AdFunCfg.TLNotifierOnOff = bool(self.AdFunCfg.TLNotifierOnOff)
      self.CDCEqpmt.AUDIOsts = bool(self.CDCEqpmt.AUDIOsts)
      self.CDCEqpmt.HUDsts = bool(self.CDCEqpmt.HUDsts)
      self.CDCEqpmt.ICSsts = bool(self.CDCEqpmt.ICSsts)
      self.CDCEqpmt.ICsts = bool(self.CDCEqpmt.ICsts)
      self.LockConfig = bool(self.LockConfig)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.StrWhlSwtch.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.StrWhlSwtch.AdUpSwtSts.tostring())
      length = len(self.StrWhlSwtch.EnUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.StrWhlSwtch.EnUpSwtSts.tostring())
      _x = self
      buff.write(_get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I().pack(_x.AdFunCfg.AEBOnOffReq, _x.AdFunCfg.DASTactileOnOff, _x.AdFunCfg.DrvAlertSysOnOff, _x.AdFunCfg.FCTAOnOffCmd, _x.AdFunCfg.FCWSetReq, _x.AdFunCfg.LnAssistTctlOnOff, _x.AdFunCfg.LCAOnOff, _x.AdFunCfg.LCATctlWarnOnOff, _x.AdFunCfg.RCTAReq, _x.AdFunCfg.SetHMA, _x.AdFunCfg.SetLnAssiAidTyp, _x.AdFunCfg.SetLaneAssiSnvty, _x.AdFunCfg.RCTABReq, _x.AdFunCfg.SAPAPrkgModReq, _x.AdFunCfg.CDCFailSts, _x.AdFunCfg.Set360AP, _x.AdFunCfg.SetDA_ALCS, _x.AdFunCfg.SetDA_SpeedAssist, _x.AdFunCfg.SetDA_SteerAssist, _x.AdFunCfg.SetSWF, _x.AdFunCfg.ELKOnOff, _x.AdFunCfg.SdowOnOffReq, _x.AdFunCfg.GoNotifierSnvty, _x.AdFunCfg.DrowsinessSwtSts, _x.AdFunCfg.ELKSwtSts, _x.AdFunCfg.DistractionSwtSts, _x.AdFunCfg.SetDA_NOP, _x.AdFunCfg.SetSpeedCtrlSts, _x.AdFunCfg.CurveSpeedAssist, _x.AdFunCfg.TowModActv, _x.AdFunCfg.GoNotifierOnOff, _x.AdFunCfg.AESOnOffSts, _x.AdFunCfg.SwtichDA_NOP, _x.AdFunCfg.SetDA_NOPALC, _x.AdFunCfg.ManHornSwtSts, _x.AdFunCfg.TLNotifierOnOff, _x.AdFunCfg.SetDA_SetSpdOffs, _x.AdFunCfg.CfgTaskSwitch, _x.AdFunCfg.SetDA_SetSpdOffsValue, _x.FogLiPushSwtSts, _x.FrntWiprInterSpd, _x.FrntWiprSwtSts, _x.HiBeamSwtSts, _x.TurnIndcrSwtSts, _x.WiprAutoSwtSts, _x.WshrReWiprSwtSts, _x.SCMFailSts, _x.FogLiSCMCmd, _x.HiBeamSCMCmd, _x.ReWiprSCMCmd, _x.SVCAvl, _x.NaviSpdLim, _x.WTIDispSt, _x.NaviSpdUnit, _x.NaviSpdLimSts, _x.NaviCurrentRoadTyp, _x.NavCtryCod, _x.CDCEqpmt.AUDIOsts, _x.CDCEqpmt.HUDsts, _x.CDCEqpmt.ICSsts, _x.CDCEqpmt.ICsts, _x.DA_TauGap_stored, _x.DMSInfo.DMSAlertLvl, _x.DMSInfo.DMSAvlSts, _x.DMSInfo.DMSDrvrAttention, _x.DMSInfo.DMSDrvrAttentionConfidence, _x.DMSInfo.DMSDrvrEyeGazeDir, _x.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DMSInfo.DMSDrvrEyeSts, _x.DMSInfo.DMSDrvrEyeStsConfidence, _x.DMSInfo.DMSDrvrHdPoseDir, _x.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DMSInfo.DMSFailSafe, _x.DMSInfo.DMSSts, _x.DMSInfo.DMSDrvrFatigue, _x.DMSInfo.DMSDrvrFatigueConfidence, _x.SVCInfo.SVCRiShaFb, _x.SVCInfo.SVCReShaFb, _x.SVCInfo.SVCLeShaFb, _x.SVCInfo.SVCFrntShaFb, _x.SVCInfo.F120ShaFb, _x.SVCInfo.SVCLeShaReq, _x.SVCInfo.SVCFrntShaReq, _x.SVCInfo.SVCReShaReq, _x.SVCInfo.F120ShaReq, _x.SVCInfo.SVCRiShaReq, _x.VehEgyMngtMod, _x.WheelBrkPReLe, _x.WheelBrkPFrntRi, _x.WheelBrkPFrntLe, _x.WheelBrkPReRi, _x.VehAccrModReq, _x.PwrSwapSteerWhlWarn, _x.DriverPSAPRequest, _x.PSAPParkViewStatus, _x.VehPrepReq, _x.StoreDrvrSlotSelnReq, _x.LockConfig, _x.DriverSAPAReq, _x.DriverSAPASlotSelection))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.StrWhlSwtch is None:
        self.StrWhlSwtch = rospy_message_converter.msg.StrWhlSwtchInfo()
      if self.AdFunCfg is None:
        self.AdFunCfg = rospy_message_converter.msg.AdFunCfgInfo()
      if self.CDCEqpmt is None:
        self.CDCEqpmt = rospy_message_converter.msg.CDCEqpmtInfo()
      if self.DMSInfo is None:
        self.DMSInfo = rospy_message_converter.msg.DMSFncInfo()
      if self.SVCInfo is None:
        self.SVCInfo = rospy_message_converter.msg.SVCFncInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.StrWhlSwtch.AdUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.StrWhlSwtch.EnUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 373
      (_x.AdFunCfg.AEBOnOffReq, _x.AdFunCfg.DASTactileOnOff, _x.AdFunCfg.DrvAlertSysOnOff, _x.AdFunCfg.FCTAOnOffCmd, _x.AdFunCfg.FCWSetReq, _x.AdFunCfg.LnAssistTctlOnOff, _x.AdFunCfg.LCAOnOff, _x.AdFunCfg.LCATctlWarnOnOff, _x.AdFunCfg.RCTAReq, _x.AdFunCfg.SetHMA, _x.AdFunCfg.SetLnAssiAidTyp, _x.AdFunCfg.SetLaneAssiSnvty, _x.AdFunCfg.RCTABReq, _x.AdFunCfg.SAPAPrkgModReq, _x.AdFunCfg.CDCFailSts, _x.AdFunCfg.Set360AP, _x.AdFunCfg.SetDA_ALCS, _x.AdFunCfg.SetDA_SpeedAssist, _x.AdFunCfg.SetDA_SteerAssist, _x.AdFunCfg.SetSWF, _x.AdFunCfg.ELKOnOff, _x.AdFunCfg.SdowOnOffReq, _x.AdFunCfg.GoNotifierSnvty, _x.AdFunCfg.DrowsinessSwtSts, _x.AdFunCfg.ELKSwtSts, _x.AdFunCfg.DistractionSwtSts, _x.AdFunCfg.SetDA_NOP, _x.AdFunCfg.SetSpeedCtrlSts, _x.AdFunCfg.CurveSpeedAssist, _x.AdFunCfg.TowModActv, _x.AdFunCfg.GoNotifierOnOff, _x.AdFunCfg.AESOnOffSts, _x.AdFunCfg.SwtichDA_NOP, _x.AdFunCfg.SetDA_NOPALC, _x.AdFunCfg.ManHornSwtSts, _x.AdFunCfg.TLNotifierOnOff, _x.AdFunCfg.SetDA_SetSpdOffs, _x.AdFunCfg.CfgTaskSwitch, _x.AdFunCfg.SetDA_SetSpdOffsValue, _x.FogLiPushSwtSts, _x.FrntWiprInterSpd, _x.FrntWiprSwtSts, _x.HiBeamSwtSts, _x.TurnIndcrSwtSts, _x.WiprAutoSwtSts, _x.WshrReWiprSwtSts, _x.SCMFailSts, _x.FogLiSCMCmd, _x.HiBeamSCMCmd, _x.ReWiprSCMCmd, _x.SVCAvl, _x.NaviSpdLim, _x.WTIDispSt, _x.NaviSpdUnit, _x.NaviSpdLimSts, _x.NaviCurrentRoadTyp, _x.NavCtryCod, _x.CDCEqpmt.AUDIOsts, _x.CDCEqpmt.HUDsts, _x.CDCEqpmt.ICSsts, _x.CDCEqpmt.ICsts, _x.DA_TauGap_stored, _x.DMSInfo.DMSAlertLvl, _x.DMSInfo.DMSAvlSts, _x.DMSInfo.DMSDrvrAttention, _x.DMSInfo.DMSDrvrAttentionConfidence, _x.DMSInfo.DMSDrvrEyeGazeDir, _x.DMSInfo.DMSDrvrEyeGazeDirConfidence, _x.DMSInfo.DMSDrvrEyeSts, _x.DMSInfo.DMSDrvrEyeStsConfidence, _x.DMSInfo.DMSDrvrHdPoseDir, _x.DMSInfo.DMSDrvrHdPoseDirConfidence, _x.DMSInfo.DMSFailSafe, _x.DMSInfo.DMSSts, _x.DMSInfo.DMSDrvrFatigue, _x.DMSInfo.DMSDrvrFatigueConfidence, _x.SVCInfo.SVCRiShaFb, _x.SVCInfo.SVCReShaFb, _x.SVCInfo.SVCLeShaFb, _x.SVCInfo.SVCFrntShaFb, _x.SVCInfo.F120ShaFb, _x.SVCInfo.SVCLeShaReq, _x.SVCInfo.SVCFrntShaReq, _x.SVCInfo.SVCReShaReq, _x.SVCInfo.F120ShaReq, _x.SVCInfo.SVCRiShaReq, _x.VehEgyMngtMod, _x.WheelBrkPReLe, _x.WheelBrkPFrntRi, _x.WheelBrkPFrntLe, _x.WheelBrkPReRi, _x.VehAccrModReq, _x.PwrSwapSteerWhlWarn, _x.DriverPSAPRequest, _x.PSAPParkViewStatus, _x.VehPrepReq, _x.StoreDrvrSlotSelnReq, _x.LockConfig, _x.DriverSAPAReq, _x.DriverSAPASlotSelection,) = _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I().unpack(str[start:end])
      self.AdFunCfg.AESOnOffSts = bool(self.AdFunCfg.AESOnOffSts)
      self.AdFunCfg.SwtichDA_NOP = bool(self.AdFunCfg.SwtichDA_NOP)
      self.AdFunCfg.ManHornSwtSts = bool(self.AdFunCfg.ManHornSwtSts)
      self.AdFunCfg.TLNotifierOnOff = bool(self.AdFunCfg.TLNotifierOnOff)
      self.CDCEqpmt.AUDIOsts = bool(self.CDCEqpmt.AUDIOsts)
      self.CDCEqpmt.HUDsts = bool(self.CDCEqpmt.HUDsts)
      self.CDCEqpmt.ICSsts = bool(self.CDCEqpmt.ICSsts)
      self.CDCEqpmt.ICsts = bool(self.CDCEqpmt.ICsts)
      self.LockConfig = bool(self.LockConfig)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I = None
def _get_struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I():
    global _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I
    if _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I is None:
        _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I = struct.Struct("<31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I")
    return _struct_31i2Bi2B15iI4iI4B4iIiIiIiI3iI11i4f6iB2I

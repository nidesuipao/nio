# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EventAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EventAction(genpy.Message):
  _md5sum = "56730f1de0abb99b704d9da5bbb1fef0"
  _type = "rospy_message_converter/EventAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ad_mode_type
DrivingAction driving_action
ParkingAction parking_action
DMSAction dms_action

================================================================================
MSG: rospy_message_converter/DrivingAction
DrivingActionRule action_rule
DrivingActionContext action_context

================================================================================
MSG: rospy_message_converter/DrivingActionRule
LaneSegLink[] lane_seg_link

================================================================================
MSG: rospy_message_converter/LaneSegLink
int32 offset_start
int32 offset_end
string lane_id

================================================================================
MSG: rospy_message_converter/DrivingActionContext
InfoConfig[] info_config

================================================================================
MSG: rospy_message_converter/InfoConfig
int32 info_value
int32 static_info
int32 dynamic_info
int32 road_scenario_type

================================================================================
MSG: rospy_message_converter/ParkingAction
PackingActionRule action_rule
PackingActionContext action_context

================================================================================
MSG: rospy_message_converter/PackingActionRule
string park_station_id
ParkLaneId park_lane_id

================================================================================
MSG: rospy_message_converter/ParkLaneId
string lane_id
LaneSegLink[] lane_seg_link

================================================================================
MSG: rospy_message_converter/PackingActionContext
InfoConfig[] info_config

================================================================================
MSG: rospy_message_converter/DMSAction
DrowsinessConfig drowsiness_config
DistractionConfig distraction_config
bool DMSDistractionSwitch_cloud
bool DMSDrowsinessSwitch_cloud_light
bool DMSDrowsinessSwitch_cloud_medium
bool DMSDrowsinessSwitch_cloud_heavy

================================================================================
MSG: rospy_message_converter/DrowsinessConfig
EyeConfig eye_config
MouthConfig mouth_config
Customized customized

================================================================================
MSG: rospy_message_converter/EyeConfig
float64 perclos_light
float64 perclos_medium
float64 perclos_window_time

================================================================================
MSG: rospy_message_converter/MouthConfig
int32 yawn_light
int32 yawn_medium
float64 yawn_windown_time

================================================================================
MSG: rospy_message_converter/Customized
float64 eye_close_thr
float64 eye_open_thr

================================================================================
MSG: rospy_message_converter/DistractionConfig
DistractionScoreThr distraction_score_thr
DistractionRectangle distraction_rectangle
float64 distraction_fast_fade_time

================================================================================
MSG: rospy_message_converter/DistractionScoreThr
float64 distraction_light_thr
float64 distraction_medium_thr
float64 distraction_heavy_thr

================================================================================
MSG: rospy_message_converter/DistractionRectangle
Gaze3DPoint gaze_3D_point
HeadPose head_pose

================================================================================
MSG: rospy_message_converter/Gaze3DPoint
Zones X
Zones Y

================================================================================
MSG: rospy_message_converter/Zones
float64 min
float64 max

================================================================================
MSG: rospy_message_converter/HeadPose
Zones yaw
Zones pitch
Zones roll
"""
  __slots__ = ['ad_mode_type','driving_action','parking_action','dms_action']
  _slot_types = ['int32','rospy_message_converter/DrivingAction','rospy_message_converter/ParkingAction','rospy_message_converter/DMSAction']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ad_mode_type,driving_action,parking_action,dms_action

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EventAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ad_mode_type is None:
        self.ad_mode_type = 0
      if self.driving_action is None:
        self.driving_action = rospy_message_converter.msg.DrivingAction()
      if self.parking_action is None:
        self.parking_action = rospy_message_converter.msg.ParkingAction()
      if self.dms_action is None:
        self.dms_action = rospy_message_converter.msg.DMSAction()
    else:
      self.ad_mode_type = 0
      self.driving_action = rospy_message_converter.msg.DrivingAction()
      self.parking_action = rospy_message_converter.msg.ParkingAction()
      self.dms_action = rospy_message_converter.msg.DMSAction()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ad_mode_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.driving_action.action_rule.lane_seg_link)
      buff.write(_struct_I.pack(length))
      for val1 in self.driving_action.action_rule.lane_seg_link:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.offset_start, _x.offset_end))
        _x = val1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.driving_action.action_context.info_config)
      buff.write(_struct_I.pack(length))
      for val1 in self.driving_action.action_context.info_config:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type))
      _x = self.parking_action.action_rule.park_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.parking_action.action_rule.park_lane_id.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.parking_action.action_rule.park_lane_id.lane_seg_link)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_action.action_rule.park_lane_id.lane_seg_link:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.offset_start, _x.offset_end))
        _x = val1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.parking_action.action_context.info_config)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_action.action_context.info_config:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type))
      _x = self
      buff.write(_get_struct_3d2i17d4B().pack(_x.dms_action.drowsiness_config.eye_config.perclos_light, _x.dms_action.drowsiness_config.eye_config.perclos_medium, _x.dms_action.drowsiness_config.eye_config.perclos_window_time, _x.dms_action.drowsiness_config.mouth_config.yawn_light, _x.dms_action.drowsiness_config.mouth_config.yawn_medium, _x.dms_action.drowsiness_config.mouth_config.yawn_windown_time, _x.dms_action.drowsiness_config.customized.eye_close_thr, _x.dms_action.drowsiness_config.customized.eye_open_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_light_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_medium_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.max, _x.dms_action.distraction_config.distraction_fast_fade_time, _x.dms_action.DMSDistractionSwitch_cloud, _x.dms_action.DMSDrowsinessSwitch_cloud_light, _x.dms_action.DMSDrowsinessSwitch_cloud_medium, _x.dms_action.DMSDrowsinessSwitch_cloud_heavy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.driving_action is None:
        self.driving_action = rospy_message_converter.msg.DrivingAction()
      if self.parking_action is None:
        self.parking_action = rospy_message_converter.msg.ParkingAction()
      if self.dms_action is None:
        self.dms_action = rospy_message_converter.msg.DMSAction()
      end = 0
      start = end
      end += 4
      (self.ad_mode_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.driving_action.action_rule.lane_seg_link = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSegLink()
        _x = val1
        start = end
        end += 8
        (_x.offset_start, _x.offset_end,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lane_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.lane_id = str[start:end]
        self.driving_action.action_rule.lane_seg_link.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.driving_action.action_context.info_config = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InfoConfig()
        _x = val1
        start = end
        end += 16
        (_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_4i().unpack(str[start:end])
        self.driving_action.action_context.info_config.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_action.action_rule.park_station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parking_action.action_rule.park_station_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_action.action_rule.park_lane_id.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parking_action.action_rule.park_lane_id.lane_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_action.action_rule.park_lane_id.lane_seg_link = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSegLink()
        _x = val1
        start = end
        end += 8
        (_x.offset_start, _x.offset_end,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lane_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.lane_id = str[start:end]
        self.parking_action.action_rule.park_lane_id.lane_seg_link.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_action.action_context.info_config = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InfoConfig()
        _x = val1
        start = end
        end += 16
        (_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_4i().unpack(str[start:end])
        self.parking_action.action_context.info_config.append(val1)
      _x = self
      start = end
      end += 172
      (_x.dms_action.drowsiness_config.eye_config.perclos_light, _x.dms_action.drowsiness_config.eye_config.perclos_medium, _x.dms_action.drowsiness_config.eye_config.perclos_window_time, _x.dms_action.drowsiness_config.mouth_config.yawn_light, _x.dms_action.drowsiness_config.mouth_config.yawn_medium, _x.dms_action.drowsiness_config.mouth_config.yawn_windown_time, _x.dms_action.drowsiness_config.customized.eye_close_thr, _x.dms_action.drowsiness_config.customized.eye_open_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_light_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_medium_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.max, _x.dms_action.distraction_config.distraction_fast_fade_time, _x.dms_action.DMSDistractionSwitch_cloud, _x.dms_action.DMSDrowsinessSwitch_cloud_light, _x.dms_action.DMSDrowsinessSwitch_cloud_medium, _x.dms_action.DMSDrowsinessSwitch_cloud_heavy,) = _get_struct_3d2i17d4B().unpack(str[start:end])
      self.dms_action.DMSDistractionSwitch_cloud = bool(self.dms_action.DMSDistractionSwitch_cloud)
      self.dms_action.DMSDrowsinessSwitch_cloud_light = bool(self.dms_action.DMSDrowsinessSwitch_cloud_light)
      self.dms_action.DMSDrowsinessSwitch_cloud_medium = bool(self.dms_action.DMSDrowsinessSwitch_cloud_medium)
      self.dms_action.DMSDrowsinessSwitch_cloud_heavy = bool(self.dms_action.DMSDrowsinessSwitch_cloud_heavy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ad_mode_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.driving_action.action_rule.lane_seg_link)
      buff.write(_struct_I.pack(length))
      for val1 in self.driving_action.action_rule.lane_seg_link:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.offset_start, _x.offset_end))
        _x = val1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.driving_action.action_context.info_config)
      buff.write(_struct_I.pack(length))
      for val1 in self.driving_action.action_context.info_config:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type))
      _x = self.parking_action.action_rule.park_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.parking_action.action_rule.park_lane_id.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.parking_action.action_rule.park_lane_id.lane_seg_link)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_action.action_rule.park_lane_id.lane_seg_link:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.offset_start, _x.offset_end))
        _x = val1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.parking_action.action_context.info_config)
      buff.write(_struct_I.pack(length))
      for val1 in self.parking_action.action_context.info_config:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type))
      _x = self
      buff.write(_get_struct_3d2i17d4B().pack(_x.dms_action.drowsiness_config.eye_config.perclos_light, _x.dms_action.drowsiness_config.eye_config.perclos_medium, _x.dms_action.drowsiness_config.eye_config.perclos_window_time, _x.dms_action.drowsiness_config.mouth_config.yawn_light, _x.dms_action.drowsiness_config.mouth_config.yawn_medium, _x.dms_action.drowsiness_config.mouth_config.yawn_windown_time, _x.dms_action.drowsiness_config.customized.eye_close_thr, _x.dms_action.drowsiness_config.customized.eye_open_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_light_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_medium_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.max, _x.dms_action.distraction_config.distraction_fast_fade_time, _x.dms_action.DMSDistractionSwitch_cloud, _x.dms_action.DMSDrowsinessSwitch_cloud_light, _x.dms_action.DMSDrowsinessSwitch_cloud_medium, _x.dms_action.DMSDrowsinessSwitch_cloud_heavy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.driving_action is None:
        self.driving_action = rospy_message_converter.msg.DrivingAction()
      if self.parking_action is None:
        self.parking_action = rospy_message_converter.msg.ParkingAction()
      if self.dms_action is None:
        self.dms_action = rospy_message_converter.msg.DMSAction()
      end = 0
      start = end
      end += 4
      (self.ad_mode_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.driving_action.action_rule.lane_seg_link = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSegLink()
        _x = val1
        start = end
        end += 8
        (_x.offset_start, _x.offset_end,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lane_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.lane_id = str[start:end]
        self.driving_action.action_rule.lane_seg_link.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.driving_action.action_context.info_config = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InfoConfig()
        _x = val1
        start = end
        end += 16
        (_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_4i().unpack(str[start:end])
        self.driving_action.action_context.info_config.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_action.action_rule.park_station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parking_action.action_rule.park_station_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parking_action.action_rule.park_lane_id.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parking_action.action_rule.park_lane_id.lane_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_action.action_rule.park_lane_id.lane_seg_link = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSegLink()
        _x = val1
        start = end
        end += 8
        (_x.offset_start, _x.offset_end,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.lane_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.lane_id = str[start:end]
        self.parking_action.action_rule.park_lane_id.lane_seg_link.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parking_action.action_context.info_config = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InfoConfig()
        _x = val1
        start = end
        end += 16
        (_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_4i().unpack(str[start:end])
        self.parking_action.action_context.info_config.append(val1)
      _x = self
      start = end
      end += 172
      (_x.dms_action.drowsiness_config.eye_config.perclos_light, _x.dms_action.drowsiness_config.eye_config.perclos_medium, _x.dms_action.drowsiness_config.eye_config.perclos_window_time, _x.dms_action.drowsiness_config.mouth_config.yawn_light, _x.dms_action.drowsiness_config.mouth_config.yawn_medium, _x.dms_action.drowsiness_config.mouth_config.yawn_windown_time, _x.dms_action.drowsiness_config.customized.eye_close_thr, _x.dms_action.drowsiness_config.customized.eye_open_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_light_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_medium_thr, _x.dms_action.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.dms_action.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.min, _x.dms_action.distraction_config.distraction_rectangle.head_pose.roll.max, _x.dms_action.distraction_config.distraction_fast_fade_time, _x.dms_action.DMSDistractionSwitch_cloud, _x.dms_action.DMSDrowsinessSwitch_cloud_light, _x.dms_action.DMSDrowsinessSwitch_cloud_medium, _x.dms_action.DMSDrowsinessSwitch_cloud_heavy,) = _get_struct_3d2i17d4B().unpack(str[start:end])
      self.dms_action.DMSDistractionSwitch_cloud = bool(self.dms_action.DMSDistractionSwitch_cloud)
      self.dms_action.DMSDrowsinessSwitch_cloud_light = bool(self.dms_action.DMSDrowsinessSwitch_cloud_light)
      self.dms_action.DMSDrowsinessSwitch_cloud_medium = bool(self.dms_action.DMSDrowsinessSwitch_cloud_medium)
      self.dms_action.DMSDrowsinessSwitch_cloud_heavy = bool(self.dms_action.DMSDrowsinessSwitch_cloud_heavy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d2i17d4B = None
def _get_struct_3d2i17d4B():
    global _struct_3d2i17d4B
    if _struct_3d2i17d4B is None:
        _struct_3d2i17d4B = struct.Struct("<3d2i17d4B")
    return _struct_3d2i17d4B
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

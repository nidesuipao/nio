# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LngCtrlEmrgIf.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LngCtrlEmrgIf(genpy.Message):
  _md5sum = "490b083abdade53913a3ccc2e9eaa2f1"
  _type = "rospy_message_converter/LngCtrlEmrgIf"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool AEBDecelReq
float32 AEBTarDecel
bool EBADecelReq
bool ABPReq
uint32 AWBSnvtyLvl
bool AWBReq
uint32 ABASnvtyLvl
bool ABAReq
bool AEBDecelReq_DummyForDVR
"""
  __slots__ = ['AEBDecelReq','AEBTarDecel','EBADecelReq','ABPReq','AWBSnvtyLvl','AWBReq','ABASnvtyLvl','ABAReq','AEBDecelReq_DummyForDVR']
  _slot_types = ['bool','float32','bool','bool','uint32','bool','uint32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AEBDecelReq,AEBTarDecel,EBADecelReq,ABPReq,AWBSnvtyLvl,AWBReq,ABASnvtyLvl,ABAReq,AEBDecelReq_DummyForDVR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LngCtrlEmrgIf, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AEBDecelReq is None:
        self.AEBDecelReq = False
      if self.AEBTarDecel is None:
        self.AEBTarDecel = 0.
      if self.EBADecelReq is None:
        self.EBADecelReq = False
      if self.ABPReq is None:
        self.ABPReq = False
      if self.AWBSnvtyLvl is None:
        self.AWBSnvtyLvl = 0
      if self.AWBReq is None:
        self.AWBReq = False
      if self.ABASnvtyLvl is None:
        self.ABASnvtyLvl = 0
      if self.ABAReq is None:
        self.ABAReq = False
      if self.AEBDecelReq_DummyForDVR is None:
        self.AEBDecelReq_DummyForDVR = False
    else:
      self.AEBDecelReq = False
      self.AEBTarDecel = 0.
      self.EBADecelReq = False
      self.ABPReq = False
      self.AWBSnvtyLvl = 0
      self.AWBReq = False
      self.ABASnvtyLvl = 0
      self.ABAReq = False
      self.AEBDecelReq_DummyForDVR = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bf2BIBI2B().pack(_x.AEBDecelReq, _x.AEBTarDecel, _x.EBADecelReq, _x.ABPReq, _x.AWBSnvtyLvl, _x.AWBReq, _x.ABASnvtyLvl, _x.ABAReq, _x.AEBDecelReq_DummyForDVR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.AEBDecelReq, _x.AEBTarDecel, _x.EBADecelReq, _x.ABPReq, _x.AWBSnvtyLvl, _x.AWBReq, _x.ABASnvtyLvl, _x.ABAReq, _x.AEBDecelReq_DummyForDVR,) = _get_struct_Bf2BIBI2B().unpack(str[start:end])
      self.AEBDecelReq = bool(self.AEBDecelReq)
      self.EBADecelReq = bool(self.EBADecelReq)
      self.ABPReq = bool(self.ABPReq)
      self.AWBReq = bool(self.AWBReq)
      self.ABAReq = bool(self.ABAReq)
      self.AEBDecelReq_DummyForDVR = bool(self.AEBDecelReq_DummyForDVR)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bf2BIBI2B().pack(_x.AEBDecelReq, _x.AEBTarDecel, _x.EBADecelReq, _x.ABPReq, _x.AWBSnvtyLvl, _x.AWBReq, _x.ABASnvtyLvl, _x.ABAReq, _x.AEBDecelReq_DummyForDVR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.AEBDecelReq, _x.AEBTarDecel, _x.EBADecelReq, _x.ABPReq, _x.AWBSnvtyLvl, _x.AWBReq, _x.ABASnvtyLvl, _x.ABAReq, _x.AEBDecelReq_DummyForDVR,) = _get_struct_Bf2BIBI2B().unpack(str[start:end])
      self.AEBDecelReq = bool(self.AEBDecelReq)
      self.EBADecelReq = bool(self.EBADecelReq)
      self.ABPReq = bool(self.ABPReq)
      self.AWBReq = bool(self.AWBReq)
      self.ABAReq = bool(self.ABAReq)
      self.AEBDecelReq_DummyForDVR = bool(self.AEBDecelReq_DummyForDVR)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf2BIBI2B = None
def _get_struct_Bf2BIBI2B():
    global _struct_Bf2BIBI2B
    if _struct_Bf2BIBI2B is None:
        _struct_Bf2BIBI2B = struct.Struct("<Bf2BIBI2B")
    return _struct_Bf2BIBI2B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PlanningDebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class PlanningDebugOut(genpy.Message):
  _md5sum = "8631df9d0d9daff7d62b9f95e5851843"
  _type = "rospy_message_converter/PlanningDebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ReplanDbgOut dbg_replan
TrajCropDbgOut dbg_traj_crop
InputSignalDbgOut dbg_input_sig
OutputSignalDbgOut dbg_output_sig
ParkingFinishDbgOut dbg_finish
ParkingStatusDbgOut dbg_status
ReservedPlanningDbgOut dbg_planning_rsvd
ParkingSlotInfoDbgOut dbg_planning_slot_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ReplanDbgOut
ParPoint replan_start_pt
ParPoint replan_end_pt
float32 replan_start_pt_theta
float32 replan_end_pt_theta
string replan_reason
bool is_replan_fail
string failed_segment
string failed_point
int32 fail_reason
int32 exceeded_bound
int32 collide_pt

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/TrajCropDbgOut
ParPoint traj_start_pt
ParPoint traj_end_pt
float32 traj_start_pt_theta
float32 traj_end_pt_theta
string traj_segment
float32 cur_index
bool is_start_cropped
bool is_end_cropped
bool is_estop
int32 crop_reason
ParLocation curr_location

================================================================================
MSG: rospy_message_converter/ParLocation
uint64 timestamp
bool location_valid
ParPoint position
ParQuaternion orientation
float32 easting
float32 northing
float32 height
float32 speed
float32 sum_s

================================================================================
MSG: rospy_message_converter/ParQuaternion
float32 x
float32 y
float32 z
float32 w

================================================================================
MSG: rospy_message_converter/InputSignalDbgOut
bool has_state_machine
bool has_veh10ms
bool has_veh50ms
bool has_location
bool has_collision_dst
bool has_obj_map
bool has_ads

================================================================================
MSG: rospy_message_converter/OutputSignalDbgOut
bool exist_geo_traj
bool exist_cropped_traj
bool exist_tx_traj
ParkingTrajectory geo_traj
ParkingTrajectory cropped_traj
ParkingTrajectory tx_traj

================================================================================
MSG: rospy_message_converter/ParkingTrajectory
SlotTrajectory[] slot_trajectory
NodeInfo node_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SlotTrajectory
ADCTrajectory trajectory
SlotBase slot
ParkSlot park_slot
uint64 timestamp

================================================================================
MSG: rospy_message_converter/ADCTrajectory
float64 total_path_length
float64 total_path_time
EStop estop
bool is_replan
string replan_reason
TrajectoryPoint[] trajectory_point
int32 trajectory_type
bool is_finished
string stage
string info
int32 stage_info

================================================================================
MSG: rospy_message_converter/EStop
bool is_estop
string reason

================================================================================
MSG: rospy_message_converter/TrajectoryPoint
PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a

================================================================================
MSG: rospy_message_converter/SlotBase
int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/ParkSlot
SlotBase slot
bool left_corner_exist
ParPoint left_corner_pt1
ParPoint left_corner_pt2
bool right_corner_exist
ParPoint right_corner_pt1
ParPoint right_corner_pt2
bool curb_exist
ParPoint curb_pt1
ParPoint curb_pt2
bool slot_bumper
ParPoint slot_bumper_pt1
ParPoint slot_bumper_pt2
ParPoint left_corner_pt3
ParPoint right_corner_pt3
bool corner_pt3_exist
ParPoint virtual_channel_pt1
ParPoint virtual_channel_pt2
bool virtual_channel_exist
int32 left_corner_type
int32 right_corner_type
uint32 slot_update_count
bool replan_suggest

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer

================================================================================
MSG: rospy_message_converter/ParkingFinishDbgOut
bool is_finish
ParPoint finished_pt
float32 finished_pt_theta
int32 finish_error

================================================================================
MSG: rospy_message_converter/ParkingStatusDbgOut
ParPoint cur_pt
float32 cur_pt_theta
int32 status

================================================================================
MSG: rospy_message_converter/ReservedPlanningDbgOut
float64 dbg_planning_reserved_1
float64 dbg_planning_reserved_2
float64 dbg_planning_reserved_3
float64 dbg_planning_reserved_4
float64 dbg_planning_reserved_5
float64 dbg_planning_reserved_6
float64 dbg_planning_reserved_7
float64 dbg_planning_reserved_8
float64 dbg_planning_reserved_9
float64 dbg_planning_reserved_10
float64 dbg_planning_reserved_11
float64 dbg_planning_reserved_12
float64 dbg_planning_reserved_13
float64 dbg_planning_reserved_14
float64 dbg_planning_reserved_15
float64 dbg_planning_reserved_16
float64 dbg_planning_reserved_17
float64 dbg_planning_reserved_18
float64 dbg_planning_reserved_19
float64 dbg_planning_reserved_20
float64 dbg_planning_reserved_21
float64 dbg_planning_reserved_22
float64 dbg_planning_reserved_23
float64 dbg_planning_reserved_24
float64 dbg_planning_reserved_25
float64 dbg_planning_reserved_26
float64 dbg_planning_reserved_27
float64 dbg_planning_reserved_28
float64 dbg_planning_reserved_29
float64 dbg_planning_reserved_30
float64 dbg_planning_reserved_31
float64 dbg_planning_reserved_32
float64 dbg_planning_reserved_33
float64 dbg_planning_reserved_34
float64 dbg_planning_reserved_35
float64 dbg_planning_reserved_36
float64 dbg_planning_reserved_37
float64 dbg_planning_reserved_38
float64 dbg_planning_reserved_39
float64 dbg_planning_reserved_40
float64 dbg_planning_reserved_41
float64 dbg_planning_reserved_42
float64 dbg_planning_reserved_43
float64 dbg_planning_reserved_44
float64 dbg_planning_reserved_45
float64 dbg_planning_reserved_46
float64 dbg_planning_reserved_47
float64 dbg_planning_reserved_48
float64 dbg_planning_reserved_49
float64 dbg_planning_reserved_50
float64 dbg_planning_reserved_51
float64 dbg_planning_reserved_52
float64 dbg_planning_reserved_53
float64 dbg_planning_reserved_54
float64 dbg_planning_reserved_55
float64 dbg_planning_reserved_56
float64 dbg_planning_reserved_57
float64 dbg_planning_reserved_58
float64 dbg_planning_reserved_59
float64 dbg_planning_reserved_60
float64 dbg_planning_reserved_61
float64 dbg_planning_reserved_62
float64 dbg_planning_reserved_63
float64 dbg_planning_reserved_64
float64 dbg_planning_reserved_65
float64 dbg_planning_reserved_66
float64 dbg_planning_reserved_67
float64 dbg_planning_reserved_68
float64 dbg_planning_reserved_69
float64 dbg_planning_reserved_70
float64 dbg_planning_reserved_71
float64 dbg_planning_reserved_72
float64 dbg_planning_reserved_73
float64 dbg_planning_reserved_74
float64 dbg_planning_reserved_75
float64 dbg_planning_reserved_76
float64 dbg_planning_reserved_77
float64 dbg_planning_reserved_78
float64 dbg_planning_reserved_79
float64 dbg_planning_reserved_80
string dbg_planning_reserved_81
string dbg_planning_reserved_82
string dbg_planning_reserved_83
string dbg_planning_reserved_84
string dbg_planning_reserved_85
string dbg_planning_reserved_86
string dbg_planning_reserved_87
string dbg_planning_reserved_88
string dbg_planning_reserved_89
string dbg_planning_reserved_90
string dbg_planning_reserved_91
string dbg_planning_reserved_92
string dbg_planning_reserved_93
string dbg_planning_reserved_94
string dbg_planning_reserved_95
string dbg_planning_reserved_96
string dbg_planning_reserved_97
string dbg_planning_reserved_98
string dbg_planning_reserved_99
string dbg_planning_reserved_100

================================================================================
MSG: rospy_message_converter/ParkingSlotInfoDbgOut
ParPoint curb_internal_pt1
ParPoint curb_internal_pt2
ParPoint wall_internal_pt1
ParPoint wall_internal_pt2
ParPoint left_corner_pt1
ParPoint left_corner_pt2
ParPoint right_corner_pt1
ParPoint right_corner_pt2
ParPoint dbg_planning_reserved_9
ParPoint dbg_planning_reserved_10
ParPoint dbg_planning_reserved_11
ParPoint dbg_planning_reserved_12
"""
  __slots__ = ['dbg_replan','dbg_traj_crop','dbg_input_sig','dbg_output_sig','dbg_finish','dbg_status','dbg_planning_rsvd','dbg_planning_slot_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/ReplanDbgOut','rospy_message_converter/TrajCropDbgOut','rospy_message_converter/InputSignalDbgOut','rospy_message_converter/OutputSignalDbgOut','rospy_message_converter/ParkingFinishDbgOut','rospy_message_converter/ParkingStatusDbgOut','rospy_message_converter/ReservedPlanningDbgOut','rospy_message_converter/ParkingSlotInfoDbgOut','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dbg_replan,dbg_traj_crop,dbg_input_sig,dbg_output_sig,dbg_finish,dbg_status,dbg_planning_rsvd,dbg_planning_slot_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningDebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dbg_replan is None:
        self.dbg_replan = rospy_message_converter.msg.ReplanDbgOut()
      if self.dbg_traj_crop is None:
        self.dbg_traj_crop = rospy_message_converter.msg.TrajCropDbgOut()
      if self.dbg_input_sig is None:
        self.dbg_input_sig = rospy_message_converter.msg.InputSignalDbgOut()
      if self.dbg_output_sig is None:
        self.dbg_output_sig = rospy_message_converter.msg.OutputSignalDbgOut()
      if self.dbg_finish is None:
        self.dbg_finish = rospy_message_converter.msg.ParkingFinishDbgOut()
      if self.dbg_status is None:
        self.dbg_status = rospy_message_converter.msg.ParkingStatusDbgOut()
      if self.dbg_planning_rsvd is None:
        self.dbg_planning_rsvd = rospy_message_converter.msg.ReservedPlanningDbgOut()
      if self.dbg_planning_slot_info is None:
        self.dbg_planning_slot_info = rospy_message_converter.msg.ParkingSlotInfoDbgOut()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.dbg_replan = rospy_message_converter.msg.ReplanDbgOut()
      self.dbg_traj_crop = rospy_message_converter.msg.TrajCropDbgOut()
      self.dbg_input_sig = rospy_message_converter.msg.InputSignalDbgOut()
      self.dbg_output_sig = rospy_message_converter.msg.OutputSignalDbgOut()
      self.dbg_finish = rospy_message_converter.msg.ParkingFinishDbgOut()
      self.dbg_status = rospy_message_converter.msg.ParkingStatusDbgOut()
      self.dbg_planning_rsvd = rospy_message_converter.msg.ReservedPlanningDbgOut()
      self.dbg_planning_slot_info = rospy_message_converter.msg.ParkingSlotInfoDbgOut()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.dbg_replan.replan_start_pt.x, _x.dbg_replan.replan_start_pt.y, _x.dbg_replan.replan_start_pt.z, _x.dbg_replan.replan_end_pt.x, _x.dbg_replan.replan_end_pt.y, _x.dbg_replan.replan_end_pt.z, _x.dbg_replan.replan_start_pt_theta, _x.dbg_replan.replan_end_pt_theta))
      _x = self.dbg_replan.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_replan.is_replan_fail
      buff.write(_get_struct_B().pack(_x))
      _x = self.dbg_replan.failed_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_replan.failed_point
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i8f().pack(_x.dbg_replan.fail_reason, _x.dbg_replan.exceeded_bound, _x.dbg_replan.collide_pt, _x.dbg_traj_crop.traj_start_pt.x, _x.dbg_traj_crop.traj_start_pt.y, _x.dbg_traj_crop.traj_start_pt.z, _x.dbg_traj_crop.traj_end_pt.x, _x.dbg_traj_crop.traj_end_pt.y, _x.dbg_traj_crop.traj_end_pt.z, _x.dbg_traj_crop.traj_start_pt_theta, _x.dbg_traj_crop.traj_end_pt_theta))
      _x = self.dbg_traj_crop.traj_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3BiQB12f10B().pack(_x.dbg_traj_crop.cur_index, _x.dbg_traj_crop.is_start_cropped, _x.dbg_traj_crop.is_end_cropped, _x.dbg_traj_crop.is_estop, _x.dbg_traj_crop.crop_reason, _x.dbg_traj_crop.curr_location.timestamp, _x.dbg_traj_crop.curr_location.location_valid, _x.dbg_traj_crop.curr_location.position.x, _x.dbg_traj_crop.curr_location.position.y, _x.dbg_traj_crop.curr_location.position.z, _x.dbg_traj_crop.curr_location.orientation.x, _x.dbg_traj_crop.curr_location.orientation.y, _x.dbg_traj_crop.curr_location.orientation.z, _x.dbg_traj_crop.curr_location.orientation.w, _x.dbg_traj_crop.curr_location.easting, _x.dbg_traj_crop.curr_location.northing, _x.dbg_traj_crop.curr_location.height, _x.dbg_traj_crop.curr_location.speed, _x.dbg_traj_crop.curr_location.sum_s, _x.dbg_input_sig.has_state_machine, _x.dbg_input_sig.has_veh10ms, _x.dbg_input_sig.has_veh50ms, _x.dbg_input_sig.has_location, _x.dbg_input_sig.has_collision_dst, _x.dbg_input_sig.has_obj_map, _x.dbg_input_sig.has_ads, _x.dbg_output_sig.exist_geo_traj, _x.dbg_output_sig.exist_cropped_traj, _x.dbg_output_sig.exist_tx_traj))
      length = len(self.dbg_output_sig.geo_traj.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.dbg_output_sig.geo_traj.slot_trajectory:
        _v1 = val1.trajectory
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v2 = _v1.estop
        _x = _v2.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v2.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v1.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.trajectory_point:
          _v3 = val3.path_point
          _x = _v3
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v3.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v3
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v4 = val3.gaussian_info
          _x = _v4
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v1
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v1.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v5 = val1.slot
        _x = _v5
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v6 = _v5.pt1
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v7 = _v5.pt2
        _x = _v7
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v8 = _v5.pt3
        _x = _v8
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v9 = _v5.pt4
        _x = _v9
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v5
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v10 = _v5.VehPos
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v5
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v11 = val1.park_slot
        _v12 = _v11.slot
        _x = _v12
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v13 = _v12.pt1
        _x = _v13
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.pt2
        _x = _v14
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v15 = _v12.pt3
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v16 = _v12.pt4
        _x = _v16
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v12
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v17 = _v12.VehPos
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v12
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v11.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v18 = _v11.left_corner_pt1
        _x = _v18
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v19 = _v11.left_corner_pt2
        _x = _v19
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v20 = _v11.right_corner_pt1
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v21 = _v11.right_corner_pt2
        _x = _v21
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v22 = _v11.curb_pt1
        _x = _v22
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v23 = _v11.curb_pt2
        _x = _v23
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v24 = _v11.slot_bumper_pt1
        _x = _v24
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v25 = _v11.slot_bumper_pt2
        _x = _v25
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v26 = _v11.left_corner_pt3
        _x = _v26
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v27 = _v11.right_corner_pt3
        _x = _v27
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v28 = _v11.virtual_channel_pt1
        _x = _v28
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v29 = _v11.virtual_channel_pt2
        _x = _v29
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.dbg_output_sig.geo_traj.node_info.node_status, _x.dbg_output_sig.geo_traj.node_info.feature_type))
      _x = self.dbg_output_sig.geo_traj.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.geo_traj.node_info.counter, _x.dbg_output_sig.geo_traj.node_info.timestamp))
      _x = self.dbg_output_sig.geo_traj.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dbg_output_sig.geo_traj.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.dbg_output_sig.geo_traj.node_info.buffer))
      _x = self.dbg_output_sig.geo_traj.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.dbg_output_sig.geo_traj.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.geo_traj.counter, _x.dbg_output_sig.geo_traj.publish_ts))
      length = len(self.dbg_output_sig.cropped_traj.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.dbg_output_sig.cropped_traj.slot_trajectory:
        _v30 = val1.trajectory
        _x = _v30
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v31 = _v30.estop
        _x = _v31.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v31.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v30.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v30.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v30.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v30.trajectory_point:
          _v32 = val3.path_point
          _x = _v32
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v32.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v32
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v33 = val3.gaussian_info
          _x = _v33
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v30
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v30.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v30.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v30.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v34 = val1.slot
        _x = _v34
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v35 = _v34.pt1
        _x = _v35
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.pt2
        _x = _v36
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v37 = _v34.pt3
        _x = _v37
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v38 = _v34.pt4
        _x = _v38
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v34
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v39 = _v34.VehPos
        _x = _v39
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v34
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v40 = val1.park_slot
        _v41 = _v40.slot
        _x = _v41
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v42 = _v41.pt1
        _x = _v42
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v43 = _v41.pt2
        _x = _v43
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v44 = _v41.pt3
        _x = _v44
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v45 = _v41.pt4
        _x = _v45
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v41
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v46 = _v41.VehPos
        _x = _v46
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v41
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v40.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v47 = _v40.left_corner_pt1
        _x = _v47
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v48 = _v40.left_corner_pt2
        _x = _v48
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v40.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v49 = _v40.right_corner_pt1
        _x = _v49
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v50 = _v40.right_corner_pt2
        _x = _v50
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v40.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v51 = _v40.curb_pt1
        _x = _v51
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v52 = _v40.curb_pt2
        _x = _v52
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v40.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v53 = _v40.slot_bumper_pt1
        _x = _v53
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v54 = _v40.slot_bumper_pt2
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v55 = _v40.left_corner_pt3
        _x = _v55
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v56 = _v40.right_corner_pt3
        _x = _v56
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v40.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v57 = _v40.virtual_channel_pt1
        _x = _v57
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v58 = _v40.virtual_channel_pt2
        _x = _v58
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v40
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.dbg_output_sig.cropped_traj.node_info.node_status, _x.dbg_output_sig.cropped_traj.node_info.feature_type))
      _x = self.dbg_output_sig.cropped_traj.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.cropped_traj.node_info.counter, _x.dbg_output_sig.cropped_traj.node_info.timestamp))
      _x = self.dbg_output_sig.cropped_traj.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dbg_output_sig.cropped_traj.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.dbg_output_sig.cropped_traj.node_info.buffer))
      _x = self.dbg_output_sig.cropped_traj.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.dbg_output_sig.cropped_traj.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.cropped_traj.counter, _x.dbg_output_sig.cropped_traj.publish_ts))
      length = len(self.dbg_output_sig.tx_traj.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.dbg_output_sig.tx_traj.slot_trajectory:
        _v59 = val1.trajectory
        _x = _v59
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v60 = _v59.estop
        _x = _v60.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v60.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v59.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v59.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v59.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v59.trajectory_point:
          _v61 = val3.path_point
          _x = _v61
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v61.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v61
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v62 = val3.gaussian_info
          _x = _v62
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v59
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v59.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v59.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v59.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v63 = val1.slot
        _x = _v63
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v64 = _v63.pt1
        _x = _v64
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v65 = _v63.pt2
        _x = _v65
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v66 = _v63.pt3
        _x = _v66
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v67 = _v63.pt4
        _x = _v67
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v63
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v68 = _v63.VehPos
        _x = _v68
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v63
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v69 = val1.park_slot
        _v70 = _v69.slot
        _x = _v70
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v71 = _v70.pt1
        _x = _v71
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v72 = _v70.pt2
        _x = _v72
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v73 = _v70.pt3
        _x = _v73
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v74 = _v70.pt4
        _x = _v74
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v70
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v75 = _v70.VehPos
        _x = _v75
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v70
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v69.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v76 = _v69.left_corner_pt1
        _x = _v76
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v77 = _v69.left_corner_pt2
        _x = _v77
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v78 = _v69.right_corner_pt1
        _x = _v78
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v79 = _v69.right_corner_pt2
        _x = _v79
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v80 = _v69.curb_pt1
        _x = _v80
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v81 = _v69.curb_pt2
        _x = _v81
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v82 = _v69.slot_bumper_pt1
        _x = _v82
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v83 = _v69.slot_bumper_pt2
        _x = _v83
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v84 = _v69.left_corner_pt3
        _x = _v84
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v85 = _v69.right_corner_pt3
        _x = _v85
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v86 = _v69.virtual_channel_pt1
        _x = _v86
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v87 = _v69.virtual_channel_pt2
        _x = _v87
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v69
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.dbg_output_sig.tx_traj.node_info.node_status, _x.dbg_output_sig.tx_traj.node_info.feature_type))
      _x = self.dbg_output_sig.tx_traj.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.tx_traj.node_info.counter, _x.dbg_output_sig.tx_traj.node_info.timestamp))
      _x = self.dbg_output_sig.tx_traj.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dbg_output_sig.tx_traj.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.dbg_output_sig.tx_traj.node_info.buffer))
      _x = self.dbg_output_sig.tx_traj.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.dbg_output_sig.tx_traj.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QB4fi4fi80d().pack(_x.dbg_output_sig.tx_traj.counter, _x.dbg_output_sig.tx_traj.publish_ts, _x.dbg_finish.is_finish, _x.dbg_finish.finished_pt.x, _x.dbg_finish.finished_pt.y, _x.dbg_finish.finished_pt.z, _x.dbg_finish.finished_pt_theta, _x.dbg_finish.finish_error, _x.dbg_status.cur_pt.x, _x.dbg_status.cur_pt.y, _x.dbg_status.cur_pt.z, _x.dbg_status.cur_pt_theta, _x.dbg_status.status, _x.dbg_planning_rsvd.dbg_planning_reserved_1, _x.dbg_planning_rsvd.dbg_planning_reserved_2, _x.dbg_planning_rsvd.dbg_planning_reserved_3, _x.dbg_planning_rsvd.dbg_planning_reserved_4, _x.dbg_planning_rsvd.dbg_planning_reserved_5, _x.dbg_planning_rsvd.dbg_planning_reserved_6, _x.dbg_planning_rsvd.dbg_planning_reserved_7, _x.dbg_planning_rsvd.dbg_planning_reserved_8, _x.dbg_planning_rsvd.dbg_planning_reserved_9, _x.dbg_planning_rsvd.dbg_planning_reserved_10, _x.dbg_planning_rsvd.dbg_planning_reserved_11, _x.dbg_planning_rsvd.dbg_planning_reserved_12, _x.dbg_planning_rsvd.dbg_planning_reserved_13, _x.dbg_planning_rsvd.dbg_planning_reserved_14, _x.dbg_planning_rsvd.dbg_planning_reserved_15, _x.dbg_planning_rsvd.dbg_planning_reserved_16, _x.dbg_planning_rsvd.dbg_planning_reserved_17, _x.dbg_planning_rsvd.dbg_planning_reserved_18, _x.dbg_planning_rsvd.dbg_planning_reserved_19, _x.dbg_planning_rsvd.dbg_planning_reserved_20, _x.dbg_planning_rsvd.dbg_planning_reserved_21, _x.dbg_planning_rsvd.dbg_planning_reserved_22, _x.dbg_planning_rsvd.dbg_planning_reserved_23, _x.dbg_planning_rsvd.dbg_planning_reserved_24, _x.dbg_planning_rsvd.dbg_planning_reserved_25, _x.dbg_planning_rsvd.dbg_planning_reserved_26, _x.dbg_planning_rsvd.dbg_planning_reserved_27, _x.dbg_planning_rsvd.dbg_planning_reserved_28, _x.dbg_planning_rsvd.dbg_planning_reserved_29, _x.dbg_planning_rsvd.dbg_planning_reserved_30, _x.dbg_planning_rsvd.dbg_planning_reserved_31, _x.dbg_planning_rsvd.dbg_planning_reserved_32, _x.dbg_planning_rsvd.dbg_planning_reserved_33, _x.dbg_planning_rsvd.dbg_planning_reserved_34, _x.dbg_planning_rsvd.dbg_planning_reserved_35, _x.dbg_planning_rsvd.dbg_planning_reserved_36, _x.dbg_planning_rsvd.dbg_planning_reserved_37, _x.dbg_planning_rsvd.dbg_planning_reserved_38, _x.dbg_planning_rsvd.dbg_planning_reserved_39, _x.dbg_planning_rsvd.dbg_planning_reserved_40, _x.dbg_planning_rsvd.dbg_planning_reserved_41, _x.dbg_planning_rsvd.dbg_planning_reserved_42, _x.dbg_planning_rsvd.dbg_planning_reserved_43, _x.dbg_planning_rsvd.dbg_planning_reserved_44, _x.dbg_planning_rsvd.dbg_planning_reserved_45, _x.dbg_planning_rsvd.dbg_planning_reserved_46, _x.dbg_planning_rsvd.dbg_planning_reserved_47, _x.dbg_planning_rsvd.dbg_planning_reserved_48, _x.dbg_planning_rsvd.dbg_planning_reserved_49, _x.dbg_planning_rsvd.dbg_planning_reserved_50, _x.dbg_planning_rsvd.dbg_planning_reserved_51, _x.dbg_planning_rsvd.dbg_planning_reserved_52, _x.dbg_planning_rsvd.dbg_planning_reserved_53, _x.dbg_planning_rsvd.dbg_planning_reserved_54, _x.dbg_planning_rsvd.dbg_planning_reserved_55, _x.dbg_planning_rsvd.dbg_planning_reserved_56, _x.dbg_planning_rsvd.dbg_planning_reserved_57, _x.dbg_planning_rsvd.dbg_planning_reserved_58, _x.dbg_planning_rsvd.dbg_planning_reserved_59, _x.dbg_planning_rsvd.dbg_planning_reserved_60, _x.dbg_planning_rsvd.dbg_planning_reserved_61, _x.dbg_planning_rsvd.dbg_planning_reserved_62, _x.dbg_planning_rsvd.dbg_planning_reserved_63, _x.dbg_planning_rsvd.dbg_planning_reserved_64, _x.dbg_planning_rsvd.dbg_planning_reserved_65, _x.dbg_planning_rsvd.dbg_planning_reserved_66, _x.dbg_planning_rsvd.dbg_planning_reserved_67, _x.dbg_planning_rsvd.dbg_planning_reserved_68, _x.dbg_planning_rsvd.dbg_planning_reserved_69, _x.dbg_planning_rsvd.dbg_planning_reserved_70, _x.dbg_planning_rsvd.dbg_planning_reserved_71, _x.dbg_planning_rsvd.dbg_planning_reserved_72, _x.dbg_planning_rsvd.dbg_planning_reserved_73, _x.dbg_planning_rsvd.dbg_planning_reserved_74, _x.dbg_planning_rsvd.dbg_planning_reserved_75, _x.dbg_planning_rsvd.dbg_planning_reserved_76, _x.dbg_planning_rsvd.dbg_planning_reserved_77, _x.dbg_planning_rsvd.dbg_planning_reserved_78, _x.dbg_planning_rsvd.dbg_planning_reserved_79, _x.dbg_planning_rsvd.dbg_planning_reserved_80))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_81
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_82
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_83
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_84
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_85
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_86
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_87
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_88
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_89
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_90
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_91
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_92
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_93
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_94
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_95
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_96
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_97
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_98
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_99
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_100
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_36fQ().pack(_x.dbg_planning_slot_info.curb_internal_pt1.x, _x.dbg_planning_slot_info.curb_internal_pt1.y, _x.dbg_planning_slot_info.curb_internal_pt1.z, _x.dbg_planning_slot_info.curb_internal_pt2.x, _x.dbg_planning_slot_info.curb_internal_pt2.y, _x.dbg_planning_slot_info.curb_internal_pt2.z, _x.dbg_planning_slot_info.wall_internal_pt1.x, _x.dbg_planning_slot_info.wall_internal_pt1.y, _x.dbg_planning_slot_info.wall_internal_pt1.z, _x.dbg_planning_slot_info.wall_internal_pt2.x, _x.dbg_planning_slot_info.wall_internal_pt2.y, _x.dbg_planning_slot_info.wall_internal_pt2.z, _x.dbg_planning_slot_info.left_corner_pt1.x, _x.dbg_planning_slot_info.left_corner_pt1.y, _x.dbg_planning_slot_info.left_corner_pt1.z, _x.dbg_planning_slot_info.left_corner_pt2.x, _x.dbg_planning_slot_info.left_corner_pt2.y, _x.dbg_planning_slot_info.left_corner_pt2.z, _x.dbg_planning_slot_info.right_corner_pt1.x, _x.dbg_planning_slot_info.right_corner_pt1.y, _x.dbg_planning_slot_info.right_corner_pt1.z, _x.dbg_planning_slot_info.right_corner_pt2.x, _x.dbg_planning_slot_info.right_corner_pt2.y, _x.dbg_planning_slot_info.right_corner_pt2.z, _x.dbg_planning_slot_info.dbg_planning_reserved_9.x, _x.dbg_planning_slot_info.dbg_planning_reserved_9.y, _x.dbg_planning_slot_info.dbg_planning_reserved_9.z, _x.dbg_planning_slot_info.dbg_planning_reserved_10.x, _x.dbg_planning_slot_info.dbg_planning_reserved_10.y, _x.dbg_planning_slot_info.dbg_planning_reserved_10.z, _x.dbg_planning_slot_info.dbg_planning_reserved_11.x, _x.dbg_planning_slot_info.dbg_planning_reserved_11.y, _x.dbg_planning_slot_info.dbg_planning_reserved_11.z, _x.dbg_planning_slot_info.dbg_planning_reserved_12.x, _x.dbg_planning_slot_info.dbg_planning_reserved_12.y, _x.dbg_planning_slot_info.dbg_planning_reserved_12.z, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dbg_replan is None:
        self.dbg_replan = rospy_message_converter.msg.ReplanDbgOut()
      if self.dbg_traj_crop is None:
        self.dbg_traj_crop = rospy_message_converter.msg.TrajCropDbgOut()
      if self.dbg_input_sig is None:
        self.dbg_input_sig = rospy_message_converter.msg.InputSignalDbgOut()
      if self.dbg_output_sig is None:
        self.dbg_output_sig = rospy_message_converter.msg.OutputSignalDbgOut()
      if self.dbg_finish is None:
        self.dbg_finish = rospy_message_converter.msg.ParkingFinishDbgOut()
      if self.dbg_status is None:
        self.dbg_status = rospy_message_converter.msg.ParkingStatusDbgOut()
      if self.dbg_planning_rsvd is None:
        self.dbg_planning_rsvd = rospy_message_converter.msg.ReservedPlanningDbgOut()
      if self.dbg_planning_slot_info is None:
        self.dbg_planning_slot_info = rospy_message_converter.msg.ParkingSlotInfoDbgOut()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.dbg_replan.replan_start_pt.x, _x.dbg_replan.replan_start_pt.y, _x.dbg_replan.replan_start_pt.z, _x.dbg_replan.replan_end_pt.x, _x.dbg_replan.replan_end_pt.y, _x.dbg_replan.replan_end_pt.z, _x.dbg_replan.replan_start_pt_theta, _x.dbg_replan.replan_end_pt_theta,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_replan.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_replan.replan_reason = str[start:end]
      start = end
      end += 1
      (self.dbg_replan.is_replan_fail,) = _get_struct_B().unpack(str[start:end])
      self.dbg_replan.is_replan_fail = bool(self.dbg_replan.is_replan_fail)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_replan.failed_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_replan.failed_segment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_replan.failed_point = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_replan.failed_point = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.dbg_replan.fail_reason, _x.dbg_replan.exceeded_bound, _x.dbg_replan.collide_pt, _x.dbg_traj_crop.traj_start_pt.x, _x.dbg_traj_crop.traj_start_pt.y, _x.dbg_traj_crop.traj_start_pt.z, _x.dbg_traj_crop.traj_end_pt.x, _x.dbg_traj_crop.traj_end_pt.y, _x.dbg_traj_crop.traj_end_pt.z, _x.dbg_traj_crop.traj_start_pt_theta, _x.dbg_traj_crop.traj_end_pt_theta,) = _get_struct_3i8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_traj_crop.traj_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_traj_crop.traj_segment = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.dbg_traj_crop.cur_index, _x.dbg_traj_crop.is_start_cropped, _x.dbg_traj_crop.is_end_cropped, _x.dbg_traj_crop.is_estop, _x.dbg_traj_crop.crop_reason, _x.dbg_traj_crop.curr_location.timestamp, _x.dbg_traj_crop.curr_location.location_valid, _x.dbg_traj_crop.curr_location.position.x, _x.dbg_traj_crop.curr_location.position.y, _x.dbg_traj_crop.curr_location.position.z, _x.dbg_traj_crop.curr_location.orientation.x, _x.dbg_traj_crop.curr_location.orientation.y, _x.dbg_traj_crop.curr_location.orientation.z, _x.dbg_traj_crop.curr_location.orientation.w, _x.dbg_traj_crop.curr_location.easting, _x.dbg_traj_crop.curr_location.northing, _x.dbg_traj_crop.curr_location.height, _x.dbg_traj_crop.curr_location.speed, _x.dbg_traj_crop.curr_location.sum_s, _x.dbg_input_sig.has_state_machine, _x.dbg_input_sig.has_veh10ms, _x.dbg_input_sig.has_veh50ms, _x.dbg_input_sig.has_location, _x.dbg_input_sig.has_collision_dst, _x.dbg_input_sig.has_obj_map, _x.dbg_input_sig.has_ads, _x.dbg_output_sig.exist_geo_traj, _x.dbg_output_sig.exist_cropped_traj, _x.dbg_output_sig.exist_tx_traj,) = _get_struct_f3BiQB12f10B().unpack(str[start:end])
      self.dbg_traj_crop.is_start_cropped = bool(self.dbg_traj_crop.is_start_cropped)
      self.dbg_traj_crop.is_end_cropped = bool(self.dbg_traj_crop.is_end_cropped)
      self.dbg_traj_crop.is_estop = bool(self.dbg_traj_crop.is_estop)
      self.dbg_traj_crop.curr_location.location_valid = bool(self.dbg_traj_crop.curr_location.location_valid)
      self.dbg_input_sig.has_state_machine = bool(self.dbg_input_sig.has_state_machine)
      self.dbg_input_sig.has_veh10ms = bool(self.dbg_input_sig.has_veh10ms)
      self.dbg_input_sig.has_veh50ms = bool(self.dbg_input_sig.has_veh50ms)
      self.dbg_input_sig.has_location = bool(self.dbg_input_sig.has_location)
      self.dbg_input_sig.has_collision_dst = bool(self.dbg_input_sig.has_collision_dst)
      self.dbg_input_sig.has_obj_map = bool(self.dbg_input_sig.has_obj_map)
      self.dbg_input_sig.has_ads = bool(self.dbg_input_sig.has_ads)
      self.dbg_output_sig.exist_geo_traj = bool(self.dbg_output_sig.exist_geo_traj)
      self.dbg_output_sig.exist_cropped_traj = bool(self.dbg_output_sig.exist_cropped_traj)
      self.dbg_output_sig.exist_tx_traj = bool(self.dbg_output_sig.exist_tx_traj)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dbg_output_sig.geo_traj.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v88 = val1.trajectory
        _x = _v88
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v89 = _v88.estop
        start = end
        end += 1
        (_v89.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v89.is_estop = bool(_v89.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v89.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v89.reason = str[start:end]
        start = end
        end += 1
        (_v88.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v88.is_replan = bool(_v88.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v88.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v90 = val3.path_point
          _x = _v90
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v90.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v90.lane_id = str[start:end]
          _x = _v90
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v91 = val3.gaussian_info
          _x = _v91
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v88.trajectory_point.append(val3)
        _x = _v88
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v88.is_finished = bool(_v88.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.info = str[start:end]
        start = end
        end += 4
        (_v88.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v92 = val1.slot
        _x = _v92
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v93 = _v92.pt1
        _x = _v93
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v94 = _v92.pt2
        _x = _v94
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v95 = _v92.pt3
        _x = _v95
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v96 = _v92.pt4
        _x = _v96
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v92
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v97 = _v92.VehPos
        _x = _v97
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v92
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v98 = val1.park_slot
        _v99 = _v98.slot
        _x = _v99
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v100 = _v99.pt1
        _x = _v100
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v101 = _v99.pt2
        _x = _v101
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v102 = _v99.pt3
        _x = _v102
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v103 = _v99.pt4
        _x = _v103
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v99
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v104 = _v99.VehPos
        _x = _v104
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v99
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v98.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.left_corner_exist = bool(_v98.left_corner_exist)
        _v105 = _v98.left_corner_pt1
        _x = _v105
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v106 = _v98.left_corner_pt2
        _x = _v106
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.right_corner_exist = bool(_v98.right_corner_exist)
        _v107 = _v98.right_corner_pt1
        _x = _v107
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v108 = _v98.right_corner_pt2
        _x = _v108
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.curb_exist = bool(_v98.curb_exist)
        _v109 = _v98.curb_pt1
        _x = _v109
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v110 = _v98.curb_pt2
        _x = _v110
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v98.slot_bumper = bool(_v98.slot_bumper)
        _v111 = _v98.slot_bumper_pt1
        _x = _v111
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v112 = _v98.slot_bumper_pt2
        _x = _v112
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v113 = _v98.left_corner_pt3
        _x = _v113
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v114 = _v98.right_corner_pt3
        _x = _v114
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v98.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v98.corner_pt3_exist = bool(_v98.corner_pt3_exist)
        _v115 = _v98.virtual_channel_pt1
        _x = _v115
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v116 = _v98.virtual_channel_pt2
        _x = _v116
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v98
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v98.virtual_channel_exist = bool(_v98.virtual_channel_exist)
        _v98.replan_suggest = bool(_v98.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.dbg_output_sig.geo_traj.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.dbg_output_sig.geo_traj.node_info.node_status, _x.dbg_output_sig.geo_traj.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.geo_traj.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.geo_traj.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.geo_traj.node_info.counter, _x.dbg_output_sig.geo_traj.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.geo_traj.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.geo_traj.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dbg_output_sig.geo_traj.node_info.buffer = s.unpack(str[start:end])
      start = end
      end += 8
      (self.dbg_output_sig.geo_traj.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.geo_traj.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.geo_traj.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.geo_traj.counter, _x.dbg_output_sig.geo_traj.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dbg_output_sig.cropped_traj.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v117 = val1.trajectory
        _x = _v117
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v118 = _v117.estop
        start = end
        end += 1
        (_v118.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v118.is_estop = bool(_v118.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v118.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v118.reason = str[start:end]
        start = end
        end += 1
        (_v117.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v117.is_replan = bool(_v117.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v117.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v117.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v117.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v119 = val3.path_point
          _x = _v119
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v119.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v119.lane_id = str[start:end]
          _x = _v119
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v120 = val3.gaussian_info
          _x = _v120
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v117.trajectory_point.append(val3)
        _x = _v117
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v117.is_finished = bool(_v117.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v117.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v117.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v117.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v117.info = str[start:end]
        start = end
        end += 4
        (_v117.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v121 = val1.slot
        _x = _v121
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v122 = _v121.pt1
        _x = _v122
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v123 = _v121.pt2
        _x = _v123
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v124 = _v121.pt3
        _x = _v124
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v125 = _v121.pt4
        _x = _v125
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v121
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v126 = _v121.VehPos
        _x = _v126
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v121
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v127 = val1.park_slot
        _v128 = _v127.slot
        _x = _v128
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v129 = _v128.pt1
        _x = _v129
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v130 = _v128.pt2
        _x = _v130
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v131 = _v128.pt3
        _x = _v131
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v132 = _v128.pt4
        _x = _v132
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v128
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v133 = _v128.VehPos
        _x = _v133
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v128
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v127.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v127.left_corner_exist = bool(_v127.left_corner_exist)
        _v134 = _v127.left_corner_pt1
        _x = _v134
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v135 = _v127.left_corner_pt2
        _x = _v135
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v127.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v127.right_corner_exist = bool(_v127.right_corner_exist)
        _v136 = _v127.right_corner_pt1
        _x = _v136
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v137 = _v127.right_corner_pt2
        _x = _v137
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v127.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v127.curb_exist = bool(_v127.curb_exist)
        _v138 = _v127.curb_pt1
        _x = _v138
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v139 = _v127.curb_pt2
        _x = _v139
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v127.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v127.slot_bumper = bool(_v127.slot_bumper)
        _v140 = _v127.slot_bumper_pt1
        _x = _v140
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v141 = _v127.slot_bumper_pt2
        _x = _v141
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v142 = _v127.left_corner_pt3
        _x = _v142
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v143 = _v127.right_corner_pt3
        _x = _v143
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v127.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v127.corner_pt3_exist = bool(_v127.corner_pt3_exist)
        _v144 = _v127.virtual_channel_pt1
        _x = _v144
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v145 = _v127.virtual_channel_pt2
        _x = _v145
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v127
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v127.virtual_channel_exist = bool(_v127.virtual_channel_exist)
        _v127.replan_suggest = bool(_v127.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.dbg_output_sig.cropped_traj.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.dbg_output_sig.cropped_traj.node_info.node_status, _x.dbg_output_sig.cropped_traj.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.cropped_traj.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.cropped_traj.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.cropped_traj.node_info.counter, _x.dbg_output_sig.cropped_traj.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.cropped_traj.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.cropped_traj.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dbg_output_sig.cropped_traj.node_info.buffer = s.unpack(str[start:end])
      start = end
      end += 8
      (self.dbg_output_sig.cropped_traj.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.cropped_traj.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.cropped_traj.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.cropped_traj.counter, _x.dbg_output_sig.cropped_traj.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dbg_output_sig.tx_traj.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v146 = val1.trajectory
        _x = _v146
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v147 = _v146.estop
        start = end
        end += 1
        (_v147.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v147.is_estop = bool(_v147.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v147.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v147.reason = str[start:end]
        start = end
        end += 1
        (_v146.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v146.is_replan = bool(_v146.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v146.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v146.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v146.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v148 = val3.path_point
          _x = _v148
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v148.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v148.lane_id = str[start:end]
          _x = _v148
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v149 = val3.gaussian_info
          _x = _v149
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v146.trajectory_point.append(val3)
        _x = _v146
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v146.is_finished = bool(_v146.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v146.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v146.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v146.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v146.info = str[start:end]
        start = end
        end += 4
        (_v146.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v150 = val1.slot
        _x = _v150
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v151 = _v150.pt1
        _x = _v151
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v152 = _v150.pt2
        _x = _v152
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v153 = _v150.pt3
        _x = _v153
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v154 = _v150.pt4
        _x = _v154
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v150
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v155 = _v150.VehPos
        _x = _v155
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v150
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v156 = val1.park_slot
        _v157 = _v156.slot
        _x = _v157
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v158 = _v157.pt1
        _x = _v158
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v159 = _v157.pt2
        _x = _v159
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v160 = _v157.pt3
        _x = _v160
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v161 = _v157.pt4
        _x = _v161
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v157
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v162 = _v157.VehPos
        _x = _v162
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v157
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v156.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v156.left_corner_exist = bool(_v156.left_corner_exist)
        _v163 = _v156.left_corner_pt1
        _x = _v163
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v164 = _v156.left_corner_pt2
        _x = _v164
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v156.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v156.right_corner_exist = bool(_v156.right_corner_exist)
        _v165 = _v156.right_corner_pt1
        _x = _v165
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v166 = _v156.right_corner_pt2
        _x = _v166
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v156.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v156.curb_exist = bool(_v156.curb_exist)
        _v167 = _v156.curb_pt1
        _x = _v167
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v168 = _v156.curb_pt2
        _x = _v168
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v156.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v156.slot_bumper = bool(_v156.slot_bumper)
        _v169 = _v156.slot_bumper_pt1
        _x = _v169
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v170 = _v156.slot_bumper_pt2
        _x = _v170
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v171 = _v156.left_corner_pt3
        _x = _v171
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v172 = _v156.right_corner_pt3
        _x = _v172
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v156.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v156.corner_pt3_exist = bool(_v156.corner_pt3_exist)
        _v173 = _v156.virtual_channel_pt1
        _x = _v173
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v174 = _v156.virtual_channel_pt2
        _x = _v174
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v156
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v156.virtual_channel_exist = bool(_v156.virtual_channel_exist)
        _v156.replan_suggest = bool(_v156.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.dbg_output_sig.tx_traj.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.dbg_output_sig.tx_traj.node_info.node_status, _x.dbg_output_sig.tx_traj.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.tx_traj.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.tx_traj.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.tx_traj.node_info.counter, _x.dbg_output_sig.tx_traj.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.tx_traj.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.tx_traj.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dbg_output_sig.tx_traj.node_info.buffer = s.unpack(str[start:end])
      start = end
      end += 8
      (self.dbg_output_sig.tx_traj.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.tx_traj.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.tx_traj.publisher_id = str[start:end]
      _x = self
      start = end
      end += 697
      (_x.dbg_output_sig.tx_traj.counter, _x.dbg_output_sig.tx_traj.publish_ts, _x.dbg_finish.is_finish, _x.dbg_finish.finished_pt.x, _x.dbg_finish.finished_pt.y, _x.dbg_finish.finished_pt.z, _x.dbg_finish.finished_pt_theta, _x.dbg_finish.finish_error, _x.dbg_status.cur_pt.x, _x.dbg_status.cur_pt.y, _x.dbg_status.cur_pt.z, _x.dbg_status.cur_pt_theta, _x.dbg_status.status, _x.dbg_planning_rsvd.dbg_planning_reserved_1, _x.dbg_planning_rsvd.dbg_planning_reserved_2, _x.dbg_planning_rsvd.dbg_planning_reserved_3, _x.dbg_planning_rsvd.dbg_planning_reserved_4, _x.dbg_planning_rsvd.dbg_planning_reserved_5, _x.dbg_planning_rsvd.dbg_planning_reserved_6, _x.dbg_planning_rsvd.dbg_planning_reserved_7, _x.dbg_planning_rsvd.dbg_planning_reserved_8, _x.dbg_planning_rsvd.dbg_planning_reserved_9, _x.dbg_planning_rsvd.dbg_planning_reserved_10, _x.dbg_planning_rsvd.dbg_planning_reserved_11, _x.dbg_planning_rsvd.dbg_planning_reserved_12, _x.dbg_planning_rsvd.dbg_planning_reserved_13, _x.dbg_planning_rsvd.dbg_planning_reserved_14, _x.dbg_planning_rsvd.dbg_planning_reserved_15, _x.dbg_planning_rsvd.dbg_planning_reserved_16, _x.dbg_planning_rsvd.dbg_planning_reserved_17, _x.dbg_planning_rsvd.dbg_planning_reserved_18, _x.dbg_planning_rsvd.dbg_planning_reserved_19, _x.dbg_planning_rsvd.dbg_planning_reserved_20, _x.dbg_planning_rsvd.dbg_planning_reserved_21, _x.dbg_planning_rsvd.dbg_planning_reserved_22, _x.dbg_planning_rsvd.dbg_planning_reserved_23, _x.dbg_planning_rsvd.dbg_planning_reserved_24, _x.dbg_planning_rsvd.dbg_planning_reserved_25, _x.dbg_planning_rsvd.dbg_planning_reserved_26, _x.dbg_planning_rsvd.dbg_planning_reserved_27, _x.dbg_planning_rsvd.dbg_planning_reserved_28, _x.dbg_planning_rsvd.dbg_planning_reserved_29, _x.dbg_planning_rsvd.dbg_planning_reserved_30, _x.dbg_planning_rsvd.dbg_planning_reserved_31, _x.dbg_planning_rsvd.dbg_planning_reserved_32, _x.dbg_planning_rsvd.dbg_planning_reserved_33, _x.dbg_planning_rsvd.dbg_planning_reserved_34, _x.dbg_planning_rsvd.dbg_planning_reserved_35, _x.dbg_planning_rsvd.dbg_planning_reserved_36, _x.dbg_planning_rsvd.dbg_planning_reserved_37, _x.dbg_planning_rsvd.dbg_planning_reserved_38, _x.dbg_planning_rsvd.dbg_planning_reserved_39, _x.dbg_planning_rsvd.dbg_planning_reserved_40, _x.dbg_planning_rsvd.dbg_planning_reserved_41, _x.dbg_planning_rsvd.dbg_planning_reserved_42, _x.dbg_planning_rsvd.dbg_planning_reserved_43, _x.dbg_planning_rsvd.dbg_planning_reserved_44, _x.dbg_planning_rsvd.dbg_planning_reserved_45, _x.dbg_planning_rsvd.dbg_planning_reserved_46, _x.dbg_planning_rsvd.dbg_planning_reserved_47, _x.dbg_planning_rsvd.dbg_planning_reserved_48, _x.dbg_planning_rsvd.dbg_planning_reserved_49, _x.dbg_planning_rsvd.dbg_planning_reserved_50, _x.dbg_planning_rsvd.dbg_planning_reserved_51, _x.dbg_planning_rsvd.dbg_planning_reserved_52, _x.dbg_planning_rsvd.dbg_planning_reserved_53, _x.dbg_planning_rsvd.dbg_planning_reserved_54, _x.dbg_planning_rsvd.dbg_planning_reserved_55, _x.dbg_planning_rsvd.dbg_planning_reserved_56, _x.dbg_planning_rsvd.dbg_planning_reserved_57, _x.dbg_planning_rsvd.dbg_planning_reserved_58, _x.dbg_planning_rsvd.dbg_planning_reserved_59, _x.dbg_planning_rsvd.dbg_planning_reserved_60, _x.dbg_planning_rsvd.dbg_planning_reserved_61, _x.dbg_planning_rsvd.dbg_planning_reserved_62, _x.dbg_planning_rsvd.dbg_planning_reserved_63, _x.dbg_planning_rsvd.dbg_planning_reserved_64, _x.dbg_planning_rsvd.dbg_planning_reserved_65, _x.dbg_planning_rsvd.dbg_planning_reserved_66, _x.dbg_planning_rsvd.dbg_planning_reserved_67, _x.dbg_planning_rsvd.dbg_planning_reserved_68, _x.dbg_planning_rsvd.dbg_planning_reserved_69, _x.dbg_planning_rsvd.dbg_planning_reserved_70, _x.dbg_planning_rsvd.dbg_planning_reserved_71, _x.dbg_planning_rsvd.dbg_planning_reserved_72, _x.dbg_planning_rsvd.dbg_planning_reserved_73, _x.dbg_planning_rsvd.dbg_planning_reserved_74, _x.dbg_planning_rsvd.dbg_planning_reserved_75, _x.dbg_planning_rsvd.dbg_planning_reserved_76, _x.dbg_planning_rsvd.dbg_planning_reserved_77, _x.dbg_planning_rsvd.dbg_planning_reserved_78, _x.dbg_planning_rsvd.dbg_planning_reserved_79, _x.dbg_planning_rsvd.dbg_planning_reserved_80,) = _get_struct_2QB4fi4fi80d().unpack(str[start:end])
      self.dbg_finish.is_finish = bool(self.dbg_finish.is_finish)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_81 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_81 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_82 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_82 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_83 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_83 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_84 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_84 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_85 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_85 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_86 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_86 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_87 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_87 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_88 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_88 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_89 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_89 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_90 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_90 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_91 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_91 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_92 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_92 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_93 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_93 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_94 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_94 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_95 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_95 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_96 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_96 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_97 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_97 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_98 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_98 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_99 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_99 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_100 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_100 = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.dbg_planning_slot_info.curb_internal_pt1.x, _x.dbg_planning_slot_info.curb_internal_pt1.y, _x.dbg_planning_slot_info.curb_internal_pt1.z, _x.dbg_planning_slot_info.curb_internal_pt2.x, _x.dbg_planning_slot_info.curb_internal_pt2.y, _x.dbg_planning_slot_info.curb_internal_pt2.z, _x.dbg_planning_slot_info.wall_internal_pt1.x, _x.dbg_planning_slot_info.wall_internal_pt1.y, _x.dbg_planning_slot_info.wall_internal_pt1.z, _x.dbg_planning_slot_info.wall_internal_pt2.x, _x.dbg_planning_slot_info.wall_internal_pt2.y, _x.dbg_planning_slot_info.wall_internal_pt2.z, _x.dbg_planning_slot_info.left_corner_pt1.x, _x.dbg_planning_slot_info.left_corner_pt1.y, _x.dbg_planning_slot_info.left_corner_pt1.z, _x.dbg_planning_slot_info.left_corner_pt2.x, _x.dbg_planning_slot_info.left_corner_pt2.y, _x.dbg_planning_slot_info.left_corner_pt2.z, _x.dbg_planning_slot_info.right_corner_pt1.x, _x.dbg_planning_slot_info.right_corner_pt1.y, _x.dbg_planning_slot_info.right_corner_pt1.z, _x.dbg_planning_slot_info.right_corner_pt2.x, _x.dbg_planning_slot_info.right_corner_pt2.y, _x.dbg_planning_slot_info.right_corner_pt2.z, _x.dbg_planning_slot_info.dbg_planning_reserved_9.x, _x.dbg_planning_slot_info.dbg_planning_reserved_9.y, _x.dbg_planning_slot_info.dbg_planning_reserved_9.z, _x.dbg_planning_slot_info.dbg_planning_reserved_10.x, _x.dbg_planning_slot_info.dbg_planning_reserved_10.y, _x.dbg_planning_slot_info.dbg_planning_reserved_10.z, _x.dbg_planning_slot_info.dbg_planning_reserved_11.x, _x.dbg_planning_slot_info.dbg_planning_reserved_11.y, _x.dbg_planning_slot_info.dbg_planning_reserved_11.z, _x.dbg_planning_slot_info.dbg_planning_reserved_12.x, _x.dbg_planning_slot_info.dbg_planning_reserved_12.y, _x.dbg_planning_slot_info.dbg_planning_reserved_12.z, _x.publish_ptp_ts,) = _get_struct_36fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.dbg_replan.replan_start_pt.x, _x.dbg_replan.replan_start_pt.y, _x.dbg_replan.replan_start_pt.z, _x.dbg_replan.replan_end_pt.x, _x.dbg_replan.replan_end_pt.y, _x.dbg_replan.replan_end_pt.z, _x.dbg_replan.replan_start_pt_theta, _x.dbg_replan.replan_end_pt_theta))
      _x = self.dbg_replan.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_replan.is_replan_fail
      buff.write(_get_struct_B().pack(_x))
      _x = self.dbg_replan.failed_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_replan.failed_point
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i8f().pack(_x.dbg_replan.fail_reason, _x.dbg_replan.exceeded_bound, _x.dbg_replan.collide_pt, _x.dbg_traj_crop.traj_start_pt.x, _x.dbg_traj_crop.traj_start_pt.y, _x.dbg_traj_crop.traj_start_pt.z, _x.dbg_traj_crop.traj_end_pt.x, _x.dbg_traj_crop.traj_end_pt.y, _x.dbg_traj_crop.traj_end_pt.z, _x.dbg_traj_crop.traj_start_pt_theta, _x.dbg_traj_crop.traj_end_pt_theta))
      _x = self.dbg_traj_crop.traj_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3BiQB12f10B().pack(_x.dbg_traj_crop.cur_index, _x.dbg_traj_crop.is_start_cropped, _x.dbg_traj_crop.is_end_cropped, _x.dbg_traj_crop.is_estop, _x.dbg_traj_crop.crop_reason, _x.dbg_traj_crop.curr_location.timestamp, _x.dbg_traj_crop.curr_location.location_valid, _x.dbg_traj_crop.curr_location.position.x, _x.dbg_traj_crop.curr_location.position.y, _x.dbg_traj_crop.curr_location.position.z, _x.dbg_traj_crop.curr_location.orientation.x, _x.dbg_traj_crop.curr_location.orientation.y, _x.dbg_traj_crop.curr_location.orientation.z, _x.dbg_traj_crop.curr_location.orientation.w, _x.dbg_traj_crop.curr_location.easting, _x.dbg_traj_crop.curr_location.northing, _x.dbg_traj_crop.curr_location.height, _x.dbg_traj_crop.curr_location.speed, _x.dbg_traj_crop.curr_location.sum_s, _x.dbg_input_sig.has_state_machine, _x.dbg_input_sig.has_veh10ms, _x.dbg_input_sig.has_veh50ms, _x.dbg_input_sig.has_location, _x.dbg_input_sig.has_collision_dst, _x.dbg_input_sig.has_obj_map, _x.dbg_input_sig.has_ads, _x.dbg_output_sig.exist_geo_traj, _x.dbg_output_sig.exist_cropped_traj, _x.dbg_output_sig.exist_tx_traj))
      length = len(self.dbg_output_sig.geo_traj.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.dbg_output_sig.geo_traj.slot_trajectory:
        _v175 = val1.trajectory
        _x = _v175
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v176 = _v175.estop
        _x = _v176.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v176.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v175.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v175.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v175.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v175.trajectory_point:
          _v177 = val3.path_point
          _x = _v177
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v177.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v177
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v178 = val3.gaussian_info
          _x = _v178
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v175
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v175.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v175.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v175.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v179 = val1.slot
        _x = _v179
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v180 = _v179.pt1
        _x = _v180
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v181 = _v179.pt2
        _x = _v181
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v182 = _v179.pt3
        _x = _v182
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v183 = _v179.pt4
        _x = _v183
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v179
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v184 = _v179.VehPos
        _x = _v184
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v179
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v185 = val1.park_slot
        _v186 = _v185.slot
        _x = _v186
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v187 = _v186.pt1
        _x = _v187
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v188 = _v186.pt2
        _x = _v188
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v189 = _v186.pt3
        _x = _v189
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v190 = _v186.pt4
        _x = _v190
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v186
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v191 = _v186.VehPos
        _x = _v191
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v186
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v185.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v192 = _v185.left_corner_pt1
        _x = _v192
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v193 = _v185.left_corner_pt2
        _x = _v193
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v185.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v194 = _v185.right_corner_pt1
        _x = _v194
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v195 = _v185.right_corner_pt2
        _x = _v195
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v185.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v196 = _v185.curb_pt1
        _x = _v196
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v197 = _v185.curb_pt2
        _x = _v197
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v185.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v198 = _v185.slot_bumper_pt1
        _x = _v198
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v199 = _v185.slot_bumper_pt2
        _x = _v199
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v200 = _v185.left_corner_pt3
        _x = _v200
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v201 = _v185.right_corner_pt3
        _x = _v201
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v185.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v202 = _v185.virtual_channel_pt1
        _x = _v202
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v203 = _v185.virtual_channel_pt2
        _x = _v203
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v185
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.dbg_output_sig.geo_traj.node_info.node_status, _x.dbg_output_sig.geo_traj.node_info.feature_type))
      _x = self.dbg_output_sig.geo_traj.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.geo_traj.node_info.counter, _x.dbg_output_sig.geo_traj.node_info.timestamp))
      _x = self.dbg_output_sig.geo_traj.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dbg_output_sig.geo_traj.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.dbg_output_sig.geo_traj.node_info.buffer.tostring())
      _x = self.dbg_output_sig.geo_traj.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.dbg_output_sig.geo_traj.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.geo_traj.counter, _x.dbg_output_sig.geo_traj.publish_ts))
      length = len(self.dbg_output_sig.cropped_traj.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.dbg_output_sig.cropped_traj.slot_trajectory:
        _v204 = val1.trajectory
        _x = _v204
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v205 = _v204.estop
        _x = _v205.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v205.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v204.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v204.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v204.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v204.trajectory_point:
          _v206 = val3.path_point
          _x = _v206
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v206.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v206
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v207 = val3.gaussian_info
          _x = _v207
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v204
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v204.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v204.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v204.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v208 = val1.slot
        _x = _v208
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v209 = _v208.pt1
        _x = _v209
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v210 = _v208.pt2
        _x = _v210
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v211 = _v208.pt3
        _x = _v211
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v212 = _v208.pt4
        _x = _v212
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v208
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v213 = _v208.VehPos
        _x = _v213
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v208
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v214 = val1.park_slot
        _v215 = _v214.slot
        _x = _v215
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v216 = _v215.pt1
        _x = _v216
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v217 = _v215.pt2
        _x = _v217
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v218 = _v215.pt3
        _x = _v218
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v219 = _v215.pt4
        _x = _v219
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v215
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v220 = _v215.VehPos
        _x = _v220
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v215
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v214.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v221 = _v214.left_corner_pt1
        _x = _v221
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v222 = _v214.left_corner_pt2
        _x = _v222
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v214.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v223 = _v214.right_corner_pt1
        _x = _v223
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v224 = _v214.right_corner_pt2
        _x = _v224
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v214.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v225 = _v214.curb_pt1
        _x = _v225
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v226 = _v214.curb_pt2
        _x = _v226
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v214.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v227 = _v214.slot_bumper_pt1
        _x = _v227
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v228 = _v214.slot_bumper_pt2
        _x = _v228
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v229 = _v214.left_corner_pt3
        _x = _v229
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v230 = _v214.right_corner_pt3
        _x = _v230
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v214.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v231 = _v214.virtual_channel_pt1
        _x = _v231
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v232 = _v214.virtual_channel_pt2
        _x = _v232
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v214
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.dbg_output_sig.cropped_traj.node_info.node_status, _x.dbg_output_sig.cropped_traj.node_info.feature_type))
      _x = self.dbg_output_sig.cropped_traj.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.cropped_traj.node_info.counter, _x.dbg_output_sig.cropped_traj.node_info.timestamp))
      _x = self.dbg_output_sig.cropped_traj.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dbg_output_sig.cropped_traj.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.dbg_output_sig.cropped_traj.node_info.buffer.tostring())
      _x = self.dbg_output_sig.cropped_traj.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.dbg_output_sig.cropped_traj.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.cropped_traj.counter, _x.dbg_output_sig.cropped_traj.publish_ts))
      length = len(self.dbg_output_sig.tx_traj.slot_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.dbg_output_sig.tx_traj.slot_trajectory:
        _v233 = val1.trajectory
        _x = _v233
        buff.write(_get_struct_2d().pack(_x.total_path_length, _x.total_path_time))
        _v234 = _v233.estop
        _x = _v234.is_estop
        buff.write(_get_struct_B().pack(_x))
        _x = _v234.reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v233.is_replan
        buff.write(_get_struct_B().pack(_x))
        _x = _v233.replan_reason
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v233.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val3 in _v233.trajectory_point:
          _v235 = val3.path_point
          _x = _v235
          buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
          _x = _v235.lane_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v235
          buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
          _x = val3
          buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
          _v236 = val3.gaussian_info
          _x = _v236
          buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
          _x = val3.gear
          buff.write(_get_struct_i().pack(_x))
        _x = _v233
        buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
        _x = _v233.stage
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v233.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v233.stage_info
        buff.write(_get_struct_i().pack(_x))
        _v237 = val1.slot
        _x = _v237
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v238 = _v237.pt1
        _x = _v238
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v239 = _v237.pt2
        _x = _v239
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v240 = _v237.pt3
        _x = _v240
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v241 = _v237.pt4
        _x = _v241
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v237
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v242 = _v237.VehPos
        _x = _v242
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v237
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _v243 = val1.park_slot
        _v244 = _v243.slot
        _x = _v244
        buff.write(_get_struct_3i().pack(_x.hmi_index, _x.svc_index, _x.uss_index))
        _v245 = _v244.pt1
        _x = _v245
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v246 = _v244.pt2
        _x = _v246
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v247 = _v244.pt3
        _x = _v247
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v248 = _v244.pt4
        _x = _v248
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v244
        buff.write(_get_struct_2i2f().pack(_x.type, _x.source, _x.size_x, _x.size_y))
        _v249 = _v244.VehPos
        _x = _v249
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v244
        buff.write(_get_struct_f3if().pack(_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle))
        _x = _v243.left_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v250 = _v243.left_corner_pt1
        _x = _v250
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v251 = _v243.left_corner_pt2
        _x = _v251
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v243.right_corner_exist
        buff.write(_get_struct_B().pack(_x))
        _v252 = _v243.right_corner_pt1
        _x = _v252
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v253 = _v243.right_corner_pt2
        _x = _v253
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v243.curb_exist
        buff.write(_get_struct_B().pack(_x))
        _v254 = _v243.curb_pt1
        _x = _v254
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v255 = _v243.curb_pt2
        _x = _v255
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v243.slot_bumper
        buff.write(_get_struct_B().pack(_x))
        _v256 = _v243.slot_bumper_pt1
        _x = _v256
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v257 = _v243.slot_bumper_pt2
        _x = _v257
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v258 = _v243.left_corner_pt3
        _x = _v258
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v259 = _v243.right_corner_pt3
        _x = _v259
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v243.corner_pt3_exist
        buff.write(_get_struct_B().pack(_x))
        _v260 = _v243.virtual_channel_pt1
        _x = _v260
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v261 = _v243.virtual_channel_pt2
        _x = _v261
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v243
        buff.write(_get_struct_B2iIB().pack(_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest))
        _x = val1.timestamp
        buff.write(_get_struct_Q().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.dbg_output_sig.tx_traj.node_info.node_status, _x.dbg_output_sig.tx_traj.node_info.feature_type))
      _x = self.dbg_output_sig.tx_traj.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.dbg_output_sig.tx_traj.node_info.counter, _x.dbg_output_sig.tx_traj.node_info.timestamp))
      _x = self.dbg_output_sig.tx_traj.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.dbg_output_sig.tx_traj.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.dbg_output_sig.tx_traj.node_info.buffer.tostring())
      _x = self.dbg_output_sig.tx_traj.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.dbg_output_sig.tx_traj.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QB4fi4fi80d().pack(_x.dbg_output_sig.tx_traj.counter, _x.dbg_output_sig.tx_traj.publish_ts, _x.dbg_finish.is_finish, _x.dbg_finish.finished_pt.x, _x.dbg_finish.finished_pt.y, _x.dbg_finish.finished_pt.z, _x.dbg_finish.finished_pt_theta, _x.dbg_finish.finish_error, _x.dbg_status.cur_pt.x, _x.dbg_status.cur_pt.y, _x.dbg_status.cur_pt.z, _x.dbg_status.cur_pt_theta, _x.dbg_status.status, _x.dbg_planning_rsvd.dbg_planning_reserved_1, _x.dbg_planning_rsvd.dbg_planning_reserved_2, _x.dbg_planning_rsvd.dbg_planning_reserved_3, _x.dbg_planning_rsvd.dbg_planning_reserved_4, _x.dbg_planning_rsvd.dbg_planning_reserved_5, _x.dbg_planning_rsvd.dbg_planning_reserved_6, _x.dbg_planning_rsvd.dbg_planning_reserved_7, _x.dbg_planning_rsvd.dbg_planning_reserved_8, _x.dbg_planning_rsvd.dbg_planning_reserved_9, _x.dbg_planning_rsvd.dbg_planning_reserved_10, _x.dbg_planning_rsvd.dbg_planning_reserved_11, _x.dbg_planning_rsvd.dbg_planning_reserved_12, _x.dbg_planning_rsvd.dbg_planning_reserved_13, _x.dbg_planning_rsvd.dbg_planning_reserved_14, _x.dbg_planning_rsvd.dbg_planning_reserved_15, _x.dbg_planning_rsvd.dbg_planning_reserved_16, _x.dbg_planning_rsvd.dbg_planning_reserved_17, _x.dbg_planning_rsvd.dbg_planning_reserved_18, _x.dbg_planning_rsvd.dbg_planning_reserved_19, _x.dbg_planning_rsvd.dbg_planning_reserved_20, _x.dbg_planning_rsvd.dbg_planning_reserved_21, _x.dbg_planning_rsvd.dbg_planning_reserved_22, _x.dbg_planning_rsvd.dbg_planning_reserved_23, _x.dbg_planning_rsvd.dbg_planning_reserved_24, _x.dbg_planning_rsvd.dbg_planning_reserved_25, _x.dbg_planning_rsvd.dbg_planning_reserved_26, _x.dbg_planning_rsvd.dbg_planning_reserved_27, _x.dbg_planning_rsvd.dbg_planning_reserved_28, _x.dbg_planning_rsvd.dbg_planning_reserved_29, _x.dbg_planning_rsvd.dbg_planning_reserved_30, _x.dbg_planning_rsvd.dbg_planning_reserved_31, _x.dbg_planning_rsvd.dbg_planning_reserved_32, _x.dbg_planning_rsvd.dbg_planning_reserved_33, _x.dbg_planning_rsvd.dbg_planning_reserved_34, _x.dbg_planning_rsvd.dbg_planning_reserved_35, _x.dbg_planning_rsvd.dbg_planning_reserved_36, _x.dbg_planning_rsvd.dbg_planning_reserved_37, _x.dbg_planning_rsvd.dbg_planning_reserved_38, _x.dbg_planning_rsvd.dbg_planning_reserved_39, _x.dbg_planning_rsvd.dbg_planning_reserved_40, _x.dbg_planning_rsvd.dbg_planning_reserved_41, _x.dbg_planning_rsvd.dbg_planning_reserved_42, _x.dbg_planning_rsvd.dbg_planning_reserved_43, _x.dbg_planning_rsvd.dbg_planning_reserved_44, _x.dbg_planning_rsvd.dbg_planning_reserved_45, _x.dbg_planning_rsvd.dbg_planning_reserved_46, _x.dbg_planning_rsvd.dbg_planning_reserved_47, _x.dbg_planning_rsvd.dbg_planning_reserved_48, _x.dbg_planning_rsvd.dbg_planning_reserved_49, _x.dbg_planning_rsvd.dbg_planning_reserved_50, _x.dbg_planning_rsvd.dbg_planning_reserved_51, _x.dbg_planning_rsvd.dbg_planning_reserved_52, _x.dbg_planning_rsvd.dbg_planning_reserved_53, _x.dbg_planning_rsvd.dbg_planning_reserved_54, _x.dbg_planning_rsvd.dbg_planning_reserved_55, _x.dbg_planning_rsvd.dbg_planning_reserved_56, _x.dbg_planning_rsvd.dbg_planning_reserved_57, _x.dbg_planning_rsvd.dbg_planning_reserved_58, _x.dbg_planning_rsvd.dbg_planning_reserved_59, _x.dbg_planning_rsvd.dbg_planning_reserved_60, _x.dbg_planning_rsvd.dbg_planning_reserved_61, _x.dbg_planning_rsvd.dbg_planning_reserved_62, _x.dbg_planning_rsvd.dbg_planning_reserved_63, _x.dbg_planning_rsvd.dbg_planning_reserved_64, _x.dbg_planning_rsvd.dbg_planning_reserved_65, _x.dbg_planning_rsvd.dbg_planning_reserved_66, _x.dbg_planning_rsvd.dbg_planning_reserved_67, _x.dbg_planning_rsvd.dbg_planning_reserved_68, _x.dbg_planning_rsvd.dbg_planning_reserved_69, _x.dbg_planning_rsvd.dbg_planning_reserved_70, _x.dbg_planning_rsvd.dbg_planning_reserved_71, _x.dbg_planning_rsvd.dbg_planning_reserved_72, _x.dbg_planning_rsvd.dbg_planning_reserved_73, _x.dbg_planning_rsvd.dbg_planning_reserved_74, _x.dbg_planning_rsvd.dbg_planning_reserved_75, _x.dbg_planning_rsvd.dbg_planning_reserved_76, _x.dbg_planning_rsvd.dbg_planning_reserved_77, _x.dbg_planning_rsvd.dbg_planning_reserved_78, _x.dbg_planning_rsvd.dbg_planning_reserved_79, _x.dbg_planning_rsvd.dbg_planning_reserved_80))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_81
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_82
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_83
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_84
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_85
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_86
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_87
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_88
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_89
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_90
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_91
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_92
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_93
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_94
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_95
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_96
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_97
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_98
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_99
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dbg_planning_rsvd.dbg_planning_reserved_100
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_36fQ().pack(_x.dbg_planning_slot_info.curb_internal_pt1.x, _x.dbg_planning_slot_info.curb_internal_pt1.y, _x.dbg_planning_slot_info.curb_internal_pt1.z, _x.dbg_planning_slot_info.curb_internal_pt2.x, _x.dbg_planning_slot_info.curb_internal_pt2.y, _x.dbg_planning_slot_info.curb_internal_pt2.z, _x.dbg_planning_slot_info.wall_internal_pt1.x, _x.dbg_planning_slot_info.wall_internal_pt1.y, _x.dbg_planning_slot_info.wall_internal_pt1.z, _x.dbg_planning_slot_info.wall_internal_pt2.x, _x.dbg_planning_slot_info.wall_internal_pt2.y, _x.dbg_planning_slot_info.wall_internal_pt2.z, _x.dbg_planning_slot_info.left_corner_pt1.x, _x.dbg_planning_slot_info.left_corner_pt1.y, _x.dbg_planning_slot_info.left_corner_pt1.z, _x.dbg_planning_slot_info.left_corner_pt2.x, _x.dbg_planning_slot_info.left_corner_pt2.y, _x.dbg_planning_slot_info.left_corner_pt2.z, _x.dbg_planning_slot_info.right_corner_pt1.x, _x.dbg_planning_slot_info.right_corner_pt1.y, _x.dbg_planning_slot_info.right_corner_pt1.z, _x.dbg_planning_slot_info.right_corner_pt2.x, _x.dbg_planning_slot_info.right_corner_pt2.y, _x.dbg_planning_slot_info.right_corner_pt2.z, _x.dbg_planning_slot_info.dbg_planning_reserved_9.x, _x.dbg_planning_slot_info.dbg_planning_reserved_9.y, _x.dbg_planning_slot_info.dbg_planning_reserved_9.z, _x.dbg_planning_slot_info.dbg_planning_reserved_10.x, _x.dbg_planning_slot_info.dbg_planning_reserved_10.y, _x.dbg_planning_slot_info.dbg_planning_reserved_10.z, _x.dbg_planning_slot_info.dbg_planning_reserved_11.x, _x.dbg_planning_slot_info.dbg_planning_reserved_11.y, _x.dbg_planning_slot_info.dbg_planning_reserved_11.z, _x.dbg_planning_slot_info.dbg_planning_reserved_12.x, _x.dbg_planning_slot_info.dbg_planning_reserved_12.y, _x.dbg_planning_slot_info.dbg_planning_reserved_12.z, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dbg_replan is None:
        self.dbg_replan = rospy_message_converter.msg.ReplanDbgOut()
      if self.dbg_traj_crop is None:
        self.dbg_traj_crop = rospy_message_converter.msg.TrajCropDbgOut()
      if self.dbg_input_sig is None:
        self.dbg_input_sig = rospy_message_converter.msg.InputSignalDbgOut()
      if self.dbg_output_sig is None:
        self.dbg_output_sig = rospy_message_converter.msg.OutputSignalDbgOut()
      if self.dbg_finish is None:
        self.dbg_finish = rospy_message_converter.msg.ParkingFinishDbgOut()
      if self.dbg_status is None:
        self.dbg_status = rospy_message_converter.msg.ParkingStatusDbgOut()
      if self.dbg_planning_rsvd is None:
        self.dbg_planning_rsvd = rospy_message_converter.msg.ReservedPlanningDbgOut()
      if self.dbg_planning_slot_info is None:
        self.dbg_planning_slot_info = rospy_message_converter.msg.ParkingSlotInfoDbgOut()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.dbg_replan.replan_start_pt.x, _x.dbg_replan.replan_start_pt.y, _x.dbg_replan.replan_start_pt.z, _x.dbg_replan.replan_end_pt.x, _x.dbg_replan.replan_end_pt.y, _x.dbg_replan.replan_end_pt.z, _x.dbg_replan.replan_start_pt_theta, _x.dbg_replan.replan_end_pt_theta,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_replan.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_replan.replan_reason = str[start:end]
      start = end
      end += 1
      (self.dbg_replan.is_replan_fail,) = _get_struct_B().unpack(str[start:end])
      self.dbg_replan.is_replan_fail = bool(self.dbg_replan.is_replan_fail)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_replan.failed_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_replan.failed_segment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_replan.failed_point = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_replan.failed_point = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.dbg_replan.fail_reason, _x.dbg_replan.exceeded_bound, _x.dbg_replan.collide_pt, _x.dbg_traj_crop.traj_start_pt.x, _x.dbg_traj_crop.traj_start_pt.y, _x.dbg_traj_crop.traj_start_pt.z, _x.dbg_traj_crop.traj_end_pt.x, _x.dbg_traj_crop.traj_end_pt.y, _x.dbg_traj_crop.traj_end_pt.z, _x.dbg_traj_crop.traj_start_pt_theta, _x.dbg_traj_crop.traj_end_pt_theta,) = _get_struct_3i8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_traj_crop.traj_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_traj_crop.traj_segment = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.dbg_traj_crop.cur_index, _x.dbg_traj_crop.is_start_cropped, _x.dbg_traj_crop.is_end_cropped, _x.dbg_traj_crop.is_estop, _x.dbg_traj_crop.crop_reason, _x.dbg_traj_crop.curr_location.timestamp, _x.dbg_traj_crop.curr_location.location_valid, _x.dbg_traj_crop.curr_location.position.x, _x.dbg_traj_crop.curr_location.position.y, _x.dbg_traj_crop.curr_location.position.z, _x.dbg_traj_crop.curr_location.orientation.x, _x.dbg_traj_crop.curr_location.orientation.y, _x.dbg_traj_crop.curr_location.orientation.z, _x.dbg_traj_crop.curr_location.orientation.w, _x.dbg_traj_crop.curr_location.easting, _x.dbg_traj_crop.curr_location.northing, _x.dbg_traj_crop.curr_location.height, _x.dbg_traj_crop.curr_location.speed, _x.dbg_traj_crop.curr_location.sum_s, _x.dbg_input_sig.has_state_machine, _x.dbg_input_sig.has_veh10ms, _x.dbg_input_sig.has_veh50ms, _x.dbg_input_sig.has_location, _x.dbg_input_sig.has_collision_dst, _x.dbg_input_sig.has_obj_map, _x.dbg_input_sig.has_ads, _x.dbg_output_sig.exist_geo_traj, _x.dbg_output_sig.exist_cropped_traj, _x.dbg_output_sig.exist_tx_traj,) = _get_struct_f3BiQB12f10B().unpack(str[start:end])
      self.dbg_traj_crop.is_start_cropped = bool(self.dbg_traj_crop.is_start_cropped)
      self.dbg_traj_crop.is_end_cropped = bool(self.dbg_traj_crop.is_end_cropped)
      self.dbg_traj_crop.is_estop = bool(self.dbg_traj_crop.is_estop)
      self.dbg_traj_crop.curr_location.location_valid = bool(self.dbg_traj_crop.curr_location.location_valid)
      self.dbg_input_sig.has_state_machine = bool(self.dbg_input_sig.has_state_machine)
      self.dbg_input_sig.has_veh10ms = bool(self.dbg_input_sig.has_veh10ms)
      self.dbg_input_sig.has_veh50ms = bool(self.dbg_input_sig.has_veh50ms)
      self.dbg_input_sig.has_location = bool(self.dbg_input_sig.has_location)
      self.dbg_input_sig.has_collision_dst = bool(self.dbg_input_sig.has_collision_dst)
      self.dbg_input_sig.has_obj_map = bool(self.dbg_input_sig.has_obj_map)
      self.dbg_input_sig.has_ads = bool(self.dbg_input_sig.has_ads)
      self.dbg_output_sig.exist_geo_traj = bool(self.dbg_output_sig.exist_geo_traj)
      self.dbg_output_sig.exist_cropped_traj = bool(self.dbg_output_sig.exist_cropped_traj)
      self.dbg_output_sig.exist_tx_traj = bool(self.dbg_output_sig.exist_tx_traj)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dbg_output_sig.geo_traj.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v262 = val1.trajectory
        _x = _v262
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v263 = _v262.estop
        start = end
        end += 1
        (_v263.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v263.is_estop = bool(_v263.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v263.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v263.reason = str[start:end]
        start = end
        end += 1
        (_v262.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v262.is_replan = bool(_v262.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v262.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v262.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v262.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v264 = val3.path_point
          _x = _v264
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v264.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v264.lane_id = str[start:end]
          _x = _v264
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v265 = val3.gaussian_info
          _x = _v265
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v262.trajectory_point.append(val3)
        _x = _v262
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v262.is_finished = bool(_v262.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v262.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v262.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v262.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v262.info = str[start:end]
        start = end
        end += 4
        (_v262.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v266 = val1.slot
        _x = _v266
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v267 = _v266.pt1
        _x = _v267
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v268 = _v266.pt2
        _x = _v268
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v269 = _v266.pt3
        _x = _v269
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v270 = _v266.pt4
        _x = _v270
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v266
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v271 = _v266.VehPos
        _x = _v271
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v266
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v272 = val1.park_slot
        _v273 = _v272.slot
        _x = _v273
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v274 = _v273.pt1
        _x = _v274
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v275 = _v273.pt2
        _x = _v275
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v276 = _v273.pt3
        _x = _v276
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v277 = _v273.pt4
        _x = _v277
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v273
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v278 = _v273.VehPos
        _x = _v278
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v273
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v272.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v272.left_corner_exist = bool(_v272.left_corner_exist)
        _v279 = _v272.left_corner_pt1
        _x = _v279
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v280 = _v272.left_corner_pt2
        _x = _v280
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v272.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v272.right_corner_exist = bool(_v272.right_corner_exist)
        _v281 = _v272.right_corner_pt1
        _x = _v281
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v282 = _v272.right_corner_pt2
        _x = _v282
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v272.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v272.curb_exist = bool(_v272.curb_exist)
        _v283 = _v272.curb_pt1
        _x = _v283
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v284 = _v272.curb_pt2
        _x = _v284
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v272.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v272.slot_bumper = bool(_v272.slot_bumper)
        _v285 = _v272.slot_bumper_pt1
        _x = _v285
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v286 = _v272.slot_bumper_pt2
        _x = _v286
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v287 = _v272.left_corner_pt3
        _x = _v287
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v288 = _v272.right_corner_pt3
        _x = _v288
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v272.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v272.corner_pt3_exist = bool(_v272.corner_pt3_exist)
        _v289 = _v272.virtual_channel_pt1
        _x = _v289
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v290 = _v272.virtual_channel_pt2
        _x = _v290
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v272
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v272.virtual_channel_exist = bool(_v272.virtual_channel_exist)
        _v272.replan_suggest = bool(_v272.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.dbg_output_sig.geo_traj.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.dbg_output_sig.geo_traj.node_info.node_status, _x.dbg_output_sig.geo_traj.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.geo_traj.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.geo_traj.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.geo_traj.node_info.counter, _x.dbg_output_sig.geo_traj.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.geo_traj.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.geo_traj.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dbg_output_sig.geo_traj.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.dbg_output_sig.geo_traj.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.geo_traj.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.geo_traj.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.geo_traj.counter, _x.dbg_output_sig.geo_traj.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dbg_output_sig.cropped_traj.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v291 = val1.trajectory
        _x = _v291
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v292 = _v291.estop
        start = end
        end += 1
        (_v292.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v292.is_estop = bool(_v292.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v292.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v292.reason = str[start:end]
        start = end
        end += 1
        (_v291.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v291.is_replan = bool(_v291.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v291.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v291.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v291.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v293 = val3.path_point
          _x = _v293
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v293.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v293.lane_id = str[start:end]
          _x = _v293
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v294 = val3.gaussian_info
          _x = _v294
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v291.trajectory_point.append(val3)
        _x = _v291
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v291.is_finished = bool(_v291.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v291.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v291.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v291.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v291.info = str[start:end]
        start = end
        end += 4
        (_v291.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v295 = val1.slot
        _x = _v295
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v296 = _v295.pt1
        _x = _v296
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v297 = _v295.pt2
        _x = _v297
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v298 = _v295.pt3
        _x = _v298
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v299 = _v295.pt4
        _x = _v299
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v295
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v300 = _v295.VehPos
        _x = _v300
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v295
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v301 = val1.park_slot
        _v302 = _v301.slot
        _x = _v302
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v303 = _v302.pt1
        _x = _v303
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v304 = _v302.pt2
        _x = _v304
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v305 = _v302.pt3
        _x = _v305
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v306 = _v302.pt4
        _x = _v306
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v302
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v307 = _v302.VehPos
        _x = _v307
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v302
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v301.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v301.left_corner_exist = bool(_v301.left_corner_exist)
        _v308 = _v301.left_corner_pt1
        _x = _v308
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v309 = _v301.left_corner_pt2
        _x = _v309
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v301.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v301.right_corner_exist = bool(_v301.right_corner_exist)
        _v310 = _v301.right_corner_pt1
        _x = _v310
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v311 = _v301.right_corner_pt2
        _x = _v311
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v301.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v301.curb_exist = bool(_v301.curb_exist)
        _v312 = _v301.curb_pt1
        _x = _v312
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v313 = _v301.curb_pt2
        _x = _v313
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v301.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v301.slot_bumper = bool(_v301.slot_bumper)
        _v314 = _v301.slot_bumper_pt1
        _x = _v314
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v315 = _v301.slot_bumper_pt2
        _x = _v315
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v316 = _v301.left_corner_pt3
        _x = _v316
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v317 = _v301.right_corner_pt3
        _x = _v317
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v301.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v301.corner_pt3_exist = bool(_v301.corner_pt3_exist)
        _v318 = _v301.virtual_channel_pt1
        _x = _v318
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v319 = _v301.virtual_channel_pt2
        _x = _v319
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v301
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v301.virtual_channel_exist = bool(_v301.virtual_channel_exist)
        _v301.replan_suggest = bool(_v301.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.dbg_output_sig.cropped_traj.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.dbg_output_sig.cropped_traj.node_info.node_status, _x.dbg_output_sig.cropped_traj.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.cropped_traj.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.cropped_traj.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.cropped_traj.node_info.counter, _x.dbg_output_sig.cropped_traj.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.cropped_traj.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.cropped_traj.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dbg_output_sig.cropped_traj.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.dbg_output_sig.cropped_traj.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.cropped_traj.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.cropped_traj.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.cropped_traj.counter, _x.dbg_output_sig.cropped_traj.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dbg_output_sig.tx_traj.slot_trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SlotTrajectory()
        _v320 = val1.trajectory
        _x = _v320
        start = end
        end += 16
        (_x.total_path_length, _x.total_path_time,) = _get_struct_2d().unpack(str[start:end])
        _v321 = _v320.estop
        start = end
        end += 1
        (_v321.is_estop,) = _get_struct_B().unpack(str[start:end])
        _v321.is_estop = bool(_v321.is_estop)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v321.reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v321.reason = str[start:end]
        start = end
        end += 1
        (_v320.is_replan,) = _get_struct_B().unpack(str[start:end])
        _v320.is_replan = bool(_v320.is_replan)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v320.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v320.replan_reason = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v320.trajectory_point = []
        for i in range(0, length):
          val3 = rospy_message_converter.msg.TrajectoryPoint()
          _v322 = val3.path_point
          _x = _v322
          start = end
          end += 64
          (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v322.lane_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v322.lane_id = str[start:end]
          _x = _v322
          start = end
          end += 16
          (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
          _x = val3
          start = end
          end += 40
          (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
          _v323 = val3.gaussian_info
          _x = _v323
          start = end
          end += 56
          (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
          start = end
          end += 4
          (val3.gear,) = _get_struct_i().unpack(str[start:end])
          _v320.trajectory_point.append(val3)
        _x = _v320
        start = end
        end += 5
        (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
        _v320.is_finished = bool(_v320.is_finished)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v320.stage = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v320.stage = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v320.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v320.info = str[start:end]
        start = end
        end += 4
        (_v320.stage_info,) = _get_struct_i().unpack(str[start:end])
        _v324 = val1.slot
        _x = _v324
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v325 = _v324.pt1
        _x = _v325
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v326 = _v324.pt2
        _x = _v326
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v327 = _v324.pt3
        _x = _v327
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v328 = _v324.pt4
        _x = _v328
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v324
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v329 = _v324.VehPos
        _x = _v329
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v324
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        _v330 = val1.park_slot
        _v331 = _v330.slot
        _x = _v331
        start = end
        end += 12
        (_x.hmi_index, _x.svc_index, _x.uss_index,) = _get_struct_3i().unpack(str[start:end])
        _v332 = _v331.pt1
        _x = _v332
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v333 = _v331.pt2
        _x = _v333
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v334 = _v331.pt3
        _x = _v334
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v335 = _v331.pt4
        _x = _v335
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v331
        start = end
        end += 16
        (_x.type, _x.source, _x.size_x, _x.size_y,) = _get_struct_2i2f().unpack(str[start:end])
        _v336 = _v331.VehPos
        _x = _v336
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v331
        start = end
        end += 20
        (_x.VehPsi, _x.status, _x.fov, _x.planning_result, _x.slot_angle,) = _get_struct_f3if().unpack(str[start:end])
        start = end
        end += 1
        (_v330.left_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v330.left_corner_exist = bool(_v330.left_corner_exist)
        _v337 = _v330.left_corner_pt1
        _x = _v337
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v338 = _v330.left_corner_pt2
        _x = _v338
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v330.right_corner_exist,) = _get_struct_B().unpack(str[start:end])
        _v330.right_corner_exist = bool(_v330.right_corner_exist)
        _v339 = _v330.right_corner_pt1
        _x = _v339
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v340 = _v330.right_corner_pt2
        _x = _v340
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v330.curb_exist,) = _get_struct_B().unpack(str[start:end])
        _v330.curb_exist = bool(_v330.curb_exist)
        _v341 = _v330.curb_pt1
        _x = _v341
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v342 = _v330.curb_pt2
        _x = _v342
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v330.slot_bumper,) = _get_struct_B().unpack(str[start:end])
        _v330.slot_bumper = bool(_v330.slot_bumper)
        _v343 = _v330.slot_bumper_pt1
        _x = _v343
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v344 = _v330.slot_bumper_pt2
        _x = _v344
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v345 = _v330.left_corner_pt3
        _x = _v345
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v346 = _v330.right_corner_pt3
        _x = _v346
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (_v330.corner_pt3_exist,) = _get_struct_B().unpack(str[start:end])
        _v330.corner_pt3_exist = bool(_v330.corner_pt3_exist)
        _v347 = _v330.virtual_channel_pt1
        _x = _v347
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v348 = _v330.virtual_channel_pt2
        _x = _v348
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = _v330
        start = end
        end += 14
        (_x.virtual_channel_exist, _x.left_corner_type, _x.right_corner_type, _x.slot_update_count, _x.replan_suggest,) = _get_struct_B2iIB().unpack(str[start:end])
        _v330.virtual_channel_exist = bool(_v330.virtual_channel_exist)
        _v330.replan_suggest = bool(_v330.replan_suggest)
        start = end
        end += 8
        (val1.timestamp,) = _get_struct_Q().unpack(str[start:end])
        self.dbg_output_sig.tx_traj.slot_trajectory.append(val1)
      _x = self
      start = end
      end += 8
      (_x.dbg_output_sig.tx_traj.node_info.node_status, _x.dbg_output_sig.tx_traj.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.tx_traj.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.tx_traj.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.dbg_output_sig.tx_traj.node_info.counter, _x.dbg_output_sig.tx_traj.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.tx_traj.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.tx_traj.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dbg_output_sig.tx_traj.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 8
      (self.dbg_output_sig.tx_traj.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_output_sig.tx_traj.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_output_sig.tx_traj.publisher_id = str[start:end]
      _x = self
      start = end
      end += 697
      (_x.dbg_output_sig.tx_traj.counter, _x.dbg_output_sig.tx_traj.publish_ts, _x.dbg_finish.is_finish, _x.dbg_finish.finished_pt.x, _x.dbg_finish.finished_pt.y, _x.dbg_finish.finished_pt.z, _x.dbg_finish.finished_pt_theta, _x.dbg_finish.finish_error, _x.dbg_status.cur_pt.x, _x.dbg_status.cur_pt.y, _x.dbg_status.cur_pt.z, _x.dbg_status.cur_pt_theta, _x.dbg_status.status, _x.dbg_planning_rsvd.dbg_planning_reserved_1, _x.dbg_planning_rsvd.dbg_planning_reserved_2, _x.dbg_planning_rsvd.dbg_planning_reserved_3, _x.dbg_planning_rsvd.dbg_planning_reserved_4, _x.dbg_planning_rsvd.dbg_planning_reserved_5, _x.dbg_planning_rsvd.dbg_planning_reserved_6, _x.dbg_planning_rsvd.dbg_planning_reserved_7, _x.dbg_planning_rsvd.dbg_planning_reserved_8, _x.dbg_planning_rsvd.dbg_planning_reserved_9, _x.dbg_planning_rsvd.dbg_planning_reserved_10, _x.dbg_planning_rsvd.dbg_planning_reserved_11, _x.dbg_planning_rsvd.dbg_planning_reserved_12, _x.dbg_planning_rsvd.dbg_planning_reserved_13, _x.dbg_planning_rsvd.dbg_planning_reserved_14, _x.dbg_planning_rsvd.dbg_planning_reserved_15, _x.dbg_planning_rsvd.dbg_planning_reserved_16, _x.dbg_planning_rsvd.dbg_planning_reserved_17, _x.dbg_planning_rsvd.dbg_planning_reserved_18, _x.dbg_planning_rsvd.dbg_planning_reserved_19, _x.dbg_planning_rsvd.dbg_planning_reserved_20, _x.dbg_planning_rsvd.dbg_planning_reserved_21, _x.dbg_planning_rsvd.dbg_planning_reserved_22, _x.dbg_planning_rsvd.dbg_planning_reserved_23, _x.dbg_planning_rsvd.dbg_planning_reserved_24, _x.dbg_planning_rsvd.dbg_planning_reserved_25, _x.dbg_planning_rsvd.dbg_planning_reserved_26, _x.dbg_planning_rsvd.dbg_planning_reserved_27, _x.dbg_planning_rsvd.dbg_planning_reserved_28, _x.dbg_planning_rsvd.dbg_planning_reserved_29, _x.dbg_planning_rsvd.dbg_planning_reserved_30, _x.dbg_planning_rsvd.dbg_planning_reserved_31, _x.dbg_planning_rsvd.dbg_planning_reserved_32, _x.dbg_planning_rsvd.dbg_planning_reserved_33, _x.dbg_planning_rsvd.dbg_planning_reserved_34, _x.dbg_planning_rsvd.dbg_planning_reserved_35, _x.dbg_planning_rsvd.dbg_planning_reserved_36, _x.dbg_planning_rsvd.dbg_planning_reserved_37, _x.dbg_planning_rsvd.dbg_planning_reserved_38, _x.dbg_planning_rsvd.dbg_planning_reserved_39, _x.dbg_planning_rsvd.dbg_planning_reserved_40, _x.dbg_planning_rsvd.dbg_planning_reserved_41, _x.dbg_planning_rsvd.dbg_planning_reserved_42, _x.dbg_planning_rsvd.dbg_planning_reserved_43, _x.dbg_planning_rsvd.dbg_planning_reserved_44, _x.dbg_planning_rsvd.dbg_planning_reserved_45, _x.dbg_planning_rsvd.dbg_planning_reserved_46, _x.dbg_planning_rsvd.dbg_planning_reserved_47, _x.dbg_planning_rsvd.dbg_planning_reserved_48, _x.dbg_planning_rsvd.dbg_planning_reserved_49, _x.dbg_planning_rsvd.dbg_planning_reserved_50, _x.dbg_planning_rsvd.dbg_planning_reserved_51, _x.dbg_planning_rsvd.dbg_planning_reserved_52, _x.dbg_planning_rsvd.dbg_planning_reserved_53, _x.dbg_planning_rsvd.dbg_planning_reserved_54, _x.dbg_planning_rsvd.dbg_planning_reserved_55, _x.dbg_planning_rsvd.dbg_planning_reserved_56, _x.dbg_planning_rsvd.dbg_planning_reserved_57, _x.dbg_planning_rsvd.dbg_planning_reserved_58, _x.dbg_planning_rsvd.dbg_planning_reserved_59, _x.dbg_planning_rsvd.dbg_planning_reserved_60, _x.dbg_planning_rsvd.dbg_planning_reserved_61, _x.dbg_planning_rsvd.dbg_planning_reserved_62, _x.dbg_planning_rsvd.dbg_planning_reserved_63, _x.dbg_planning_rsvd.dbg_planning_reserved_64, _x.dbg_planning_rsvd.dbg_planning_reserved_65, _x.dbg_planning_rsvd.dbg_planning_reserved_66, _x.dbg_planning_rsvd.dbg_planning_reserved_67, _x.dbg_planning_rsvd.dbg_planning_reserved_68, _x.dbg_planning_rsvd.dbg_planning_reserved_69, _x.dbg_planning_rsvd.dbg_planning_reserved_70, _x.dbg_planning_rsvd.dbg_planning_reserved_71, _x.dbg_planning_rsvd.dbg_planning_reserved_72, _x.dbg_planning_rsvd.dbg_planning_reserved_73, _x.dbg_planning_rsvd.dbg_planning_reserved_74, _x.dbg_planning_rsvd.dbg_planning_reserved_75, _x.dbg_planning_rsvd.dbg_planning_reserved_76, _x.dbg_planning_rsvd.dbg_planning_reserved_77, _x.dbg_planning_rsvd.dbg_planning_reserved_78, _x.dbg_planning_rsvd.dbg_planning_reserved_79, _x.dbg_planning_rsvd.dbg_planning_reserved_80,) = _get_struct_2QB4fi4fi80d().unpack(str[start:end])
      self.dbg_finish.is_finish = bool(self.dbg_finish.is_finish)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_81 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_81 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_82 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_82 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_83 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_83 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_84 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_84 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_85 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_85 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_86 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_86 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_87 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_87 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_88 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_88 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_89 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_89 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_90 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_90 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_91 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_91 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_92 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_92 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_93 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_93 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_94 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_94 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_95 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_95 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_96 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_96 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_97 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_97 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_98 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_98 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_99 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_99 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dbg_planning_rsvd.dbg_planning_reserved_100 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dbg_planning_rsvd.dbg_planning_reserved_100 = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.dbg_planning_slot_info.curb_internal_pt1.x, _x.dbg_planning_slot_info.curb_internal_pt1.y, _x.dbg_planning_slot_info.curb_internal_pt1.z, _x.dbg_planning_slot_info.curb_internal_pt2.x, _x.dbg_planning_slot_info.curb_internal_pt2.y, _x.dbg_planning_slot_info.curb_internal_pt2.z, _x.dbg_planning_slot_info.wall_internal_pt1.x, _x.dbg_planning_slot_info.wall_internal_pt1.y, _x.dbg_planning_slot_info.wall_internal_pt1.z, _x.dbg_planning_slot_info.wall_internal_pt2.x, _x.dbg_planning_slot_info.wall_internal_pt2.y, _x.dbg_planning_slot_info.wall_internal_pt2.z, _x.dbg_planning_slot_info.left_corner_pt1.x, _x.dbg_planning_slot_info.left_corner_pt1.y, _x.dbg_planning_slot_info.left_corner_pt1.z, _x.dbg_planning_slot_info.left_corner_pt2.x, _x.dbg_planning_slot_info.left_corner_pt2.y, _x.dbg_planning_slot_info.left_corner_pt2.z, _x.dbg_planning_slot_info.right_corner_pt1.x, _x.dbg_planning_slot_info.right_corner_pt1.y, _x.dbg_planning_slot_info.right_corner_pt1.z, _x.dbg_planning_slot_info.right_corner_pt2.x, _x.dbg_planning_slot_info.right_corner_pt2.y, _x.dbg_planning_slot_info.right_corner_pt2.z, _x.dbg_planning_slot_info.dbg_planning_reserved_9.x, _x.dbg_planning_slot_info.dbg_planning_reserved_9.y, _x.dbg_planning_slot_info.dbg_planning_reserved_9.z, _x.dbg_planning_slot_info.dbg_planning_reserved_10.x, _x.dbg_planning_slot_info.dbg_planning_reserved_10.y, _x.dbg_planning_slot_info.dbg_planning_reserved_10.z, _x.dbg_planning_slot_info.dbg_planning_reserved_11.x, _x.dbg_planning_slot_info.dbg_planning_reserved_11.y, _x.dbg_planning_slot_info.dbg_planning_reserved_11.z, _x.dbg_planning_slot_info.dbg_planning_reserved_12.x, _x.dbg_planning_slot_info.dbg_planning_reserved_12.y, _x.dbg_planning_slot_info.dbg_planning_reserved_12.z, _x.publish_ptp_ts,) = _get_struct_36fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2QB4fi4fi80d = None
def _get_struct_2QB4fi4fi80d():
    global _struct_2QB4fi4fi80d
    if _struct_2QB4fi4fi80d is None:
        _struct_2QB4fi4fi80d = struct.Struct("<2QB4fi4fi80d")
    return _struct_2QB4fi4fi80d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i2f = None
def _get_struct_2i2f():
    global _struct_2i2f
    if _struct_2i2f is None:
        _struct_2i2f = struct.Struct("<2i2f")
    return _struct_2i2f
_struct_36fQ = None
def _get_struct_36fQ():
    global _struct_36fQ
    if _struct_36fQ is None:
        _struct_36fQ = struct.Struct("<36fQ")
    return _struct_36fQ
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_3i8f = None
def _get_struct_3i8f():
    global _struct_3i8f
    if _struct_3i8f is None:
        _struct_3i8f = struct.Struct("<3i8f")
    return _struct_3i8f
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2iIB = None
def _get_struct_B2iIB():
    global _struct_B2iIB
    if _struct_B2iIB is None:
        _struct_B2iIB = struct.Struct("<B2iIB")
    return _struct_B2iIB
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_f3BiQB12f10B = None
def _get_struct_f3BiQB12f10B():
    global _struct_f3BiQB12f10B
    if _struct_f3BiQB12f10B is None:
        _struct_f3BiQB12f10B = struct.Struct("<f3BiQB12f10B")
    return _struct_f3BiQB12f10B
_struct_f3if = None
def _get_struct_f3if():
    global _struct_f3if
    if _struct_f3if is None:
        _struct_f3if = struct.Struct("<f3if")
    return _struct_f3if
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB

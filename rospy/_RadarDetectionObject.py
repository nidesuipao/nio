# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarDetectionObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarDetectionObject(genpy.Message):
  _md5sum = "90fb69129ad8736b9d64b483e22dcce9"
  _type = "rospy_message_converter/RadarDetectionObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 ID
int32 source
float32 range
float32 range_rate
float32 azimuth
float32 elevation_angle
float32 radar_cross_section
float32 azimuth_conf
float32 elevation_conf
float32 exist_prob
"""
  __slots__ = ['ID','source','range','range_rate','azimuth','elevation_angle','radar_cross_section','azimuth_conf','elevation_conf','exist_prob']
  _slot_types = ['uint32','int32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,source,range,range_rate,azimuth,elevation_angle,radar_cross_section,azimuth_conf,elevation_conf,exist_prob

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarDetectionObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.source is None:
        self.source = 0
      if self.range is None:
        self.range = 0.
      if self.range_rate is None:
        self.range_rate = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.elevation_angle is None:
        self.elevation_angle = 0.
      if self.radar_cross_section is None:
        self.radar_cross_section = 0.
      if self.azimuth_conf is None:
        self.azimuth_conf = 0.
      if self.elevation_conf is None:
        self.elevation_conf = 0.
      if self.exist_prob is None:
        self.exist_prob = 0.
    else:
      self.ID = 0
      self.source = 0
      self.range = 0.
      self.range_rate = 0.
      self.azimuth = 0.
      self.elevation_angle = 0.
      self.radar_cross_section = 0.
      self.azimuth_conf = 0.
      self.elevation_conf = 0.
      self.exist_prob = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Ii8f().pack(_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob,) = _get_struct_Ii8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Ii8f().pack(_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.ID, _x.source, _x.range, _x.range_rate, _x.azimuth, _x.elevation_angle, _x.radar_cross_section, _x.azimuth_conf, _x.elevation_conf, _x.exist_prob,) = _get_struct_Ii8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Ii8f = None
def _get_struct_Ii8f():
    global _struct_Ii8f
    if _struct_Ii8f is None:
        _struct_Ii8f = struct.Struct("<Ii8f")
    return _struct_Ii8f

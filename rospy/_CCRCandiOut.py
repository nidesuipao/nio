# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CCRCandiOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class CCRCandiOut(genpy.Message):
  _md5sum = "a4042403362bb28d2a37febfbb67179e"
  _type = "rospy_message_converter/CCRCandiOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 ID
uint32 VID
float32 longpos
float32 latpos
float32 longspd
float32 latspd
float32 longacc
float32 latacc
float32 range
float32 rangerate
float32 TTC
float32 XOLC
uint32 movestate
bool moveout
bool inpath_before
bool inpath_after
uint32 AEBconf
bool inpath
bool vfcheck
bool lfcheck
uint32 age
bool agecheck
uint32 inpathage
bool inpathcheck
bool TOI
bool warn
bool prefill
bool lowbrake
bool highbrake
bool isvision
bool isfusion
bool isradar
float32 timetoturn
float32 timetobrake
bool steerflag
RefPoint ref_pos
bool iba_flag
float32 hitdist
float32 yawdist
bool driverovertake
bool driverovertake_warn
uint32 movingleftcount
uint32 movingrightcount

================================================================================
MSG: rospy_message_converter/RefPoint
uint32 ref_character
float64 pos_x
float64 pos_y
float64 range
float64 heading
"""
  __slots__ = ['ID','VID','longpos','latpos','longspd','latspd','longacc','latacc','range','rangerate','TTC','XOLC','movestate','moveout','inpath_before','inpath_after','AEBconf','inpath','vfcheck','lfcheck','age','agecheck','inpathage','inpathcheck','TOI','warn','prefill','lowbrake','highbrake','isvision','isfusion','isradar','timetoturn','timetobrake','steerflag','ref_pos','iba_flag','hitdist','yawdist','driverovertake','driverovertake_warn','movingleftcount','movingrightcount']
  _slot_types = ['uint32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','bool','bool','bool','uint32','bool','bool','bool','uint32','bool','uint32','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','bool','rospy_message_converter/RefPoint','bool','float32','float32','bool','bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,VID,longpos,latpos,longspd,latspd,longacc,latacc,range,rangerate,TTC,XOLC,movestate,moveout,inpath_before,inpath_after,AEBconf,inpath,vfcheck,lfcheck,age,agecheck,inpathage,inpathcheck,TOI,warn,prefill,lowbrake,highbrake,isvision,isfusion,isradar,timetoturn,timetobrake,steerflag,ref_pos,iba_flag,hitdist,yawdist,driverovertake,driverovertake_warn,movingleftcount,movingrightcount

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CCRCandiOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.VID is None:
        self.VID = 0
      if self.longpos is None:
        self.longpos = 0.
      if self.latpos is None:
        self.latpos = 0.
      if self.longspd is None:
        self.longspd = 0.
      if self.latspd is None:
        self.latspd = 0.
      if self.longacc is None:
        self.longacc = 0.
      if self.latacc is None:
        self.latacc = 0.
      if self.range is None:
        self.range = 0.
      if self.rangerate is None:
        self.rangerate = 0.
      if self.TTC is None:
        self.TTC = 0.
      if self.XOLC is None:
        self.XOLC = 0.
      if self.movestate is None:
        self.movestate = 0
      if self.moveout is None:
        self.moveout = False
      if self.inpath_before is None:
        self.inpath_before = False
      if self.inpath_after is None:
        self.inpath_after = False
      if self.AEBconf is None:
        self.AEBconf = 0
      if self.inpath is None:
        self.inpath = False
      if self.vfcheck is None:
        self.vfcheck = False
      if self.lfcheck is None:
        self.lfcheck = False
      if self.age is None:
        self.age = 0
      if self.agecheck is None:
        self.agecheck = False
      if self.inpathage is None:
        self.inpathage = 0
      if self.inpathcheck is None:
        self.inpathcheck = False
      if self.TOI is None:
        self.TOI = False
      if self.warn is None:
        self.warn = False
      if self.prefill is None:
        self.prefill = False
      if self.lowbrake is None:
        self.lowbrake = False
      if self.highbrake is None:
        self.highbrake = False
      if self.isvision is None:
        self.isvision = False
      if self.isfusion is None:
        self.isfusion = False
      if self.isradar is None:
        self.isradar = False
      if self.timetoturn is None:
        self.timetoturn = 0.
      if self.timetobrake is None:
        self.timetobrake = 0.
      if self.steerflag is None:
        self.steerflag = False
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      if self.iba_flag is None:
        self.iba_flag = False
      if self.hitdist is None:
        self.hitdist = 0.
      if self.yawdist is None:
        self.yawdist = 0.
      if self.driverovertake is None:
        self.driverovertake = False
      if self.driverovertake_warn is None:
        self.driverovertake_warn = False
      if self.movingleftcount is None:
        self.movingleftcount = 0
      if self.movingrightcount is None:
        self.movingrightcount = 0
    else:
      self.ID = 0
      self.VID = 0
      self.longpos = 0.
      self.latpos = 0.
      self.longspd = 0.
      self.latspd = 0.
      self.longacc = 0.
      self.latacc = 0.
      self.range = 0.
      self.rangerate = 0.
      self.TTC = 0.
      self.XOLC = 0.
      self.movestate = 0
      self.moveout = False
      self.inpath_before = False
      self.inpath_after = False
      self.AEBconf = 0
      self.inpath = False
      self.vfcheck = False
      self.lfcheck = False
      self.age = 0
      self.agecheck = False
      self.inpathage = 0
      self.inpathcheck = False
      self.TOI = False
      self.warn = False
      self.prefill = False
      self.lowbrake = False
      self.highbrake = False
      self.isvision = False
      self.isfusion = False
      self.isradar = False
      self.timetoturn = 0.
      self.timetobrake = 0.
      self.steerflag = False
      self.ref_pos = rospy_message_converter.msg.RefPoint()
      self.iba_flag = False
      self.hitdist = 0.
      self.yawdist = 0.
      self.driverovertake = False
      self.driverovertake_warn = False
      self.movingleftcount = 0
      self.movingrightcount = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I().pack(_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerate, _x.TTC, _x.XOLC, _x.movestate, _x.moveout, _x.inpath_before, _x.inpath_after, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.iba_flag, _x.hitdist, _x.yawdist, _x.driverovertake, _x.driverovertake_warn, _x.movingleftcount, _x.movingrightcount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerate, _x.TTC, _x.XOLC, _x.movestate, _x.moveout, _x.inpath_before, _x.inpath_after, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.iba_flag, _x.hitdist, _x.yawdist, _x.driverovertake, _x.driverovertake_warn, _x.movingleftcount, _x.movingrightcount,) = _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I().unpack(str[start:end])
      self.moveout = bool(self.moveout)
      self.inpath_before = bool(self.inpath_before)
      self.inpath_after = bool(self.inpath_after)
      self.inpath = bool(self.inpath)
      self.vfcheck = bool(self.vfcheck)
      self.lfcheck = bool(self.lfcheck)
      self.agecheck = bool(self.agecheck)
      self.inpathcheck = bool(self.inpathcheck)
      self.TOI = bool(self.TOI)
      self.warn = bool(self.warn)
      self.prefill = bool(self.prefill)
      self.lowbrake = bool(self.lowbrake)
      self.highbrake = bool(self.highbrake)
      self.isvision = bool(self.isvision)
      self.isfusion = bool(self.isfusion)
      self.isradar = bool(self.isradar)
      self.steerflag = bool(self.steerflag)
      self.iba_flag = bool(self.iba_flag)
      self.driverovertake = bool(self.driverovertake)
      self.driverovertake_warn = bool(self.driverovertake_warn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I().pack(_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerate, _x.TTC, _x.XOLC, _x.movestate, _x.moveout, _x.inpath_before, _x.inpath_after, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.iba_flag, _x.hitdist, _x.yawdist, _x.driverovertake, _x.driverovertake_warn, _x.movingleftcount, _x.movingrightcount))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerate, _x.TTC, _x.XOLC, _x.movestate, _x.moveout, _x.inpath_before, _x.inpath_after, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.iba_flag, _x.hitdist, _x.yawdist, _x.driverovertake, _x.driverovertake_warn, _x.movingleftcount, _x.movingrightcount,) = _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I().unpack(str[start:end])
      self.moveout = bool(self.moveout)
      self.inpath_before = bool(self.inpath_before)
      self.inpath_after = bool(self.inpath_after)
      self.inpath = bool(self.inpath)
      self.vfcheck = bool(self.vfcheck)
      self.lfcheck = bool(self.lfcheck)
      self.agecheck = bool(self.agecheck)
      self.inpathcheck = bool(self.inpathcheck)
      self.TOI = bool(self.TOI)
      self.warn = bool(self.warn)
      self.prefill = bool(self.prefill)
      self.lowbrake = bool(self.lowbrake)
      self.highbrake = bool(self.highbrake)
      self.isvision = bool(self.isvision)
      self.isfusion = bool(self.isfusion)
      self.isradar = bool(self.isradar)
      self.steerflag = bool(self.steerflag)
      self.iba_flag = bool(self.iba_flag)
      self.driverovertake = bool(self.driverovertake)
      self.driverovertake_warn = bool(self.driverovertake_warn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I = None
def _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I():
    global _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I
    if _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I is None:
        _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I = struct.Struct("<2I10fI3BI3BIBI9B2fBI4dB2f2B2I")
    return _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I

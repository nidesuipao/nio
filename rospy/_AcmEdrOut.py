# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AcmEdrOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AcmEdrOut(genpy.Message):
  _md5sum = "674432446ea66ad322d9d3faa7e3a715"
  _type = "rospy_message_converter/AcmEdrOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 acsf_b1_sts_edr
uint32 acsf_b2_sts_edr
uint32 acsf_c_sts_edr
uint32 acsf_d_sts_edr
uint32 acsf_e_sts_edr
uint32 lane_assist_sts_edr
uint32 ldw_lka_lane_assi_typ_edr
uint32 adas_le_line_edr
uint32 adas_ri_line_edr
uint32 elk_sts_edr
uint32 esf_warning_sts_edr
uint32 acc_sts_edr
"""
  __slots__ = ['acsf_b1_sts_edr','acsf_b2_sts_edr','acsf_c_sts_edr','acsf_d_sts_edr','acsf_e_sts_edr','lane_assist_sts_edr','ldw_lka_lane_assi_typ_edr','adas_le_line_edr','adas_ri_line_edr','elk_sts_edr','esf_warning_sts_edr','acc_sts_edr']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acsf_b1_sts_edr,acsf_b2_sts_edr,acsf_c_sts_edr,acsf_d_sts_edr,acsf_e_sts_edr,lane_assist_sts_edr,ldw_lka_lane_assi_typ_edr,adas_le_line_edr,adas_ri_line_edr,elk_sts_edr,esf_warning_sts_edr,acc_sts_edr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AcmEdrOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acsf_b1_sts_edr is None:
        self.acsf_b1_sts_edr = 0
      if self.acsf_b2_sts_edr is None:
        self.acsf_b2_sts_edr = 0
      if self.acsf_c_sts_edr is None:
        self.acsf_c_sts_edr = 0
      if self.acsf_d_sts_edr is None:
        self.acsf_d_sts_edr = 0
      if self.acsf_e_sts_edr is None:
        self.acsf_e_sts_edr = 0
      if self.lane_assist_sts_edr is None:
        self.lane_assist_sts_edr = 0
      if self.ldw_lka_lane_assi_typ_edr is None:
        self.ldw_lka_lane_assi_typ_edr = 0
      if self.adas_le_line_edr is None:
        self.adas_le_line_edr = 0
      if self.adas_ri_line_edr is None:
        self.adas_ri_line_edr = 0
      if self.elk_sts_edr is None:
        self.elk_sts_edr = 0
      if self.esf_warning_sts_edr is None:
        self.esf_warning_sts_edr = 0
      if self.acc_sts_edr is None:
        self.acc_sts_edr = 0
    else:
      self.acsf_b1_sts_edr = 0
      self.acsf_b2_sts_edr = 0
      self.acsf_c_sts_edr = 0
      self.acsf_d_sts_edr = 0
      self.acsf_e_sts_edr = 0
      self.lane_assist_sts_edr = 0
      self.ldw_lka_lane_assi_typ_edr = 0
      self.adas_le_line_edr = 0
      self.adas_ri_line_edr = 0
      self.elk_sts_edr = 0
      self.esf_warning_sts_edr = 0
      self.acc_sts_edr = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12I().pack(_x.acsf_b1_sts_edr, _x.acsf_b2_sts_edr, _x.acsf_c_sts_edr, _x.acsf_d_sts_edr, _x.acsf_e_sts_edr, _x.lane_assist_sts_edr, _x.ldw_lka_lane_assi_typ_edr, _x.adas_le_line_edr, _x.adas_ri_line_edr, _x.elk_sts_edr, _x.esf_warning_sts_edr, _x.acc_sts_edr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.acsf_b1_sts_edr, _x.acsf_b2_sts_edr, _x.acsf_c_sts_edr, _x.acsf_d_sts_edr, _x.acsf_e_sts_edr, _x.lane_assist_sts_edr, _x.ldw_lka_lane_assi_typ_edr, _x.adas_le_line_edr, _x.adas_ri_line_edr, _x.elk_sts_edr, _x.esf_warning_sts_edr, _x.acc_sts_edr,) = _get_struct_12I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12I().pack(_x.acsf_b1_sts_edr, _x.acsf_b2_sts_edr, _x.acsf_c_sts_edr, _x.acsf_d_sts_edr, _x.acsf_e_sts_edr, _x.lane_assist_sts_edr, _x.ldw_lka_lane_assi_typ_edr, _x.adas_le_line_edr, _x.adas_ri_line_edr, _x.elk_sts_edr, _x.esf_warning_sts_edr, _x.acc_sts_edr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.acsf_b1_sts_edr, _x.acsf_b2_sts_edr, _x.acsf_c_sts_edr, _x.acsf_d_sts_edr, _x.acsf_e_sts_edr, _x.lane_assist_sts_edr, _x.ldw_lka_lane_assi_typ_edr, _x.adas_le_line_edr, _x.adas_ri_line_edr, _x.elk_sts_edr, _x.esf_warning_sts_edr, _x.acc_sts_edr,) = _get_struct_12I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12I = None
def _get_struct_12I():
    global _struct_12I
    if _struct_12I is None:
        _struct_12I = struct.Struct("<12I")
    return _struct_12I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PlanningData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg
import std_msgs.msg

class PlanningData(genpy.Message):
  _md5sum = "a4a2c1dc86c5ec6c5254412b1fc57c04"
  _type = "rospy_message_converter/PlanningData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PolyCurve[] reference_line
TrajectoryPoint init_point
int32 stitching_size
string replan_reason
StGraphDebug st_graph
SamplingRankingDebug sampling_ranking
InputMessage input_message

================================================================================
MSG: rospy_message_converter/PolyCurve
int32 order
float32[] y_coeff
float32 p_start
float32 p_end

================================================================================
MSG: rospy_message_converter/TrajectoryPoint
PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a

================================================================================
MSG: rospy_message_converter/StGraphDebug
int32 id
StBoundaryDebug[] boundary
SpeedPoint[] speed_limit

================================================================================
MSG: rospy_message_converter/StBoundaryDebug
int32 id
SpeedPoint[] point
int32 type

================================================================================
MSG: rospy_message_converter/SpeedPoint
float64 s
float64 t
float64 v
float64 a
float64 da

================================================================================
MSG: rospy_message_converter/SamplingRankingDebug
SplineSpeedTrajectory[] spline
SplineSpeedTrajectory best_sample

================================================================================
MSG: rospy_message_converter/SplineSpeedTrajectory
PolyCurve[] poly_curve
float32 cost
SpeedPoint init_point
SpeedPoint connect_point
SpeedPoint end_point

================================================================================
MSG: rospy_message_converter/InputMessage
Header relative_loc_header
Header ehy_tse_header
Header ehy_rme_header

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['reference_line','init_point','stitching_size','replan_reason','st_graph','sampling_ranking','input_message']
  _slot_types = ['rospy_message_converter/PolyCurve[]','rospy_message_converter/TrajectoryPoint','int32','string','rospy_message_converter/StGraphDebug','rospy_message_converter/SamplingRankingDebug','rospy_message_converter/InputMessage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reference_line,init_point,stitching_size,replan_reason,st_graph,sampling_ranking,input_message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reference_line is None:
        self.reference_line = []
      if self.init_point is None:
        self.init_point = rospy_message_converter.msg.TrajectoryPoint()
      if self.stitching_size is None:
        self.stitching_size = 0
      if self.replan_reason is None:
        self.replan_reason = ''
      if self.st_graph is None:
        self.st_graph = rospy_message_converter.msg.StGraphDebug()
      if self.sampling_ranking is None:
        self.sampling_ranking = rospy_message_converter.msg.SamplingRankingDebug()
      if self.input_message is None:
        self.input_message = rospy_message_converter.msg.InputMessage()
    else:
      self.reference_line = []
      self.init_point = rospy_message_converter.msg.TrajectoryPoint()
      self.stitching_size = 0
      self.replan_reason = ''
      self.st_graph = rospy_message_converter.msg.StGraphDebug()
      self.sampling_ranking = rospy_message_converter.msg.SamplingRankingDebug()
      self.input_message = rospy_message_converter.msg.InputMessage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.reference_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_line:
        _x = val1.order
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.y_coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y_coeff))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
      _x = self
      buff.write(_get_struct_8d().pack(_x.init_point.path_point.x, _x.init_point.path_point.y, _x.init_point.path_point.z, _x.init_point.path_point.theta, _x.init_point.path_point.kappa, _x.init_point.path_point.s, _x.init_point.path_point.dkappa, _x.init_point.path_point.ddkappa))
      _x = self.init_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d2i().pack(_x.init_point.path_point.x_derivative, _x.init_point.path_point.y_derivative, _x.init_point.v, _x.init_point.a, _x.init_point.relative_time, _x.init_point.da, _x.init_point.steer, _x.init_point.gaussian_info.sigma_x, _x.init_point.gaussian_info.sigma_y, _x.init_point.gaussian_info.correlation, _x.init_point.gaussian_info.area_probability, _x.init_point.gaussian_info.ellipse_a, _x.init_point.gaussian_info.ellipse_b, _x.init_point.gaussian_info.theta_a, _x.init_point.gear, _x.stitching_size))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.st_graph.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.st_graph.boundary)
      buff.write(_struct_I.pack(length))
      for val1 in self.st_graph.boundary:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point:
          _x = val2
          buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
      length = len(self.st_graph.speed_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.st_graph.speed_limit:
        _x = val1
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
      length = len(self.sampling_ranking.spline)
      buff.write(_struct_I.pack(length))
      for val1 in self.sampling_ranking.spline:
        length = len(val1.poly_curve)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poly_curve:
          _x = val2.order
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.y_coeff)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.y_coeff))
          _x = val2
          buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
        _x = val1.cost
        buff.write(_get_struct_f().pack(_x))
        _v1 = val1.init_point
        _x = _v1
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _v2 = val1.connect_point
        _x = _v2
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _v3 = val1.end_point
        _x = _v3
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
      length = len(self.sampling_ranking.best_sample.poly_curve)
      buff.write(_struct_I.pack(length))
      for val1 in self.sampling_ranking.best_sample.poly_curve:
        _x = val1.order
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.y_coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y_coeff))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
      _x = self
      buff.write(_get_struct_f15d3I().pack(_x.sampling_ranking.best_sample.cost, _x.sampling_ranking.best_sample.init_point.s, _x.sampling_ranking.best_sample.init_point.t, _x.sampling_ranking.best_sample.init_point.v, _x.sampling_ranking.best_sample.init_point.a, _x.sampling_ranking.best_sample.init_point.da, _x.sampling_ranking.best_sample.connect_point.s, _x.sampling_ranking.best_sample.connect_point.t, _x.sampling_ranking.best_sample.connect_point.v, _x.sampling_ranking.best_sample.connect_point.a, _x.sampling_ranking.best_sample.connect_point.da, _x.sampling_ranking.best_sample.end_point.s, _x.sampling_ranking.best_sample.end_point.t, _x.sampling_ranking.best_sample.end_point.v, _x.sampling_ranking.best_sample.end_point.a, _x.sampling_ranking.best_sample.end_point.da, _x.input_message.relative_loc_header.seq, _x.input_message.relative_loc_header.stamp.secs, _x.input_message.relative_loc_header.stamp.nsecs))
      _x = self.input_message.relative_loc_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_message.ehy_tse_header.seq, _x.input_message.ehy_tse_header.stamp.secs, _x.input_message.ehy_tse_header.stamp.nsecs))
      _x = self.input_message.ehy_tse_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_message.ehy_rme_header.seq, _x.input_message.ehy_rme_header.stamp.secs, _x.input_message.ehy_rme_header.stamp.nsecs))
      _x = self.input_message.ehy_rme_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.reference_line is None:
        self.reference_line = None
      if self.init_point is None:
        self.init_point = rospy_message_converter.msg.TrajectoryPoint()
      if self.st_graph is None:
        self.st_graph = rospy_message_converter.msg.StGraphDebug()
      if self.sampling_ranking is None:
        self.sampling_ranking = rospy_message_converter.msg.SamplingRankingDebug()
      if self.input_message is None:
        self.input_message = rospy_message_converter.msg.InputMessage()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PolyCurve()
        start = end
        end += 4
        (val1.order,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y_coeff = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
        self.reference_line.append(val1)
      _x = self
      start = end
      end += 64
      (_x.init_point.path_point.x, _x.init_point.path_point.y, _x.init_point.path_point.z, _x.init_point.path_point.theta, _x.init_point.path_point.kappa, _x.init_point.path_point.s, _x.init_point.path_point.dkappa, _x.init_point.path_point.ddkappa,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.init_point.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.init_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.init_point.path_point.x_derivative, _x.init_point.path_point.y_derivative, _x.init_point.v, _x.init_point.a, _x.init_point.relative_time, _x.init_point.da, _x.init_point.steer, _x.init_point.gaussian_info.sigma_x, _x.init_point.gaussian_info.sigma_y, _x.init_point.gaussian_info.correlation, _x.init_point.gaussian_info.area_probability, _x.init_point.gaussian_info.ellipse_a, _x.init_point.gaussian_info.ellipse_b, _x.init_point.gaussian_info.theta_a, _x.init_point.gear, _x.stitching_size,) = _get_struct_14d2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      start = end
      end += 4
      (self.st_graph.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.st_graph.boundary = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StBoundaryDebug()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.SpeedPoint()
          _x = val2
          start = end
          end += 40
          (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
          val1.point.append(val2)
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        self.st_graph.boundary.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.st_graph.speed_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedPoint()
        _x = val1
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        self.st_graph.speed_limit.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sampling_ranking.spline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SplineSpeedTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poly_curve = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PolyCurve()
          start = end
          end += 4
          (val2.order,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.y_coeff = s.unpack(str[start:end])
          _x = val2
          start = end
          end += 8
          (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
          val1.poly_curve.append(val2)
        start = end
        end += 4
        (val1.cost,) = _get_struct_f().unpack(str[start:end])
        _v4 = val1.init_point
        _x = _v4
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        _v5 = val1.connect_point
        _x = _v5
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        _v6 = val1.end_point
        _x = _v6
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        self.sampling_ranking.spline.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sampling_ranking.best_sample.poly_curve = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PolyCurve()
        start = end
        end += 4
        (val1.order,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y_coeff = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
        self.sampling_ranking.best_sample.poly_curve.append(val1)
      _x = self
      start = end
      end += 136
      (_x.sampling_ranking.best_sample.cost, _x.sampling_ranking.best_sample.init_point.s, _x.sampling_ranking.best_sample.init_point.t, _x.sampling_ranking.best_sample.init_point.v, _x.sampling_ranking.best_sample.init_point.a, _x.sampling_ranking.best_sample.init_point.da, _x.sampling_ranking.best_sample.connect_point.s, _x.sampling_ranking.best_sample.connect_point.t, _x.sampling_ranking.best_sample.connect_point.v, _x.sampling_ranking.best_sample.connect_point.a, _x.sampling_ranking.best_sample.connect_point.da, _x.sampling_ranking.best_sample.end_point.s, _x.sampling_ranking.best_sample.end_point.t, _x.sampling_ranking.best_sample.end_point.v, _x.sampling_ranking.best_sample.end_point.a, _x.sampling_ranking.best_sample.end_point.da, _x.input_message.relative_loc_header.seq, _x.input_message.relative_loc_header.stamp.secs, _x.input_message.relative_loc_header.stamp.nsecs,) = _get_struct_f15d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_message.relative_loc_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_message.relative_loc_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.input_message.ehy_tse_header.seq, _x.input_message.ehy_tse_header.stamp.secs, _x.input_message.ehy_tse_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_message.ehy_tse_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_message.ehy_tse_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.input_message.ehy_rme_header.seq, _x.input_message.ehy_rme_header.stamp.secs, _x.input_message.ehy_rme_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_message.ehy_rme_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_message.ehy_rme_header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.reference_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.reference_line:
        _x = val1.order
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.y_coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y_coeff.tostring())
        _x = val1
        buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
      _x = self
      buff.write(_get_struct_8d().pack(_x.init_point.path_point.x, _x.init_point.path_point.y, _x.init_point.path_point.z, _x.init_point.path_point.theta, _x.init_point.path_point.kappa, _x.init_point.path_point.s, _x.init_point.path_point.dkappa, _x.init_point.path_point.ddkappa))
      _x = self.init_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d2i().pack(_x.init_point.path_point.x_derivative, _x.init_point.path_point.y_derivative, _x.init_point.v, _x.init_point.a, _x.init_point.relative_time, _x.init_point.da, _x.init_point.steer, _x.init_point.gaussian_info.sigma_x, _x.init_point.gaussian_info.sigma_y, _x.init_point.gaussian_info.correlation, _x.init_point.gaussian_info.area_probability, _x.init_point.gaussian_info.ellipse_a, _x.init_point.gaussian_info.ellipse_b, _x.init_point.gaussian_info.theta_a, _x.init_point.gear, _x.stitching_size))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.st_graph.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.st_graph.boundary)
      buff.write(_struct_I.pack(length))
      for val1 in self.st_graph.boundary:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.point:
          _x = val2
          buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _x = val1.type
        buff.write(_get_struct_i().pack(_x))
      length = len(self.st_graph.speed_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.st_graph.speed_limit:
        _x = val1
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
      length = len(self.sampling_ranking.spline)
      buff.write(_struct_I.pack(length))
      for val1 in self.sampling_ranking.spline:
        length = len(val1.poly_curve)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poly_curve:
          _x = val2.order
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.y_coeff)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.y_coeff.tostring())
          _x = val2
          buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
        _x = val1.cost
        buff.write(_get_struct_f().pack(_x))
        _v7 = val1.init_point
        _x = _v7
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _v8 = val1.connect_point
        _x = _v8
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
        _v9 = val1.end_point
        _x = _v9
        buff.write(_get_struct_5d().pack(_x.s, _x.t, _x.v, _x.a, _x.da))
      length = len(self.sampling_ranking.best_sample.poly_curve)
      buff.write(_struct_I.pack(length))
      for val1 in self.sampling_ranking.best_sample.poly_curve:
        _x = val1.order
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.y_coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y_coeff.tostring())
        _x = val1
        buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
      _x = self
      buff.write(_get_struct_f15d3I().pack(_x.sampling_ranking.best_sample.cost, _x.sampling_ranking.best_sample.init_point.s, _x.sampling_ranking.best_sample.init_point.t, _x.sampling_ranking.best_sample.init_point.v, _x.sampling_ranking.best_sample.init_point.a, _x.sampling_ranking.best_sample.init_point.da, _x.sampling_ranking.best_sample.connect_point.s, _x.sampling_ranking.best_sample.connect_point.t, _x.sampling_ranking.best_sample.connect_point.v, _x.sampling_ranking.best_sample.connect_point.a, _x.sampling_ranking.best_sample.connect_point.da, _x.sampling_ranking.best_sample.end_point.s, _x.sampling_ranking.best_sample.end_point.t, _x.sampling_ranking.best_sample.end_point.v, _x.sampling_ranking.best_sample.end_point.a, _x.sampling_ranking.best_sample.end_point.da, _x.input_message.relative_loc_header.seq, _x.input_message.relative_loc_header.stamp.secs, _x.input_message.relative_loc_header.stamp.nsecs))
      _x = self.input_message.relative_loc_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_message.ehy_tse_header.seq, _x.input_message.ehy_tse_header.stamp.secs, _x.input_message.ehy_tse_header.stamp.nsecs))
      _x = self.input_message.ehy_tse_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_message.ehy_rme_header.seq, _x.input_message.ehy_rme_header.stamp.secs, _x.input_message.ehy_rme_header.stamp.nsecs))
      _x = self.input_message.ehy_rme_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.reference_line is None:
        self.reference_line = None
      if self.init_point is None:
        self.init_point = rospy_message_converter.msg.TrajectoryPoint()
      if self.st_graph is None:
        self.st_graph = rospy_message_converter.msg.StGraphDebug()
      if self.sampling_ranking is None:
        self.sampling_ranking = rospy_message_converter.msg.SamplingRankingDebug()
      if self.input_message is None:
        self.input_message = rospy_message_converter.msg.InputMessage()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.reference_line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PolyCurve()
        start = end
        end += 4
        (val1.order,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y_coeff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
        self.reference_line.append(val1)
      _x = self
      start = end
      end += 64
      (_x.init_point.path_point.x, _x.init_point.path_point.y, _x.init_point.path_point.z, _x.init_point.path_point.theta, _x.init_point.path_point.kappa, _x.init_point.path_point.s, _x.init_point.path_point.dkappa, _x.init_point.path_point.ddkappa,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.init_point.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.init_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.init_point.path_point.x_derivative, _x.init_point.path_point.y_derivative, _x.init_point.v, _x.init_point.a, _x.init_point.relative_time, _x.init_point.da, _x.init_point.steer, _x.init_point.gaussian_info.sigma_x, _x.init_point.gaussian_info.sigma_y, _x.init_point.gaussian_info.correlation, _x.init_point.gaussian_info.area_probability, _x.init_point.gaussian_info.ellipse_a, _x.init_point.gaussian_info.ellipse_b, _x.init_point.gaussian_info.theta_a, _x.init_point.gear, _x.stitching_size,) = _get_struct_14d2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      start = end
      end += 4
      (self.st_graph.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.st_graph.boundary = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StBoundaryDebug()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.SpeedPoint()
          _x = val2
          start = end
          end += 40
          (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
          val1.point.append(val2)
        start = end
        end += 4
        (val1.type,) = _get_struct_i().unpack(str[start:end])
        self.st_graph.boundary.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.st_graph.speed_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedPoint()
        _x = val1
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        self.st_graph.speed_limit.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sampling_ranking.spline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SplineSpeedTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poly_curve = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PolyCurve()
          start = end
          end += 4
          (val2.order,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.y_coeff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _x = val2
          start = end
          end += 8
          (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
          val1.poly_curve.append(val2)
        start = end
        end += 4
        (val1.cost,) = _get_struct_f().unpack(str[start:end])
        _v10 = val1.init_point
        _x = _v10
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        _v11 = val1.connect_point
        _x = _v11
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        _v12 = val1.end_point
        _x = _v12
        start = end
        end += 40
        (_x.s, _x.t, _x.v, _x.a, _x.da,) = _get_struct_5d().unpack(str[start:end])
        self.sampling_ranking.spline.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sampling_ranking.best_sample.poly_curve = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PolyCurve()
        start = end
        end += 4
        (val1.order,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y_coeff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
        self.sampling_ranking.best_sample.poly_curve.append(val1)
      _x = self
      start = end
      end += 136
      (_x.sampling_ranking.best_sample.cost, _x.sampling_ranking.best_sample.init_point.s, _x.sampling_ranking.best_sample.init_point.t, _x.sampling_ranking.best_sample.init_point.v, _x.sampling_ranking.best_sample.init_point.a, _x.sampling_ranking.best_sample.init_point.da, _x.sampling_ranking.best_sample.connect_point.s, _x.sampling_ranking.best_sample.connect_point.t, _x.sampling_ranking.best_sample.connect_point.v, _x.sampling_ranking.best_sample.connect_point.a, _x.sampling_ranking.best_sample.connect_point.da, _x.sampling_ranking.best_sample.end_point.s, _x.sampling_ranking.best_sample.end_point.t, _x.sampling_ranking.best_sample.end_point.v, _x.sampling_ranking.best_sample.end_point.a, _x.sampling_ranking.best_sample.end_point.da, _x.input_message.relative_loc_header.seq, _x.input_message.relative_loc_header.stamp.secs, _x.input_message.relative_loc_header.stamp.nsecs,) = _get_struct_f15d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_message.relative_loc_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_message.relative_loc_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.input_message.ehy_tse_header.seq, _x.input_message.ehy_tse_header.stamp.secs, _x.input_message.ehy_tse_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_message.ehy_tse_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_message.ehy_tse_header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.input_message.ehy_rme_header.seq, _x.input_message.ehy_rme_header.stamp.secs, _x.input_message.ehy_rme_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_message.ehy_rme_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_message.ehy_rme_header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d2i = None
def _get_struct_14d2i():
    global _struct_14d2i
    if _struct_14d2i is None:
        _struct_14d2i = struct.Struct("<14d2i")
    return _struct_14d2i
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_f15d3I = None
def _get_struct_f15d3I():
    global _struct_f15d3I
    if _struct_f15d3I is None:
        _struct_f15d3I = struct.Struct("<f15d3I")
    return _struct_f15d3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

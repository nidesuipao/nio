# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ReplanDbgOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ReplanDbgOut(genpy.Message):
  _md5sum = "dd204cba2353844595fbbe371c2cc331"
  _type = "rospy_message_converter/ReplanDbgOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParPoint replan_start_pt
ParPoint replan_end_pt
float32 replan_start_pt_theta
float32 replan_end_pt_theta
string replan_reason
bool is_replan_fail
string failed_segment
string failed_point
int32 fail_reason
int32 exceeded_bound
int32 collide_pt

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z
"""
  __slots__ = ['replan_start_pt','replan_end_pt','replan_start_pt_theta','replan_end_pt_theta','replan_reason','is_replan_fail','failed_segment','failed_point','fail_reason','exceeded_bound','collide_pt']
  _slot_types = ['rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','float32','float32','string','bool','string','string','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       replan_start_pt,replan_end_pt,replan_start_pt_theta,replan_end_pt_theta,replan_reason,is_replan_fail,failed_segment,failed_point,fail_reason,exceeded_bound,collide_pt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReplanDbgOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.replan_start_pt is None:
        self.replan_start_pt = rospy_message_converter.msg.ParPoint()
      if self.replan_end_pt is None:
        self.replan_end_pt = rospy_message_converter.msg.ParPoint()
      if self.replan_start_pt_theta is None:
        self.replan_start_pt_theta = 0.
      if self.replan_end_pt_theta is None:
        self.replan_end_pt_theta = 0.
      if self.replan_reason is None:
        self.replan_reason = ''
      if self.is_replan_fail is None:
        self.is_replan_fail = False
      if self.failed_segment is None:
        self.failed_segment = ''
      if self.failed_point is None:
        self.failed_point = ''
      if self.fail_reason is None:
        self.fail_reason = 0
      if self.exceeded_bound is None:
        self.exceeded_bound = 0
      if self.collide_pt is None:
        self.collide_pt = 0
    else:
      self.replan_start_pt = rospy_message_converter.msg.ParPoint()
      self.replan_end_pt = rospy_message_converter.msg.ParPoint()
      self.replan_start_pt_theta = 0.
      self.replan_end_pt_theta = 0.
      self.replan_reason = ''
      self.is_replan_fail = False
      self.failed_segment = ''
      self.failed_point = ''
      self.fail_reason = 0
      self.exceeded_bound = 0
      self.collide_pt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.replan_start_pt.x, _x.replan_start_pt.y, _x.replan_start_pt.z, _x.replan_end_pt.x, _x.replan_end_pt.y, _x.replan_end_pt.z, _x.replan_start_pt_theta, _x.replan_end_pt_theta))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_replan_fail
      buff.write(_get_struct_B().pack(_x))
      _x = self.failed_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.failed_point
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.fail_reason, _x.exceeded_bound, _x.collide_pt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.replan_start_pt is None:
        self.replan_start_pt = rospy_message_converter.msg.ParPoint()
      if self.replan_end_pt is None:
        self.replan_end_pt = rospy_message_converter.msg.ParPoint()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.replan_start_pt.x, _x.replan_start_pt.y, _x.replan_start_pt.z, _x.replan_end_pt.x, _x.replan_end_pt.y, _x.replan_end_pt.z, _x.replan_start_pt_theta, _x.replan_end_pt_theta,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      start = end
      end += 1
      (self.is_replan_fail,) = _get_struct_B().unpack(str[start:end])
      self.is_replan_fail = bool(self.is_replan_fail)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.failed_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.failed_segment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.failed_point = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.failed_point = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.fail_reason, _x.exceeded_bound, _x.collide_pt,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.replan_start_pt.x, _x.replan_start_pt.y, _x.replan_start_pt.z, _x.replan_end_pt.x, _x.replan_end_pt.y, _x.replan_end_pt.z, _x.replan_start_pt_theta, _x.replan_end_pt_theta))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_replan_fail
      buff.write(_get_struct_B().pack(_x))
      _x = self.failed_segment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.failed_point
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.fail_reason, _x.exceeded_bound, _x.collide_pt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.replan_start_pt is None:
        self.replan_start_pt = rospy_message_converter.msg.ParPoint()
      if self.replan_end_pt is None:
        self.replan_end_pt = rospy_message_converter.msg.ParPoint()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.replan_start_pt.x, _x.replan_start_pt.y, _x.replan_start_pt.z, _x.replan_end_pt.x, _x.replan_end_pt.y, _x.replan_end_pt.z, _x.replan_start_pt_theta, _x.replan_end_pt_theta,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      start = end
      end += 1
      (self.is_replan_fail,) = _get_struct_B().unpack(str[start:end])
      self.is_replan_fail = bool(self.is_replan_fail)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.failed_segment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.failed_segment = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.failed_point = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.failed_point = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.fail_reason, _x.exceeded_bound, _x.collide_pt,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B

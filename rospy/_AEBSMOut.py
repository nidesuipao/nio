# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AEBSMOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AEBSMOut(genpy.Message):
  _md5sum = "6b008ab353dd388d37f54cd0b073d43b"
  _type = "rospy_message_converter/AEBSMOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool snsrblk_cdn
bool tmpfail_cdn
bool permfail_cdn
bool psv_cdn
bool aebonff_cdn
bool factive_cdn
bool bactive_cdn
bool stdby_cdn
uint32 st
uint32 sys_st
"""
  __slots__ = ['snsrblk_cdn','tmpfail_cdn','permfail_cdn','psv_cdn','aebonff_cdn','factive_cdn','bactive_cdn','stdby_cdn','st','sys_st']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       snsrblk_cdn,tmpfail_cdn,permfail_cdn,psv_cdn,aebonff_cdn,factive_cdn,bactive_cdn,stdby_cdn,st,sys_st

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AEBSMOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.snsrblk_cdn is None:
        self.snsrblk_cdn = False
      if self.tmpfail_cdn is None:
        self.tmpfail_cdn = False
      if self.permfail_cdn is None:
        self.permfail_cdn = False
      if self.psv_cdn is None:
        self.psv_cdn = False
      if self.aebonff_cdn is None:
        self.aebonff_cdn = False
      if self.factive_cdn is None:
        self.factive_cdn = False
      if self.bactive_cdn is None:
        self.bactive_cdn = False
      if self.stdby_cdn is None:
        self.stdby_cdn = False
      if self.st is None:
        self.st = 0
      if self.sys_st is None:
        self.sys_st = 0
    else:
      self.snsrblk_cdn = False
      self.tmpfail_cdn = False
      self.permfail_cdn = False
      self.psv_cdn = False
      self.aebonff_cdn = False
      self.factive_cdn = False
      self.bactive_cdn = False
      self.stdby_cdn = False
      self.st = 0
      self.sys_st = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B2I().pack(_x.snsrblk_cdn, _x.tmpfail_cdn, _x.permfail_cdn, _x.psv_cdn, _x.aebonff_cdn, _x.factive_cdn, _x.bactive_cdn, _x.stdby_cdn, _x.st, _x.sys_st))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.snsrblk_cdn, _x.tmpfail_cdn, _x.permfail_cdn, _x.psv_cdn, _x.aebonff_cdn, _x.factive_cdn, _x.bactive_cdn, _x.stdby_cdn, _x.st, _x.sys_st,) = _get_struct_8B2I().unpack(str[start:end])
      self.snsrblk_cdn = bool(self.snsrblk_cdn)
      self.tmpfail_cdn = bool(self.tmpfail_cdn)
      self.permfail_cdn = bool(self.permfail_cdn)
      self.psv_cdn = bool(self.psv_cdn)
      self.aebonff_cdn = bool(self.aebonff_cdn)
      self.factive_cdn = bool(self.factive_cdn)
      self.bactive_cdn = bool(self.bactive_cdn)
      self.stdby_cdn = bool(self.stdby_cdn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B2I().pack(_x.snsrblk_cdn, _x.tmpfail_cdn, _x.permfail_cdn, _x.psv_cdn, _x.aebonff_cdn, _x.factive_cdn, _x.bactive_cdn, _x.stdby_cdn, _x.st, _x.sys_st))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.snsrblk_cdn, _x.tmpfail_cdn, _x.permfail_cdn, _x.psv_cdn, _x.aebonff_cdn, _x.factive_cdn, _x.bactive_cdn, _x.stdby_cdn, _x.st, _x.sys_st,) = _get_struct_8B2I().unpack(str[start:end])
      self.snsrblk_cdn = bool(self.snsrblk_cdn)
      self.tmpfail_cdn = bool(self.tmpfail_cdn)
      self.permfail_cdn = bool(self.permfail_cdn)
      self.psv_cdn = bool(self.psv_cdn)
      self.aebonff_cdn = bool(self.aebonff_cdn)
      self.factive_cdn = bool(self.factive_cdn)
      self.bactive_cdn = bool(self.bactive_cdn)
      self.stdby_cdn = bool(self.stdby_cdn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B2I = None
def _get_struct_8B2I():
    global _struct_8B2I
    if _struct_8B2I is None:
        _struct_8B2I = struct.Struct("<8B2I")
    return _struct_8B2I

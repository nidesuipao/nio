# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/MapObjBaseType.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MapObjBaseType(genpy.Message):
  _md5sum = "31c52dd97764e66edb5643c9952ad819"
  _type = "rospy_message_converter/MapObjBaseType"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 MapObjTyp
float32 MapObjP1X
float32 MapObjP1Y
float32 MapObjP2X
float32 MapObjP2Y
float32 MapObjProblty
int32 MapObjHeiWarn
float32 MapObjHeiProblty
int32 MapObjHeiBrake
"""
  __slots__ = ['MapObjTyp','MapObjP1X','MapObjP1Y','MapObjP2X','MapObjP2Y','MapObjProblty','MapObjHeiWarn','MapObjHeiProblty','MapObjHeiBrake']
  _slot_types = ['int32','float32','float32','float32','float32','float32','int32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MapObjTyp,MapObjP1X,MapObjP1Y,MapObjP2X,MapObjP2Y,MapObjProblty,MapObjHeiWarn,MapObjHeiProblty,MapObjHeiBrake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapObjBaseType, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.MapObjTyp is None:
        self.MapObjTyp = 0
      if self.MapObjP1X is None:
        self.MapObjP1X = 0.
      if self.MapObjP1Y is None:
        self.MapObjP1Y = 0.
      if self.MapObjP2X is None:
        self.MapObjP2X = 0.
      if self.MapObjP2Y is None:
        self.MapObjP2Y = 0.
      if self.MapObjProblty is None:
        self.MapObjProblty = 0.
      if self.MapObjHeiWarn is None:
        self.MapObjHeiWarn = 0
      if self.MapObjHeiProblty is None:
        self.MapObjHeiProblty = 0.
      if self.MapObjHeiBrake is None:
        self.MapObjHeiBrake = 0
    else:
      self.MapObjTyp = 0
      self.MapObjP1X = 0.
      self.MapObjP1Y = 0.
      self.MapObjP2X = 0.
      self.MapObjP2Y = 0.
      self.MapObjProblty = 0.
      self.MapObjHeiWarn = 0
      self.MapObjHeiProblty = 0.
      self.MapObjHeiBrake = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i5fifi = None
def _get_struct_i5fifi():
    global _struct_i5fifi
    if _struct_i5fifi is None:
        _struct_i5fifi = struct.Struct("<i5fifi")
    return _struct_i5fifi

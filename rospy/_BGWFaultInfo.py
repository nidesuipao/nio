# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BGWFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BGWFaultInfo(genpy.Message):
  _md5sum = "5be8b12b9bf15de55cd4c106f96d3af8"
  _type = "rospy_message_converter/BGWFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool CHS1_BGW_01_MsgError
bool CHS1_BGW_02_MsgError
bool CHS1_BGW_03_MsgError
bool CHS1_BGW_LI_MsgError
bool CHS1_BGW_TCU_01_MsgError
bool CHS1_BGW_WIPR_MsgError
bool ADAS_BGW_POWER_SWAP_MsgError
bool ADAS_BGW_SCU_D_02_MsgError
bool ADAS_BGW_SCU_P_01_MsgError
bool ADAS_BGW_SCU_P_02_MsgError
bool ADAS_BGW_SNSR_MsgError
bool ADAS_BGW_STEERWHL_CMD_MsgError
bool CHS1_BGW_LossCom
bool ADAS_BGW_LossCom
"""
  __slots__ = ['CHS1_BGW_01_MsgError','CHS1_BGW_02_MsgError','CHS1_BGW_03_MsgError','CHS1_BGW_LI_MsgError','CHS1_BGW_TCU_01_MsgError','CHS1_BGW_WIPR_MsgError','ADAS_BGW_POWER_SWAP_MsgError','ADAS_BGW_SCU_D_02_MsgError','ADAS_BGW_SCU_P_01_MsgError','ADAS_BGW_SCU_P_02_MsgError','ADAS_BGW_SNSR_MsgError','ADAS_BGW_STEERWHL_CMD_MsgError','CHS1_BGW_LossCom','ADAS_BGW_LossCom']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CHS1_BGW_01_MsgError,CHS1_BGW_02_MsgError,CHS1_BGW_03_MsgError,CHS1_BGW_LI_MsgError,CHS1_BGW_TCU_01_MsgError,CHS1_BGW_WIPR_MsgError,ADAS_BGW_POWER_SWAP_MsgError,ADAS_BGW_SCU_D_02_MsgError,ADAS_BGW_SCU_P_01_MsgError,ADAS_BGW_SCU_P_02_MsgError,ADAS_BGW_SNSR_MsgError,ADAS_BGW_STEERWHL_CMD_MsgError,CHS1_BGW_LossCom,ADAS_BGW_LossCom

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BGWFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.CHS1_BGW_01_MsgError is None:
        self.CHS1_BGW_01_MsgError = False
      if self.CHS1_BGW_02_MsgError is None:
        self.CHS1_BGW_02_MsgError = False
      if self.CHS1_BGW_03_MsgError is None:
        self.CHS1_BGW_03_MsgError = False
      if self.CHS1_BGW_LI_MsgError is None:
        self.CHS1_BGW_LI_MsgError = False
      if self.CHS1_BGW_TCU_01_MsgError is None:
        self.CHS1_BGW_TCU_01_MsgError = False
      if self.CHS1_BGW_WIPR_MsgError is None:
        self.CHS1_BGW_WIPR_MsgError = False
      if self.ADAS_BGW_POWER_SWAP_MsgError is None:
        self.ADAS_BGW_POWER_SWAP_MsgError = False
      if self.ADAS_BGW_SCU_D_02_MsgError is None:
        self.ADAS_BGW_SCU_D_02_MsgError = False
      if self.ADAS_BGW_SCU_P_01_MsgError is None:
        self.ADAS_BGW_SCU_P_01_MsgError = False
      if self.ADAS_BGW_SCU_P_02_MsgError is None:
        self.ADAS_BGW_SCU_P_02_MsgError = False
      if self.ADAS_BGW_SNSR_MsgError is None:
        self.ADAS_BGW_SNSR_MsgError = False
      if self.ADAS_BGW_STEERWHL_CMD_MsgError is None:
        self.ADAS_BGW_STEERWHL_CMD_MsgError = False
      if self.CHS1_BGW_LossCom is None:
        self.CHS1_BGW_LossCom = False
      if self.ADAS_BGW_LossCom is None:
        self.ADAS_BGW_LossCom = False
    else:
      self.CHS1_BGW_01_MsgError = False
      self.CHS1_BGW_02_MsgError = False
      self.CHS1_BGW_03_MsgError = False
      self.CHS1_BGW_LI_MsgError = False
      self.CHS1_BGW_TCU_01_MsgError = False
      self.CHS1_BGW_WIPR_MsgError = False
      self.ADAS_BGW_POWER_SWAP_MsgError = False
      self.ADAS_BGW_SCU_D_02_MsgError = False
      self.ADAS_BGW_SCU_P_01_MsgError = False
      self.ADAS_BGW_SCU_P_02_MsgError = False
      self.ADAS_BGW_SNSR_MsgError = False
      self.ADAS_BGW_STEERWHL_CMD_MsgError = False
      self.CHS1_BGW_LossCom = False
      self.ADAS_BGW_LossCom = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14B().pack(_x.CHS1_BGW_01_MsgError, _x.CHS1_BGW_02_MsgError, _x.CHS1_BGW_03_MsgError, _x.CHS1_BGW_LI_MsgError, _x.CHS1_BGW_TCU_01_MsgError, _x.CHS1_BGW_WIPR_MsgError, _x.ADAS_BGW_POWER_SWAP_MsgError, _x.ADAS_BGW_SCU_D_02_MsgError, _x.ADAS_BGW_SCU_P_01_MsgError, _x.ADAS_BGW_SCU_P_02_MsgError, _x.ADAS_BGW_SNSR_MsgError, _x.ADAS_BGW_STEERWHL_CMD_MsgError, _x.CHS1_BGW_LossCom, _x.ADAS_BGW_LossCom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.CHS1_BGW_01_MsgError, _x.CHS1_BGW_02_MsgError, _x.CHS1_BGW_03_MsgError, _x.CHS1_BGW_LI_MsgError, _x.CHS1_BGW_TCU_01_MsgError, _x.CHS1_BGW_WIPR_MsgError, _x.ADAS_BGW_POWER_SWAP_MsgError, _x.ADAS_BGW_SCU_D_02_MsgError, _x.ADAS_BGW_SCU_P_01_MsgError, _x.ADAS_BGW_SCU_P_02_MsgError, _x.ADAS_BGW_SNSR_MsgError, _x.ADAS_BGW_STEERWHL_CMD_MsgError, _x.CHS1_BGW_LossCom, _x.ADAS_BGW_LossCom,) = _get_struct_14B().unpack(str[start:end])
      self.CHS1_BGW_01_MsgError = bool(self.CHS1_BGW_01_MsgError)
      self.CHS1_BGW_02_MsgError = bool(self.CHS1_BGW_02_MsgError)
      self.CHS1_BGW_03_MsgError = bool(self.CHS1_BGW_03_MsgError)
      self.CHS1_BGW_LI_MsgError = bool(self.CHS1_BGW_LI_MsgError)
      self.CHS1_BGW_TCU_01_MsgError = bool(self.CHS1_BGW_TCU_01_MsgError)
      self.CHS1_BGW_WIPR_MsgError = bool(self.CHS1_BGW_WIPR_MsgError)
      self.ADAS_BGW_POWER_SWAP_MsgError = bool(self.ADAS_BGW_POWER_SWAP_MsgError)
      self.ADAS_BGW_SCU_D_02_MsgError = bool(self.ADAS_BGW_SCU_D_02_MsgError)
      self.ADAS_BGW_SCU_P_01_MsgError = bool(self.ADAS_BGW_SCU_P_01_MsgError)
      self.ADAS_BGW_SCU_P_02_MsgError = bool(self.ADAS_BGW_SCU_P_02_MsgError)
      self.ADAS_BGW_SNSR_MsgError = bool(self.ADAS_BGW_SNSR_MsgError)
      self.ADAS_BGW_STEERWHL_CMD_MsgError = bool(self.ADAS_BGW_STEERWHL_CMD_MsgError)
      self.CHS1_BGW_LossCom = bool(self.CHS1_BGW_LossCom)
      self.ADAS_BGW_LossCom = bool(self.ADAS_BGW_LossCom)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14B().pack(_x.CHS1_BGW_01_MsgError, _x.CHS1_BGW_02_MsgError, _x.CHS1_BGW_03_MsgError, _x.CHS1_BGW_LI_MsgError, _x.CHS1_BGW_TCU_01_MsgError, _x.CHS1_BGW_WIPR_MsgError, _x.ADAS_BGW_POWER_SWAP_MsgError, _x.ADAS_BGW_SCU_D_02_MsgError, _x.ADAS_BGW_SCU_P_01_MsgError, _x.ADAS_BGW_SCU_P_02_MsgError, _x.ADAS_BGW_SNSR_MsgError, _x.ADAS_BGW_STEERWHL_CMD_MsgError, _x.CHS1_BGW_LossCom, _x.ADAS_BGW_LossCom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.CHS1_BGW_01_MsgError, _x.CHS1_BGW_02_MsgError, _x.CHS1_BGW_03_MsgError, _x.CHS1_BGW_LI_MsgError, _x.CHS1_BGW_TCU_01_MsgError, _x.CHS1_BGW_WIPR_MsgError, _x.ADAS_BGW_POWER_SWAP_MsgError, _x.ADAS_BGW_SCU_D_02_MsgError, _x.ADAS_BGW_SCU_P_01_MsgError, _x.ADAS_BGW_SCU_P_02_MsgError, _x.ADAS_BGW_SNSR_MsgError, _x.ADAS_BGW_STEERWHL_CMD_MsgError, _x.CHS1_BGW_LossCom, _x.ADAS_BGW_LossCom,) = _get_struct_14B().unpack(str[start:end])
      self.CHS1_BGW_01_MsgError = bool(self.CHS1_BGW_01_MsgError)
      self.CHS1_BGW_02_MsgError = bool(self.CHS1_BGW_02_MsgError)
      self.CHS1_BGW_03_MsgError = bool(self.CHS1_BGW_03_MsgError)
      self.CHS1_BGW_LI_MsgError = bool(self.CHS1_BGW_LI_MsgError)
      self.CHS1_BGW_TCU_01_MsgError = bool(self.CHS1_BGW_TCU_01_MsgError)
      self.CHS1_BGW_WIPR_MsgError = bool(self.CHS1_BGW_WIPR_MsgError)
      self.ADAS_BGW_POWER_SWAP_MsgError = bool(self.ADAS_BGW_POWER_SWAP_MsgError)
      self.ADAS_BGW_SCU_D_02_MsgError = bool(self.ADAS_BGW_SCU_D_02_MsgError)
      self.ADAS_BGW_SCU_P_01_MsgError = bool(self.ADAS_BGW_SCU_P_01_MsgError)
      self.ADAS_BGW_SCU_P_02_MsgError = bool(self.ADAS_BGW_SCU_P_02_MsgError)
      self.ADAS_BGW_SNSR_MsgError = bool(self.ADAS_BGW_SNSR_MsgError)
      self.ADAS_BGW_STEERWHL_CMD_MsgError = bool(self.ADAS_BGW_STEERWHL_CMD_MsgError)
      self.CHS1_BGW_LossCom = bool(self.CHS1_BGW_LossCom)
      self.ADAS_BGW_LossCom = bool(self.ADAS_BGW_LossCom)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14B = None
def _get_struct_14B():
    global _struct_14B
    if _struct_14B is None:
        _struct_14B = struct.Struct("<14B")
    return _struct_14B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FWCalibrationFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FWCalibrationFaultInfo(genpy.Message):
  _md5sum = "b024642dd7350f742c93b8d749fe9fe0"
  _type = "rospy_message_converter/FWCalibrationFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool Lidar_Calibration_File_NotExisted
bool Windshield_Remap_FIle_NotExisted
bool FW_Camera_Calibration_File_NotExisted
bool FN_Camera_Calibration_File_NotExisted
bool FL_Camera_Calibration_File_NotExisted
bool FR_Camera_Calibration_File_NotExisted
bool RL_Camera_Calibration_File_NotExisted
bool RR_Camera_Calibration_File_NotExisted
bool SVC_LEFT_Calibration_File_NotExisted
bool SVC_RIGHT_Calibration_File_NotExisted
bool SVC_FRONT_Calibration_File_NotExisted
bool SVC_REAR_Calibration_File_NotExisted
bool RN_Camera_Calibration_File_NotExisted
bool Lidar_Archive_File_Fail
bool Windshield_Archive_File_Fail
bool FW_Camera_Archive_File_Fail
bool FN_Camera_Archive_File_Fail
bool FL_Camera_Archive_File_Fail
bool FR_Camera_Archive_File_Fail
bool RL_Camera_Archive_File_Fail
bool RR_Camera_Archive_File_Fail
bool SVC_LEFT_Archive_File_Fail
bool SVC_RIGHT_Archive_File_Fail
bool SVC_FRONT_Archive_File_Fail
bool SVC_REAR_Archive_File_Fail
bool RN_Camera_Archive_File_Fail
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['Lidar_Calibration_File_NotExisted','Windshield_Remap_FIle_NotExisted','FW_Camera_Calibration_File_NotExisted','FN_Camera_Calibration_File_NotExisted','FL_Camera_Calibration_File_NotExisted','FR_Camera_Calibration_File_NotExisted','RL_Camera_Calibration_File_NotExisted','RR_Camera_Calibration_File_NotExisted','SVC_LEFT_Calibration_File_NotExisted','SVC_RIGHT_Calibration_File_NotExisted','SVC_FRONT_Calibration_File_NotExisted','SVC_REAR_Calibration_File_NotExisted','RN_Camera_Calibration_File_NotExisted','Lidar_Archive_File_Fail','Windshield_Archive_File_Fail','FW_Camera_Archive_File_Fail','FN_Camera_Archive_File_Fail','FL_Camera_Archive_File_Fail','FR_Camera_Archive_File_Fail','RL_Camera_Archive_File_Fail','RR_Camera_Archive_File_Fail','SVC_LEFT_Archive_File_Fail','SVC_RIGHT_Archive_File_Fail','SVC_FRONT_Archive_File_Fail','SVC_REAR_Archive_File_Fail','RN_Camera_Archive_File_Fail','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Lidar_Calibration_File_NotExisted,Windshield_Remap_FIle_NotExisted,FW_Camera_Calibration_File_NotExisted,FN_Camera_Calibration_File_NotExisted,FL_Camera_Calibration_File_NotExisted,FR_Camera_Calibration_File_NotExisted,RL_Camera_Calibration_File_NotExisted,RR_Camera_Calibration_File_NotExisted,SVC_LEFT_Calibration_File_NotExisted,SVC_RIGHT_Calibration_File_NotExisted,SVC_FRONT_Calibration_File_NotExisted,SVC_REAR_Calibration_File_NotExisted,RN_Camera_Calibration_File_NotExisted,Lidar_Archive_File_Fail,Windshield_Archive_File_Fail,FW_Camera_Archive_File_Fail,FN_Camera_Archive_File_Fail,FL_Camera_Archive_File_Fail,FR_Camera_Archive_File_Fail,RL_Camera_Archive_File_Fail,RR_Camera_Archive_File_Fail,SVC_LEFT_Archive_File_Fail,SVC_RIGHT_Archive_File_Fail,SVC_FRONT_Archive_File_Fail,SVC_REAR_Archive_File_Fail,RN_Camera_Archive_File_Fail,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FWCalibrationFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Lidar_Calibration_File_NotExisted is None:
        self.Lidar_Calibration_File_NotExisted = False
      if self.Windshield_Remap_FIle_NotExisted is None:
        self.Windshield_Remap_FIle_NotExisted = False
      if self.FW_Camera_Calibration_File_NotExisted is None:
        self.FW_Camera_Calibration_File_NotExisted = False
      if self.FN_Camera_Calibration_File_NotExisted is None:
        self.FN_Camera_Calibration_File_NotExisted = False
      if self.FL_Camera_Calibration_File_NotExisted is None:
        self.FL_Camera_Calibration_File_NotExisted = False
      if self.FR_Camera_Calibration_File_NotExisted is None:
        self.FR_Camera_Calibration_File_NotExisted = False
      if self.RL_Camera_Calibration_File_NotExisted is None:
        self.RL_Camera_Calibration_File_NotExisted = False
      if self.RR_Camera_Calibration_File_NotExisted is None:
        self.RR_Camera_Calibration_File_NotExisted = False
      if self.SVC_LEFT_Calibration_File_NotExisted is None:
        self.SVC_LEFT_Calibration_File_NotExisted = False
      if self.SVC_RIGHT_Calibration_File_NotExisted is None:
        self.SVC_RIGHT_Calibration_File_NotExisted = False
      if self.SVC_FRONT_Calibration_File_NotExisted is None:
        self.SVC_FRONT_Calibration_File_NotExisted = False
      if self.SVC_REAR_Calibration_File_NotExisted is None:
        self.SVC_REAR_Calibration_File_NotExisted = False
      if self.RN_Camera_Calibration_File_NotExisted is None:
        self.RN_Camera_Calibration_File_NotExisted = False
      if self.Lidar_Archive_File_Fail is None:
        self.Lidar_Archive_File_Fail = False
      if self.Windshield_Archive_File_Fail is None:
        self.Windshield_Archive_File_Fail = False
      if self.FW_Camera_Archive_File_Fail is None:
        self.FW_Camera_Archive_File_Fail = False
      if self.FN_Camera_Archive_File_Fail is None:
        self.FN_Camera_Archive_File_Fail = False
      if self.FL_Camera_Archive_File_Fail is None:
        self.FL_Camera_Archive_File_Fail = False
      if self.FR_Camera_Archive_File_Fail is None:
        self.FR_Camera_Archive_File_Fail = False
      if self.RL_Camera_Archive_File_Fail is None:
        self.RL_Camera_Archive_File_Fail = False
      if self.RR_Camera_Archive_File_Fail is None:
        self.RR_Camera_Archive_File_Fail = False
      if self.SVC_LEFT_Archive_File_Fail is None:
        self.SVC_LEFT_Archive_File_Fail = False
      if self.SVC_RIGHT_Archive_File_Fail is None:
        self.SVC_RIGHT_Archive_File_Fail = False
      if self.SVC_FRONT_Archive_File_Fail is None:
        self.SVC_FRONT_Archive_File_Fail = False
      if self.SVC_REAR_Archive_File_Fail is None:
        self.SVC_REAR_Archive_File_Fail = False
      if self.RN_Camera_Archive_File_Fail is None:
        self.RN_Camera_Archive_File_Fail = False
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.Lidar_Calibration_File_NotExisted = False
      self.Windshield_Remap_FIle_NotExisted = False
      self.FW_Camera_Calibration_File_NotExisted = False
      self.FN_Camera_Calibration_File_NotExisted = False
      self.FL_Camera_Calibration_File_NotExisted = False
      self.FR_Camera_Calibration_File_NotExisted = False
      self.RL_Camera_Calibration_File_NotExisted = False
      self.RR_Camera_Calibration_File_NotExisted = False
      self.SVC_LEFT_Calibration_File_NotExisted = False
      self.SVC_RIGHT_Calibration_File_NotExisted = False
      self.SVC_FRONT_Calibration_File_NotExisted = False
      self.SVC_REAR_Calibration_File_NotExisted = False
      self.RN_Camera_Calibration_File_NotExisted = False
      self.Lidar_Archive_File_Fail = False
      self.Windshield_Archive_File_Fail = False
      self.FW_Camera_Archive_File_Fail = False
      self.FN_Camera_Archive_File_Fail = False
      self.FL_Camera_Archive_File_Fail = False
      self.FR_Camera_Archive_File_Fail = False
      self.RL_Camera_Archive_File_Fail = False
      self.RR_Camera_Archive_File_Fail = False
      self.SVC_LEFT_Archive_File_Fail = False
      self.SVC_RIGHT_Archive_File_Fail = False
      self.SVC_FRONT_Archive_File_Fail = False
      self.SVC_REAR_Archive_File_Fail = False
      self.RN_Camera_Archive_File_Fail = False
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_26BQ().pack(_x.Lidar_Calibration_File_NotExisted, _x.Windshield_Remap_FIle_NotExisted, _x.FW_Camera_Calibration_File_NotExisted, _x.FN_Camera_Calibration_File_NotExisted, _x.FL_Camera_Calibration_File_NotExisted, _x.FR_Camera_Calibration_File_NotExisted, _x.RL_Camera_Calibration_File_NotExisted, _x.RR_Camera_Calibration_File_NotExisted, _x.SVC_LEFT_Calibration_File_NotExisted, _x.SVC_RIGHT_Calibration_File_NotExisted, _x.SVC_FRONT_Calibration_File_NotExisted, _x.SVC_REAR_Calibration_File_NotExisted, _x.RN_Camera_Calibration_File_NotExisted, _x.Lidar_Archive_File_Fail, _x.Windshield_Archive_File_Fail, _x.FW_Camera_Archive_File_Fail, _x.FN_Camera_Archive_File_Fail, _x.FL_Camera_Archive_File_Fail, _x.FR_Camera_Archive_File_Fail, _x.RL_Camera_Archive_File_Fail, _x.RR_Camera_Archive_File_Fail, _x.SVC_LEFT_Archive_File_Fail, _x.SVC_RIGHT_Archive_File_Fail, _x.SVC_FRONT_Archive_File_Fail, _x.SVC_REAR_Archive_File_Fail, _x.RN_Camera_Archive_File_Fail, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.Lidar_Calibration_File_NotExisted, _x.Windshield_Remap_FIle_NotExisted, _x.FW_Camera_Calibration_File_NotExisted, _x.FN_Camera_Calibration_File_NotExisted, _x.FL_Camera_Calibration_File_NotExisted, _x.FR_Camera_Calibration_File_NotExisted, _x.RL_Camera_Calibration_File_NotExisted, _x.RR_Camera_Calibration_File_NotExisted, _x.SVC_LEFT_Calibration_File_NotExisted, _x.SVC_RIGHT_Calibration_File_NotExisted, _x.SVC_FRONT_Calibration_File_NotExisted, _x.SVC_REAR_Calibration_File_NotExisted, _x.RN_Camera_Calibration_File_NotExisted, _x.Lidar_Archive_File_Fail, _x.Windshield_Archive_File_Fail, _x.FW_Camera_Archive_File_Fail, _x.FN_Camera_Archive_File_Fail, _x.FL_Camera_Archive_File_Fail, _x.FR_Camera_Archive_File_Fail, _x.RL_Camera_Archive_File_Fail, _x.RR_Camera_Archive_File_Fail, _x.SVC_LEFT_Archive_File_Fail, _x.SVC_RIGHT_Archive_File_Fail, _x.SVC_FRONT_Archive_File_Fail, _x.SVC_REAR_Archive_File_Fail, _x.RN_Camera_Archive_File_Fail, _x.publish_ptp_ts,) = _get_struct_26BQ().unpack(str[start:end])
      self.Lidar_Calibration_File_NotExisted = bool(self.Lidar_Calibration_File_NotExisted)
      self.Windshield_Remap_FIle_NotExisted = bool(self.Windshield_Remap_FIle_NotExisted)
      self.FW_Camera_Calibration_File_NotExisted = bool(self.FW_Camera_Calibration_File_NotExisted)
      self.FN_Camera_Calibration_File_NotExisted = bool(self.FN_Camera_Calibration_File_NotExisted)
      self.FL_Camera_Calibration_File_NotExisted = bool(self.FL_Camera_Calibration_File_NotExisted)
      self.FR_Camera_Calibration_File_NotExisted = bool(self.FR_Camera_Calibration_File_NotExisted)
      self.RL_Camera_Calibration_File_NotExisted = bool(self.RL_Camera_Calibration_File_NotExisted)
      self.RR_Camera_Calibration_File_NotExisted = bool(self.RR_Camera_Calibration_File_NotExisted)
      self.SVC_LEFT_Calibration_File_NotExisted = bool(self.SVC_LEFT_Calibration_File_NotExisted)
      self.SVC_RIGHT_Calibration_File_NotExisted = bool(self.SVC_RIGHT_Calibration_File_NotExisted)
      self.SVC_FRONT_Calibration_File_NotExisted = bool(self.SVC_FRONT_Calibration_File_NotExisted)
      self.SVC_REAR_Calibration_File_NotExisted = bool(self.SVC_REAR_Calibration_File_NotExisted)
      self.RN_Camera_Calibration_File_NotExisted = bool(self.RN_Camera_Calibration_File_NotExisted)
      self.Lidar_Archive_File_Fail = bool(self.Lidar_Archive_File_Fail)
      self.Windshield_Archive_File_Fail = bool(self.Windshield_Archive_File_Fail)
      self.FW_Camera_Archive_File_Fail = bool(self.FW_Camera_Archive_File_Fail)
      self.FN_Camera_Archive_File_Fail = bool(self.FN_Camera_Archive_File_Fail)
      self.FL_Camera_Archive_File_Fail = bool(self.FL_Camera_Archive_File_Fail)
      self.FR_Camera_Archive_File_Fail = bool(self.FR_Camera_Archive_File_Fail)
      self.RL_Camera_Archive_File_Fail = bool(self.RL_Camera_Archive_File_Fail)
      self.RR_Camera_Archive_File_Fail = bool(self.RR_Camera_Archive_File_Fail)
      self.SVC_LEFT_Archive_File_Fail = bool(self.SVC_LEFT_Archive_File_Fail)
      self.SVC_RIGHT_Archive_File_Fail = bool(self.SVC_RIGHT_Archive_File_Fail)
      self.SVC_FRONT_Archive_File_Fail = bool(self.SVC_FRONT_Archive_File_Fail)
      self.SVC_REAR_Archive_File_Fail = bool(self.SVC_REAR_Archive_File_Fail)
      self.RN_Camera_Archive_File_Fail = bool(self.RN_Camera_Archive_File_Fail)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_26BQ().pack(_x.Lidar_Calibration_File_NotExisted, _x.Windshield_Remap_FIle_NotExisted, _x.FW_Camera_Calibration_File_NotExisted, _x.FN_Camera_Calibration_File_NotExisted, _x.FL_Camera_Calibration_File_NotExisted, _x.FR_Camera_Calibration_File_NotExisted, _x.RL_Camera_Calibration_File_NotExisted, _x.RR_Camera_Calibration_File_NotExisted, _x.SVC_LEFT_Calibration_File_NotExisted, _x.SVC_RIGHT_Calibration_File_NotExisted, _x.SVC_FRONT_Calibration_File_NotExisted, _x.SVC_REAR_Calibration_File_NotExisted, _x.RN_Camera_Calibration_File_NotExisted, _x.Lidar_Archive_File_Fail, _x.Windshield_Archive_File_Fail, _x.FW_Camera_Archive_File_Fail, _x.FN_Camera_Archive_File_Fail, _x.FL_Camera_Archive_File_Fail, _x.FR_Camera_Archive_File_Fail, _x.RL_Camera_Archive_File_Fail, _x.RR_Camera_Archive_File_Fail, _x.SVC_LEFT_Archive_File_Fail, _x.SVC_RIGHT_Archive_File_Fail, _x.SVC_FRONT_Archive_File_Fail, _x.SVC_REAR_Archive_File_Fail, _x.RN_Camera_Archive_File_Fail, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.Lidar_Calibration_File_NotExisted, _x.Windshield_Remap_FIle_NotExisted, _x.FW_Camera_Calibration_File_NotExisted, _x.FN_Camera_Calibration_File_NotExisted, _x.FL_Camera_Calibration_File_NotExisted, _x.FR_Camera_Calibration_File_NotExisted, _x.RL_Camera_Calibration_File_NotExisted, _x.RR_Camera_Calibration_File_NotExisted, _x.SVC_LEFT_Calibration_File_NotExisted, _x.SVC_RIGHT_Calibration_File_NotExisted, _x.SVC_FRONT_Calibration_File_NotExisted, _x.SVC_REAR_Calibration_File_NotExisted, _x.RN_Camera_Calibration_File_NotExisted, _x.Lidar_Archive_File_Fail, _x.Windshield_Archive_File_Fail, _x.FW_Camera_Archive_File_Fail, _x.FN_Camera_Archive_File_Fail, _x.FL_Camera_Archive_File_Fail, _x.FR_Camera_Archive_File_Fail, _x.RL_Camera_Archive_File_Fail, _x.RR_Camera_Archive_File_Fail, _x.SVC_LEFT_Archive_File_Fail, _x.SVC_RIGHT_Archive_File_Fail, _x.SVC_FRONT_Archive_File_Fail, _x.SVC_REAR_Archive_File_Fail, _x.RN_Camera_Archive_File_Fail, _x.publish_ptp_ts,) = _get_struct_26BQ().unpack(str[start:end])
      self.Lidar_Calibration_File_NotExisted = bool(self.Lidar_Calibration_File_NotExisted)
      self.Windshield_Remap_FIle_NotExisted = bool(self.Windshield_Remap_FIle_NotExisted)
      self.FW_Camera_Calibration_File_NotExisted = bool(self.FW_Camera_Calibration_File_NotExisted)
      self.FN_Camera_Calibration_File_NotExisted = bool(self.FN_Camera_Calibration_File_NotExisted)
      self.FL_Camera_Calibration_File_NotExisted = bool(self.FL_Camera_Calibration_File_NotExisted)
      self.FR_Camera_Calibration_File_NotExisted = bool(self.FR_Camera_Calibration_File_NotExisted)
      self.RL_Camera_Calibration_File_NotExisted = bool(self.RL_Camera_Calibration_File_NotExisted)
      self.RR_Camera_Calibration_File_NotExisted = bool(self.RR_Camera_Calibration_File_NotExisted)
      self.SVC_LEFT_Calibration_File_NotExisted = bool(self.SVC_LEFT_Calibration_File_NotExisted)
      self.SVC_RIGHT_Calibration_File_NotExisted = bool(self.SVC_RIGHT_Calibration_File_NotExisted)
      self.SVC_FRONT_Calibration_File_NotExisted = bool(self.SVC_FRONT_Calibration_File_NotExisted)
      self.SVC_REAR_Calibration_File_NotExisted = bool(self.SVC_REAR_Calibration_File_NotExisted)
      self.RN_Camera_Calibration_File_NotExisted = bool(self.RN_Camera_Calibration_File_NotExisted)
      self.Lidar_Archive_File_Fail = bool(self.Lidar_Archive_File_Fail)
      self.Windshield_Archive_File_Fail = bool(self.Windshield_Archive_File_Fail)
      self.FW_Camera_Archive_File_Fail = bool(self.FW_Camera_Archive_File_Fail)
      self.FN_Camera_Archive_File_Fail = bool(self.FN_Camera_Archive_File_Fail)
      self.FL_Camera_Archive_File_Fail = bool(self.FL_Camera_Archive_File_Fail)
      self.FR_Camera_Archive_File_Fail = bool(self.FR_Camera_Archive_File_Fail)
      self.RL_Camera_Archive_File_Fail = bool(self.RL_Camera_Archive_File_Fail)
      self.RR_Camera_Archive_File_Fail = bool(self.RR_Camera_Archive_File_Fail)
      self.SVC_LEFT_Archive_File_Fail = bool(self.SVC_LEFT_Archive_File_Fail)
      self.SVC_RIGHT_Archive_File_Fail = bool(self.SVC_RIGHT_Archive_File_Fail)
      self.SVC_FRONT_Archive_File_Fail = bool(self.SVC_FRONT_Archive_File_Fail)
      self.SVC_REAR_Archive_File_Fail = bool(self.SVC_REAR_Archive_File_Fail)
      self.RN_Camera_Archive_File_Fail = bool(self.RN_Camera_Archive_File_Fail)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26BQ = None
def _get_struct_26BQ():
    global _struct_26BQ
    if _struct_26BQ is None:
        _struct_26BQ = struct.Struct("<26BQ")
    return _struct_26BQ
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

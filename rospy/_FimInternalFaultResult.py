# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FimInternalFaultResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FimInternalFaultResult(genpy.Message):
  _md5sum = "444b67ba2757d3c713fd4dc46f3edcbf"
  _type = "rospy_message_converter/FimInternalFaultResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool Stop_Vehicle_Standstil
bool Deactivate_Function
bool Lateral_Control_Suppression
bool Longitudinal_Control_Suppression
bool Lane_Change_Suppression
bool Takeover_Warning
bool Attention_Warning
bool Insignificant
"""
  __slots__ = ['Stop_Vehicle_Standstil','Deactivate_Function','Lateral_Control_Suppression','Longitudinal_Control_Suppression','Lane_Change_Suppression','Takeover_Warning','Attention_Warning','Insignificant']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Stop_Vehicle_Standstil,Deactivate_Function,Lateral_Control_Suppression,Longitudinal_Control_Suppression,Lane_Change_Suppression,Takeover_Warning,Attention_Warning,Insignificant

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FimInternalFaultResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Stop_Vehicle_Standstil is None:
        self.Stop_Vehicle_Standstil = False
      if self.Deactivate_Function is None:
        self.Deactivate_Function = False
      if self.Lateral_Control_Suppression is None:
        self.Lateral_Control_Suppression = False
      if self.Longitudinal_Control_Suppression is None:
        self.Longitudinal_Control_Suppression = False
      if self.Lane_Change_Suppression is None:
        self.Lane_Change_Suppression = False
      if self.Takeover_Warning is None:
        self.Takeover_Warning = False
      if self.Attention_Warning is None:
        self.Attention_Warning = False
      if self.Insignificant is None:
        self.Insignificant = False
    else:
      self.Stop_Vehicle_Standstil = False
      self.Deactivate_Function = False
      self.Lateral_Control_Suppression = False
      self.Longitudinal_Control_Suppression = False
      self.Lane_Change_Suppression = False
      self.Takeover_Warning = False
      self.Attention_Warning = False
      self.Insignificant = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.Stop_Vehicle_Standstil, _x.Deactivate_Function, _x.Lateral_Control_Suppression, _x.Longitudinal_Control_Suppression, _x.Lane_Change_Suppression, _x.Takeover_Warning, _x.Attention_Warning, _x.Insignificant))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Stop_Vehicle_Standstil, _x.Deactivate_Function, _x.Lateral_Control_Suppression, _x.Longitudinal_Control_Suppression, _x.Lane_Change_Suppression, _x.Takeover_Warning, _x.Attention_Warning, _x.Insignificant,) = _get_struct_8B().unpack(str[start:end])
      self.Stop_Vehicle_Standstil = bool(self.Stop_Vehicle_Standstil)
      self.Deactivate_Function = bool(self.Deactivate_Function)
      self.Lateral_Control_Suppression = bool(self.Lateral_Control_Suppression)
      self.Longitudinal_Control_Suppression = bool(self.Longitudinal_Control_Suppression)
      self.Lane_Change_Suppression = bool(self.Lane_Change_Suppression)
      self.Takeover_Warning = bool(self.Takeover_Warning)
      self.Attention_Warning = bool(self.Attention_Warning)
      self.Insignificant = bool(self.Insignificant)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.Stop_Vehicle_Standstil, _x.Deactivate_Function, _x.Lateral_Control_Suppression, _x.Longitudinal_Control_Suppression, _x.Lane_Change_Suppression, _x.Takeover_Warning, _x.Attention_Warning, _x.Insignificant))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Stop_Vehicle_Standstil, _x.Deactivate_Function, _x.Lateral_Control_Suppression, _x.Longitudinal_Control_Suppression, _x.Lane_Change_Suppression, _x.Takeover_Warning, _x.Attention_Warning, _x.Insignificant,) = _get_struct_8B().unpack(str[start:end])
      self.Stop_Vehicle_Standstil = bool(self.Stop_Vehicle_Standstil)
      self.Deactivate_Function = bool(self.Deactivate_Function)
      self.Lateral_Control_Suppression = bool(self.Lateral_Control_Suppression)
      self.Longitudinal_Control_Suppression = bool(self.Longitudinal_Control_Suppression)
      self.Lane_Change_Suppression = bool(self.Lane_Change_Suppression)
      self.Takeover_Warning = bool(self.Takeover_Warning)
      self.Attention_Warning = bool(self.Attention_Warning)
      self.Insignificant = bool(self.Insignificant)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B

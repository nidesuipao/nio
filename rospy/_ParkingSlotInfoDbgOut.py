# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParkingSlotInfoDbgOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParkingSlotInfoDbgOut(genpy.Message):
  _md5sum = "a677e3006ea0d2a6498305ead310f10c"
  _type = "rospy_message_converter/ParkingSlotInfoDbgOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParPoint curb_internal_pt1
ParPoint curb_internal_pt2
ParPoint wall_internal_pt1
ParPoint wall_internal_pt2
ParPoint left_corner_pt1
ParPoint left_corner_pt2
ParPoint right_corner_pt1
ParPoint right_corner_pt2
ParPoint dbg_planning_reserved_9
ParPoint dbg_planning_reserved_10
ParPoint dbg_planning_reserved_11
ParPoint dbg_planning_reserved_12

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z
"""
  __slots__ = ['curb_internal_pt1','curb_internal_pt2','wall_internal_pt1','wall_internal_pt2','left_corner_pt1','left_corner_pt2','right_corner_pt1','right_corner_pt2','dbg_planning_reserved_9','dbg_planning_reserved_10','dbg_planning_reserved_11','dbg_planning_reserved_12']
  _slot_types = ['rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint','rospy_message_converter/ParPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       curb_internal_pt1,curb_internal_pt2,wall_internal_pt1,wall_internal_pt2,left_corner_pt1,left_corner_pt2,right_corner_pt1,right_corner_pt2,dbg_planning_reserved_9,dbg_planning_reserved_10,dbg_planning_reserved_11,dbg_planning_reserved_12

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkingSlotInfoDbgOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.curb_internal_pt1 is None:
        self.curb_internal_pt1 = rospy_message_converter.msg.ParPoint()
      if self.curb_internal_pt2 is None:
        self.curb_internal_pt2 = rospy_message_converter.msg.ParPoint()
      if self.wall_internal_pt1 is None:
        self.wall_internal_pt1 = rospy_message_converter.msg.ParPoint()
      if self.wall_internal_pt2 is None:
        self.wall_internal_pt2 = rospy_message_converter.msg.ParPoint()
      if self.left_corner_pt1 is None:
        self.left_corner_pt1 = rospy_message_converter.msg.ParPoint()
      if self.left_corner_pt2 is None:
        self.left_corner_pt2 = rospy_message_converter.msg.ParPoint()
      if self.right_corner_pt1 is None:
        self.right_corner_pt1 = rospy_message_converter.msg.ParPoint()
      if self.right_corner_pt2 is None:
        self.right_corner_pt2 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_9 is None:
        self.dbg_planning_reserved_9 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_10 is None:
        self.dbg_planning_reserved_10 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_11 is None:
        self.dbg_planning_reserved_11 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_12 is None:
        self.dbg_planning_reserved_12 = rospy_message_converter.msg.ParPoint()
    else:
      self.curb_internal_pt1 = rospy_message_converter.msg.ParPoint()
      self.curb_internal_pt2 = rospy_message_converter.msg.ParPoint()
      self.wall_internal_pt1 = rospy_message_converter.msg.ParPoint()
      self.wall_internal_pt2 = rospy_message_converter.msg.ParPoint()
      self.left_corner_pt1 = rospy_message_converter.msg.ParPoint()
      self.left_corner_pt2 = rospy_message_converter.msg.ParPoint()
      self.right_corner_pt1 = rospy_message_converter.msg.ParPoint()
      self.right_corner_pt2 = rospy_message_converter.msg.ParPoint()
      self.dbg_planning_reserved_9 = rospy_message_converter.msg.ParPoint()
      self.dbg_planning_reserved_10 = rospy_message_converter.msg.ParPoint()
      self.dbg_planning_reserved_11 = rospy_message_converter.msg.ParPoint()
      self.dbg_planning_reserved_12 = rospy_message_converter.msg.ParPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_36f().pack(_x.curb_internal_pt1.x, _x.curb_internal_pt1.y, _x.curb_internal_pt1.z, _x.curb_internal_pt2.x, _x.curb_internal_pt2.y, _x.curb_internal_pt2.z, _x.wall_internal_pt1.x, _x.wall_internal_pt1.y, _x.wall_internal_pt1.z, _x.wall_internal_pt2.x, _x.wall_internal_pt2.y, _x.wall_internal_pt2.z, _x.left_corner_pt1.x, _x.left_corner_pt1.y, _x.left_corner_pt1.z, _x.left_corner_pt2.x, _x.left_corner_pt2.y, _x.left_corner_pt2.z, _x.right_corner_pt1.x, _x.right_corner_pt1.y, _x.right_corner_pt1.z, _x.right_corner_pt2.x, _x.right_corner_pt2.y, _x.right_corner_pt2.z, _x.dbg_planning_reserved_9.x, _x.dbg_planning_reserved_9.y, _x.dbg_planning_reserved_9.z, _x.dbg_planning_reserved_10.x, _x.dbg_planning_reserved_10.y, _x.dbg_planning_reserved_10.z, _x.dbg_planning_reserved_11.x, _x.dbg_planning_reserved_11.y, _x.dbg_planning_reserved_11.z, _x.dbg_planning_reserved_12.x, _x.dbg_planning_reserved_12.y, _x.dbg_planning_reserved_12.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.curb_internal_pt1 is None:
        self.curb_internal_pt1 = rospy_message_converter.msg.ParPoint()
      if self.curb_internal_pt2 is None:
        self.curb_internal_pt2 = rospy_message_converter.msg.ParPoint()
      if self.wall_internal_pt1 is None:
        self.wall_internal_pt1 = rospy_message_converter.msg.ParPoint()
      if self.wall_internal_pt2 is None:
        self.wall_internal_pt2 = rospy_message_converter.msg.ParPoint()
      if self.left_corner_pt1 is None:
        self.left_corner_pt1 = rospy_message_converter.msg.ParPoint()
      if self.left_corner_pt2 is None:
        self.left_corner_pt2 = rospy_message_converter.msg.ParPoint()
      if self.right_corner_pt1 is None:
        self.right_corner_pt1 = rospy_message_converter.msg.ParPoint()
      if self.right_corner_pt2 is None:
        self.right_corner_pt2 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_9 is None:
        self.dbg_planning_reserved_9 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_10 is None:
        self.dbg_planning_reserved_10 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_11 is None:
        self.dbg_planning_reserved_11 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_12 is None:
        self.dbg_planning_reserved_12 = rospy_message_converter.msg.ParPoint()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.curb_internal_pt1.x, _x.curb_internal_pt1.y, _x.curb_internal_pt1.z, _x.curb_internal_pt2.x, _x.curb_internal_pt2.y, _x.curb_internal_pt2.z, _x.wall_internal_pt1.x, _x.wall_internal_pt1.y, _x.wall_internal_pt1.z, _x.wall_internal_pt2.x, _x.wall_internal_pt2.y, _x.wall_internal_pt2.z, _x.left_corner_pt1.x, _x.left_corner_pt1.y, _x.left_corner_pt1.z, _x.left_corner_pt2.x, _x.left_corner_pt2.y, _x.left_corner_pt2.z, _x.right_corner_pt1.x, _x.right_corner_pt1.y, _x.right_corner_pt1.z, _x.right_corner_pt2.x, _x.right_corner_pt2.y, _x.right_corner_pt2.z, _x.dbg_planning_reserved_9.x, _x.dbg_planning_reserved_9.y, _x.dbg_planning_reserved_9.z, _x.dbg_planning_reserved_10.x, _x.dbg_planning_reserved_10.y, _x.dbg_planning_reserved_10.z, _x.dbg_planning_reserved_11.x, _x.dbg_planning_reserved_11.y, _x.dbg_planning_reserved_11.z, _x.dbg_planning_reserved_12.x, _x.dbg_planning_reserved_12.y, _x.dbg_planning_reserved_12.z,) = _get_struct_36f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_36f().pack(_x.curb_internal_pt1.x, _x.curb_internal_pt1.y, _x.curb_internal_pt1.z, _x.curb_internal_pt2.x, _x.curb_internal_pt2.y, _x.curb_internal_pt2.z, _x.wall_internal_pt1.x, _x.wall_internal_pt1.y, _x.wall_internal_pt1.z, _x.wall_internal_pt2.x, _x.wall_internal_pt2.y, _x.wall_internal_pt2.z, _x.left_corner_pt1.x, _x.left_corner_pt1.y, _x.left_corner_pt1.z, _x.left_corner_pt2.x, _x.left_corner_pt2.y, _x.left_corner_pt2.z, _x.right_corner_pt1.x, _x.right_corner_pt1.y, _x.right_corner_pt1.z, _x.right_corner_pt2.x, _x.right_corner_pt2.y, _x.right_corner_pt2.z, _x.dbg_planning_reserved_9.x, _x.dbg_planning_reserved_9.y, _x.dbg_planning_reserved_9.z, _x.dbg_planning_reserved_10.x, _x.dbg_planning_reserved_10.y, _x.dbg_planning_reserved_10.z, _x.dbg_planning_reserved_11.x, _x.dbg_planning_reserved_11.y, _x.dbg_planning_reserved_11.z, _x.dbg_planning_reserved_12.x, _x.dbg_planning_reserved_12.y, _x.dbg_planning_reserved_12.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.curb_internal_pt1 is None:
        self.curb_internal_pt1 = rospy_message_converter.msg.ParPoint()
      if self.curb_internal_pt2 is None:
        self.curb_internal_pt2 = rospy_message_converter.msg.ParPoint()
      if self.wall_internal_pt1 is None:
        self.wall_internal_pt1 = rospy_message_converter.msg.ParPoint()
      if self.wall_internal_pt2 is None:
        self.wall_internal_pt2 = rospy_message_converter.msg.ParPoint()
      if self.left_corner_pt1 is None:
        self.left_corner_pt1 = rospy_message_converter.msg.ParPoint()
      if self.left_corner_pt2 is None:
        self.left_corner_pt2 = rospy_message_converter.msg.ParPoint()
      if self.right_corner_pt1 is None:
        self.right_corner_pt1 = rospy_message_converter.msg.ParPoint()
      if self.right_corner_pt2 is None:
        self.right_corner_pt2 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_9 is None:
        self.dbg_planning_reserved_9 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_10 is None:
        self.dbg_planning_reserved_10 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_11 is None:
        self.dbg_planning_reserved_11 = rospy_message_converter.msg.ParPoint()
      if self.dbg_planning_reserved_12 is None:
        self.dbg_planning_reserved_12 = rospy_message_converter.msg.ParPoint()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.curb_internal_pt1.x, _x.curb_internal_pt1.y, _x.curb_internal_pt1.z, _x.curb_internal_pt2.x, _x.curb_internal_pt2.y, _x.curb_internal_pt2.z, _x.wall_internal_pt1.x, _x.wall_internal_pt1.y, _x.wall_internal_pt1.z, _x.wall_internal_pt2.x, _x.wall_internal_pt2.y, _x.wall_internal_pt2.z, _x.left_corner_pt1.x, _x.left_corner_pt1.y, _x.left_corner_pt1.z, _x.left_corner_pt2.x, _x.left_corner_pt2.y, _x.left_corner_pt2.z, _x.right_corner_pt1.x, _x.right_corner_pt1.y, _x.right_corner_pt1.z, _x.right_corner_pt2.x, _x.right_corner_pt2.y, _x.right_corner_pt2.z, _x.dbg_planning_reserved_9.x, _x.dbg_planning_reserved_9.y, _x.dbg_planning_reserved_9.z, _x.dbg_planning_reserved_10.x, _x.dbg_planning_reserved_10.y, _x.dbg_planning_reserved_10.z, _x.dbg_planning_reserved_11.x, _x.dbg_planning_reserved_11.y, _x.dbg_planning_reserved_11.z, _x.dbg_planning_reserved_12.x, _x.dbg_planning_reserved_12.y, _x.dbg_planning_reserved_12.z,) = _get_struct_36f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36f = None
def _get_struct_36f():
    global _struct_36f
    if _struct_36f is None:
        _struct_36f = struct.Struct("<36f")
    return _struct_36f

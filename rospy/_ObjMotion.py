# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ObjMotion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ObjMotion(genpy.Message):
  _md5sum = "cfe685d632c99615b6942e816ce78b40"
  _type = "rospy_message_converter/ObjMotion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ObjPos pos
ObjPosStd pos_std
ObjVel vel
ObjVelStd vel_std
ObjAcc acc
ObjAccStd acc_std
ObjSize size
ObjSizeStd size_std
float32 heading
int32 ref_point
float32 heading_rate

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjPosStd
float32 x_std
float32 y_std
float32 z_std

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjVelStd
float32 vx_std
float32 vy_std
float32 vz_std

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObjAccStd
float32 ax_std
float32 ay_std
float32 az_std

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjSizeStd
float32 length_std
float32 width_std
float32 height_std
"""
  __slots__ = ['pos','pos_std','vel','vel_std','acc','acc_std','size','size_std','heading','ref_point','heading_rate']
  _slot_types = ['rospy_message_converter/ObjPos','rospy_message_converter/ObjPosStd','rospy_message_converter/ObjVel','rospy_message_converter/ObjVelStd','rospy_message_converter/ObjAcc','rospy_message_converter/ObjAccStd','rospy_message_converter/ObjSize','rospy_message_converter/ObjSizeStd','float32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos,pos_std,vel,vel_std,acc,acc_std,size,size_std,heading,ref_point,heading_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjMotion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pos is None:
        self.pos = rospy_message_converter.msg.ObjPos()
      if self.pos_std is None:
        self.pos_std = rospy_message_converter.msg.ObjPosStd()
      if self.vel is None:
        self.vel = rospy_message_converter.msg.ObjVel()
      if self.vel_std is None:
        self.vel_std = rospy_message_converter.msg.ObjVelStd()
      if self.acc is None:
        self.acc = rospy_message_converter.msg.ObjAcc()
      if self.acc_std is None:
        self.acc_std = rospy_message_converter.msg.ObjAccStd()
      if self.size is None:
        self.size = rospy_message_converter.msg.ObjSize()
      if self.size_std is None:
        self.size_std = rospy_message_converter.msg.ObjSizeStd()
      if self.heading is None:
        self.heading = 0.
      if self.ref_point is None:
        self.ref_point = 0
      if self.heading_rate is None:
        self.heading_rate = 0.
    else:
      self.pos = rospy_message_converter.msg.ObjPos()
      self.pos_std = rospy_message_converter.msg.ObjPosStd()
      self.vel = rospy_message_converter.msg.ObjVel()
      self.vel_std = rospy_message_converter.msg.ObjVelStd()
      self.acc = rospy_message_converter.msg.ObjAcc()
      self.acc_std = rospy_message_converter.msg.ObjAccStd()
      self.size = rospy_message_converter.msg.ObjSize()
      self.size_std = rospy_message_converter.msg.ObjSizeStd()
      self.heading = 0.
      self.ref_point = 0
      self.heading_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_25fif().pack(_x.pos.x, _x.pos.y, _x.pos.z, _x.pos_std.x_std, _x.pos_std.y_std, _x.pos_std.z_std, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.vel_std.vx_std, _x.vel_std.vy_std, _x.vel_std.vz_std, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.acc_std.ax_std, _x.acc_std.ay_std, _x.acc_std.az_std, _x.size.length, _x.size.width, _x.size.height, _x.size_std.length_std, _x.size_std.width_std, _x.size_std.height_std, _x.heading, _x.ref_point, _x.heading_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = rospy_message_converter.msg.ObjPos()
      if self.pos_std is None:
        self.pos_std = rospy_message_converter.msg.ObjPosStd()
      if self.vel is None:
        self.vel = rospy_message_converter.msg.ObjVel()
      if self.vel_std is None:
        self.vel_std = rospy_message_converter.msg.ObjVelStd()
      if self.acc is None:
        self.acc = rospy_message_converter.msg.ObjAcc()
      if self.acc_std is None:
        self.acc_std = rospy_message_converter.msg.ObjAccStd()
      if self.size is None:
        self.size = rospy_message_converter.msg.ObjSize()
      if self.size_std is None:
        self.size_std = rospy_message_converter.msg.ObjSizeStd()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.pos.x, _x.pos.y, _x.pos.z, _x.pos_std.x_std, _x.pos_std.y_std, _x.pos_std.z_std, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.vel_std.vx_std, _x.vel_std.vy_std, _x.vel_std.vz_std, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.acc_std.ax_std, _x.acc_std.ay_std, _x.acc_std.az_std, _x.size.length, _x.size.width, _x.size.height, _x.size_std.length_std, _x.size_std.width_std, _x.size_std.height_std, _x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_25fif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_25fif().pack(_x.pos.x, _x.pos.y, _x.pos.z, _x.pos_std.x_std, _x.pos_std.y_std, _x.pos_std.z_std, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.vel_std.vx_std, _x.vel_std.vy_std, _x.vel_std.vz_std, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.acc_std.ax_std, _x.acc_std.ay_std, _x.acc_std.az_std, _x.size.length, _x.size.width, _x.size.height, _x.size_std.length_std, _x.size_std.width_std, _x.size_std.height_std, _x.heading, _x.ref_point, _x.heading_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = rospy_message_converter.msg.ObjPos()
      if self.pos_std is None:
        self.pos_std = rospy_message_converter.msg.ObjPosStd()
      if self.vel is None:
        self.vel = rospy_message_converter.msg.ObjVel()
      if self.vel_std is None:
        self.vel_std = rospy_message_converter.msg.ObjVelStd()
      if self.acc is None:
        self.acc = rospy_message_converter.msg.ObjAcc()
      if self.acc_std is None:
        self.acc_std = rospy_message_converter.msg.ObjAccStd()
      if self.size is None:
        self.size = rospy_message_converter.msg.ObjSize()
      if self.size_std is None:
        self.size_std = rospy_message_converter.msg.ObjSizeStd()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.pos.x, _x.pos.y, _x.pos.z, _x.pos_std.x_std, _x.pos_std.y_std, _x.pos_std.z_std, _x.vel.vx, _x.vel.vy, _x.vel.vz, _x.vel_std.vx_std, _x.vel_std.vy_std, _x.vel_std.vz_std, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.acc_std.ax_std, _x.acc_std.ay_std, _x.acc_std.az_std, _x.size.length, _x.size.width, _x.size.height, _x.size_std.length_std, _x.size_std.width_std, _x.size_std.height_std, _x.heading, _x.ref_point, _x.heading_rate,) = _get_struct_25fif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_25fif = None
def _get_struct_25fif():
    global _struct_25fif
    if _struct_25fif is None:
        _struct_25fif = struct.Struct("<25fif")
    return _struct_25fif

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LaneDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class LaneDetection(genpy.Message):
  _md5sum = "bf9e1f83cf5bfbf6815eb473bf87e81d"
  _type = "rospy_message_converter/LaneDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 LD_Lane_Width
bool LD_Crossing_Flag
LaneLine[] line

================================================================================
MSG: rospy_message_converter/LaneLine
int32 LD_Role
LineProperty LD_First_Line
bool LD_Is_Multi_Clothoid
LineProperty LD_Second_Line
bool LD_Special_Point_Is_Detected
int32 LD_Special_Point_Type
Point LD_Special_Point
Point[] LD_Point
float32 LD_Dash_Average_Gap
float32 LD_Dash_Average_Length
bool LD_Crossing
uint32 LD_Crossing_ID
int32 LD_Measuring_Status
int32 LD_Prediction_Reason
uint32 LD_Track_ID
uint32 LD_Track_Age
int32 LD_Quality
float32 LD_Confidence
float32 LD_Marker_Width

================================================================================
MSG: rospy_message_converter/LineProperty
int32 LD_Type
int32 LD_Color
PolyLine LD_Line
float32 LD_Start
float32 LD_End
int32 LD_End_Reason

================================================================================
MSG: rospy_message_converter/PolyLine
float32 line_C0
float32 line_C1
float32 line_C2
float32 line_C3

================================================================================
MSG: rospy_message_converter/Point
float32 LD_Point_Lat
float32 LD_Point_Long
float32 LD_Point_Alti
"""
  __slots__ = ['LD_Lane_Width','LD_Crossing_Flag','line']
  _slot_types = ['float32','bool','rospy_message_converter/LaneLine[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LD_Lane_Width,LD_Crossing_Flag,line

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LD_Lane_Width is None:
        self.LD_Lane_Width = 0.
      if self.LD_Crossing_Flag is None:
        self.LD_Crossing_Flag = False
      if self.line is None:
        self.line = []
    else:
      self.LD_Lane_Width = 0.
      self.LD_Crossing_Flag = False
      self.line = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fB().pack(_x.LD_Lane_Width, _x.LD_Crossing_Flag))
      length = len(self.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.LD_First_Line
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v2 = _v1.LD_Line
        _x = _v2
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v1
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v3 = val1.LD_Second_Line
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v4 = _v3.LD_Line
        _x = _v4
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v3
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v5 = val1.LD_Special_Point
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.line is None:
        self.line = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.LD_Lane_Width, _x.LD_Crossing_Flag,) = _get_struct_fB().unpack(str[start:end])
      self.LD_Crossing_Flag = bool(self.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v6 = val1.LD_First_Line
        _x = _v6
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v7 = _v6.LD_Line
        _x = _v7
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v6
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v8 = val1.LD_Second_Line
        _x = _v8
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v9 = _v8.LD_Line
        _x = _v9
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v8
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v10 = val1.LD_Special_Point
        _x = _v10
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.line.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fB().pack(_x.LD_Lane_Width, _x.LD_Crossing_Flag))
      length = len(self.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v11 = val1.LD_First_Line
        _x = _v11
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v12 = _v11.LD_Line
        _x = _v12
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v11
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v13 = val1.LD_Second_Line
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v14 = _v13.LD_Line
        _x = _v14
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v13
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v15 = val1.LD_Special_Point
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.line is None:
        self.line = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.LD_Lane_Width, _x.LD_Crossing_Flag,) = _get_struct_fB().unpack(str[start:end])
      self.LD_Crossing_Flag = bool(self.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v16 = val1.LD_First_Line
        _x = _v16
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v17 = _v16.LD_Line
        _x = _v17
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v16
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v18 = val1.LD_Second_Line
        _x = _v18
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v19 = _v18.LD_Line
        _x = _v19
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v18
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v20 = val1.LD_Special_Point
        _x = _v20
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.line.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

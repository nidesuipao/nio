# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_np_path.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class esd_np_path(genpy.Message):
  _md5sum = "c0b1b913b5ebe8b3ee4506fc3a3c7031"
  _type = "rospy_message_converter/esd_np_path"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 esd_np_path_c0
float32 esd_np_path_c1
float32 esd_np_path_c2
float32 esd_np_path_c3
float32 esd_np_path_c4
float32 esd_np_path_c5
float32 esd_np_path_end
bool esd_np_enable
"""
  __slots__ = ['esd_np_path_c0','esd_np_path_c1','esd_np_path_c2','esd_np_path_c3','esd_np_path_c4','esd_np_path_c5','esd_np_path_end','esd_np_enable']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_np_path_c0,esd_np_path_c1,esd_np_path_c2,esd_np_path_c3,esd_np_path_c4,esd_np_path_c5,esd_np_path_end,esd_np_enable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_np_path, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_np_path_c0 is None:
        self.esd_np_path_c0 = 0.
      if self.esd_np_path_c1 is None:
        self.esd_np_path_c1 = 0.
      if self.esd_np_path_c2 is None:
        self.esd_np_path_c2 = 0.
      if self.esd_np_path_c3 is None:
        self.esd_np_path_c3 = 0.
      if self.esd_np_path_c4 is None:
        self.esd_np_path_c4 = 0.
      if self.esd_np_path_c5 is None:
        self.esd_np_path_c5 = 0.
      if self.esd_np_path_end is None:
        self.esd_np_path_end = 0.
      if self.esd_np_enable is None:
        self.esd_np_enable = False
    else:
      self.esd_np_path_c0 = 0.
      self.esd_np_path_c1 = 0.
      self.esd_np_path_c2 = 0.
      self.esd_np_path_c3 = 0.
      self.esd_np_path_c4 = 0.
      self.esd_np_path_c5 = 0.
      self.esd_np_path_end = 0.
      self.esd_np_enable = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fB().pack(_x.esd_np_path_c0, _x.esd_np_path_c1, _x.esd_np_path_c2, _x.esd_np_path_c3, _x.esd_np_path_c4, _x.esd_np_path_c5, _x.esd_np_path_end, _x.esd_np_enable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.esd_np_path_c0, _x.esd_np_path_c1, _x.esd_np_path_c2, _x.esd_np_path_c3, _x.esd_np_path_c4, _x.esd_np_path_c5, _x.esd_np_path_end, _x.esd_np_enable,) = _get_struct_7fB().unpack(str[start:end])
      self.esd_np_enable = bool(self.esd_np_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fB().pack(_x.esd_np_path_c0, _x.esd_np_path_c1, _x.esd_np_path_c2, _x.esd_np_path_c3, _x.esd_np_path_c4, _x.esd_np_path_c5, _x.esd_np_path_end, _x.esd_np_enable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.esd_np_path_c0, _x.esd_np_path_c1, _x.esd_np_path_c2, _x.esd_np_path_c3, _x.esd_np_path_c4, _x.esd_np_path_c5, _x.esd_np_path_end, _x.esd_np_enable,) = _get_struct_7fB().unpack(str[start:end])
      self.esd_np_enable = bool(self.esd_np_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fB = None
def _get_struct_7fB():
    global _struct_7fB
    if _struct_7fB is None:
        _struct_7fB = struct.Struct("<7fB")
    return _struct_7fB

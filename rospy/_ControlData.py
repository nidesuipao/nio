# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ControlData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ControlData(genpy.Message):
  _md5sum = "ef9d12799d6ad2bf8b786b5e4c9124e9"
  _type = "rospy_message_converter/ControlData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LonControllerDebug lon_debug
uint64 publish_ptp_ts
string publisher_id
uint32 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LonControllerDebug
bool valid
float32 acc_cmd
float32 acc_p
float32 acc_i
float32 acc_d
float32 acc_ff
float32 acc_pitch
float32 station_pid_out
float32 index_ref
float32 time_error
float32 station_ref
float32 station_cur
float32 station_err
float32 station_err_flt
float32 velocity_ref
float32 velocity_cur
float32 velocity_err
float32 velocity_err_flt
float32 acceleration_ref
float32 acceleration_cur
float32 acceleration_err
float32 jerk_ref
float32 jerk_cur
float32 jerk_cur_flt
float32 pitch
float32 pitch_fit
float32 last_cmd
"""
  __slots__ = ['lon_debug','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/LonControllerDebug','uint64','string','uint32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lon_debug,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lon_debug is None:
        self.lon_debug = rospy_message_converter.msg.LonControllerDebug()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.lon_debug = rospy_message_converter.msg.LonControllerDebug()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B26fQ().pack(_x.lon_debug.valid, _x.lon_debug.acc_cmd, _x.lon_debug.acc_p, _x.lon_debug.acc_i, _x.lon_debug.acc_d, _x.lon_debug.acc_ff, _x.lon_debug.acc_pitch, _x.lon_debug.station_pid_out, _x.lon_debug.index_ref, _x.lon_debug.time_error, _x.lon_debug.station_ref, _x.lon_debug.station_cur, _x.lon_debug.station_err, _x.lon_debug.station_err_flt, _x.lon_debug.velocity_ref, _x.lon_debug.velocity_cur, _x.lon_debug.velocity_err, _x.lon_debug.velocity_err_flt, _x.lon_debug.acceleration_ref, _x.lon_debug.acceleration_cur, _x.lon_debug.acceleration_err, _x.lon_debug.jerk_ref, _x.lon_debug.jerk_cur, _x.lon_debug.jerk_cur_flt, _x.lon_debug.pitch, _x.lon_debug.pitch_fit, _x.lon_debug.last_cmd, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lon_debug is None:
        self.lon_debug = rospy_message_converter.msg.LonControllerDebug()
      end = 0
      _x = self
      start = end
      end += 113
      (_x.lon_debug.valid, _x.lon_debug.acc_cmd, _x.lon_debug.acc_p, _x.lon_debug.acc_i, _x.lon_debug.acc_d, _x.lon_debug.acc_ff, _x.lon_debug.acc_pitch, _x.lon_debug.station_pid_out, _x.lon_debug.index_ref, _x.lon_debug.time_error, _x.lon_debug.station_ref, _x.lon_debug.station_cur, _x.lon_debug.station_err, _x.lon_debug.station_err_flt, _x.lon_debug.velocity_ref, _x.lon_debug.velocity_cur, _x.lon_debug.velocity_err, _x.lon_debug.velocity_err_flt, _x.lon_debug.acceleration_ref, _x.lon_debug.acceleration_cur, _x.lon_debug.acceleration_err, _x.lon_debug.jerk_ref, _x.lon_debug.jerk_cur, _x.lon_debug.jerk_cur_flt, _x.lon_debug.pitch, _x.lon_debug.pitch_fit, _x.lon_debug.last_cmd, _x.publish_ptp_ts,) = _get_struct_B26fQ().unpack(str[start:end])
      self.lon_debug.valid = bool(self.lon_debug.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.counter, _x.publish_ts,) = _get_struct_IQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B26fQ().pack(_x.lon_debug.valid, _x.lon_debug.acc_cmd, _x.lon_debug.acc_p, _x.lon_debug.acc_i, _x.lon_debug.acc_d, _x.lon_debug.acc_ff, _x.lon_debug.acc_pitch, _x.lon_debug.station_pid_out, _x.lon_debug.index_ref, _x.lon_debug.time_error, _x.lon_debug.station_ref, _x.lon_debug.station_cur, _x.lon_debug.station_err, _x.lon_debug.station_err_flt, _x.lon_debug.velocity_ref, _x.lon_debug.velocity_cur, _x.lon_debug.velocity_err, _x.lon_debug.velocity_err_flt, _x.lon_debug.acceleration_ref, _x.lon_debug.acceleration_cur, _x.lon_debug.acceleration_err, _x.lon_debug.jerk_ref, _x.lon_debug.jerk_cur, _x.lon_debug.jerk_cur_flt, _x.lon_debug.pitch, _x.lon_debug.pitch_fit, _x.lon_debug.last_cmd, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lon_debug is None:
        self.lon_debug = rospy_message_converter.msg.LonControllerDebug()
      end = 0
      _x = self
      start = end
      end += 113
      (_x.lon_debug.valid, _x.lon_debug.acc_cmd, _x.lon_debug.acc_p, _x.lon_debug.acc_i, _x.lon_debug.acc_d, _x.lon_debug.acc_ff, _x.lon_debug.acc_pitch, _x.lon_debug.station_pid_out, _x.lon_debug.index_ref, _x.lon_debug.time_error, _x.lon_debug.station_ref, _x.lon_debug.station_cur, _x.lon_debug.station_err, _x.lon_debug.station_err_flt, _x.lon_debug.velocity_ref, _x.lon_debug.velocity_cur, _x.lon_debug.velocity_err, _x.lon_debug.velocity_err_flt, _x.lon_debug.acceleration_ref, _x.lon_debug.acceleration_cur, _x.lon_debug.acceleration_err, _x.lon_debug.jerk_ref, _x.lon_debug.jerk_cur, _x.lon_debug.jerk_cur_flt, _x.lon_debug.pitch, _x.lon_debug.pitch_fit, _x.lon_debug.last_cmd, _x.publish_ptp_ts,) = _get_struct_B26fQ().unpack(str[start:end])
      self.lon_debug.valid = bool(self.lon_debug.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.counter, _x.publish_ts,) = _get_struct_IQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B26fQ = None
def _get_struct_B26fQ():
    global _struct_B26fQ
    if _struct_B26fQ is None:
        _struct_B26fQ = struct.Struct("<B26fQ")
    return _struct_B26fQ
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ

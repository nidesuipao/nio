# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PEFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PEFaultInfo(genpy.Message):
  _md5sum = "01a9452e072d601cf9986cb41a713a9f"
  _type = "rospy_message_converter/PEFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool GNSS1_GPSMSM7_Error
bool GNSS1_GalileoMSM7_Error
bool GNSS1_QZSSMSM7_Error
bool GNSS1_BeiDouMSM7_Error
bool GNSS1_GPSEphemeris_Error
bool GNSS1_BeiDouEphemeris_Error
bool GNSS1_QZSSEphemeris_Error
bool GNSS1_GalileoEphemeris_Error
bool GNSS2_GPSMSM7_Error
bool GNSS2_GalileoMSM7_Error
bool GNSS2_QZSSMSM7_Error
bool GNSS2_BeiDouMSM7_Error
bool GNSS2_GPSEphemeris_Error
bool GNSS2_BeiDouEphemeris_Error
bool GNSS2_QZSSEphemeris_Error
bool GNSS2_GalileoEphemeris_Error
bool RTK_Data_MsgError
bool Main_Antenna_Abnormal
bool Sub_Antenna_Abnormal
bool WheelSpd_Data_Error
bool IMU_MsgError
bool WheelSpd_IMU_Timestamp_Error
bool GnssCal_IMU_Timestamp_Error
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['GNSS1_GPSMSM7_Error','GNSS1_GalileoMSM7_Error','GNSS1_QZSSMSM7_Error','GNSS1_BeiDouMSM7_Error','GNSS1_GPSEphemeris_Error','GNSS1_BeiDouEphemeris_Error','GNSS1_QZSSEphemeris_Error','GNSS1_GalileoEphemeris_Error','GNSS2_GPSMSM7_Error','GNSS2_GalileoMSM7_Error','GNSS2_QZSSMSM7_Error','GNSS2_BeiDouMSM7_Error','GNSS2_GPSEphemeris_Error','GNSS2_BeiDouEphemeris_Error','GNSS2_QZSSEphemeris_Error','GNSS2_GalileoEphemeris_Error','RTK_Data_MsgError','Main_Antenna_Abnormal','Sub_Antenna_Abnormal','WheelSpd_Data_Error','IMU_MsgError','WheelSpd_IMU_Timestamp_Error','GnssCal_IMU_Timestamp_Error','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GNSS1_GPSMSM7_Error,GNSS1_GalileoMSM7_Error,GNSS1_QZSSMSM7_Error,GNSS1_BeiDouMSM7_Error,GNSS1_GPSEphemeris_Error,GNSS1_BeiDouEphemeris_Error,GNSS1_QZSSEphemeris_Error,GNSS1_GalileoEphemeris_Error,GNSS2_GPSMSM7_Error,GNSS2_GalileoMSM7_Error,GNSS2_QZSSMSM7_Error,GNSS2_BeiDouMSM7_Error,GNSS2_GPSEphemeris_Error,GNSS2_BeiDouEphemeris_Error,GNSS2_QZSSEphemeris_Error,GNSS2_GalileoEphemeris_Error,RTK_Data_MsgError,Main_Antenna_Abnormal,Sub_Antenna_Abnormal,WheelSpd_Data_Error,IMU_MsgError,WheelSpd_IMU_Timestamp_Error,GnssCal_IMU_Timestamp_Error,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PEFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.GNSS1_GPSMSM7_Error is None:
        self.GNSS1_GPSMSM7_Error = False
      if self.GNSS1_GalileoMSM7_Error is None:
        self.GNSS1_GalileoMSM7_Error = False
      if self.GNSS1_QZSSMSM7_Error is None:
        self.GNSS1_QZSSMSM7_Error = False
      if self.GNSS1_BeiDouMSM7_Error is None:
        self.GNSS1_BeiDouMSM7_Error = False
      if self.GNSS1_GPSEphemeris_Error is None:
        self.GNSS1_GPSEphemeris_Error = False
      if self.GNSS1_BeiDouEphemeris_Error is None:
        self.GNSS1_BeiDouEphemeris_Error = False
      if self.GNSS1_QZSSEphemeris_Error is None:
        self.GNSS1_QZSSEphemeris_Error = False
      if self.GNSS1_GalileoEphemeris_Error is None:
        self.GNSS1_GalileoEphemeris_Error = False
      if self.GNSS2_GPSMSM7_Error is None:
        self.GNSS2_GPSMSM7_Error = False
      if self.GNSS2_GalileoMSM7_Error is None:
        self.GNSS2_GalileoMSM7_Error = False
      if self.GNSS2_QZSSMSM7_Error is None:
        self.GNSS2_QZSSMSM7_Error = False
      if self.GNSS2_BeiDouMSM7_Error is None:
        self.GNSS2_BeiDouMSM7_Error = False
      if self.GNSS2_GPSEphemeris_Error is None:
        self.GNSS2_GPSEphemeris_Error = False
      if self.GNSS2_BeiDouEphemeris_Error is None:
        self.GNSS2_BeiDouEphemeris_Error = False
      if self.GNSS2_QZSSEphemeris_Error is None:
        self.GNSS2_QZSSEphemeris_Error = False
      if self.GNSS2_GalileoEphemeris_Error is None:
        self.GNSS2_GalileoEphemeris_Error = False
      if self.RTK_Data_MsgError is None:
        self.RTK_Data_MsgError = False
      if self.Main_Antenna_Abnormal is None:
        self.Main_Antenna_Abnormal = False
      if self.Sub_Antenna_Abnormal is None:
        self.Sub_Antenna_Abnormal = False
      if self.WheelSpd_Data_Error is None:
        self.WheelSpd_Data_Error = False
      if self.IMU_MsgError is None:
        self.IMU_MsgError = False
      if self.WheelSpd_IMU_Timestamp_Error is None:
        self.WheelSpd_IMU_Timestamp_Error = False
      if self.GnssCal_IMU_Timestamp_Error is None:
        self.GnssCal_IMU_Timestamp_Error = False
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.GNSS1_GPSMSM7_Error = False
      self.GNSS1_GalileoMSM7_Error = False
      self.GNSS1_QZSSMSM7_Error = False
      self.GNSS1_BeiDouMSM7_Error = False
      self.GNSS1_GPSEphemeris_Error = False
      self.GNSS1_BeiDouEphemeris_Error = False
      self.GNSS1_QZSSEphemeris_Error = False
      self.GNSS1_GalileoEphemeris_Error = False
      self.GNSS2_GPSMSM7_Error = False
      self.GNSS2_GalileoMSM7_Error = False
      self.GNSS2_QZSSMSM7_Error = False
      self.GNSS2_BeiDouMSM7_Error = False
      self.GNSS2_GPSEphemeris_Error = False
      self.GNSS2_BeiDouEphemeris_Error = False
      self.GNSS2_QZSSEphemeris_Error = False
      self.GNSS2_GalileoEphemeris_Error = False
      self.RTK_Data_MsgError = False
      self.Main_Antenna_Abnormal = False
      self.Sub_Antenna_Abnormal = False
      self.WheelSpd_Data_Error = False
      self.IMU_MsgError = False
      self.WheelSpd_IMU_Timestamp_Error = False
      self.GnssCal_IMU_Timestamp_Error = False
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_23BQ().pack(_x.GNSS1_GPSMSM7_Error, _x.GNSS1_GalileoMSM7_Error, _x.GNSS1_QZSSMSM7_Error, _x.GNSS1_BeiDouMSM7_Error, _x.GNSS1_GPSEphemeris_Error, _x.GNSS1_BeiDouEphemeris_Error, _x.GNSS1_QZSSEphemeris_Error, _x.GNSS1_GalileoEphemeris_Error, _x.GNSS2_GPSMSM7_Error, _x.GNSS2_GalileoMSM7_Error, _x.GNSS2_QZSSMSM7_Error, _x.GNSS2_BeiDouMSM7_Error, _x.GNSS2_GPSEphemeris_Error, _x.GNSS2_BeiDouEphemeris_Error, _x.GNSS2_QZSSEphemeris_Error, _x.GNSS2_GalileoEphemeris_Error, _x.RTK_Data_MsgError, _x.Main_Antenna_Abnormal, _x.Sub_Antenna_Abnormal, _x.WheelSpd_Data_Error, _x.IMU_MsgError, _x.WheelSpd_IMU_Timestamp_Error, _x.GnssCal_IMU_Timestamp_Error, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 31
      (_x.GNSS1_GPSMSM7_Error, _x.GNSS1_GalileoMSM7_Error, _x.GNSS1_QZSSMSM7_Error, _x.GNSS1_BeiDouMSM7_Error, _x.GNSS1_GPSEphemeris_Error, _x.GNSS1_BeiDouEphemeris_Error, _x.GNSS1_QZSSEphemeris_Error, _x.GNSS1_GalileoEphemeris_Error, _x.GNSS2_GPSMSM7_Error, _x.GNSS2_GalileoMSM7_Error, _x.GNSS2_QZSSMSM7_Error, _x.GNSS2_BeiDouMSM7_Error, _x.GNSS2_GPSEphemeris_Error, _x.GNSS2_BeiDouEphemeris_Error, _x.GNSS2_QZSSEphemeris_Error, _x.GNSS2_GalileoEphemeris_Error, _x.RTK_Data_MsgError, _x.Main_Antenna_Abnormal, _x.Sub_Antenna_Abnormal, _x.WheelSpd_Data_Error, _x.IMU_MsgError, _x.WheelSpd_IMU_Timestamp_Error, _x.GnssCal_IMU_Timestamp_Error, _x.publish_ptp_ts,) = _get_struct_23BQ().unpack(str[start:end])
      self.GNSS1_GPSMSM7_Error = bool(self.GNSS1_GPSMSM7_Error)
      self.GNSS1_GalileoMSM7_Error = bool(self.GNSS1_GalileoMSM7_Error)
      self.GNSS1_QZSSMSM7_Error = bool(self.GNSS1_QZSSMSM7_Error)
      self.GNSS1_BeiDouMSM7_Error = bool(self.GNSS1_BeiDouMSM7_Error)
      self.GNSS1_GPSEphemeris_Error = bool(self.GNSS1_GPSEphemeris_Error)
      self.GNSS1_BeiDouEphemeris_Error = bool(self.GNSS1_BeiDouEphemeris_Error)
      self.GNSS1_QZSSEphemeris_Error = bool(self.GNSS1_QZSSEphemeris_Error)
      self.GNSS1_GalileoEphemeris_Error = bool(self.GNSS1_GalileoEphemeris_Error)
      self.GNSS2_GPSMSM7_Error = bool(self.GNSS2_GPSMSM7_Error)
      self.GNSS2_GalileoMSM7_Error = bool(self.GNSS2_GalileoMSM7_Error)
      self.GNSS2_QZSSMSM7_Error = bool(self.GNSS2_QZSSMSM7_Error)
      self.GNSS2_BeiDouMSM7_Error = bool(self.GNSS2_BeiDouMSM7_Error)
      self.GNSS2_GPSEphemeris_Error = bool(self.GNSS2_GPSEphemeris_Error)
      self.GNSS2_BeiDouEphemeris_Error = bool(self.GNSS2_BeiDouEphemeris_Error)
      self.GNSS2_QZSSEphemeris_Error = bool(self.GNSS2_QZSSEphemeris_Error)
      self.GNSS2_GalileoEphemeris_Error = bool(self.GNSS2_GalileoEphemeris_Error)
      self.RTK_Data_MsgError = bool(self.RTK_Data_MsgError)
      self.Main_Antenna_Abnormal = bool(self.Main_Antenna_Abnormal)
      self.Sub_Antenna_Abnormal = bool(self.Sub_Antenna_Abnormal)
      self.WheelSpd_Data_Error = bool(self.WheelSpd_Data_Error)
      self.IMU_MsgError = bool(self.IMU_MsgError)
      self.WheelSpd_IMU_Timestamp_Error = bool(self.WheelSpd_IMU_Timestamp_Error)
      self.GnssCal_IMU_Timestamp_Error = bool(self.GnssCal_IMU_Timestamp_Error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_23BQ().pack(_x.GNSS1_GPSMSM7_Error, _x.GNSS1_GalileoMSM7_Error, _x.GNSS1_QZSSMSM7_Error, _x.GNSS1_BeiDouMSM7_Error, _x.GNSS1_GPSEphemeris_Error, _x.GNSS1_BeiDouEphemeris_Error, _x.GNSS1_QZSSEphemeris_Error, _x.GNSS1_GalileoEphemeris_Error, _x.GNSS2_GPSMSM7_Error, _x.GNSS2_GalileoMSM7_Error, _x.GNSS2_QZSSMSM7_Error, _x.GNSS2_BeiDouMSM7_Error, _x.GNSS2_GPSEphemeris_Error, _x.GNSS2_BeiDouEphemeris_Error, _x.GNSS2_QZSSEphemeris_Error, _x.GNSS2_GalileoEphemeris_Error, _x.RTK_Data_MsgError, _x.Main_Antenna_Abnormal, _x.Sub_Antenna_Abnormal, _x.WheelSpd_Data_Error, _x.IMU_MsgError, _x.WheelSpd_IMU_Timestamp_Error, _x.GnssCal_IMU_Timestamp_Error, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 31
      (_x.GNSS1_GPSMSM7_Error, _x.GNSS1_GalileoMSM7_Error, _x.GNSS1_QZSSMSM7_Error, _x.GNSS1_BeiDouMSM7_Error, _x.GNSS1_GPSEphemeris_Error, _x.GNSS1_BeiDouEphemeris_Error, _x.GNSS1_QZSSEphemeris_Error, _x.GNSS1_GalileoEphemeris_Error, _x.GNSS2_GPSMSM7_Error, _x.GNSS2_GalileoMSM7_Error, _x.GNSS2_QZSSMSM7_Error, _x.GNSS2_BeiDouMSM7_Error, _x.GNSS2_GPSEphemeris_Error, _x.GNSS2_BeiDouEphemeris_Error, _x.GNSS2_QZSSEphemeris_Error, _x.GNSS2_GalileoEphemeris_Error, _x.RTK_Data_MsgError, _x.Main_Antenna_Abnormal, _x.Sub_Antenna_Abnormal, _x.WheelSpd_Data_Error, _x.IMU_MsgError, _x.WheelSpd_IMU_Timestamp_Error, _x.GnssCal_IMU_Timestamp_Error, _x.publish_ptp_ts,) = _get_struct_23BQ().unpack(str[start:end])
      self.GNSS1_GPSMSM7_Error = bool(self.GNSS1_GPSMSM7_Error)
      self.GNSS1_GalileoMSM7_Error = bool(self.GNSS1_GalileoMSM7_Error)
      self.GNSS1_QZSSMSM7_Error = bool(self.GNSS1_QZSSMSM7_Error)
      self.GNSS1_BeiDouMSM7_Error = bool(self.GNSS1_BeiDouMSM7_Error)
      self.GNSS1_GPSEphemeris_Error = bool(self.GNSS1_GPSEphemeris_Error)
      self.GNSS1_BeiDouEphemeris_Error = bool(self.GNSS1_BeiDouEphemeris_Error)
      self.GNSS1_QZSSEphemeris_Error = bool(self.GNSS1_QZSSEphemeris_Error)
      self.GNSS1_GalileoEphemeris_Error = bool(self.GNSS1_GalileoEphemeris_Error)
      self.GNSS2_GPSMSM7_Error = bool(self.GNSS2_GPSMSM7_Error)
      self.GNSS2_GalileoMSM7_Error = bool(self.GNSS2_GalileoMSM7_Error)
      self.GNSS2_QZSSMSM7_Error = bool(self.GNSS2_QZSSMSM7_Error)
      self.GNSS2_BeiDouMSM7_Error = bool(self.GNSS2_BeiDouMSM7_Error)
      self.GNSS2_GPSEphemeris_Error = bool(self.GNSS2_GPSEphemeris_Error)
      self.GNSS2_BeiDouEphemeris_Error = bool(self.GNSS2_BeiDouEphemeris_Error)
      self.GNSS2_QZSSEphemeris_Error = bool(self.GNSS2_QZSSEphemeris_Error)
      self.GNSS2_GalileoEphemeris_Error = bool(self.GNSS2_GalileoEphemeris_Error)
      self.RTK_Data_MsgError = bool(self.RTK_Data_MsgError)
      self.Main_Antenna_Abnormal = bool(self.Main_Antenna_Abnormal)
      self.Sub_Antenna_Abnormal = bool(self.Sub_Antenna_Abnormal)
      self.WheelSpd_Data_Error = bool(self.WheelSpd_Data_Error)
      self.IMU_MsgError = bool(self.IMU_MsgError)
      self.WheelSpd_IMU_Timestamp_Error = bool(self.WheelSpd_IMU_Timestamp_Error)
      self.GnssCal_IMU_Timestamp_Error = bool(self.GnssCal_IMU_Timestamp_Error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_23BQ = None
def _get_struct_23BQ():
    global _struct_23BQ
    if _struct_23BQ is None:
        _struct_23BQ = struct.Struct("<23BQ")
    return _struct_23BQ
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LngLwSpdCtrlIf.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LngLwSpdCtrlIf(genpy.Message):
  _md5sum = "c3adbd690f8d96fe6cc8777f172cb201"
  _type = "rospy_message_converter/LngLwSpdCtrlIf"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 FctSeln
int32 CntrlModReq
int32 LLCSt
int32 TarGearReq
float32 TarSpdKph
float32 StopDst
int32 ShutdownModReq
int32 EPBReq
float32 VehDstToVSlot
float32 SlopeDstOffset
int32 VCU_ObjModTyp
float32 VCU_ObjModLonDst
float32 VCU_ObjModLatDst
"""
  __slots__ = ['FctSeln','CntrlModReq','LLCSt','TarGearReq','TarSpdKph','StopDst','ShutdownModReq','EPBReq','VehDstToVSlot','SlopeDstOffset','VCU_ObjModTyp','VCU_ObjModLonDst','VCU_ObjModLatDst']
  _slot_types = ['int32','int32','int32','int32','float32','float32','int32','int32','float32','float32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FctSeln,CntrlModReq,LLCSt,TarGearReq,TarSpdKph,StopDst,ShutdownModReq,EPBReq,VehDstToVSlot,SlopeDstOffset,VCU_ObjModTyp,VCU_ObjModLonDst,VCU_ObjModLatDst

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LngLwSpdCtrlIf, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FctSeln is None:
        self.FctSeln = 0
      if self.CntrlModReq is None:
        self.CntrlModReq = 0
      if self.LLCSt is None:
        self.LLCSt = 0
      if self.TarGearReq is None:
        self.TarGearReq = 0
      if self.TarSpdKph is None:
        self.TarSpdKph = 0.
      if self.StopDst is None:
        self.StopDst = 0.
      if self.ShutdownModReq is None:
        self.ShutdownModReq = 0
      if self.EPBReq is None:
        self.EPBReq = 0
      if self.VehDstToVSlot is None:
        self.VehDstToVSlot = 0.
      if self.SlopeDstOffset is None:
        self.SlopeDstOffset = 0.
      if self.VCU_ObjModTyp is None:
        self.VCU_ObjModTyp = 0
      if self.VCU_ObjModLonDst is None:
        self.VCU_ObjModLonDst = 0.
      if self.VCU_ObjModLatDst is None:
        self.VCU_ObjModLatDst = 0.
    else:
      self.FctSeln = 0
      self.CntrlModReq = 0
      self.LLCSt = 0
      self.TarGearReq = 0
      self.TarSpdKph = 0.
      self.StopDst = 0.
      self.ShutdownModReq = 0
      self.EPBReq = 0
      self.VehDstToVSlot = 0.
      self.SlopeDstOffset = 0.
      self.VCU_ObjModTyp = 0
      self.VCU_ObjModLonDst = 0.
      self.VCU_ObjModLatDst = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i2f2i2fi2f().pack(_x.FctSeln, _x.CntrlModReq, _x.LLCSt, _x.TarGearReq, _x.TarSpdKph, _x.StopDst, _x.ShutdownModReq, _x.EPBReq, _x.VehDstToVSlot, _x.SlopeDstOffset, _x.VCU_ObjModTyp, _x.VCU_ObjModLonDst, _x.VCU_ObjModLatDst))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.FctSeln, _x.CntrlModReq, _x.LLCSt, _x.TarGearReq, _x.TarSpdKph, _x.StopDst, _x.ShutdownModReq, _x.EPBReq, _x.VehDstToVSlot, _x.SlopeDstOffset, _x.VCU_ObjModTyp, _x.VCU_ObjModLonDst, _x.VCU_ObjModLatDst,) = _get_struct_4i2f2i2fi2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i2f2i2fi2f().pack(_x.FctSeln, _x.CntrlModReq, _x.LLCSt, _x.TarGearReq, _x.TarSpdKph, _x.StopDst, _x.ShutdownModReq, _x.EPBReq, _x.VehDstToVSlot, _x.SlopeDstOffset, _x.VCU_ObjModTyp, _x.VCU_ObjModLonDst, _x.VCU_ObjModLatDst))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.FctSeln, _x.CntrlModReq, _x.LLCSt, _x.TarGearReq, _x.TarSpdKph, _x.StopDst, _x.ShutdownModReq, _x.EPBReq, _x.VehDstToVSlot, _x.SlopeDstOffset, _x.VCU_ObjModTyp, _x.VCU_ObjModLonDst, _x.VCU_ObjModLatDst,) = _get_struct_4i2f2i2fi2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i2f2i2fi2f = None
def _get_struct_4i2f2i2fi2f():
    global _struct_4i2f2i2fi2f
    if _struct_4i2f2i2fi2f is None:
        _struct_4i2f2i2fi2f = struct.Struct("<4i2f2i2fi2f")
    return _struct_4i2f2i2fi2f

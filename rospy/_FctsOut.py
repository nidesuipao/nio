# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FctsOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FctsOut(genpy.Message):
  _md5sum = "9422fe5cea0264e75a2445cdf5feb334"
  _type = "rospy_message_converter/FctsOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """AebOut Aeb
AesOut Aes
RctbOut Rctb
AebRearOut AebRear
BsdOut Bsd
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/AebOut
uint32 aba_req
uint32 abalvl_req
uint32 abp_req
uint32 aeb_req
float32 aeb_tar_decel
uint32 awb_req
uint32 awblvl_req
uint32 eba_req
uint32 aebsts
uint32 fcwsetst
uint32 prewarnreq
uint32 txtinfo
uint32 AEBDecelReq_DummyForDVR

================================================================================
MSG: rospy_message_converter/AesOut
uint32 aes_pncsts
uint32 epsaciramprate
float32 epsacireqsae
float32 epsacisaflim_angdyn
uint32 epsacisaflim_angdynoffs
uint32 epsacisaflim_anglm
uint32 epsacisaflim_angrm
uint32 epsacisaflim_mode
uint32 epsacisaflim_rate
uint32 epsaciovrthr
uint32 epsacitsusup
float32 epsctireqsae
uint32 laneassiststs
uint32 aes_sts
uint32 aes_warningsts

================================================================================
MSG: rospy_message_converter/RctbOut
uint32 vlc_driveoffreq
float32 vlc_maxjerka
float32 vlc_minjerka
uint32 vlc_mode
uint32 vlc_reqrctb
uint32 vlc_shutdownmodreq
float32 vlc_tara
uint32 vlc_deceltostopreq
uint32 rctbbrksts

================================================================================
MSG: rospy_message_converter/AebRearOut
uint32 aebrearsts
uint32 txtinfo

================================================================================
MSG: rospy_message_converter/BsdOut
uint32 bsd_hvireq
"""
  __slots__ = ['Aeb','Aes','Rctb','AebRear','Bsd','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/AebOut','rospy_message_converter/AesOut','rospy_message_converter/RctbOut','rospy_message_converter/AebRearOut','rospy_message_converter/BsdOut','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Aeb,Aes,Rctb,AebRear,Bsd,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FctsOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Aeb is None:
        self.Aeb = rospy_message_converter.msg.AebOut()
      if self.Aes is None:
        self.Aes = rospy_message_converter.msg.AesOut()
      if self.Rctb is None:
        self.Rctb = rospy_message_converter.msg.RctbOut()
      if self.AebRear is None:
        self.AebRear = rospy_message_converter.msg.AebRearOut()
      if self.Bsd is None:
        self.Bsd = rospy_message_converter.msg.BsdOut()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.Aeb = rospy_message_converter.msg.AebOut()
      self.Aes = rospy_message_converter.msg.AesOut()
      self.Rctb = rospy_message_converter.msg.RctbOut()
      self.AebRear = rospy_message_converter.msg.AebRearOut()
      self.Bsd = rospy_message_converter.msg.BsdOut()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4If10I2f7If4I2f3If5IQ().pack(_x.Aeb.aba_req, _x.Aeb.abalvl_req, _x.Aeb.abp_req, _x.Aeb.aeb_req, _x.Aeb.aeb_tar_decel, _x.Aeb.awb_req, _x.Aeb.awblvl_req, _x.Aeb.eba_req, _x.Aeb.aebsts, _x.Aeb.fcwsetst, _x.Aeb.prewarnreq, _x.Aeb.txtinfo, _x.Aeb.AEBDecelReq_DummyForDVR, _x.Aes.aes_pncsts, _x.Aes.epsaciramprate, _x.Aes.epsacireqsae, _x.Aes.epsacisaflim_angdyn, _x.Aes.epsacisaflim_angdynoffs, _x.Aes.epsacisaflim_anglm, _x.Aes.epsacisaflim_angrm, _x.Aes.epsacisaflim_mode, _x.Aes.epsacisaflim_rate, _x.Aes.epsaciovrthr, _x.Aes.epsacitsusup, _x.Aes.epsctireqsae, _x.Aes.laneassiststs, _x.Aes.aes_sts, _x.Aes.aes_warningsts, _x.Rctb.vlc_driveoffreq, _x.Rctb.vlc_maxjerka, _x.Rctb.vlc_minjerka, _x.Rctb.vlc_mode, _x.Rctb.vlc_reqrctb, _x.Rctb.vlc_shutdownmodreq, _x.Rctb.vlc_tara, _x.Rctb.vlc_deceltostopreq, _x.Rctb.rctbbrksts, _x.AebRear.aebrearsts, _x.AebRear.txtinfo, _x.Bsd.bsd_hvireq, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Aeb is None:
        self.Aeb = rospy_message_converter.msg.AebOut()
      if self.Aes is None:
        self.Aes = rospy_message_converter.msg.AesOut()
      if self.Rctb is None:
        self.Rctb = rospy_message_converter.msg.RctbOut()
      if self.AebRear is None:
        self.AebRear = rospy_message_converter.msg.AebRearOut()
      if self.Bsd is None:
        self.Bsd = rospy_message_converter.msg.BsdOut()
      end = 0
      _x = self
      start = end
      end += 168
      (_x.Aeb.aba_req, _x.Aeb.abalvl_req, _x.Aeb.abp_req, _x.Aeb.aeb_req, _x.Aeb.aeb_tar_decel, _x.Aeb.awb_req, _x.Aeb.awblvl_req, _x.Aeb.eba_req, _x.Aeb.aebsts, _x.Aeb.fcwsetst, _x.Aeb.prewarnreq, _x.Aeb.txtinfo, _x.Aeb.AEBDecelReq_DummyForDVR, _x.Aes.aes_pncsts, _x.Aes.epsaciramprate, _x.Aes.epsacireqsae, _x.Aes.epsacisaflim_angdyn, _x.Aes.epsacisaflim_angdynoffs, _x.Aes.epsacisaflim_anglm, _x.Aes.epsacisaflim_angrm, _x.Aes.epsacisaflim_mode, _x.Aes.epsacisaflim_rate, _x.Aes.epsaciovrthr, _x.Aes.epsacitsusup, _x.Aes.epsctireqsae, _x.Aes.laneassiststs, _x.Aes.aes_sts, _x.Aes.aes_warningsts, _x.Rctb.vlc_driveoffreq, _x.Rctb.vlc_maxjerka, _x.Rctb.vlc_minjerka, _x.Rctb.vlc_mode, _x.Rctb.vlc_reqrctb, _x.Rctb.vlc_shutdownmodreq, _x.Rctb.vlc_tara, _x.Rctb.vlc_deceltostopreq, _x.Rctb.rctbbrksts, _x.AebRear.aebrearsts, _x.AebRear.txtinfo, _x.Bsd.bsd_hvireq, _x.publish_ptp_ts,) = _get_struct_4If10I2f7If4I2f3If5IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4If10I2f7If4I2f3If5IQ().pack(_x.Aeb.aba_req, _x.Aeb.abalvl_req, _x.Aeb.abp_req, _x.Aeb.aeb_req, _x.Aeb.aeb_tar_decel, _x.Aeb.awb_req, _x.Aeb.awblvl_req, _x.Aeb.eba_req, _x.Aeb.aebsts, _x.Aeb.fcwsetst, _x.Aeb.prewarnreq, _x.Aeb.txtinfo, _x.Aeb.AEBDecelReq_DummyForDVR, _x.Aes.aes_pncsts, _x.Aes.epsaciramprate, _x.Aes.epsacireqsae, _x.Aes.epsacisaflim_angdyn, _x.Aes.epsacisaflim_angdynoffs, _x.Aes.epsacisaflim_anglm, _x.Aes.epsacisaflim_angrm, _x.Aes.epsacisaflim_mode, _x.Aes.epsacisaflim_rate, _x.Aes.epsaciovrthr, _x.Aes.epsacitsusup, _x.Aes.epsctireqsae, _x.Aes.laneassiststs, _x.Aes.aes_sts, _x.Aes.aes_warningsts, _x.Rctb.vlc_driveoffreq, _x.Rctb.vlc_maxjerka, _x.Rctb.vlc_minjerka, _x.Rctb.vlc_mode, _x.Rctb.vlc_reqrctb, _x.Rctb.vlc_shutdownmodreq, _x.Rctb.vlc_tara, _x.Rctb.vlc_deceltostopreq, _x.Rctb.rctbbrksts, _x.AebRear.aebrearsts, _x.AebRear.txtinfo, _x.Bsd.bsd_hvireq, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Aeb is None:
        self.Aeb = rospy_message_converter.msg.AebOut()
      if self.Aes is None:
        self.Aes = rospy_message_converter.msg.AesOut()
      if self.Rctb is None:
        self.Rctb = rospy_message_converter.msg.RctbOut()
      if self.AebRear is None:
        self.AebRear = rospy_message_converter.msg.AebRearOut()
      if self.Bsd is None:
        self.Bsd = rospy_message_converter.msg.BsdOut()
      end = 0
      _x = self
      start = end
      end += 168
      (_x.Aeb.aba_req, _x.Aeb.abalvl_req, _x.Aeb.abp_req, _x.Aeb.aeb_req, _x.Aeb.aeb_tar_decel, _x.Aeb.awb_req, _x.Aeb.awblvl_req, _x.Aeb.eba_req, _x.Aeb.aebsts, _x.Aeb.fcwsetst, _x.Aeb.prewarnreq, _x.Aeb.txtinfo, _x.Aeb.AEBDecelReq_DummyForDVR, _x.Aes.aes_pncsts, _x.Aes.epsaciramprate, _x.Aes.epsacireqsae, _x.Aes.epsacisaflim_angdyn, _x.Aes.epsacisaflim_angdynoffs, _x.Aes.epsacisaflim_anglm, _x.Aes.epsacisaflim_angrm, _x.Aes.epsacisaflim_mode, _x.Aes.epsacisaflim_rate, _x.Aes.epsaciovrthr, _x.Aes.epsacitsusup, _x.Aes.epsctireqsae, _x.Aes.laneassiststs, _x.Aes.aes_sts, _x.Aes.aes_warningsts, _x.Rctb.vlc_driveoffreq, _x.Rctb.vlc_maxjerka, _x.Rctb.vlc_minjerka, _x.Rctb.vlc_mode, _x.Rctb.vlc_reqrctb, _x.Rctb.vlc_shutdownmodreq, _x.Rctb.vlc_tara, _x.Rctb.vlc_deceltostopreq, _x.Rctb.rctbbrksts, _x.AebRear.aebrearsts, _x.AebRear.txtinfo, _x.Bsd.bsd_hvireq, _x.publish_ptp_ts,) = _get_struct_4If10I2f7If4I2f3If5IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_4If10I2f7If4I2f3If5IQ = None
def _get_struct_4If10I2f7If4I2f3If5IQ():
    global _struct_4If10I2f7If4I2f3If5IQ
    if _struct_4If10I2f7If4I2f3If5IQ is None:
        _struct_4If10I2f7If4I2f3If5IQ = struct.Struct("<4If10I2f7If4I2f3If5IQ")
    return _struct_4If10I2f7If4I2f3If5IQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvCollisionCheckerDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvCollisionCheckerDebug(genpy.Message):
  _md5sum = "62beccb10bdeeea60bec422c88142038"
  _type = "rospy_message_converter/ParEnvCollisionCheckerDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_load_config
float32 wheel_curve
bool is_larger_outlines
ParEnvCollisionData forward_dst
ParEnvCollisionData backward_dst
ParEnvCollisionData direct_forward_dst
ParEnvCollisionData direct_backward_dst
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/ParEnvCollisionData
float32 crash_distance
float32 obj_distance
float32 uss_region_distance
float32 center_x
float32 center_y
float32 center_yaw
ParEnvObjectPoint crash_pt1
ParEnvObjectPoint crash_pt2
uint32 path_index

================================================================================
MSG: rospy_message_converter/ParEnvObjectPoint
float32 x
float32 y
"""
  __slots__ = ['is_load_config','wheel_curve','is_larger_outlines','forward_dst','backward_dst','direct_forward_dst','direct_backward_dst','reserved_0','reserved_1','reserved_2','reserved_3','reserved_4','reserved_5','reserved_6','reserved_7','reserved_8','reserved_9','reserved_10']
  _slot_types = ['bool','float32','bool','rospy_message_converter/ParEnvCollisionData','rospy_message_converter/ParEnvCollisionData','rospy_message_converter/ParEnvCollisionData','rospy_message_converter/ParEnvCollisionData','uint64','uint64','uint64','uint64','float32','float32','float32','float32','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_load_config,wheel_curve,is_larger_outlines,forward_dst,backward_dst,direct_forward_dst,direct_backward_dst,reserved_0,reserved_1,reserved_2,reserved_3,reserved_4,reserved_5,reserved_6,reserved_7,reserved_8,reserved_9,reserved_10

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvCollisionCheckerDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_load_config is None:
        self.is_load_config = False
      if self.wheel_curve is None:
        self.wheel_curve = 0.
      if self.is_larger_outlines is None:
        self.is_larger_outlines = False
      if self.forward_dst is None:
        self.forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.backward_dst is None:
        self.backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.direct_forward_dst is None:
        self.direct_forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.direct_backward_dst is None:
        self.direct_backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.reserved_0 is None:
        self.reserved_0 = 0
      if self.reserved_1 is None:
        self.reserved_1 = 0
      if self.reserved_2 is None:
        self.reserved_2 = 0
      if self.reserved_3 is None:
        self.reserved_3 = 0
      if self.reserved_4 is None:
        self.reserved_4 = 0.
      if self.reserved_5 is None:
        self.reserved_5 = 0.
      if self.reserved_6 is None:
        self.reserved_6 = 0.
      if self.reserved_7 is None:
        self.reserved_7 = 0.
      if self.reserved_8 is None:
        self.reserved_8 = False
      if self.reserved_9 is None:
        self.reserved_9 = False
      if self.reserved_10 is None:
        self.reserved_10 = ''
    else:
      self.is_load_config = False
      self.wheel_curve = 0.
      self.is_larger_outlines = False
      self.forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      self.backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      self.direct_forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      self.direct_backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      self.reserved_0 = 0
      self.reserved_1 = 0
      self.reserved_2 = 0
      self.reserved_3 = 0
      self.reserved_4 = 0.
      self.reserved_5 = 0.
      self.reserved_6 = 0.
      self.reserved_7 = 0.
      self.reserved_8 = False
      self.reserved_9 = False
      self.reserved_10 = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BfB10fI10fI10fI10fI4Q4f2B().pack(_x.is_load_config, _x.wheel_curve, _x.is_larger_outlines, _x.forward_dst.crash_distance, _x.forward_dst.obj_distance, _x.forward_dst.uss_region_distance, _x.forward_dst.center_x, _x.forward_dst.center_y, _x.forward_dst.center_yaw, _x.forward_dst.crash_pt1.x, _x.forward_dst.crash_pt1.y, _x.forward_dst.crash_pt2.x, _x.forward_dst.crash_pt2.y, _x.forward_dst.path_index, _x.backward_dst.crash_distance, _x.backward_dst.obj_distance, _x.backward_dst.uss_region_distance, _x.backward_dst.center_x, _x.backward_dst.center_y, _x.backward_dst.center_yaw, _x.backward_dst.crash_pt1.x, _x.backward_dst.crash_pt1.y, _x.backward_dst.crash_pt2.x, _x.backward_dst.crash_pt2.y, _x.backward_dst.path_index, _x.direct_forward_dst.crash_distance, _x.direct_forward_dst.obj_distance, _x.direct_forward_dst.uss_region_distance, _x.direct_forward_dst.center_x, _x.direct_forward_dst.center_y, _x.direct_forward_dst.center_yaw, _x.direct_forward_dst.crash_pt1.x, _x.direct_forward_dst.crash_pt1.y, _x.direct_forward_dst.crash_pt2.x, _x.direct_forward_dst.crash_pt2.y, _x.direct_forward_dst.path_index, _x.direct_backward_dst.crash_distance, _x.direct_backward_dst.obj_distance, _x.direct_backward_dst.uss_region_distance, _x.direct_backward_dst.center_x, _x.direct_backward_dst.center_y, _x.direct_backward_dst.center_yaw, _x.direct_backward_dst.crash_pt1.x, _x.direct_backward_dst.crash_pt1.y, _x.direct_backward_dst.crash_pt2.x, _x.direct_backward_dst.crash_pt2.y, _x.direct_backward_dst.path_index, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9))
      _x = self.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.forward_dst is None:
        self.forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.backward_dst is None:
        self.backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.direct_forward_dst is None:
        self.direct_forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.direct_backward_dst is None:
        self.direct_backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      end = 0
      _x = self
      start = end
      end += 232
      (_x.is_load_config, _x.wheel_curve, _x.is_larger_outlines, _x.forward_dst.crash_distance, _x.forward_dst.obj_distance, _x.forward_dst.uss_region_distance, _x.forward_dst.center_x, _x.forward_dst.center_y, _x.forward_dst.center_yaw, _x.forward_dst.crash_pt1.x, _x.forward_dst.crash_pt1.y, _x.forward_dst.crash_pt2.x, _x.forward_dst.crash_pt2.y, _x.forward_dst.path_index, _x.backward_dst.crash_distance, _x.backward_dst.obj_distance, _x.backward_dst.uss_region_distance, _x.backward_dst.center_x, _x.backward_dst.center_y, _x.backward_dst.center_yaw, _x.backward_dst.crash_pt1.x, _x.backward_dst.crash_pt1.y, _x.backward_dst.crash_pt2.x, _x.backward_dst.crash_pt2.y, _x.backward_dst.path_index, _x.direct_forward_dst.crash_distance, _x.direct_forward_dst.obj_distance, _x.direct_forward_dst.uss_region_distance, _x.direct_forward_dst.center_x, _x.direct_forward_dst.center_y, _x.direct_forward_dst.center_yaw, _x.direct_forward_dst.crash_pt1.x, _x.direct_forward_dst.crash_pt1.y, _x.direct_forward_dst.crash_pt2.x, _x.direct_forward_dst.crash_pt2.y, _x.direct_forward_dst.path_index, _x.direct_backward_dst.crash_distance, _x.direct_backward_dst.obj_distance, _x.direct_backward_dst.uss_region_distance, _x.direct_backward_dst.center_x, _x.direct_backward_dst.center_y, _x.direct_backward_dst.center_yaw, _x.direct_backward_dst.crash_pt1.x, _x.direct_backward_dst.crash_pt1.y, _x.direct_backward_dst.crash_pt2.x, _x.direct_backward_dst.crash_pt2.y, _x.direct_backward_dst.path_index, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9,) = _get_struct_BfB10fI10fI10fI10fI4Q4f2B().unpack(str[start:end])
      self.is_load_config = bool(self.is_load_config)
      self.is_larger_outlines = bool(self.is_larger_outlines)
      self.reserved_8 = bool(self.reserved_8)
      self.reserved_9 = bool(self.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved_10 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BfB10fI10fI10fI10fI4Q4f2B().pack(_x.is_load_config, _x.wheel_curve, _x.is_larger_outlines, _x.forward_dst.crash_distance, _x.forward_dst.obj_distance, _x.forward_dst.uss_region_distance, _x.forward_dst.center_x, _x.forward_dst.center_y, _x.forward_dst.center_yaw, _x.forward_dst.crash_pt1.x, _x.forward_dst.crash_pt1.y, _x.forward_dst.crash_pt2.x, _x.forward_dst.crash_pt2.y, _x.forward_dst.path_index, _x.backward_dst.crash_distance, _x.backward_dst.obj_distance, _x.backward_dst.uss_region_distance, _x.backward_dst.center_x, _x.backward_dst.center_y, _x.backward_dst.center_yaw, _x.backward_dst.crash_pt1.x, _x.backward_dst.crash_pt1.y, _x.backward_dst.crash_pt2.x, _x.backward_dst.crash_pt2.y, _x.backward_dst.path_index, _x.direct_forward_dst.crash_distance, _x.direct_forward_dst.obj_distance, _x.direct_forward_dst.uss_region_distance, _x.direct_forward_dst.center_x, _x.direct_forward_dst.center_y, _x.direct_forward_dst.center_yaw, _x.direct_forward_dst.crash_pt1.x, _x.direct_forward_dst.crash_pt1.y, _x.direct_forward_dst.crash_pt2.x, _x.direct_forward_dst.crash_pt2.y, _x.direct_forward_dst.path_index, _x.direct_backward_dst.crash_distance, _x.direct_backward_dst.obj_distance, _x.direct_backward_dst.uss_region_distance, _x.direct_backward_dst.center_x, _x.direct_backward_dst.center_y, _x.direct_backward_dst.center_yaw, _x.direct_backward_dst.crash_pt1.x, _x.direct_backward_dst.crash_pt1.y, _x.direct_backward_dst.crash_pt2.x, _x.direct_backward_dst.crash_pt2.y, _x.direct_backward_dst.path_index, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9))
      _x = self.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.forward_dst is None:
        self.forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.backward_dst is None:
        self.backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.direct_forward_dst is None:
        self.direct_forward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      if self.direct_backward_dst is None:
        self.direct_backward_dst = rospy_message_converter.msg.ParEnvCollisionData()
      end = 0
      _x = self
      start = end
      end += 232
      (_x.is_load_config, _x.wheel_curve, _x.is_larger_outlines, _x.forward_dst.crash_distance, _x.forward_dst.obj_distance, _x.forward_dst.uss_region_distance, _x.forward_dst.center_x, _x.forward_dst.center_y, _x.forward_dst.center_yaw, _x.forward_dst.crash_pt1.x, _x.forward_dst.crash_pt1.y, _x.forward_dst.crash_pt2.x, _x.forward_dst.crash_pt2.y, _x.forward_dst.path_index, _x.backward_dst.crash_distance, _x.backward_dst.obj_distance, _x.backward_dst.uss_region_distance, _x.backward_dst.center_x, _x.backward_dst.center_y, _x.backward_dst.center_yaw, _x.backward_dst.crash_pt1.x, _x.backward_dst.crash_pt1.y, _x.backward_dst.crash_pt2.x, _x.backward_dst.crash_pt2.y, _x.backward_dst.path_index, _x.direct_forward_dst.crash_distance, _x.direct_forward_dst.obj_distance, _x.direct_forward_dst.uss_region_distance, _x.direct_forward_dst.center_x, _x.direct_forward_dst.center_y, _x.direct_forward_dst.center_yaw, _x.direct_forward_dst.crash_pt1.x, _x.direct_forward_dst.crash_pt1.y, _x.direct_forward_dst.crash_pt2.x, _x.direct_forward_dst.crash_pt2.y, _x.direct_forward_dst.path_index, _x.direct_backward_dst.crash_distance, _x.direct_backward_dst.obj_distance, _x.direct_backward_dst.uss_region_distance, _x.direct_backward_dst.center_x, _x.direct_backward_dst.center_y, _x.direct_backward_dst.center_yaw, _x.direct_backward_dst.crash_pt1.x, _x.direct_backward_dst.crash_pt1.y, _x.direct_backward_dst.crash_pt2.x, _x.direct_backward_dst.crash_pt2.y, _x.direct_backward_dst.path_index, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9,) = _get_struct_BfB10fI10fI10fI10fI4Q4f2B().unpack(str[start:end])
      self.is_load_config = bool(self.is_load_config)
      self.is_larger_outlines = bool(self.is_larger_outlines)
      self.reserved_8 = bool(self.reserved_8)
      self.reserved_9 = bool(self.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved_10 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BfB10fI10fI10fI10fI4Q4f2B = None
def _get_struct_BfB10fI10fI10fI10fI4Q4f2B():
    global _struct_BfB10fI10fI10fI10fI4Q4f2B
    if _struct_BfB10fI10fI10fI10fI4Q4f2B is None:
        _struct_BfB10fI10fI10fI10fI4Q4f2B = struct.Struct("<BfB10fI10fI10fI10fI4Q4f2B")
    return _struct_BfB10fI10fI10fI10fI4Q4f2B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FySideFeatureDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FySideFeatureDebug(genpy.Message):
  _md5sum = "5c372a54adf37388eb64aff3265491ec"
  _type = "rospy_message_converter/FySideFeatureDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FySideFeatureOut request
FyBsdTrackedObj[] bsd_tracked_obj
FyLcaTrackedObj[] lca_tracked_obj
FySdowTrackedObj[] sdow_tracked_obj
FySideFeatureTrigObj bsdlca_trig_obj_left
FySideFeatureTrigObj bsdlca_trig_obj_right
FySideFeatureTrigObj sdow_trig_obj_left
FySideFeatureTrigObj sdow_trig_obj_right
int32 num_of_ooi_bsd
int32 num_of_ooi_lca
int32 num_of_ooi_sdow
FyBsdlcaInhibits bsdlca_inhibits
FySdowInhibits sdow_inhibits
FyBsdlcaActionDecision bsdlca_action_decision
FySdowActionDecision sdow_action_decision
SdReservedSpace reserved_space

================================================================================
MSG: rospy_message_converter/FySideFeatureOut
uint32 bsdlca_onoff_sts
uint32 bsdlca_left_sts
uint32 bsdlca_right_sts
uint32 bsdlca_left_warn_req
uint32 bsdlca_right_warn_req
uint32 bsdlca_haptic_onoff_sts
uint32 ext_req
uint32 sdow_onoff_sts
uint32 sdow_left_sts
uint32 sdow_right_sts
uint32 sdow_left_warn_req
uint32 sdow_right_warn_req
uint32 rcta_onoff_sts
uint32 rcta_left_sts
uint32 rcta_right_sts
uint32 rcta_left_warn_req
uint32 rcta_right_warn_req
uint32 mirr_light_left_req
uint32 mirr_light_right_req
uint32 rear_rad_fault_disp

================================================================================
MSG: rospy_message_converter/FyBsdTrackedObj
uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right
bool is_in_region_left
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FyLcaTrackedObj
uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right
bool is_in_region_left
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
float32 ttc
bool meet_ttc_thresh
bool is_following_lane
float32 dist_to_collide_position
bool is_dist_to_collide_position_big
bool suppress_warn_by_brake_dist
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySdowTrackedObj
uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right_far
bool is_in_region_left_far
bool is_in_region_right_near
bool is_in_region_left_near
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
float32 ttc
bool meet_ttc_thresh
bool is_following_lane
float32 dist_to_collide_position
bool is_dist_to_collide_position_big
bool suppress_warn_by_brake_dist
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySideFeatureTrigObj
uint32 id
float32 longDist
float32 latDist
float32 heading
float32 length
float32 width
float32 ttc
float32 ta
float32 longVel
float32 latVel
uint32 type
uint32 motionStatus
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FyBsdlcaInhibits
uint32[] fail_inhibits
uint32[] inactive_inhibits
bool is_bsdlca_off
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySdowInhibits
uint32[] fail_inhibits
uint32[] inactive_inhibits
bool is_sdow_off
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FyBsdlcaActionDecision
uint32 bsdlca_decision
uint32 trig_obj_id_left
uint32 trig_obj_id_right
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySdowActionDecision
uint32 sdow_decision
uint32 trig_obj_id_left
uint32 trig_obj_id_right
uint32[] reserved

================================================================================
MSG: rospy_message_converter/SdReservedSpace
bool[] sd_boolReserve
uint32[] sd_intReserve
float32[] sd_floatReserve
"""
  __slots__ = ['request','bsd_tracked_obj','lca_tracked_obj','sdow_tracked_obj','bsdlca_trig_obj_left','bsdlca_trig_obj_right','sdow_trig_obj_left','sdow_trig_obj_right','num_of_ooi_bsd','num_of_ooi_lca','num_of_ooi_sdow','bsdlca_inhibits','sdow_inhibits','bsdlca_action_decision','sdow_action_decision','reserved_space']
  _slot_types = ['rospy_message_converter/FySideFeatureOut','rospy_message_converter/FyBsdTrackedObj[]','rospy_message_converter/FyLcaTrackedObj[]','rospy_message_converter/FySdowTrackedObj[]','rospy_message_converter/FySideFeatureTrigObj','rospy_message_converter/FySideFeatureTrigObj','rospy_message_converter/FySideFeatureTrigObj','rospy_message_converter/FySideFeatureTrigObj','int32','int32','int32','rospy_message_converter/FyBsdlcaInhibits','rospy_message_converter/FySdowInhibits','rospy_message_converter/FyBsdlcaActionDecision','rospy_message_converter/FySdowActionDecision','rospy_message_converter/SdReservedSpace']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request,bsd_tracked_obj,lca_tracked_obj,sdow_tracked_obj,bsdlca_trig_obj_left,bsdlca_trig_obj_right,sdow_trig_obj_left,sdow_trig_obj_right,num_of_ooi_bsd,num_of_ooi_lca,num_of_ooi_sdow,bsdlca_inhibits,sdow_inhibits,bsdlca_action_decision,sdow_action_decision,reserved_space

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FySideFeatureDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = rospy_message_converter.msg.FySideFeatureOut()
      if self.bsd_tracked_obj is None:
        self.bsd_tracked_obj = []
      if self.lca_tracked_obj is None:
        self.lca_tracked_obj = []
      if self.sdow_tracked_obj is None:
        self.sdow_tracked_obj = []
      if self.bsdlca_trig_obj_left is None:
        self.bsdlca_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.bsdlca_trig_obj_right is None:
        self.bsdlca_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.sdow_trig_obj_left is None:
        self.sdow_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.sdow_trig_obj_right is None:
        self.sdow_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.num_of_ooi_bsd is None:
        self.num_of_ooi_bsd = 0
      if self.num_of_ooi_lca is None:
        self.num_of_ooi_lca = 0
      if self.num_of_ooi_sdow is None:
        self.num_of_ooi_sdow = 0
      if self.bsdlca_inhibits is None:
        self.bsdlca_inhibits = rospy_message_converter.msg.FyBsdlcaInhibits()
      if self.sdow_inhibits is None:
        self.sdow_inhibits = rospy_message_converter.msg.FySdowInhibits()
      if self.bsdlca_action_decision is None:
        self.bsdlca_action_decision = rospy_message_converter.msg.FyBsdlcaActionDecision()
      if self.sdow_action_decision is None:
        self.sdow_action_decision = rospy_message_converter.msg.FySdowActionDecision()
      if self.reserved_space is None:
        self.reserved_space = rospy_message_converter.msg.SdReservedSpace()
    else:
      self.request = rospy_message_converter.msg.FySideFeatureOut()
      self.bsd_tracked_obj = []
      self.lca_tracked_obj = []
      self.sdow_tracked_obj = []
      self.bsdlca_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      self.bsdlca_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      self.sdow_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      self.sdow_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      self.num_of_ooi_bsd = 0
      self.num_of_ooi_lca = 0
      self.num_of_ooi_sdow = 0
      self.bsdlca_inhibits = rospy_message_converter.msg.FyBsdlcaInhibits()
      self.sdow_inhibits = rospy_message_converter.msg.FySdowInhibits()
      self.bsdlca_action_decision = rospy_message_converter.msg.FyBsdlcaActionDecision()
      self.sdow_action_decision = rospy_message_converter.msg.FySdowActionDecision()
      self.reserved_space = rospy_message_converter.msg.SdReservedSpace()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20I().pack(_x.request.bsdlca_onoff_sts, _x.request.bsdlca_left_sts, _x.request.bsdlca_right_sts, _x.request.bsdlca_left_warn_req, _x.request.bsdlca_right_warn_req, _x.request.bsdlca_haptic_onoff_sts, _x.request.ext_req, _x.request.sdow_onoff_sts, _x.request.sdow_left_sts, _x.request.sdow_right_sts, _x.request.sdow_left_warn_req, _x.request.sdow_right_warn_req, _x.request.rcta_onoff_sts, _x.request.rcta_left_sts, _x.request.rcta_right_sts, _x.request.rcta_left_warn_req, _x.request.rcta_right_warn_req, _x.request.mirr_light_left_req, _x.request.mirr_light_right_req, _x.request.rear_rad_fault_disp))
      length = len(self.bsd_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.bsd_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3I().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.lca_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.lca_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.sdow_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.sdow_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.bsdlca_trig_obj_left.id, _x.bsdlca_trig_obj_left.longDist, _x.bsdlca_trig_obj_left.latDist, _x.bsdlca_trig_obj_left.heading, _x.bsdlca_trig_obj_left.length, _x.bsdlca_trig_obj_left.width, _x.bsdlca_trig_obj_left.ttc, _x.bsdlca_trig_obj_left.ta, _x.bsdlca_trig_obj_left.longVel, _x.bsdlca_trig_obj_left.latVel, _x.bsdlca_trig_obj_left.type, _x.bsdlca_trig_obj_left.motionStatus))
      length = len(self.bsdlca_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsdlca_trig_obj_left.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.bsdlca_trig_obj_right.id, _x.bsdlca_trig_obj_right.longDist, _x.bsdlca_trig_obj_right.latDist, _x.bsdlca_trig_obj_right.heading, _x.bsdlca_trig_obj_right.length, _x.bsdlca_trig_obj_right.width, _x.bsdlca_trig_obj_right.ttc, _x.bsdlca_trig_obj_right.ta, _x.bsdlca_trig_obj_right.longVel, _x.bsdlca_trig_obj_right.latVel, _x.bsdlca_trig_obj_right.type, _x.bsdlca_trig_obj_right.motionStatus))
      length = len(self.bsdlca_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsdlca_trig_obj_right.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.sdow_trig_obj_left.id, _x.sdow_trig_obj_left.longDist, _x.sdow_trig_obj_left.latDist, _x.sdow_trig_obj_left.heading, _x.sdow_trig_obj_left.length, _x.sdow_trig_obj_left.width, _x.sdow_trig_obj_left.ttc, _x.sdow_trig_obj_left.ta, _x.sdow_trig_obj_left.longVel, _x.sdow_trig_obj_left.latVel, _x.sdow_trig_obj_left.type, _x.sdow_trig_obj_left.motionStatus))
      length = len(self.sdow_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sdow_trig_obj_left.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.sdow_trig_obj_right.id, _x.sdow_trig_obj_right.longDist, _x.sdow_trig_obj_right.latDist, _x.sdow_trig_obj_right.heading, _x.sdow_trig_obj_right.length, _x.sdow_trig_obj_right.width, _x.sdow_trig_obj_right.ttc, _x.sdow_trig_obj_right.ta, _x.sdow_trig_obj_right.longVel, _x.sdow_trig_obj_right.latVel, _x.sdow_trig_obj_right.type, _x.sdow_trig_obj_right.motionStatus))
      length = len(self.sdow_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sdow_trig_obj_right.reserved))
      _x = self
      buff.write(_get_struct_3i().pack(_x.num_of_ooi_bsd, _x.num_of_ooi_lca, _x.num_of_ooi_sdow))
      length = len(self.bsdlca_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsdlca_inhibits.fail_inhibits))
      length = len(self.bsdlca_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsdlca_inhibits.inactive_inhibits))
      _x = self.bsdlca_inhibits.is_bsdlca_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.bsdlca_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsdlca_inhibits.reserved))
      length = len(self.sdow_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sdow_inhibits.fail_inhibits))
      length = len(self.sdow_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sdow_inhibits.inactive_inhibits))
      _x = self.sdow_inhibits.is_sdow_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.sdow_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sdow_inhibits.reserved))
      _x = self
      buff.write(_get_struct_3I().pack(_x.bsdlca_action_decision.bsdlca_decision, _x.bsdlca_action_decision.trig_obj_id_left, _x.bsdlca_action_decision.trig_obj_id_right))
      length = len(self.bsdlca_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.bsdlca_action_decision.reserved))
      _x = self
      buff.write(_get_struct_3I().pack(_x.sdow_action_decision.sdow_decision, _x.sdow_action_decision.trig_obj_id_left, _x.sdow_action_decision.trig_obj_id_right))
      length = len(self.sdow_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sdow_action_decision.reserved))
      length = len(self.reserved_space.sd_boolReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved_space.sd_boolReserve))
      length = len(self.reserved_space.sd_intReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved_space.sd_intReserve))
      length = len(self.reserved_space.sd_floatReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved_space.sd_floatReserve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = rospy_message_converter.msg.FySideFeatureOut()
      if self.bsd_tracked_obj is None:
        self.bsd_tracked_obj = None
      if self.lca_tracked_obj is None:
        self.lca_tracked_obj = None
      if self.sdow_tracked_obj is None:
        self.sdow_tracked_obj = None
      if self.bsdlca_trig_obj_left is None:
        self.bsdlca_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.bsdlca_trig_obj_right is None:
        self.bsdlca_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.sdow_trig_obj_left is None:
        self.sdow_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.sdow_trig_obj_right is None:
        self.sdow_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.bsdlca_inhibits is None:
        self.bsdlca_inhibits = rospy_message_converter.msg.FyBsdlcaInhibits()
      if self.sdow_inhibits is None:
        self.sdow_inhibits = rospy_message_converter.msg.FySdowInhibits()
      if self.bsdlca_action_decision is None:
        self.bsdlca_action_decision = rospy_message_converter.msg.FyBsdlcaActionDecision()
      if self.sdow_action_decision is None:
        self.sdow_action_decision = rospy_message_converter.msg.FySdowActionDecision()
      if self.reserved_space is None:
        self.reserved_space = rospy_message_converter.msg.SdReservedSpace()
      end = 0
      _x = self
      start = end
      end += 80
      (_x.request.bsdlca_onoff_sts, _x.request.bsdlca_left_sts, _x.request.bsdlca_right_sts, _x.request.bsdlca_left_warn_req, _x.request.bsdlca_right_warn_req, _x.request.bsdlca_haptic_onoff_sts, _x.request.ext_req, _x.request.sdow_onoff_sts, _x.request.sdow_left_sts, _x.request.sdow_right_sts, _x.request.sdow_left_warn_req, _x.request.sdow_right_warn_req, _x.request.rcta_onoff_sts, _x.request.rcta_left_sts, _x.request.rcta_right_sts, _x.request.rcta_left_warn_req, _x.request.rcta_right_warn_req, _x.request.mirr_light_left_req, _x.request.mirr_light_right_req, _x.request.rear_rad_fault_disp,) = _get_struct_20I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bsd_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyBsdTrackedObj()
        _x = val1
        start = end
        end += 132
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time,) = _get_struct_2I11fiIi3I6f11B2fB3I().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.bsd_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lca_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyLcaTrackedObj()
        _x = val1
        start = end
        end += 144
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.lca_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sdow_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FySdowTrackedObj()
        _x = val1
        start = end
        end += 146
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right_far = bool(val1.is_in_region_right_far)
        val1.is_in_region_left_far = bool(val1.is_in_region_left_far)
        val1.is_in_region_right_near = bool(val1.is_in_region_right_near)
        val1.is_in_region_left_near = bool(val1.is_in_region_left_near)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.sdow_tracked_obj.append(val1)
      _x = self
      start = end
      end += 48
      (_x.bsdlca_trig_obj_left.id, _x.bsdlca_trig_obj_left.longDist, _x.bsdlca_trig_obj_left.latDist, _x.bsdlca_trig_obj_left.heading, _x.bsdlca_trig_obj_left.length, _x.bsdlca_trig_obj_left.width, _x.bsdlca_trig_obj_left.ttc, _x.bsdlca_trig_obj_left.ta, _x.bsdlca_trig_obj_left.longVel, _x.bsdlca_trig_obj_left.latVel, _x.bsdlca_trig_obj_left.type, _x.bsdlca_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_trig_obj_left.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.bsdlca_trig_obj_right.id, _x.bsdlca_trig_obj_right.longDist, _x.bsdlca_trig_obj_right.latDist, _x.bsdlca_trig_obj_right.heading, _x.bsdlca_trig_obj_right.length, _x.bsdlca_trig_obj_right.width, _x.bsdlca_trig_obj_right.ttc, _x.bsdlca_trig_obj_right.ta, _x.bsdlca_trig_obj_right.longVel, _x.bsdlca_trig_obj_right.latVel, _x.bsdlca_trig_obj_right.type, _x.bsdlca_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_trig_obj_right.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.sdow_trig_obj_left.id, _x.sdow_trig_obj_left.longDist, _x.sdow_trig_obj_left.latDist, _x.sdow_trig_obj_left.heading, _x.sdow_trig_obj_left.length, _x.sdow_trig_obj_left.width, _x.sdow_trig_obj_left.ttc, _x.sdow_trig_obj_left.ta, _x.sdow_trig_obj_left.longVel, _x.sdow_trig_obj_left.latVel, _x.sdow_trig_obj_left.type, _x.sdow_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_trig_obj_left.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.sdow_trig_obj_right.id, _x.sdow_trig_obj_right.longDist, _x.sdow_trig_obj_right.latDist, _x.sdow_trig_obj_right.heading, _x.sdow_trig_obj_right.length, _x.sdow_trig_obj_right.width, _x.sdow_trig_obj_right.ttc, _x.sdow_trig_obj_right.ta, _x.sdow_trig_obj_right.longVel, _x.sdow_trig_obj_right.latVel, _x.sdow_trig_obj_right.type, _x.sdow_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_trig_obj_right.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.num_of_ooi_bsd, _x.num_of_ooi_lca, _x.num_of_ooi_sdow,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_inhibits.fail_inhibits = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_inhibits.inactive_inhibits = s.unpack(str[start:end])
      start = end
      end += 1
      (self.bsdlca_inhibits.is_bsdlca_off,) = _get_struct_B().unpack(str[start:end])
      self.bsdlca_inhibits.is_bsdlca_off = bool(self.bsdlca_inhibits.is_bsdlca_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_inhibits.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_inhibits.fail_inhibits = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_inhibits.inactive_inhibits = s.unpack(str[start:end])
      start = end
      end += 1
      (self.sdow_inhibits.is_sdow_off,) = _get_struct_B().unpack(str[start:end])
      self.sdow_inhibits.is_sdow_off = bool(self.sdow_inhibits.is_sdow_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_inhibits.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.bsdlca_action_decision.bsdlca_decision, _x.bsdlca_action_decision.trig_obj_id_left, _x.bsdlca_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_action_decision.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.sdow_action_decision.sdow_decision, _x.sdow_action_decision.trig_obj_id_left, _x.sdow_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_action_decision.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_space.sd_boolReserve = s.unpack(str[start:end])
      self.reserved_space.sd_boolReserve = list(map(bool, self.reserved_space.sd_boolReserve))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_space.sd_intReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_space.sd_floatReserve = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20I().pack(_x.request.bsdlca_onoff_sts, _x.request.bsdlca_left_sts, _x.request.bsdlca_right_sts, _x.request.bsdlca_left_warn_req, _x.request.bsdlca_right_warn_req, _x.request.bsdlca_haptic_onoff_sts, _x.request.ext_req, _x.request.sdow_onoff_sts, _x.request.sdow_left_sts, _x.request.sdow_right_sts, _x.request.sdow_left_warn_req, _x.request.sdow_right_warn_req, _x.request.rcta_onoff_sts, _x.request.rcta_left_sts, _x.request.rcta_right_sts, _x.request.rcta_left_warn_req, _x.request.rcta_right_warn_req, _x.request.mirr_light_left_req, _x.request.mirr_light_right_req, _x.request.rear_rad_fault_disp))
      length = len(self.bsd_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.bsd_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3I().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.reserved.tostring())
      length = len(self.lca_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.lca_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.reserved.tostring())
      length = len(self.sdow_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.sdow_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.bsdlca_trig_obj_left.id, _x.bsdlca_trig_obj_left.longDist, _x.bsdlca_trig_obj_left.latDist, _x.bsdlca_trig_obj_left.heading, _x.bsdlca_trig_obj_left.length, _x.bsdlca_trig_obj_left.width, _x.bsdlca_trig_obj_left.ttc, _x.bsdlca_trig_obj_left.ta, _x.bsdlca_trig_obj_left.longVel, _x.bsdlca_trig_obj_left.latVel, _x.bsdlca_trig_obj_left.type, _x.bsdlca_trig_obj_left.motionStatus))
      length = len(self.bsdlca_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsdlca_trig_obj_left.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.bsdlca_trig_obj_right.id, _x.bsdlca_trig_obj_right.longDist, _x.bsdlca_trig_obj_right.latDist, _x.bsdlca_trig_obj_right.heading, _x.bsdlca_trig_obj_right.length, _x.bsdlca_trig_obj_right.width, _x.bsdlca_trig_obj_right.ttc, _x.bsdlca_trig_obj_right.ta, _x.bsdlca_trig_obj_right.longVel, _x.bsdlca_trig_obj_right.latVel, _x.bsdlca_trig_obj_right.type, _x.bsdlca_trig_obj_right.motionStatus))
      length = len(self.bsdlca_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsdlca_trig_obj_right.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.sdow_trig_obj_left.id, _x.sdow_trig_obj_left.longDist, _x.sdow_trig_obj_left.latDist, _x.sdow_trig_obj_left.heading, _x.sdow_trig_obj_left.length, _x.sdow_trig_obj_left.width, _x.sdow_trig_obj_left.ttc, _x.sdow_trig_obj_left.ta, _x.sdow_trig_obj_left.longVel, _x.sdow_trig_obj_left.latVel, _x.sdow_trig_obj_left.type, _x.sdow_trig_obj_left.motionStatus))
      length = len(self.sdow_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sdow_trig_obj_left.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.sdow_trig_obj_right.id, _x.sdow_trig_obj_right.longDist, _x.sdow_trig_obj_right.latDist, _x.sdow_trig_obj_right.heading, _x.sdow_trig_obj_right.length, _x.sdow_trig_obj_right.width, _x.sdow_trig_obj_right.ttc, _x.sdow_trig_obj_right.ta, _x.sdow_trig_obj_right.longVel, _x.sdow_trig_obj_right.latVel, _x.sdow_trig_obj_right.type, _x.sdow_trig_obj_right.motionStatus))
      length = len(self.sdow_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sdow_trig_obj_right.reserved.tostring())
      _x = self
      buff.write(_get_struct_3i().pack(_x.num_of_ooi_bsd, _x.num_of_ooi_lca, _x.num_of_ooi_sdow))
      length = len(self.bsdlca_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsdlca_inhibits.fail_inhibits.tostring())
      length = len(self.bsdlca_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsdlca_inhibits.inactive_inhibits.tostring())
      _x = self.bsdlca_inhibits.is_bsdlca_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.bsdlca_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsdlca_inhibits.reserved.tostring())
      length = len(self.sdow_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sdow_inhibits.fail_inhibits.tostring())
      length = len(self.sdow_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sdow_inhibits.inactive_inhibits.tostring())
      _x = self.sdow_inhibits.is_sdow_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.sdow_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sdow_inhibits.reserved.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.bsdlca_action_decision.bsdlca_decision, _x.bsdlca_action_decision.trig_obj_id_left, _x.bsdlca_action_decision.trig_obj_id_right))
      length = len(self.bsdlca_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.bsdlca_action_decision.reserved.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.sdow_action_decision.sdow_decision, _x.sdow_action_decision.trig_obj_id_left, _x.sdow_action_decision.trig_obj_id_right))
      length = len(self.sdow_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sdow_action_decision.reserved.tostring())
      length = len(self.reserved_space.sd_boolReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.reserved_space.sd_boolReserve.tostring())
      length = len(self.reserved_space.sd_intReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.reserved_space.sd_intReserve.tostring())
      length = len(self.reserved_space.sd_floatReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reserved_space.sd_floatReserve.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = rospy_message_converter.msg.FySideFeatureOut()
      if self.bsd_tracked_obj is None:
        self.bsd_tracked_obj = None
      if self.lca_tracked_obj is None:
        self.lca_tracked_obj = None
      if self.sdow_tracked_obj is None:
        self.sdow_tracked_obj = None
      if self.bsdlca_trig_obj_left is None:
        self.bsdlca_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.bsdlca_trig_obj_right is None:
        self.bsdlca_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.sdow_trig_obj_left is None:
        self.sdow_trig_obj_left = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.sdow_trig_obj_right is None:
        self.sdow_trig_obj_right = rospy_message_converter.msg.FySideFeatureTrigObj()
      if self.bsdlca_inhibits is None:
        self.bsdlca_inhibits = rospy_message_converter.msg.FyBsdlcaInhibits()
      if self.sdow_inhibits is None:
        self.sdow_inhibits = rospy_message_converter.msg.FySdowInhibits()
      if self.bsdlca_action_decision is None:
        self.bsdlca_action_decision = rospy_message_converter.msg.FyBsdlcaActionDecision()
      if self.sdow_action_decision is None:
        self.sdow_action_decision = rospy_message_converter.msg.FySdowActionDecision()
      if self.reserved_space is None:
        self.reserved_space = rospy_message_converter.msg.SdReservedSpace()
      end = 0
      _x = self
      start = end
      end += 80
      (_x.request.bsdlca_onoff_sts, _x.request.bsdlca_left_sts, _x.request.bsdlca_right_sts, _x.request.bsdlca_left_warn_req, _x.request.bsdlca_right_warn_req, _x.request.bsdlca_haptic_onoff_sts, _x.request.ext_req, _x.request.sdow_onoff_sts, _x.request.sdow_left_sts, _x.request.sdow_right_sts, _x.request.sdow_left_warn_req, _x.request.sdow_right_warn_req, _x.request.rcta_onoff_sts, _x.request.rcta_left_sts, _x.request.rcta_right_sts, _x.request.rcta_left_warn_req, _x.request.rcta_right_warn_req, _x.request.mirr_light_left_req, _x.request.mirr_light_right_req, _x.request.rear_rad_fault_disp,) = _get_struct_20I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bsd_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyBsdTrackedObj()
        _x = val1
        start = end
        end += 132
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time,) = _get_struct_2I11fiIi3I6f11B2fB3I().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.bsd_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lca_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyLcaTrackedObj()
        _x = val1
        start = end
        end += 144
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.lca_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sdow_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FySdowTrackedObj()
        _x = val1
        start = end
        end += 146
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right_far = bool(val1.is_in_region_right_far)
        val1.is_in_region_left_far = bool(val1.is_in_region_left_far)
        val1.is_in_region_right_near = bool(val1.is_in_region_right_near)
        val1.is_in_region_left_near = bool(val1.is_in_region_left_near)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.sdow_tracked_obj.append(val1)
      _x = self
      start = end
      end += 48
      (_x.bsdlca_trig_obj_left.id, _x.bsdlca_trig_obj_left.longDist, _x.bsdlca_trig_obj_left.latDist, _x.bsdlca_trig_obj_left.heading, _x.bsdlca_trig_obj_left.length, _x.bsdlca_trig_obj_left.width, _x.bsdlca_trig_obj_left.ttc, _x.bsdlca_trig_obj_left.ta, _x.bsdlca_trig_obj_left.longVel, _x.bsdlca_trig_obj_left.latVel, _x.bsdlca_trig_obj_left.type, _x.bsdlca_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_trig_obj_left.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 48
      (_x.bsdlca_trig_obj_right.id, _x.bsdlca_trig_obj_right.longDist, _x.bsdlca_trig_obj_right.latDist, _x.bsdlca_trig_obj_right.heading, _x.bsdlca_trig_obj_right.length, _x.bsdlca_trig_obj_right.width, _x.bsdlca_trig_obj_right.ttc, _x.bsdlca_trig_obj_right.ta, _x.bsdlca_trig_obj_right.longVel, _x.bsdlca_trig_obj_right.latVel, _x.bsdlca_trig_obj_right.type, _x.bsdlca_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_trig_obj_right.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 48
      (_x.sdow_trig_obj_left.id, _x.sdow_trig_obj_left.longDist, _x.sdow_trig_obj_left.latDist, _x.sdow_trig_obj_left.heading, _x.sdow_trig_obj_left.length, _x.sdow_trig_obj_left.width, _x.sdow_trig_obj_left.ttc, _x.sdow_trig_obj_left.ta, _x.sdow_trig_obj_left.longVel, _x.sdow_trig_obj_left.latVel, _x.sdow_trig_obj_left.type, _x.sdow_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_trig_obj_left.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 48
      (_x.sdow_trig_obj_right.id, _x.sdow_trig_obj_right.longDist, _x.sdow_trig_obj_right.latDist, _x.sdow_trig_obj_right.heading, _x.sdow_trig_obj_right.length, _x.sdow_trig_obj_right.width, _x.sdow_trig_obj_right.ttc, _x.sdow_trig_obj_right.ta, _x.sdow_trig_obj_right.longVel, _x.sdow_trig_obj_right.latVel, _x.sdow_trig_obj_right.type, _x.sdow_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_trig_obj_right.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.num_of_ooi_bsd, _x.num_of_ooi_lca, _x.num_of_ooi_sdow,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_inhibits.fail_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_inhibits.inactive_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 1
      (self.bsdlca_inhibits.is_bsdlca_off,) = _get_struct_B().unpack(str[start:end])
      self.bsdlca_inhibits.is_bsdlca_off = bool(self.bsdlca_inhibits.is_bsdlca_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_inhibits.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_inhibits.fail_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_inhibits.inactive_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 1
      (self.sdow_inhibits.is_sdow_off,) = _get_struct_B().unpack(str[start:end])
      self.sdow_inhibits.is_sdow_off = bool(self.sdow_inhibits.is_sdow_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_inhibits.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.bsdlca_action_decision.bsdlca_decision, _x.bsdlca_action_decision.trig_obj_id_left, _x.bsdlca_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bsdlca_action_decision.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.sdow_action_decision.sdow_decision, _x.sdow_action_decision.trig_obj_id_left, _x.sdow_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sdow_action_decision.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_space.sd_boolReserve = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.reserved_space.sd_boolReserve = list(map(bool, self.reserved_space.sd_boolReserve))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_space.sd_intReserve = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved_space.sd_floatReserve = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20I = None
def _get_struct_20I():
    global _struct_20I
    if _struct_20I is None:
        _struct_20I = struct.Struct("<20I")
    return _struct_20I
_struct_2I11fiIi3I6f11B2fB3I = None
def _get_struct_2I11fiIi3I6f11B2fB3I():
    global _struct_2I11fiIi3I6f11B2fB3I
    if _struct_2I11fiIi3I6f11B2fB3I is None:
        _struct_2I11fiIi3I6f11B2fB3I = struct.Struct("<2I11fiIi3I6f11B2fB3I")
    return _struct_2I11fiIi3I6f11B2fB3I
_struct_2I11fiIi3I6f11B2fB3If2Bf2B = None
def _get_struct_2I11fiIi3I6f11B2fB3If2Bf2B():
    global _struct_2I11fiIi3I6f11B2fB3If2Bf2B
    if _struct_2I11fiIi3I6f11B2fB3If2Bf2B is None:
        _struct_2I11fiIi3I6f11B2fB3If2Bf2B = struct.Struct("<2I11fiIi3I6f11B2fB3If2Bf2B")
    return _struct_2I11fiIi3I6f11B2fB3If2Bf2B
_struct_2I11fiIi3I6f13B2fB3If2Bf2B = None
def _get_struct_2I11fiIi3I6f13B2fB3If2Bf2B():
    global _struct_2I11fiIi3I6f13B2fB3If2Bf2B
    if _struct_2I11fiIi3I6f13B2fB3If2Bf2B is None:
        _struct_2I11fiIi3I6f13B2fB3If2Bf2B = struct.Struct("<2I11fiIi3I6f13B2fB3If2Bf2B")
    return _struct_2I11fiIi3I6f13B2fB3If2Bf2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I9f2I = None
def _get_struct_I9f2I():
    global _struct_I9f2I
    if _struct_I9f2I is None:
        _struct_I9f2I = struct.Struct("<I9f2I")
    return _struct_I9f2I

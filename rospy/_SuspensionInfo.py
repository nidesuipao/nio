# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SuspensionInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SuspensionInfo(genpy.Message):
  _md5sum = "b44639df96ffc673183c08671184494b"
  _type = "rospy_message_converter/SuspensionInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[] Lvl
bool[] LvlAdjm
bool LvlCalCmptl
bool CargoActv
int32 CrrntLvl
int32 TarLvl
bool ExtraHiPosn
bool ExtraLoPosn
bool EasyEntryEnaSts
int32 LvlAdjDrvgMod
int32 LvlAdjMod
int32 DampgCtrlMod
int32 DampgDrvgMod
"""
  __slots__ = ['Lvl','LvlAdjm','LvlCalCmptl','CargoActv','CrrntLvl','TarLvl','ExtraHiPosn','ExtraLoPosn','EasyEntryEnaSts','LvlAdjDrvgMod','LvlAdjMod','DampgCtrlMod','DampgDrvgMod']
  _slot_types = ['int32[]','bool[]','bool','bool','int32','int32','bool','bool','bool','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Lvl,LvlAdjm,LvlCalCmptl,CargoActv,CrrntLvl,TarLvl,ExtraHiPosn,ExtraLoPosn,EasyEntryEnaSts,LvlAdjDrvgMod,LvlAdjMod,DampgCtrlMod,DampgDrvgMod

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SuspensionInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Lvl is None:
        self.Lvl = []
      if self.LvlAdjm is None:
        self.LvlAdjm = []
      if self.LvlCalCmptl is None:
        self.LvlCalCmptl = False
      if self.CargoActv is None:
        self.CargoActv = False
      if self.CrrntLvl is None:
        self.CrrntLvl = 0
      if self.TarLvl is None:
        self.TarLvl = 0
      if self.ExtraHiPosn is None:
        self.ExtraHiPosn = False
      if self.ExtraLoPosn is None:
        self.ExtraLoPosn = False
      if self.EasyEntryEnaSts is None:
        self.EasyEntryEnaSts = False
      if self.LvlAdjDrvgMod is None:
        self.LvlAdjDrvgMod = 0
      if self.LvlAdjMod is None:
        self.LvlAdjMod = 0
      if self.DampgCtrlMod is None:
        self.DampgCtrlMod = 0
      if self.DampgDrvgMod is None:
        self.DampgDrvgMod = 0
    else:
      self.Lvl = []
      self.LvlAdjm = []
      self.LvlCalCmptl = False
      self.CargoActv = False
      self.CrrntLvl = 0
      self.TarLvl = 0
      self.ExtraHiPosn = False
      self.ExtraLoPosn = False
      self.EasyEntryEnaSts = False
      self.LvlAdjDrvgMod = 0
      self.LvlAdjMod = 0
      self.DampgCtrlMod = 0
      self.DampgDrvgMod = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Lvl)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.Lvl))
      length = len(self.LvlAdjm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.LvlAdjm))
      _x = self
      buff.write(_get_struct_2B2i3B4i().pack(_x.LvlCalCmptl, _x.CargoActv, _x.CrrntLvl, _x.TarLvl, _x.ExtraHiPosn, _x.ExtraLoPosn, _x.EasyEntryEnaSts, _x.LvlAdjDrvgMod, _x.LvlAdjMod, _x.DampgCtrlMod, _x.DampgDrvgMod))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Lvl = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LvlAdjm = s.unpack(str[start:end])
      self.LvlAdjm = list(map(bool, self.LvlAdjm))
      _x = self
      start = end
      end += 29
      (_x.LvlCalCmptl, _x.CargoActv, _x.CrrntLvl, _x.TarLvl, _x.ExtraHiPosn, _x.ExtraLoPosn, _x.EasyEntryEnaSts, _x.LvlAdjDrvgMod, _x.LvlAdjMod, _x.DampgCtrlMod, _x.DampgDrvgMod,) = _get_struct_2B2i3B4i().unpack(str[start:end])
      self.LvlCalCmptl = bool(self.LvlCalCmptl)
      self.CargoActv = bool(self.CargoActv)
      self.ExtraHiPosn = bool(self.ExtraHiPosn)
      self.ExtraLoPosn = bool(self.ExtraLoPosn)
      self.EasyEntryEnaSts = bool(self.EasyEntryEnaSts)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Lvl)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Lvl.tostring())
      length = len(self.LvlAdjm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.LvlAdjm.tostring())
      _x = self
      buff.write(_get_struct_2B2i3B4i().pack(_x.LvlCalCmptl, _x.CargoActv, _x.CrrntLvl, _x.TarLvl, _x.ExtraHiPosn, _x.ExtraLoPosn, _x.EasyEntryEnaSts, _x.LvlAdjDrvgMod, _x.LvlAdjMod, _x.DampgCtrlMod, _x.DampgDrvgMod))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Lvl = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.LvlAdjm = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.LvlAdjm = list(map(bool, self.LvlAdjm))
      _x = self
      start = end
      end += 29
      (_x.LvlCalCmptl, _x.CargoActv, _x.CrrntLvl, _x.TarLvl, _x.ExtraHiPosn, _x.ExtraLoPosn, _x.EasyEntryEnaSts, _x.LvlAdjDrvgMod, _x.LvlAdjMod, _x.DampgCtrlMod, _x.DampgDrvgMod,) = _get_struct_2B2i3B4i().unpack(str[start:end])
      self.LvlCalCmptl = bool(self.LvlCalCmptl)
      self.CargoActv = bool(self.CargoActv)
      self.ExtraHiPosn = bool(self.ExtraHiPosn)
      self.ExtraLoPosn = bool(self.ExtraLoPosn)
      self.EasyEntryEnaSts = bool(self.EasyEntryEnaSts)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2i3B4i = None
def _get_struct_2B2i3B4i():
    global _struct_2B2i3B4i
    if _struct_2B2i3B4i is None:
        _struct_2B2i3B4i = struct.Struct("<2B2i3B4i")
    return _struct_2B2i3B4i

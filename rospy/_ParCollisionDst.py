# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParCollisionDst.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParCollisionDst(genpy.Message):
  _md5sum = "f03057c7b388ad182657cc405c5b8aeb"
  _type = "rospy_message_converter/ParCollisionDst"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 forward_dst
float32 backward_dst
float32 direct_forward_dst
float32 direct_backward_dst
NodeInfo node_info
float32 min_left_dst
float32 min_right_dst
float32 forward_left_dst
float32 forward_right_dst
float32 backward_left_dst
float32 backward_right_dst
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer
"""
  __slots__ = ['forward_dst','backward_dst','direct_forward_dst','direct_backward_dst','node_info','min_left_dst','min_right_dst','forward_left_dst','forward_right_dst','backward_left_dst','backward_right_dst','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['float32','float32','float32','float32','rospy_message_converter/NodeInfo','float32','float32','float32','float32','float32','float32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       forward_dst,backward_dst,direct_forward_dst,direct_backward_dst,node_info,min_left_dst,min_right_dst,forward_left_dst,forward_right_dst,backward_left_dst,backward_right_dst,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParCollisionDst, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.forward_dst is None:
        self.forward_dst = 0.
      if self.backward_dst is None:
        self.backward_dst = 0.
      if self.direct_forward_dst is None:
        self.direct_forward_dst = 0.
      if self.direct_backward_dst is None:
        self.direct_backward_dst = 0.
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.min_left_dst is None:
        self.min_left_dst = 0.
      if self.min_right_dst is None:
        self.min_right_dst = 0.
      if self.forward_left_dst is None:
        self.forward_left_dst = 0.
      if self.forward_right_dst is None:
        self.forward_right_dst = 0.
      if self.backward_left_dst is None:
        self.backward_left_dst = 0.
      if self.backward_right_dst is None:
        self.backward_right_dst = 0.
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.forward_dst = 0.
      self.backward_dst = 0.
      self.direct_forward_dst = 0.
      self.direct_backward_dst = 0.
      self.node_info = rospy_message_converter.msg.NodeInfo()
      self.min_left_dst = 0.
      self.min_right_dst = 0.
      self.forward_left_dst = 0.
      self.forward_right_dst = 0.
      self.backward_left_dst = 0.
      self.backward_right_dst = 0.
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f2i().pack(_x.forward_dst, _x.backward_dst, _x.direct_forward_dst, _x.direct_backward_dst, _x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.node_info.buffer))
      _x = self
      buff.write(_get_struct_6fQ().pack(_x.min_left_dst, _x.min_right_dst, _x.forward_left_dst, _x.forward_right_dst, _x.backward_left_dst, _x.backward_right_dst, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.forward_dst, _x.backward_dst, _x.direct_forward_dst, _x.direct_backward_dst, _x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_4f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.min_left_dst, _x.min_right_dst, _x.forward_left_dst, _x.forward_right_dst, _x.backward_left_dst, _x.backward_right_dst, _x.publish_ptp_ts,) = _get_struct_6fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f2i().pack(_x.forward_dst, _x.backward_dst, _x.direct_forward_dst, _x.direct_backward_dst, _x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_6fQ().pack(_x.min_left_dst, _x.min_right_dst, _x.forward_left_dst, _x.forward_right_dst, _x.backward_left_dst, _x.backward_right_dst, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.forward_dst, _x.backward_dst, _x.direct_forward_dst, _x.direct_backward_dst, _x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_4f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 32
      (_x.min_left_dst, _x.min_right_dst, _x.forward_left_dst, _x.forward_right_dst, _x.backward_left_dst, _x.backward_right_dst, _x.publish_ptp_ts,) = _get_struct_6fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_4f2i = None
def _get_struct_4f2i():
    global _struct_4f2i
    if _struct_4f2i is None:
        _struct_4f2i = struct.Struct("<4f2i")
    return _struct_4f2i
_struct_6fQ = None
def _get_struct_6fQ():
    global _struct_6fQ
    if _struct_6fQ is None:
        _struct_6fQ = struct.Struct("<6fQ")
    return _struct_6fQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LonControllerDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LonControllerDebug(genpy.Message):
  _md5sum = "84c8492ebb309238d8fab0e245522872"
  _type = "rospy_message_converter/LonControllerDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool valid
float32 acc_cmd
float32 acc_p
float32 acc_i
float32 acc_d
float32 acc_ff
float32 acc_pitch
float32 station_pid_out
float32 index_ref
float32 time_error
float32 station_ref
float32 station_cur
float32 station_err
float32 station_err_flt
float32 velocity_ref
float32 velocity_cur
float32 velocity_err
float32 velocity_err_flt
float32 acceleration_ref
float32 acceleration_cur
float32 acceleration_err
float32 jerk_ref
float32 jerk_cur
float32 jerk_cur_flt
float32 pitch
float32 pitch_fit
float32 last_cmd
"""
  __slots__ = ['valid','acc_cmd','acc_p','acc_i','acc_d','acc_ff','acc_pitch','station_pid_out','index_ref','time_error','station_ref','station_cur','station_err','station_err_flt','velocity_ref','velocity_cur','velocity_err','velocity_err_flt','acceleration_ref','acceleration_cur','acceleration_err','jerk_ref','jerk_cur','jerk_cur_flt','pitch','pitch_fit','last_cmd']
  _slot_types = ['bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid,acc_cmd,acc_p,acc_i,acc_d,acc_ff,acc_pitch,station_pid_out,index_ref,time_error,station_ref,station_cur,station_err,station_err_flt,velocity_ref,velocity_cur,velocity_err,velocity_err_flt,acceleration_ref,acceleration_cur,acceleration_err,jerk_ref,jerk_cur,jerk_cur_flt,pitch,pitch_fit,last_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LonControllerDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid is None:
        self.valid = False
      if self.acc_cmd is None:
        self.acc_cmd = 0.
      if self.acc_p is None:
        self.acc_p = 0.
      if self.acc_i is None:
        self.acc_i = 0.
      if self.acc_d is None:
        self.acc_d = 0.
      if self.acc_ff is None:
        self.acc_ff = 0.
      if self.acc_pitch is None:
        self.acc_pitch = 0.
      if self.station_pid_out is None:
        self.station_pid_out = 0.
      if self.index_ref is None:
        self.index_ref = 0.
      if self.time_error is None:
        self.time_error = 0.
      if self.station_ref is None:
        self.station_ref = 0.
      if self.station_cur is None:
        self.station_cur = 0.
      if self.station_err is None:
        self.station_err = 0.
      if self.station_err_flt is None:
        self.station_err_flt = 0.
      if self.velocity_ref is None:
        self.velocity_ref = 0.
      if self.velocity_cur is None:
        self.velocity_cur = 0.
      if self.velocity_err is None:
        self.velocity_err = 0.
      if self.velocity_err_flt is None:
        self.velocity_err_flt = 0.
      if self.acceleration_ref is None:
        self.acceleration_ref = 0.
      if self.acceleration_cur is None:
        self.acceleration_cur = 0.
      if self.acceleration_err is None:
        self.acceleration_err = 0.
      if self.jerk_ref is None:
        self.jerk_ref = 0.
      if self.jerk_cur is None:
        self.jerk_cur = 0.
      if self.jerk_cur_flt is None:
        self.jerk_cur_flt = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.pitch_fit is None:
        self.pitch_fit = 0.
      if self.last_cmd is None:
        self.last_cmd = 0.
    else:
      self.valid = False
      self.acc_cmd = 0.
      self.acc_p = 0.
      self.acc_i = 0.
      self.acc_d = 0.
      self.acc_ff = 0.
      self.acc_pitch = 0.
      self.station_pid_out = 0.
      self.index_ref = 0.
      self.time_error = 0.
      self.station_ref = 0.
      self.station_cur = 0.
      self.station_err = 0.
      self.station_err_flt = 0.
      self.velocity_ref = 0.
      self.velocity_cur = 0.
      self.velocity_err = 0.
      self.velocity_err_flt = 0.
      self.acceleration_ref = 0.
      self.acceleration_cur = 0.
      self.acceleration_err = 0.
      self.jerk_ref = 0.
      self.jerk_cur = 0.
      self.jerk_cur_flt = 0.
      self.pitch = 0.
      self.pitch_fit = 0.
      self.last_cmd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B26f().pack(_x.valid, _x.acc_cmd, _x.acc_p, _x.acc_i, _x.acc_d, _x.acc_ff, _x.acc_pitch, _x.station_pid_out, _x.index_ref, _x.time_error, _x.station_ref, _x.station_cur, _x.station_err, _x.station_err_flt, _x.velocity_ref, _x.velocity_cur, _x.velocity_err, _x.velocity_err_flt, _x.acceleration_ref, _x.acceleration_cur, _x.acceleration_err, _x.jerk_ref, _x.jerk_cur, _x.jerk_cur_flt, _x.pitch, _x.pitch_fit, _x.last_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 105
      (_x.valid, _x.acc_cmd, _x.acc_p, _x.acc_i, _x.acc_d, _x.acc_ff, _x.acc_pitch, _x.station_pid_out, _x.index_ref, _x.time_error, _x.station_ref, _x.station_cur, _x.station_err, _x.station_err_flt, _x.velocity_ref, _x.velocity_cur, _x.velocity_err, _x.velocity_err_flt, _x.acceleration_ref, _x.acceleration_cur, _x.acceleration_err, _x.jerk_ref, _x.jerk_cur, _x.jerk_cur_flt, _x.pitch, _x.pitch_fit, _x.last_cmd,) = _get_struct_B26f().unpack(str[start:end])
      self.valid = bool(self.valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B26f().pack(_x.valid, _x.acc_cmd, _x.acc_p, _x.acc_i, _x.acc_d, _x.acc_ff, _x.acc_pitch, _x.station_pid_out, _x.index_ref, _x.time_error, _x.station_ref, _x.station_cur, _x.station_err, _x.station_err_flt, _x.velocity_ref, _x.velocity_cur, _x.velocity_err, _x.velocity_err_flt, _x.acceleration_ref, _x.acceleration_cur, _x.acceleration_err, _x.jerk_ref, _x.jerk_cur, _x.jerk_cur_flt, _x.pitch, _x.pitch_fit, _x.last_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 105
      (_x.valid, _x.acc_cmd, _x.acc_p, _x.acc_i, _x.acc_d, _x.acc_ff, _x.acc_pitch, _x.station_pid_out, _x.index_ref, _x.time_error, _x.station_ref, _x.station_cur, _x.station_err, _x.station_err_flt, _x.velocity_ref, _x.velocity_cur, _x.velocity_err, _x.velocity_err_flt, _x.acceleration_ref, _x.acceleration_cur, _x.acceleration_err, _x.jerk_ref, _x.jerk_cur, _x.jerk_cur_flt, _x.pitch, _x.pitch_fit, _x.last_cmd,) = _get_struct_B26f().unpack(str[start:end])
      self.valid = bool(self.valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B26f = None
def _get_struct_B26f():
    global _struct_B26f
    if _struct_B26f is None:
        _struct_B26f = struct.Struct("<B26f")
    return _struct_B26f

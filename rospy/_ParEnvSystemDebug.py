# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvSystemDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvSystemDebug(genpy.Message):
  _md5sum = "0ab8a79066365120bc8062784cdb1452"
  _type = "rospy_message_converter/ParEnvSystemDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """NodeInfo env_app_info
bool psap_mode
uint64 psap_process_time
bool sapa_mode
uint64 sapa_process_time
uint64 obj_map_process_time
uint64 collision_checker_process_time
uint64 slots_process_time
uint64 semantic_map_process_time
uint64 ego_gear
float32 ego_speed
float32 ego_steering
bool ego_is_standstill
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer
"""
  __slots__ = ['env_app_info','psap_mode','psap_process_time','sapa_mode','sapa_process_time','obj_map_process_time','collision_checker_process_time','slots_process_time','semantic_map_process_time','ego_gear','ego_speed','ego_steering','ego_is_standstill','reserved_0','reserved_1','reserved_2','reserved_3','reserved_4','reserved_5','reserved_6','reserved_7','reserved_8','reserved_9','reserved_10']
  _slot_types = ['rospy_message_converter/NodeInfo','bool','uint64','bool','uint64','uint64','uint64','uint64','uint64','uint64','float32','float32','bool','uint64','uint64','uint64','uint64','float32','float32','float32','float32','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       env_app_info,psap_mode,psap_process_time,sapa_mode,sapa_process_time,obj_map_process_time,collision_checker_process_time,slots_process_time,semantic_map_process_time,ego_gear,ego_speed,ego_steering,ego_is_standstill,reserved_0,reserved_1,reserved_2,reserved_3,reserved_4,reserved_5,reserved_6,reserved_7,reserved_8,reserved_9,reserved_10

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvSystemDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.env_app_info is None:
        self.env_app_info = rospy_message_converter.msg.NodeInfo()
      if self.psap_mode is None:
        self.psap_mode = False
      if self.psap_process_time is None:
        self.psap_process_time = 0
      if self.sapa_mode is None:
        self.sapa_mode = False
      if self.sapa_process_time is None:
        self.sapa_process_time = 0
      if self.obj_map_process_time is None:
        self.obj_map_process_time = 0
      if self.collision_checker_process_time is None:
        self.collision_checker_process_time = 0
      if self.slots_process_time is None:
        self.slots_process_time = 0
      if self.semantic_map_process_time is None:
        self.semantic_map_process_time = 0
      if self.ego_gear is None:
        self.ego_gear = 0
      if self.ego_speed is None:
        self.ego_speed = 0.
      if self.ego_steering is None:
        self.ego_steering = 0.
      if self.ego_is_standstill is None:
        self.ego_is_standstill = False
      if self.reserved_0 is None:
        self.reserved_0 = 0
      if self.reserved_1 is None:
        self.reserved_1 = 0
      if self.reserved_2 is None:
        self.reserved_2 = 0
      if self.reserved_3 is None:
        self.reserved_3 = 0
      if self.reserved_4 is None:
        self.reserved_4 = 0.
      if self.reserved_5 is None:
        self.reserved_5 = 0.
      if self.reserved_6 is None:
        self.reserved_6 = 0.
      if self.reserved_7 is None:
        self.reserved_7 = 0.
      if self.reserved_8 is None:
        self.reserved_8 = False
      if self.reserved_9 is None:
        self.reserved_9 = False
      if self.reserved_10 is None:
        self.reserved_10 = ''
    else:
      self.env_app_info = rospy_message_converter.msg.NodeInfo()
      self.psap_mode = False
      self.psap_process_time = 0
      self.sapa_mode = False
      self.sapa_process_time = 0
      self.obj_map_process_time = 0
      self.collision_checker_process_time = 0
      self.slots_process_time = 0
      self.semantic_map_process_time = 0
      self.ego_gear = 0
      self.ego_speed = 0.
      self.ego_steering = 0.
      self.ego_is_standstill = False
      self.reserved_0 = 0
      self.reserved_1 = 0
      self.reserved_2 = 0
      self.reserved_3 = 0
      self.reserved_4 = 0.
      self.reserved_5 = 0.
      self.reserved_6 = 0.
      self.reserved_7 = 0.
      self.reserved_8 = False
      self.reserved_9 = False
      self.reserved_10 = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.env_app_info.node_status, _x.env_app_info.feature_type))
      _x = self.env_app_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.env_app_info.counter, _x.env_app_info.timestamp))
      _x = self.env_app_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.env_app_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.env_app_info.buffer))
      _x = self
      buff.write(_get_struct_BQB6Q2fB4Q4f2B().pack(_x.psap_mode, _x.psap_process_time, _x.sapa_mode, _x.sapa_process_time, _x.obj_map_process_time, _x.collision_checker_process_time, _x.slots_process_time, _x.semantic_map_process_time, _x.ego_gear, _x.ego_speed, _x.ego_steering, _x.ego_is_standstill, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9))
      _x = self.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.env_app_info is None:
        self.env_app_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.env_app_info.node_status, _x.env_app_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.env_app_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.env_app_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.env_app_info.counter, _x.env_app_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.env_app_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.env_app_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.env_app_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 117
      (_x.psap_mode, _x.psap_process_time, _x.sapa_mode, _x.sapa_process_time, _x.obj_map_process_time, _x.collision_checker_process_time, _x.slots_process_time, _x.semantic_map_process_time, _x.ego_gear, _x.ego_speed, _x.ego_steering, _x.ego_is_standstill, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9,) = _get_struct_BQB6Q2fB4Q4f2B().unpack(str[start:end])
      self.psap_mode = bool(self.psap_mode)
      self.sapa_mode = bool(self.sapa_mode)
      self.ego_is_standstill = bool(self.ego_is_standstill)
      self.reserved_8 = bool(self.reserved_8)
      self.reserved_9 = bool(self.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved_10 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.env_app_info.node_status, _x.env_app_info.feature_type))
      _x = self.env_app_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.env_app_info.counter, _x.env_app_info.timestamp))
      _x = self.env_app_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.env_app_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.env_app_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_BQB6Q2fB4Q4f2B().pack(_x.psap_mode, _x.psap_process_time, _x.sapa_mode, _x.sapa_process_time, _x.obj_map_process_time, _x.collision_checker_process_time, _x.slots_process_time, _x.semantic_map_process_time, _x.ego_gear, _x.ego_speed, _x.ego_steering, _x.ego_is_standstill, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9))
      _x = self.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.env_app_info is None:
        self.env_app_info = rospy_message_converter.msg.NodeInfo()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.env_app_info.node_status, _x.env_app_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.env_app_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.env_app_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.env_app_info.counter, _x.env_app_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.env_app_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.env_app_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.env_app_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 117
      (_x.psap_mode, _x.psap_process_time, _x.sapa_mode, _x.sapa_process_time, _x.obj_map_process_time, _x.collision_checker_process_time, _x.slots_process_time, _x.semantic_map_process_time, _x.ego_gear, _x.ego_speed, _x.ego_steering, _x.ego_is_standstill, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9,) = _get_struct_BQB6Q2fB4Q4f2B().unpack(str[start:end])
      self.psap_mode = bool(self.psap_mode)
      self.sapa_mode = bool(self.sapa_mode)
      self.ego_is_standstill = bool(self.ego_is_standstill)
      self.reserved_8 = bool(self.reserved_8)
      self.reserved_9 = bool(self.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved_10 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_BQB6Q2fB4Q4f2B = None
def _get_struct_BQB6Q2fB4Q4f2B():
    global _struct_BQB6Q2fB4Q4f2B
    if _struct_BQB6Q2fB4Q4f2B is None:
        _struct_BQB6Q2fB4Q4f2B = struct.Struct("<BQB6Q2fB4Q4f2B")
    return _struct_BQB6Q2fB4Q4f2B

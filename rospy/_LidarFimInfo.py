# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LidarFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LidarFimInfo(genpy.Message):
  _md5sum = "94dc9ac9262c43211224972be3eb6fab"
  _type = "rospy_message_converter/LidarFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool FIM_Lidar_Com_Error
bool FIM_Lidar_Internal_Fault1
bool FIM_Lidar_Window_Blockage1
bool FIM_Lidar_Window_Blockage2
bool FIM_Lidar_Window_Blockage3
bool FIM_Lidar_Window_Blockage4
bool FIM_Lidar_Internal_Fault2
bool FIM_Lidar_Internal_Fault3
bool FIM_Lidar_Overheat1
bool FIM_Lidar_Overheat2
bool FIM_Lidar_Overheat3
bool FIM_Lidar_Failsafe_3
bool FIM_Lidar_Cal_Error
bool FIM_Lidar_Temphigh_Inhibit
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['FIM_Lidar_Com_Error','FIM_Lidar_Internal_Fault1','FIM_Lidar_Window_Blockage1','FIM_Lidar_Window_Blockage2','FIM_Lidar_Window_Blockage3','FIM_Lidar_Window_Blockage4','FIM_Lidar_Internal_Fault2','FIM_Lidar_Internal_Fault3','FIM_Lidar_Overheat1','FIM_Lidar_Overheat2','FIM_Lidar_Overheat3','FIM_Lidar_Failsafe_3','FIM_Lidar_Cal_Error','FIM_Lidar_Temphigh_Inhibit','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FIM_Lidar_Com_Error,FIM_Lidar_Internal_Fault1,FIM_Lidar_Window_Blockage1,FIM_Lidar_Window_Blockage2,FIM_Lidar_Window_Blockage3,FIM_Lidar_Window_Blockage4,FIM_Lidar_Internal_Fault2,FIM_Lidar_Internal_Fault3,FIM_Lidar_Overheat1,FIM_Lidar_Overheat2,FIM_Lidar_Overheat3,FIM_Lidar_Failsafe_3,FIM_Lidar_Cal_Error,FIM_Lidar_Temphigh_Inhibit,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LidarFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FIM_Lidar_Com_Error is None:
        self.FIM_Lidar_Com_Error = False
      if self.FIM_Lidar_Internal_Fault1 is None:
        self.FIM_Lidar_Internal_Fault1 = False
      if self.FIM_Lidar_Window_Blockage1 is None:
        self.FIM_Lidar_Window_Blockage1 = False
      if self.FIM_Lidar_Window_Blockage2 is None:
        self.FIM_Lidar_Window_Blockage2 = False
      if self.FIM_Lidar_Window_Blockage3 is None:
        self.FIM_Lidar_Window_Blockage3 = False
      if self.FIM_Lidar_Window_Blockage4 is None:
        self.FIM_Lidar_Window_Blockage4 = False
      if self.FIM_Lidar_Internal_Fault2 is None:
        self.FIM_Lidar_Internal_Fault2 = False
      if self.FIM_Lidar_Internal_Fault3 is None:
        self.FIM_Lidar_Internal_Fault3 = False
      if self.FIM_Lidar_Overheat1 is None:
        self.FIM_Lidar_Overheat1 = False
      if self.FIM_Lidar_Overheat2 is None:
        self.FIM_Lidar_Overheat2 = False
      if self.FIM_Lidar_Overheat3 is None:
        self.FIM_Lidar_Overheat3 = False
      if self.FIM_Lidar_Failsafe_3 is None:
        self.FIM_Lidar_Failsafe_3 = False
      if self.FIM_Lidar_Cal_Error is None:
        self.FIM_Lidar_Cal_Error = False
      if self.FIM_Lidar_Temphigh_Inhibit is None:
        self.FIM_Lidar_Temphigh_Inhibit = False
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.FIM_Lidar_Com_Error = False
      self.FIM_Lidar_Internal_Fault1 = False
      self.FIM_Lidar_Window_Blockage1 = False
      self.FIM_Lidar_Window_Blockage2 = False
      self.FIM_Lidar_Window_Blockage3 = False
      self.FIM_Lidar_Window_Blockage4 = False
      self.FIM_Lidar_Internal_Fault2 = False
      self.FIM_Lidar_Internal_Fault3 = False
      self.FIM_Lidar_Overheat1 = False
      self.FIM_Lidar_Overheat2 = False
      self.FIM_Lidar_Overheat3 = False
      self.FIM_Lidar_Failsafe_3 = False
      self.FIM_Lidar_Cal_Error = False
      self.FIM_Lidar_Temphigh_Inhibit = False
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14BQ().pack(_x.FIM_Lidar_Com_Error, _x.FIM_Lidar_Internal_Fault1, _x.FIM_Lidar_Window_Blockage1, _x.FIM_Lidar_Window_Blockage2, _x.FIM_Lidar_Window_Blockage3, _x.FIM_Lidar_Window_Blockage4, _x.FIM_Lidar_Internal_Fault2, _x.FIM_Lidar_Internal_Fault3, _x.FIM_Lidar_Overheat1, _x.FIM_Lidar_Overheat2, _x.FIM_Lidar_Overheat3, _x.FIM_Lidar_Failsafe_3, _x.FIM_Lidar_Cal_Error, _x.FIM_Lidar_Temphigh_Inhibit, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.FIM_Lidar_Com_Error, _x.FIM_Lidar_Internal_Fault1, _x.FIM_Lidar_Window_Blockage1, _x.FIM_Lidar_Window_Blockage2, _x.FIM_Lidar_Window_Blockage3, _x.FIM_Lidar_Window_Blockage4, _x.FIM_Lidar_Internal_Fault2, _x.FIM_Lidar_Internal_Fault3, _x.FIM_Lidar_Overheat1, _x.FIM_Lidar_Overheat2, _x.FIM_Lidar_Overheat3, _x.FIM_Lidar_Failsafe_3, _x.FIM_Lidar_Cal_Error, _x.FIM_Lidar_Temphigh_Inhibit, _x.publish_ptp_ts,) = _get_struct_14BQ().unpack(str[start:end])
      self.FIM_Lidar_Com_Error = bool(self.FIM_Lidar_Com_Error)
      self.FIM_Lidar_Internal_Fault1 = bool(self.FIM_Lidar_Internal_Fault1)
      self.FIM_Lidar_Window_Blockage1 = bool(self.FIM_Lidar_Window_Blockage1)
      self.FIM_Lidar_Window_Blockage2 = bool(self.FIM_Lidar_Window_Blockage2)
      self.FIM_Lidar_Window_Blockage3 = bool(self.FIM_Lidar_Window_Blockage3)
      self.FIM_Lidar_Window_Blockage4 = bool(self.FIM_Lidar_Window_Blockage4)
      self.FIM_Lidar_Internal_Fault2 = bool(self.FIM_Lidar_Internal_Fault2)
      self.FIM_Lidar_Internal_Fault3 = bool(self.FIM_Lidar_Internal_Fault3)
      self.FIM_Lidar_Overheat1 = bool(self.FIM_Lidar_Overheat1)
      self.FIM_Lidar_Overheat2 = bool(self.FIM_Lidar_Overheat2)
      self.FIM_Lidar_Overheat3 = bool(self.FIM_Lidar_Overheat3)
      self.FIM_Lidar_Failsafe_3 = bool(self.FIM_Lidar_Failsafe_3)
      self.FIM_Lidar_Cal_Error = bool(self.FIM_Lidar_Cal_Error)
      self.FIM_Lidar_Temphigh_Inhibit = bool(self.FIM_Lidar_Temphigh_Inhibit)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14BQ().pack(_x.FIM_Lidar_Com_Error, _x.FIM_Lidar_Internal_Fault1, _x.FIM_Lidar_Window_Blockage1, _x.FIM_Lidar_Window_Blockage2, _x.FIM_Lidar_Window_Blockage3, _x.FIM_Lidar_Window_Blockage4, _x.FIM_Lidar_Internal_Fault2, _x.FIM_Lidar_Internal_Fault3, _x.FIM_Lidar_Overheat1, _x.FIM_Lidar_Overheat2, _x.FIM_Lidar_Overheat3, _x.FIM_Lidar_Failsafe_3, _x.FIM_Lidar_Cal_Error, _x.FIM_Lidar_Temphigh_Inhibit, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.FIM_Lidar_Com_Error, _x.FIM_Lidar_Internal_Fault1, _x.FIM_Lidar_Window_Blockage1, _x.FIM_Lidar_Window_Blockage2, _x.FIM_Lidar_Window_Blockage3, _x.FIM_Lidar_Window_Blockage4, _x.FIM_Lidar_Internal_Fault2, _x.FIM_Lidar_Internal_Fault3, _x.FIM_Lidar_Overheat1, _x.FIM_Lidar_Overheat2, _x.FIM_Lidar_Overheat3, _x.FIM_Lidar_Failsafe_3, _x.FIM_Lidar_Cal_Error, _x.FIM_Lidar_Temphigh_Inhibit, _x.publish_ptp_ts,) = _get_struct_14BQ().unpack(str[start:end])
      self.FIM_Lidar_Com_Error = bool(self.FIM_Lidar_Com_Error)
      self.FIM_Lidar_Internal_Fault1 = bool(self.FIM_Lidar_Internal_Fault1)
      self.FIM_Lidar_Window_Blockage1 = bool(self.FIM_Lidar_Window_Blockage1)
      self.FIM_Lidar_Window_Blockage2 = bool(self.FIM_Lidar_Window_Blockage2)
      self.FIM_Lidar_Window_Blockage3 = bool(self.FIM_Lidar_Window_Blockage3)
      self.FIM_Lidar_Window_Blockage4 = bool(self.FIM_Lidar_Window_Blockage4)
      self.FIM_Lidar_Internal_Fault2 = bool(self.FIM_Lidar_Internal_Fault2)
      self.FIM_Lidar_Internal_Fault3 = bool(self.FIM_Lidar_Internal_Fault3)
      self.FIM_Lidar_Overheat1 = bool(self.FIM_Lidar_Overheat1)
      self.FIM_Lidar_Overheat2 = bool(self.FIM_Lidar_Overheat2)
      self.FIM_Lidar_Overheat3 = bool(self.FIM_Lidar_Overheat3)
      self.FIM_Lidar_Failsafe_3 = bool(self.FIM_Lidar_Failsafe_3)
      self.FIM_Lidar_Cal_Error = bool(self.FIM_Lidar_Cal_Error)
      self.FIM_Lidar_Temphigh_Inhibit = bool(self.FIM_Lidar_Temphigh_Inhibit)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14BQ = None
def _get_struct_14BQ():
    global _struct_14BQ
    if _struct_14BQ is None:
        _struct_14BQ = struct.Struct("<14BQ")
    return _struct_14BQ
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

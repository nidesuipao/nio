# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ActuatorIf.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ActuatorIf(genpy.Message):
  _md5sum = "28887669fc2751dd29ba3df07894b8f1"
  _type = "rospy_message_converter/ActuatorIf"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LngLwSpdCtrlIf LngLwSpdCtrl
LatCtrlIf LatCtrl
LngCtrlEmrgIf LngCtrlEmrgnc
LngctrlCmfrtIf LngCtrlCmfrt
VehModMngIfInfo VehModMng
SafeStateInfo SafetyState
BodyCtrlIfInfo BodyCtrlIf

================================================================================
MSG: rospy_message_converter/LngLwSpdCtrlIf
int32 FctSeln
int32 CntrlModReq
int32 LLCSt
int32 TarGearReq
float32 TarSpdKph
float32 StopDst
int32 ShutdownModReq
int32 EPBReq
float32 VehDstToVSlot
float32 SlopeDstOffset
int32 VCU_ObjModTyp
float32 VCU_ObjModLonDst
float32 VCU_ObjModLatDst

================================================================================
MSG: rospy_message_converter/LatCtrlIf
int32 ACIReqVld
float32 ACIReqSAE
float32 ACISafLimAngDyn
uint32 ACISafLimAngRM
float32 ACISafLimAngDynOffs
uint32 ACISafLimRate
uint32 ACIRampRate
uint32 ACISafLimAngLM
uint32 ACISafLimMode
int32 CTIReqVal
float32 CTIReqSAE
int32 StrIFReq
uint32 HVIReq
int32 HVIReqVld
int32 ACITsuSup
int32 ACIOvrdThr

================================================================================
MSG: rospy_message_converter/LngCtrlEmrgIf
bool AEBDecelReq
float32 AEBTarDecel
bool EBADecelReq
bool ABPReq
uint32 AWBSnvtyLvl
bool AWBReq
uint32 ABASnvtyLvl
bool ABAReq
bool AEBDecelReq_DummyForDVR

================================================================================
MSG: rospy_message_converter/LngctrlCmfrtIf
int32 VLCReqFct
int32 VLCMode
float32 VLCTarA
float32 VLCMinJerkA
float32 VLCMaxJerkA
bool VLCDrvOffReq
bool VLCDecToStopReq
int32 VLCShutdownModReq
int32 AD_ActvSftyBltReq

================================================================================
MSG: rospy_message_converter/VehModMngIfInfo
int32 ADDrvTypReq
int32 DDMReq

================================================================================
MSG: rospy_message_converter/SafeStateInfo
uint32 SafetyState1

================================================================================
MSG: rospy_message_converter/BodyCtrlIfInfo
int32 MirrFoldUnfoldExtReq
int32 ADCWiperCtrl
bool WSHeatReq
bool WSHeatReqValid
"""
  __slots__ = ['LngLwSpdCtrl','LatCtrl','LngCtrlEmrgnc','LngCtrlCmfrt','VehModMng','SafetyState','BodyCtrlIf']
  _slot_types = ['rospy_message_converter/LngLwSpdCtrlIf','rospy_message_converter/LatCtrlIf','rospy_message_converter/LngCtrlEmrgIf','rospy_message_converter/LngctrlCmfrtIf','rospy_message_converter/VehModMngIfInfo','rospy_message_converter/SafeStateInfo','rospy_message_converter/BodyCtrlIfInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LngLwSpdCtrl,LatCtrl,LngCtrlEmrgnc,LngCtrlCmfrt,VehModMng,SafetyState,BodyCtrlIf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActuatorIf, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LngLwSpdCtrl is None:
        self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.LatCtrl is None:
        self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      if self.LngCtrlEmrgnc is None:
        self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      if self.LngCtrlCmfrt is None:
        self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      if self.VehModMng is None:
        self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      if self.SafetyState is None:
        self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      if self.BodyCtrlIf is None:
        self.BodyCtrlIf = rospy_message_converter.msg.BodyCtrlIfInfo()
    else:
      self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      self.BodyCtrlIf = rospy_message_converter.msg.BodyCtrlIfInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B().pack(_x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.BodyCtrlIf.ADCWiperCtrl, _x.BodyCtrlIf.WSHeatReq, _x.BodyCtrlIf.WSHeatReqValid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LngLwSpdCtrl is None:
        self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.LatCtrl is None:
        self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      if self.LngCtrlEmrgnc is None:
        self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      if self.LngCtrlCmfrt is None:
        self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      if self.VehModMng is None:
        self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      if self.SafetyState is None:
        self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      if self.BodyCtrlIf is None:
        self.BodyCtrlIf = rospy_message_converter.msg.BodyCtrlIfInfo()
      end = 0
      _x = self
      start = end
      end += 186
      (_x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.BodyCtrlIf.ADCWiperCtrl, _x.BodyCtrlIf.WSHeatReq, _x.BodyCtrlIf.WSHeatReqValid,) = _get_struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B().unpack(str[start:end])
      self.LngCtrlEmrgnc.AEBDecelReq = bool(self.LngCtrlEmrgnc.AEBDecelReq)
      self.LngCtrlEmrgnc.EBADecelReq = bool(self.LngCtrlEmrgnc.EBADecelReq)
      self.LngCtrlEmrgnc.ABPReq = bool(self.LngCtrlEmrgnc.ABPReq)
      self.LngCtrlEmrgnc.AWBReq = bool(self.LngCtrlEmrgnc.AWBReq)
      self.LngCtrlEmrgnc.ABAReq = bool(self.LngCtrlEmrgnc.ABAReq)
      self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR = bool(self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR)
      self.LngCtrlCmfrt.VLCDrvOffReq = bool(self.LngCtrlCmfrt.VLCDrvOffReq)
      self.LngCtrlCmfrt.VLCDecToStopReq = bool(self.LngCtrlCmfrt.VLCDecToStopReq)
      self.BodyCtrlIf.WSHeatReq = bool(self.BodyCtrlIf.WSHeatReq)
      self.BodyCtrlIf.WSHeatReqValid = bool(self.BodyCtrlIf.WSHeatReqValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B().pack(_x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.BodyCtrlIf.ADCWiperCtrl, _x.BodyCtrlIf.WSHeatReq, _x.BodyCtrlIf.WSHeatReqValid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LngLwSpdCtrl is None:
        self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.LatCtrl is None:
        self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      if self.LngCtrlEmrgnc is None:
        self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      if self.LngCtrlCmfrt is None:
        self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      if self.VehModMng is None:
        self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      if self.SafetyState is None:
        self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      if self.BodyCtrlIf is None:
        self.BodyCtrlIf = rospy_message_converter.msg.BodyCtrlIfInfo()
      end = 0
      _x = self
      start = end
      end += 186
      (_x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.BodyCtrlIf.MirrFoldUnfoldExtReq, _x.BodyCtrlIf.ADCWiperCtrl, _x.BodyCtrlIf.WSHeatReq, _x.BodyCtrlIf.WSHeatReqValid,) = _get_struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B().unpack(str[start:end])
      self.LngCtrlEmrgnc.AEBDecelReq = bool(self.LngCtrlEmrgnc.AEBDecelReq)
      self.LngCtrlEmrgnc.EBADecelReq = bool(self.LngCtrlEmrgnc.EBADecelReq)
      self.LngCtrlEmrgnc.ABPReq = bool(self.LngCtrlEmrgnc.ABPReq)
      self.LngCtrlEmrgnc.AWBReq = bool(self.LngCtrlEmrgnc.AWBReq)
      self.LngCtrlEmrgnc.ABAReq = bool(self.LngCtrlEmrgnc.ABAReq)
      self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR = bool(self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR)
      self.LngCtrlCmfrt.VLCDrvOffReq = bool(self.LngCtrlCmfrt.VLCDrvOffReq)
      self.LngCtrlCmfrt.VLCDecToStopReq = bool(self.LngCtrlCmfrt.VLCDecToStopReq)
      self.BodyCtrlIf.WSHeatReq = bool(self.BodyCtrlIf.WSHeatReq)
      self.BodyCtrlIf.WSHeatReqValid = bool(self.BodyCtrlIf.WSHeatReqValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B = None
def _get_struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B():
    global _struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B
    if _struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B is None:
        _struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B = struct.Struct("<4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B")
    return _struct_4i2f2i2fi2fi2fIf4IifiI3iBf2BIBI2B2i3f2B4iI2i2B

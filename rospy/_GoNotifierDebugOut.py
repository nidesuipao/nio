# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/GoNotifierDebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GoNotifierDebugOut(genpy.Message):
  _md5sum = "af9a2a805b0e2c9b0c7f78c62ec07121"
  _type = "rospy_message_converter/GoNotifierDebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 cipv_index
uint32 cipv_valid
float64 cipv_lon_pos
uint32 lead_obj_last_index
uint32 lead_obj_last_valid
float64 lead_obj_last_lon_pos
uint32 np_sts
bool dms_phylink_fim
uint32 dms_sts
bool dms_result_valid
float64 dms_result_conf
uint32 dms_dstr_lvl
uint32 obs_dist_fl
uint32 obs_dist_fm
uint32 obs_dist_fr
bool ego_standstill
float64 ego_standstill_age
bool req_send_flag
float64 no_lead_obj_age
bool np_cond
bool ego_cond
bool drv_distracted
bool lead_obj_exist
float64 lead_obj_leave_age
float64 lead_obj_dis_age
bool lead_obj_cond
uint32 uss_fault_st
uint32 sys_fault_st
uint32 failsafe_st
bool uss_fail
bool obs_cond
bool sys_fail
uint32 smstate
uint32 gn_request
float64 gn_request_age
uint32 gn_switch
bool driver_act
"""
  __slots__ = ['cipv_index','cipv_valid','cipv_lon_pos','lead_obj_last_index','lead_obj_last_valid','lead_obj_last_lon_pos','np_sts','dms_phylink_fim','dms_sts','dms_result_valid','dms_result_conf','dms_dstr_lvl','obs_dist_fl','obs_dist_fm','obs_dist_fr','ego_standstill','ego_standstill_age','req_send_flag','no_lead_obj_age','np_cond','ego_cond','drv_distracted','lead_obj_exist','lead_obj_leave_age','lead_obj_dis_age','lead_obj_cond','uss_fault_st','sys_fault_st','failsafe_st','uss_fail','obs_cond','sys_fail','smstate','gn_request','gn_request_age','gn_switch','driver_act']
  _slot_types = ['uint32','uint32','float64','uint32','uint32','float64','uint32','bool','uint32','bool','float64','uint32','uint32','uint32','uint32','bool','float64','bool','float64','bool','bool','bool','bool','float64','float64','bool','uint32','uint32','uint32','bool','bool','bool','uint32','uint32','float64','uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cipv_index,cipv_valid,cipv_lon_pos,lead_obj_last_index,lead_obj_last_valid,lead_obj_last_lon_pos,np_sts,dms_phylink_fim,dms_sts,dms_result_valid,dms_result_conf,dms_dstr_lvl,obs_dist_fl,obs_dist_fm,obs_dist_fr,ego_standstill,ego_standstill_age,req_send_flag,no_lead_obj_age,np_cond,ego_cond,drv_distracted,lead_obj_exist,lead_obj_leave_age,lead_obj_dis_age,lead_obj_cond,uss_fault_st,sys_fault_st,failsafe_st,uss_fail,obs_cond,sys_fail,smstate,gn_request,gn_request_age,gn_switch,driver_act

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GoNotifierDebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cipv_index is None:
        self.cipv_index = 0
      if self.cipv_valid is None:
        self.cipv_valid = 0
      if self.cipv_lon_pos is None:
        self.cipv_lon_pos = 0.
      if self.lead_obj_last_index is None:
        self.lead_obj_last_index = 0
      if self.lead_obj_last_valid is None:
        self.lead_obj_last_valid = 0
      if self.lead_obj_last_lon_pos is None:
        self.lead_obj_last_lon_pos = 0.
      if self.np_sts is None:
        self.np_sts = 0
      if self.dms_phylink_fim is None:
        self.dms_phylink_fim = False
      if self.dms_sts is None:
        self.dms_sts = 0
      if self.dms_result_valid is None:
        self.dms_result_valid = False
      if self.dms_result_conf is None:
        self.dms_result_conf = 0.
      if self.dms_dstr_lvl is None:
        self.dms_dstr_lvl = 0
      if self.obs_dist_fl is None:
        self.obs_dist_fl = 0
      if self.obs_dist_fm is None:
        self.obs_dist_fm = 0
      if self.obs_dist_fr is None:
        self.obs_dist_fr = 0
      if self.ego_standstill is None:
        self.ego_standstill = False
      if self.ego_standstill_age is None:
        self.ego_standstill_age = 0.
      if self.req_send_flag is None:
        self.req_send_flag = False
      if self.no_lead_obj_age is None:
        self.no_lead_obj_age = 0.
      if self.np_cond is None:
        self.np_cond = False
      if self.ego_cond is None:
        self.ego_cond = False
      if self.drv_distracted is None:
        self.drv_distracted = False
      if self.lead_obj_exist is None:
        self.lead_obj_exist = False
      if self.lead_obj_leave_age is None:
        self.lead_obj_leave_age = 0.
      if self.lead_obj_dis_age is None:
        self.lead_obj_dis_age = 0.
      if self.lead_obj_cond is None:
        self.lead_obj_cond = False
      if self.uss_fault_st is None:
        self.uss_fault_st = 0
      if self.sys_fault_st is None:
        self.sys_fault_st = 0
      if self.failsafe_st is None:
        self.failsafe_st = 0
      if self.uss_fail is None:
        self.uss_fail = False
      if self.obs_cond is None:
        self.obs_cond = False
      if self.sys_fail is None:
        self.sys_fail = False
      if self.smstate is None:
        self.smstate = 0
      if self.gn_request is None:
        self.gn_request = 0
      if self.gn_request_age is None:
        self.gn_request_age = 0.
      if self.gn_switch is None:
        self.gn_switch = 0
      if self.driver_act is None:
        self.driver_act = False
    else:
      self.cipv_index = 0
      self.cipv_valid = 0
      self.cipv_lon_pos = 0.
      self.lead_obj_last_index = 0
      self.lead_obj_last_valid = 0
      self.lead_obj_last_lon_pos = 0.
      self.np_sts = 0
      self.dms_phylink_fim = False
      self.dms_sts = 0
      self.dms_result_valid = False
      self.dms_result_conf = 0.
      self.dms_dstr_lvl = 0
      self.obs_dist_fl = 0
      self.obs_dist_fm = 0
      self.obs_dist_fr = 0
      self.ego_standstill = False
      self.ego_standstill_age = 0.
      self.req_send_flag = False
      self.no_lead_obj_age = 0.
      self.np_cond = False
      self.ego_cond = False
      self.drv_distracted = False
      self.lead_obj_exist = False
      self.lead_obj_leave_age = 0.
      self.lead_obj_dis_age = 0.
      self.lead_obj_cond = False
      self.uss_fault_st = 0
      self.sys_fault_st = 0
      self.failsafe_st = 0
      self.uss_fail = False
      self.obs_cond = False
      self.sys_fail = False
      self.smstate = 0
      self.gn_request = 0
      self.gn_request_age = 0.
      self.gn_switch = 0
      self.driver_act = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB().pack(_x.cipv_index, _x.cipv_valid, _x.cipv_lon_pos, _x.lead_obj_last_index, _x.lead_obj_last_valid, _x.lead_obj_last_lon_pos, _x.np_sts, _x.dms_phylink_fim, _x.dms_sts, _x.dms_result_valid, _x.dms_result_conf, _x.dms_dstr_lvl, _x.obs_dist_fl, _x.obs_dist_fm, _x.obs_dist_fr, _x.ego_standstill, _x.ego_standstill_age, _x.req_send_flag, _x.no_lead_obj_age, _x.np_cond, _x.ego_cond, _x.drv_distracted, _x.lead_obj_exist, _x.lead_obj_leave_age, _x.lead_obj_dis_age, _x.lead_obj_cond, _x.uss_fault_st, _x.sys_fault_st, _x.failsafe_st, _x.uss_fail, _x.obs_cond, _x.sys_fail, _x.smstate, _x.gn_request, _x.gn_request_age, _x.gn_switch, _x.driver_act))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 141
      (_x.cipv_index, _x.cipv_valid, _x.cipv_lon_pos, _x.lead_obj_last_index, _x.lead_obj_last_valid, _x.lead_obj_last_lon_pos, _x.np_sts, _x.dms_phylink_fim, _x.dms_sts, _x.dms_result_valid, _x.dms_result_conf, _x.dms_dstr_lvl, _x.obs_dist_fl, _x.obs_dist_fm, _x.obs_dist_fr, _x.ego_standstill, _x.ego_standstill_age, _x.req_send_flag, _x.no_lead_obj_age, _x.np_cond, _x.ego_cond, _x.drv_distracted, _x.lead_obj_exist, _x.lead_obj_leave_age, _x.lead_obj_dis_age, _x.lead_obj_cond, _x.uss_fault_st, _x.sys_fault_st, _x.failsafe_st, _x.uss_fail, _x.obs_cond, _x.sys_fail, _x.smstate, _x.gn_request, _x.gn_request_age, _x.gn_switch, _x.driver_act,) = _get_struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB().unpack(str[start:end])
      self.dms_phylink_fim = bool(self.dms_phylink_fim)
      self.dms_result_valid = bool(self.dms_result_valid)
      self.ego_standstill = bool(self.ego_standstill)
      self.req_send_flag = bool(self.req_send_flag)
      self.np_cond = bool(self.np_cond)
      self.ego_cond = bool(self.ego_cond)
      self.drv_distracted = bool(self.drv_distracted)
      self.lead_obj_exist = bool(self.lead_obj_exist)
      self.lead_obj_cond = bool(self.lead_obj_cond)
      self.uss_fail = bool(self.uss_fail)
      self.obs_cond = bool(self.obs_cond)
      self.sys_fail = bool(self.sys_fail)
      self.driver_act = bool(self.driver_act)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB().pack(_x.cipv_index, _x.cipv_valid, _x.cipv_lon_pos, _x.lead_obj_last_index, _x.lead_obj_last_valid, _x.lead_obj_last_lon_pos, _x.np_sts, _x.dms_phylink_fim, _x.dms_sts, _x.dms_result_valid, _x.dms_result_conf, _x.dms_dstr_lvl, _x.obs_dist_fl, _x.obs_dist_fm, _x.obs_dist_fr, _x.ego_standstill, _x.ego_standstill_age, _x.req_send_flag, _x.no_lead_obj_age, _x.np_cond, _x.ego_cond, _x.drv_distracted, _x.lead_obj_exist, _x.lead_obj_leave_age, _x.lead_obj_dis_age, _x.lead_obj_cond, _x.uss_fault_st, _x.sys_fault_st, _x.failsafe_st, _x.uss_fail, _x.obs_cond, _x.sys_fail, _x.smstate, _x.gn_request, _x.gn_request_age, _x.gn_switch, _x.driver_act))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 141
      (_x.cipv_index, _x.cipv_valid, _x.cipv_lon_pos, _x.lead_obj_last_index, _x.lead_obj_last_valid, _x.lead_obj_last_lon_pos, _x.np_sts, _x.dms_phylink_fim, _x.dms_sts, _x.dms_result_valid, _x.dms_result_conf, _x.dms_dstr_lvl, _x.obs_dist_fl, _x.obs_dist_fm, _x.obs_dist_fr, _x.ego_standstill, _x.ego_standstill_age, _x.req_send_flag, _x.no_lead_obj_age, _x.np_cond, _x.ego_cond, _x.drv_distracted, _x.lead_obj_exist, _x.lead_obj_leave_age, _x.lead_obj_dis_age, _x.lead_obj_cond, _x.uss_fault_st, _x.sys_fault_st, _x.failsafe_st, _x.uss_fail, _x.obs_cond, _x.sys_fail, _x.smstate, _x.gn_request, _x.gn_request_age, _x.gn_switch, _x.driver_act,) = _get_struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB().unpack(str[start:end])
      self.dms_phylink_fim = bool(self.dms_phylink_fim)
      self.dms_result_valid = bool(self.dms_result_valid)
      self.ego_standstill = bool(self.ego_standstill)
      self.req_send_flag = bool(self.req_send_flag)
      self.np_cond = bool(self.np_cond)
      self.ego_cond = bool(self.ego_cond)
      self.drv_distracted = bool(self.drv_distracted)
      self.lead_obj_exist = bool(self.lead_obj_exist)
      self.lead_obj_cond = bool(self.lead_obj_cond)
      self.uss_fail = bool(self.uss_fail)
      self.obs_cond = bool(self.obs_cond)
      self.sys_fail = bool(self.sys_fail)
      self.driver_act = bool(self.driver_act)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB = None
def _get_struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB():
    global _struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB
    if _struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB is None:
        _struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB = struct.Struct("<2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB")
    return _struct_2Id2IdIBIBd4IBdBd4B2dB3I3B2IdIB

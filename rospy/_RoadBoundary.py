# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RoadBoundary.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RoadBoundary(genpy.Message):
  _md5sum = "0c7954c11e29a7d7936e03878d4cf391"
  _type = "rospy_message_converter/RoadBoundary"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LeftFrontGuardRails left_guard
RightFrontGuardRails right_guard
LeftBackBarriers left_barr
RightBackBarriers right_barr

================================================================================
MSG: rospy_message_converter/LeftFrontGuardRails
float32 left_front_c0
float32 left_front_c1
float32 left_front_heading
float32 left_front_offset
uint32 barrier_conf
float32 left_front_start_distance
float32 left_front_end_distance

================================================================================
MSG: rospy_message_converter/RightFrontGuardRails
float32 right_front_c0
float32 right_front_c1
float32 right_front_heading
float32 right_front_offset
uint32 barrier_conf
float32 right_front_start_distance
float32 right_front_end_distance

================================================================================
MSG: rospy_message_converter/LeftBackBarriers
float32 left_back_c0
float32 left_back_c1
float32 left_back_c2
float32 left_back_c3
uint32 barrier_conf
float32 left_back_start_distance
float32 left_back_end_distance

================================================================================
MSG: rospy_message_converter/RightBackBarriers
float32 right_back_c0
float32 right_back_c1
float32 right_back_c2
float32 right_back_c3
uint32 barrier_conf
float32 right_back_start_distance
float32 right_back_end_distance
"""
  __slots__ = ['left_guard','right_guard','left_barr','right_barr']
  _slot_types = ['rospy_message_converter/LeftFrontGuardRails','rospy_message_converter/RightFrontGuardRails','rospy_message_converter/LeftBackBarriers','rospy_message_converter/RightBackBarriers']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_guard,right_guard,left_barr,right_barr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadBoundary, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_guard is None:
        self.left_guard = rospy_message_converter.msg.LeftFrontGuardRails()
      if self.right_guard is None:
        self.right_guard = rospy_message_converter.msg.RightFrontGuardRails()
      if self.left_barr is None:
        self.left_barr = rospy_message_converter.msg.LeftBackBarriers()
      if self.right_barr is None:
        self.right_barr = rospy_message_converter.msg.RightBackBarriers()
    else:
      self.left_guard = rospy_message_converter.msg.LeftFrontGuardRails()
      self.right_guard = rospy_message_converter.msg.RightFrontGuardRails()
      self.left_barr = rospy_message_converter.msg.LeftBackBarriers()
      self.right_barr = rospy_message_converter.msg.RightBackBarriers()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fI6fI6fI6fI2f().pack(_x.left_guard.left_front_c0, _x.left_guard.left_front_c1, _x.left_guard.left_front_heading, _x.left_guard.left_front_offset, _x.left_guard.barrier_conf, _x.left_guard.left_front_start_distance, _x.left_guard.left_front_end_distance, _x.right_guard.right_front_c0, _x.right_guard.right_front_c1, _x.right_guard.right_front_heading, _x.right_guard.right_front_offset, _x.right_guard.barrier_conf, _x.right_guard.right_front_start_distance, _x.right_guard.right_front_end_distance, _x.left_barr.left_back_c0, _x.left_barr.left_back_c1, _x.left_barr.left_back_c2, _x.left_barr.left_back_c3, _x.left_barr.barrier_conf, _x.left_barr.left_back_start_distance, _x.left_barr.left_back_end_distance, _x.right_barr.right_back_c0, _x.right_barr.right_back_c1, _x.right_barr.right_back_c2, _x.right_barr.right_back_c3, _x.right_barr.barrier_conf, _x.right_barr.right_back_start_distance, _x.right_barr.right_back_end_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_guard is None:
        self.left_guard = rospy_message_converter.msg.LeftFrontGuardRails()
      if self.right_guard is None:
        self.right_guard = rospy_message_converter.msg.RightFrontGuardRails()
      if self.left_barr is None:
        self.left_barr = rospy_message_converter.msg.LeftBackBarriers()
      if self.right_barr is None:
        self.right_barr = rospy_message_converter.msg.RightBackBarriers()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.left_guard.left_front_c0, _x.left_guard.left_front_c1, _x.left_guard.left_front_heading, _x.left_guard.left_front_offset, _x.left_guard.barrier_conf, _x.left_guard.left_front_start_distance, _x.left_guard.left_front_end_distance, _x.right_guard.right_front_c0, _x.right_guard.right_front_c1, _x.right_guard.right_front_heading, _x.right_guard.right_front_offset, _x.right_guard.barrier_conf, _x.right_guard.right_front_start_distance, _x.right_guard.right_front_end_distance, _x.left_barr.left_back_c0, _x.left_barr.left_back_c1, _x.left_barr.left_back_c2, _x.left_barr.left_back_c3, _x.left_barr.barrier_conf, _x.left_barr.left_back_start_distance, _x.left_barr.left_back_end_distance, _x.right_barr.right_back_c0, _x.right_barr.right_back_c1, _x.right_barr.right_back_c2, _x.right_barr.right_back_c3, _x.right_barr.barrier_conf, _x.right_barr.right_back_start_distance, _x.right_barr.right_back_end_distance,) = _get_struct_4fI6fI6fI6fI2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fI6fI6fI6fI2f().pack(_x.left_guard.left_front_c0, _x.left_guard.left_front_c1, _x.left_guard.left_front_heading, _x.left_guard.left_front_offset, _x.left_guard.barrier_conf, _x.left_guard.left_front_start_distance, _x.left_guard.left_front_end_distance, _x.right_guard.right_front_c0, _x.right_guard.right_front_c1, _x.right_guard.right_front_heading, _x.right_guard.right_front_offset, _x.right_guard.barrier_conf, _x.right_guard.right_front_start_distance, _x.right_guard.right_front_end_distance, _x.left_barr.left_back_c0, _x.left_barr.left_back_c1, _x.left_barr.left_back_c2, _x.left_barr.left_back_c3, _x.left_barr.barrier_conf, _x.left_barr.left_back_start_distance, _x.left_barr.left_back_end_distance, _x.right_barr.right_back_c0, _x.right_barr.right_back_c1, _x.right_barr.right_back_c2, _x.right_barr.right_back_c3, _x.right_barr.barrier_conf, _x.right_barr.right_back_start_distance, _x.right_barr.right_back_end_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_guard is None:
        self.left_guard = rospy_message_converter.msg.LeftFrontGuardRails()
      if self.right_guard is None:
        self.right_guard = rospy_message_converter.msg.RightFrontGuardRails()
      if self.left_barr is None:
        self.left_barr = rospy_message_converter.msg.LeftBackBarriers()
      if self.right_barr is None:
        self.right_barr = rospy_message_converter.msg.RightBackBarriers()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.left_guard.left_front_c0, _x.left_guard.left_front_c1, _x.left_guard.left_front_heading, _x.left_guard.left_front_offset, _x.left_guard.barrier_conf, _x.left_guard.left_front_start_distance, _x.left_guard.left_front_end_distance, _x.right_guard.right_front_c0, _x.right_guard.right_front_c1, _x.right_guard.right_front_heading, _x.right_guard.right_front_offset, _x.right_guard.barrier_conf, _x.right_guard.right_front_start_distance, _x.right_guard.right_front_end_distance, _x.left_barr.left_back_c0, _x.left_barr.left_back_c1, _x.left_barr.left_back_c2, _x.left_barr.left_back_c3, _x.left_barr.barrier_conf, _x.left_barr.left_back_start_distance, _x.left_barr.left_back_end_distance, _x.right_barr.right_back_c0, _x.right_barr.right_back_c1, _x.right_barr.right_back_c2, _x.right_barr.right_back_c3, _x.right_barr.barrier_conf, _x.right_barr.right_back_start_distance, _x.right_barr.right_back_end_distance,) = _get_struct_4fI6fI6fI6fI2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fI6fI6fI6fI2f = None
def _get_struct_4fI6fI6fI6fI2f():
    global _struct_4fI6fI6fI6fI2f
    if _struct_4fI6fI6fI6fI2f is None:
        _struct_4fI6fI6fI6fI2f = struct.Struct("<4fI6fI6fI6fI2f")
    return _struct_4fI6fI6fI6fI2f

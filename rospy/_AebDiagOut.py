# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AebDiagOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AebDiagOut(genpy.Message):
  _md5sum = "6b925b4de4f629079e4d6edf634bcf76"
  _type = "rospy_message_converter/AebDiagOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 FCTsTopicState
uint32 AebTopicState
uint32 FcwTopicState
uint32 TopicLoss
uint32 TopicNoInit
uint32 AebFaultSt
uint32 FcwFaultSt
uint32 AebFimIndex
uint32 FcwFimIndex
uint32 AebRearFaultSt
uint32 AebRearFimIndex
uint32[] AebFault
uint32[] FcwFault
uint32[] AebRearFault
uint32[] FcwRearFault
uint32 FWfailsafe
uint32 FNfailsafe
uint32 Lidarfailsafe
uint32 Rearfailsafe
"""
  __slots__ = ['FCTsTopicState','AebTopicState','FcwTopicState','TopicLoss','TopicNoInit','AebFaultSt','FcwFaultSt','AebFimIndex','FcwFimIndex','AebRearFaultSt','AebRearFimIndex','AebFault','FcwFault','AebRearFault','FcwRearFault','FWfailsafe','FNfailsafe','Lidarfailsafe','Rearfailsafe']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32[]','uint32[]','uint32[]','uint32[]','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FCTsTopicState,AebTopicState,FcwTopicState,TopicLoss,TopicNoInit,AebFaultSt,FcwFaultSt,AebFimIndex,FcwFimIndex,AebRearFaultSt,AebRearFimIndex,AebFault,FcwFault,AebRearFault,FcwRearFault,FWfailsafe,FNfailsafe,Lidarfailsafe,Rearfailsafe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AebDiagOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FCTsTopicState is None:
        self.FCTsTopicState = 0
      if self.AebTopicState is None:
        self.AebTopicState = 0
      if self.FcwTopicState is None:
        self.FcwTopicState = 0
      if self.TopicLoss is None:
        self.TopicLoss = 0
      if self.TopicNoInit is None:
        self.TopicNoInit = 0
      if self.AebFaultSt is None:
        self.AebFaultSt = 0
      if self.FcwFaultSt is None:
        self.FcwFaultSt = 0
      if self.AebFimIndex is None:
        self.AebFimIndex = 0
      if self.FcwFimIndex is None:
        self.FcwFimIndex = 0
      if self.AebRearFaultSt is None:
        self.AebRearFaultSt = 0
      if self.AebRearFimIndex is None:
        self.AebRearFimIndex = 0
      if self.AebFault is None:
        self.AebFault = []
      if self.FcwFault is None:
        self.FcwFault = []
      if self.AebRearFault is None:
        self.AebRearFault = []
      if self.FcwRearFault is None:
        self.FcwRearFault = []
      if self.FWfailsafe is None:
        self.FWfailsafe = 0
      if self.FNfailsafe is None:
        self.FNfailsafe = 0
      if self.Lidarfailsafe is None:
        self.Lidarfailsafe = 0
      if self.Rearfailsafe is None:
        self.Rearfailsafe = 0
    else:
      self.FCTsTopicState = 0
      self.AebTopicState = 0
      self.FcwTopicState = 0
      self.TopicLoss = 0
      self.TopicNoInit = 0
      self.AebFaultSt = 0
      self.FcwFaultSt = 0
      self.AebFimIndex = 0
      self.FcwFimIndex = 0
      self.AebRearFaultSt = 0
      self.AebRearFimIndex = 0
      self.AebFault = []
      self.FcwFault = []
      self.AebRearFault = []
      self.FcwRearFault = []
      self.FWfailsafe = 0
      self.FNfailsafe = 0
      self.Lidarfailsafe = 0
      self.Rearfailsafe = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11I().pack(_x.FCTsTopicState, _x.AebTopicState, _x.FcwTopicState, _x.TopicLoss, _x.TopicNoInit, _x.AebFaultSt, _x.FcwFaultSt, _x.AebFimIndex, _x.FcwFimIndex, _x.AebRearFaultSt, _x.AebRearFimIndex))
      length = len(self.AebFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.AebFault))
      length = len(self.FcwFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.FcwFault))
      length = len(self.AebRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.AebRearFault))
      length = len(self.FcwRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.FcwRearFault))
      _x = self
      buff.write(_get_struct_4I().pack(_x.FWfailsafe, _x.FNfailsafe, _x.Lidarfailsafe, _x.Rearfailsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.FCTsTopicState, _x.AebTopicState, _x.FcwTopicState, _x.TopicLoss, _x.TopicNoInit, _x.AebFaultSt, _x.FcwFaultSt, _x.AebFimIndex, _x.FcwFimIndex, _x.AebRearFaultSt, _x.AebRearFimIndex,) = _get_struct_11I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebFault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FcwFault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebRearFault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FcwRearFault = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.FWfailsafe, _x.FNfailsafe, _x.Lidarfailsafe, _x.Rearfailsafe,) = _get_struct_4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11I().pack(_x.FCTsTopicState, _x.AebTopicState, _x.FcwTopicState, _x.TopicLoss, _x.TopicNoInit, _x.AebFaultSt, _x.FcwFaultSt, _x.AebFimIndex, _x.FcwFimIndex, _x.AebRearFaultSt, _x.AebRearFimIndex))
      length = len(self.AebFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.AebFault.tostring())
      length = len(self.FcwFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.FcwFault.tostring())
      length = len(self.AebRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.AebRearFault.tostring())
      length = len(self.FcwRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.FcwRearFault.tostring())
      _x = self
      buff.write(_get_struct_4I().pack(_x.FWfailsafe, _x.FNfailsafe, _x.Lidarfailsafe, _x.Rearfailsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.FCTsTopicState, _x.AebTopicState, _x.FcwTopicState, _x.TopicLoss, _x.TopicNoInit, _x.AebFaultSt, _x.FcwFaultSt, _x.AebFimIndex, _x.FcwFimIndex, _x.AebRearFaultSt, _x.AebRearFimIndex,) = _get_struct_11I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FcwFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebRearFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.FcwRearFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 16
      (_x.FWfailsafe, _x.FNfailsafe, _x.Lidarfailsafe, _x.Rearfailsafe,) = _get_struct_4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11I = None
def _get_struct_11I():
    global _struct_11I
    if _struct_11I is None:
        _struct_11I = struct.Struct("<11I")
    return _struct_11I
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I

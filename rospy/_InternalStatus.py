# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/InternalStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InternalStatus(genpy.Message):
  _md5sum = "fbccce7147b6bd0ebddaff461461f8ae"
  _type = "rospy_message_converter/InternalStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 aps_st_status
bool aps_flg_standstill
int32 parl_st_instruction
bool flg_uss_intervene
int32 apa_command
bool aps_flg_preguidance_to_search
bool aps_flg_inter_suspend
bool flg_lateral_feedback_enable
bool aps_flg_adjust_angle_overlay
int32 perp_instruction_status
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['aps_st_status','aps_flg_standstill','parl_st_instruction','flg_uss_intervene','apa_command','aps_flg_preguidance_to_search','aps_flg_inter_suspend','flg_lateral_feedback_enable','aps_flg_adjust_angle_overlay','perp_instruction_status','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['int32','bool','int32','bool','int32','bool','bool','bool','bool','int32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       aps_st_status,aps_flg_standstill,parl_st_instruction,flg_uss_intervene,apa_command,aps_flg_preguidance_to_search,aps_flg_inter_suspend,flg_lateral_feedback_enable,aps_flg_adjust_angle_overlay,perp_instruction_status,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InternalStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.aps_st_status is None:
        self.aps_st_status = 0
      if self.aps_flg_standstill is None:
        self.aps_flg_standstill = False
      if self.parl_st_instruction is None:
        self.parl_st_instruction = 0
      if self.flg_uss_intervene is None:
        self.flg_uss_intervene = False
      if self.apa_command is None:
        self.apa_command = 0
      if self.aps_flg_preguidance_to_search is None:
        self.aps_flg_preguidance_to_search = False
      if self.aps_flg_inter_suspend is None:
        self.aps_flg_inter_suspend = False
      if self.flg_lateral_feedback_enable is None:
        self.flg_lateral_feedback_enable = False
      if self.aps_flg_adjust_angle_overlay is None:
        self.aps_flg_adjust_angle_overlay = False
      if self.perp_instruction_status is None:
        self.perp_instruction_status = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.aps_st_status = 0
      self.aps_flg_standstill = False
      self.parl_st_instruction = 0
      self.flg_uss_intervene = False
      self.apa_command = 0
      self.aps_flg_preguidance_to_search = False
      self.aps_flg_inter_suspend = False
      self.flg_lateral_feedback_enable = False
      self.aps_flg_adjust_angle_overlay = False
      self.perp_instruction_status = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iBiBi4BiQ().pack(_x.aps_st_status, _x.aps_flg_standstill, _x.parl_st_instruction, _x.flg_uss_intervene, _x.apa_command, _x.aps_flg_preguidance_to_search, _x.aps_flg_inter_suspend, _x.flg_lateral_feedback_enable, _x.aps_flg_adjust_angle_overlay, _x.perp_instruction_status, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.aps_st_status, _x.aps_flg_standstill, _x.parl_st_instruction, _x.flg_uss_intervene, _x.apa_command, _x.aps_flg_preguidance_to_search, _x.aps_flg_inter_suspend, _x.flg_lateral_feedback_enable, _x.aps_flg_adjust_angle_overlay, _x.perp_instruction_status, _x.publish_ptp_ts,) = _get_struct_iBiBi4BiQ().unpack(str[start:end])
      self.aps_flg_standstill = bool(self.aps_flg_standstill)
      self.flg_uss_intervene = bool(self.flg_uss_intervene)
      self.aps_flg_preguidance_to_search = bool(self.aps_flg_preguidance_to_search)
      self.aps_flg_inter_suspend = bool(self.aps_flg_inter_suspend)
      self.flg_lateral_feedback_enable = bool(self.flg_lateral_feedback_enable)
      self.aps_flg_adjust_angle_overlay = bool(self.aps_flg_adjust_angle_overlay)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iBiBi4BiQ().pack(_x.aps_st_status, _x.aps_flg_standstill, _x.parl_st_instruction, _x.flg_uss_intervene, _x.apa_command, _x.aps_flg_preguidance_to_search, _x.aps_flg_inter_suspend, _x.flg_lateral_feedback_enable, _x.aps_flg_adjust_angle_overlay, _x.perp_instruction_status, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.aps_st_status, _x.aps_flg_standstill, _x.parl_st_instruction, _x.flg_uss_intervene, _x.apa_command, _x.aps_flg_preguidance_to_search, _x.aps_flg_inter_suspend, _x.flg_lateral_feedback_enable, _x.aps_flg_adjust_angle_overlay, _x.perp_instruction_status, _x.publish_ptp_ts,) = _get_struct_iBiBi4BiQ().unpack(str[start:end])
      self.aps_flg_standstill = bool(self.aps_flg_standstill)
      self.flg_uss_intervene = bool(self.flg_uss_intervene)
      self.aps_flg_preguidance_to_search = bool(self.aps_flg_preguidance_to_search)
      self.aps_flg_inter_suspend = bool(self.aps_flg_inter_suspend)
      self.flg_lateral_feedback_enable = bool(self.flg_lateral_feedback_enable)
      self.aps_flg_adjust_angle_overlay = bool(self.aps_flg_adjust_angle_overlay)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_iBiBi4BiQ = None
def _get_struct_iBiBi4BiQ():
    global _struct_iBiBi4BiQ
    if _struct_iBiBi4BiQ is None:
        _struct_iBiBi4BiQ = struct.Struct("<iBiBi4BiQ")
    return _struct_iBiBi4BiQ

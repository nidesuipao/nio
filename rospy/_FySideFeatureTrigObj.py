# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FySideFeatureTrigObj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FySideFeatureTrigObj(genpy.Message):
  _md5sum = "81eef02f9d3f0c6698c82436cbefd4e8"
  _type = "rospy_message_converter/FySideFeatureTrigObj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
float32 longDist
float32 latDist
float32 heading
float32 length
float32 width
float32 ttc
float32 ta
float32 longVel
float32 latVel
uint32 type
uint32 motionStatus
uint32[] reserved
"""
  __slots__ = ['id','longDist','latDist','heading','length','width','ttc','ta','longVel','latVel','type','motionStatus','reserved']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','uint32','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,longDist,latDist,heading,length,width,ttc,ta,longVel,latVel,type,motionStatus,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FySideFeatureTrigObj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.longDist is None:
        self.longDist = 0.
      if self.latDist is None:
        self.latDist = 0.
      if self.heading is None:
        self.heading = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.ttc is None:
        self.ttc = 0.
      if self.ta is None:
        self.ta = 0.
      if self.longVel is None:
        self.longVel = 0.
      if self.latVel is None:
        self.latVel = 0.
      if self.type is None:
        self.type = 0
      if self.motionStatus is None:
        self.motionStatus = 0
      if self.reserved is None:
        self.reserved = []
    else:
      self.id = 0
      self.longDist = 0.
      self.latDist = 0.
      self.heading = 0.
      self.length = 0.
      self.width = 0.
      self.ttc = 0.
      self.ta = 0.
      self.longVel = 0.
      self.latVel = 0.
      self.type = 0
      self.motionStatus = 0
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.id, _x.longDist, _x.latDist, _x.heading, _x.length, _x.width, _x.ttc, _x.ta, _x.longVel, _x.latVel, _x.type, _x.motionStatus))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.id, _x.longDist, _x.latDist, _x.heading, _x.length, _x.width, _x.ttc, _x.ta, _x.longVel, _x.latVel, _x.type, _x.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.id, _x.longDist, _x.latDist, _x.heading, _x.length, _x.width, _x.ttc, _x.ta, _x.longVel, _x.latVel, _x.type, _x.motionStatus))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.id, _x.longDist, _x.latDist, _x.heading, _x.length, _x.width, _x.ttc, _x.ta, _x.longVel, _x.latVel, _x.type, _x.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I9f2I = None
def _get_struct_I9f2I():
    global _struct_I9f2I
    if _struct_I9f2I is None:
        _struct_I9f2I = struct.Struct("<I9f2I")
    return _struct_I9f2I

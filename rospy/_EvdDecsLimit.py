# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EvdDecsLimit.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EvdDecsLimit(genpy.Message):
  _md5sum = "8b0526584a82fdd34f69c98b7414ffde"
  _type = "rospy_message_converter/EvdDecsLimit"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool spd_valid
uint32 spd
uint32 distance_valid
float32 distance
uint32 deadline_valid
float32 deadline
EvdGLimit curr_limit
EvdGLimit[] tar_limit

================================================================================
MSG: rospy_message_converter/EvdGLimit
uint32 spd
float32 dist
uint32 valid
int32 source
uint32 regulation
"""
  __slots__ = ['spd_valid','spd','distance_valid','distance','deadline_valid','deadline','curr_limit','tar_limit']
  _slot_types = ['bool','uint32','uint32','float32','uint32','float32','rospy_message_converter/EvdGLimit','rospy_message_converter/EvdGLimit[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       spd_valid,spd,distance_valid,distance,deadline_valid,deadline,curr_limit,tar_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvdDecsLimit, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.spd_valid is None:
        self.spd_valid = False
      if self.spd is None:
        self.spd = 0
      if self.distance_valid is None:
        self.distance_valid = 0
      if self.distance is None:
        self.distance = 0.
      if self.deadline_valid is None:
        self.deadline_valid = 0
      if self.deadline is None:
        self.deadline = 0.
      if self.curr_limit is None:
        self.curr_limit = rospy_message_converter.msg.EvdGLimit()
      if self.tar_limit is None:
        self.tar_limit = []
    else:
      self.spd_valid = False
      self.spd = 0
      self.distance_valid = 0
      self.distance = 0.
      self.deadline_valid = 0
      self.deadline = 0.
      self.curr_limit = rospy_message_converter.msg.EvdGLimit()
      self.tar_limit = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2IfIfIfIiI().pack(_x.spd_valid, _x.spd, _x.distance_valid, _x.distance, _x.deadline_valid, _x.deadline, _x.curr_limit.spd, _x.curr_limit.dist, _x.curr_limit.valid, _x.curr_limit.source, _x.curr_limit.regulation))
      length = len(self.tar_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.tar_limit:
        _x = val1
        buff.write(_get_struct_IfIiI().pack(_x.spd, _x.dist, _x.valid, _x.source, _x.regulation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.curr_limit is None:
        self.curr_limit = rospy_message_converter.msg.EvdGLimit()
      if self.tar_limit is None:
        self.tar_limit = None
      end = 0
      _x = self
      start = end
      end += 41
      (_x.spd_valid, _x.spd, _x.distance_valid, _x.distance, _x.deadline_valid, _x.deadline, _x.curr_limit.spd, _x.curr_limit.dist, _x.curr_limit.valid, _x.curr_limit.source, _x.curr_limit.regulation,) = _get_struct_B2IfIfIfIiI().unpack(str[start:end])
      self.spd_valid = bool(self.spd_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tar_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.EvdGLimit()
        _x = val1
        start = end
        end += 20
        (_x.spd, _x.dist, _x.valid, _x.source, _x.regulation,) = _get_struct_IfIiI().unpack(str[start:end])
        self.tar_limit.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2IfIfIfIiI().pack(_x.spd_valid, _x.spd, _x.distance_valid, _x.distance, _x.deadline_valid, _x.deadline, _x.curr_limit.spd, _x.curr_limit.dist, _x.curr_limit.valid, _x.curr_limit.source, _x.curr_limit.regulation))
      length = len(self.tar_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.tar_limit:
        _x = val1
        buff.write(_get_struct_IfIiI().pack(_x.spd, _x.dist, _x.valid, _x.source, _x.regulation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.curr_limit is None:
        self.curr_limit = rospy_message_converter.msg.EvdGLimit()
      if self.tar_limit is None:
        self.tar_limit = None
      end = 0
      _x = self
      start = end
      end += 41
      (_x.spd_valid, _x.spd, _x.distance_valid, _x.distance, _x.deadline_valid, _x.deadline, _x.curr_limit.spd, _x.curr_limit.dist, _x.curr_limit.valid, _x.curr_limit.source, _x.curr_limit.regulation,) = _get_struct_B2IfIfIfIiI().unpack(str[start:end])
      self.spd_valid = bool(self.spd_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tar_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.EvdGLimit()
        _x = val1
        start = end
        end += 20
        (_x.spd, _x.dist, _x.valid, _x.source, _x.regulation,) = _get_struct_IfIiI().unpack(str[start:end])
        self.tar_limit.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2IfIfIfIiI = None
def _get_struct_B2IfIfIfIiI():
    global _struct_B2IfIfIfIiI
    if _struct_B2IfIfIfIiI is None:
        _struct_B2IfIfIfIiI = struct.Struct("<B2IfIfIfIiI")
    return _struct_B2IfIfIfIiI
_struct_IfIiI = None
def _get_struct_IfIiI():
    global _struct_IfIiI
    if _struct_IfIiI is None:
        _struct_IfIiI = struct.Struct("<IfIiI")
    return _struct_IfIiI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CDCFeatureFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CDCFeatureFimInfo(genpy.Message):
  _md5sum = "fa897fb52297536e65759520a9fa0430"
  _type = "rospy_message_converter/CDCFeatureFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid
bool FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid
bool FIM_ADAS_CDC_CDC_FailSts_Failure
bool FIM_ADAS_CDC_SetHMA_Invalid
bool FIM_ADAS_CDC_MaiLiSet_Invalid
bool FIM_ADAS_CDC_AEBOnOffReq_Invalid
bool FIM_ADAS_CDC_DANADTauGapStored_Invalid
bool FIM_CHS1_CDC_SWCAdjModReq_Invalid
bool FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid
bool FIM_CHS1_CDC_SAPAPrkgModReq_Invalid
bool FIM_ADAS_CDC_SetALC_Invalid
bool FIM_ADAS_BGW_VehPrepReq_Invalid
"""
  __slots__ = ['FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid','FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid','FIM_ADAS_CDC_CDC_FailSts_Failure','FIM_ADAS_CDC_SetHMA_Invalid','FIM_ADAS_CDC_MaiLiSet_Invalid','FIM_ADAS_CDC_AEBOnOffReq_Invalid','FIM_ADAS_CDC_DANADTauGapStored_Invalid','FIM_CHS1_CDC_SWCAdjModReq_Invalid','FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid','FIM_CHS1_CDC_SAPAPrkgModReq_Invalid','FIM_ADAS_CDC_SetALC_Invalid','FIM_ADAS_BGW_VehPrepReq_Invalid']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid,FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid,FIM_ADAS_CDC_CDC_FailSts_Failure,FIM_ADAS_CDC_SetHMA_Invalid,FIM_ADAS_CDC_MaiLiSet_Invalid,FIM_ADAS_CDC_AEBOnOffReq_Invalid,FIM_ADAS_CDC_DANADTauGapStored_Invalid,FIM_CHS1_CDC_SWCAdjModReq_Invalid,FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid,FIM_CHS1_CDC_SAPAPrkgModReq_Invalid,FIM_ADAS_CDC_SetALC_Invalid,FIM_ADAS_BGW_VehPrepReq_Invalid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CDCFeatureFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid is None:
        self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid = False
      if self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid is None:
        self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid = False
      if self.FIM_ADAS_CDC_CDC_FailSts_Failure is None:
        self.FIM_ADAS_CDC_CDC_FailSts_Failure = False
      if self.FIM_ADAS_CDC_SetHMA_Invalid is None:
        self.FIM_ADAS_CDC_SetHMA_Invalid = False
      if self.FIM_ADAS_CDC_MaiLiSet_Invalid is None:
        self.FIM_ADAS_CDC_MaiLiSet_Invalid = False
      if self.FIM_ADAS_CDC_AEBOnOffReq_Invalid is None:
        self.FIM_ADAS_CDC_AEBOnOffReq_Invalid = False
      if self.FIM_ADAS_CDC_DANADTauGapStored_Invalid is None:
        self.FIM_ADAS_CDC_DANADTauGapStored_Invalid = False
      if self.FIM_CHS1_CDC_SWCAdjModReq_Invalid is None:
        self.FIM_CHS1_CDC_SWCAdjModReq_Invalid = False
      if self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid is None:
        self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid = False
      if self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid is None:
        self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid = False
      if self.FIM_ADAS_CDC_SetALC_Invalid is None:
        self.FIM_ADAS_CDC_SetALC_Invalid = False
      if self.FIM_ADAS_BGW_VehPrepReq_Invalid is None:
        self.FIM_ADAS_BGW_VehPrepReq_Invalid = False
    else:
      self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid = False
      self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid = False
      self.FIM_ADAS_CDC_CDC_FailSts_Failure = False
      self.FIM_ADAS_CDC_SetHMA_Invalid = False
      self.FIM_ADAS_CDC_MaiLiSet_Invalid = False
      self.FIM_ADAS_CDC_AEBOnOffReq_Invalid = False
      self.FIM_ADAS_CDC_DANADTauGapStored_Invalid = False
      self.FIM_CHS1_CDC_SWCAdjModReq_Invalid = False
      self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid = False
      self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid = False
      self.FIM_ADAS_CDC_SetALC_Invalid = False
      self.FIM_ADAS_BGW_VehPrepReq_Invalid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12B().pack(_x.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid, _x.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid, _x.FIM_ADAS_CDC_CDC_FailSts_Failure, _x.FIM_ADAS_CDC_SetHMA_Invalid, _x.FIM_ADAS_CDC_MaiLiSet_Invalid, _x.FIM_ADAS_CDC_AEBOnOffReq_Invalid, _x.FIM_ADAS_CDC_DANADTauGapStored_Invalid, _x.FIM_CHS1_CDC_SWCAdjModReq_Invalid, _x.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid, _x.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid, _x.FIM_ADAS_CDC_SetALC_Invalid, _x.FIM_ADAS_BGW_VehPrepReq_Invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid, _x.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid, _x.FIM_ADAS_CDC_CDC_FailSts_Failure, _x.FIM_ADAS_CDC_SetHMA_Invalid, _x.FIM_ADAS_CDC_MaiLiSet_Invalid, _x.FIM_ADAS_CDC_AEBOnOffReq_Invalid, _x.FIM_ADAS_CDC_DANADTauGapStored_Invalid, _x.FIM_CHS1_CDC_SWCAdjModReq_Invalid, _x.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid, _x.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid, _x.FIM_ADAS_CDC_SetALC_Invalid, _x.FIM_ADAS_BGW_VehPrepReq_Invalid,) = _get_struct_12B().unpack(str[start:end])
      self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid = bool(self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid)
      self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid = bool(self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid)
      self.FIM_ADAS_CDC_CDC_FailSts_Failure = bool(self.FIM_ADAS_CDC_CDC_FailSts_Failure)
      self.FIM_ADAS_CDC_SetHMA_Invalid = bool(self.FIM_ADAS_CDC_SetHMA_Invalid)
      self.FIM_ADAS_CDC_MaiLiSet_Invalid = bool(self.FIM_ADAS_CDC_MaiLiSet_Invalid)
      self.FIM_ADAS_CDC_AEBOnOffReq_Invalid = bool(self.FIM_ADAS_CDC_AEBOnOffReq_Invalid)
      self.FIM_ADAS_CDC_DANADTauGapStored_Invalid = bool(self.FIM_ADAS_CDC_DANADTauGapStored_Invalid)
      self.FIM_CHS1_CDC_SWCAdjModReq_Invalid = bool(self.FIM_CHS1_CDC_SWCAdjModReq_Invalid)
      self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid = bool(self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid)
      self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid = bool(self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid)
      self.FIM_ADAS_CDC_SetALC_Invalid = bool(self.FIM_ADAS_CDC_SetALC_Invalid)
      self.FIM_ADAS_BGW_VehPrepReq_Invalid = bool(self.FIM_ADAS_BGW_VehPrepReq_Invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12B().pack(_x.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid, _x.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid, _x.FIM_ADAS_CDC_CDC_FailSts_Failure, _x.FIM_ADAS_CDC_SetHMA_Invalid, _x.FIM_ADAS_CDC_MaiLiSet_Invalid, _x.FIM_ADAS_CDC_AEBOnOffReq_Invalid, _x.FIM_ADAS_CDC_DANADTauGapStored_Invalid, _x.FIM_CHS1_CDC_SWCAdjModReq_Invalid, _x.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid, _x.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid, _x.FIM_ADAS_CDC_SetALC_Invalid, _x.FIM_ADAS_BGW_VehPrepReq_Invalid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid, _x.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid, _x.FIM_ADAS_CDC_CDC_FailSts_Failure, _x.FIM_ADAS_CDC_SetHMA_Invalid, _x.FIM_ADAS_CDC_MaiLiSet_Invalid, _x.FIM_ADAS_CDC_AEBOnOffReq_Invalid, _x.FIM_ADAS_CDC_DANADTauGapStored_Invalid, _x.FIM_CHS1_CDC_SWCAdjModReq_Invalid, _x.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid, _x.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid, _x.FIM_ADAS_CDC_SetALC_Invalid, _x.FIM_ADAS_BGW_VehPrepReq_Invalid,) = _get_struct_12B().unpack(str[start:end])
      self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid = bool(self.FIM_ADAS_CDC_SetLaneAssiAidTyp_Invalid)
      self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid = bool(self.FIM_ADAS_CDC_SetLaneAssiSnvty_Invalid)
      self.FIM_ADAS_CDC_CDC_FailSts_Failure = bool(self.FIM_ADAS_CDC_CDC_FailSts_Failure)
      self.FIM_ADAS_CDC_SetHMA_Invalid = bool(self.FIM_ADAS_CDC_SetHMA_Invalid)
      self.FIM_ADAS_CDC_MaiLiSet_Invalid = bool(self.FIM_ADAS_CDC_MaiLiSet_Invalid)
      self.FIM_ADAS_CDC_AEBOnOffReq_Invalid = bool(self.FIM_ADAS_CDC_AEBOnOffReq_Invalid)
      self.FIM_ADAS_CDC_DANADTauGapStored_Invalid = bool(self.FIM_ADAS_CDC_DANADTauGapStored_Invalid)
      self.FIM_CHS1_CDC_SWCAdjModReq_Invalid = bool(self.FIM_CHS1_CDC_SWCAdjModReq_Invalid)
      self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid = bool(self.FIM_ADAS_CDC_LaneAssistTactileOnOff_Invalid)
      self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid = bool(self.FIM_CHS1_CDC_SAPAPrkgModReq_Invalid)
      self.FIM_ADAS_CDC_SetALC_Invalid = bool(self.FIM_ADAS_CDC_SetALC_Invalid)
      self.FIM_ADAS_BGW_VehPrepReq_Invalid = bool(self.FIM_ADAS_BGW_VehPrepReq_Invalid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12B = None
def _get_struct_12B():
    global _struct_12B
    if _struct_12B is None:
        _struct_12B = struct.Struct("<12B")
    return _struct_12B

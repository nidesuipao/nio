# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/MotionStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotionStatus(genpy.Message):
  _md5sum = "f0d4815d86f9c716739571f0c7321611"
  _type = "rospy_message_converter/MotionStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool f_stationary
bool f_moving
bool f_moveable
bool f_oncoming
bool f_receding
bool f_crossing
"""
  __slots__ = ['f_stationary','f_moving','f_moveable','f_oncoming','f_receding','f_crossing']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       f_stationary,f_moving,f_moveable,f_oncoming,f_receding,f_crossing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.f_stationary is None:
        self.f_stationary = False
      if self.f_moving is None:
        self.f_moving = False
      if self.f_moveable is None:
        self.f_moveable = False
      if self.f_oncoming is None:
        self.f_oncoming = False
      if self.f_receding is None:
        self.f_receding = False
      if self.f_crossing is None:
        self.f_crossing = False
    else:
      self.f_stationary = False
      self.f_moving = False
      self.f_moveable = False
      self.f_oncoming = False
      self.f_receding = False
      self.f_crossing = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing,) = _get_struct_6B().unpack(str[start:end])
      self.f_stationary = bool(self.f_stationary)
      self.f_moving = bool(self.f_moving)
      self.f_moveable = bool(self.f_moveable)
      self.f_oncoming = bool(self.f_oncoming)
      self.f_receding = bool(self.f_receding)
      self.f_crossing = bool(self.f_crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.f_stationary, _x.f_moving, _x.f_moveable, _x.f_oncoming, _x.f_receding, _x.f_crossing,) = _get_struct_6B().unpack(str[start:end])
      self.f_stationary = bool(self.f_stationary)
      self.f_moving = bool(self.f_moving)
      self.f_moveable = bool(self.f_moveable)
      self.f_oncoming = bool(self.f_oncoming)
      self.f_receding = bool(self.f_receding)
      self.f_crossing = bool(self.f_crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EvdGLimit.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EvdGLimit(genpy.Message):
  _md5sum = "2e4e3eeae6598d29014a3543e39e38ea"
  _type = "rospy_message_converter/EvdGLimit"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 spd
float32 dist
uint32 valid
int32 source
uint32 regulation
"""
  __slots__ = ['spd','dist','valid','source','regulation']
  _slot_types = ['uint32','float32','uint32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       spd,dist,valid,source,regulation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvdGLimit, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.spd is None:
        self.spd = 0
      if self.dist is None:
        self.dist = 0.
      if self.valid is None:
        self.valid = 0
      if self.source is None:
        self.source = 0
      if self.regulation is None:
        self.regulation = 0
    else:
      self.spd = 0
      self.dist = 0.
      self.valid = 0
      self.source = 0
      self.regulation = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IfIiI().pack(_x.spd, _x.dist, _x.valid, _x.source, _x.regulation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.spd, _x.dist, _x.valid, _x.source, _x.regulation,) = _get_struct_IfIiI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IfIiI().pack(_x.spd, _x.dist, _x.valid, _x.source, _x.regulation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.spd, _x.dist, _x.valid, _x.source, _x.regulation,) = _get_struct_IfIiI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IfIiI = None
def _get_struct_IfIiI():
    global _struct_IfIiI
    if _struct_IfIiI is None:
        _struct_IfIiI = struct.Struct("<IfIiI")
    return _struct_IfIiI

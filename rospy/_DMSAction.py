# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DMSAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DMSAction(genpy.Message):
  _md5sum = "0b19e12c27795e546e40df1507a0d6d7"
  _type = "rospy_message_converter/DMSAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """DrowsinessConfig drowsiness_config
DistractionConfig distraction_config
bool DMSDistractionSwitch_cloud
bool DMSDrowsinessSwitch_cloud_light
bool DMSDrowsinessSwitch_cloud_medium
bool DMSDrowsinessSwitch_cloud_heavy

================================================================================
MSG: rospy_message_converter/DrowsinessConfig
EyeConfig eye_config
MouthConfig mouth_config
Customized customized

================================================================================
MSG: rospy_message_converter/EyeConfig
float64 perclos_light
float64 perclos_medium
float64 perclos_window_time

================================================================================
MSG: rospy_message_converter/MouthConfig
int32 yawn_light
int32 yawn_medium
float64 yawn_windown_time

================================================================================
MSG: rospy_message_converter/Customized
float64 eye_close_thr
float64 eye_open_thr

================================================================================
MSG: rospy_message_converter/DistractionConfig
DistractionScoreThr distraction_score_thr
DistractionRectangle distraction_rectangle
float64 distraction_fast_fade_time

================================================================================
MSG: rospy_message_converter/DistractionScoreThr
float64 distraction_light_thr
float64 distraction_medium_thr
float64 distraction_heavy_thr

================================================================================
MSG: rospy_message_converter/DistractionRectangle
Gaze3DPoint gaze_3D_point
HeadPose head_pose

================================================================================
MSG: rospy_message_converter/Gaze3DPoint
Zones X
Zones Y

================================================================================
MSG: rospy_message_converter/Zones
float64 min
float64 max

================================================================================
MSG: rospy_message_converter/HeadPose
Zones yaw
Zones pitch
Zones roll
"""
  __slots__ = ['drowsiness_config','distraction_config','DMSDistractionSwitch_cloud','DMSDrowsinessSwitch_cloud_light','DMSDrowsinessSwitch_cloud_medium','DMSDrowsinessSwitch_cloud_heavy']
  _slot_types = ['rospy_message_converter/DrowsinessConfig','rospy_message_converter/DistractionConfig','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drowsiness_config,distraction_config,DMSDistractionSwitch_cloud,DMSDrowsinessSwitch_cloud_light,DMSDrowsinessSwitch_cloud_medium,DMSDrowsinessSwitch_cloud_heavy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DMSAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drowsiness_config is None:
        self.drowsiness_config = rospy_message_converter.msg.DrowsinessConfig()
      if self.distraction_config is None:
        self.distraction_config = rospy_message_converter.msg.DistractionConfig()
      if self.DMSDistractionSwitch_cloud is None:
        self.DMSDistractionSwitch_cloud = False
      if self.DMSDrowsinessSwitch_cloud_light is None:
        self.DMSDrowsinessSwitch_cloud_light = False
      if self.DMSDrowsinessSwitch_cloud_medium is None:
        self.DMSDrowsinessSwitch_cloud_medium = False
      if self.DMSDrowsinessSwitch_cloud_heavy is None:
        self.DMSDrowsinessSwitch_cloud_heavy = False
    else:
      self.drowsiness_config = rospy_message_converter.msg.DrowsinessConfig()
      self.distraction_config = rospy_message_converter.msg.DistractionConfig()
      self.DMSDistractionSwitch_cloud = False
      self.DMSDrowsinessSwitch_cloud_light = False
      self.DMSDrowsinessSwitch_cloud_medium = False
      self.DMSDrowsinessSwitch_cloud_heavy = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2i17d4B().pack(_x.drowsiness_config.eye_config.perclos_light, _x.drowsiness_config.eye_config.perclos_medium, _x.drowsiness_config.eye_config.perclos_window_time, _x.drowsiness_config.mouth_config.yawn_light, _x.drowsiness_config.mouth_config.yawn_medium, _x.drowsiness_config.mouth_config.yawn_windown_time, _x.drowsiness_config.customized.eye_close_thr, _x.drowsiness_config.customized.eye_open_thr, _x.distraction_config.distraction_score_thr.distraction_light_thr, _x.distraction_config.distraction_score_thr.distraction_medium_thr, _x.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.distraction_config.distraction_rectangle.head_pose.roll.min, _x.distraction_config.distraction_rectangle.head_pose.roll.max, _x.distraction_config.distraction_fast_fade_time, _x.DMSDistractionSwitch_cloud, _x.DMSDrowsinessSwitch_cloud_light, _x.DMSDrowsinessSwitch_cloud_medium, _x.DMSDrowsinessSwitch_cloud_heavy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drowsiness_config is None:
        self.drowsiness_config = rospy_message_converter.msg.DrowsinessConfig()
      if self.distraction_config is None:
        self.distraction_config = rospy_message_converter.msg.DistractionConfig()
      end = 0
      _x = self
      start = end
      end += 172
      (_x.drowsiness_config.eye_config.perclos_light, _x.drowsiness_config.eye_config.perclos_medium, _x.drowsiness_config.eye_config.perclos_window_time, _x.drowsiness_config.mouth_config.yawn_light, _x.drowsiness_config.mouth_config.yawn_medium, _x.drowsiness_config.mouth_config.yawn_windown_time, _x.drowsiness_config.customized.eye_close_thr, _x.drowsiness_config.customized.eye_open_thr, _x.distraction_config.distraction_score_thr.distraction_light_thr, _x.distraction_config.distraction_score_thr.distraction_medium_thr, _x.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.distraction_config.distraction_rectangle.head_pose.roll.min, _x.distraction_config.distraction_rectangle.head_pose.roll.max, _x.distraction_config.distraction_fast_fade_time, _x.DMSDistractionSwitch_cloud, _x.DMSDrowsinessSwitch_cloud_light, _x.DMSDrowsinessSwitch_cloud_medium, _x.DMSDrowsinessSwitch_cloud_heavy,) = _get_struct_3d2i17d4B().unpack(str[start:end])
      self.DMSDistractionSwitch_cloud = bool(self.DMSDistractionSwitch_cloud)
      self.DMSDrowsinessSwitch_cloud_light = bool(self.DMSDrowsinessSwitch_cloud_light)
      self.DMSDrowsinessSwitch_cloud_medium = bool(self.DMSDrowsinessSwitch_cloud_medium)
      self.DMSDrowsinessSwitch_cloud_heavy = bool(self.DMSDrowsinessSwitch_cloud_heavy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2i17d4B().pack(_x.drowsiness_config.eye_config.perclos_light, _x.drowsiness_config.eye_config.perclos_medium, _x.drowsiness_config.eye_config.perclos_window_time, _x.drowsiness_config.mouth_config.yawn_light, _x.drowsiness_config.mouth_config.yawn_medium, _x.drowsiness_config.mouth_config.yawn_windown_time, _x.drowsiness_config.customized.eye_close_thr, _x.drowsiness_config.customized.eye_open_thr, _x.distraction_config.distraction_score_thr.distraction_light_thr, _x.distraction_config.distraction_score_thr.distraction_medium_thr, _x.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.distraction_config.distraction_rectangle.head_pose.roll.min, _x.distraction_config.distraction_rectangle.head_pose.roll.max, _x.distraction_config.distraction_fast_fade_time, _x.DMSDistractionSwitch_cloud, _x.DMSDrowsinessSwitch_cloud_light, _x.DMSDrowsinessSwitch_cloud_medium, _x.DMSDrowsinessSwitch_cloud_heavy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drowsiness_config is None:
        self.drowsiness_config = rospy_message_converter.msg.DrowsinessConfig()
      if self.distraction_config is None:
        self.distraction_config = rospy_message_converter.msg.DistractionConfig()
      end = 0
      _x = self
      start = end
      end += 172
      (_x.drowsiness_config.eye_config.perclos_light, _x.drowsiness_config.eye_config.perclos_medium, _x.drowsiness_config.eye_config.perclos_window_time, _x.drowsiness_config.mouth_config.yawn_light, _x.drowsiness_config.mouth_config.yawn_medium, _x.drowsiness_config.mouth_config.yawn_windown_time, _x.drowsiness_config.customized.eye_close_thr, _x.drowsiness_config.customized.eye_open_thr, _x.distraction_config.distraction_score_thr.distraction_light_thr, _x.distraction_config.distraction_score_thr.distraction_medium_thr, _x.distraction_config.distraction_score_thr.distraction_heavy_thr, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.X.max, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.min, _x.distraction_config.distraction_rectangle.gaze_3D_point.Y.max, _x.distraction_config.distraction_rectangle.head_pose.yaw.min, _x.distraction_config.distraction_rectangle.head_pose.yaw.max, _x.distraction_config.distraction_rectangle.head_pose.pitch.min, _x.distraction_config.distraction_rectangle.head_pose.pitch.max, _x.distraction_config.distraction_rectangle.head_pose.roll.min, _x.distraction_config.distraction_rectangle.head_pose.roll.max, _x.distraction_config.distraction_fast_fade_time, _x.DMSDistractionSwitch_cloud, _x.DMSDrowsinessSwitch_cloud_light, _x.DMSDrowsinessSwitch_cloud_medium, _x.DMSDrowsinessSwitch_cloud_heavy,) = _get_struct_3d2i17d4B().unpack(str[start:end])
      self.DMSDistractionSwitch_cloud = bool(self.DMSDistractionSwitch_cloud)
      self.DMSDrowsinessSwitch_cloud_light = bool(self.DMSDrowsinessSwitch_cloud_light)
      self.DMSDrowsinessSwitch_cloud_medium = bool(self.DMSDrowsinessSwitch_cloud_medium)
      self.DMSDrowsinessSwitch_cloud_heavy = bool(self.DMSDrowsinessSwitch_cloud_heavy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2i17d4B = None
def _get_struct_3d2i17d4B():
    global _struct_3d2i17d4B
    if _struct_3d2i17d4B is None:
        _struct_3d2i17d4B = struct.Struct("<3d2i17d4B")
    return _struct_3d2i17d4B

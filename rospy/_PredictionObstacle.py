# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PredictionObstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class PredictionObstacle(genpy.Message):
  _md5sum = "c7df346be75c80167e7d0aa984bf3287"
  _type = "rospy_message_converter/PredictionObstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
float64 timestamp
float32 predicted_period
PredictionTrajectory[] trajectory
ObstacleIntent intent
ObstaclePriority priority
ObstacleInteractiveTag interactive_tag
bool is_static

================================================================================
MSG: rospy_message_converter/PredictionTrajectory
PredictionPathPoint[] trajectory
float32 probability

================================================================================
MSG: rospy_message_converter/PredictionPathPoint
float32 x
float32 y
int32 time_delta
float32 speed
float32 heading

================================================================================
MSG: rospy_message_converter/ObstacleIntent
int32 type

================================================================================
MSG: rospy_message_converter/ObstaclePriority
int32 priority

================================================================================
MSG: rospy_message_converter/ObstacleInteractiveTag
int32 interactive_tag
"""
  __slots__ = ['id','timestamp','predicted_period','trajectory','intent','priority','interactive_tag','is_static']
  _slot_types = ['int32','float64','float32','rospy_message_converter/PredictionTrajectory[]','rospy_message_converter/ObstacleIntent','rospy_message_converter/ObstaclePriority','rospy_message_converter/ObstacleInteractiveTag','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,timestamp,predicted_period,trajectory,intent,priority,interactive_tag,is_static

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictionObstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.timestamp is None:
        self.timestamp = 0.
      if self.predicted_period is None:
        self.predicted_period = 0.
      if self.trajectory is None:
        self.trajectory = []
      if self.intent is None:
        self.intent = rospy_message_converter.msg.ObstacleIntent()
      if self.priority is None:
        self.priority = rospy_message_converter.msg.ObstaclePriority()
      if self.interactive_tag is None:
        self.interactive_tag = rospy_message_converter.msg.ObstacleInteractiveTag()
      if self.is_static is None:
        self.is_static = False
    else:
      self.id = 0
      self.timestamp = 0.
      self.predicted_period = 0.
      self.trajectory = []
      self.intent = rospy_message_converter.msg.ObstacleIntent()
      self.priority = rospy_message_converter.msg.ObstaclePriority()
      self.interactive_tag = rospy_message_converter.msg.ObstacleInteractiveTag()
      self.is_static = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_idf().pack(_x.id, _x.timestamp, _x.predicted_period))
      length = len(self.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory:
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2
          buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_3iB().pack(_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = None
      if self.intent is None:
        self.intent = rospy_message_converter.msg.ObstacleIntent()
      if self.priority is None:
        self.priority = rospy_message_converter.msg.ObstaclePriority()
      if self.interactive_tag is None:
        self.interactive_tag = rospy_message_converter.msg.ObstacleInteractiveTag()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.timestamp, _x.predicted_period,) = _get_struct_idf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionPathPoint()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
          val1.trajectory.append(val2)
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.trajectory.append(val1)
      _x = self
      start = end
      end += 13
      (_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static,) = _get_struct_3iB().unpack(str[start:end])
      self.is_static = bool(self.is_static)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_idf().pack(_x.id, _x.timestamp, _x.predicted_period))
      length = len(self.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory:
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2
          buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_3iB().pack(_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = None
      if self.intent is None:
        self.intent = rospy_message_converter.msg.ObstacleIntent()
      if self.priority is None:
        self.priority = rospy_message_converter.msg.ObstaclePriority()
      if self.interactive_tag is None:
        self.interactive_tag = rospy_message_converter.msg.ObstacleInteractiveTag()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.timestamp, _x.predicted_period,) = _get_struct_idf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionPathPoint()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
          val1.trajectory.append(val2)
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.trajectory.append(val1)
      _x = self
      start = end
      end += 13
      (_x.intent.type, _x.priority.priority, _x.interactive_tag.interactive_tag, _x.is_static,) = _get_struct_3iB().unpack(str[start:end])
      self.is_static = bool(self.is_static)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fi2f = None
def _get_struct_2fi2f():
    global _struct_2fi2f
    if _struct_2fi2f is None:
        _struct_2fi2f = struct.Struct("<2fi2f")
    return _struct_2fi2f
_struct_3iB = None
def _get_struct_3iB():
    global _struct_3iB
    if _struct_3iB is None:
        _struct_3iB = struct.Struct("<3iB")
    return _struct_3iB
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_idf = None
def _get_struct_idf():
    global _struct_idf
    if _struct_idf is None:
        _struct_idf = struct.Struct("<idf")
    return _struct_idf

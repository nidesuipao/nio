# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TrafficSignDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class TrafficSignDetection(genpy.Message):
  _md5sum = "8a0d2a6e9203412f573a9f11ca80d174"
  _type = "rospy_message_converter/TrafficSignDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
TrafficSign[] trafficsign
uint32 trafficsign_num
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/TrafficSign
uint32 TSR_ID
uint32 TSR_Age
int32 TSR_Name
int32 TSR_Shape
float32 TSR_Height
float32 TSR_Lat_Distance
float32 TSR_Long_Distance
int32 TSR_Filter_Type
int32 TSR_Relevancy
int32 TSR_Structure
float32 TSR_Panel_Width
float32 TSR_Panel_Height
float32 TSR_Confidence
float32 TSR_Name_Value
float32 TSR_Lat_Pos_P
float32 TSR_Long_Pos_P
float32 TSR_Panel_Width_P
float32 TSR_Panel_Height_P
int32 TSR_Color
float32 TSR_Confidence_Name
float32 TSR_Confidence_Value
float32 TSR_Relevancy_Value
"""
  __slots__ = ['timestamp','trafficsign','trafficsign_num','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['uint64','rospy_message_converter/TrafficSign[]','uint32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,trafficsign,trafficsign_num,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficSignDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.trafficsign is None:
        self.trafficsign = []
      if self.trafficsign_num is None:
        self.trafficsign_num = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.timestamp = 0
      self.trafficsign = []
      self.trafficsign_num = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.trafficsign)
      buff.write(_struct_I.pack(length))
      for val1 in self.trafficsign:
        _x = val1
        buff.write(_get_struct_2I2i3f3i8fi3f().pack(_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.trafficsign_num, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trafficsign is None:
        self.trafficsign = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trafficsign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficSign()
        _x = val1
        start = end
        end += 88
        (_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value,) = _get_struct_2I2i3f3i8fi3f().unpack(str[start:end])
        self.trafficsign.append(val1)
      _x = self
      start = end
      end += 12
      (_x.trafficsign_num, _x.publish_ptp_ts,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.trafficsign)
      buff.write(_struct_I.pack(length))
      for val1 in self.trafficsign:
        _x = val1
        buff.write(_get_struct_2I2i3f3i8fi3f().pack(_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.trafficsign_num, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trafficsign is None:
        self.trafficsign = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trafficsign = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrafficSign()
        _x = val1
        start = end
        end += 88
        (_x.TSR_ID, _x.TSR_Age, _x.TSR_Name, _x.TSR_Shape, _x.TSR_Height, _x.TSR_Lat_Distance, _x.TSR_Long_Distance, _x.TSR_Filter_Type, _x.TSR_Relevancy, _x.TSR_Structure, _x.TSR_Panel_Width, _x.TSR_Panel_Height, _x.TSR_Confidence, _x.TSR_Name_Value, _x.TSR_Lat_Pos_P, _x.TSR_Long_Pos_P, _x.TSR_Panel_Width_P, _x.TSR_Panel_Height_P, _x.TSR_Color, _x.TSR_Confidence_Name, _x.TSR_Confidence_Value, _x.TSR_Relevancy_Value,) = _get_struct_2I2i3f3i8fi3f().unpack(str[start:end])
        self.trafficsign.append(val1)
      _x = self
      start = end
      end += 12
      (_x.trafficsign_num, _x.publish_ptp_ts,) = _get_struct_IQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i3f3i8fi3f = None
def _get_struct_2I2i3f3i8fi3f():
    global _struct_2I2i3f3i8fi3f
    if _struct_2I2i3f3i8fi3f is None:
        _struct_2I2i3f3i8fi3f = struct.Struct("<2I2i3f3i8fi3f")
    return _struct_2I2i3f3i8fi3f
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

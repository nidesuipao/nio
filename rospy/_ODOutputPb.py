# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ODOutputPb.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ODOutputPb(genpy.Message):
  _md5sum = "edadf26c243da2d9b112a49064faaa6f"
  _type = "rospy_message_converter/ODOutputPb"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SensorHeader[] sensors
uint64 cooking_ts
uint64 send_ts
LidarObject[] lidar_result
CameraObject[] cam_result
StaticCameraObject[] static_cam_result
FailsafeObject[] failsafe_result
string reserved
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SensorHeader
uint32 sensor_id
uint64 measuring_ts

================================================================================
MSG: rospy_message_converter/LidarObject
uint32 sensor_id
uint32 object_id
int32 class_type
float32 x
float32 y
float32 z
float32 width
float32 height
float32 length
float32 yaw
float32 score
float32 second_return_ration
float32 high_reflection_ration
float32[] statistics_feature

================================================================================
MSG: rospy_message_converter/CameraObject
uint32 sensor_id
uint32 object_id
float32 score
int32 class_type
Mono3D mono3d
float32 batch_id
float32 subtype
float32[] subtype_scores
float32[] occlusion
float32[] box
float32[] kpts
float32[] kpts_score
float32[] uncertainty_2d
float32[] uncertainty_3d
float32[] reid_feature
float32[] theta2d
float32 has_person

================================================================================
MSG: rospy_message_converter/Mono3D
float32 x
float32 y
float32 z
float32 width
float32 height
float32 length
float32 theta

================================================================================
MSG: rospy_message_converter/StaticCameraObject
uint32 sensor_id
uint32 object_id
float32 score
int32 class_type
Mono3D mono3d
float32 batch_id
float32 subtype
float32[] subtype_scores
float32[] occlusion
float32[] box
float32[] uncertainty_2d
float32[] uncertainty_3d

================================================================================
MSG: rospy_message_converter/FailsafeObject
uint32 full_blockage_pred
float32 full_blockage_score
uint32 low_sun_pred
float32 low_sun_score
uint32 partial_blockage_pred
float32 partial_blockage_score
uint32 rain_pred
float32 rain_score
uint32 windshield_frozen_pred
float32 windshield_frozen_score
"""
  __slots__ = ['sensors','cooking_ts','send_ts','lidar_result','cam_result','static_cam_result','failsafe_result','reserved','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/SensorHeader[]','uint64','uint64','rospy_message_converter/LidarObject[]','rospy_message_converter/CameraObject[]','rospy_message_converter/StaticCameraObject[]','rospy_message_converter/FailsafeObject[]','string','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensors,cooking_ts,send_ts,lidar_result,cam_result,static_cam_result,failsafe_result,reserved,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ODOutputPb, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensors is None:
        self.sensors = []
      if self.cooking_ts is None:
        self.cooking_ts = 0
      if self.send_ts is None:
        self.send_ts = 0
      if self.lidar_result is None:
        self.lidar_result = []
      if self.cam_result is None:
        self.cam_result = []
      if self.static_cam_result is None:
        self.static_cam_result = []
      if self.failsafe_result is None:
        self.failsafe_result = []
      if self.reserved is None:
        self.reserved = ''
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.sensors = []
      self.cooking_ts = 0
      self.send_ts = 0
      self.lidar_result = []
      self.cam_result = []
      self.static_cam_result = []
      self.failsafe_result = []
      self.reserved = ''
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensors:
        _x = val1
        buff.write(_get_struct_IQ().pack(_x.sensor_id, _x.measuring_ts))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.cooking_ts, _x.send_ts))
      length = len(self.lidar_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidar_result:
        _x = val1
        buff.write(_get_struct_2Ii10f().pack(_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration))
        length = len(val1.statistics_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.statistics_feature))
      length = len(self.cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v1 = val1.mono3d
        _x = _v1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.subtype_scores))
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.occlusion))
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.box))
        length = len(val1.kpts)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.kpts))
        length = len(val1.kpts_score)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.kpts_score))
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_2d))
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_3d))
        length = len(val1.reid_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reid_feature))
        length = len(val1.theta2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.theta2d))
        _x = val1.has_person
        buff.write(_get_struct_f().pack(_x))
      length = len(self.static_cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.static_cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v2 = val1.mono3d
        _x = _v2
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.subtype_scores))
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.occlusion))
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.box))
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_2d))
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.uncertainty_3d))
      length = len(self.failsafe_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.failsafe_result:
        _x = val1
        buff.write(_get_struct_IfIfIfIfIf().pack(_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score))
      _x = self.reserved
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sensors is None:
        self.sensors = None
      if self.lidar_result is None:
        self.lidar_result = None
      if self.cam_result is None:
        self.cam_result = None
      if self.static_cam_result is None:
        self.static_cam_result = None
      if self.failsafe_result is None:
        self.failsafe_result = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SensorHeader()
        _x = val1
        start = end
        end += 12
        (_x.sensor_id, _x.measuring_ts,) = _get_struct_IQ().unpack(str[start:end])
        self.sensors.append(val1)
      _x = self
      start = end
      end += 16
      (_x.cooking_ts, _x.send_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidar_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LidarObject()
        _x = val1
        start = end
        end += 52
        (_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration,) = _get_struct_2Ii10f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.statistics_feature = s.unpack(str[start:end])
        self.lidar_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v3 = val1.mono3d
        _x = _v3
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts_score = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reid_feature = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.theta2d = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.has_person,) = _get_struct_f().unpack(str[start:end])
        self.cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.static_cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StaticCameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v4 = val1.mono3d
        _x = _v4
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = s.unpack(str[start:end])
        self.static_cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.failsafe_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FailsafeObject()
        _x = val1
        start = end
        end += 40
        (_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score,) = _get_struct_IfIfIfIfIf().unpack(str[start:end])
        self.failsafe_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.sensors)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensors:
        _x = val1
        buff.write(_get_struct_IQ().pack(_x.sensor_id, _x.measuring_ts))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.cooking_ts, _x.send_ts))
      length = len(self.lidar_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidar_result:
        _x = val1
        buff.write(_get_struct_2Ii10f().pack(_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration))
        length = len(val1.statistics_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.statistics_feature.tostring())
      length = len(self.cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v5 = val1.mono3d
        _x = _v5
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.subtype_scores.tostring())
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.occlusion.tostring())
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.box.tostring())
        length = len(val1.kpts)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.kpts.tostring())
        length = len(val1.kpts_score)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.kpts_score.tostring())
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_2d.tostring())
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_3d.tostring())
        length = len(val1.reid_feature)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reid_feature.tostring())
        length = len(val1.theta2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.theta2d.tostring())
        _x = val1.has_person
        buff.write(_get_struct_f().pack(_x))
      length = len(self.static_cam_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.static_cam_result:
        _x = val1
        buff.write(_get_struct_2Ifi().pack(_x.sensor_id, _x.object_id, _x.score, _x.class_type))
        _v6 = val1.mono3d
        _x = _v6
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.batch_id, _x.subtype))
        length = len(val1.subtype_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.subtype_scores.tostring())
        length = len(val1.occlusion)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.occlusion.tostring())
        length = len(val1.box)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.box.tostring())
        length = len(val1.uncertainty_2d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_2d.tostring())
        length = len(val1.uncertainty_3d)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.uncertainty_3d.tostring())
      length = len(self.failsafe_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.failsafe_result:
        _x = val1
        buff.write(_get_struct_IfIfIfIfIf().pack(_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score))
      _x = self.reserved
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sensors is None:
        self.sensors = None
      if self.lidar_result is None:
        self.lidar_result = None
      if self.cam_result is None:
        self.cam_result = None
      if self.static_cam_result is None:
        self.static_cam_result = None
      if self.failsafe_result is None:
        self.failsafe_result = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensors = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SensorHeader()
        _x = val1
        start = end
        end += 12
        (_x.sensor_id, _x.measuring_ts,) = _get_struct_IQ().unpack(str[start:end])
        self.sensors.append(val1)
      _x = self
      start = end
      end += 16
      (_x.cooking_ts, _x.send_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidar_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LidarObject()
        _x = val1
        start = end
        end += 52
        (_x.sensor_id, _x.object_id, _x.class_type, _x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.yaw, _x.score, _x.second_return_ration, _x.high_reflection_ration,) = _get_struct_2Ii10f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.statistics_feature = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.lidar_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v7 = val1.mono3d
        _x = _v7
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kpts_score = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reid_feature = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.theta2d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.has_person,) = _get_struct_f().unpack(str[start:end])
        self.cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.static_cam_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StaticCameraObject()
        _x = val1
        start = end
        end += 16
        (_x.sensor_id, _x.object_id, _x.score, _x.class_type,) = _get_struct_2Ifi().unpack(str[start:end])
        _v8 = val1.mono3d
        _x = _v8
        start = end
        end += 28
        (_x.x, _x.y, _x.z, _x.width, _x.height, _x.length, _x.theta,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.batch_id, _x.subtype,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.subtype_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.occlusion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.box = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_2d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.uncertainty_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.static_cam_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.failsafe_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FailsafeObject()
        _x = val1
        start = end
        end += 40
        (_x.full_blockage_pred, _x.full_blockage_score, _x.low_sun_pred, _x.low_sun_score, _x.partial_blockage_pred, _x.partial_blockage_score, _x.rain_pred, _x.rain_score, _x.windshield_frozen_pred, _x.windshield_frozen_score,) = _get_struct_IfIfIfIfIf().unpack(str[start:end])
        self.failsafe_result.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Ifi = None
def _get_struct_2Ifi():
    global _struct_2Ifi
    if _struct_2Ifi is None:
        _struct_2Ifi = struct.Struct("<2Ifi")
    return _struct_2Ifi
_struct_2Ii10f = None
def _get_struct_2Ii10f():
    global _struct_2Ii10f
    if _struct_2Ii10f is None:
        _struct_2Ii10f = struct.Struct("<2Ii10f")
    return _struct_2Ii10f
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
_struct_IfIfIfIfIf = None
def _get_struct_IfIfIfIfIf():
    global _struct_IfIfIfIfIf
    if _struct_IfIfIfIfIf is None:
        _struct_IfIfIfIfIf = struct.Struct("<IfIfIfIfIf")
    return _struct_IfIfIfIfIf
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

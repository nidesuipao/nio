# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RmeLane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RmeLane(genpy.Message):
  _md5sum = "6c2fa51c16ac20b4070092700c946f12"
  _type = "rospy_message_converter/RmeLane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RmeLine left_line
RmeLine right_line
int32[] lane_type
float32 lane_start
float32 lane_end
float32 map_spd_limit
float32 lane_width
float32 ca_lon_dst
float32[] cur_point
float32[] cur_value
int32 lane_dir
bool ca_valid
uint32 lane_id

================================================================================
MSG: rospy_message_converter/RmeLine
float32 pt_conf
float32 c0
float32 c1
float32 c2
float32 c3
float32 lrange_start
float32 lrange_end
float32 lm_width
int32 line_color
int32 line_type
int32 line_src
"""
  __slots__ = ['left_line','right_line','lane_type','lane_start','lane_end','map_spd_limit','lane_width','ca_lon_dst','cur_point','cur_value','lane_dir','ca_valid','lane_id']
  _slot_types = ['rospy_message_converter/RmeLine','rospy_message_converter/RmeLine','int32[]','float32','float32','float32','float32','float32','float32[]','float32[]','int32','bool','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_line,right_line,lane_type,lane_start,lane_end,map_spd_limit,lane_width,ca_lon_dst,cur_point,cur_value,lane_dir,ca_valid,lane_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RmeLane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_line is None:
        self.left_line = rospy_message_converter.msg.RmeLine()
      if self.right_line is None:
        self.right_line = rospy_message_converter.msg.RmeLine()
      if self.lane_type is None:
        self.lane_type = []
      if self.lane_start is None:
        self.lane_start = 0.
      if self.lane_end is None:
        self.lane_end = 0.
      if self.map_spd_limit is None:
        self.map_spd_limit = 0.
      if self.lane_width is None:
        self.lane_width = 0.
      if self.ca_lon_dst is None:
        self.ca_lon_dst = 0.
      if self.cur_point is None:
        self.cur_point = []
      if self.cur_value is None:
        self.cur_value = []
      if self.lane_dir is None:
        self.lane_dir = 0
      if self.ca_valid is None:
        self.ca_valid = False
      if self.lane_id is None:
        self.lane_id = 0
    else:
      self.left_line = rospy_message_converter.msg.RmeLine()
      self.right_line = rospy_message_converter.msg.RmeLine()
      self.lane_type = []
      self.lane_start = 0.
      self.lane_end = 0.
      self.map_spd_limit = 0.
      self.lane_width = 0.
      self.ca_lon_dst = 0.
      self.cur_point = []
      self.cur_value = []
      self.lane_dir = 0
      self.ca_valid = False
      self.lane_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i8f3i().pack(_x.left_line.pt_conf, _x.left_line.c0, _x.left_line.c1, _x.left_line.c2, _x.left_line.c3, _x.left_line.lrange_start, _x.left_line.lrange_end, _x.left_line.lm_width, _x.left_line.line_color, _x.left_line.line_type, _x.left_line.line_src, _x.right_line.pt_conf, _x.right_line.c0, _x.right_line.c1, _x.right_line.c2, _x.right_line.c3, _x.right_line.lrange_start, _x.right_line.lrange_end, _x.right_line.lm_width, _x.right_line.line_color, _x.right_line.line_type, _x.right_line.line_src))
      length = len(self.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.lane_type))
      _x = self
      buff.write(_get_struct_5f().pack(_x.lane_start, _x.lane_end, _x.map_spd_limit, _x.lane_width, _x.ca_lon_dst))
      length = len(self.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cur_point))
      length = len(self.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cur_value))
      _x = self
      buff.write(_get_struct_iBI().pack(_x.lane_dir, _x.ca_valid, _x.lane_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_line is None:
        self.left_line = rospy_message_converter.msg.RmeLine()
      if self.right_line is None:
        self.right_line = rospy_message_converter.msg.RmeLine()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.left_line.pt_conf, _x.left_line.c0, _x.left_line.c1, _x.left_line.c2, _x.left_line.c3, _x.left_line.lrange_start, _x.left_line.lrange_end, _x.left_line.lm_width, _x.left_line.line_color, _x.left_line.line_type, _x.left_line.line_src, _x.right_line.pt_conf, _x.right_line.c0, _x.right_line.c1, _x.right_line.c2, _x.right_line.c3, _x.right_line.lrange_start, _x.right_line.lrange_end, _x.right_line.lm_width, _x.right_line.line_color, _x.right_line.line_type, _x.right_line.line_src,) = _get_struct_8f3i8f3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lane_type = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.lane_start, _x.lane_end, _x.map_spd_limit, _x.lane_width, _x.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cur_point = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cur_value = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.lane_dir, _x.ca_valid, _x.lane_id,) = _get_struct_iBI().unpack(str[start:end])
      self.ca_valid = bool(self.ca_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i8f3i().pack(_x.left_line.pt_conf, _x.left_line.c0, _x.left_line.c1, _x.left_line.c2, _x.left_line.c3, _x.left_line.lrange_start, _x.left_line.lrange_end, _x.left_line.lm_width, _x.left_line.line_color, _x.left_line.line_type, _x.left_line.line_src, _x.right_line.pt_conf, _x.right_line.c0, _x.right_line.c1, _x.right_line.c2, _x.right_line.c3, _x.right_line.lrange_start, _x.right_line.lrange_end, _x.right_line.lm_width, _x.right_line.line_color, _x.right_line.line_type, _x.right_line.line_src))
      length = len(self.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.lane_type.tostring())
      _x = self
      buff.write(_get_struct_5f().pack(_x.lane_start, _x.lane_end, _x.map_spd_limit, _x.lane_width, _x.ca_lon_dst))
      length = len(self.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cur_point.tostring())
      length = len(self.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cur_value.tostring())
      _x = self
      buff.write(_get_struct_iBI().pack(_x.lane_dir, _x.ca_valid, _x.lane_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_line is None:
        self.left_line = rospy_message_converter.msg.RmeLine()
      if self.right_line is None:
        self.right_line = rospy_message_converter.msg.RmeLine()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.left_line.pt_conf, _x.left_line.c0, _x.left_line.c1, _x.left_line.c2, _x.left_line.c3, _x.left_line.lrange_start, _x.left_line.lrange_end, _x.left_line.lm_width, _x.left_line.line_color, _x.left_line.line_type, _x.left_line.line_src, _x.right_line.pt_conf, _x.right_line.c0, _x.right_line.c1, _x.right_line.c2, _x.right_line.c3, _x.right_line.lrange_start, _x.right_line.lrange_end, _x.right_line.lm_width, _x.right_line.line_color, _x.right_line.line_type, _x.right_line.line_src,) = _get_struct_8f3i8f3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lane_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.lane_start, _x.lane_end, _x.map_spd_limit, _x.lane_width, _x.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cur_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cur_value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 9
      (_x.lane_dir, _x.ca_valid, _x.lane_id,) = _get_struct_iBI().unpack(str[start:end])
      self.ca_valid = bool(self.ca_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_8f3i8f3i = None
def _get_struct_8f3i8f3i():
    global _struct_8f3i8f3i
    if _struct_8f3i8f3i is None:
        _struct_8f3i8f3i = struct.Struct("<8f3i8f3i")
    return _struct_8f3i8f3i
_struct_iBI = None
def _get_struct_iBI():
    global _struct_iBI
    if _struct_iBI is None:
        _struct_iBI = struct.Struct("<iBI")
    return _struct_iBI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CrenInnerInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CrenInnerInfo(genpy.Message):
  _md5sum = "039221c1eee7b50f0b610c1a46899955"
  _type = "rospy_message_converter/CrenInnerInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32[] objPruneId
uint32 targetByPriorId
uint32 targetByTtcId
uint32 targetByDistId
uint32 targetByPostId
uint32 targetOldId
float32[] reserved
"""
  __slots__ = ['objPruneId','targetByPriorId','targetByTtcId','targetByDistId','targetByPostId','targetOldId','reserved']
  _slot_types = ['uint32[]','uint32','uint32','uint32','uint32','uint32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objPruneId,targetByPriorId,targetByTtcId,targetByDistId,targetByPostId,targetOldId,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CrenInnerInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.objPruneId is None:
        self.objPruneId = []
      if self.targetByPriorId is None:
        self.targetByPriorId = 0
      if self.targetByTtcId is None:
        self.targetByTtcId = 0
      if self.targetByDistId is None:
        self.targetByDistId = 0
      if self.targetByPostId is None:
        self.targetByPostId = 0
      if self.targetOldId is None:
        self.targetOldId = 0
      if self.reserved is None:
        self.reserved = []
    else:
      self.objPruneId = []
      self.targetByPriorId = 0
      self.targetByTtcId = 0
      self.targetByDistId = 0
      self.targetByPostId = 0
      self.targetOldId = 0
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.objPruneId)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.objPruneId))
      _x = self
      buff.write(_get_struct_5I().pack(_x.targetByPriorId, _x.targetByTtcId, _x.targetByDistId, _x.targetByPostId, _x.targetOldId))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objPruneId = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.targetByPriorId, _x.targetByTtcId, _x.targetByDistId, _x.targetByPostId, _x.targetOldId,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objPruneId)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.objPruneId.tostring())
      _x = self
      buff.write(_get_struct_5I().pack(_x.targetByPriorId, _x.targetByTtcId, _x.targetByDistId, _x.targetByPostId, _x.targetOldId))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.objPruneId = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 20
      (_x.targetByPriorId, _x.targetByTtcId, _x.targetByDistId, _x.targetByPostId, _x.targetOldId,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I

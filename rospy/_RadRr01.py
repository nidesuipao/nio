# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadRr01.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadRr01(genpy.Message):
  _md5sum = "9a4c982fcda4d6b95b14baa77512d2c8"
  _type = "rospy_message_converter/RadRr01"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 bsdlca_onoff_sts
uint32 bsdlca_left_sts
uint32 bsdlca_right_sts
uint32 bsdlca_left_warn_req
uint32 bsdlca_right_warn_req
uint32 bsdlca_haptic_onoff_sts
uint32 ext_req
uint32 sdow_onoff_sts
uint32 sdow_left_sts
uint32 sdow_right_sts
uint32 sdow_left_warn_req
uint32 sdow_right_warn_req
uint32 rcta_onoff_sts
uint32 rcta_left_sts
uint32 rcta_right_sts
uint32 rcta_left_warn_req
uint32 rcta_right_warn_req
uint32 mirr_light_left_req
uint32 mirr_light_right_req
uint32 rear_rad_fault_disp
"""
  __slots__ = ['bsdlca_onoff_sts','bsdlca_left_sts','bsdlca_right_sts','bsdlca_left_warn_req','bsdlca_right_warn_req','bsdlca_haptic_onoff_sts','ext_req','sdow_onoff_sts','sdow_left_sts','sdow_right_sts','sdow_left_warn_req','sdow_right_warn_req','rcta_onoff_sts','rcta_left_sts','rcta_right_sts','rcta_left_warn_req','rcta_right_warn_req','mirr_light_left_req','mirr_light_right_req','rear_rad_fault_disp']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bsdlca_onoff_sts,bsdlca_left_sts,bsdlca_right_sts,bsdlca_left_warn_req,bsdlca_right_warn_req,bsdlca_haptic_onoff_sts,ext_req,sdow_onoff_sts,sdow_left_sts,sdow_right_sts,sdow_left_warn_req,sdow_right_warn_req,rcta_onoff_sts,rcta_left_sts,rcta_right_sts,rcta_left_warn_req,rcta_right_warn_req,mirr_light_left_req,mirr_light_right_req,rear_rad_fault_disp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadRr01, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bsdlca_onoff_sts is None:
        self.bsdlca_onoff_sts = 0
      if self.bsdlca_left_sts is None:
        self.bsdlca_left_sts = 0
      if self.bsdlca_right_sts is None:
        self.bsdlca_right_sts = 0
      if self.bsdlca_left_warn_req is None:
        self.bsdlca_left_warn_req = 0
      if self.bsdlca_right_warn_req is None:
        self.bsdlca_right_warn_req = 0
      if self.bsdlca_haptic_onoff_sts is None:
        self.bsdlca_haptic_onoff_sts = 0
      if self.ext_req is None:
        self.ext_req = 0
      if self.sdow_onoff_sts is None:
        self.sdow_onoff_sts = 0
      if self.sdow_left_sts is None:
        self.sdow_left_sts = 0
      if self.sdow_right_sts is None:
        self.sdow_right_sts = 0
      if self.sdow_left_warn_req is None:
        self.sdow_left_warn_req = 0
      if self.sdow_right_warn_req is None:
        self.sdow_right_warn_req = 0
      if self.rcta_onoff_sts is None:
        self.rcta_onoff_sts = 0
      if self.rcta_left_sts is None:
        self.rcta_left_sts = 0
      if self.rcta_right_sts is None:
        self.rcta_right_sts = 0
      if self.rcta_left_warn_req is None:
        self.rcta_left_warn_req = 0
      if self.rcta_right_warn_req is None:
        self.rcta_right_warn_req = 0
      if self.mirr_light_left_req is None:
        self.mirr_light_left_req = 0
      if self.mirr_light_right_req is None:
        self.mirr_light_right_req = 0
      if self.rear_rad_fault_disp is None:
        self.rear_rad_fault_disp = 0
    else:
      self.bsdlca_onoff_sts = 0
      self.bsdlca_left_sts = 0
      self.bsdlca_right_sts = 0
      self.bsdlca_left_warn_req = 0
      self.bsdlca_right_warn_req = 0
      self.bsdlca_haptic_onoff_sts = 0
      self.ext_req = 0
      self.sdow_onoff_sts = 0
      self.sdow_left_sts = 0
      self.sdow_right_sts = 0
      self.sdow_left_warn_req = 0
      self.sdow_right_warn_req = 0
      self.rcta_onoff_sts = 0
      self.rcta_left_sts = 0
      self.rcta_right_sts = 0
      self.rcta_left_warn_req = 0
      self.rcta_right_warn_req = 0
      self.mirr_light_left_req = 0
      self.mirr_light_right_req = 0
      self.rear_rad_fault_disp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20I().pack(_x.bsdlca_onoff_sts, _x.bsdlca_left_sts, _x.bsdlca_right_sts, _x.bsdlca_left_warn_req, _x.bsdlca_right_warn_req, _x.bsdlca_haptic_onoff_sts, _x.ext_req, _x.sdow_onoff_sts, _x.sdow_left_sts, _x.sdow_right_sts, _x.sdow_left_warn_req, _x.sdow_right_warn_req, _x.rcta_onoff_sts, _x.rcta_left_sts, _x.rcta_right_sts, _x.rcta_left_warn_req, _x.rcta_right_warn_req, _x.mirr_light_left_req, _x.mirr_light_right_req, _x.rear_rad_fault_disp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.bsdlca_onoff_sts, _x.bsdlca_left_sts, _x.bsdlca_right_sts, _x.bsdlca_left_warn_req, _x.bsdlca_right_warn_req, _x.bsdlca_haptic_onoff_sts, _x.ext_req, _x.sdow_onoff_sts, _x.sdow_left_sts, _x.sdow_right_sts, _x.sdow_left_warn_req, _x.sdow_right_warn_req, _x.rcta_onoff_sts, _x.rcta_left_sts, _x.rcta_right_sts, _x.rcta_left_warn_req, _x.rcta_right_warn_req, _x.mirr_light_left_req, _x.mirr_light_right_req, _x.rear_rad_fault_disp,) = _get_struct_20I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20I().pack(_x.bsdlca_onoff_sts, _x.bsdlca_left_sts, _x.bsdlca_right_sts, _x.bsdlca_left_warn_req, _x.bsdlca_right_warn_req, _x.bsdlca_haptic_onoff_sts, _x.ext_req, _x.sdow_onoff_sts, _x.sdow_left_sts, _x.sdow_right_sts, _x.sdow_left_warn_req, _x.sdow_right_warn_req, _x.rcta_onoff_sts, _x.rcta_left_sts, _x.rcta_right_sts, _x.rcta_left_warn_req, _x.rcta_right_warn_req, _x.mirr_light_left_req, _x.mirr_light_right_req, _x.rear_rad_fault_disp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.bsdlca_onoff_sts, _x.bsdlca_left_sts, _x.bsdlca_right_sts, _x.bsdlca_left_warn_req, _x.bsdlca_right_warn_req, _x.bsdlca_haptic_onoff_sts, _x.ext_req, _x.sdow_onoff_sts, _x.sdow_left_sts, _x.sdow_right_sts, _x.sdow_left_warn_req, _x.sdow_right_warn_req, _x.rcta_onoff_sts, _x.rcta_left_sts, _x.rcta_right_sts, _x.rcta_left_warn_req, _x.rcta_right_warn_req, _x.mirr_light_left_req, _x.mirr_light_right_req, _x.rear_rad_fault_disp,) = _get_struct_20I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20I = None
def _get_struct_20I():
    global _struct_20I
    if _struct_20I is None:
        _struct_20I = struct.Struct("<20I")
    return _struct_20I

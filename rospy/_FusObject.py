# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FusObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FusObject(genpy.Message):
  _md5sum = "d0817f2ec3568056de93a4e5f8401a0f"
  _type = "rospy_message_converter/FusObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
ObjPos pos_vcs
ObjPos pos_ccs
ObjVel vel_vcs
ObjVel vel_ccs
ObjAcc acc
int32 object_status
int32 valid_status
ObfClassification type
int32 blinker_info
int32 brake_info
uint32 age
uint32 age_ms
ObjSize size
float32 heading
float32 heading_rate
float32 dist_from_left_lane
float32 dist_from_right_lane
uint32 tracklet_match_list_len
uint32[] tracklet_match_list
uint32[] tracket_loss_match_cnt_list
uint32 vision_match_id
uint32 vision_match_idx
uint32 fusion_source
uint32 lost_cnt
float32 angle
uint32 moving_cnt
uint32 merged_obj_idx_list_length
uint32[] merged_obj_idx_list
uint32 motion_category
uint32 fusion_source_his
float32 vision_exist_prob
uint32 vision_match_cnt
uint32 radar_match_cnt
uint32 move_status
ObjLaneLoc lane_location
float32 confidence
float32[] type_prob
PredictionTrajectory[] pred_traj
ObstacleIntent intent
Point3D[] polygon_point
bool is_predicted_cutin

================================================================================
MSG: rospy_message_converter/ObjPos
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjVel
float32 vx
float32 vy
float32 vz

================================================================================
MSG: rospy_message_converter/ObjAcc
float32 ax
float32 ay
float32 az

================================================================================
MSG: rospy_message_converter/ObfClassification
int32 obj_main_class
uint32 obj_sub_class

================================================================================
MSG: rospy_message_converter/ObjSize
float32 length
float32 width
float32 height

================================================================================
MSG: rospy_message_converter/ObjLaneLoc
uint32 lane_index
int32 lane_id
int32 lane_id_debounced
uint32 debounced_cnt
float32 vx_ccs
float32 vy_ccs
float32 dy_ccs
float32 hd_angle_2_lane
float32 dy_min
float32 dy_max

================================================================================
MSG: rospy_message_converter/PredictionTrajectory
PredictionPathPoint[] trajectory
float32 probability

================================================================================
MSG: rospy_message_converter/PredictionPathPoint
float32 x
float32 y
int32 time_delta
float32 speed
float32 heading

================================================================================
MSG: rospy_message_converter/ObstacleIntent
int32 type

================================================================================
MSG: rospy_message_converter/Point3D
float32 x
float32 y
float32 z
"""
  __slots__ = ['id','pos_vcs','pos_ccs','vel_vcs','vel_ccs','acc','object_status','valid_status','type','blinker_info','brake_info','age','age_ms','size','heading','heading_rate','dist_from_left_lane','dist_from_right_lane','tracklet_match_list_len','tracklet_match_list','tracket_loss_match_cnt_list','vision_match_id','vision_match_idx','fusion_source','lost_cnt','angle','moving_cnt','merged_obj_idx_list_length','merged_obj_idx_list','motion_category','fusion_source_his','vision_exist_prob','vision_match_cnt','radar_match_cnt','move_status','lane_location','confidence','type_prob','pred_traj','intent','polygon_point','is_predicted_cutin']
  _slot_types = ['uint32','rospy_message_converter/ObjPos','rospy_message_converter/ObjPos','rospy_message_converter/ObjVel','rospy_message_converter/ObjVel','rospy_message_converter/ObjAcc','int32','int32','rospy_message_converter/ObfClassification','int32','int32','uint32','uint32','rospy_message_converter/ObjSize','float32','float32','float32','float32','uint32','uint32[]','uint32[]','uint32','uint32','uint32','uint32','float32','uint32','uint32','uint32[]','uint32','uint32','float32','uint32','uint32','uint32','rospy_message_converter/ObjLaneLoc','float32','float32[]','rospy_message_converter/PredictionTrajectory[]','rospy_message_converter/ObstacleIntent','rospy_message_converter/Point3D[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pos_vcs,pos_ccs,vel_vcs,vel_ccs,acc,object_status,valid_status,type,blinker_info,brake_info,age,age_ms,size,heading,heading_rate,dist_from_left_lane,dist_from_right_lane,tracklet_match_list_len,tracklet_match_list,tracket_loss_match_cnt_list,vision_match_id,vision_match_idx,fusion_source,lost_cnt,angle,moving_cnt,merged_obj_idx_list_length,merged_obj_idx_list,motion_category,fusion_source_his,vision_exist_prob,vision_match_cnt,radar_match_cnt,move_status,lane_location,confidence,type_prob,pred_traj,intent,polygon_point,is_predicted_cutin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.pos_vcs is None:
        self.pos_vcs = rospy_message_converter.msg.ObjPos()
      if self.pos_ccs is None:
        self.pos_ccs = rospy_message_converter.msg.ObjPos()
      if self.vel_vcs is None:
        self.vel_vcs = rospy_message_converter.msg.ObjVel()
      if self.vel_ccs is None:
        self.vel_ccs = rospy_message_converter.msg.ObjVel()
      if self.acc is None:
        self.acc = rospy_message_converter.msg.ObjAcc()
      if self.object_status is None:
        self.object_status = 0
      if self.valid_status is None:
        self.valid_status = 0
      if self.type is None:
        self.type = rospy_message_converter.msg.ObfClassification()
      if self.blinker_info is None:
        self.blinker_info = 0
      if self.brake_info is None:
        self.brake_info = 0
      if self.age is None:
        self.age = 0
      if self.age_ms is None:
        self.age_ms = 0
      if self.size is None:
        self.size = rospy_message_converter.msg.ObjSize()
      if self.heading is None:
        self.heading = 0.
      if self.heading_rate is None:
        self.heading_rate = 0.
      if self.dist_from_left_lane is None:
        self.dist_from_left_lane = 0.
      if self.dist_from_right_lane is None:
        self.dist_from_right_lane = 0.
      if self.tracklet_match_list_len is None:
        self.tracklet_match_list_len = 0
      if self.tracklet_match_list is None:
        self.tracklet_match_list = []
      if self.tracket_loss_match_cnt_list is None:
        self.tracket_loss_match_cnt_list = []
      if self.vision_match_id is None:
        self.vision_match_id = 0
      if self.vision_match_idx is None:
        self.vision_match_idx = 0
      if self.fusion_source is None:
        self.fusion_source = 0
      if self.lost_cnt is None:
        self.lost_cnt = 0
      if self.angle is None:
        self.angle = 0.
      if self.moving_cnt is None:
        self.moving_cnt = 0
      if self.merged_obj_idx_list_length is None:
        self.merged_obj_idx_list_length = 0
      if self.merged_obj_idx_list is None:
        self.merged_obj_idx_list = []
      if self.motion_category is None:
        self.motion_category = 0
      if self.fusion_source_his is None:
        self.fusion_source_his = 0
      if self.vision_exist_prob is None:
        self.vision_exist_prob = 0.
      if self.vision_match_cnt is None:
        self.vision_match_cnt = 0
      if self.radar_match_cnt is None:
        self.radar_match_cnt = 0
      if self.move_status is None:
        self.move_status = 0
      if self.lane_location is None:
        self.lane_location = rospy_message_converter.msg.ObjLaneLoc()
      if self.confidence is None:
        self.confidence = 0.
      if self.type_prob is None:
        self.type_prob = []
      if self.pred_traj is None:
        self.pred_traj = []
      if self.intent is None:
        self.intent = rospy_message_converter.msg.ObstacleIntent()
      if self.polygon_point is None:
        self.polygon_point = []
      if self.is_predicted_cutin is None:
        self.is_predicted_cutin = False
    else:
      self.id = 0
      self.pos_vcs = rospy_message_converter.msg.ObjPos()
      self.pos_ccs = rospy_message_converter.msg.ObjPos()
      self.vel_vcs = rospy_message_converter.msg.ObjVel()
      self.vel_ccs = rospy_message_converter.msg.ObjVel()
      self.acc = rospy_message_converter.msg.ObjAcc()
      self.object_status = 0
      self.valid_status = 0
      self.type = rospy_message_converter.msg.ObfClassification()
      self.blinker_info = 0
      self.brake_info = 0
      self.age = 0
      self.age_ms = 0
      self.size = rospy_message_converter.msg.ObjSize()
      self.heading = 0.
      self.heading_rate = 0.
      self.dist_from_left_lane = 0.
      self.dist_from_right_lane = 0.
      self.tracklet_match_list_len = 0
      self.tracklet_match_list = []
      self.tracket_loss_match_cnt_list = []
      self.vision_match_id = 0
      self.vision_match_idx = 0
      self.fusion_source = 0
      self.lost_cnt = 0
      self.angle = 0.
      self.moving_cnt = 0
      self.merged_obj_idx_list_length = 0
      self.merged_obj_idx_list = []
      self.motion_category = 0
      self.fusion_source_his = 0
      self.vision_exist_prob = 0.
      self.vision_match_cnt = 0
      self.radar_match_cnt = 0
      self.move_status = 0
      self.lane_location = rospy_message_converter.msg.ObjLaneLoc()
      self.confidence = 0.
      self.type_prob = []
      self.pred_traj = []
      self.intent = rospy_message_converter.msg.ObstacleIntent()
      self.polygon_point = []
      self.is_predicted_cutin = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I15f3iI2i2I7fI().pack(_x.id, _x.pos_vcs.x, _x.pos_vcs.y, _x.pos_vcs.z, _x.pos_ccs.x, _x.pos_ccs.y, _x.pos_ccs.z, _x.vel_vcs.vx, _x.vel_vcs.vy, _x.vel_vcs.vz, _x.vel_ccs.vx, _x.vel_ccs.vy, _x.vel_ccs.vz, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.object_status, _x.valid_status, _x.type.obj_main_class, _x.type.obj_sub_class, _x.blinker_info, _x.brake_info, _x.age, _x.age_ms, _x.size.length, _x.size.width, _x.size.height, _x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len))
      length = len(self.tracklet_match_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.tracklet_match_list))
      length = len(self.tracket_loss_match_cnt_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.tracket_loss_match_cnt_list))
      _x = self
      buff.write(_get_struct_4If2I().pack(_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length))
      length = len(self.merged_obj_idx_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.merged_obj_idx_list))
      _x = self
      buff.write(_get_struct_2If4I2iI7f().pack(_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status, _x.lane_location.lane_index, _x.lane_location.lane_id, _x.lane_location.lane_id_debounced, _x.lane_location.debounced_cnt, _x.lane_location.vx_ccs, _x.lane_location.vy_ccs, _x.lane_location.dy_ccs, _x.lane_location.hd_angle_2_lane, _x.lane_location.dy_min, _x.lane_location.dy_max, _x.confidence))
      length = len(self.type_prob)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.type_prob))
      length = len(self.pred_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.pred_traj:
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2
          buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self.intent.type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygon_point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.is_predicted_cutin
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos_vcs is None:
        self.pos_vcs = rospy_message_converter.msg.ObjPos()
      if self.pos_ccs is None:
        self.pos_ccs = rospy_message_converter.msg.ObjPos()
      if self.vel_vcs is None:
        self.vel_vcs = rospy_message_converter.msg.ObjVel()
      if self.vel_ccs is None:
        self.vel_ccs = rospy_message_converter.msg.ObjVel()
      if self.acc is None:
        self.acc = rospy_message_converter.msg.ObjAcc()
      if self.type is None:
        self.type = rospy_message_converter.msg.ObfClassification()
      if self.size is None:
        self.size = rospy_message_converter.msg.ObjSize()
      if self.lane_location is None:
        self.lane_location = rospy_message_converter.msg.ObjLaneLoc()
      if self.pred_traj is None:
        self.pred_traj = None
      if self.intent is None:
        self.intent = rospy_message_converter.msg.ObstacleIntent()
      if self.polygon_point is None:
        self.polygon_point = None
      end = 0
      _x = self
      start = end
      end += 128
      (_x.id, _x.pos_vcs.x, _x.pos_vcs.y, _x.pos_vcs.z, _x.pos_ccs.x, _x.pos_ccs.y, _x.pos_ccs.z, _x.vel_vcs.vx, _x.vel_vcs.vy, _x.vel_vcs.vz, _x.vel_ccs.vx, _x.vel_ccs.vy, _x.vel_ccs.vz, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.object_status, _x.valid_status, _x.type.obj_main_class, _x.type.obj_sub_class, _x.blinker_info, _x.brake_info, _x.age, _x.age_ms, _x.size.length, _x.size.width, _x.size.height, _x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len,) = _get_struct_I15f3iI2i2I7fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tracklet_match_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tracket_loss_match_cnt_list = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length,) = _get_struct_4If2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.merged_obj_idx_list = s.unpack(str[start:end])
      _x = self
      start = end
      end += 68
      (_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status, _x.lane_location.lane_index, _x.lane_location.lane_id, _x.lane_location.lane_id_debounced, _x.lane_location.debounced_cnt, _x.lane_location.vx_ccs, _x.lane_location.vy_ccs, _x.lane_location.dy_ccs, _x.lane_location.hd_angle_2_lane, _x.lane_location.dy_min, _x.lane_location.dy_max, _x.confidence,) = _get_struct_2If4I2iI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.type_prob = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pred_traj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionPathPoint()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
          val1.trajectory.append(val2)
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.pred_traj.append(val1)
      start = end
      end += 4
      (self.intent.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygon_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point3D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.polygon_point.append(val1)
      start = end
      end += 1
      (self.is_predicted_cutin,) = _get_struct_B().unpack(str[start:end])
      self.is_predicted_cutin = bool(self.is_predicted_cutin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I15f3iI2i2I7fI().pack(_x.id, _x.pos_vcs.x, _x.pos_vcs.y, _x.pos_vcs.z, _x.pos_ccs.x, _x.pos_ccs.y, _x.pos_ccs.z, _x.vel_vcs.vx, _x.vel_vcs.vy, _x.vel_vcs.vz, _x.vel_ccs.vx, _x.vel_ccs.vy, _x.vel_ccs.vz, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.object_status, _x.valid_status, _x.type.obj_main_class, _x.type.obj_sub_class, _x.blinker_info, _x.brake_info, _x.age, _x.age_ms, _x.size.length, _x.size.width, _x.size.height, _x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len))
      length = len(self.tracklet_match_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.tracklet_match_list.tostring())
      length = len(self.tracket_loss_match_cnt_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.tracket_loss_match_cnt_list.tostring())
      _x = self
      buff.write(_get_struct_4If2I().pack(_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length))
      length = len(self.merged_obj_idx_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.merged_obj_idx_list.tostring())
      _x = self
      buff.write(_get_struct_2If4I2iI7f().pack(_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status, _x.lane_location.lane_index, _x.lane_location.lane_id, _x.lane_location.lane_id_debounced, _x.lane_location.debounced_cnt, _x.lane_location.vx_ccs, _x.lane_location.vy_ccs, _x.lane_location.dy_ccs, _x.lane_location.hd_angle_2_lane, _x.lane_location.dy_min, _x.lane_location.dy_max, _x.confidence))
      length = len(self.type_prob)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.type_prob.tostring())
      length = len(self.pred_traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.pred_traj:
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          _x = val2
          buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self.intent.type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygon_point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.is_predicted_cutin
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos_vcs is None:
        self.pos_vcs = rospy_message_converter.msg.ObjPos()
      if self.pos_ccs is None:
        self.pos_ccs = rospy_message_converter.msg.ObjPos()
      if self.vel_vcs is None:
        self.vel_vcs = rospy_message_converter.msg.ObjVel()
      if self.vel_ccs is None:
        self.vel_ccs = rospy_message_converter.msg.ObjVel()
      if self.acc is None:
        self.acc = rospy_message_converter.msg.ObjAcc()
      if self.type is None:
        self.type = rospy_message_converter.msg.ObfClassification()
      if self.size is None:
        self.size = rospy_message_converter.msg.ObjSize()
      if self.lane_location is None:
        self.lane_location = rospy_message_converter.msg.ObjLaneLoc()
      if self.pred_traj is None:
        self.pred_traj = None
      if self.intent is None:
        self.intent = rospy_message_converter.msg.ObstacleIntent()
      if self.polygon_point is None:
        self.polygon_point = None
      end = 0
      _x = self
      start = end
      end += 128
      (_x.id, _x.pos_vcs.x, _x.pos_vcs.y, _x.pos_vcs.z, _x.pos_ccs.x, _x.pos_ccs.y, _x.pos_ccs.z, _x.vel_vcs.vx, _x.vel_vcs.vy, _x.vel_vcs.vz, _x.vel_ccs.vx, _x.vel_ccs.vy, _x.vel_ccs.vz, _x.acc.ax, _x.acc.ay, _x.acc.az, _x.object_status, _x.valid_status, _x.type.obj_main_class, _x.type.obj_sub_class, _x.blinker_info, _x.brake_info, _x.age, _x.age_ms, _x.size.length, _x.size.width, _x.size.height, _x.heading, _x.heading_rate, _x.dist_from_left_lane, _x.dist_from_right_lane, _x.tracklet_match_list_len,) = _get_struct_I15f3iI2i2I7fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tracklet_match_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tracket_loss_match_cnt_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 28
      (_x.vision_match_id, _x.vision_match_idx, _x.fusion_source, _x.lost_cnt, _x.angle, _x.moving_cnt, _x.merged_obj_idx_list_length,) = _get_struct_4If2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.merged_obj_idx_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 68
      (_x.motion_category, _x.fusion_source_his, _x.vision_exist_prob, _x.vision_match_cnt, _x.radar_match_cnt, _x.move_status, _x.lane_location.lane_index, _x.lane_location.lane_id, _x.lane_location.lane_id_debounced, _x.lane_location.debounced_cnt, _x.lane_location.vx_ccs, _x.lane_location.vy_ccs, _x.lane_location.dy_ccs, _x.lane_location.hd_angle_2_lane, _x.lane_location.dy_min, _x.lane_location.dy_max, _x.confidence,) = _get_struct_2If4I2iI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.type_prob = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pred_traj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionPathPoint()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
          val1.trajectory.append(val2)
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.pred_traj.append(val1)
      start = end
      end += 4
      (self.intent.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygon_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point3D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.polygon_point.append(val1)
      start = end
      end += 1
      (self.is_predicted_cutin,) = _get_struct_B().unpack(str[start:end])
      self.is_predicted_cutin = bool(self.is_predicted_cutin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If4I2iI7f = None
def _get_struct_2If4I2iI7f():
    global _struct_2If4I2iI7f
    if _struct_2If4I2iI7f is None:
        _struct_2If4I2iI7f = struct.Struct("<2If4I2iI7f")
    return _struct_2If4I2iI7f
_struct_2fi2f = None
def _get_struct_2fi2f():
    global _struct_2fi2f
    if _struct_2fi2f is None:
        _struct_2fi2f = struct.Struct("<2fi2f")
    return _struct_2fi2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4If2I = None
def _get_struct_4If2I():
    global _struct_4If2I
    if _struct_4If2I is None:
        _struct_4If2I = struct.Struct("<4If2I")
    return _struct_4If2I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I15f3iI2i2I7fI = None
def _get_struct_I15f3iI2i2I7fI():
    global _struct_I15f3iI2i2I7fI
    if _struct_I15f3iI2i2I7fI is None:
        _struct_I15f3iI2i2I7fI = struct.Struct("<I15f3iI2i2I7fI")
    return _struct_I15f3iI2i2I7fI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_LaneSemantic.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class esd_LaneSemantic(genpy.Message):
  _md5sum = "b1e4cfd80daa4b12b5e1c225ff5f53ee"
  _type = "rospy_message_converter/esd_LaneSemantic"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 esd_SLD_Direction
uint32 esd_SLD_ID
uint32 esd_SLD_Count
float32 esd_SLD_Lat
float32 esd_SLD_Long
int32 esd_SLD_Orientation
float32 esd_SLD_Orientation_Probability
float32 esd_SLD_Direction_Probability
int32 esd_SLD_Role
int32 esd_SLD_Type
float32 esd_SLD_No_Park_Zone_Lat_0
float32 esd_SLD_No_Park_Zone_Long_0
float32 esd_SLD_No_Park_Zone_Lat_1
float32 esd_SLD_No_Park_Zone_Long_1
float32 esd_SLD_No_Park_Zone_Lat_2
float32 esd_SLD_No_Park_Zone_Long_2
float32 esd_SLD_No_Park_Zone_Lat_3
float32 esd_SLD_No_Park_Zone_Long_3
int32 esd_SLD_Road_Status
"""
  __slots__ = ['esd_SLD_Direction','esd_SLD_ID','esd_SLD_Count','esd_SLD_Lat','esd_SLD_Long','esd_SLD_Orientation','esd_SLD_Orientation_Probability','esd_SLD_Direction_Probability','esd_SLD_Role','esd_SLD_Type','esd_SLD_No_Park_Zone_Lat_0','esd_SLD_No_Park_Zone_Long_0','esd_SLD_No_Park_Zone_Lat_1','esd_SLD_No_Park_Zone_Long_1','esd_SLD_No_Park_Zone_Lat_2','esd_SLD_No_Park_Zone_Long_2','esd_SLD_No_Park_Zone_Lat_3','esd_SLD_No_Park_Zone_Long_3','esd_SLD_Road_Status']
  _slot_types = ['int32','uint32','uint32','float32','float32','int32','float32','float32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_SLD_Direction,esd_SLD_ID,esd_SLD_Count,esd_SLD_Lat,esd_SLD_Long,esd_SLD_Orientation,esd_SLD_Orientation_Probability,esd_SLD_Direction_Probability,esd_SLD_Role,esd_SLD_Type,esd_SLD_No_Park_Zone_Lat_0,esd_SLD_No_Park_Zone_Long_0,esd_SLD_No_Park_Zone_Lat_1,esd_SLD_No_Park_Zone_Long_1,esd_SLD_No_Park_Zone_Lat_2,esd_SLD_No_Park_Zone_Long_2,esd_SLD_No_Park_Zone_Lat_3,esd_SLD_No_Park_Zone_Long_3,esd_SLD_Road_Status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_LaneSemantic, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_SLD_Direction is None:
        self.esd_SLD_Direction = 0
      if self.esd_SLD_ID is None:
        self.esd_SLD_ID = 0
      if self.esd_SLD_Count is None:
        self.esd_SLD_Count = 0
      if self.esd_SLD_Lat is None:
        self.esd_SLD_Lat = 0.
      if self.esd_SLD_Long is None:
        self.esd_SLD_Long = 0.
      if self.esd_SLD_Orientation is None:
        self.esd_SLD_Orientation = 0
      if self.esd_SLD_Orientation_Probability is None:
        self.esd_SLD_Orientation_Probability = 0.
      if self.esd_SLD_Direction_Probability is None:
        self.esd_SLD_Direction_Probability = 0.
      if self.esd_SLD_Role is None:
        self.esd_SLD_Role = 0
      if self.esd_SLD_Type is None:
        self.esd_SLD_Type = 0
      if self.esd_SLD_No_Park_Zone_Lat_0 is None:
        self.esd_SLD_No_Park_Zone_Lat_0 = 0.
      if self.esd_SLD_No_Park_Zone_Long_0 is None:
        self.esd_SLD_No_Park_Zone_Long_0 = 0.
      if self.esd_SLD_No_Park_Zone_Lat_1 is None:
        self.esd_SLD_No_Park_Zone_Lat_1 = 0.
      if self.esd_SLD_No_Park_Zone_Long_1 is None:
        self.esd_SLD_No_Park_Zone_Long_1 = 0.
      if self.esd_SLD_No_Park_Zone_Lat_2 is None:
        self.esd_SLD_No_Park_Zone_Lat_2 = 0.
      if self.esd_SLD_No_Park_Zone_Long_2 is None:
        self.esd_SLD_No_Park_Zone_Long_2 = 0.
      if self.esd_SLD_No_Park_Zone_Lat_3 is None:
        self.esd_SLD_No_Park_Zone_Lat_3 = 0.
      if self.esd_SLD_No_Park_Zone_Long_3 is None:
        self.esd_SLD_No_Park_Zone_Long_3 = 0.
      if self.esd_SLD_Road_Status is None:
        self.esd_SLD_Road_Status = 0
    else:
      self.esd_SLD_Direction = 0
      self.esd_SLD_ID = 0
      self.esd_SLD_Count = 0
      self.esd_SLD_Lat = 0.
      self.esd_SLD_Long = 0.
      self.esd_SLD_Orientation = 0
      self.esd_SLD_Orientation_Probability = 0.
      self.esd_SLD_Direction_Probability = 0.
      self.esd_SLD_Role = 0
      self.esd_SLD_Type = 0
      self.esd_SLD_No_Park_Zone_Lat_0 = 0.
      self.esd_SLD_No_Park_Zone_Long_0 = 0.
      self.esd_SLD_No_Park_Zone_Lat_1 = 0.
      self.esd_SLD_No_Park_Zone_Long_1 = 0.
      self.esd_SLD_No_Park_Zone_Lat_2 = 0.
      self.esd_SLD_No_Park_Zone_Long_2 = 0.
      self.esd_SLD_No_Park_Zone_Lat_3 = 0.
      self.esd_SLD_No_Park_Zone_Long_3 = 0.
      self.esd_SLD_Road_Status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.esd_SLD_Direction, _x.esd_SLD_ID, _x.esd_SLD_Count, _x.esd_SLD_Lat, _x.esd_SLD_Long, _x.esd_SLD_Orientation, _x.esd_SLD_Orientation_Probability, _x.esd_SLD_Direction_Probability, _x.esd_SLD_Role, _x.esd_SLD_Type, _x.esd_SLD_No_Park_Zone_Lat_0, _x.esd_SLD_No_Park_Zone_Long_0, _x.esd_SLD_No_Park_Zone_Lat_1, _x.esd_SLD_No_Park_Zone_Long_1, _x.esd_SLD_No_Park_Zone_Lat_2, _x.esd_SLD_No_Park_Zone_Long_2, _x.esd_SLD_No_Park_Zone_Lat_3, _x.esd_SLD_No_Park_Zone_Long_3, _x.esd_SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2I2fi2f2i8fi = None
def _get_struct_i2I2fi2f2i8fi():
    global _struct_i2I2fi2f2i8fi
    if _struct_i2I2fi2f2i8fi is None:
        _struct_i2I2fi2f2i8fi = struct.Struct("<i2I2fi2f2i8fi")
    return _struct_i2I2fi2f2i8fi

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ADCTrajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ADCTrajectory(genpy.Message):
  _md5sum = "d84e53e6363e1baad1e477f1e021fa66"
  _type = "rospy_message_converter/ADCTrajectory"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 total_path_length
float64 total_path_time
EStop estop
bool is_replan
string replan_reason
TrajectoryPoint[] trajectory_point
int32 trajectory_type
bool is_finished
string stage
string info
int32 stage_info

================================================================================
MSG: rospy_message_converter/EStop
bool is_estop
string reason

================================================================================
MSG: rospy_message_converter/TrajectoryPoint
PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a
"""
  __slots__ = ['total_path_length','total_path_time','estop','is_replan','replan_reason','trajectory_point','trajectory_type','is_finished','stage','info','stage_info']
  _slot_types = ['float64','float64','rospy_message_converter/EStop','bool','string','rospy_message_converter/TrajectoryPoint[]','int32','bool','string','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       total_path_length,total_path_time,estop,is_replan,replan_reason,trajectory_point,trajectory_type,is_finished,stage,info,stage_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADCTrajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.total_path_length is None:
        self.total_path_length = 0.
      if self.total_path_time is None:
        self.total_path_time = 0.
      if self.estop is None:
        self.estop = rospy_message_converter.msg.EStop()
      if self.is_replan is None:
        self.is_replan = False
      if self.replan_reason is None:
        self.replan_reason = ''
      if self.trajectory_point is None:
        self.trajectory_point = []
      if self.trajectory_type is None:
        self.trajectory_type = 0
      if self.is_finished is None:
        self.is_finished = False
      if self.stage is None:
        self.stage = ''
      if self.info is None:
        self.info = ''
      if self.stage_info is None:
        self.stage_info = 0
    else:
      self.total_path_length = 0.
      self.total_path_time = 0.
      self.estop = rospy_message_converter.msg.EStop()
      self.is_replan = False
      self.replan_reason = ''
      self.trajectory_point = []
      self.trajectory_type = 0
      self.is_finished = False
      self.stage = ''
      self.info = ''
      self.stage_info = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2dB().pack(_x.total_path_length, _x.total_path_time, _x.estop.is_estop))
      _x = self.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_replan
      buff.write(_get_struct_B().pack(_x))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_point:
        _v1 = val1.path_point
        _x = _v1
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
        _x = _v1.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
        _v2 = val1.gaussian_info
        _x = _v2
        buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
        _x = val1.gear
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
      _x = self.stage
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stage_info
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.estop is None:
        self.estop = rospy_message_converter.msg.EStop()
      if self.trajectory_point is None:
        self.trajectory_point = None
      end = 0
      _x = self
      start = end
      end += 17
      (_x.total_path_length, _x.total_path_time, _x.estop.is_estop,) = _get_struct_2dB().unpack(str[start:end])
      self.estop.is_estop = bool(self.estop.is_estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estop.reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estop.reason = str[start:end]
      start = end
      end += 1
      (self.is_replan,) = _get_struct_B().unpack(str[start:end])
      self.is_replan = bool(self.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajectoryPoint()
        _v3 = val1.path_point
        _x = _v3
        start = end
        end += 64
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.lane_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.lane_id = str[start:end]
        _x = _v3
        start = end
        end += 16
        (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
        _v4 = val1.gaussian_info
        _x = _v4
        start = end
        end += 56
        (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
        start = end
        end += 4
        (val1.gear,) = _get_struct_i().unpack(str[start:end])
        self.trajectory_point.append(val1)
      _x = self
      start = end
      end += 5
      (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
      self.is_finished = bool(self.is_finished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stage = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stage = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      start = end
      end += 4
      (self.stage_info,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2dB().pack(_x.total_path_length, _x.total_path_time, _x.estop.is_estop))
      _x = self.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_replan
      buff.write(_get_struct_B().pack(_x))
      _x = self.replan_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_point:
        _v5 = val1.path_point
        _x = _v5
        buff.write(_get_struct_8d().pack(_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa))
        _x = _v5.lane_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5
        buff.write(_get_struct_2d().pack(_x.x_derivative, _x.y_derivative))
        _x = val1
        buff.write(_get_struct_5d().pack(_x.v, _x.a, _x.relative_time, _x.da, _x.steer))
        _v6 = val1.gaussian_info
        _x = _v6
        buff.write(_get_struct_7d().pack(_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a))
        _x = val1.gear
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.trajectory_type, _x.is_finished))
      _x = self.stage
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stage_info
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.estop is None:
        self.estop = rospy_message_converter.msg.EStop()
      if self.trajectory_point is None:
        self.trajectory_point = None
      end = 0
      _x = self
      start = end
      end += 17
      (_x.total_path_length, _x.total_path_time, _x.estop.is_estop,) = _get_struct_2dB().unpack(str[start:end])
      self.estop.is_estop = bool(self.estop.is_estop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estop.reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estop.reason = str[start:end]
      start = end
      end += 1
      (self.is_replan,) = _get_struct_B().unpack(str[start:end])
      self.is_replan = bool(self.is_replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.replan_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.replan_reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajectoryPoint()
        _v7 = val1.path_point
        _x = _v7
        start = end
        end += 64
        (_x.x, _x.y, _x.z, _x.theta, _x.kappa, _x.s, _x.dkappa, _x.ddkappa,) = _get_struct_8d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.lane_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.lane_id = str[start:end]
        _x = _v7
        start = end
        end += 16
        (_x.x_derivative, _x.y_derivative,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.v, _x.a, _x.relative_time, _x.da, _x.steer,) = _get_struct_5d().unpack(str[start:end])
        _v8 = val1.gaussian_info
        _x = _v8
        start = end
        end += 56
        (_x.sigma_x, _x.sigma_y, _x.correlation, _x.area_probability, _x.ellipse_a, _x.ellipse_b, _x.theta_a,) = _get_struct_7d().unpack(str[start:end])
        start = end
        end += 4
        (val1.gear,) = _get_struct_i().unpack(str[start:end])
        self.trajectory_point.append(val1)
      _x = self
      start = end
      end += 5
      (_x.trajectory_type, _x.is_finished,) = _get_struct_iB().unpack(str[start:end])
      self.is_finished = bool(self.is_finished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stage = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stage = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.info = str[start:end]
      start = end
      end += 4
      (self.stage_info,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DrilInnerInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DrilInnerInfo(genpy.Message):
  _md5sum = "5ba14ec678f61cbe39f5ad7613bf8a57"
  _type = "rospy_message_converter/DrilInnerInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """DriverAction driverAction
float32 dirverIntvFactor
float32 dirverStrFactor
bool isDirverFocuseOnMaxDelay
bool isDriverAcc2Overtake
bool isDriverAvoidanceObj
bool isDriverChgPedlAct
bool isDriverDecelAvoid
bool isDriverTurnning
DriAvdObjInfo driAvdObjInfo

================================================================================
MSG: rospy_message_converter/DriverAction
bool isObjChange
bool isDriverStrAction
bool isDriAccPedalAction

================================================================================
MSG: rospy_message_converter/DriAvdObjInfo
bool objCrvtAbsReqLeBigger
float32 objCrvtAbsReqLe
float32 objCrvtAbsReqRi
"""
  __slots__ = ['driverAction','dirverIntvFactor','dirverStrFactor','isDirverFocuseOnMaxDelay','isDriverAcc2Overtake','isDriverAvoidanceObj','isDriverChgPedlAct','isDriverDecelAvoid','isDriverTurnning','driAvdObjInfo']
  _slot_types = ['rospy_message_converter/DriverAction','float32','float32','bool','bool','bool','bool','bool','bool','rospy_message_converter/DriAvdObjInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       driverAction,dirverIntvFactor,dirverStrFactor,isDirverFocuseOnMaxDelay,isDriverAcc2Overtake,isDriverAvoidanceObj,isDriverChgPedlAct,isDriverDecelAvoid,isDriverTurnning,driAvdObjInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DrilInnerInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.driverAction is None:
        self.driverAction = rospy_message_converter.msg.DriverAction()
      if self.dirverIntvFactor is None:
        self.dirverIntvFactor = 0.
      if self.dirverStrFactor is None:
        self.dirverStrFactor = 0.
      if self.isDirverFocuseOnMaxDelay is None:
        self.isDirverFocuseOnMaxDelay = False
      if self.isDriverAcc2Overtake is None:
        self.isDriverAcc2Overtake = False
      if self.isDriverAvoidanceObj is None:
        self.isDriverAvoidanceObj = False
      if self.isDriverChgPedlAct is None:
        self.isDriverChgPedlAct = False
      if self.isDriverDecelAvoid is None:
        self.isDriverDecelAvoid = False
      if self.isDriverTurnning is None:
        self.isDriverTurnning = False
      if self.driAvdObjInfo is None:
        self.driAvdObjInfo = rospy_message_converter.msg.DriAvdObjInfo()
    else:
      self.driverAction = rospy_message_converter.msg.DriverAction()
      self.dirverIntvFactor = 0.
      self.dirverStrFactor = 0.
      self.isDirverFocuseOnMaxDelay = False
      self.isDriverAcc2Overtake = False
      self.isDriverAvoidanceObj = False
      self.isDriverChgPedlAct = False
      self.isDriverDecelAvoid = False
      self.isDriverTurnning = False
      self.driAvdObjInfo = rospy_message_converter.msg.DriAvdObjInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B2f7B2f().pack(_x.driverAction.isObjChange, _x.driverAction.isDriverStrAction, _x.driverAction.isDriAccPedalAction, _x.dirverIntvFactor, _x.dirverStrFactor, _x.isDirverFocuseOnMaxDelay, _x.isDriverAcc2Overtake, _x.isDriverAvoidanceObj, _x.isDriverChgPedlAct, _x.isDriverDecelAvoid, _x.isDriverTurnning, _x.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.driAvdObjInfo.objCrvtAbsReqLe, _x.driAvdObjInfo.objCrvtAbsReqRi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.driverAction is None:
        self.driverAction = rospy_message_converter.msg.DriverAction()
      if self.driAvdObjInfo is None:
        self.driAvdObjInfo = rospy_message_converter.msg.DriAvdObjInfo()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.driverAction.isObjChange, _x.driverAction.isDriverStrAction, _x.driverAction.isDriAccPedalAction, _x.dirverIntvFactor, _x.dirverStrFactor, _x.isDirverFocuseOnMaxDelay, _x.isDriverAcc2Overtake, _x.isDriverAvoidanceObj, _x.isDriverChgPedlAct, _x.isDriverDecelAvoid, _x.isDriverTurnning, _x.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.driAvdObjInfo.objCrvtAbsReqLe, _x.driAvdObjInfo.objCrvtAbsReqRi,) = _get_struct_3B2f7B2f().unpack(str[start:end])
      self.driverAction.isObjChange = bool(self.driverAction.isObjChange)
      self.driverAction.isDriverStrAction = bool(self.driverAction.isDriverStrAction)
      self.driverAction.isDriAccPedalAction = bool(self.driverAction.isDriAccPedalAction)
      self.isDirverFocuseOnMaxDelay = bool(self.isDirverFocuseOnMaxDelay)
      self.isDriverAcc2Overtake = bool(self.isDriverAcc2Overtake)
      self.isDriverAvoidanceObj = bool(self.isDriverAvoidanceObj)
      self.isDriverChgPedlAct = bool(self.isDriverChgPedlAct)
      self.isDriverDecelAvoid = bool(self.isDriverDecelAvoid)
      self.isDriverTurnning = bool(self.isDriverTurnning)
      self.driAvdObjInfo.objCrvtAbsReqLeBigger = bool(self.driAvdObjInfo.objCrvtAbsReqLeBigger)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B2f7B2f().pack(_x.driverAction.isObjChange, _x.driverAction.isDriverStrAction, _x.driverAction.isDriAccPedalAction, _x.dirverIntvFactor, _x.dirverStrFactor, _x.isDirverFocuseOnMaxDelay, _x.isDriverAcc2Overtake, _x.isDriverAvoidanceObj, _x.isDriverChgPedlAct, _x.isDriverDecelAvoid, _x.isDriverTurnning, _x.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.driAvdObjInfo.objCrvtAbsReqLe, _x.driAvdObjInfo.objCrvtAbsReqRi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.driverAction is None:
        self.driverAction = rospy_message_converter.msg.DriverAction()
      if self.driAvdObjInfo is None:
        self.driAvdObjInfo = rospy_message_converter.msg.DriAvdObjInfo()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.driverAction.isObjChange, _x.driverAction.isDriverStrAction, _x.driverAction.isDriAccPedalAction, _x.dirverIntvFactor, _x.dirverStrFactor, _x.isDirverFocuseOnMaxDelay, _x.isDriverAcc2Overtake, _x.isDriverAvoidanceObj, _x.isDriverChgPedlAct, _x.isDriverDecelAvoid, _x.isDriverTurnning, _x.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.driAvdObjInfo.objCrvtAbsReqLe, _x.driAvdObjInfo.objCrvtAbsReqRi,) = _get_struct_3B2f7B2f().unpack(str[start:end])
      self.driverAction.isObjChange = bool(self.driverAction.isObjChange)
      self.driverAction.isDriverStrAction = bool(self.driverAction.isDriverStrAction)
      self.driverAction.isDriAccPedalAction = bool(self.driverAction.isDriAccPedalAction)
      self.isDirverFocuseOnMaxDelay = bool(self.isDirverFocuseOnMaxDelay)
      self.isDriverAcc2Overtake = bool(self.isDriverAcc2Overtake)
      self.isDriverAvoidanceObj = bool(self.isDriverAvoidanceObj)
      self.isDriverChgPedlAct = bool(self.isDriverChgPedlAct)
      self.isDriverDecelAvoid = bool(self.isDriverDecelAvoid)
      self.isDriverTurnning = bool(self.isDriverTurnning)
      self.driAvdObjInfo.objCrvtAbsReqLeBigger = bool(self.driAvdObjInfo.objCrvtAbsReqLeBigger)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B2f7B2f = None
def _get_struct_3B2f7B2f():
    global _struct_3B2f7B2f
    if _struct_3B2f7B2f is None:
        _struct_3B2f7B2f = struct.Struct("<3B2f7B2f")
    return _struct_3B2f7B2f

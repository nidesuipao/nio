# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdRoadGeoLine.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdRoadGeoLine(genpy.Message):
  _md5sum = "4fdad5a4bde2f2edfaad4aedaa6156b3"
  _type = "rospy_message_converter/HdRoadGeoLine"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 id
uint64 link_id
MapPolyline shape_point
float64[] curvature
float64[] slope
float64[] heading
float64[] shape_point_offset

================================================================================
MSG: rospy_message_converter/MapPolyline
float64[] x
float64[] y
float64[] z
"""
  __slots__ = ['id','link_id','shape_point','curvature','slope','heading','shape_point_offset']
  _slot_types = ['uint64','uint64','rospy_message_converter/MapPolyline','float64[]','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,link_id,shape_point,curvature,slope,heading,shape_point_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdRoadGeoLine, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.link_id is None:
        self.link_id = 0
      if self.shape_point is None:
        self.shape_point = rospy_message_converter.msg.MapPolyline()
      if self.curvature is None:
        self.curvature = []
      if self.slope is None:
        self.slope = []
      if self.heading is None:
        self.heading = []
      if self.shape_point_offset is None:
        self.shape_point_offset = []
    else:
      self.id = 0
      self.link_id = 0
      self.shape_point = rospy_message_converter.msg.MapPolyline()
      self.curvature = []
      self.slope = []
      self.heading = []
      self.shape_point_offset = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Q().pack(_x.id, _x.link_id))
      length = len(self.shape_point.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.shape_point.x))
      length = len(self.shape_point.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.shape_point.y))
      length = len(self.shape_point.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.shape_point.z))
      length = len(self.curvature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.curvature))
      length = len(self.slope)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.slope))
      length = len(self.heading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.heading))
      length = len(self.shape_point_offset)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.shape_point_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.shape_point is None:
        self.shape_point = rospy_message_converter.msg.MapPolyline()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.link_id,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point.x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point.y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point.z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.curvature = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.slope = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.heading = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point_offset = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Q().pack(_x.id, _x.link_id))
      length = len(self.shape_point.x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shape_point.x.tostring())
      length = len(self.shape_point.y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shape_point.y.tostring())
      length = len(self.shape_point.z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shape_point.z.tostring())
      length = len(self.curvature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.curvature.tostring())
      length = len(self.slope)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.slope.tostring())
      length = len(self.heading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.heading.tostring())
      length = len(self.shape_point_offset)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shape_point_offset.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.shape_point is None:
        self.shape_point = rospy_message_converter.msg.MapPolyline()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id, _x.link_id,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.curvature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.slope = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.heading = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.shape_point_offset = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q

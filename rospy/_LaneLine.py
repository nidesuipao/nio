# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LaneLine.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class LaneLine(genpy.Message):
  _md5sum = "f07607099e3b1786944405a112029cc3"
  _type = "rospy_message_converter/LaneLine"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 LD_Role
LineProperty LD_First_Line
bool LD_Is_Multi_Clothoid
LineProperty LD_Second_Line
bool LD_Special_Point_Is_Detected
int32 LD_Special_Point_Type
Point LD_Special_Point
Point[] LD_Point
float32 LD_Dash_Average_Gap
float32 LD_Dash_Average_Length
bool LD_Crossing
uint32 LD_Crossing_ID
int32 LD_Measuring_Status
int32 LD_Prediction_Reason
uint32 LD_Track_ID
uint32 LD_Track_Age
int32 LD_Quality
float32 LD_Confidence
float32 LD_Marker_Width

================================================================================
MSG: rospy_message_converter/LineProperty
int32 LD_Type
int32 LD_Color
PolyLine LD_Line
float32 LD_Start
float32 LD_End
int32 LD_End_Reason

================================================================================
MSG: rospy_message_converter/PolyLine
float32 line_C0
float32 line_C1
float32 line_C2
float32 line_C3

================================================================================
MSG: rospy_message_converter/Point
float32 LD_Point_Lat
float32 LD_Point_Long
float32 LD_Point_Alti
"""
  __slots__ = ['LD_Role','LD_First_Line','LD_Is_Multi_Clothoid','LD_Second_Line','LD_Special_Point_Is_Detected','LD_Special_Point_Type','LD_Special_Point','LD_Point','LD_Dash_Average_Gap','LD_Dash_Average_Length','LD_Crossing','LD_Crossing_ID','LD_Measuring_Status','LD_Prediction_Reason','LD_Track_ID','LD_Track_Age','LD_Quality','LD_Confidence','LD_Marker_Width']
  _slot_types = ['int32','rospy_message_converter/LineProperty','bool','rospy_message_converter/LineProperty','bool','int32','rospy_message_converter/Point','rospy_message_converter/Point[]','float32','float32','bool','uint32','int32','int32','uint32','uint32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LD_Role,LD_First_Line,LD_Is_Multi_Clothoid,LD_Second_Line,LD_Special_Point_Is_Detected,LD_Special_Point_Type,LD_Special_Point,LD_Point,LD_Dash_Average_Gap,LD_Dash_Average_Length,LD_Crossing,LD_Crossing_ID,LD_Measuring_Status,LD_Prediction_Reason,LD_Track_ID,LD_Track_Age,LD_Quality,LD_Confidence,LD_Marker_Width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneLine, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LD_Role is None:
        self.LD_Role = 0
      if self.LD_First_Line is None:
        self.LD_First_Line = rospy_message_converter.msg.LineProperty()
      if self.LD_Is_Multi_Clothoid is None:
        self.LD_Is_Multi_Clothoid = False
      if self.LD_Second_Line is None:
        self.LD_Second_Line = rospy_message_converter.msg.LineProperty()
      if self.LD_Special_Point_Is_Detected is None:
        self.LD_Special_Point_Is_Detected = False
      if self.LD_Special_Point_Type is None:
        self.LD_Special_Point_Type = 0
      if self.LD_Special_Point is None:
        self.LD_Special_Point = rospy_message_converter.msg.Point()
      if self.LD_Point is None:
        self.LD_Point = []
      if self.LD_Dash_Average_Gap is None:
        self.LD_Dash_Average_Gap = 0.
      if self.LD_Dash_Average_Length is None:
        self.LD_Dash_Average_Length = 0.
      if self.LD_Crossing is None:
        self.LD_Crossing = False
      if self.LD_Crossing_ID is None:
        self.LD_Crossing_ID = 0
      if self.LD_Measuring_Status is None:
        self.LD_Measuring_Status = 0
      if self.LD_Prediction_Reason is None:
        self.LD_Prediction_Reason = 0
      if self.LD_Track_ID is None:
        self.LD_Track_ID = 0
      if self.LD_Track_Age is None:
        self.LD_Track_Age = 0
      if self.LD_Quality is None:
        self.LD_Quality = 0
      if self.LD_Confidence is None:
        self.LD_Confidence = 0.
      if self.LD_Marker_Width is None:
        self.LD_Marker_Width = 0.
    else:
      self.LD_Role = 0
      self.LD_First_Line = rospy_message_converter.msg.LineProperty()
      self.LD_Is_Multi_Clothoid = False
      self.LD_Second_Line = rospy_message_converter.msg.LineProperty()
      self.LD_Special_Point_Is_Detected = False
      self.LD_Special_Point_Type = 0
      self.LD_Special_Point = rospy_message_converter.msg.Point()
      self.LD_Point = []
      self.LD_Dash_Average_Gap = 0.
      self.LD_Dash_Average_Length = 0.
      self.LD_Crossing = False
      self.LD_Crossing_ID = 0
      self.LD_Measuring_Status = 0
      self.LD_Prediction_Reason = 0
      self.LD_Track_ID = 0
      self.LD_Track_Age = 0
      self.LD_Quality = 0
      self.LD_Confidence = 0.
      self.LD_Marker_Width = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i6fiB2i6fiBi3f().pack(_x.LD_Role, _x.LD_First_Line.LD_Type, _x.LD_First_Line.LD_Color, _x.LD_First_Line.LD_Line.line_C0, _x.LD_First_Line.LD_Line.line_C1, _x.LD_First_Line.LD_Line.line_C2, _x.LD_First_Line.LD_Line.line_C3, _x.LD_First_Line.LD_Start, _x.LD_First_Line.LD_End, _x.LD_First_Line.LD_End_Reason, _x.LD_Is_Multi_Clothoid, _x.LD_Second_Line.LD_Type, _x.LD_Second_Line.LD_Color, _x.LD_Second_Line.LD_Line.line_C0, _x.LD_Second_Line.LD_Line.line_C1, _x.LD_Second_Line.LD_Line.line_C2, _x.LD_Second_Line.LD_Line.line_C3, _x.LD_Second_Line.LD_Start, _x.LD_Second_Line.LD_End, _x.LD_Second_Line.LD_End_Reason, _x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type, _x.LD_Special_Point.LD_Point_Lat, _x.LD_Special_Point.LD_Point_Long, _x.LD_Special_Point.LD_Point_Alti))
      length = len(self.LD_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.LD_Point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
      _x = self
      buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LD_First_Line is None:
        self.LD_First_Line = rospy_message_converter.msg.LineProperty()
      if self.LD_Second_Line is None:
        self.LD_Second_Line = rospy_message_converter.msg.LineProperty()
      if self.LD_Special_Point is None:
        self.LD_Special_Point = rospy_message_converter.msg.Point()
      if self.LD_Point is None:
        self.LD_Point = None
      end = 0
      _x = self
      start = end
      end += 94
      (_x.LD_Role, _x.LD_First_Line.LD_Type, _x.LD_First_Line.LD_Color, _x.LD_First_Line.LD_Line.line_C0, _x.LD_First_Line.LD_Line.line_C1, _x.LD_First_Line.LD_Line.line_C2, _x.LD_First_Line.LD_Line.line_C3, _x.LD_First_Line.LD_Start, _x.LD_First_Line.LD_End, _x.LD_First_Line.LD_End_Reason, _x.LD_Is_Multi_Clothoid, _x.LD_Second_Line.LD_Type, _x.LD_Second_Line.LD_Color, _x.LD_Second_Line.LD_Line.line_C0, _x.LD_Second_Line.LD_Line.line_C1, _x.LD_Second_Line.LD_Line.line_C2, _x.LD_Second_Line.LD_Line.line_C3, _x.LD_Second_Line.LD_Start, _x.LD_Second_Line.LD_End, _x.LD_Second_Line.LD_End_Reason, _x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type, _x.LD_Special_Point.LD_Point_Lat, _x.LD_Special_Point.LD_Point_Long, _x.LD_Special_Point.LD_Point_Alti,) = _get_struct_3i6fiB2i6fiBi3f().unpack(str[start:end])
      self.LD_Is_Multi_Clothoid = bool(self.LD_Is_Multi_Clothoid)
      self.LD_Special_Point_Is_Detected = bool(self.LD_Special_Point_Is_Detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.LD_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        self.LD_Point.append(val1)
      _x = self
      start = end
      end += 41
      (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
      self.LD_Crossing = bool(self.LD_Crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i6fiB2i6fiBi3f().pack(_x.LD_Role, _x.LD_First_Line.LD_Type, _x.LD_First_Line.LD_Color, _x.LD_First_Line.LD_Line.line_C0, _x.LD_First_Line.LD_Line.line_C1, _x.LD_First_Line.LD_Line.line_C2, _x.LD_First_Line.LD_Line.line_C3, _x.LD_First_Line.LD_Start, _x.LD_First_Line.LD_End, _x.LD_First_Line.LD_End_Reason, _x.LD_Is_Multi_Clothoid, _x.LD_Second_Line.LD_Type, _x.LD_Second_Line.LD_Color, _x.LD_Second_Line.LD_Line.line_C0, _x.LD_Second_Line.LD_Line.line_C1, _x.LD_Second_Line.LD_Line.line_C2, _x.LD_Second_Line.LD_Line.line_C3, _x.LD_Second_Line.LD_Start, _x.LD_Second_Line.LD_End, _x.LD_Second_Line.LD_End_Reason, _x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type, _x.LD_Special_Point.LD_Point_Lat, _x.LD_Special_Point.LD_Point_Long, _x.LD_Special_Point.LD_Point_Alti))
      length = len(self.LD_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.LD_Point:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
      _x = self
      buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.LD_First_Line is None:
        self.LD_First_Line = rospy_message_converter.msg.LineProperty()
      if self.LD_Second_Line is None:
        self.LD_Second_Line = rospy_message_converter.msg.LineProperty()
      if self.LD_Special_Point is None:
        self.LD_Special_Point = rospy_message_converter.msg.Point()
      if self.LD_Point is None:
        self.LD_Point = None
      end = 0
      _x = self
      start = end
      end += 94
      (_x.LD_Role, _x.LD_First_Line.LD_Type, _x.LD_First_Line.LD_Color, _x.LD_First_Line.LD_Line.line_C0, _x.LD_First_Line.LD_Line.line_C1, _x.LD_First_Line.LD_Line.line_C2, _x.LD_First_Line.LD_Line.line_C3, _x.LD_First_Line.LD_Start, _x.LD_First_Line.LD_End, _x.LD_First_Line.LD_End_Reason, _x.LD_Is_Multi_Clothoid, _x.LD_Second_Line.LD_Type, _x.LD_Second_Line.LD_Color, _x.LD_Second_Line.LD_Line.line_C0, _x.LD_Second_Line.LD_Line.line_C1, _x.LD_Second_Line.LD_Line.line_C2, _x.LD_Second_Line.LD_Line.line_C3, _x.LD_Second_Line.LD_Start, _x.LD_Second_Line.LD_End, _x.LD_Second_Line.LD_End_Reason, _x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type, _x.LD_Special_Point.LD_Point_Lat, _x.LD_Special_Point.LD_Point_Long, _x.LD_Special_Point.LD_Point_Alti,) = _get_struct_3i6fiB2i6fiBi3f().unpack(str[start:end])
      self.LD_Is_Multi_Clothoid = bool(self.LD_Is_Multi_Clothoid)
      self.LD_Special_Point_Is_Detected = bool(self.LD_Special_Point_Is_Detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.LD_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Point()
        _x = val1
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        self.LD_Point.append(val1)
      _x = self
      start = end
      end += 41
      (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
      self.LD_Crossing = bool(self.LD_Crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i6fiB2i6fiBi3f = None
def _get_struct_3i6fiB2i6fiBi3f():
    global _struct_3i6fiB2i6fiBi3f
    if _struct_3i6fiB2i6fiBi3f is None:
        _struct_3i6fiB2i6fiBi3f = struct.Struct("<3i6fiB2i6fiBi3f")
    return _struct_3i6fiB2i6fiBi3f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/NavTurnInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavTurnInfo(genpy.Message):
  _md5sum = "81b94a2332f292fac54c8dd74491e146"
  _type = "rospy_message_converter/NavTurnInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 dist_to_first_turn
uint64 first_turn_info
uint64 dist_to_second_turn
uint64 second_turn_info
uint64[] lanenr_info
"""
  __slots__ = ['dist_to_first_turn','first_turn_info','dist_to_second_turn','second_turn_info','lanenr_info']
  _slot_types = ['uint64','uint64','uint64','uint64','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dist_to_first_turn,first_turn_info,dist_to_second_turn,second_turn_info,lanenr_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavTurnInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dist_to_first_turn is None:
        self.dist_to_first_turn = 0
      if self.first_turn_info is None:
        self.first_turn_info = 0
      if self.dist_to_second_turn is None:
        self.dist_to_second_turn = 0
      if self.second_turn_info is None:
        self.second_turn_info = 0
      if self.lanenr_info is None:
        self.lanenr_info = []
    else:
      self.dist_to_first_turn = 0
      self.first_turn_info = 0
      self.dist_to_second_turn = 0
      self.second_turn_info = 0
      self.lanenr_info = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4Q().pack(_x.dist_to_first_turn, _x.first_turn_info, _x.dist_to_second_turn, _x.second_turn_info))
      length = len(self.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.lanenr_info))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.dist_to_first_turn, _x.first_turn_info, _x.dist_to_second_turn, _x.second_turn_info,) = _get_struct_4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lanenr_info = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4Q().pack(_x.dist_to_first_turn, _x.first_turn_info, _x.dist_to_second_turn, _x.second_turn_info))
      length = len(self.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.lanenr_info.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.dist_to_first_turn, _x.first_turn_info, _x.dist_to_second_turn, _x.second_turn_info,) = _get_struct_4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lanenr_info = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4Q = None
def _get_struct_4Q():
    global _struct_4Q
    if _struct_4Q is None:
        _struct_4Q = struct.Struct("<4Q")
    return _struct_4Q

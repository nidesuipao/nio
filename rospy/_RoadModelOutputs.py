# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RoadModelOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RoadModelOutputs(genpy.Message):
  _md5sum = "b48cae2acb71f4fba3e2801fb90feeda"
  _type = "rospy_message_converter/RoadModelOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
LineInfo[] line_infos
ObjectInfo[] object_infos
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LineInfo
int32 role
uint32 id
uint32 ori_track_id
float32 c0
float32 c1
float32 c2
float32 c3
float32 start
float32 end
Point3D[] points

================================================================================
MSG: rospy_message_converter/Point3D
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ObjectInfo
uint32 id
uint32 ori_track_id
Point3D[] points
"""
  __slots__ = ['timestamp','line_infos','object_infos','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['uint64','rospy_message_converter/LineInfo[]','rospy_message_converter/ObjectInfo[]','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,line_infos,object_infos,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadModelOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.line_infos is None:
        self.line_infos = []
      if self.object_infos is None:
        self.object_infos = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.timestamp = 0
      self.line_infos = []
      self.object_infos = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.line_infos)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_infos:
        _x = val1
        buff.write(_get_struct_i2I6f().pack(_x.role, _x.id, _x.ori_track_id, _x.c0, _x.c1, _x.c2, _x.c3, _x.start, _x.end))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.object_infos)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_infos:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.ori_track_id))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.line_infos is None:
        self.line_infos = None
      if self.object_infos is None:
        self.object_infos = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_infos = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LineInfo()
        _x = val1
        start = end
        end += 36
        (_x.role, _x.id, _x.ori_track_id, _x.c0, _x.c1, _x.c2, _x.c3, _x.start, _x.end,) = _get_struct_i2I6f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point3D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.points.append(val2)
        self.line_infos.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_infos = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjectInfo()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.ori_track_id,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point3D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.points.append(val2)
        self.object_infos.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.line_infos)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_infos:
        _x = val1
        buff.write(_get_struct_i2I6f().pack(_x.role, _x.id, _x.ori_track_id, _x.c0, _x.c1, _x.c2, _x.c3, _x.start, _x.end))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.object_infos)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_infos:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.ori_track_id))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.line_infos is None:
        self.line_infos = None
      if self.object_infos is None:
        self.object_infos = None
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_infos = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LineInfo()
        _x = val1
        start = end
        end += 36
        (_x.role, _x.id, _x.ori_track_id, _x.c0, _x.c1, _x.c2, _x.c3, _x.start, _x.end,) = _get_struct_i2I6f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point3D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.points.append(val2)
        self.line_infos.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_infos = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjectInfo()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.ori_track_id,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point3D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.points.append(val2)
        self.object_infos.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_i2I6f = None
def _get_struct_i2I6f():
    global _struct_i2I6f
    if _struct_i2I6f is None:
        _struct_i2I6f = struct.Struct("<i2I6f")
    return _struct_i2I6f

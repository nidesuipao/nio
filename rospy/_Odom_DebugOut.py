# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/Odom_DebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Odom_DebugOut(genpy.Message):
  _md5sum = "2cfc534807e2059a9cdd22e43a52aaf0"
  _type = "rospy_message_converter/Odom_DebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 Odom_WheelEncoder_left_rear_wheel_encoder
uint32 Odom_WheelEncoder_right_rear_wheel_encoder
uint32 Odom_WheelEncoder_left_rear_wheel_speed_dir
uint32 Odom_WheelEncoder_right_rear_wheel_speed_dir
float32 Odom_WheelEncoder_delta_length_rl
float32 Odom_WheelEncoder_delta_length_rr
int32 Odom_WheelEncoder_speed_direction
float32 Odom_WheelEncoder_current_curvature
float32 Odom_WheelEncoder_eps_sign
float32 Odom_WheelEncoder_delta_s
float32 Odom_WheelEncoder_moved_dist
int32 Odom_Imu_zone_number
float64 Odom_Imu_lon_center_utm
bool Odom_Imu_init_status
float64 Odom_Imu_origin_latitude
float64 Odom_Imu_origin_longitude
float64 Odom_Imu_origin_azimuth
float32 Odom_Imu_origin_x
float32 Odom_Imu_origin_y
float32 Odom_Imu_origin_z
float32 Odom_Imu_origin_roll
float32 Odom_Imu_origin_pitch
float32 Odom_Imu_origin_yaw
float64 Odom_Imu_current_latitude
float64 Odom_Imu_current_longitude
float64 Odom_Imu_current_azimuth
"""
  __slots__ = ['Odom_WheelEncoder_left_rear_wheel_encoder','Odom_WheelEncoder_right_rear_wheel_encoder','Odom_WheelEncoder_left_rear_wheel_speed_dir','Odom_WheelEncoder_right_rear_wheel_speed_dir','Odom_WheelEncoder_delta_length_rl','Odom_WheelEncoder_delta_length_rr','Odom_WheelEncoder_speed_direction','Odom_WheelEncoder_current_curvature','Odom_WheelEncoder_eps_sign','Odom_WheelEncoder_delta_s','Odom_WheelEncoder_moved_dist','Odom_Imu_zone_number','Odom_Imu_lon_center_utm','Odom_Imu_init_status','Odom_Imu_origin_latitude','Odom_Imu_origin_longitude','Odom_Imu_origin_azimuth','Odom_Imu_origin_x','Odom_Imu_origin_y','Odom_Imu_origin_z','Odom_Imu_origin_roll','Odom_Imu_origin_pitch','Odom_Imu_origin_yaw','Odom_Imu_current_latitude','Odom_Imu_current_longitude','Odom_Imu_current_azimuth']
  _slot_types = ['uint32','uint32','uint32','uint32','float32','float32','int32','float32','float32','float32','float32','int32','float64','bool','float64','float64','float64','float32','float32','float32','float32','float32','float32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Odom_WheelEncoder_left_rear_wheel_encoder,Odom_WheelEncoder_right_rear_wheel_encoder,Odom_WheelEncoder_left_rear_wheel_speed_dir,Odom_WheelEncoder_right_rear_wheel_speed_dir,Odom_WheelEncoder_delta_length_rl,Odom_WheelEncoder_delta_length_rr,Odom_WheelEncoder_speed_direction,Odom_WheelEncoder_current_curvature,Odom_WheelEncoder_eps_sign,Odom_WheelEncoder_delta_s,Odom_WheelEncoder_moved_dist,Odom_Imu_zone_number,Odom_Imu_lon_center_utm,Odom_Imu_init_status,Odom_Imu_origin_latitude,Odom_Imu_origin_longitude,Odom_Imu_origin_azimuth,Odom_Imu_origin_x,Odom_Imu_origin_y,Odom_Imu_origin_z,Odom_Imu_origin_roll,Odom_Imu_origin_pitch,Odom_Imu_origin_yaw,Odom_Imu_current_latitude,Odom_Imu_current_longitude,Odom_Imu_current_azimuth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Odom_DebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Odom_WheelEncoder_left_rear_wheel_encoder is None:
        self.Odom_WheelEncoder_left_rear_wheel_encoder = 0
      if self.Odom_WheelEncoder_right_rear_wheel_encoder is None:
        self.Odom_WheelEncoder_right_rear_wheel_encoder = 0
      if self.Odom_WheelEncoder_left_rear_wheel_speed_dir is None:
        self.Odom_WheelEncoder_left_rear_wheel_speed_dir = 0
      if self.Odom_WheelEncoder_right_rear_wheel_speed_dir is None:
        self.Odom_WheelEncoder_right_rear_wheel_speed_dir = 0
      if self.Odom_WheelEncoder_delta_length_rl is None:
        self.Odom_WheelEncoder_delta_length_rl = 0.
      if self.Odom_WheelEncoder_delta_length_rr is None:
        self.Odom_WheelEncoder_delta_length_rr = 0.
      if self.Odom_WheelEncoder_speed_direction is None:
        self.Odom_WheelEncoder_speed_direction = 0
      if self.Odom_WheelEncoder_current_curvature is None:
        self.Odom_WheelEncoder_current_curvature = 0.
      if self.Odom_WheelEncoder_eps_sign is None:
        self.Odom_WheelEncoder_eps_sign = 0.
      if self.Odom_WheelEncoder_delta_s is None:
        self.Odom_WheelEncoder_delta_s = 0.
      if self.Odom_WheelEncoder_moved_dist is None:
        self.Odom_WheelEncoder_moved_dist = 0.
      if self.Odom_Imu_zone_number is None:
        self.Odom_Imu_zone_number = 0
      if self.Odom_Imu_lon_center_utm is None:
        self.Odom_Imu_lon_center_utm = 0.
      if self.Odom_Imu_init_status is None:
        self.Odom_Imu_init_status = False
      if self.Odom_Imu_origin_latitude is None:
        self.Odom_Imu_origin_latitude = 0.
      if self.Odom_Imu_origin_longitude is None:
        self.Odom_Imu_origin_longitude = 0.
      if self.Odom_Imu_origin_azimuth is None:
        self.Odom_Imu_origin_azimuth = 0.
      if self.Odom_Imu_origin_x is None:
        self.Odom_Imu_origin_x = 0.
      if self.Odom_Imu_origin_y is None:
        self.Odom_Imu_origin_y = 0.
      if self.Odom_Imu_origin_z is None:
        self.Odom_Imu_origin_z = 0.
      if self.Odom_Imu_origin_roll is None:
        self.Odom_Imu_origin_roll = 0.
      if self.Odom_Imu_origin_pitch is None:
        self.Odom_Imu_origin_pitch = 0.
      if self.Odom_Imu_origin_yaw is None:
        self.Odom_Imu_origin_yaw = 0.
      if self.Odom_Imu_current_latitude is None:
        self.Odom_Imu_current_latitude = 0.
      if self.Odom_Imu_current_longitude is None:
        self.Odom_Imu_current_longitude = 0.
      if self.Odom_Imu_current_azimuth is None:
        self.Odom_Imu_current_azimuth = 0.
    else:
      self.Odom_WheelEncoder_left_rear_wheel_encoder = 0
      self.Odom_WheelEncoder_right_rear_wheel_encoder = 0
      self.Odom_WheelEncoder_left_rear_wheel_speed_dir = 0
      self.Odom_WheelEncoder_right_rear_wheel_speed_dir = 0
      self.Odom_WheelEncoder_delta_length_rl = 0.
      self.Odom_WheelEncoder_delta_length_rr = 0.
      self.Odom_WheelEncoder_speed_direction = 0
      self.Odom_WheelEncoder_current_curvature = 0.
      self.Odom_WheelEncoder_eps_sign = 0.
      self.Odom_WheelEncoder_delta_s = 0.
      self.Odom_WheelEncoder_moved_dist = 0.
      self.Odom_Imu_zone_number = 0
      self.Odom_Imu_lon_center_utm = 0.
      self.Odom_Imu_init_status = False
      self.Odom_Imu_origin_latitude = 0.
      self.Odom_Imu_origin_longitude = 0.
      self.Odom_Imu_origin_azimuth = 0.
      self.Odom_Imu_origin_x = 0.
      self.Odom_Imu_origin_y = 0.
      self.Odom_Imu_origin_z = 0.
      self.Odom_Imu_origin_roll = 0.
      self.Odom_Imu_origin_pitch = 0.
      self.Odom_Imu_origin_yaw = 0.
      self.Odom_Imu_current_latitude = 0.
      self.Odom_Imu_current_longitude = 0.
      self.Odom_Imu_current_azimuth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I2fi4fidB3d6f3d().pack(_x.Odom_WheelEncoder_left_rear_wheel_encoder, _x.Odom_WheelEncoder_right_rear_wheel_encoder, _x.Odom_WheelEncoder_left_rear_wheel_speed_dir, _x.Odom_WheelEncoder_right_rear_wheel_speed_dir, _x.Odom_WheelEncoder_delta_length_rl, _x.Odom_WheelEncoder_delta_length_rr, _x.Odom_WheelEncoder_speed_direction, _x.Odom_WheelEncoder_current_curvature, _x.Odom_WheelEncoder_eps_sign, _x.Odom_WheelEncoder_delta_s, _x.Odom_WheelEncoder_moved_dist, _x.Odom_Imu_zone_number, _x.Odom_Imu_lon_center_utm, _x.Odom_Imu_init_status, _x.Odom_Imu_origin_latitude, _x.Odom_Imu_origin_longitude, _x.Odom_Imu_origin_azimuth, _x.Odom_Imu_origin_x, _x.Odom_Imu_origin_y, _x.Odom_Imu_origin_z, _x.Odom_Imu_origin_roll, _x.Odom_Imu_origin_pitch, _x.Odom_Imu_origin_yaw, _x.Odom_Imu_current_latitude, _x.Odom_Imu_current_longitude, _x.Odom_Imu_current_azimuth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 129
      (_x.Odom_WheelEncoder_left_rear_wheel_encoder, _x.Odom_WheelEncoder_right_rear_wheel_encoder, _x.Odom_WheelEncoder_left_rear_wheel_speed_dir, _x.Odom_WheelEncoder_right_rear_wheel_speed_dir, _x.Odom_WheelEncoder_delta_length_rl, _x.Odom_WheelEncoder_delta_length_rr, _x.Odom_WheelEncoder_speed_direction, _x.Odom_WheelEncoder_current_curvature, _x.Odom_WheelEncoder_eps_sign, _x.Odom_WheelEncoder_delta_s, _x.Odom_WheelEncoder_moved_dist, _x.Odom_Imu_zone_number, _x.Odom_Imu_lon_center_utm, _x.Odom_Imu_init_status, _x.Odom_Imu_origin_latitude, _x.Odom_Imu_origin_longitude, _x.Odom_Imu_origin_azimuth, _x.Odom_Imu_origin_x, _x.Odom_Imu_origin_y, _x.Odom_Imu_origin_z, _x.Odom_Imu_origin_roll, _x.Odom_Imu_origin_pitch, _x.Odom_Imu_origin_yaw, _x.Odom_Imu_current_latitude, _x.Odom_Imu_current_longitude, _x.Odom_Imu_current_azimuth,) = _get_struct_4I2fi4fidB3d6f3d().unpack(str[start:end])
      self.Odom_Imu_init_status = bool(self.Odom_Imu_init_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I2fi4fidB3d6f3d().pack(_x.Odom_WheelEncoder_left_rear_wheel_encoder, _x.Odom_WheelEncoder_right_rear_wheel_encoder, _x.Odom_WheelEncoder_left_rear_wheel_speed_dir, _x.Odom_WheelEncoder_right_rear_wheel_speed_dir, _x.Odom_WheelEncoder_delta_length_rl, _x.Odom_WheelEncoder_delta_length_rr, _x.Odom_WheelEncoder_speed_direction, _x.Odom_WheelEncoder_current_curvature, _x.Odom_WheelEncoder_eps_sign, _x.Odom_WheelEncoder_delta_s, _x.Odom_WheelEncoder_moved_dist, _x.Odom_Imu_zone_number, _x.Odom_Imu_lon_center_utm, _x.Odom_Imu_init_status, _x.Odom_Imu_origin_latitude, _x.Odom_Imu_origin_longitude, _x.Odom_Imu_origin_azimuth, _x.Odom_Imu_origin_x, _x.Odom_Imu_origin_y, _x.Odom_Imu_origin_z, _x.Odom_Imu_origin_roll, _x.Odom_Imu_origin_pitch, _x.Odom_Imu_origin_yaw, _x.Odom_Imu_current_latitude, _x.Odom_Imu_current_longitude, _x.Odom_Imu_current_azimuth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 129
      (_x.Odom_WheelEncoder_left_rear_wheel_encoder, _x.Odom_WheelEncoder_right_rear_wheel_encoder, _x.Odom_WheelEncoder_left_rear_wheel_speed_dir, _x.Odom_WheelEncoder_right_rear_wheel_speed_dir, _x.Odom_WheelEncoder_delta_length_rl, _x.Odom_WheelEncoder_delta_length_rr, _x.Odom_WheelEncoder_speed_direction, _x.Odom_WheelEncoder_current_curvature, _x.Odom_WheelEncoder_eps_sign, _x.Odom_WheelEncoder_delta_s, _x.Odom_WheelEncoder_moved_dist, _x.Odom_Imu_zone_number, _x.Odom_Imu_lon_center_utm, _x.Odom_Imu_init_status, _x.Odom_Imu_origin_latitude, _x.Odom_Imu_origin_longitude, _x.Odom_Imu_origin_azimuth, _x.Odom_Imu_origin_x, _x.Odom_Imu_origin_y, _x.Odom_Imu_origin_z, _x.Odom_Imu_origin_roll, _x.Odom_Imu_origin_pitch, _x.Odom_Imu_origin_yaw, _x.Odom_Imu_current_latitude, _x.Odom_Imu_current_longitude, _x.Odom_Imu_current_azimuth,) = _get_struct_4I2fi4fidB3d6f3d().unpack(str[start:end])
      self.Odom_Imu_init_status = bool(self.Odom_Imu_init_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4I2fi4fidB3d6f3d = None
def _get_struct_4I2fi4fidB3d6f3d():
    global _struct_4I2fi4fidB3d6f3d
    if _struct_4I2fi4fidB3d6f3d is None:
        _struct_4I2fi4fidB3d6f3d = struct.Struct("<4I2fi4fidB3d6f3d")
    return _struct_4I2fi4fidB3d6f3d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FeatureOperationInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class FeatureOperationInfo(genpy.Message):
  _md5sum = "d3586f19cd8bd0ec47060a6c49eb874e"
  _type = "rospy_message_converter/FeatureOperationInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FeatureOperationPoint[] feature_operation_point
string raw_payload
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FeatureOperationPoint
bool is_valid
int32 offset_start
int32 offset_end
uint64 linkid
int32 curr_laneidx
EventCondition event_condition
DrivingActionContext[] action_context

================================================================================
MSG: rospy_message_converter/EventCondition
string vehicle_model
string software_version
string hardware_version
string map_version
Point2D event_gps
string event_start_time
string event_end_time
ScenarioType scenario_type
int32 driver_filter
string range_start_time
string range_end_time

================================================================================
MSG: rospy_message_converter/Point2D
float64 x
float64 y

================================================================================
MSG: rospy_message_converter/ScenarioType
int32 weather_type
int32 lighting_type

================================================================================
MSG: rospy_message_converter/DrivingActionContext
InfoConfig[] info_config

================================================================================
MSG: rospy_message_converter/InfoConfig
int32 info_value
int32 static_info
int32 dynamic_info
int32 road_scenario_type
"""
  __slots__ = ['feature_operation_point','raw_payload','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/FeatureOperationPoint[]','string','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feature_operation_point,raw_payload,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeatureOperationInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.feature_operation_point is None:
        self.feature_operation_point = []
      if self.raw_payload is None:
        self.raw_payload = ''
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.feature_operation_point = []
      self.raw_payload = ''
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.feature_operation_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_operation_point:
        _x = val1
        buff.write(_get_struct_B2iQi().pack(_x.is_valid, _x.offset_start, _x.offset_end, _x.linkid, _x.curr_laneidx))
        _v1 = val1.event_condition
        _x = _v1.vehicle_model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.software_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.hardware_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.map_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = _v1.event_gps
        _x = _v2
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = _v1.event_start_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.event_end_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = _v1.scenario_type
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.weather_type, _x.lighting_type))
        _x = _v1.driver_filter
        buff.write(_get_struct_i().pack(_x))
        _x = _v1.range_start_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.range_end_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.action_context)
        buff.write(_struct_I.pack(length))
        for val2 in val1.action_context:
          length = len(val2.info_config)
          buff.write(_struct_I.pack(length))
          for val3 in val2.info_config:
            _x = val3
            buff.write(_get_struct_4i().pack(_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type))
      _x = self.raw_payload
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.feature_operation_point is None:
        self.feature_operation_point = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_operation_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FeatureOperationPoint()
        _x = val1
        start = end
        end += 21
        (_x.is_valid, _x.offset_start, _x.offset_end, _x.linkid, _x.curr_laneidx,) = _get_struct_B2iQi().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        _v4 = val1.event_condition
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.vehicle_model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.vehicle_model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.software_version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.software_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.hardware_version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.hardware_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.map_version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.map_version = str[start:end]
        _v5 = _v4.event_gps
        _x = _v5
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.event_start_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.event_start_time = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.event_end_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.event_end_time = str[start:end]
        _v6 = _v4.scenario_type
        _x = _v6
        start = end
        end += 8
        (_x.weather_type, _x.lighting_type,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (_v4.driver_filter,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.range_start_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.range_start_time = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.range_end_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.range_end_time = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.action_context = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.DrivingActionContext()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.info_config = []
          for i in range(0, length):
            val3 = rospy_message_converter.msg.InfoConfig()
            _x = val3
            start = end
            end += 16
            (_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_4i().unpack(str[start:end])
            val2.info_config.append(val3)
          val1.action_context.append(val2)
        self.feature_operation_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raw_payload = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.raw_payload = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.feature_operation_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_operation_point:
        _x = val1
        buff.write(_get_struct_B2iQi().pack(_x.is_valid, _x.offset_start, _x.offset_end, _x.linkid, _x.curr_laneidx))
        _v7 = val1.event_condition
        _x = _v7.vehicle_model
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.software_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.hardware_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.map_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v8 = _v7.event_gps
        _x = _v8
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = _v7.event_start_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.event_end_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v9 = _v7.scenario_type
        _x = _v9
        buff.write(_get_struct_2i().pack(_x.weather_type, _x.lighting_type))
        _x = _v7.driver_filter
        buff.write(_get_struct_i().pack(_x))
        _x = _v7.range_start_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.range_end_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.action_context)
        buff.write(_struct_I.pack(length))
        for val2 in val1.action_context:
          length = len(val2.info_config)
          buff.write(_struct_I.pack(length))
          for val3 in val2.info_config:
            _x = val3
            buff.write(_get_struct_4i().pack(_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type))
      _x = self.raw_payload
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.feature_operation_point is None:
        self.feature_operation_point = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_operation_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FeatureOperationPoint()
        _x = val1
        start = end
        end += 21
        (_x.is_valid, _x.offset_start, _x.offset_end, _x.linkid, _x.curr_laneidx,) = _get_struct_B2iQi().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        _v10 = val1.event_condition
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.vehicle_model = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.vehicle_model = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.software_version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.software_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.hardware_version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.hardware_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.map_version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.map_version = str[start:end]
        _v11 = _v10.event_gps
        _x = _v11
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.event_start_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.event_start_time = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.event_end_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.event_end_time = str[start:end]
        _v12 = _v10.scenario_type
        _x = _v12
        start = end
        end += 8
        (_x.weather_type, _x.lighting_type,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (_v10.driver_filter,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.range_start_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.range_start_time = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.range_end_time = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.range_end_time = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.action_context = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.DrivingActionContext()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.info_config = []
          for i in range(0, length):
            val3 = rospy_message_converter.msg.InfoConfig()
            _x = val3
            start = end
            end += 16
            (_x.info_value, _x.static_info, _x.dynamic_info, _x.road_scenario_type,) = _get_struct_4i().unpack(str[start:end])
            val2.info_config.append(val3)
          val1.action_context.append(val2)
        self.feature_operation_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.raw_payload = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.raw_payload = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_B2iQi = None
def _get_struct_B2iQi():
    global _struct_B2iQi
    if _struct_B2iQi is None:
        _struct_B2iQi = struct.Struct("<B2iQi")
    return _struct_B2iQi
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

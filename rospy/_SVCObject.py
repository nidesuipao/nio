# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SVCObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SVCObject(genpy.Message):
  _md5sum = "97d109c5de8b94a24100dc1b579594af"
  _type = "rospy_message_converter/SVCObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 index
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
float32 exist_prob
float32 height
float32 height_prob
int32 obj_type
int32 obj_mov_state
int32 obj_dim
float32 obj_distance
float32 obj_rel_vel_x
float32 obj_rel_vel_y
int32 reserved1
int32 reserved2

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y
"""
  __slots__ = ['index','pt1','pt2','pt3','pt4','exist_prob','height','height_prob','obj_type','obj_mov_state','obj_dim','obj_distance','obj_rel_vel_x','obj_rel_vel_y','reserved1','reserved2']
  _slot_types = ['int32','rospy_message_converter/SVCPoint','rospy_message_converter/SVCPoint','rospy_message_converter/SVCPoint','rospy_message_converter/SVCPoint','float32','float32','float32','int32','int32','int32','float32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,pt1,pt2,pt3,pt4,exist_prob,height,height_prob,obj_type,obj_mov_state,obj_dim,obj_distance,obj_rel_vel_x,obj_rel_vel_y,reserved1,reserved2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SVCObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.SVCPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.SVCPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.SVCPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.SVCPoint()
      if self.exist_prob is None:
        self.exist_prob = 0.
      if self.height is None:
        self.height = 0.
      if self.height_prob is None:
        self.height_prob = 0.
      if self.obj_type is None:
        self.obj_type = 0
      if self.obj_mov_state is None:
        self.obj_mov_state = 0
      if self.obj_dim is None:
        self.obj_dim = 0
      if self.obj_distance is None:
        self.obj_distance = 0.
      if self.obj_rel_vel_x is None:
        self.obj_rel_vel_x = 0.
      if self.obj_rel_vel_y is None:
        self.obj_rel_vel_y = 0.
      if self.reserved1 is None:
        self.reserved1 = 0
      if self.reserved2 is None:
        self.reserved2 = 0
    else:
      self.index = 0
      self.pt1 = rospy_message_converter.msg.SVCPoint()
      self.pt2 = rospy_message_converter.msg.SVCPoint()
      self.pt3 = rospy_message_converter.msg.SVCPoint()
      self.pt4 = rospy_message_converter.msg.SVCPoint()
      self.exist_prob = 0.
      self.height = 0.
      self.height_prob = 0.
      self.obj_type = 0
      self.obj_mov_state = 0
      self.obj_dim = 0
      self.obj_distance = 0.
      self.obj_rel_vel_x = 0.
      self.obj_rel_vel_y = 0.
      self.reserved1 = 0
      self.reserved2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i11f3i3f2i().pack(_x.index, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.SVCPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.SVCPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.SVCPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.SVCPoint()
      end = 0
      _x = self
      start = end
      end += 80
      (_x.index, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2,) = _get_struct_i11f3i3f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i11f3i3f2i().pack(_x.index, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.SVCPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.SVCPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.SVCPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.SVCPoint()
      end = 0
      _x = self
      start = end
      end += 80
      (_x.index, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2,) = _get_struct_i11f3i3f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i11f3i3f2i = None
def _get_struct_i11f3i3f2i():
    global _struct_i11f3i3f2i
    if _struct_i11f3i3f2i is None:
        _struct_i11f3i3f2i = struct.Struct("<i11f3i3f2i")
    return _struct_i11f3i3f2i

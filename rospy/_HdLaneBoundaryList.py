# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdLaneBoundaryList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdLaneBoundaryList(genpy.Message):
  _md5sum = "1f1c18c398a97efca903c15523180f31"
  _type = "rospy_message_converter/HdLaneBoundaryList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """HdLaneBoundary[] lane_boundary_list

================================================================================
MSG: rospy_message_converter/HdLaneBoundary
uint64 id
MapPolyline central_line
int32[] colors
int32[] types
uint64 left_lane_id
uint64 right_lane_id
int32 sequence_id
uint64[] predecessor_lane_boundary_ids
uint64[] successor_lane_boundary_ids
uint32 lane_separate
FeaturePoint[] feature_points

================================================================================
MSG: rospy_message_converter/MapPolyline
float64[] x
float64[] y
float64[] z

================================================================================
MSG: rospy_message_converter/FeaturePoint
int32 type
int32 point_index
"""
  __slots__ = ['lane_boundary_list']
  _slot_types = ['rospy_message_converter/HdLaneBoundary[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_boundary_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdLaneBoundaryList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane_boundary_list is None:
        self.lane_boundary_list = []
    else:
      self.lane_boundary_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lane_boundary_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_boundary_list:
        _x = val1.id
        buff.write(_get_struct_Q().pack(_x))
        _v1 = val1.central_line
        length = len(_v1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.x))
        length = len(_v1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.y))
        length = len(_v1.z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.z))
        length = len(val1.colors)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.colors))
        length = len(val1.types)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.types))
        _x = val1
        buff.write(_get_struct_2Qi().pack(_x.left_lane_id, _x.right_lane_id, _x.sequence_id))
        length = len(val1.predecessor_lane_boundary_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.predecessor_lane_boundary_ids))
        length = len(val1.successor_lane_boundary_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.successor_lane_boundary_ids))
        _x = val1.lane_separate
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.feature_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.feature_points:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.type, _x.point_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_boundary_list is None:
        self.lane_boundary_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_boundary_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HdLaneBoundary()
        start = end
        end += 8
        (val1.id,) = _get_struct_Q().unpack(str[start:end])
        _v2 = val1.central_line
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v2.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v2.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v2.z = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.colors = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.types = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.left_lane_id, _x.right_lane_id, _x.sequence_id,) = _get_struct_2Qi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.predecessor_lane_boundary_ids = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.successor_lane_boundary_ids = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.lane_separate,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.feature_points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.FeaturePoint()
          _x = val2
          start = end
          end += 8
          (_x.type, _x.point_index,) = _get_struct_2i().unpack(str[start:end])
          val1.feature_points.append(val2)
        self.lane_boundary_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lane_boundary_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane_boundary_list:
        _x = val1.id
        buff.write(_get_struct_Q().pack(_x))
        _v3 = val1.central_line
        length = len(_v3.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v3.x.tostring())
        length = len(_v3.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v3.y.tostring())
        length = len(_v3.z)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v3.z.tostring())
        length = len(val1.colors)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.colors.tostring())
        length = len(val1.types)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.types.tostring())
        _x = val1
        buff.write(_get_struct_2Qi().pack(_x.left_lane_id, _x.right_lane_id, _x.sequence_id))
        length = len(val1.predecessor_lane_boundary_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.predecessor_lane_boundary_ids.tostring())
        length = len(val1.successor_lane_boundary_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.successor_lane_boundary_ids.tostring())
        _x = val1.lane_separate
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.feature_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.feature_points:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.type, _x.point_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane_boundary_list is None:
        self.lane_boundary_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane_boundary_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HdLaneBoundary()
        start = end
        end += 8
        (val1.id,) = _get_struct_Q().unpack(str[start:end])
        _v4 = val1.central_line
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v4.x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v4.y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v4.z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.colors = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.types = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 20
        (_x.left_lane_id, _x.right_lane_id, _x.sequence_id,) = _get_struct_2Qi().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.predecessor_lane_boundary_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.successor_lane_boundary_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 4
        (val1.lane_separate,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.feature_points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.FeaturePoint()
          _x = val2
          start = end
          end += 8
          (_x.type, _x.point_index,) = _get_struct_2i().unpack(str[start:end])
          val1.feature_points.append(val2)
        self.lane_boundary_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Qi = None
def _get_struct_2Qi():
    global _struct_2Qi
    if _struct_2Qi is None:
        _struct_2Qi = struct.Struct("<2Qi")
    return _struct_2Qi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

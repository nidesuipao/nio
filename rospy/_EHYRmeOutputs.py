# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EHYRmeOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EHYRmeOutputs(genpy.Message):
  _md5sum = "1949e60f2f1694792b7f096a7142d065"
  _type = "rospy_message_converter/EHYRmeOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RmeLine road_edge_left
RmeLine road_edge_right
RmeLane host_lane
RmeLane left_lane
RmeLane right_lane
RmeHDMap hdmap_info
RmeIntp[] interest_point
float32 road_start
float32 road_end
uint32 total_lane_num
uint32 num_lane_id
uint32 road_type
uint32 status
ObjLMRel obj_lm_rel
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/RmeLine
float32 pt_conf
float32 c0
float32 c1
float32 c2
float32 c3
float32 lrange_start
float32 lrange_end
float32 lm_width
int32 line_color
int32 line_type
int32 line_src

================================================================================
MSG: rospy_message_converter/RmeLane
RmeLine left_line
RmeLine right_line
int32[] lane_type
float32 lane_start
float32 lane_end
float32 map_spd_limit
float32 lane_width
float32 ca_lon_dst
float32[] cur_point
float32[] cur_value
int32 lane_dir
bool ca_valid
uint32 lane_id

================================================================================
MSG: rospy_message_converter/RmeHDMap
RmeMapGP[] ngp_list

================================================================================
MSG: rospy_message_converter/RmeMapGP
float32 gp_distance
uint32 gp_type
float32 recom_speed
float32 link_length
uint32 recom_lane_idx
uint32 recom_speed_id
uint32 recom_speed_src
uint32 recom_speed_conf
bool spd_unit
int32 sup_sign_typ
int32 sup_sign_attr

================================================================================
MSG: rospy_message_converter/RmeIntp
RmePoint point
int32 id
int32 intp_class
int32 source
int32 role
int32 far_markclass
int32 far_color
uint32 far_spd

================================================================================
MSG: rospy_message_converter/RmePoint
float32 conf
float32 x
float32 y
float32 z
float32 w
float32 d
float32 s

================================================================================
MSG: rospy_message_converter/ObjLMRel
RoadDetection road_detection
ObjRelRes[] pos_relation

================================================================================
MSG: rospy_message_converter/RoadDetection
uint64 timestamp
LaneDetection laneline
RoadSlop slop
LaneLPP lpp
Roadedge[] roadedge
StopLine[] stopline
GuidePoint guidepoint
LaneSemantic[] lanesemantic
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/LaneDetection
float32 LD_Lane_Width
bool LD_Crossing_Flag
LaneLine[] line

================================================================================
MSG: rospy_message_converter/LaneLine
int32 LD_Role
LineProperty LD_First_Line
bool LD_Is_Multi_Clothoid
LineProperty LD_Second_Line
bool LD_Special_Point_Is_Detected
int32 LD_Special_Point_Type
Point LD_Special_Point
Point[] LD_Point
float32 LD_Dash_Average_Gap
float32 LD_Dash_Average_Length
bool LD_Crossing
uint32 LD_Crossing_ID
int32 LD_Measuring_Status
int32 LD_Prediction_Reason
uint32 LD_Track_ID
uint32 LD_Track_Age
int32 LD_Quality
float32 LD_Confidence
float32 LD_Marker_Width

================================================================================
MSG: rospy_message_converter/LineProperty
int32 LD_Type
int32 LD_Color
PolyLine LD_Line
float32 LD_Start
float32 LD_End
int32 LD_End_Reason

================================================================================
MSG: rospy_message_converter/PolyLine
float32 line_C0
float32 line_C1
float32 line_C2
float32 line_C3

================================================================================
MSG: rospy_message_converter/Point
float32 LD_Point_Lat
float32 LD_Point_Long
float32 LD_Point_Alti

================================================================================
MSG: rospy_message_converter/RoadSlop
bool LD_Road_Vertical_Surface_Available
float32 LD_Road_Vertical_Surface_Start
float32 LD_Road_Vertical_Surface_End
PolyLine LD_Road_Vertical_Surface

================================================================================
MSG: rospy_message_converter/LaneLPP
bool LPP_Available
int32 LPP_Source
float32 LPP_Ctrl_Point_Lat
float32 LPP_Ctrl_Point_Long
float32 LPP_Confidence
bool LPP_First_Valid
float32 LPP_First_VR_End
PolyLine LPP_First
bool LPP_Second_Valid
float32 LPP_Second_VR_End
PolyLine LPP_Second

================================================================================
MSG: rospy_message_converter/Roadedge
int32 LD_RE_Type
int32 LD_RE_Side
int32 LD_RE_From_Host_Index
uint32 LD_RE_ID
uint32 LD_RE_Age
float32 LD_RE_Height
float32 LD_RE_VR_Start
float32 LD_RE_VR_End
PolyLine LD_RE_Line
float32 LD_RE_Confidence
int32 LDRE_Class

================================================================================
MSG: rospy_message_converter/StopLine
bool SL_Zebra_Is_Detected
float32 SL_Zebra_Lat_0
float32 SL_Zebra_Long_0
float32 SL_Zebra_Lat_1
float32 SL_Zebra_Long_1
float32 SL_Zebra_Lat_2
float32 SL_Zebra_Long_2
float32 SL_Zebra_Lat_3
float32 SL_Zebra_Long_3
bool SL_Is_Detected
uint32 SL_ID
int32 SL_Type
int32 SL_Measure_Status
float32 SL_Probability
float32 SL_Long_Dist_L
float32 SL_Long_Dist_R
float32 SL_Lat_Dist_L
float32 SL_Lat_Dist_R
int32 SL_Lane_Assessment

================================================================================
MSG: rospy_message_converter/GuidePoint
bool INTP_Is_Highway_Merge_Left
bool INTP_Is_Highway_Merge_Right
bool INTP_Is_Highway_Exit_Left
bool INTP_Is_Highway_Exit_Right
InterestPoint[] INTP_Point

================================================================================
MSG: rospy_message_converter/InterestPoint
int32 INTP_Type
uint32 INTP_ID
uint32 INTP_Age
int32 INTP_Line_Role
float32 INTP_Long_Distance
float32 INTP_Lat_Distance
float32 INTP_Exist_Probability

================================================================================
MSG: rospy_message_converter/LaneSemantic
int32 SLD_Direction
uint32 SLD_ID
uint32 SLD_Count
float32 SLD_Lat
float32 SLD_Long
int32 SLD_Orientation
float32 SLD_Orientation_Probability
float32 SLD_Direction_Probability
int32 SLD_Role
int32 SLD_Type
float32 SLD_No_Park_Zone_Lat_0
float32 SLD_No_Park_Zone_Long_0
float32 SLD_No_Park_Zone_Lat_1
float32 SLD_No_Park_Zone_Long_1
float32 SLD_No_Park_Zone_Lat_2
float32 SLD_No_Park_Zone_Long_2
float32 SLD_No_Park_Zone_Lat_3
float32 SLD_No_Park_Zone_Long_3
int32 SLD_Road_Status

================================================================================
MSG: rospy_message_converter/ObjRelRes
uint32 obj_id
LMRelRes[] lm_relation

================================================================================
MSG: rospy_message_converter/LMRelRes
uint32 lm_id
int32 relative_pos
float32 dist
float32 conf
"""
  __slots__ = ['road_edge_left','road_edge_right','host_lane','left_lane','right_lane','hdmap_info','interest_point','road_start','road_end','total_lane_num','num_lane_id','road_type','status','obj_lm_rel','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/RmeLine','rospy_message_converter/RmeLine','rospy_message_converter/RmeLane','rospy_message_converter/RmeLane','rospy_message_converter/RmeLane','rospy_message_converter/RmeHDMap','rospy_message_converter/RmeIntp[]','float32','float32','uint32','uint32','uint32','uint32','rospy_message_converter/ObjLMRel','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       road_edge_left,road_edge_right,host_lane,left_lane,right_lane,hdmap_info,interest_point,road_start,road_end,total_lane_num,num_lane_id,road_type,status,obj_lm_rel,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EHYRmeOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.road_edge_left is None:
        self.road_edge_left = rospy_message_converter.msg.RmeLine()
      if self.road_edge_right is None:
        self.road_edge_right = rospy_message_converter.msg.RmeLine()
      if self.host_lane is None:
        self.host_lane = rospy_message_converter.msg.RmeLane()
      if self.left_lane is None:
        self.left_lane = rospy_message_converter.msg.RmeLane()
      if self.right_lane is None:
        self.right_lane = rospy_message_converter.msg.RmeLane()
      if self.hdmap_info is None:
        self.hdmap_info = rospy_message_converter.msg.RmeHDMap()
      if self.interest_point is None:
        self.interest_point = []
      if self.road_start is None:
        self.road_start = 0.
      if self.road_end is None:
        self.road_end = 0.
      if self.total_lane_num is None:
        self.total_lane_num = 0
      if self.num_lane_id is None:
        self.num_lane_id = 0
      if self.road_type is None:
        self.road_type = 0
      if self.status is None:
        self.status = 0
      if self.obj_lm_rel is None:
        self.obj_lm_rel = rospy_message_converter.msg.ObjLMRel()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.road_edge_left = rospy_message_converter.msg.RmeLine()
      self.road_edge_right = rospy_message_converter.msg.RmeLine()
      self.host_lane = rospy_message_converter.msg.RmeLane()
      self.left_lane = rospy_message_converter.msg.RmeLane()
      self.right_lane = rospy_message_converter.msg.RmeLane()
      self.hdmap_info = rospy_message_converter.msg.RmeHDMap()
      self.interest_point = []
      self.road_start = 0.
      self.road_end = 0.
      self.total_lane_num = 0
      self.num_lane_id = 0
      self.road_type = 0
      self.status = 0
      self.obj_lm_rel = rospy_message_converter.msg.ObjLMRel()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i8f3i8f3i8f3i().pack(_x.road_edge_left.pt_conf, _x.road_edge_left.c0, _x.road_edge_left.c1, _x.road_edge_left.c2, _x.road_edge_left.c3, _x.road_edge_left.lrange_start, _x.road_edge_left.lrange_end, _x.road_edge_left.lm_width, _x.road_edge_left.line_color, _x.road_edge_left.line_type, _x.road_edge_left.line_src, _x.road_edge_right.pt_conf, _x.road_edge_right.c0, _x.road_edge_right.c1, _x.road_edge_right.c2, _x.road_edge_right.c3, _x.road_edge_right.lrange_start, _x.road_edge_right.lrange_end, _x.road_edge_right.lm_width, _x.road_edge_right.line_color, _x.road_edge_right.line_type, _x.road_edge_right.line_src, _x.host_lane.left_line.pt_conf, _x.host_lane.left_line.c0, _x.host_lane.left_line.c1, _x.host_lane.left_line.c2, _x.host_lane.left_line.c3, _x.host_lane.left_line.lrange_start, _x.host_lane.left_line.lrange_end, _x.host_lane.left_line.lm_width, _x.host_lane.left_line.line_color, _x.host_lane.left_line.line_type, _x.host_lane.left_line.line_src, _x.host_lane.right_line.pt_conf, _x.host_lane.right_line.c0, _x.host_lane.right_line.c1, _x.host_lane.right_line.c2, _x.host_lane.right_line.c3, _x.host_lane.right_line.lrange_start, _x.host_lane.right_line.lrange_end, _x.host_lane.right_line.lm_width, _x.host_lane.right_line.line_color, _x.host_lane.right_line.line_type, _x.host_lane.right_line.line_src))
      length = len(self.host_lane.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.host_lane.lane_type))
      _x = self
      buff.write(_get_struct_5f().pack(_x.host_lane.lane_start, _x.host_lane.lane_end, _x.host_lane.map_spd_limit, _x.host_lane.lane_width, _x.host_lane.ca_lon_dst))
      length = len(self.host_lane.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.host_lane.cur_point))
      length = len(self.host_lane.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.host_lane.cur_value))
      _x = self
      buff.write(_get_struct_iBI8f3i8f3i().pack(_x.host_lane.lane_dir, _x.host_lane.ca_valid, _x.host_lane.lane_id, _x.left_lane.left_line.pt_conf, _x.left_lane.left_line.c0, _x.left_lane.left_line.c1, _x.left_lane.left_line.c2, _x.left_lane.left_line.c3, _x.left_lane.left_line.lrange_start, _x.left_lane.left_line.lrange_end, _x.left_lane.left_line.lm_width, _x.left_lane.left_line.line_color, _x.left_lane.left_line.line_type, _x.left_lane.left_line.line_src, _x.left_lane.right_line.pt_conf, _x.left_lane.right_line.c0, _x.left_lane.right_line.c1, _x.left_lane.right_line.c2, _x.left_lane.right_line.c3, _x.left_lane.right_line.lrange_start, _x.left_lane.right_line.lrange_end, _x.left_lane.right_line.lm_width, _x.left_lane.right_line.line_color, _x.left_lane.right_line.line_type, _x.left_lane.right_line.line_src))
      length = len(self.left_lane.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.left_lane.lane_type))
      _x = self
      buff.write(_get_struct_5f().pack(_x.left_lane.lane_start, _x.left_lane.lane_end, _x.left_lane.map_spd_limit, _x.left_lane.lane_width, _x.left_lane.ca_lon_dst))
      length = len(self.left_lane.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_lane.cur_point))
      length = len(self.left_lane.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_lane.cur_value))
      _x = self
      buff.write(_get_struct_iBI8f3i8f3i().pack(_x.left_lane.lane_dir, _x.left_lane.ca_valid, _x.left_lane.lane_id, _x.right_lane.left_line.pt_conf, _x.right_lane.left_line.c0, _x.right_lane.left_line.c1, _x.right_lane.left_line.c2, _x.right_lane.left_line.c3, _x.right_lane.left_line.lrange_start, _x.right_lane.left_line.lrange_end, _x.right_lane.left_line.lm_width, _x.right_lane.left_line.line_color, _x.right_lane.left_line.line_type, _x.right_lane.left_line.line_src, _x.right_lane.right_line.pt_conf, _x.right_lane.right_line.c0, _x.right_lane.right_line.c1, _x.right_lane.right_line.c2, _x.right_lane.right_line.c3, _x.right_lane.right_line.lrange_start, _x.right_lane.right_line.lrange_end, _x.right_lane.right_line.lm_width, _x.right_lane.right_line.line_color, _x.right_lane.right_line.line_type, _x.right_lane.right_line.line_src))
      length = len(self.right_lane.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.right_lane.lane_type))
      _x = self
      buff.write(_get_struct_5f().pack(_x.right_lane.lane_start, _x.right_lane.lane_end, _x.right_lane.map_spd_limit, _x.right_lane.lane_width, _x.right_lane.ca_lon_dst))
      length = len(self.right_lane.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_lane.cur_point))
      length = len(self.right_lane.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_lane.cur_value))
      _x = self
      buff.write(_get_struct_iBI().pack(_x.right_lane.lane_dir, _x.right_lane.ca_valid, _x.right_lane.lane_id))
      length = len(self.hdmap_info.ngp_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.hdmap_info.ngp_list:
        _x = val1
        buff.write(_get_struct_fI2f4IB2i().pack(_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr))
      length = len(self.interest_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.interest_point:
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_7f().pack(_x.conf, _x.x, _x.y, _x.z, _x.w, _x.d, _x.s))
        _x = val1
        buff.write(_get_struct_6iI().pack(_x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd))
      _x = self
      buff.write(_get_struct_2f4IQfB().pack(_x.road_start, _x.road_end, _x.total_lane_num, _x.num_lane_id, _x.road_type, _x.status, _x.obj_lm_rel.road_detection.timestamp, _x.obj_lm_rel.road_detection.laneline.LD_Lane_Width, _x.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag))
      length = len(self.obj_lm_rel.road_detection.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v2 = val1.LD_First_Line
        _x = _v2
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v3 = _v2.LD_Line
        _x = _v3
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v2
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v4 = val1.LD_Second_Line
        _x = _v4
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v5 = _v4.LD_Line
        _x = _v5
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v4
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v6 = val1.LD_Special_Point
        _x = _v6
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_End, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Available, _x.obj_lm_rel.road_detection.lpp.LPP_Source, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Long, _x.obj_lm_rel.road_detection.lpp.LPP_Confidence, _x.obj_lm_rel.road_detection.lpp.LPP_First_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_First_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Second_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_Second_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C3))
      length = len(self.obj_lm_rel.road_detection.roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End))
        _v7 = val1.LD_RE_Line
        _x = _v7
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = val1
        buff.write(_get_struct_fi().pack(_x.LD_RE_Confidence, _x.LDRE_Class))
      length = len(self.obj_lm_rel.road_detection.stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right))
      length = len(self.obj_lm_rel.road_detection.guidepoint.INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.guidepoint.INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
      length = len(self.obj_lm_rel.road_detection.lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status))
      _x = self.obj_lm_rel.road_detection.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.obj_lm_rel.road_detection.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.obj_lm_rel.road_detection.counter, _x.obj_lm_rel.road_detection.publish_ts))
      length = len(self.obj_lm_rel.pos_relation)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.pos_relation:
        _x = val1.obj_id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.lm_relation)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lm_relation:
          _x = val2
          buff.write(_get_struct_Ii2f().pack(_x.lm_id, _x.relative_pos, _x.dist, _x.conf))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.road_edge_left is None:
        self.road_edge_left = rospy_message_converter.msg.RmeLine()
      if self.road_edge_right is None:
        self.road_edge_right = rospy_message_converter.msg.RmeLine()
      if self.host_lane is None:
        self.host_lane = rospy_message_converter.msg.RmeLane()
      if self.left_lane is None:
        self.left_lane = rospy_message_converter.msg.RmeLane()
      if self.right_lane is None:
        self.right_lane = rospy_message_converter.msg.RmeLane()
      if self.hdmap_info is None:
        self.hdmap_info = rospy_message_converter.msg.RmeHDMap()
      if self.interest_point is None:
        self.interest_point = None
      if self.obj_lm_rel is None:
        self.obj_lm_rel = rospy_message_converter.msg.ObjLMRel()
      end = 0
      _x = self
      start = end
      end += 176
      (_x.road_edge_left.pt_conf, _x.road_edge_left.c0, _x.road_edge_left.c1, _x.road_edge_left.c2, _x.road_edge_left.c3, _x.road_edge_left.lrange_start, _x.road_edge_left.lrange_end, _x.road_edge_left.lm_width, _x.road_edge_left.line_color, _x.road_edge_left.line_type, _x.road_edge_left.line_src, _x.road_edge_right.pt_conf, _x.road_edge_right.c0, _x.road_edge_right.c1, _x.road_edge_right.c2, _x.road_edge_right.c3, _x.road_edge_right.lrange_start, _x.road_edge_right.lrange_end, _x.road_edge_right.lm_width, _x.road_edge_right.line_color, _x.road_edge_right.line_type, _x.road_edge_right.line_src, _x.host_lane.left_line.pt_conf, _x.host_lane.left_line.c0, _x.host_lane.left_line.c1, _x.host_lane.left_line.c2, _x.host_lane.left_line.c3, _x.host_lane.left_line.lrange_start, _x.host_lane.left_line.lrange_end, _x.host_lane.left_line.lm_width, _x.host_lane.left_line.line_color, _x.host_lane.left_line.line_type, _x.host_lane.left_line.line_src, _x.host_lane.right_line.pt_conf, _x.host_lane.right_line.c0, _x.host_lane.right_line.c1, _x.host_lane.right_line.c2, _x.host_lane.right_line.c3, _x.host_lane.right_line.lrange_start, _x.host_lane.right_line.lrange_end, _x.host_lane.right_line.lm_width, _x.host_lane.right_line.line_color, _x.host_lane.right_line.line_type, _x.host_lane.right_line.line_src,) = _get_struct_8f3i8f3i8f3i8f3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.host_lane.lane_type = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.host_lane.lane_start, _x.host_lane.lane_end, _x.host_lane.map_spd_limit, _x.host_lane.lane_width, _x.host_lane.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.host_lane.cur_point = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.host_lane.cur_value = s.unpack(str[start:end])
      _x = self
      start = end
      end += 97
      (_x.host_lane.lane_dir, _x.host_lane.ca_valid, _x.host_lane.lane_id, _x.left_lane.left_line.pt_conf, _x.left_lane.left_line.c0, _x.left_lane.left_line.c1, _x.left_lane.left_line.c2, _x.left_lane.left_line.c3, _x.left_lane.left_line.lrange_start, _x.left_lane.left_line.lrange_end, _x.left_lane.left_line.lm_width, _x.left_lane.left_line.line_color, _x.left_lane.left_line.line_type, _x.left_lane.left_line.line_src, _x.left_lane.right_line.pt_conf, _x.left_lane.right_line.c0, _x.left_lane.right_line.c1, _x.left_lane.right_line.c2, _x.left_lane.right_line.c3, _x.left_lane.right_line.lrange_start, _x.left_lane.right_line.lrange_end, _x.left_lane.right_line.lm_width, _x.left_lane.right_line.line_color, _x.left_lane.right_line.line_type, _x.left_lane.right_line.line_src,) = _get_struct_iBI8f3i8f3i().unpack(str[start:end])
      self.host_lane.ca_valid = bool(self.host_lane.ca_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_lane.lane_type = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.left_lane.lane_start, _x.left_lane.lane_end, _x.left_lane.map_spd_limit, _x.left_lane.lane_width, _x.left_lane.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_lane.cur_point = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_lane.cur_value = s.unpack(str[start:end])
      _x = self
      start = end
      end += 97
      (_x.left_lane.lane_dir, _x.left_lane.ca_valid, _x.left_lane.lane_id, _x.right_lane.left_line.pt_conf, _x.right_lane.left_line.c0, _x.right_lane.left_line.c1, _x.right_lane.left_line.c2, _x.right_lane.left_line.c3, _x.right_lane.left_line.lrange_start, _x.right_lane.left_line.lrange_end, _x.right_lane.left_line.lm_width, _x.right_lane.left_line.line_color, _x.right_lane.left_line.line_type, _x.right_lane.left_line.line_src, _x.right_lane.right_line.pt_conf, _x.right_lane.right_line.c0, _x.right_lane.right_line.c1, _x.right_lane.right_line.c2, _x.right_lane.right_line.c3, _x.right_lane.right_line.lrange_start, _x.right_lane.right_line.lrange_end, _x.right_lane.right_line.lm_width, _x.right_lane.right_line.line_color, _x.right_lane.right_line.line_type, _x.right_lane.right_line.line_src,) = _get_struct_iBI8f3i8f3i().unpack(str[start:end])
      self.left_lane.ca_valid = bool(self.left_lane.ca_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_lane.lane_type = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.right_lane.lane_start, _x.right_lane.lane_end, _x.right_lane.map_spd_limit, _x.right_lane.lane_width, _x.right_lane.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_lane.cur_point = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_lane.cur_value = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.right_lane.lane_dir, _x.right_lane.ca_valid, _x.right_lane.lane_id,) = _get_struct_iBI().unpack(str[start:end])
      self.right_lane.ca_valid = bool(self.right_lane.ca_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hdmap_info.ngp_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RmeMapGP()
        _x = val1
        start = end
        end += 41
        (_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr,) = _get_struct_fI2f4IB2i().unpack(str[start:end])
        val1.spd_unit = bool(val1.spd_unit)
        self.hdmap_info.ngp_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.interest_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RmeIntp()
        _v8 = val1.point
        _x = _v8
        start = end
        end += 28
        (_x.conf, _x.x, _x.y, _x.z, _x.w, _x.d, _x.s,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 28
        (_x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd,) = _get_struct_6iI().unpack(str[start:end])
        self.interest_point.append(val1)
      _x = self
      start = end
      end += 37
      (_x.road_start, _x.road_end, _x.total_lane_num, _x.num_lane_id, _x.road_type, _x.status, _x.obj_lm_rel.road_detection.timestamp, _x.obj_lm_rel.road_detection.laneline.LD_Lane_Width, _x.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag,) = _get_struct_2f4IQfB().unpack(str[start:end])
      self.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag = bool(self.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v9 = val1.LD_First_Line
        _x = _v9
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v10 = _v9.LD_Line
        _x = _v10
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v9
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v11 = val1.LD_Second_Line
        _x = _v11
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v12 = _v11.LD_Line
        _x = _v12
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v11
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v13 = val1.LD_Special_Point
        _x = _v13
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.obj_lm_rel.road_detection.laneline.line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_End, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Available, _x.obj_lm_rel.road_detection.lpp.LPP_Source, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Long, _x.obj_lm_rel.road_detection.lpp.LPP_Confidence, _x.obj_lm_rel.road_detection.lpp.LPP_First_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_First_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Second_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_Second_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available = bool(self.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available)
      self.obj_lm_rel.road_detection.lpp.LPP_Available = bool(self.obj_lm_rel.road_detection.lpp.LPP_Available)
      self.obj_lm_rel.road_detection.lpp.LPP_First_Valid = bool(self.obj_lm_rel.road_detection.lpp.LPP_First_Valid)
      self.obj_lm_rel.road_detection.lpp.LPP_Second_Valid = bool(self.obj_lm_rel.road_detection.lpp.LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v14 = val1.LD_RE_Line
        _x = _v14
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.LD_RE_Confidence, _x.LDRE_Class,) = _get_struct_fi().unpack(str[start:end])
        self.obj_lm_rel.road_detection.roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StopLine()
        _x = val1
        start = end
        end += 70
        (_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.SL_Zebra_Is_Detected = bool(val1.SL_Zebra_Is_Detected)
        val1.SL_Is_Detected = bool(val1.SL_Is_Detected)
        self.obj_lm_rel.road_detection.stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left)
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right)
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left)
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.guidepoint.INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.obj_lm_rel.road_detection.guidepoint.INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.obj_lm_rel.road_detection.lanesemantic.append(val1)
      start = end
      end += 8
      (self.obj_lm_rel.road_detection.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obj_lm_rel.road_detection.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obj_lm_rel.road_detection.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.obj_lm_rel.road_detection.counter, _x.obj_lm_rel.road_detection.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.pos_relation = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelRes()
        start = end
        end += 4
        (val1.obj_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lm_relation = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.LMRelRes()
          _x = val2
          start = end
          end += 16
          (_x.lm_id, _x.relative_pos, _x.dist, _x.conf,) = _get_struct_Ii2f().unpack(str[start:end])
          val1.lm_relation.append(val2)
        self.obj_lm_rel.pos_relation.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f3i8f3i8f3i8f3i().pack(_x.road_edge_left.pt_conf, _x.road_edge_left.c0, _x.road_edge_left.c1, _x.road_edge_left.c2, _x.road_edge_left.c3, _x.road_edge_left.lrange_start, _x.road_edge_left.lrange_end, _x.road_edge_left.lm_width, _x.road_edge_left.line_color, _x.road_edge_left.line_type, _x.road_edge_left.line_src, _x.road_edge_right.pt_conf, _x.road_edge_right.c0, _x.road_edge_right.c1, _x.road_edge_right.c2, _x.road_edge_right.c3, _x.road_edge_right.lrange_start, _x.road_edge_right.lrange_end, _x.road_edge_right.lm_width, _x.road_edge_right.line_color, _x.road_edge_right.line_type, _x.road_edge_right.line_src, _x.host_lane.left_line.pt_conf, _x.host_lane.left_line.c0, _x.host_lane.left_line.c1, _x.host_lane.left_line.c2, _x.host_lane.left_line.c3, _x.host_lane.left_line.lrange_start, _x.host_lane.left_line.lrange_end, _x.host_lane.left_line.lm_width, _x.host_lane.left_line.line_color, _x.host_lane.left_line.line_type, _x.host_lane.left_line.line_src, _x.host_lane.right_line.pt_conf, _x.host_lane.right_line.c0, _x.host_lane.right_line.c1, _x.host_lane.right_line.c2, _x.host_lane.right_line.c3, _x.host_lane.right_line.lrange_start, _x.host_lane.right_line.lrange_end, _x.host_lane.right_line.lm_width, _x.host_lane.right_line.line_color, _x.host_lane.right_line.line_type, _x.host_lane.right_line.line_src))
      length = len(self.host_lane.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.host_lane.lane_type.tostring())
      _x = self
      buff.write(_get_struct_5f().pack(_x.host_lane.lane_start, _x.host_lane.lane_end, _x.host_lane.map_spd_limit, _x.host_lane.lane_width, _x.host_lane.ca_lon_dst))
      length = len(self.host_lane.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.host_lane.cur_point.tostring())
      length = len(self.host_lane.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.host_lane.cur_value.tostring())
      _x = self
      buff.write(_get_struct_iBI8f3i8f3i().pack(_x.host_lane.lane_dir, _x.host_lane.ca_valid, _x.host_lane.lane_id, _x.left_lane.left_line.pt_conf, _x.left_lane.left_line.c0, _x.left_lane.left_line.c1, _x.left_lane.left_line.c2, _x.left_lane.left_line.c3, _x.left_lane.left_line.lrange_start, _x.left_lane.left_line.lrange_end, _x.left_lane.left_line.lm_width, _x.left_lane.left_line.line_color, _x.left_lane.left_line.line_type, _x.left_lane.left_line.line_src, _x.left_lane.right_line.pt_conf, _x.left_lane.right_line.c0, _x.left_lane.right_line.c1, _x.left_lane.right_line.c2, _x.left_lane.right_line.c3, _x.left_lane.right_line.lrange_start, _x.left_lane.right_line.lrange_end, _x.left_lane.right_line.lm_width, _x.left_lane.right_line.line_color, _x.left_lane.right_line.line_type, _x.left_lane.right_line.line_src))
      length = len(self.left_lane.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.left_lane.lane_type.tostring())
      _x = self
      buff.write(_get_struct_5f().pack(_x.left_lane.lane_start, _x.left_lane.lane_end, _x.left_lane.map_spd_limit, _x.left_lane.lane_width, _x.left_lane.ca_lon_dst))
      length = len(self.left_lane.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_lane.cur_point.tostring())
      length = len(self.left_lane.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_lane.cur_value.tostring())
      _x = self
      buff.write(_get_struct_iBI8f3i8f3i().pack(_x.left_lane.lane_dir, _x.left_lane.ca_valid, _x.left_lane.lane_id, _x.right_lane.left_line.pt_conf, _x.right_lane.left_line.c0, _x.right_lane.left_line.c1, _x.right_lane.left_line.c2, _x.right_lane.left_line.c3, _x.right_lane.left_line.lrange_start, _x.right_lane.left_line.lrange_end, _x.right_lane.left_line.lm_width, _x.right_lane.left_line.line_color, _x.right_lane.left_line.line_type, _x.right_lane.left_line.line_src, _x.right_lane.right_line.pt_conf, _x.right_lane.right_line.c0, _x.right_lane.right_line.c1, _x.right_lane.right_line.c2, _x.right_lane.right_line.c3, _x.right_lane.right_line.lrange_start, _x.right_lane.right_line.lrange_end, _x.right_lane.right_line.lm_width, _x.right_lane.right_line.line_color, _x.right_lane.right_line.line_type, _x.right_lane.right_line.line_src))
      length = len(self.right_lane.lane_type)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.right_lane.lane_type.tostring())
      _x = self
      buff.write(_get_struct_5f().pack(_x.right_lane.lane_start, _x.right_lane.lane_end, _x.right_lane.map_spd_limit, _x.right_lane.lane_width, _x.right_lane.ca_lon_dst))
      length = len(self.right_lane.cur_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_lane.cur_point.tostring())
      length = len(self.right_lane.cur_value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_lane.cur_value.tostring())
      _x = self
      buff.write(_get_struct_iBI().pack(_x.right_lane.lane_dir, _x.right_lane.ca_valid, _x.right_lane.lane_id))
      length = len(self.hdmap_info.ngp_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.hdmap_info.ngp_list:
        _x = val1
        buff.write(_get_struct_fI2f4IB2i().pack(_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr))
      length = len(self.interest_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.interest_point:
        _v15 = val1.point
        _x = _v15
        buff.write(_get_struct_7f().pack(_x.conf, _x.x, _x.y, _x.z, _x.w, _x.d, _x.s))
        _x = val1
        buff.write(_get_struct_6iI().pack(_x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd))
      _x = self
      buff.write(_get_struct_2f4IQfB().pack(_x.road_start, _x.road_end, _x.total_lane_num, _x.num_lane_id, _x.road_type, _x.status, _x.obj_lm_rel.road_detection.timestamp, _x.obj_lm_rel.road_detection.laneline.LD_Lane_Width, _x.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag))
      length = len(self.obj_lm_rel.road_detection.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v16 = val1.LD_First_Line
        _x = _v16
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v17 = _v16.LD_Line
        _x = _v17
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v16
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v18 = val1.LD_Second_Line
        _x = _v18
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v19 = _v18.LD_Line
        _x = _v19
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v18
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v20 = val1.LD_Special_Point
        _x = _v20
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self
      buff.write(_get_struct_B6fBi3fB5fB5f().pack(_x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_End, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Available, _x.obj_lm_rel.road_detection.lpp.LPP_Source, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Long, _x.obj_lm_rel.road_detection.lpp.LPP_Confidence, _x.obj_lm_rel.road_detection.lpp.LPP_First_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_First_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Second_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_Second_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C3))
      length = len(self.obj_lm_rel.road_detection.roadedge)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.roadedge:
        _x = val1
        buff.write(_get_struct_3i2I3f().pack(_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End))
        _v21 = val1.LD_RE_Line
        _x = _v21
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = val1
        buff.write(_get_struct_fi().pack(_x.LD_RE_Confidence, _x.LDRE_Class))
      length = len(self.obj_lm_rel.road_detection.stopline)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.stopline:
        _x = val1
        buff.write(_get_struct_B8fBI2i5fi().pack(_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment))
      _x = self
      buff.write(_get_struct_4B().pack(_x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right))
      length = len(self.obj_lm_rel.road_detection.guidepoint.INTP_Point)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.guidepoint.INTP_Point:
        _x = val1
        buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
      length = len(self.obj_lm_rel.road_detection.lanesemantic)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.road_detection.lanesemantic:
        _x = val1
        buff.write(_get_struct_i2I2fi2f2i8fi().pack(_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status))
      _x = self.obj_lm_rel.road_detection.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.obj_lm_rel.road_detection.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.obj_lm_rel.road_detection.counter, _x.obj_lm_rel.road_detection.publish_ts))
      length = len(self.obj_lm_rel.pos_relation)
      buff.write(_struct_I.pack(length))
      for val1 in self.obj_lm_rel.pos_relation:
        _x = val1.obj_id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.lm_relation)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lm_relation:
          _x = val2
          buff.write(_get_struct_Ii2f().pack(_x.lm_id, _x.relative_pos, _x.dist, _x.conf))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.road_edge_left is None:
        self.road_edge_left = rospy_message_converter.msg.RmeLine()
      if self.road_edge_right is None:
        self.road_edge_right = rospy_message_converter.msg.RmeLine()
      if self.host_lane is None:
        self.host_lane = rospy_message_converter.msg.RmeLane()
      if self.left_lane is None:
        self.left_lane = rospy_message_converter.msg.RmeLane()
      if self.right_lane is None:
        self.right_lane = rospy_message_converter.msg.RmeLane()
      if self.hdmap_info is None:
        self.hdmap_info = rospy_message_converter.msg.RmeHDMap()
      if self.interest_point is None:
        self.interest_point = None
      if self.obj_lm_rel is None:
        self.obj_lm_rel = rospy_message_converter.msg.ObjLMRel()
      end = 0
      _x = self
      start = end
      end += 176
      (_x.road_edge_left.pt_conf, _x.road_edge_left.c0, _x.road_edge_left.c1, _x.road_edge_left.c2, _x.road_edge_left.c3, _x.road_edge_left.lrange_start, _x.road_edge_left.lrange_end, _x.road_edge_left.lm_width, _x.road_edge_left.line_color, _x.road_edge_left.line_type, _x.road_edge_left.line_src, _x.road_edge_right.pt_conf, _x.road_edge_right.c0, _x.road_edge_right.c1, _x.road_edge_right.c2, _x.road_edge_right.c3, _x.road_edge_right.lrange_start, _x.road_edge_right.lrange_end, _x.road_edge_right.lm_width, _x.road_edge_right.line_color, _x.road_edge_right.line_type, _x.road_edge_right.line_src, _x.host_lane.left_line.pt_conf, _x.host_lane.left_line.c0, _x.host_lane.left_line.c1, _x.host_lane.left_line.c2, _x.host_lane.left_line.c3, _x.host_lane.left_line.lrange_start, _x.host_lane.left_line.lrange_end, _x.host_lane.left_line.lm_width, _x.host_lane.left_line.line_color, _x.host_lane.left_line.line_type, _x.host_lane.left_line.line_src, _x.host_lane.right_line.pt_conf, _x.host_lane.right_line.c0, _x.host_lane.right_line.c1, _x.host_lane.right_line.c2, _x.host_lane.right_line.c3, _x.host_lane.right_line.lrange_start, _x.host_lane.right_line.lrange_end, _x.host_lane.right_line.lm_width, _x.host_lane.right_line.line_color, _x.host_lane.right_line.line_type, _x.host_lane.right_line.line_src,) = _get_struct_8f3i8f3i8f3i8f3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.host_lane.lane_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.host_lane.lane_start, _x.host_lane.lane_end, _x.host_lane.map_spd_limit, _x.host_lane.lane_width, _x.host_lane.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.host_lane.cur_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.host_lane.cur_value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 97
      (_x.host_lane.lane_dir, _x.host_lane.ca_valid, _x.host_lane.lane_id, _x.left_lane.left_line.pt_conf, _x.left_lane.left_line.c0, _x.left_lane.left_line.c1, _x.left_lane.left_line.c2, _x.left_lane.left_line.c3, _x.left_lane.left_line.lrange_start, _x.left_lane.left_line.lrange_end, _x.left_lane.left_line.lm_width, _x.left_lane.left_line.line_color, _x.left_lane.left_line.line_type, _x.left_lane.left_line.line_src, _x.left_lane.right_line.pt_conf, _x.left_lane.right_line.c0, _x.left_lane.right_line.c1, _x.left_lane.right_line.c2, _x.left_lane.right_line.c3, _x.left_lane.right_line.lrange_start, _x.left_lane.right_line.lrange_end, _x.left_lane.right_line.lm_width, _x.left_lane.right_line.line_color, _x.left_lane.right_line.line_type, _x.left_lane.right_line.line_src,) = _get_struct_iBI8f3i8f3i().unpack(str[start:end])
      self.host_lane.ca_valid = bool(self.host_lane.ca_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_lane.lane_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.left_lane.lane_start, _x.left_lane.lane_end, _x.left_lane.map_spd_limit, _x.left_lane.lane_width, _x.left_lane.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_lane.cur_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_lane.cur_value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 97
      (_x.left_lane.lane_dir, _x.left_lane.ca_valid, _x.left_lane.lane_id, _x.right_lane.left_line.pt_conf, _x.right_lane.left_line.c0, _x.right_lane.left_line.c1, _x.right_lane.left_line.c2, _x.right_lane.left_line.c3, _x.right_lane.left_line.lrange_start, _x.right_lane.left_line.lrange_end, _x.right_lane.left_line.lm_width, _x.right_lane.left_line.line_color, _x.right_lane.left_line.line_type, _x.right_lane.left_line.line_src, _x.right_lane.right_line.pt_conf, _x.right_lane.right_line.c0, _x.right_lane.right_line.c1, _x.right_lane.right_line.c2, _x.right_lane.right_line.c3, _x.right_lane.right_line.lrange_start, _x.right_lane.right_line.lrange_end, _x.right_lane.right_line.lm_width, _x.right_lane.right_line.line_color, _x.right_lane.right_line.line_type, _x.right_lane.right_line.line_src,) = _get_struct_iBI8f3i8f3i().unpack(str[start:end])
      self.left_lane.ca_valid = bool(self.left_lane.ca_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_lane.lane_type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.right_lane.lane_start, _x.right_lane.lane_end, _x.right_lane.map_spd_limit, _x.right_lane.lane_width, _x.right_lane.ca_lon_dst,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_lane.cur_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_lane.cur_value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 9
      (_x.right_lane.lane_dir, _x.right_lane.ca_valid, _x.right_lane.lane_id,) = _get_struct_iBI().unpack(str[start:end])
      self.right_lane.ca_valid = bool(self.right_lane.ca_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hdmap_info.ngp_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RmeMapGP()
        _x = val1
        start = end
        end += 41
        (_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr,) = _get_struct_fI2f4IB2i().unpack(str[start:end])
        val1.spd_unit = bool(val1.spd_unit)
        self.hdmap_info.ngp_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.interest_point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RmeIntp()
        _v22 = val1.point
        _x = _v22
        start = end
        end += 28
        (_x.conf, _x.x, _x.y, _x.z, _x.w, _x.d, _x.s,) = _get_struct_7f().unpack(str[start:end])
        _x = val1
        start = end
        end += 28
        (_x.id, _x.intp_class, _x.source, _x.role, _x.far_markclass, _x.far_color, _x.far_spd,) = _get_struct_6iI().unpack(str[start:end])
        self.interest_point.append(val1)
      _x = self
      start = end
      end += 37
      (_x.road_start, _x.road_end, _x.total_lane_num, _x.num_lane_id, _x.road_type, _x.status, _x.obj_lm_rel.road_detection.timestamp, _x.obj_lm_rel.road_detection.laneline.LD_Lane_Width, _x.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag,) = _get_struct_2f4IQfB().unpack(str[start:end])
      self.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag = bool(self.obj_lm_rel.road_detection.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v23 = val1.LD_First_Line
        _x = _v23
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v24 = _v23.LD_Line
        _x = _v24
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v23
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v25 = val1.LD_Second_Line
        _x = _v25
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v26 = _v25.LD_Line
        _x = _v26
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v25
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v27 = val1.LD_Special_Point
        _x = _v27
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.obj_lm_rel.road_detection.laneline.line.append(val1)
      _x = self
      start = end
      end += 84
      (_x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Start, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_End, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C0, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C1, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C2, _x.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Available, _x.obj_lm_rel.road_detection.lpp.LPP_Source, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Lat, _x.obj_lm_rel.road_detection.lpp.LPP_Ctrl_Point_Long, _x.obj_lm_rel.road_detection.lpp.LPP_Confidence, _x.obj_lm_rel.road_detection.lpp.LPP_First_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_First_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_First.line_C3, _x.obj_lm_rel.road_detection.lpp.LPP_Second_Valid, _x.obj_lm_rel.road_detection.lpp.LPP_Second_VR_End, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C0, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C1, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C2, _x.obj_lm_rel.road_detection.lpp.LPP_Second.line_C3,) = _get_struct_B6fBi3fB5fB5f().unpack(str[start:end])
      self.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available = bool(self.obj_lm_rel.road_detection.slop.LD_Road_Vertical_Surface_Available)
      self.obj_lm_rel.road_detection.lpp.LPP_Available = bool(self.obj_lm_rel.road_detection.lpp.LPP_Available)
      self.obj_lm_rel.road_detection.lpp.LPP_First_Valid = bool(self.obj_lm_rel.road_detection.lpp.LPP_First_Valid)
      self.obj_lm_rel.road_detection.lpp.LPP_Second_Valid = bool(self.obj_lm_rel.road_detection.lpp.LPP_Second_Valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.roadedge = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Roadedge()
        _x = val1
        start = end
        end += 32
        (_x.LD_RE_Type, _x.LD_RE_Side, _x.LD_RE_From_Host_Index, _x.LD_RE_ID, _x.LD_RE_Age, _x.LD_RE_Height, _x.LD_RE_VR_Start, _x.LD_RE_VR_End,) = _get_struct_3i2I3f().unpack(str[start:end])
        _v28 = val1.LD_RE_Line
        _x = _v28
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.LD_RE_Confidence, _x.LDRE_Class,) = _get_struct_fi().unpack(str[start:end])
        self.obj_lm_rel.road_detection.roadedge.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.stopline = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.StopLine()
        _x = val1
        start = end
        end += 70
        (_x.SL_Zebra_Is_Detected, _x.SL_Zebra_Lat_0, _x.SL_Zebra_Long_0, _x.SL_Zebra_Lat_1, _x.SL_Zebra_Long_1, _x.SL_Zebra_Lat_2, _x.SL_Zebra_Long_2, _x.SL_Zebra_Lat_3, _x.SL_Zebra_Long_3, _x.SL_Is_Detected, _x.SL_ID, _x.SL_Type, _x.SL_Measure_Status, _x.SL_Probability, _x.SL_Long_Dist_L, _x.SL_Long_Dist_R, _x.SL_Lat_Dist_L, _x.SL_Lat_Dist_R, _x.SL_Lane_Assessment,) = _get_struct_B8fBI2i5fi().unpack(str[start:end])
        val1.SL_Zebra_Is_Detected = bool(val1.SL_Zebra_Is_Detected)
        val1.SL_Is_Detected = bool(val1.SL_Is_Detected)
        self.obj_lm_rel.road_detection.stopline.append(val1)
      _x = self
      start = end
      end += 4
      (_x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left, _x.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right,) = _get_struct_4B().unpack(str[start:end])
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Left)
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Merge_Right)
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Left)
      self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right = bool(self.obj_lm_rel.road_detection.guidepoint.INTP_Is_Highway_Exit_Right)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.guidepoint.INTP_Point = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.InterestPoint()
        _x = val1
        start = end
        end += 28
        (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
        self.obj_lm_rel.road_detection.guidepoint.INTP_Point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.road_detection.lanesemantic = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneSemantic()
        _x = val1
        start = end
        end += 76
        (_x.SLD_Direction, _x.SLD_ID, _x.SLD_Count, _x.SLD_Lat, _x.SLD_Long, _x.SLD_Orientation, _x.SLD_Orientation_Probability, _x.SLD_Direction_Probability, _x.SLD_Role, _x.SLD_Type, _x.SLD_No_Park_Zone_Lat_0, _x.SLD_No_Park_Zone_Long_0, _x.SLD_No_Park_Zone_Lat_1, _x.SLD_No_Park_Zone_Long_1, _x.SLD_No_Park_Zone_Lat_2, _x.SLD_No_Park_Zone_Long_2, _x.SLD_No_Park_Zone_Lat_3, _x.SLD_No_Park_Zone_Long_3, _x.SLD_Road_Status,) = _get_struct_i2I2fi2f2i8fi().unpack(str[start:end])
        self.obj_lm_rel.road_detection.lanesemantic.append(val1)
      start = end
      end += 8
      (self.obj_lm_rel.road_detection.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obj_lm_rel.road_detection.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obj_lm_rel.road_detection.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.obj_lm_rel.road_detection.counter, _x.obj_lm_rel.road_detection.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obj_lm_rel.pos_relation = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelRes()
        start = end
        end += 4
        (val1.obj_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lm_relation = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.LMRelRes()
          _x = val2
          start = end
          end += 16
          (_x.lm_id, _x.relative_pos, _x.dist, _x.conf,) = _get_struct_Ii2f().unpack(str[start:end])
          val1.lm_relation.append(val2)
        self.obj_lm_rel.pos_relation.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f4IQfB = None
def _get_struct_2f4IQfB():
    global _struct_2f4IQfB
    if _struct_2f4IQfB is None:
        _struct_2f4IQfB = struct.Struct("<2f4IQfB")
    return _struct_2f4IQfB
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i2I3f = None
def _get_struct_3i2I3f():
    global _struct_3i2I3f
    if _struct_3i2I3f is None:
        _struct_3i2I3f = struct.Struct("<3i2I3f")
    return _struct_3i2I3f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_6iI = None
def _get_struct_6iI():
    global _struct_6iI
    if _struct_6iI is None:
        _struct_6iI = struct.Struct("<6iI")
    return _struct_6iI
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_8f3i8f3i8f3i8f3i = None
def _get_struct_8f3i8f3i8f3i8f3i():
    global _struct_8f3i8f3i8f3i8f3i
    if _struct_8f3i8f3i8f3i8f3i is None:
        _struct_8f3i8f3i8f3i8f3i = struct.Struct("<8f3i8f3i8f3i8f3i")
    return _struct_8f3i8f3i8f3i8f3i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B6fBi3fB5fB5f = None
def _get_struct_B6fBi3fB5fB5f():
    global _struct_B6fBi3fB5fB5f
    if _struct_B6fBi3fB5fB5f is None:
        _struct_B6fBi3fB5fB5f = struct.Struct("<B6fBi3fB5fB5f")
    return _struct_B6fBi3fB5fB5f
_struct_B8fBI2i5fi = None
def _get_struct_B8fBI2i5fi():
    global _struct_B8fBI2i5fi
    if _struct_B8fBI2i5fi is None:
        _struct_B8fBI2i5fi = struct.Struct("<B8fBI2i5fi")
    return _struct_B8fBI2i5fi
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_Ii2f = None
def _get_struct_Ii2f():
    global _struct_Ii2f
    if _struct_Ii2f is None:
        _struct_Ii2f = struct.Struct("<Ii2f")
    return _struct_Ii2f
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_fI2f4IB2i = None
def _get_struct_fI2f4IB2i():
    global _struct_fI2f4IB2i
    if _struct_fI2f4IB2i is None:
        _struct_fI2f4IB2i = struct.Struct("<fI2f4IB2i")
    return _struct_fI2f4IB2i
_struct_fi = None
def _get_struct_fi():
    global _struct_fi
    if _struct_fi is None:
        _struct_fi = struct.Struct("<fi")
    return _struct_fi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2I2fi2f2i8fi = None
def _get_struct_i2I2fi2f2i8fi():
    global _struct_i2I2fi2f2i8fi
    if _struct_i2I2fi2f2i8fi is None:
        _struct_i2I2fi2f2i8fi = struct.Struct("<i2I2fi2f2i8fi")
    return _struct_i2I2fi2f2i8fi
_struct_i2Ii3f = None
def _get_struct_i2Ii3f():
    global _struct_i2Ii3f
    if _struct_i2Ii3f is None:
        _struct_i2Ii3f = struct.Struct("<i2Ii3f")
    return _struct_i2Ii3f
_struct_iBI = None
def _get_struct_iBI():
    global _struct_iBI
    if _struct_iBI is None:
        _struct_iBI = struct.Struct("<iBI")
    return _struct_iBI
_struct_iBI8f3i8f3i = None
def _get_struct_iBI8f3i8f3i():
    global _struct_iBI8f3i8f3i
    if _struct_iBI8f3i8f3i is None:
        _struct_iBI8f3i8f3i = struct.Struct("<iBI8f3i8f3i")
    return _struct_iBI8f3i8f3i

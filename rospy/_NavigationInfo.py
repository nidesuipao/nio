# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/NavigationInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class NavigationInfo(genpy.Message):
  _md5sum = "2d36270621aec2680383845ec29d9abe"
  _type = "rospy_message_converter/NavigationInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """HeartBeatInfo heart_beat_info
TurnInfo turn_info
SpeedLimitInfo[] speed_limit_info
int32 road_class

================================================================================
MSG: rospy_message_converter/HeartBeatInfo
uint64 heart_beat
int32 reliable_state
int32 navigation_state

================================================================================
MSG: rospy_message_converter/TurnInfo
uint64 dist_to_first_turn
uint64 first_turn_info
uint64 dist_to_second_turn
uint64 second_turn_info
uint64[] lanenr_info

================================================================================
MSG: rospy_message_converter/SpeedLimitInfo
uint64 speed_limit
int32 speed_limit_type
"""
  __slots__ = ['heart_beat_info','turn_info','speed_limit_info','road_class']
  _slot_types = ['rospy_message_converter/HeartBeatInfo','rospy_message_converter/TurnInfo','rospy_message_converter/SpeedLimitInfo[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heart_beat_info,turn_info,speed_limit_info,road_class

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavigationInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.heart_beat_info is None:
        self.heart_beat_info = rospy_message_converter.msg.HeartBeatInfo()
      if self.turn_info is None:
        self.turn_info = rospy_message_converter.msg.TurnInfo()
      if self.speed_limit_info is None:
        self.speed_limit_info = []
      if self.road_class is None:
        self.road_class = 0
    else:
      self.heart_beat_info = rospy_message_converter.msg.HeartBeatInfo()
      self.turn_info = rospy_message_converter.msg.TurnInfo()
      self.speed_limit_info = []
      self.road_class = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Q2i4Q().pack(_x.heart_beat_info.heart_beat, _x.heart_beat_info.reliable_state, _x.heart_beat_info.navigation_state, _x.turn_info.dist_to_first_turn, _x.turn_info.first_turn_info, _x.turn_info.dist_to_second_turn, _x.turn_info.second_turn_info))
      length = len(self.turn_info.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.turn_info.lanenr_info))
      length = len(self.speed_limit_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.speed_limit_info:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.speed_limit, _x.speed_limit_type))
      _x = self.road_class
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.heart_beat_info is None:
        self.heart_beat_info = rospy_message_converter.msg.HeartBeatInfo()
      if self.turn_info is None:
        self.turn_info = rospy_message_converter.msg.TurnInfo()
      if self.speed_limit_info is None:
        self.speed_limit_info = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.heart_beat_info.heart_beat, _x.heart_beat_info.reliable_state, _x.heart_beat_info.navigation_state, _x.turn_info.dist_to_first_turn, _x.turn_info.first_turn_info, _x.turn_info.dist_to_second_turn, _x.turn_info.second_turn_info,) = _get_struct_Q2i4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.turn_info.lanenr_info = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speed_limit_info = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedLimitInfo()
        _x = val1
        start = end
        end += 12
        (_x.speed_limit, _x.speed_limit_type,) = _get_struct_Qi().unpack(str[start:end])
        self.speed_limit_info.append(val1)
      start = end
      end += 4
      (self.road_class,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Q2i4Q().pack(_x.heart_beat_info.heart_beat, _x.heart_beat_info.reliable_state, _x.heart_beat_info.navigation_state, _x.turn_info.dist_to_first_turn, _x.turn_info.first_turn_info, _x.turn_info.dist_to_second_turn, _x.turn_info.second_turn_info))
      length = len(self.turn_info.lanenr_info)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.turn_info.lanenr_info.tostring())
      length = len(self.speed_limit_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.speed_limit_info:
        _x = val1
        buff.write(_get_struct_Qi().pack(_x.speed_limit, _x.speed_limit_type))
      _x = self.road_class
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.heart_beat_info is None:
        self.heart_beat_info = rospy_message_converter.msg.HeartBeatInfo()
      if self.turn_info is None:
        self.turn_info = rospy_message_converter.msg.TurnInfo()
      if self.speed_limit_info is None:
        self.speed_limit_info = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.heart_beat_info.heart_beat, _x.heart_beat_info.reliable_state, _x.heart_beat_info.navigation_state, _x.turn_info.dist_to_first_turn, _x.turn_info.first_turn_info, _x.turn_info.dist_to_second_turn, _x.turn_info.second_turn_info,) = _get_struct_Q2i4Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.turn_info.lanenr_info = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speed_limit_info = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SpeedLimitInfo()
        _x = val1
        start = end
        end += 12
        (_x.speed_limit, _x.speed_limit_type,) = _get_struct_Qi().unpack(str[start:end])
        self.speed_limit_info.append(val1)
      start = end
      end += 4
      (self.road_class,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q2i4Q = None
def _get_struct_Q2i4Q():
    global _struct_Q2i4Q
    if _struct_Q2i4Q is None:
        _struct_Q2i4Q = struct.Struct("<Q2i4Q")
    return _struct_Q2i4Q
_struct_Qi = None
def _get_struct_Qi():
    global _struct_Qi
    if _struct_Qi is None:
        _struct_Qi = struct.Struct("<Qi")
    return _struct_Qi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

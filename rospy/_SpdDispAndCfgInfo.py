# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SpdDispAndCfgInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpdDispAndCfgInfo(genpy.Message):
  _md5sum = "a4424232c5c121c2c9387b45509c6cd4"
  _type = "rospy_message_converter/SpdDispAndCfgInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 SAS_SLIF_State
int32 SAS_SLWF_WarnTrigger
int32 SAS_SpeedLimitAttribute
int32 SAS_SpeedLimitTakeover
bool SAS_SpeedLimitUnit
uint32 SAS_SpeedLimitValue
bool SAS_SupSignAttribute
uint32 SAS_SupSignType
uint32 SAS_LocalHzrd
uint32 SAS_RdFtrWarnSign
uint32 SAS_TrffcLghtSts
"""
  __slots__ = ['SAS_SLIF_State','SAS_SLWF_WarnTrigger','SAS_SpeedLimitAttribute','SAS_SpeedLimitTakeover','SAS_SpeedLimitUnit','SAS_SpeedLimitValue','SAS_SupSignAttribute','SAS_SupSignType','SAS_LocalHzrd','SAS_RdFtrWarnSign','SAS_TrffcLghtSts']
  _slot_types = ['int32','int32','int32','int32','bool','uint32','bool','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SAS_SLIF_State,SAS_SLWF_WarnTrigger,SAS_SpeedLimitAttribute,SAS_SpeedLimitTakeover,SAS_SpeedLimitUnit,SAS_SpeedLimitValue,SAS_SupSignAttribute,SAS_SupSignType,SAS_LocalHzrd,SAS_RdFtrWarnSign,SAS_TrffcLghtSts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpdDispAndCfgInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SAS_SLIF_State is None:
        self.SAS_SLIF_State = 0
      if self.SAS_SLWF_WarnTrigger is None:
        self.SAS_SLWF_WarnTrigger = 0
      if self.SAS_SpeedLimitAttribute is None:
        self.SAS_SpeedLimitAttribute = 0
      if self.SAS_SpeedLimitTakeover is None:
        self.SAS_SpeedLimitTakeover = 0
      if self.SAS_SpeedLimitUnit is None:
        self.SAS_SpeedLimitUnit = False
      if self.SAS_SpeedLimitValue is None:
        self.SAS_SpeedLimitValue = 0
      if self.SAS_SupSignAttribute is None:
        self.SAS_SupSignAttribute = False
      if self.SAS_SupSignType is None:
        self.SAS_SupSignType = 0
      if self.SAS_LocalHzrd is None:
        self.SAS_LocalHzrd = 0
      if self.SAS_RdFtrWarnSign is None:
        self.SAS_RdFtrWarnSign = 0
      if self.SAS_TrffcLghtSts is None:
        self.SAS_TrffcLghtSts = 0
    else:
      self.SAS_SLIF_State = 0
      self.SAS_SLWF_WarnTrigger = 0
      self.SAS_SpeedLimitAttribute = 0
      self.SAS_SpeedLimitTakeover = 0
      self.SAS_SpeedLimitUnit = False
      self.SAS_SpeedLimitValue = 0
      self.SAS_SupSignAttribute = False
      self.SAS_SupSignType = 0
      self.SAS_LocalHzrd = 0
      self.SAS_RdFtrWarnSign = 0
      self.SAS_TrffcLghtSts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4iBIB4I().pack(_x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SAS_SpeedLimitAttribute, _x.SAS_SpeedLimitTakeover, _x.SAS_SpeedLimitUnit, _x.SAS_SpeedLimitValue, _x.SAS_SupSignAttribute, _x.SAS_SupSignType, _x.SAS_LocalHzrd, _x.SAS_RdFtrWarnSign, _x.SAS_TrffcLghtSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SAS_SpeedLimitAttribute, _x.SAS_SpeedLimitTakeover, _x.SAS_SpeedLimitUnit, _x.SAS_SpeedLimitValue, _x.SAS_SupSignAttribute, _x.SAS_SupSignType, _x.SAS_LocalHzrd, _x.SAS_RdFtrWarnSign, _x.SAS_TrffcLghtSts,) = _get_struct_4iBIB4I().unpack(str[start:end])
      self.SAS_SpeedLimitUnit = bool(self.SAS_SpeedLimitUnit)
      self.SAS_SupSignAttribute = bool(self.SAS_SupSignAttribute)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4iBIB4I().pack(_x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SAS_SpeedLimitAttribute, _x.SAS_SpeedLimitTakeover, _x.SAS_SpeedLimitUnit, _x.SAS_SpeedLimitValue, _x.SAS_SupSignAttribute, _x.SAS_SupSignType, _x.SAS_LocalHzrd, _x.SAS_RdFtrWarnSign, _x.SAS_TrffcLghtSts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SAS_SpeedLimitAttribute, _x.SAS_SpeedLimitTakeover, _x.SAS_SpeedLimitUnit, _x.SAS_SpeedLimitValue, _x.SAS_SupSignAttribute, _x.SAS_SupSignType, _x.SAS_LocalHzrd, _x.SAS_RdFtrWarnSign, _x.SAS_TrffcLghtSts,) = _get_struct_4iBIB4I().unpack(str[start:end])
      self.SAS_SpeedLimitUnit = bool(self.SAS_SpeedLimitUnit)
      self.SAS_SupSignAttribute = bool(self.SAS_SupSignAttribute)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4iBIB4I = None
def _get_struct_4iBIB4I():
    global _struct_4iBIB4I
    if _struct_4iBIB4I is None:
        _struct_4iBIB4I = struct.Struct("<4iBIB4I")
    return _struct_4iBIB4I

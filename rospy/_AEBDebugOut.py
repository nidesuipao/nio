# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AEBDebugOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AEBDebugOut(genpy.Message):
  _md5sum = "4290efd7b6dd9c937c6057a8c0d27843"
  _type = "rospy_message_converter/AEBDebugOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """VRUCandiOut pedcross
VRUCandiOut pedoncom
VRUCandiOut bikcross
VRUCandiOut bikoncom
CCRCandiOut CCRScandi
CCRCandiOut CCRMcandi
FTAPCandiOut FTAPcandi
VRUCandiOut PedRear
VRUCandiOut BikRear
EgoState HostState
VRUCandiOut[] Pedestrians
CCRCandiOut CloseTarget
DriverMonitorOut DriverMonitor
GOFOut[] GenObjFilter
CCRCandiOut CCFOcandi
CCCCandiOut CCCcandi
FusionAEBFlagOut FusionCCRFlag
FusionAEBFlagOut FusionVRUFlag
FusionAEBFlagOut FusionVRURearFlag
AebActuFlgOut AebActuFlg
ReservedOut AebReserved
AEBSMOut AEBSm
AEBSMOut FCWSm
AEBRearSMOut AebRearSm
AEBRearSMOut FcwRearSm
FuncSuppressOut FuncSuppress
AebDiagOut AebDiag
AebModeOut AebMode
AESCCRCandiOut AESCCRcandi
AESCCRCandiOut CloseAESTarget
AESPathVerify AESPathCheck
AESPlanOut AESPlanPath
dgbAebOut fAebOut
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/VRUCandiOut
uint32 ID
uint32 VID
float32 longpos
float32 latpos
float32 longspd
float32 latspd
float32 longacc
float32 latacc
float32 range
float32 rangerear
float32 rangerate
float32 TTC
float32 TTCrear
float32 XOLC
float32 latest
bool oncoming
bool preceding
bool crossing
bool stationary
uint32 AEBconf
bool inpath
bool vfcheck
bool lfcheck
uint32 age
bool agecheck
uint32 inpathage
bool inpathcheck
bool TOI
bool TOIrear
bool warn
bool prefill
bool lowbrake
bool highbrake
bool isvision
bool isfusion
bool isradar
float32 timetoturn
float32 timetobrake
bool steerflag
RefPoint ref_pos
float32 xpos_cir
float32 ypos_cir
float32 roc_tar
float32 mindist
float32 xpos_col
float32 ypos_col
float32 range_col
float32 range_col_tar
float32 yawrate
float32 heading
bool colposs
uint32 col_num
float32 TTC_cir
float32 TTL_cir
float32 TTC_tar
float32 TTL_tar

================================================================================
MSG: rospy_message_converter/RefPoint
uint32 ref_character
float64 pos_x
float64 pos_y
float64 range
float64 heading

================================================================================
MSG: rospy_message_converter/CCRCandiOut
uint32 ID
uint32 VID
float32 longpos
float32 latpos
float32 longspd
float32 latspd
float32 longacc
float32 latacc
float32 range
float32 rangerate
float32 TTC
float32 XOLC
uint32 movestate
bool moveout
bool inpath_before
bool inpath_after
uint32 AEBconf
bool inpath
bool vfcheck
bool lfcheck
uint32 age
bool agecheck
uint32 inpathage
bool inpathcheck
bool TOI
bool warn
bool prefill
bool lowbrake
bool highbrake
bool isvision
bool isfusion
bool isradar
float32 timetoturn
float32 timetobrake
bool steerflag
RefPoint ref_pos
bool iba_flag
float32 hitdist
float32 yawdist
bool driverovertake
bool driverovertake_warn
uint32 movingleftcount
uint32 movingrightcount

================================================================================
MSG: rospy_message_converter/FTAPCandiOut
uint32 ID
uint32 VID
float32 longpos
float32 latpos
float32 longspd
float32 latspd
float32 longacc
float32 latacc
float32 range
float32 rangerate
float32 TTC
float32 TTL
uint32 colnum
float32 colx
float32 coly
float32 colr
float32 heading
float32 currange
float32 estrange
float32 TTC_tar
float32 TTL_tar
uint32 TOI_before
uint32 TOI_after
bool inpathcur
bool inpathpre
bool inpathcur_warn
bool inpathpre_warn
bool inpath
bool inpath_tar
bool inpath_warn
uint32 inpathage
uint32 inpathage_warn
bool inpathagecheck
bool inpathagecheck_warn
uint32 AEBconf
bool oncoming
uint32 movingstate
float64 turnangle
bool warn
bool prefill
bool lowbrake
bool highbrake
bool isvision
bool isfusion
bool isradar
float32 timetoturn
float32 timetobrake
bool steerflag
RefPoint ref_pos
uint32 iba_flag

================================================================================
MSG: rospy_message_converter/EgoState
float32 vehspd
float32 yawrate
float32 steerangle
bool hostreverse
float32 brakepos
float32 brakeposrate
uint32 driverpressed
float32 maincypress
float32 maincyprsrate
bool driverintention
bool driverEBA
float32 ROC
float32 steerrate
float32 accpos
float32 accposrate

================================================================================
MSG: rospy_message_converter/DriverMonitorOut
float32 gaspedpos
float32 gaspedgrad
bool driverbrake
float32 brkpedpos
float32 steerwhlang
float32 steerwhlgrad
float32 egospd
float32 egoaccel
float32 egoyawrate
float32 turnlighton
uint32 egogear
uint32 feedbackstate
uint32 activitystate
uint32 focusstate
uint32 suppressbit
uint32 abortbit
float32[] dampfactor
float32 vel_std_dev
float32 sdytimer
float32 ramptimer
bool dampsuppress

================================================================================
MSG: rospy_message_converter/GOFOut
uint32 checkID
bool checkvalid
bool classcheck
bool fustcheck
bool agecheck
bool predcheck
bool frespacheck

================================================================================
MSG: rospy_message_converter/CCCCandiOut
uint32 ID
uint32 VID
float32 longpos
float32 latpos
float32 longspd
float32 latspd
float32 longacc
float32 latacc
float32 range
float32 rangerate
float32 TTC
float32 TTL
uint32 colnum
float32 colx
float32 coly
float32 colr
float32 heading
float32 currange
float32 estrange
float32 TTC_tar
float32 TTL_tar
uint32 TOI_before
uint32 TOI_after
bool inpathcur
bool inpathpre
bool inpath
uint32 AEBconf
bool warn
bool prefill
bool lowbrake
bool highbrake
bool isvision
bool isfusion
bool isradar
float32 timetoturn
float32 timetobrake
bool steerflag
RefPoint ref_pos
uint32 iba_flag

================================================================================
MSG: rospy_message_converter/FusionAEBFlagOut
uint32 warning_flag
uint32 prefill_flage
uint32 lowbrake_flag
uint32 highbrake_flag
uint32 unconfirmed_flag
uint32 hold_flag
uint32 lowbrake_age
uint32 highbrake_hold_age
uint32 warnbrake_flag
bool readyforIBA

================================================================================
MSG: rospy_message_converter/AebActuFlgOut
bool prewarn
bool latentwarn
bool prefill
bool warnbrk
bool softbrk
bool hardbrk
bool iba_req
uint32 warntype
bool hold_req

================================================================================
MSG: rospy_message_converter/ReservedOut
float64 aeb_reserved_1
float64 aeb_reserved_2
float64 aeb_reserved_3
float64 aeb_reserved_4
float64 aeb_reserved_5
float64 aeb_reserved_6
float64 aeb_reserved_7
float64 aeb_reserved_8
float64 aeb_reserved_9
float64 aeb_reserved_10
float64 aeb_reserved_11
float64 aeb_reserved_12
float64 aeb_reserved_13
float64 aeb_reserved_14
float64 aeb_reserved_15
float64 aeb_reserved_16
float64 aeb_reserved_17
float64 aeb_reserved_18
float64 aeb_reserved_19
float64 aeb_reserved_20
float64 aeb_reserved_21
float64 aeb_reserved_22
float64 aeb_reserved_23
float64 aeb_reserved_24
float64 aeb_reserved_25
float64 aeb_reserved_26
float64 aeb_reserved_27
float64 aeb_reserved_28
float64 aeb_reserved_29
float64 aeb_reserved_30
float64 aeb_reserved_31
float64 aeb_reserved_32
float64 aeb_reserved_33
float64 aeb_reserved_34
float64 aeb_reserved_35
float64 aeb_reserved_36
float64 aeb_reserved_37
float64 aeb_reserved_38
float64 aeb_reserved_39
float64 aeb_reserved_40
float64 aeb_reserved_41
float64 aeb_reserved_42
float64 aeb_reserved_43
float64 aeb_reserved_44
float64 aeb_reserved_45
float64 aeb_reserved_46
float64 aeb_reserved_47
float64 aeb_reserved_48
float64 aeb_reserved_49
float64 aeb_reserved_50
float64 aeb_reserved_51
float64 aeb_reserved_52
float64 aeb_reserved_53
float64 aeb_reserved_54
float64 aeb_reserved_55
float64 aeb_reserved_56
float64 aeb_reserved_57
float64 aeb_reserved_58
float64 aeb_reserved_59
float64 aeb_reserved_60
float64 aeb_reserved_61
float64 aeb_reserved_62
float64 aeb_reserved_63
float64 aeb_reserved_64
float64 aeb_reserved_65
float64 aeb_reserved_66
float64 aeb_reserved_67
float64 aeb_reserved_68
float64 aeb_reserved_69
float64 aeb_reserved_70
float64 aeb_reserved_71
float64 aeb_reserved_72
float64 aeb_reserved_73
float64 aeb_reserved_74
float64 aeb_reserved_75
float64 aeb_reserved_76
float64 aeb_reserved_77
float64 aeb_reserved_78
float64 aeb_reserved_79
float64 aeb_reserved_80
float64 aeb_reserved_81
float64 aeb_reserved_82
float64 aeb_reserved_83
float64 aeb_reserved_84
float64 aeb_reserved_85
float64 aeb_reserved_86
float64 aeb_reserved_87
float64 aeb_reserved_88
float64 aeb_reserved_89
float64 aeb_reserved_90
float64 aeb_reserved_91
float64 aeb_reserved_92
float64 aeb_reserved_93
float64 aeb_reserved_94
float64 aeb_reserved_95
float64 aeb_reserved_96
float64 aeb_reserved_97
float64 aeb_reserved_98
float64 aeb_reserved_99
float64 aeb_reserved_100

================================================================================
MSG: rospy_message_converter/AEBSMOut
bool snsrblk_cdn
bool tmpfail_cdn
bool permfail_cdn
bool psv_cdn
bool aebonff_cdn
bool factive_cdn
bool bactive_cdn
bool stdby_cdn
uint32 st
uint32 sys_st

================================================================================
MSG: rospy_message_converter/AEBRearSMOut
bool off_cdn
bool stdby_cdn
bool psv_cdn
uint32 psv_cdn_bit
bool fail_cdn
bool active_cdn
uint32 sm_state

================================================================================
MSG: rospy_message_converter/FuncSuppressOut
bool Aeb_Suppress
bool Fcw_Suppress
bool Aebrear_Suppress
bool Fcwrear_Suppress

================================================================================
MSG: rospy_message_converter/AebDiagOut
uint32 FCTsTopicState
uint32 AebTopicState
uint32 FcwTopicState
uint32 TopicLoss
uint32 TopicNoInit
uint32 AebFaultSt
uint32 FcwFaultSt
uint32 AebFimIndex
uint32 FcwFimIndex
uint32 AebRearFaultSt
uint32 AebRearFimIndex
uint32[] AebFault
uint32[] FcwFault
uint32[] AebRearFault
uint32[] FcwRearFault
uint32 FWfailsafe
uint32 FNfailsafe
uint32 Lidarfailsafe
uint32 Rearfailsafe

================================================================================
MSG: rospy_message_converter/AebModeOut
bool RearEnable
bool ShadowMode
bool ShadowModeSoft
bool HilMode

================================================================================
MSG: rospy_message_converter/AESCCRCandiOut
uint32 ID
uint32 VID
float32 range
float32 rangerate
float32 TTC
float32 TTB_tt
float32 TTB_valid
float32 TTT_left_tt
uint32 TTT_left_valid
float32 TTT_right_tt
uint32 TTT_right_valid
float32 closeleft_posx
float32 closeleft_posy
float32 closeleft_curx
float32 closeleft_cury
float32 closeleft_latest
float32 closeright_posx
float32 closeright_posy
float32 closeright_curx
float32 closeright_cury
float32 closeright_latest
float32 remoteleft_posx
float32 remoteleft_posy
float32 remoteleft_curx
float32 remoteleft_cury
float32 remoteleft_latest
float32 remoteright_posx
float32 remoteright_posy
float32 remoteright_curx
float32 remoteright_cury
float32 remoteright_latest
float32 center_posx
float32 center_posy
float32 center_curx
float32 center_cury
float32 center_latest
float32 longpos
float32 latpos
float32 XOLC
float32 latest
uint32 closest_corner
uint32 close_corner_est
uint32 inpath
uint32 inpathcur
uint32 inpathpre
uint32 inpathage
uint32 inpathcheck
uint32 isfusion
uint32 isvision
uint32 isradar
uint32 toi
uint32 isoncoming
uint32 AEBconf
uint32 steerflag
float32 steerdirection
RefPoint ref_pos

================================================================================
MSG: rospy_message_converter/AESPathVerify
uint32 plan_valid
uint32 target_valid
uint32 rout_valid
uint32 reservetime
float32 pnc_c0
float32 pnc_c1
float32 pnc_c2
float32 pnc_c3
float32 pnc_c4
float32 pnc_c5
uint32 crash_id
uint32 crash_lane
float32 aessteerangle
float32 aespncst
lanepolinomial host_left_lane
lanepolinomial host_right_lane
lanepolinomial left_edge
lanepolinomial right_edge
lpppolinomial host_lpp

================================================================================
MSG: rospy_message_converter/lanepolinomial
float32 path_c0
float32 path_c1
float32 path_c2
float32 path_c3
bool isvalid
uint32 path_type
uint32 path_color
uint32 character

================================================================================
MSG: rospy_message_converter/lpppolinomial
float32 path_c0
float32 path_c1
float32 path_c2
float32 path_c3
bool isvalid
float32 width

================================================================================
MSG: rospy_message_converter/AESPlanOut
PathPlaned root_path
uint32 aesplanactv
float32 ltrldstlacntr
float32 egolawdth
float32 agvehlanecntr
float32 lacurv
float32 ladcurv
float32 vehspdkph
float32 dispvehspdkph
PathPlaned[] better_path

================================================================================
MSG: rospy_message_converter/PathPlaned
float32 path_c0
float32 path_c1
float32 path_c2
float32 path_c3
float32 path_c4
float32 path_c5
float32 curvature
float32 dcurv
float32 expect_lat
float32 expect_long
uint32 isvalid
float32 rout_cost
float32 max_ay

================================================================================
MSG: rospy_message_converter/dgbAebOut
EbhpStru ebhpInfo
ObjectMap objOfInterestMap
CrenStru crenInfo
AcdnStru acdnInfo
TscdStru tscdInfo
StmeStru stmeInfo
RequestStru rqabInfo
TaDiagBus_t taDiagBusSignals
EbhpInnerInfo ebhpInnerInfo
OoifInnerInfo ooifInnerInfo
CrenInnerInfo crenInnerInfo
CarInfo carInfo
ObjInfo[] objInfo
AcdnInnerInfo acdnInnerInfo
StmeInnerInfo stmeInnerInfo
ReservedSpace reservedSpace
FySideFeatureDebug fySideFeatureDebug
RqabInnerInfo rqabInnerInfo
TimeCostInfo timeCostInfo
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/EbhpStru
EmncStru emncInfo
EtjpStru etjpInfo

================================================================================
MSG: rospy_message_converter/EmncStru
float32 maneuverProb
uint32 maneuver
float32 enterWeight
float32 exitWeight
float32 reserved

================================================================================
MSG: rospy_message_converter/EtjpStru
float32 curvature
float32 curvatureRate
float32 roc
TrajInfoStru trajCa
TrajInfoStru trajCv
float32[] reserved
float32 xEnd
float32 tEnd
Yx3CoefStru xyTrajRoc
Xt3CoefStru xtTraj
uint32 numSeg
float32[] xEndSegment
float32[] tEndSegment
Yx3CoefStru[] xyTrajSegment

================================================================================
MSG: rospy_message_converter/TrajInfoStru
float32 accel
TrajPointStru[] trajPoints
TrajPointStru endPoint
TrajPointStru validPoint
TrajPointStru stopPoint
float32[] reserved

================================================================================
MSG: rospy_message_converter/TrajPointStru
float32 x
float32 y
float32 s
float32 phi
float32 sinPhi
float32 cosPhi
float32 t
float32[] reserved

================================================================================
MSG: rospy_message_converter/Yx3CoefStru
float32 c0
float32 c1
float32 c2
float32 c3

================================================================================
MSG: rospy_message_converter/Xt3CoefStru
float32 a0
float32 a1
float32 a2
float32 a3

================================================================================
MSG: rospy_message_converter/ObjectMap
CrenStru[] car
CrenStru[] pedstrain
CrenStru[] bicyclist
CrenStru[] motor
CrenStru[] obstacle

================================================================================
MSG: rospy_message_converter/CrenStru
ObjectStru objInfo
ObhcStru obhcInfo
OthaStru othaInfo
float32[] reserved

================================================================================
MSG: rospy_message_converter/ObjectStru
uint32 id
uint32 visionId
uint32 radarId
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
float32 longDistStd
float32 latDistStd
float32 longVelStd
float32 latVelStd
float32 longAccelStd
float32 latAccelStd
uint32 motionStatus
uint32 detectionSensor
uint32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSnesor

================================================================================
MSG: rospy_message_converter/ObhcStru
float32 hypoProb
float32 collProb
float32 ttb
uint32 hypoLabel

================================================================================
MSG: rospy_message_converter/OthaStru
float32 aLgtNec
float32 aLatNec
float32 ttc
bool inPathNow

================================================================================
MSG: rospy_message_converter/AcdnStru
bool flgPreWarnTrigger
bool flgJerkTrigger
bool flgPrefillTrigger
bool flgPartialBrkTrigger
bool flgFullBrkTrigger
bool flgEbaTrigger
bool flgDangerRelease
bool flgObjInsideBlindZoom
bool flgFirstObjDangerRelease
bool flgHeadOnDangerRelease
bool flgHeadOnObjTrigger

================================================================================
MSG: rospy_message_converter/TscdStru
float32 spdAebReduce
float32 spdJerkReduce
bool flgDriverOverride
bool flgDriverBrake
bool flgDriveForward
bool flgDoorOpen
bool flgBeltWarn
bool flgVehEnable
bool flgChassisIntervince
bool flgBrakeOverHeat
bool flgEscOff
bool flgSysFault
bool flgPathFeasible

================================================================================
MSG: rospy_message_converter/StmeStru
uint32 fcwStatus
uint32 aebBrkStatus
uint32 ebaStatus

================================================================================
MSG: rospy_message_converter/RequestStru
uint32 fcwTargetId
uint32 aebTargetId
float32 aebDecelReq
bool aebReq
uint32 aebTargetType
uint32 aebStatus
bool abpReq
bool awbReq
bool ebaReq
bool fcwReq
uint32 fcwTargetType
uint32 fcwStatus

================================================================================
MSG: rospy_message_converter/TaDiagBus_t
uint32 NumberOfValidCar
uint32 NumberOfValidMotor
uint32 NumberOfValidPed
uint32 NumberOfValidBic
EgoTrajectoryPredForDiag_t diagBusForPredEgoTrjStru
ObjInfoOfDiagBus_t[] carObjInfoOfDiagBusVec
ObjInfoOfDiagBus_t[] vruObjInfoOfDiagBusVec
float32 jerkLatAbsMax
float32 accelLatAbsMax
float32 crvtRateAbsMax
float32 crvtAbsMax
float32 jerkLatAbsCmft
float32 accelLatAbsCmft
float32 crvtRateAbsCmft
float32 crvtAbsCmft
float32 accelLatAbsOnComingBrking
uint32 latPosnRoadConf
bool TAMode
float32[] reservedTaDebug

================================================================================
MSG: rospy_message_converter/EgoTrajectoryPredForDiag_t
float32 crvt
float32 crvtRate
float32 filteredEgoALgt
float32[] dstInTrjctry
float32[] egoPosnLgt
float32[] egoPosnLat
float32[] cosOfHeading
float32[] sinOfHeading
float32 lowPAx

================================================================================
MSG: rospy_message_converter/ObjInfoOfDiagBus_t
SortedObjectAebForDiag_t diagBusForSortedObjectAeb
uint32 objEnablerCheckResults
float32 longCloseEdgeDist
float32 timeDelay
float32 aLgtReqdPreCalcd
float32 aLatReqdPreCalcd
bool brkActvDlydForObj

================================================================================
MSG: rospy_message_converter/SortedObjectAebForDiag_t
uint32 id
uint32 type
bool stillExist
float32 marginsLatInPathCurr
float32 marginsLatInPathPred
float32 marginsLgtForIntv
float32 marginsLatForIntv
float32 offSetLatForPrimaryTarget
uint32 loopIndex
float32[] predCenPosnLgt
float32[] predCenPosnLat
float32[] predCosHeading
float32[] predSinHeading
uint32 objMovingDirection
bool linearOrCurvedPredValid
bool curvedMotion
bool stationary
bool movingOncoming
float32 aNegLgtRqrdForCtrl
float32 crvtReqdLe
float32 crvtRateReqdLe
float32 crvtReqdRi
float32 crvtRateReqdRi
bool[] opCond1
bool[] opCond2
bool[] opCond3
bool[] opCond4
float32 objVx
float32 objVy
float32 objAx
float32 objAy
uint32 ttrIndex
uint32 ttpIndex
uint32[] edgeIndex
uint32[] maxCLeIdx
uint32[] minCRiIdx
uint32[] taLateralThreatMatrixOpl
float32[] objLongPosnRelToHost
float32[] objLatPosnRelToHost
float32[] objLongSpanRelToHost
float32[] objLatSpanRelToHost
float32[] hostLongPosnRelToObj
float32[] hostLatPosnRelToObj
float32[] hostLongSpanRelToObj
float32[] hostLatSpanRelToObj
bool[] isValidUpdateForLongThreat
float32 aNegLgtJerkReqdForIntv
float32 objHeading
float32 aLgtPreCalc1
uint32 mostInPathIndex
float32 posnLatRel
float32 projectedWidth
float32[] xEdges
float32[] yEdges
float32[] egoMotionTime
float32[] egoXc
float32 ttp
uint32 fusionSource
uint32 brkIndex
float32[] objLongDistNear
bool[] inFwdPathResampled
float32[] timeVecResampled
float32 ttheta_left
float32 ttheta_right
float32 tZero
float32 tObjStop
bool flgJustPass
bool flgObjNotInPathAtTZero
bool TargetOnComingDuringHostTurn
bool TargetLowCurvature
bool LessHeadOnAtCollision
float32 headingAtHostStartOfTheTurn
float32 objTrjCurvature
float32 predObjHeadingAtTtc
float32 predHostHeadingChangeAtTtc
float32 predRelativeHeadingAtTtc
bool isGenMovingOnComingScenario
bool hostDrvStraight
bool hostIsTurning
bool targetIsTurning
bool relativePosnOkDuringHostTurn
bool isLtapTargetTurn
bool isLtapHostTurn
bool useStrictInPath
bool inPathCurPosn
float32 availStopdist
float32 rawBrkJerk
float32 rawBrkALgt
float32 impctPosnWithOutIntv
float32 impctPosnWithIntv

================================================================================
MSG: rospy_message_converter/EbhpInnerInfo
YawRateNoiseStru yawRateNoise
LearningCondStru learningCondInfo
uint32 yawRateLearnState
bool flgEsitmateEnable
float32[] modelConfidence
float32[] modelTransMatrix
float32[] statePriorHf
float32[] covPriorHf
float32[] statePostHf
float32[] covPostHf
float32[] statePriorCkv
float32[] covPriorCkv
float32[] statePostCkv
float32[] covPostCkv
float32[] residualCkv
float32[] sysUncertaintyCkv
float32[] procUncertaintyCkv
float32[] statePriorCka
float32[] covPriorCka
float32[] statePostCka
float32[] covPostCka
float32[] residualCka
float32[] sysUncertaintyCka
float32[] procUncertaintyCka
float32[] stateTransMatrix
float32[] measValues
float32[] measMatrix
float32[] measUncertainty
CurveCoeffStru curveCoeff

================================================================================
MSG: rospy_message_converter/YawRateNoiseStru
float32 bias
float32 std

================================================================================
MSG: rospy_message_converter/LearningCondStru
bool flgSwitch
bool flgFault
bool flgSuppress
bool flgActivate

================================================================================
MSG: rospy_message_converter/CurveCoeffStru
float32 curvature
float32 curvatureRate

================================================================================
MSG: rospy_message_converter/OoifInnerInfo
uint32 allObjNum
uint32 objPlausNum
uint32 carCandiNum
uint32 vruCandiNum
ObjPlausCheckStru[] objPlausStatus
ObjRelevanceStru[] objPlausVec
float32[] reserved
uint32[] objPlausIds
CarRelevanceMonitorStru[] carCandidatesVec
VruRelevanceMonitorStru[] vruCandidatesVec

================================================================================
MSG: rospy_message_converter/ObjPlausCheckStru
uint32 id
uint32 codeWord
float32 reserved

================================================================================
MSG: rospy_message_converter/ObjRelevanceStru
uint32 id
float32 tClose
float32 rangeClose
float32 objSensorErrorExt
float32 objSensorFluctExt
float32 egoFrontEndExt
float32 egoWidthExt
float32 overlapRate
bool flgOverlap
float32 collisionRelevance
ObjBoxStru egoBoxBase
ObjBoxStru egoBoxLengthExt
ObjBoxStru egoBoxExt
ObjBoxStru objBoxBase
ObjBoxStru ObjBoxExt
float32[] reserved
float32 objSensorTotalExt

================================================================================
MSG: rospy_message_converter/ObjBoxStru
float32[] x
float32[] y
float32[] reserved

================================================================================
MSG: rospy_message_converter/CarRelevanceMonitorStru
uint32 id
uint32 type
uint32 laneLoc
float32 curThw
float32 ttcLgt
float32 tFuture
float32 futRelevance
float32 curLgtDistCorr
float32 curLatDistCorr
float32 futLgtDistCorr
float32 futLatDistCorr
float32 futPosRelevance
float32 corridorHalfWidth
float32 adjLaneBoundary
float32 curPoseLgtDist
float32 curPoseLatDist
float32 curPoseRange
float32 curPoseHeading
float32 futPoseLgtDist
float32 futPoseLatDist
float32 futPoseRange
float32 futPoseHeading

================================================================================
MSG: rospy_message_converter/VruRelevanceMonitorStru
uint32 id
uint32 type
uint32 laneLoc
float32 futRelevance
float32 futRelevanceThld
float32 ttcLgtRear
float32 ttcLgtFront
float32 tFutureFront
float32 tFutureRear
float32 curLgtDistCorr
float32 curLatDistCorr
float32 dangerousZoneHalfWidth
float32 transitZoneHalftWidth
float32 zoneLength
float32 curPosRelevance
float32 corridorHalfWidth
float32 corridorMarginHalfWidth
float32 escapeHalfWidth
float32 escapeMarginHalfWidth
float32 objFutFrontLatDistMin
float32 objFutFrontLatDistMax
float32 objFutRearLatDistMin
float32 objFutRearLatDistMax
float32 pEscapeLeft
float32 pEscapeRight
float32 pEenterLeft
float32 pEnterRight
float32 pEnter
float32 pEscape
float32 curPoseLgtDist
float32 curPoseLatDist
float32 curPoseRange
float32 curPoseHeading
float32 futPoseToEgoFrontLgtDist
float32 futPoseToEgoFrontLatDist
float32 futPoseToEgoFrontRange
float32 futPoseToEgoFrontHeading
float32 futPoseToEgoRearLgtDist
float32 futPoseToEgoRearLatDist
float32 futPoseToEgoRearRange
float32 futPoseToEgoRearHeading
bool flgMoveForward
bool flgMoveBackward
bool flgMoveLeft
bool flgMoveRight
bool flgLatch

================================================================================
MSG: rospy_message_converter/CrenInnerInfo
uint32[] objPruneId
uint32 targetByPriorId
uint32 targetByTtcId
uint32 targetByDistId
uint32 targetByPostId
uint32 targetOldId
float32[] reserved

================================================================================
MSG: rospy_message_converter/CarInfo
float32 vLgt
float32 vLat
float32 aLgt
float32 aLat
float32 yawRate
bool yawRateValid
bool aLgtValid
bool aLatValid
uint32 motionStatus
float32 speed
float32 spdWhlFl
float32 spdWhlFr
float32 spdWhlRl
float32 spdWhlRr
bool spdWhlFlValid
bool spdWhlFrValid
bool spdWhlRlValid
bool spdWhlRrValid
uint32 dirWhlFl
uint32 dirWhlFr
uint32 dirWhlRl
uint32 dirWhlRr
float32 brkPedalTravel
float32 masterCylPress
float32 aLgtDriverBrkReq
bool brkStatus
bool masterCylPressValid
bool dtcActive
bool tcsActive
bool vdcActive
bool escOverHeat
bool escFault
bool escSwitch
float32 strAngle
float32 strSpeed
float32 pinAngle
bool strAngleValid
bool pinAngleValid
bool epsFault
float32 accelPedalPos
bool actGearValid
bool accelPedalPosValid
uint32 accStatus
uint32 actGear
uint32 vehicleState
uint32 vehicleMode
bool doorDriver
bool doorFrontPassenger
bool doorRearLeft
bool doorRearRight
bool hoodStatus
bool trailerStatus
bool turnLeftLight
bool turnRightLight
bool beltWarnDriver
bool beltWarnFrontPassenger
bool beltRearLeft
bool beltRearMid
bool beltRearRight
bool aebSetting
uint32 fcwSetting
float32 length
float32 width
float32 axisLength
float32 rearAxisToFrontEnd
float32 rearTrackWidth
float32 steerRatio
float32 cogToFrontAxis
float32 cogToRearAxis
float32 frontCornStiff
float32 rearCornStiff

================================================================================
MSG: rospy_message_converter/ObjInfo
uint32 OBJ_Object_Count
uint32 OBJ_VRU_Count
uint32 OBJ_VD_Count
uint32 OBJ_CIPV_ID
bool OBJ_CIPV_Lost
bool OBJ_Is_CCI
int32 OBJ_CCI_Side
uint32 OBJ_CCI_ID

================================================================================
MSG: rospy_message_converter/AcdnInnerInfo
float32 thdFcwTtcCompens
bool isSafeDistance
bool isSafeLgtRelSpd
bool isSafeLgtRelAcc
bool dangerRelease
float32 objLongDistCorr
uint32 fcwCodeWord
uint32 aebCodeWord
float32 crvtReqdLe
float32 crvtReqdRi
float32 driverCapCrvtCmfLe
float32 driverCapCrvtCmfRi
float32 driverCapCrvtMaxLe
float32 driverCapCrvtMaxRi
uint32 oldGearAct
float32 objLatDistGap
float32 flgLatEscapeLe
float32 flgLatEscapeRi
float32 isProceedDangerRelease
float32[] floatAcdnInnerReserve
uint32[] intAcdnInnerReserve
bool[] boolAcdnInnerReserve
DrilInnerInfo drilInnerInfo
HooaInnerInfo hooaInnerInfo
float32 aFcwALatCritByDrvr
float32 crvtFcwALatCritByDrvrThd
float32 tTtcFcwTriger
float32 facDriverIntvFcw
bool isHeadOnObjTrjOverlap

================================================================================
MSG: rospy_message_converter/DrilInnerInfo
DriverAction driverAction
float32 dirverIntvFactor
float32 dirverStrFactor
bool isDirverFocuseOnMaxDelay
bool isDriverAcc2Overtake
bool isDriverAvoidanceObj
bool isDriverChgPedlAct
bool isDriverDecelAvoid
bool isDriverTurnning
DriAvdObjInfo driAvdObjInfo

================================================================================
MSG: rospy_message_converter/DriverAction
bool isObjChange
bool isDriverStrAction
bool isDriAccPedalAction

================================================================================
MSG: rospy_message_converter/DriAvdObjInfo
bool objCrvtAbsReqLeBigger
float32 objCrvtAbsReqLe
float32 objCrvtAbsReqRi

================================================================================
MSG: rospy_message_converter/HooaInnerInfo
float32[] floatHooaInnerReserve
uint32[] intHooaInnerReserve
bool[] boolHooaInnerReserve

================================================================================
MSG: rospy_message_converter/StmeInnerInfo
uint32 aebPassiveCodeWord
uint32 aebTermintCodeWord
uint32 activeCounter
uint32 passiveCounter
bool aebSwitchFlag
bool faultFlag
float32[] floatStmeInnerReserve

================================================================================
MSG: rospy_message_converter/ReservedSpace
bool[] boolReserve
uint32[] uintReserve
float32[] floatReserve

================================================================================
MSG: rospy_message_converter/FySideFeatureDebug
FySideFeatureOut request
FyBsdTrackedObj[] bsd_tracked_obj
FyLcaTrackedObj[] lca_tracked_obj
FySdowTrackedObj[] sdow_tracked_obj
FySideFeatureTrigObj bsdlca_trig_obj_left
FySideFeatureTrigObj bsdlca_trig_obj_right
FySideFeatureTrigObj sdow_trig_obj_left
FySideFeatureTrigObj sdow_trig_obj_right
int32 num_of_ooi_bsd
int32 num_of_ooi_lca
int32 num_of_ooi_sdow
FyBsdlcaInhibits bsdlca_inhibits
FySdowInhibits sdow_inhibits
FyBsdlcaActionDecision bsdlca_action_decision
FySdowActionDecision sdow_action_decision
SdReservedSpace reserved_space

================================================================================
MSG: rospy_message_converter/FySideFeatureOut
uint32 bsdlca_onoff_sts
uint32 bsdlca_left_sts
uint32 bsdlca_right_sts
uint32 bsdlca_left_warn_req
uint32 bsdlca_right_warn_req
uint32 bsdlca_haptic_onoff_sts
uint32 ext_req
uint32 sdow_onoff_sts
uint32 sdow_left_sts
uint32 sdow_right_sts
uint32 sdow_left_warn_req
uint32 sdow_right_warn_req
uint32 rcta_onoff_sts
uint32 rcta_left_sts
uint32 rcta_right_sts
uint32 rcta_left_warn_req
uint32 rcta_right_warn_req
uint32 mirr_light_left_req
uint32 mirr_light_right_req
uint32 rear_rad_fault_disp

================================================================================
MSG: rospy_message_converter/FyBsdTrackedObj
uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right
bool is_in_region_left
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FyLcaTrackedObj
uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right
bool is_in_region_left
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
float32 ttc
bool meet_ttc_thresh
bool is_following_lane
float32 dist_to_collide_position
bool is_dist_to_collide_position_big
bool suppress_warn_by_brake_dist
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySdowTrackedObj
uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right_far
bool is_in_region_left_far
bool is_in_region_right_near
bool is_in_region_left_near
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
float32 ttc
bool meet_ttc_thresh
bool is_following_lane
float32 dist_to_collide_position
bool is_dist_to_collide_position_big
bool suppress_warn_by_brake_dist
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySideFeatureTrigObj
uint32 id
float32 longDist
float32 latDist
float32 heading
float32 length
float32 width
float32 ttc
float32 ta
float32 longVel
float32 latVel
uint32 type
uint32 motionStatus
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FyBsdlcaInhibits
uint32[] fail_inhibits
uint32[] inactive_inhibits
bool is_bsdlca_off
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySdowInhibits
uint32[] fail_inhibits
uint32[] inactive_inhibits
bool is_sdow_off
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FyBsdlcaActionDecision
uint32 bsdlca_decision
uint32 trig_obj_id_left
uint32 trig_obj_id_right
uint32[] reserved

================================================================================
MSG: rospy_message_converter/FySdowActionDecision
uint32 sdow_decision
uint32 trig_obj_id_left
uint32 trig_obj_id_right
uint32[] reserved

================================================================================
MSG: rospy_message_converter/SdReservedSpace
bool[] sd_boolReserve
uint32[] sd_intReserve
float32[] sd_floatReserve

================================================================================
MSG: rospy_message_converter/RqabInnerInfo
bool holdReq
bool holdEnt
bool holdExt
bool isDriverGearChg
bool isDriverAccPedl
bool[] boolRqabInnerReserve

================================================================================
MSG: rospy_message_converter/TimeCostInfo
float32 fctsApp
float32 carInfoMap
float32 objInfoMap
float32 aebMain
float32 ctrlInfoMap
float32 aebPublish
float32 ebhp
float32 ooif
float32 obhc
float32 otha
float32 cren
float32 acdn
float32 tscd
float32 stme
float32 rqab
"""
  __slots__ = ['pedcross','pedoncom','bikcross','bikoncom','CCRScandi','CCRMcandi','FTAPcandi','PedRear','BikRear','HostState','Pedestrians','CloseTarget','DriverMonitor','GenObjFilter','CCFOcandi','CCCcandi','FusionCCRFlag','FusionVRUFlag','FusionVRURearFlag','AebActuFlg','AebReserved','AEBSm','FCWSm','AebRearSm','FcwRearSm','FuncSuppress','AebDiag','AebMode','AESCCRcandi','CloseAESTarget','AESPathCheck','AESPlanPath','fAebOut','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/VRUCandiOut','rospy_message_converter/VRUCandiOut','rospy_message_converter/VRUCandiOut','rospy_message_converter/VRUCandiOut','rospy_message_converter/CCRCandiOut','rospy_message_converter/CCRCandiOut','rospy_message_converter/FTAPCandiOut','rospy_message_converter/VRUCandiOut','rospy_message_converter/VRUCandiOut','rospy_message_converter/EgoState','rospy_message_converter/VRUCandiOut[]','rospy_message_converter/CCRCandiOut','rospy_message_converter/DriverMonitorOut','rospy_message_converter/GOFOut[]','rospy_message_converter/CCRCandiOut','rospy_message_converter/CCCCandiOut','rospy_message_converter/FusionAEBFlagOut','rospy_message_converter/FusionAEBFlagOut','rospy_message_converter/FusionAEBFlagOut','rospy_message_converter/AebActuFlgOut','rospy_message_converter/ReservedOut','rospy_message_converter/AEBSMOut','rospy_message_converter/AEBSMOut','rospy_message_converter/AEBRearSMOut','rospy_message_converter/AEBRearSMOut','rospy_message_converter/FuncSuppressOut','rospy_message_converter/AebDiagOut','rospy_message_converter/AebModeOut','rospy_message_converter/AESCCRCandiOut','rospy_message_converter/AESCCRCandiOut','rospy_message_converter/AESPathVerify','rospy_message_converter/AESPlanOut','rospy_message_converter/dgbAebOut','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pedcross,pedoncom,bikcross,bikoncom,CCRScandi,CCRMcandi,FTAPcandi,PedRear,BikRear,HostState,Pedestrians,CloseTarget,DriverMonitor,GenObjFilter,CCFOcandi,CCCcandi,FusionCCRFlag,FusionVRUFlag,FusionVRURearFlag,AebActuFlg,AebReserved,AEBSm,FCWSm,AebRearSm,FcwRearSm,FuncSuppress,AebDiag,AebMode,AESCCRcandi,CloseAESTarget,AESPathCheck,AESPlanPath,fAebOut,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AEBDebugOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pedcross is None:
        self.pedcross = rospy_message_converter.msg.VRUCandiOut()
      if self.pedoncom is None:
        self.pedoncom = rospy_message_converter.msg.VRUCandiOut()
      if self.bikcross is None:
        self.bikcross = rospy_message_converter.msg.VRUCandiOut()
      if self.bikoncom is None:
        self.bikoncom = rospy_message_converter.msg.VRUCandiOut()
      if self.CCRScandi is None:
        self.CCRScandi = rospy_message_converter.msg.CCRCandiOut()
      if self.CCRMcandi is None:
        self.CCRMcandi = rospy_message_converter.msg.CCRCandiOut()
      if self.FTAPcandi is None:
        self.FTAPcandi = rospy_message_converter.msg.FTAPCandiOut()
      if self.PedRear is None:
        self.PedRear = rospy_message_converter.msg.VRUCandiOut()
      if self.BikRear is None:
        self.BikRear = rospy_message_converter.msg.VRUCandiOut()
      if self.HostState is None:
        self.HostState = rospy_message_converter.msg.EgoState()
      if self.Pedestrians is None:
        self.Pedestrians = []
      if self.CloseTarget is None:
        self.CloseTarget = rospy_message_converter.msg.CCRCandiOut()
      if self.DriverMonitor is None:
        self.DriverMonitor = rospy_message_converter.msg.DriverMonitorOut()
      if self.GenObjFilter is None:
        self.GenObjFilter = []
      if self.CCFOcandi is None:
        self.CCFOcandi = rospy_message_converter.msg.CCRCandiOut()
      if self.CCCcandi is None:
        self.CCCcandi = rospy_message_converter.msg.CCCCandiOut()
      if self.FusionCCRFlag is None:
        self.FusionCCRFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.FusionVRUFlag is None:
        self.FusionVRUFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.FusionVRURearFlag is None:
        self.FusionVRURearFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.AebActuFlg is None:
        self.AebActuFlg = rospy_message_converter.msg.AebActuFlgOut()
      if self.AebReserved is None:
        self.AebReserved = rospy_message_converter.msg.ReservedOut()
      if self.AEBSm is None:
        self.AEBSm = rospy_message_converter.msg.AEBSMOut()
      if self.FCWSm is None:
        self.FCWSm = rospy_message_converter.msg.AEBSMOut()
      if self.AebRearSm is None:
        self.AebRearSm = rospy_message_converter.msg.AEBRearSMOut()
      if self.FcwRearSm is None:
        self.FcwRearSm = rospy_message_converter.msg.AEBRearSMOut()
      if self.FuncSuppress is None:
        self.FuncSuppress = rospy_message_converter.msg.FuncSuppressOut()
      if self.AebDiag is None:
        self.AebDiag = rospy_message_converter.msg.AebDiagOut()
      if self.AebMode is None:
        self.AebMode = rospy_message_converter.msg.AebModeOut()
      if self.AESCCRcandi is None:
        self.AESCCRcandi = rospy_message_converter.msg.AESCCRCandiOut()
      if self.CloseAESTarget is None:
        self.CloseAESTarget = rospy_message_converter.msg.AESCCRCandiOut()
      if self.AESPathCheck is None:
        self.AESPathCheck = rospy_message_converter.msg.AESPathVerify()
      if self.AESPlanPath is None:
        self.AESPlanPath = rospy_message_converter.msg.AESPlanOut()
      if self.fAebOut is None:
        self.fAebOut = rospy_message_converter.msg.dgbAebOut()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.pedcross = rospy_message_converter.msg.VRUCandiOut()
      self.pedoncom = rospy_message_converter.msg.VRUCandiOut()
      self.bikcross = rospy_message_converter.msg.VRUCandiOut()
      self.bikoncom = rospy_message_converter.msg.VRUCandiOut()
      self.CCRScandi = rospy_message_converter.msg.CCRCandiOut()
      self.CCRMcandi = rospy_message_converter.msg.CCRCandiOut()
      self.FTAPcandi = rospy_message_converter.msg.FTAPCandiOut()
      self.PedRear = rospy_message_converter.msg.VRUCandiOut()
      self.BikRear = rospy_message_converter.msg.VRUCandiOut()
      self.HostState = rospy_message_converter.msg.EgoState()
      self.Pedestrians = []
      self.CloseTarget = rospy_message_converter.msg.CCRCandiOut()
      self.DriverMonitor = rospy_message_converter.msg.DriverMonitorOut()
      self.GenObjFilter = []
      self.CCFOcandi = rospy_message_converter.msg.CCRCandiOut()
      self.CCCcandi = rospy_message_converter.msg.CCCCandiOut()
      self.FusionCCRFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      self.FusionVRUFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      self.FusionVRURearFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      self.AebActuFlg = rospy_message_converter.msg.AebActuFlgOut()
      self.AebReserved = rospy_message_converter.msg.ReservedOut()
      self.AEBSm = rospy_message_converter.msg.AEBSMOut()
      self.FCWSm = rospy_message_converter.msg.AEBSMOut()
      self.AebRearSm = rospy_message_converter.msg.AEBRearSMOut()
      self.FcwRearSm = rospy_message_converter.msg.AEBRearSMOut()
      self.FuncSuppress = rospy_message_converter.msg.FuncSuppressOut()
      self.AebDiag = rospy_message_converter.msg.AebDiagOut()
      self.AebMode = rospy_message_converter.msg.AebModeOut()
      self.AESCCRcandi = rospy_message_converter.msg.AESCCRCandiOut()
      self.CloseAESTarget = rospy_message_converter.msg.AESCCRCandiOut()
      self.AESPathCheck = rospy_message_converter.msg.AESPathVerify()
      self.AESPlanPath = rospy_message_converter.msg.AESPlanOut()
      self.fAebOut = rospy_message_converter.msg.dgbAebOut()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B().pack(_x.pedcross.ID, _x.pedcross.VID, _x.pedcross.longpos, _x.pedcross.latpos, _x.pedcross.longspd, _x.pedcross.latspd, _x.pedcross.longacc, _x.pedcross.latacc, _x.pedcross.range, _x.pedcross.rangerear, _x.pedcross.rangerate, _x.pedcross.TTC, _x.pedcross.TTCrear, _x.pedcross.XOLC, _x.pedcross.latest, _x.pedcross.oncoming, _x.pedcross.preceding, _x.pedcross.crossing, _x.pedcross.stationary, _x.pedcross.AEBconf, _x.pedcross.inpath, _x.pedcross.vfcheck, _x.pedcross.lfcheck, _x.pedcross.age, _x.pedcross.agecheck, _x.pedcross.inpathage, _x.pedcross.inpathcheck, _x.pedcross.TOI, _x.pedcross.TOIrear, _x.pedcross.warn, _x.pedcross.prefill, _x.pedcross.lowbrake, _x.pedcross.highbrake, _x.pedcross.isvision, _x.pedcross.isfusion, _x.pedcross.isradar, _x.pedcross.timetoturn, _x.pedcross.timetobrake, _x.pedcross.steerflag, _x.pedcross.ref_pos.ref_character, _x.pedcross.ref_pos.pos_x, _x.pedcross.ref_pos.pos_y, _x.pedcross.ref_pos.range, _x.pedcross.ref_pos.heading, _x.pedcross.xpos_cir, _x.pedcross.ypos_cir, _x.pedcross.roc_tar, _x.pedcross.mindist, _x.pedcross.xpos_col, _x.pedcross.ypos_col, _x.pedcross.range_col, _x.pedcross.range_col_tar, _x.pedcross.yawrate, _x.pedcross.heading, _x.pedcross.colposs, _x.pedcross.col_num, _x.pedcross.TTC_cir, _x.pedcross.TTL_cir, _x.pedcross.TTC_tar, _x.pedcross.TTL_tar, _x.pedoncom.ID, _x.pedoncom.VID, _x.pedoncom.longpos, _x.pedoncom.latpos, _x.pedoncom.longspd, _x.pedoncom.latspd, _x.pedoncom.longacc, _x.pedoncom.latacc, _x.pedoncom.range, _x.pedoncom.rangerear, _x.pedoncom.rangerate, _x.pedoncom.TTC, _x.pedoncom.TTCrear, _x.pedoncom.XOLC, _x.pedoncom.latest, _x.pedoncom.oncoming, _x.pedoncom.preceding, _x.pedoncom.crossing, _x.pedoncom.stationary, _x.pedoncom.AEBconf, _x.pedoncom.inpath, _x.pedoncom.vfcheck, _x.pedoncom.lfcheck, _x.pedoncom.age, _x.pedoncom.agecheck, _x.pedoncom.inpathage, _x.pedoncom.inpathcheck, _x.pedoncom.TOI, _x.pedoncom.TOIrear, _x.pedoncom.warn, _x.pedoncom.prefill, _x.pedoncom.lowbrake, _x.pedoncom.highbrake, _x.pedoncom.isvision, _x.pedoncom.isfusion, _x.pedoncom.isradar, _x.pedoncom.timetoturn, _x.pedoncom.timetobrake, _x.pedoncom.steerflag, _x.pedoncom.ref_pos.ref_character, _x.pedoncom.ref_pos.pos_x, _x.pedoncom.ref_pos.pos_y, _x.pedoncom.ref_pos.range, _x.pedoncom.ref_pos.heading, _x.pedoncom.xpos_cir, _x.pedoncom.ypos_cir, _x.pedoncom.roc_tar, _x.pedoncom.mindist, _x.pedoncom.xpos_col, _x.pedoncom.ypos_col, _x.pedoncom.range_col, _x.pedoncom.range_col_tar, _x.pedoncom.yawrate, _x.pedoncom.heading, _x.pedoncom.colposs, _x.pedoncom.col_num, _x.pedoncom.TTC_cir, _x.pedoncom.TTL_cir, _x.pedoncom.TTC_tar, _x.pedoncom.TTL_tar, _x.bikcross.ID, _x.bikcross.VID, _x.bikcross.longpos, _x.bikcross.latpos, _x.bikcross.longspd, _x.bikcross.latspd, _x.bikcross.longacc, _x.bikcross.latacc, _x.bikcross.range, _x.bikcross.rangerear, _x.bikcross.rangerate, _x.bikcross.TTC, _x.bikcross.TTCrear, _x.bikcross.XOLC, _x.bikcross.latest, _x.bikcross.oncoming, _x.bikcross.preceding, _x.bikcross.crossing, _x.bikcross.stationary, _x.bikcross.AEBconf, _x.bikcross.inpath, _x.bikcross.vfcheck, _x.bikcross.lfcheck, _x.bikcross.age, _x.bikcross.agecheck, _x.bikcross.inpathage, _x.bikcross.inpathcheck, _x.bikcross.TOI, _x.bikcross.TOIrear, _x.bikcross.warn, _x.bikcross.prefill, _x.bikcross.lowbrake, _x.bikcross.highbrake, _x.bikcross.isvision, _x.bikcross.isfusion, _x.bikcross.isradar, _x.bikcross.timetoturn, _x.bikcross.timetobrake, _x.bikcross.steerflag, _x.bikcross.ref_pos.ref_character, _x.bikcross.ref_pos.pos_x, _x.bikcross.ref_pos.pos_y, _x.bikcross.ref_pos.range, _x.bikcross.ref_pos.heading, _x.bikcross.xpos_cir, _x.bikcross.ypos_cir, _x.bikcross.roc_tar, _x.bikcross.mindist, _x.bikcross.xpos_col, _x.bikcross.ypos_col, _x.bikcross.range_col, _x.bikcross.range_col_tar, _x.bikcross.yawrate, _x.bikcross.heading, _x.bikcross.colposs, _x.bikcross.col_num, _x.bikcross.TTC_cir, _x.bikcross.TTL_cir, _x.bikcross.TTC_tar, _x.bikcross.TTL_tar, _x.bikoncom.ID, _x.bikoncom.VID, _x.bikoncom.longpos, _x.bikoncom.latpos, _x.bikoncom.longspd, _x.bikoncom.latspd, _x.bikoncom.longacc, _x.bikoncom.latacc, _x.bikoncom.range, _x.bikoncom.rangerear, _x.bikoncom.rangerate, _x.bikoncom.TTC, _x.bikoncom.TTCrear, _x.bikoncom.XOLC, _x.bikoncom.latest, _x.bikoncom.oncoming, _x.bikoncom.preceding, _x.bikoncom.crossing, _x.bikoncom.stationary, _x.bikoncom.AEBconf, _x.bikoncom.inpath, _x.bikoncom.vfcheck, _x.bikoncom.lfcheck, _x.bikoncom.age, _x.bikoncom.agecheck, _x.bikoncom.inpathage, _x.bikoncom.inpathcheck, _x.bikoncom.TOI, _x.bikoncom.TOIrear, _x.bikoncom.warn, _x.bikoncom.prefill, _x.bikoncom.lowbrake, _x.bikoncom.highbrake, _x.bikoncom.isvision, _x.bikoncom.isfusion, _x.bikoncom.isradar, _x.bikoncom.timetoturn, _x.bikoncom.timetobrake, _x.bikoncom.steerflag, _x.bikoncom.ref_pos.ref_character, _x.bikoncom.ref_pos.pos_x, _x.bikoncom.ref_pos.pos_y, _x.bikoncom.ref_pos.range, _x.bikoncom.ref_pos.heading, _x.bikoncom.xpos_cir, _x.bikoncom.ypos_cir, _x.bikoncom.roc_tar, _x.bikoncom.mindist, _x.bikoncom.xpos_col, _x.bikoncom.ypos_col, _x.bikoncom.range_col, _x.bikoncom.range_col_tar, _x.bikoncom.yawrate, _x.bikoncom.heading, _x.bikoncom.colposs, _x.bikoncom.col_num, _x.bikoncom.TTC_cir, _x.bikoncom.TTL_cir, _x.bikoncom.TTC_tar, _x.bikoncom.TTL_tar, _x.CCRScandi.ID, _x.CCRScandi.VID, _x.CCRScandi.longpos, _x.CCRScandi.latpos, _x.CCRScandi.longspd, _x.CCRScandi.latspd, _x.CCRScandi.longacc, _x.CCRScandi.latacc, _x.CCRScandi.range, _x.CCRScandi.rangerate, _x.CCRScandi.TTC, _x.CCRScandi.XOLC, _x.CCRScandi.movestate, _x.CCRScandi.moveout, _x.CCRScandi.inpath_before))
      _x = self
      buff.write(_get_struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f().pack(_x.CCRScandi.inpath_after, _x.CCRScandi.AEBconf, _x.CCRScandi.inpath, _x.CCRScandi.vfcheck, _x.CCRScandi.lfcheck, _x.CCRScandi.age, _x.CCRScandi.agecheck, _x.CCRScandi.inpathage, _x.CCRScandi.inpathcheck, _x.CCRScandi.TOI, _x.CCRScandi.warn, _x.CCRScandi.prefill, _x.CCRScandi.lowbrake, _x.CCRScandi.highbrake, _x.CCRScandi.isvision, _x.CCRScandi.isfusion, _x.CCRScandi.isradar, _x.CCRScandi.timetoturn, _x.CCRScandi.timetobrake, _x.CCRScandi.steerflag, _x.CCRScandi.ref_pos.ref_character, _x.CCRScandi.ref_pos.pos_x, _x.CCRScandi.ref_pos.pos_y, _x.CCRScandi.ref_pos.range, _x.CCRScandi.ref_pos.heading, _x.CCRScandi.iba_flag, _x.CCRScandi.hitdist, _x.CCRScandi.yawdist, _x.CCRScandi.driverovertake, _x.CCRScandi.driverovertake_warn, _x.CCRScandi.movingleftcount, _x.CCRScandi.movingrightcount, _x.CCRMcandi.ID, _x.CCRMcandi.VID, _x.CCRMcandi.longpos, _x.CCRMcandi.latpos, _x.CCRMcandi.longspd, _x.CCRMcandi.latspd, _x.CCRMcandi.longacc, _x.CCRMcandi.latacc, _x.CCRMcandi.range, _x.CCRMcandi.rangerate, _x.CCRMcandi.TTC, _x.CCRMcandi.XOLC, _x.CCRMcandi.movestate, _x.CCRMcandi.moveout, _x.CCRMcandi.inpath_before, _x.CCRMcandi.inpath_after, _x.CCRMcandi.AEBconf, _x.CCRMcandi.inpath, _x.CCRMcandi.vfcheck, _x.CCRMcandi.lfcheck, _x.CCRMcandi.age, _x.CCRMcandi.agecheck, _x.CCRMcandi.inpathage, _x.CCRMcandi.inpathcheck, _x.CCRMcandi.TOI, _x.CCRMcandi.warn, _x.CCRMcandi.prefill, _x.CCRMcandi.lowbrake, _x.CCRMcandi.highbrake, _x.CCRMcandi.isvision, _x.CCRMcandi.isfusion, _x.CCRMcandi.isradar, _x.CCRMcandi.timetoturn, _x.CCRMcandi.timetobrake, _x.CCRMcandi.steerflag, _x.CCRMcandi.ref_pos.ref_character, _x.CCRMcandi.ref_pos.pos_x, _x.CCRMcandi.ref_pos.pos_y, _x.CCRMcandi.ref_pos.range, _x.CCRMcandi.ref_pos.heading, _x.CCRMcandi.iba_flag, _x.CCRMcandi.hitdist, _x.CCRMcandi.yawdist, _x.CCRMcandi.driverovertake, _x.CCRMcandi.driverovertake_warn, _x.CCRMcandi.movingleftcount, _x.CCRMcandi.movingrightcount, _x.FTAPcandi.ID, _x.FTAPcandi.VID, _x.FTAPcandi.longpos, _x.FTAPcandi.latpos, _x.FTAPcandi.longspd, _x.FTAPcandi.latspd, _x.FTAPcandi.longacc, _x.FTAPcandi.latacc, _x.FTAPcandi.range, _x.FTAPcandi.rangerate, _x.FTAPcandi.TTC, _x.FTAPcandi.TTL, _x.FTAPcandi.colnum, _x.FTAPcandi.colx, _x.FTAPcandi.coly, _x.FTAPcandi.colr, _x.FTAPcandi.heading, _x.FTAPcandi.currange, _x.FTAPcandi.estrange, _x.FTAPcandi.TTC_tar, _x.FTAPcandi.TTL_tar, _x.FTAPcandi.TOI_before, _x.FTAPcandi.TOI_after, _x.FTAPcandi.inpathcur, _x.FTAPcandi.inpathpre, _x.FTAPcandi.inpathcur_warn, _x.FTAPcandi.inpathpre_warn, _x.FTAPcandi.inpath, _x.FTAPcandi.inpath_tar, _x.FTAPcandi.inpath_warn, _x.FTAPcandi.inpathage, _x.FTAPcandi.inpathage_warn, _x.FTAPcandi.inpathagecheck, _x.FTAPcandi.inpathagecheck_warn, _x.FTAPcandi.AEBconf, _x.FTAPcandi.oncoming, _x.FTAPcandi.movingstate, _x.FTAPcandi.turnangle, _x.FTAPcandi.warn, _x.FTAPcandi.prefill, _x.FTAPcandi.lowbrake, _x.FTAPcandi.highbrake, _x.FTAPcandi.isvision, _x.FTAPcandi.isfusion, _x.FTAPcandi.isradar, _x.FTAPcandi.timetoturn, _x.FTAPcandi.timetobrake, _x.FTAPcandi.steerflag, _x.FTAPcandi.ref_pos.ref_character, _x.FTAPcandi.ref_pos.pos_x, _x.FTAPcandi.ref_pos.pos_y, _x.FTAPcandi.ref_pos.range, _x.FTAPcandi.ref_pos.heading, _x.FTAPcandi.iba_flag, _x.PedRear.ID, _x.PedRear.VID, _x.PedRear.longpos, _x.PedRear.latpos, _x.PedRear.longspd, _x.PedRear.latspd, _x.PedRear.longacc, _x.PedRear.latacc, _x.PedRear.range, _x.PedRear.rangerear, _x.PedRear.rangerate, _x.PedRear.TTC, _x.PedRear.TTCrear, _x.PedRear.XOLC, _x.PedRear.latest, _x.PedRear.oncoming, _x.PedRear.preceding, _x.PedRear.crossing, _x.PedRear.stationary, _x.PedRear.AEBconf, _x.PedRear.inpath, _x.PedRear.vfcheck, _x.PedRear.lfcheck, _x.PedRear.age, _x.PedRear.agecheck, _x.PedRear.inpathage, _x.PedRear.inpathcheck, _x.PedRear.TOI, _x.PedRear.TOIrear, _x.PedRear.warn, _x.PedRear.prefill, _x.PedRear.lowbrake, _x.PedRear.highbrake, _x.PedRear.isvision, _x.PedRear.isfusion, _x.PedRear.isradar, _x.PedRear.timetoturn, _x.PedRear.timetobrake, _x.PedRear.steerflag, _x.PedRear.ref_pos.ref_character, _x.PedRear.ref_pos.pos_x, _x.PedRear.ref_pos.pos_y, _x.PedRear.ref_pos.range, _x.PedRear.ref_pos.heading, _x.PedRear.xpos_cir, _x.PedRear.ypos_cir, _x.PedRear.roc_tar, _x.PedRear.mindist, _x.PedRear.xpos_col, _x.PedRear.ypos_col, _x.PedRear.range_col, _x.PedRear.range_col_tar, _x.PedRear.yawrate, _x.PedRear.heading, _x.PedRear.colposs, _x.PedRear.col_num, _x.PedRear.TTC_cir, _x.PedRear.TTL_cir, _x.PedRear.TTC_tar, _x.PedRear.TTL_tar, _x.BikRear.ID, _x.BikRear.VID, _x.BikRear.longpos, _x.BikRear.latpos, _x.BikRear.longspd, _x.BikRear.latspd, _x.BikRear.longacc, _x.BikRear.latacc, _x.BikRear.range, _x.BikRear.rangerear, _x.BikRear.rangerate, _x.BikRear.TTC, _x.BikRear.TTCrear, _x.BikRear.XOLC, _x.BikRear.latest, _x.BikRear.oncoming, _x.BikRear.preceding, _x.BikRear.crossing, _x.BikRear.stationary, _x.BikRear.AEBconf, _x.BikRear.inpath, _x.BikRear.vfcheck, _x.BikRear.lfcheck, _x.BikRear.age, _x.BikRear.agecheck, _x.BikRear.inpathage, _x.BikRear.inpathcheck, _x.BikRear.TOI, _x.BikRear.TOIrear, _x.BikRear.warn, _x.BikRear.prefill, _x.BikRear.lowbrake, _x.BikRear.highbrake, _x.BikRear.isvision, _x.BikRear.isfusion, _x.BikRear.isradar, _x.BikRear.timetoturn, _x.BikRear.timetobrake, _x.BikRear.steerflag, _x.BikRear.ref_pos.ref_character, _x.BikRear.ref_pos.pos_x, _x.BikRear.ref_pos.pos_y, _x.BikRear.ref_pos.range, _x.BikRear.ref_pos.heading, _x.BikRear.xpos_cir, _x.BikRear.ypos_cir, _x.BikRear.roc_tar, _x.BikRear.mindist, _x.BikRear.xpos_col, _x.BikRear.ypos_col, _x.BikRear.range_col, _x.BikRear.range_col_tar, _x.BikRear.yawrate, _x.BikRear.heading, _x.BikRear.colposs, _x.BikRear.col_num, _x.BikRear.TTC_cir, _x.BikRear.TTL_cir, _x.BikRear.TTC_tar, _x.BikRear.TTL_tar, _x.HostState.vehspd, _x.HostState.yawrate))
      _x = self
      buff.write(_get_struct_fB2fI2f2B4f().pack(_x.HostState.steerangle, _x.HostState.hostreverse, _x.HostState.brakepos, _x.HostState.brakeposrate, _x.HostState.driverpressed, _x.HostState.maincypress, _x.HostState.maincyprsrate, _x.HostState.driverintention, _x.HostState.driverEBA, _x.HostState.ROC, _x.HostState.steerrate, _x.HostState.accpos, _x.HostState.accposrate))
      length = len(self.Pedestrians)
      buff.write(_struct_I.pack(length))
      for val1 in self.Pedestrians:
        _x = val1
        buff.write(_get_struct_2I13f4BI3BIBI10B2fB().pack(_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag))
        _v1 = val1.ref_pos
        _x = _v1
        buff.write(_get_struct_I4d().pack(_x.ref_character, _x.pos_x, _x.pos_y, _x.range, _x.heading))
        _x = val1
        buff.write(_get_struct_10fBI4f().pack(_x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar))
      _x = self
      buff.write(_get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I().pack(_x.CloseTarget.ID, _x.CloseTarget.VID, _x.CloseTarget.longpos, _x.CloseTarget.latpos, _x.CloseTarget.longspd, _x.CloseTarget.latspd, _x.CloseTarget.longacc, _x.CloseTarget.latacc, _x.CloseTarget.range, _x.CloseTarget.rangerate, _x.CloseTarget.TTC, _x.CloseTarget.XOLC, _x.CloseTarget.movestate, _x.CloseTarget.moveout, _x.CloseTarget.inpath_before, _x.CloseTarget.inpath_after, _x.CloseTarget.AEBconf, _x.CloseTarget.inpath, _x.CloseTarget.vfcheck, _x.CloseTarget.lfcheck, _x.CloseTarget.age, _x.CloseTarget.agecheck, _x.CloseTarget.inpathage, _x.CloseTarget.inpathcheck, _x.CloseTarget.TOI, _x.CloseTarget.warn, _x.CloseTarget.prefill, _x.CloseTarget.lowbrake, _x.CloseTarget.highbrake, _x.CloseTarget.isvision, _x.CloseTarget.isfusion, _x.CloseTarget.isradar, _x.CloseTarget.timetoturn, _x.CloseTarget.timetobrake, _x.CloseTarget.steerflag, _x.CloseTarget.ref_pos.ref_character, _x.CloseTarget.ref_pos.pos_x, _x.CloseTarget.ref_pos.pos_y, _x.CloseTarget.ref_pos.range, _x.CloseTarget.ref_pos.heading, _x.CloseTarget.iba_flag, _x.CloseTarget.hitdist, _x.CloseTarget.yawdist, _x.CloseTarget.driverovertake, _x.CloseTarget.driverovertake_warn, _x.CloseTarget.movingleftcount, _x.CloseTarget.movingrightcount, _x.DriverMonitor.gaspedpos, _x.DriverMonitor.gaspedgrad, _x.DriverMonitor.driverbrake, _x.DriverMonitor.brkpedpos, _x.DriverMonitor.steerwhlang, _x.DriverMonitor.steerwhlgrad, _x.DriverMonitor.egospd, _x.DriverMonitor.egoaccel, _x.DriverMonitor.egoyawrate, _x.DriverMonitor.turnlighton, _x.DriverMonitor.egogear, _x.DriverMonitor.feedbackstate, _x.DriverMonitor.activitystate, _x.DriverMonitor.focusstate, _x.DriverMonitor.suppressbit, _x.DriverMonitor.abortbit))
      length = len(self.DriverMonitor.dampfactor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.DriverMonitor.dampfactor))
      _x = self
      buff.write(_get_struct_3fB().pack(_x.DriverMonitor.vel_std_dev, _x.DriverMonitor.sdytimer, _x.DriverMonitor.ramptimer, _x.DriverMonitor.dampsuppress))
      length = len(self.GenObjFilter)
      buff.write(_struct_I.pack(length))
      for val1 in self.GenObjFilter:
        _x = val1
        buff.write(_get_struct_I6B().pack(_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck))
      _x = self
      buff.write(_get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B().pack(_x.CCFOcandi.ID, _x.CCFOcandi.VID, _x.CCFOcandi.longpos, _x.CCFOcandi.latpos, _x.CCFOcandi.longspd, _x.CCFOcandi.latspd, _x.CCFOcandi.longacc, _x.CCFOcandi.latacc, _x.CCFOcandi.range, _x.CCFOcandi.rangerate, _x.CCFOcandi.TTC, _x.CCFOcandi.XOLC, _x.CCFOcandi.movestate, _x.CCFOcandi.moveout, _x.CCFOcandi.inpath_before, _x.CCFOcandi.inpath_after, _x.CCFOcandi.AEBconf, _x.CCFOcandi.inpath, _x.CCFOcandi.vfcheck, _x.CCFOcandi.lfcheck, _x.CCFOcandi.age, _x.CCFOcandi.agecheck, _x.CCFOcandi.inpathage, _x.CCFOcandi.inpathcheck, _x.CCFOcandi.TOI, _x.CCFOcandi.warn, _x.CCFOcandi.prefill, _x.CCFOcandi.lowbrake, _x.CCFOcandi.highbrake, _x.CCFOcandi.isvision, _x.CCFOcandi.isfusion, _x.CCFOcandi.isradar, _x.CCFOcandi.timetoturn, _x.CCFOcandi.timetobrake, _x.CCFOcandi.steerflag, _x.CCFOcandi.ref_pos.ref_character, _x.CCFOcandi.ref_pos.pos_x, _x.CCFOcandi.ref_pos.pos_y, _x.CCFOcandi.ref_pos.range, _x.CCFOcandi.ref_pos.heading, _x.CCFOcandi.iba_flag, _x.CCFOcandi.hitdist, _x.CCFOcandi.yawdist, _x.CCFOcandi.driverovertake, _x.CCFOcandi.driverovertake_warn, _x.CCFOcandi.movingleftcount, _x.CCFOcandi.movingrightcount, _x.CCCcandi.ID, _x.CCCcandi.VID, _x.CCCcandi.longpos, _x.CCCcandi.latpos, _x.CCCcandi.longspd, _x.CCCcandi.latspd, _x.CCCcandi.longacc, _x.CCCcandi.latacc, _x.CCCcandi.range, _x.CCCcandi.rangerate, _x.CCCcandi.TTC, _x.CCCcandi.TTL, _x.CCCcandi.colnum, _x.CCCcandi.colx, _x.CCCcandi.coly, _x.CCCcandi.colr, _x.CCCcandi.heading, _x.CCCcandi.currange, _x.CCCcandi.estrange, _x.CCCcandi.TTC_tar, _x.CCCcandi.TTL_tar, _x.CCCcandi.TOI_before, _x.CCCcandi.TOI_after, _x.CCCcandi.inpathcur, _x.CCCcandi.inpathpre, _x.CCCcandi.inpath, _x.CCCcandi.AEBconf, _x.CCCcandi.warn, _x.CCCcandi.prefill, _x.CCCcandi.lowbrake, _x.CCCcandi.highbrake, _x.CCCcandi.isvision, _x.CCCcandi.isfusion, _x.CCCcandi.isradar, _x.CCCcandi.timetoturn, _x.CCCcandi.timetobrake, _x.CCCcandi.steerflag, _x.CCCcandi.ref_pos.ref_character, _x.CCCcandi.ref_pos.pos_x, _x.CCCcandi.ref_pos.pos_y, _x.CCCcandi.ref_pos.range, _x.CCCcandi.ref_pos.heading, _x.CCCcandi.iba_flag, _x.FusionCCRFlag.warning_flag, _x.FusionCCRFlag.prefill_flage, _x.FusionCCRFlag.lowbrake_flag, _x.FusionCCRFlag.highbrake_flag, _x.FusionCCRFlag.unconfirmed_flag, _x.FusionCCRFlag.hold_flag, _x.FusionCCRFlag.lowbrake_age, _x.FusionCCRFlag.highbrake_hold_age, _x.FusionCCRFlag.warnbrake_flag, _x.FusionCCRFlag.readyforIBA, _x.FusionVRUFlag.warning_flag, _x.FusionVRUFlag.prefill_flage, _x.FusionVRUFlag.lowbrake_flag, _x.FusionVRUFlag.highbrake_flag, _x.FusionVRUFlag.unconfirmed_flag, _x.FusionVRUFlag.hold_flag, _x.FusionVRUFlag.lowbrake_age, _x.FusionVRUFlag.highbrake_hold_age, _x.FusionVRUFlag.warnbrake_flag, _x.FusionVRUFlag.readyforIBA, _x.FusionVRURearFlag.warning_flag, _x.FusionVRURearFlag.prefill_flage, _x.FusionVRURearFlag.lowbrake_flag, _x.FusionVRURearFlag.highbrake_flag, _x.FusionVRURearFlag.unconfirmed_flag, _x.FusionVRURearFlag.hold_flag, _x.FusionVRURearFlag.lowbrake_age, _x.FusionVRURearFlag.highbrake_hold_age, _x.FusionVRURearFlag.warnbrake_flag, _x.FusionVRURearFlag.readyforIBA, _x.AebActuFlg.prewarn, _x.AebActuFlg.latentwarn, _x.AebActuFlg.prefill, _x.AebActuFlg.warnbrk, _x.AebActuFlg.softbrk, _x.AebActuFlg.hardbrk, _x.AebActuFlg.iba_req, _x.AebActuFlg.warntype, _x.AebActuFlg.hold_req, _x.AebReserved.aeb_reserved_1, _x.AebReserved.aeb_reserved_2, _x.AebReserved.aeb_reserved_3, _x.AebReserved.aeb_reserved_4, _x.AebReserved.aeb_reserved_5, _x.AebReserved.aeb_reserved_6, _x.AebReserved.aeb_reserved_7, _x.AebReserved.aeb_reserved_8, _x.AebReserved.aeb_reserved_9, _x.AebReserved.aeb_reserved_10, _x.AebReserved.aeb_reserved_11, _x.AebReserved.aeb_reserved_12, _x.AebReserved.aeb_reserved_13, _x.AebReserved.aeb_reserved_14, _x.AebReserved.aeb_reserved_15, _x.AebReserved.aeb_reserved_16, _x.AebReserved.aeb_reserved_17, _x.AebReserved.aeb_reserved_18, _x.AebReserved.aeb_reserved_19, _x.AebReserved.aeb_reserved_20, _x.AebReserved.aeb_reserved_21, _x.AebReserved.aeb_reserved_22, _x.AebReserved.aeb_reserved_23, _x.AebReserved.aeb_reserved_24, _x.AebReserved.aeb_reserved_25, _x.AebReserved.aeb_reserved_26, _x.AebReserved.aeb_reserved_27, _x.AebReserved.aeb_reserved_28, _x.AebReserved.aeb_reserved_29, _x.AebReserved.aeb_reserved_30, _x.AebReserved.aeb_reserved_31, _x.AebReserved.aeb_reserved_32, _x.AebReserved.aeb_reserved_33, _x.AebReserved.aeb_reserved_34, _x.AebReserved.aeb_reserved_35, _x.AebReserved.aeb_reserved_36, _x.AebReserved.aeb_reserved_37, _x.AebReserved.aeb_reserved_38, _x.AebReserved.aeb_reserved_39, _x.AebReserved.aeb_reserved_40, _x.AebReserved.aeb_reserved_41, _x.AebReserved.aeb_reserved_42, _x.AebReserved.aeb_reserved_43, _x.AebReserved.aeb_reserved_44, _x.AebReserved.aeb_reserved_45, _x.AebReserved.aeb_reserved_46, _x.AebReserved.aeb_reserved_47, _x.AebReserved.aeb_reserved_48, _x.AebReserved.aeb_reserved_49, _x.AebReserved.aeb_reserved_50, _x.AebReserved.aeb_reserved_51, _x.AebReserved.aeb_reserved_52, _x.AebReserved.aeb_reserved_53, _x.AebReserved.aeb_reserved_54, _x.AebReserved.aeb_reserved_55, _x.AebReserved.aeb_reserved_56, _x.AebReserved.aeb_reserved_57, _x.AebReserved.aeb_reserved_58, _x.AebReserved.aeb_reserved_59, _x.AebReserved.aeb_reserved_60, _x.AebReserved.aeb_reserved_61, _x.AebReserved.aeb_reserved_62, _x.AebReserved.aeb_reserved_63, _x.AebReserved.aeb_reserved_64, _x.AebReserved.aeb_reserved_65, _x.AebReserved.aeb_reserved_66, _x.AebReserved.aeb_reserved_67, _x.AebReserved.aeb_reserved_68, _x.AebReserved.aeb_reserved_69, _x.AebReserved.aeb_reserved_70, _x.AebReserved.aeb_reserved_71, _x.AebReserved.aeb_reserved_72, _x.AebReserved.aeb_reserved_73, _x.AebReserved.aeb_reserved_74, _x.AebReserved.aeb_reserved_75, _x.AebReserved.aeb_reserved_76, _x.AebReserved.aeb_reserved_77, _x.AebReserved.aeb_reserved_78, _x.AebReserved.aeb_reserved_79, _x.AebReserved.aeb_reserved_80, _x.AebReserved.aeb_reserved_81, _x.AebReserved.aeb_reserved_82, _x.AebReserved.aeb_reserved_83, _x.AebReserved.aeb_reserved_84, _x.AebReserved.aeb_reserved_85, _x.AebReserved.aeb_reserved_86, _x.AebReserved.aeb_reserved_87, _x.AebReserved.aeb_reserved_88, _x.AebReserved.aeb_reserved_89, _x.AebReserved.aeb_reserved_90, _x.AebReserved.aeb_reserved_91, _x.AebReserved.aeb_reserved_92, _x.AebReserved.aeb_reserved_93, _x.AebReserved.aeb_reserved_94, _x.AebReserved.aeb_reserved_95, _x.AebReserved.aeb_reserved_96, _x.AebReserved.aeb_reserved_97, _x.AebReserved.aeb_reserved_98, _x.AebReserved.aeb_reserved_99, _x.AebReserved.aeb_reserved_100, _x.AEBSm.snsrblk_cdn, _x.AEBSm.tmpfail_cdn, _x.AEBSm.permfail_cdn, _x.AEBSm.psv_cdn, _x.AEBSm.aebonff_cdn, _x.AEBSm.factive_cdn, _x.AEBSm.bactive_cdn, _x.AEBSm.stdby_cdn, _x.AEBSm.st, _x.AEBSm.sys_st, _x.FCWSm.snsrblk_cdn, _x.FCWSm.tmpfail_cdn, _x.FCWSm.permfail_cdn, _x.FCWSm.psv_cdn, _x.FCWSm.aebonff_cdn, _x.FCWSm.factive_cdn, _x.FCWSm.bactive_cdn, _x.FCWSm.stdby_cdn, _x.FCWSm.st, _x.FCWSm.sys_st, _x.AebRearSm.off_cdn, _x.AebRearSm.stdby_cdn, _x.AebRearSm.psv_cdn, _x.AebRearSm.psv_cdn_bit, _x.AebRearSm.fail_cdn, _x.AebRearSm.active_cdn))
      _x = self
      buff.write(_get_struct_I3BI2BI4B11I().pack(_x.AebRearSm.sm_state, _x.FcwRearSm.off_cdn, _x.FcwRearSm.stdby_cdn, _x.FcwRearSm.psv_cdn, _x.FcwRearSm.psv_cdn_bit, _x.FcwRearSm.fail_cdn, _x.FcwRearSm.active_cdn, _x.FcwRearSm.sm_state, _x.FuncSuppress.Aeb_Suppress, _x.FuncSuppress.Fcw_Suppress, _x.FuncSuppress.Aebrear_Suppress, _x.FuncSuppress.Fcwrear_Suppress, _x.AebDiag.FCTsTopicState, _x.AebDiag.AebTopicState, _x.AebDiag.FcwTopicState, _x.AebDiag.TopicLoss, _x.AebDiag.TopicNoInit, _x.AebDiag.AebFaultSt, _x.AebDiag.FcwFaultSt, _x.AebDiag.AebFimIndex, _x.AebDiag.FcwFimIndex, _x.AebDiag.AebRearFaultSt, _x.AebDiag.AebRearFimIndex))
      length = len(self.AebDiag.AebFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.AebDiag.AebFault))
      length = len(self.AebDiag.FcwFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.AebDiag.FcwFault))
      length = len(self.AebDiag.AebRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.AebDiag.AebRearFault))
      length = len(self.AebDiag.FcwRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.AebDiag.FcwRearFault))
      _x = self
      buff.write(_get_struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f().pack(_x.AebDiag.FWfailsafe, _x.AebDiag.FNfailsafe, _x.AebDiag.Lidarfailsafe, _x.AebDiag.Rearfailsafe, _x.AebMode.RearEnable, _x.AebMode.ShadowMode, _x.AebMode.ShadowModeSoft, _x.AebMode.HilMode, _x.AESCCRcandi.ID, _x.AESCCRcandi.VID, _x.AESCCRcandi.range, _x.AESCCRcandi.rangerate, _x.AESCCRcandi.TTC, _x.AESCCRcandi.TTB_tt, _x.AESCCRcandi.TTB_valid, _x.AESCCRcandi.TTT_left_tt, _x.AESCCRcandi.TTT_left_valid, _x.AESCCRcandi.TTT_right_tt, _x.AESCCRcandi.TTT_right_valid, _x.AESCCRcandi.closeleft_posx, _x.AESCCRcandi.closeleft_posy, _x.AESCCRcandi.closeleft_curx, _x.AESCCRcandi.closeleft_cury, _x.AESCCRcandi.closeleft_latest, _x.AESCCRcandi.closeright_posx, _x.AESCCRcandi.closeright_posy, _x.AESCCRcandi.closeright_curx, _x.AESCCRcandi.closeright_cury, _x.AESCCRcandi.closeright_latest, _x.AESCCRcandi.remoteleft_posx, _x.AESCCRcandi.remoteleft_posy, _x.AESCCRcandi.remoteleft_curx, _x.AESCCRcandi.remoteleft_cury, _x.AESCCRcandi.remoteleft_latest, _x.AESCCRcandi.remoteright_posx, _x.AESCCRcandi.remoteright_posy, _x.AESCCRcandi.remoteright_curx, _x.AESCCRcandi.remoteright_cury, _x.AESCCRcandi.remoteright_latest, _x.AESCCRcandi.center_posx, _x.AESCCRcandi.center_posy, _x.AESCCRcandi.center_curx, _x.AESCCRcandi.center_cury, _x.AESCCRcandi.center_latest, _x.AESCCRcandi.longpos, _x.AESCCRcandi.latpos, _x.AESCCRcandi.XOLC, _x.AESCCRcandi.latest, _x.AESCCRcandi.closest_corner, _x.AESCCRcandi.close_corner_est, _x.AESCCRcandi.inpath, _x.AESCCRcandi.inpathcur, _x.AESCCRcandi.inpathpre, _x.AESCCRcandi.inpathage, _x.AESCCRcandi.inpathcheck, _x.AESCCRcandi.isfusion, _x.AESCCRcandi.isvision, _x.AESCCRcandi.isradar, _x.AESCCRcandi.toi, _x.AESCCRcandi.isoncoming, _x.AESCCRcandi.AEBconf, _x.AESCCRcandi.steerflag, _x.AESCCRcandi.steerdirection, _x.AESCCRcandi.ref_pos.ref_character, _x.AESCCRcandi.ref_pos.pos_x, _x.AESCCRcandi.ref_pos.pos_y, _x.AESCCRcandi.ref_pos.range, _x.AESCCRcandi.ref_pos.heading, _x.CloseAESTarget.ID, _x.CloseAESTarget.VID, _x.CloseAESTarget.range, _x.CloseAESTarget.rangerate, _x.CloseAESTarget.TTC, _x.CloseAESTarget.TTB_tt, _x.CloseAESTarget.TTB_valid, _x.CloseAESTarget.TTT_left_tt, _x.CloseAESTarget.TTT_left_valid, _x.CloseAESTarget.TTT_right_tt, _x.CloseAESTarget.TTT_right_valid, _x.CloseAESTarget.closeleft_posx, _x.CloseAESTarget.closeleft_posy, _x.CloseAESTarget.closeleft_curx, _x.CloseAESTarget.closeleft_cury, _x.CloseAESTarget.closeleft_latest, _x.CloseAESTarget.closeright_posx, _x.CloseAESTarget.closeright_posy, _x.CloseAESTarget.closeright_curx, _x.CloseAESTarget.closeright_cury, _x.CloseAESTarget.closeright_latest, _x.CloseAESTarget.remoteleft_posx, _x.CloseAESTarget.remoteleft_posy, _x.CloseAESTarget.remoteleft_curx, _x.CloseAESTarget.remoteleft_cury, _x.CloseAESTarget.remoteleft_latest, _x.CloseAESTarget.remoteright_posx, _x.CloseAESTarget.remoteright_posy, _x.CloseAESTarget.remoteright_curx, _x.CloseAESTarget.remoteright_cury, _x.CloseAESTarget.remoteright_latest, _x.CloseAESTarget.center_posx, _x.CloseAESTarget.center_posy, _x.CloseAESTarget.center_curx, _x.CloseAESTarget.center_cury, _x.CloseAESTarget.center_latest, _x.CloseAESTarget.longpos, _x.CloseAESTarget.latpos, _x.CloseAESTarget.XOLC, _x.CloseAESTarget.latest, _x.CloseAESTarget.closest_corner, _x.CloseAESTarget.close_corner_est, _x.CloseAESTarget.inpath, _x.CloseAESTarget.inpathcur, _x.CloseAESTarget.inpathpre, _x.CloseAESTarget.inpathage, _x.CloseAESTarget.inpathcheck, _x.CloseAESTarget.isfusion, _x.CloseAESTarget.isvision, _x.CloseAESTarget.isradar, _x.CloseAESTarget.toi, _x.CloseAESTarget.isoncoming, _x.CloseAESTarget.AEBconf, _x.CloseAESTarget.steerflag, _x.CloseAESTarget.steerdirection, _x.CloseAESTarget.ref_pos.ref_character, _x.CloseAESTarget.ref_pos.pos_x, _x.CloseAESTarget.ref_pos.pos_y, _x.CloseAESTarget.ref_pos.range, _x.CloseAESTarget.ref_pos.heading, _x.AESPathCheck.plan_valid, _x.AESPathCheck.target_valid, _x.AESPathCheck.rout_valid, _x.AESPathCheck.reservetime, _x.AESPathCheck.pnc_c0, _x.AESPathCheck.pnc_c1, _x.AESPathCheck.pnc_c2, _x.AESPathCheck.pnc_c3, _x.AESPathCheck.pnc_c4, _x.AESPathCheck.pnc_c5, _x.AESPathCheck.crash_id, _x.AESPathCheck.crash_lane, _x.AESPathCheck.aessteerangle, _x.AESPathCheck.aespncst, _x.AESPathCheck.host_left_lane.path_c0, _x.AESPathCheck.host_left_lane.path_c1, _x.AESPathCheck.host_left_lane.path_c2, _x.AESPathCheck.host_left_lane.path_c3, _x.AESPathCheck.host_left_lane.isvalid, _x.AESPathCheck.host_left_lane.path_type, _x.AESPathCheck.host_left_lane.path_color, _x.AESPathCheck.host_left_lane.character, _x.AESPathCheck.host_right_lane.path_c0, _x.AESPathCheck.host_right_lane.path_c1, _x.AESPathCheck.host_right_lane.path_c2, _x.AESPathCheck.host_right_lane.path_c3, _x.AESPathCheck.host_right_lane.isvalid, _x.AESPathCheck.host_right_lane.path_type, _x.AESPathCheck.host_right_lane.path_color, _x.AESPathCheck.host_right_lane.character, _x.AESPathCheck.left_edge.path_c0, _x.AESPathCheck.left_edge.path_c1, _x.AESPathCheck.left_edge.path_c2, _x.AESPathCheck.left_edge.path_c3, _x.AESPathCheck.left_edge.isvalid, _x.AESPathCheck.left_edge.path_type, _x.AESPathCheck.left_edge.path_color, _x.AESPathCheck.left_edge.character, _x.AESPathCheck.right_edge.path_c0, _x.AESPathCheck.right_edge.path_c1, _x.AESPathCheck.right_edge.path_c2, _x.AESPathCheck.right_edge.path_c3, _x.AESPathCheck.right_edge.isvalid, _x.AESPathCheck.right_edge.path_type, _x.AESPathCheck.right_edge.path_color, _x.AESPathCheck.right_edge.character, _x.AESPathCheck.host_lpp.path_c0, _x.AESPathCheck.host_lpp.path_c1, _x.AESPathCheck.host_lpp.path_c2, _x.AESPathCheck.host_lpp.path_c3, _x.AESPathCheck.host_lpp.isvalid, _x.AESPathCheck.host_lpp.width, _x.AESPlanPath.root_path.path_c0, _x.AESPlanPath.root_path.path_c1, _x.AESPlanPath.root_path.path_c2, _x.AESPlanPath.root_path.path_c3, _x.AESPlanPath.root_path.path_c4, _x.AESPlanPath.root_path.path_c5, _x.AESPlanPath.root_path.curvature, _x.AESPlanPath.root_path.dcurv, _x.AESPlanPath.root_path.expect_lat, _x.AESPlanPath.root_path.expect_long, _x.AESPlanPath.root_path.isvalid, _x.AESPlanPath.root_path.rout_cost, _x.AESPlanPath.root_path.max_ay, _x.AESPlanPath.aesplanactv, _x.AESPlanPath.ltrldstlacntr, _x.AESPlanPath.egolawdth, _x.AESPlanPath.agvehlanecntr, _x.AESPlanPath.lacurv, _x.AESPlanPath.ladcurv, _x.AESPlanPath.vehspdkph, _x.AESPlanPath.dispvehspdkph))
      length = len(self.AESPlanPath.better_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.AESPlanPath.better_path:
        _x = val1
        buff.write(_get_struct_10fI2f().pack(_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay))
      _x = self
      buff.write(_get_struct_fI7f().pack(_x.fAebOut.ebhpInfo.emncInfo.maneuverProb, _x.fAebOut.ebhpInfo.emncInfo.maneuver, _x.fAebOut.ebhpInfo.emncInfo.enterWeight, _x.fAebOut.ebhpInfo.emncInfo.exitWeight, _x.fAebOut.ebhpInfo.emncInfo.reserved, _x.fAebOut.ebhpInfo.etjpInfo.curvature, _x.fAebOut.ebhpInfo.etjpInfo.curvatureRate, _x.fAebOut.ebhpInfo.etjpInfo.roc, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.accel))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.reserved))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCa.reserved))
      _x = self.fAebOut.ebhpInfo.etjpInfo.trajCv.accel
      buff.write(_get_struct_f().pack(_x))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.reserved))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.trajCv.reserved))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.reserved))
      _x = self
      buff.write(_get_struct_10fI().pack(_x.fAebOut.ebhpInfo.etjpInfo.xEnd, _x.fAebOut.ebhpInfo.etjpInfo.tEnd, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c0, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c1, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c2, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c3, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a0, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a1, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a2, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a3, _x.fAebOut.ebhpInfo.etjpInfo.numSeg))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.xEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.xEndSegment))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.tEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInfo.etjpInfo.tEndSegment))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.c0, _x.c1, _x.c2, _x.c3))
      length = len(self.fAebOut.objOfInterestMap.car)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.car:
        _v2 = val1.objInfo
        _x = _v2
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v3 = val1.obhcInfo
        _x = _v3
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v4 = val1.othaInfo
        _x = _v4
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.fAebOut.objOfInterestMap.pedstrain)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.pedstrain:
        _v5 = val1.objInfo
        _x = _v5
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v6 = val1.obhcInfo
        _x = _v6
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v7 = val1.othaInfo
        _x = _v7
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.fAebOut.objOfInterestMap.bicyclist)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.bicyclist:
        _v8 = val1.objInfo
        _x = _v8
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v9 = val1.obhcInfo
        _x = _v9
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v10 = val1.othaInfo
        _x = _v10
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.fAebOut.objOfInterestMap.motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.motor:
        _v11 = val1.objInfo
        _x = _v11
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v12 = val1.obhcInfo
        _x = _v12
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v13 = val1.othaInfo
        _x = _v13
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.fAebOut.objOfInterestMap.obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.obstacle:
        _v14 = val1.objInfo
        _x = _v14
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v15 = val1.obhcInfo
        _x = _v15
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v16 = val1.othaInfo
        _x = _v16
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_4I17f6I3fI3fB().pack(_x.fAebOut.crenInfo.objInfo.id, _x.fAebOut.crenInfo.objInfo.visionId, _x.fAebOut.crenInfo.objInfo.radarId, _x.fAebOut.crenInfo.objInfo.age, _x.fAebOut.crenInfo.objInfo.longDist, _x.fAebOut.crenInfo.objInfo.latDist, _x.fAebOut.crenInfo.objInfo.longVel, _x.fAebOut.crenInfo.objInfo.latVel, _x.fAebOut.crenInfo.objInfo.longAccel, _x.fAebOut.crenInfo.objInfo.latAccel, _x.fAebOut.crenInfo.objInfo.heading, _x.fAebOut.crenInfo.objInfo.curvature, _x.fAebOut.crenInfo.objInfo.existConfidence, _x.fAebOut.crenInfo.objInfo.length, _x.fAebOut.crenInfo.objInfo.width, _x.fAebOut.crenInfo.objInfo.longDistStd, _x.fAebOut.crenInfo.objInfo.latDistStd, _x.fAebOut.crenInfo.objInfo.longVelStd, _x.fAebOut.crenInfo.objInfo.latVelStd, _x.fAebOut.crenInfo.objInfo.longAccelStd, _x.fAebOut.crenInfo.objInfo.latAccelStd, _x.fAebOut.crenInfo.objInfo.motionStatus, _x.fAebOut.crenInfo.objInfo.detectionSensor, _x.fAebOut.crenInfo.objInfo.type, _x.fAebOut.crenInfo.objInfo.refPoint, _x.fAebOut.crenInfo.objInfo.trackerStatus, _x.fAebOut.crenInfo.objInfo.visionDetectionSnesor, _x.fAebOut.crenInfo.obhcInfo.hypoProb, _x.fAebOut.crenInfo.obhcInfo.collProb, _x.fAebOut.crenInfo.obhcInfo.ttb, _x.fAebOut.crenInfo.obhcInfo.hypoLabel, _x.fAebOut.crenInfo.othaInfo.aLgtNec, _x.fAebOut.crenInfo.othaInfo.aLatNec, _x.fAebOut.crenInfo.othaInfo.ttc, _x.fAebOut.crenInfo.othaInfo.inPathNow))
      length = len(self.fAebOut.crenInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.crenInfo.reserved))
      _x = self
      buff.write(_get_struct_11B2f11B5IfB2I4B6I3f().pack(_x.fAebOut.acdnInfo.flgPreWarnTrigger, _x.fAebOut.acdnInfo.flgJerkTrigger, _x.fAebOut.acdnInfo.flgPrefillTrigger, _x.fAebOut.acdnInfo.flgPartialBrkTrigger, _x.fAebOut.acdnInfo.flgFullBrkTrigger, _x.fAebOut.acdnInfo.flgEbaTrigger, _x.fAebOut.acdnInfo.flgDangerRelease, _x.fAebOut.acdnInfo.flgObjInsideBlindZoom, _x.fAebOut.acdnInfo.flgFirstObjDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnObjTrigger, _x.fAebOut.tscdInfo.spdAebReduce, _x.fAebOut.tscdInfo.spdJerkReduce, _x.fAebOut.tscdInfo.flgDriverOverride, _x.fAebOut.tscdInfo.flgDriverBrake, _x.fAebOut.tscdInfo.flgDriveForward, _x.fAebOut.tscdInfo.flgDoorOpen, _x.fAebOut.tscdInfo.flgBeltWarn, _x.fAebOut.tscdInfo.flgVehEnable, _x.fAebOut.tscdInfo.flgChassisIntervince, _x.fAebOut.tscdInfo.flgBrakeOverHeat, _x.fAebOut.tscdInfo.flgEscOff, _x.fAebOut.tscdInfo.flgSysFault, _x.fAebOut.tscdInfo.flgPathFeasible, _x.fAebOut.stmeInfo.fcwStatus, _x.fAebOut.stmeInfo.aebBrkStatus, _x.fAebOut.stmeInfo.ebaStatus, _x.fAebOut.rqabInfo.fcwTargetId, _x.fAebOut.rqabInfo.aebTargetId, _x.fAebOut.rqabInfo.aebDecelReq, _x.fAebOut.rqabInfo.aebReq, _x.fAebOut.rqabInfo.aebTargetType, _x.fAebOut.rqabInfo.aebStatus, _x.fAebOut.rqabInfo.abpReq, _x.fAebOut.rqabInfo.awbReq, _x.fAebOut.rqabInfo.ebaReq, _x.fAebOut.rqabInfo.fcwReq, _x.fAebOut.rqabInfo.fcwTargetType, _x.fAebOut.rqabInfo.fcwStatus, _x.fAebOut.taDiagBusSignals.NumberOfValidCar, _x.fAebOut.taDiagBusSignals.NumberOfValidMotor, _x.fAebOut.taDiagBusSignals.NumberOfValidPed, _x.fAebOut.taDiagBusSignals.NumberOfValidBic, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvt, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvtRate, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.filteredEgoALgt))
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.dstInTrjctry)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.dstInTrjctry))
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLgt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLgt))
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLat))
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.cosOfHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.cosOfHeading))
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.sinOfHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.sinOfHeading))
      _x = self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.lowPAx
      buff.write(_get_struct_f().pack(_x))
      length = len(self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec:
        _v17 = val1.diagBusForSortedObjectAeb
        _x = _v17
        buff.write(_get_struct_2IB5fI().pack(_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex))
        length = len(_v17.predCenPosnLgt)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.predCenPosnLgt))
        length = len(_v17.predCenPosnLat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.predCenPosnLat))
        length = len(_v17.predCosHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.predCosHeading))
        length = len(_v17.predSinHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.predSinHeading))
        _x = _v17
        buff.write(_get_struct_I4B5f().pack(_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi))
        length = len(_v17.opCond1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v17.opCond1))
        length = len(_v17.opCond2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v17.opCond2))
        length = len(_v17.opCond3)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v17.opCond3))
        length = len(_v17.opCond4)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v17.opCond4))
        _x = _v17
        buff.write(_get_struct_4f2I().pack(_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex))
        length = len(_v17.edgeIndex)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v17.edgeIndex))
        length = len(_v17.maxCLeIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v17.maxCLeIdx))
        length = len(_v17.minCRiIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v17.minCRiIdx))
        length = len(_v17.taLateralThreatMatrixOpl)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v17.taLateralThreatMatrixOpl))
        length = len(_v17.objLongPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.objLongPosnRelToHost))
        length = len(_v17.objLatPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.objLatPosnRelToHost))
        length = len(_v17.objLongSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.objLongSpanRelToHost))
        length = len(_v17.objLatSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.objLatSpanRelToHost))
        length = len(_v17.hostLongPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.hostLongPosnRelToObj))
        length = len(_v17.hostLatPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.hostLatPosnRelToObj))
        length = len(_v17.hostLongSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.hostLongSpanRelToObj))
        length = len(_v17.hostLatSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.hostLatSpanRelToObj))
        length = len(_v17.isValidUpdateForLongThreat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v17.isValidUpdateForLongThreat))
        _x = _v17
        buff.write(_get_struct_3fI2f().pack(_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth))
        length = len(_v17.xEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.xEdges))
        length = len(_v17.yEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.yEdges))
        length = len(_v17.egoMotionTime)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.egoMotionTime))
        length = len(_v17.egoXc)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.egoXc))
        _x = _v17
        buff.write(_get_struct_f2I().pack(_x.ttp, _x.fusionSource, _x.brkIndex))
        length = len(_v17.objLongDistNear)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.objLongDistNear))
        length = len(_v17.inFwdPathResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v17.inFwdPathResampled))
        length = len(_v17.timeVecResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v17.timeVecResampled))
        _x = _v17
        buff.write(_get_struct_4f5B5f9B5f().pack(_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv))
        _x = val1
        buff.write(_get_struct_I4fB().pack(_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj))
      length = len(self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec:
        _v18 = val1.diagBusForSortedObjectAeb
        _x = _v18
        buff.write(_get_struct_2IB5fI().pack(_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex))
        length = len(_v18.predCenPosnLgt)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.predCenPosnLgt))
        length = len(_v18.predCenPosnLat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.predCenPosnLat))
        length = len(_v18.predCosHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.predCosHeading))
        length = len(_v18.predSinHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.predSinHeading))
        _x = _v18
        buff.write(_get_struct_I4B5f().pack(_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi))
        length = len(_v18.opCond1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v18.opCond1))
        length = len(_v18.opCond2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v18.opCond2))
        length = len(_v18.opCond3)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v18.opCond3))
        length = len(_v18.opCond4)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v18.opCond4))
        _x = _v18
        buff.write(_get_struct_4f2I().pack(_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex))
        length = len(_v18.edgeIndex)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v18.edgeIndex))
        length = len(_v18.maxCLeIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v18.maxCLeIdx))
        length = len(_v18.minCRiIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v18.minCRiIdx))
        length = len(_v18.taLateralThreatMatrixOpl)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v18.taLateralThreatMatrixOpl))
        length = len(_v18.objLongPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.objLongPosnRelToHost))
        length = len(_v18.objLatPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.objLatPosnRelToHost))
        length = len(_v18.objLongSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.objLongSpanRelToHost))
        length = len(_v18.objLatSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.objLatSpanRelToHost))
        length = len(_v18.hostLongPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.hostLongPosnRelToObj))
        length = len(_v18.hostLatPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.hostLatPosnRelToObj))
        length = len(_v18.hostLongSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.hostLongSpanRelToObj))
        length = len(_v18.hostLatSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.hostLatSpanRelToObj))
        length = len(_v18.isValidUpdateForLongThreat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v18.isValidUpdateForLongThreat))
        _x = _v18
        buff.write(_get_struct_3fI2f().pack(_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth))
        length = len(_v18.xEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.xEdges))
        length = len(_v18.yEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.yEdges))
        length = len(_v18.egoMotionTime)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.egoMotionTime))
        length = len(_v18.egoXc)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.egoXc))
        _x = _v18
        buff.write(_get_struct_f2I().pack(_x.ttp, _x.fusionSource, _x.brkIndex))
        length = len(_v18.objLongDistNear)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.objLongDistNear))
        length = len(_v18.inFwdPathResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v18.inFwdPathResampled))
        length = len(_v18.timeVecResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v18.timeVecResampled))
        _x = _v18
        buff.write(_get_struct_4f5B5f9B5f().pack(_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv))
        _x = val1
        buff.write(_get_struct_I4fB().pack(_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj))
      _x = self
      buff.write(_get_struct_9fIB().pack(_x.fAebOut.taDiagBusSignals.jerkLatAbsMax, _x.fAebOut.taDiagBusSignals.accelLatAbsMax, _x.fAebOut.taDiagBusSignals.crvtRateAbsMax, _x.fAebOut.taDiagBusSignals.crvtAbsMax, _x.fAebOut.taDiagBusSignals.jerkLatAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsCmft, _x.fAebOut.taDiagBusSignals.crvtRateAbsCmft, _x.fAebOut.taDiagBusSignals.crvtAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsOnComingBrking, _x.fAebOut.taDiagBusSignals.latPosnRoadConf, _x.fAebOut.taDiagBusSignals.TAMode))
      length = len(self.fAebOut.taDiagBusSignals.reservedTaDebug)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.taDiagBusSignals.reservedTaDebug))
      _x = self
      buff.write(_get_struct_2f4BIB().pack(_x.fAebOut.ebhpInnerInfo.yawRateNoise.bias, _x.fAebOut.ebhpInnerInfo.yawRateNoise.std, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate, _x.fAebOut.ebhpInnerInfo.yawRateLearnState, _x.fAebOut.ebhpInnerInfo.flgEsitmateEnable))
      length = len(self.fAebOut.ebhpInnerInfo.modelConfidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.modelConfidence))
      length = len(self.fAebOut.ebhpInnerInfo.modelTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.modelTransMatrix))
      length = len(self.fAebOut.ebhpInnerInfo.statePriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.statePriorHf))
      length = len(self.fAebOut.ebhpInnerInfo.covPriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.covPriorHf))
      length = len(self.fAebOut.ebhpInnerInfo.statePostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.statePostHf))
      length = len(self.fAebOut.ebhpInnerInfo.covPostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.covPostHf))
      length = len(self.fAebOut.ebhpInnerInfo.statePriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.statePriorCkv))
      length = len(self.fAebOut.ebhpInnerInfo.covPriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.covPriorCkv))
      length = len(self.fAebOut.ebhpInnerInfo.statePostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.statePostCkv))
      length = len(self.fAebOut.ebhpInnerInfo.covPostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.covPostCkv))
      length = len(self.fAebOut.ebhpInnerInfo.residualCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.residualCkv))
      length = len(self.fAebOut.ebhpInnerInfo.sysUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.sysUncertaintyCkv))
      length = len(self.fAebOut.ebhpInnerInfo.procUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.procUncertaintyCkv))
      length = len(self.fAebOut.ebhpInnerInfo.statePriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.statePriorCka))
      length = len(self.fAebOut.ebhpInnerInfo.covPriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.covPriorCka))
      length = len(self.fAebOut.ebhpInnerInfo.statePostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.statePostCka))
      length = len(self.fAebOut.ebhpInnerInfo.covPostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.covPostCka))
      length = len(self.fAebOut.ebhpInnerInfo.residualCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.residualCka))
      length = len(self.fAebOut.ebhpInnerInfo.sysUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.sysUncertaintyCka))
      length = len(self.fAebOut.ebhpInnerInfo.procUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.procUncertaintyCka))
      length = len(self.fAebOut.ebhpInnerInfo.stateTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.stateTransMatrix))
      length = len(self.fAebOut.ebhpInnerInfo.measValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.measValues))
      length = len(self.fAebOut.ebhpInnerInfo.measMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.measMatrix))
      length = len(self.fAebOut.ebhpInnerInfo.measUncertainty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ebhpInnerInfo.measUncertainty))
      _x = self
      buff.write(_get_struct_2f4I().pack(_x.fAebOut.ebhpInnerInfo.curveCoeff.curvature, _x.fAebOut.ebhpInnerInfo.curveCoeff.curvatureRate, _x.fAebOut.ooifInnerInfo.allObjNum, _x.fAebOut.ooifInnerInfo.objPlausNum, _x.fAebOut.ooifInnerInfo.carCandiNum, _x.fAebOut.ooifInnerInfo.vruCandiNum))
      length = len(self.fAebOut.ooifInnerInfo.objPlausStatus)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.objPlausStatus:
        _x = val1
        buff.write(_get_struct_2If().pack(_x.id, _x.codeWord, _x.reserved))
      length = len(self.fAebOut.ooifInnerInfo.objPlausVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.objPlausVec:
        _x = val1
        buff.write(_get_struct_I7fBf().pack(_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance))
        _v19 = val1.egoBoxBase
        length = len(_v19.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v19.x))
        length = len(_v19.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v19.y))
        length = len(_v19.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v19.reserved))
        _v20 = val1.egoBoxLengthExt
        length = len(_v20.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v20.x))
        length = len(_v20.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v20.y))
        length = len(_v20.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v20.reserved))
        _v21 = val1.egoBoxExt
        length = len(_v21.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v21.x))
        length = len(_v21.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v21.y))
        length = len(_v21.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v21.reserved))
        _v22 = val1.objBoxBase
        length = len(_v22.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v22.x))
        length = len(_v22.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v22.y))
        length = len(_v22.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v22.reserved))
        _v23 = val1.ObjBoxExt
        length = len(_v23.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v23.x))
        length = len(_v23.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v23.y))
        length = len(_v23.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v23.reserved))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
        _x = val1.objSensorTotalExt
        buff.write(_get_struct_f().pack(_x))
      length = len(self.fAebOut.ooifInnerInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ooifInnerInfo.reserved))
      length = len(self.fAebOut.ooifInnerInfo.objPlausIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.ooifInnerInfo.objPlausIds))
      length = len(self.fAebOut.ooifInnerInfo.carCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.carCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I19f().pack(_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading))
      length = len(self.fAebOut.ooifInnerInfo.vruCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.vruCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I38f5B().pack(_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch))
      length = len(self.fAebOut.crenInnerInfo.objPruneId)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.crenInnerInfo.objPruneId))
      _x = self
      buff.write(_get_struct_5I().pack(_x.fAebOut.crenInnerInfo.targetByPriorId, _x.fAebOut.crenInnerInfo.targetByTtcId, _x.fAebOut.crenInnerInfo.targetByDistId, _x.fAebOut.crenInnerInfo.targetByPostId, _x.fAebOut.crenInnerInfo.targetOldId))
      length = len(self.fAebOut.crenInnerInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.crenInnerInfo.reserved))
      _x = self
      buff.write(_get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().pack(_x.fAebOut.carInfo.vLgt, _x.fAebOut.carInfo.vLat, _x.fAebOut.carInfo.aLgt, _x.fAebOut.carInfo.aLat, _x.fAebOut.carInfo.yawRate, _x.fAebOut.carInfo.yawRateValid, _x.fAebOut.carInfo.aLgtValid, _x.fAebOut.carInfo.aLatValid, _x.fAebOut.carInfo.motionStatus, _x.fAebOut.carInfo.speed, _x.fAebOut.carInfo.spdWhlFl, _x.fAebOut.carInfo.spdWhlFr, _x.fAebOut.carInfo.spdWhlRl, _x.fAebOut.carInfo.spdWhlRr, _x.fAebOut.carInfo.spdWhlFlValid, _x.fAebOut.carInfo.spdWhlFrValid, _x.fAebOut.carInfo.spdWhlRlValid, _x.fAebOut.carInfo.spdWhlRrValid, _x.fAebOut.carInfo.dirWhlFl, _x.fAebOut.carInfo.dirWhlFr, _x.fAebOut.carInfo.dirWhlRl, _x.fAebOut.carInfo.dirWhlRr, _x.fAebOut.carInfo.brkPedalTravel, _x.fAebOut.carInfo.masterCylPress, _x.fAebOut.carInfo.aLgtDriverBrkReq, _x.fAebOut.carInfo.brkStatus, _x.fAebOut.carInfo.masterCylPressValid, _x.fAebOut.carInfo.dtcActive, _x.fAebOut.carInfo.tcsActive, _x.fAebOut.carInfo.vdcActive, _x.fAebOut.carInfo.escOverHeat, _x.fAebOut.carInfo.escFault, _x.fAebOut.carInfo.escSwitch, _x.fAebOut.carInfo.strAngle, _x.fAebOut.carInfo.strSpeed, _x.fAebOut.carInfo.pinAngle, _x.fAebOut.carInfo.strAngleValid, _x.fAebOut.carInfo.pinAngleValid, _x.fAebOut.carInfo.epsFault, _x.fAebOut.carInfo.accelPedalPos, _x.fAebOut.carInfo.actGearValid, _x.fAebOut.carInfo.accelPedalPosValid, _x.fAebOut.carInfo.accStatus, _x.fAebOut.carInfo.actGear, _x.fAebOut.carInfo.vehicleState, _x.fAebOut.carInfo.vehicleMode, _x.fAebOut.carInfo.doorDriver, _x.fAebOut.carInfo.doorFrontPassenger, _x.fAebOut.carInfo.doorRearLeft, _x.fAebOut.carInfo.doorRearRight, _x.fAebOut.carInfo.hoodStatus, _x.fAebOut.carInfo.trailerStatus, _x.fAebOut.carInfo.turnLeftLight, _x.fAebOut.carInfo.turnRightLight, _x.fAebOut.carInfo.beltWarnDriver, _x.fAebOut.carInfo.beltWarnFrontPassenger, _x.fAebOut.carInfo.beltRearLeft, _x.fAebOut.carInfo.beltRearMid, _x.fAebOut.carInfo.beltRearRight, _x.fAebOut.carInfo.aebSetting, _x.fAebOut.carInfo.fcwSetting, _x.fAebOut.carInfo.length, _x.fAebOut.carInfo.width, _x.fAebOut.carInfo.axisLength, _x.fAebOut.carInfo.rearAxisToFrontEnd, _x.fAebOut.carInfo.rearTrackWidth, _x.fAebOut.carInfo.steerRatio, _x.fAebOut.carInfo.cogToFrontAxis, _x.fAebOut.carInfo.cogToRearAxis, _x.fAebOut.carInfo.frontCornStiff, _x.fAebOut.carInfo.rearCornStiff))
      length = len(self.fAebOut.objInfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objInfo:
        _x = val1
        buff.write(_get_struct_4I2BiI().pack(_x.OBJ_Object_Count, _x.OBJ_VRU_Count, _x.OBJ_VD_Count, _x.OBJ_CIPV_ID, _x.OBJ_CIPV_Lost, _x.OBJ_Is_CCI, _x.OBJ_CCI_Side, _x.OBJ_CCI_ID))
      _x = self
      buff.write(_get_struct_f4Bf2I6fI4f().pack(_x.fAebOut.acdnInnerInfo.thdFcwTtcCompens, _x.fAebOut.acdnInnerInfo.isSafeDistance, _x.fAebOut.acdnInnerInfo.isSafeLgtRelSpd, _x.fAebOut.acdnInnerInfo.isSafeLgtRelAcc, _x.fAebOut.acdnInnerInfo.dangerRelease, _x.fAebOut.acdnInnerInfo.objLongDistCorr, _x.fAebOut.acdnInnerInfo.fcwCodeWord, _x.fAebOut.acdnInnerInfo.aebCodeWord, _x.fAebOut.acdnInnerInfo.crvtReqdLe, _x.fAebOut.acdnInnerInfo.crvtReqdRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxRi, _x.fAebOut.acdnInnerInfo.oldGearAct, _x.fAebOut.acdnInnerInfo.objLatDistGap, _x.fAebOut.acdnInnerInfo.flgLatEscapeLe, _x.fAebOut.acdnInnerInfo.flgLatEscapeRi, _x.fAebOut.acdnInnerInfo.isProceedDangerRelease))
      length = len(self.fAebOut.acdnInnerInfo.floatAcdnInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.acdnInnerInfo.floatAcdnInnerReserve))
      length = len(self.fAebOut.acdnInnerInfo.intAcdnInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.acdnInnerInfo.intAcdnInnerReserve))
      length = len(self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve))
      _x = self
      buff.write(_get_struct_3B2f7B2f().pack(_x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverIntvFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverStrFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLe, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqRi))
      length = len(self.fAebOut.acdnInnerInfo.hooaInnerInfo.floatHooaInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.acdnInnerInfo.hooaInnerInfo.floatHooaInnerReserve))
      length = len(self.fAebOut.acdnInnerInfo.hooaInnerInfo.intHooaInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.acdnInnerInfo.hooaInnerInfo.intHooaInnerReserve))
      length = len(self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve))
      _x = self
      buff.write(_get_struct_4fB4I2B().pack(_x.fAebOut.acdnInnerInfo.aFcwALatCritByDrvr, _x.fAebOut.acdnInnerInfo.crvtFcwALatCritByDrvrThd, _x.fAebOut.acdnInnerInfo.tTtcFcwTriger, _x.fAebOut.acdnInnerInfo.facDriverIntvFcw, _x.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap, _x.fAebOut.stmeInnerInfo.aebPassiveCodeWord, _x.fAebOut.stmeInnerInfo.aebTermintCodeWord, _x.fAebOut.stmeInnerInfo.activeCounter, _x.fAebOut.stmeInnerInfo.passiveCounter, _x.fAebOut.stmeInnerInfo.aebSwitchFlag, _x.fAebOut.stmeInnerInfo.faultFlag))
      length = len(self.fAebOut.stmeInnerInfo.floatStmeInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.stmeInnerInfo.floatStmeInnerReserve))
      length = len(self.fAebOut.reservedSpace.boolReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.reservedSpace.boolReserve))
      length = len(self.fAebOut.reservedSpace.uintReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.reservedSpace.uintReserve))
      length = len(self.fAebOut.reservedSpace.floatReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.reservedSpace.floatReserve))
      _x = self
      buff.write(_get_struct_20I().pack(_x.fAebOut.fySideFeatureDebug.request.bsdlca_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_haptic_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.ext_req, _x.fAebOut.fySideFeatureDebug.request.sdow_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_right_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.sdow_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_right_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_left_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_right_req, _x.fAebOut.fySideFeatureDebug.request.rear_rad_fault_disp))
      length = len(self.fAebOut.fySideFeatureDebug.bsd_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.fySideFeatureDebug.bsd_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3I().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.fAebOut.fySideFeatureDebug.lca_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.fySideFeatureDebug.lca_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.fySideFeatureDebug.sdow_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.reserved))
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.reserved))
      _x = self
      buff.write(_get_struct_3i().pack(_x.fAebOut.fySideFeatureDebug.num_of_ooi_bsd, _x.fAebOut.fySideFeatureDebug.num_of_ooi_lca, _x.fAebOut.fySideFeatureDebug.num_of_ooi_sdow))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.fail_inhibits))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.inactive_inhibits))
      _x = self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.reserved))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.sdow_inhibits.fail_inhibits))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.sdow_inhibits.inactive_inhibits))
      _x = self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.sdow_inhibits.reserved))
      _x = self
      buff.write(_get_struct_3I().pack(_x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.bsdlca_decision, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_right))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.bsdlca_action_decision.reserved))
      _x = self
      buff.write(_get_struct_3I().pack(_x.fAebOut.fySideFeatureDebug.sdow_action_decision.sdow_decision, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_right))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.sdow_action_decision.reserved))
      length = len(self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve))
      length = len(self.fAebOut.fySideFeatureDebug.reserved_space.sd_intReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.reserved_space.sd_intReserve))
      length = len(self.fAebOut.fySideFeatureDebug.reserved_space.sd_floatReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.fySideFeatureDebug.reserved_space.sd_floatReserve))
      _x = self
      buff.write(_get_struct_5B().pack(_x.fAebOut.rqabInnerInfo.holdReq, _x.fAebOut.rqabInnerInfo.holdEnt, _x.fAebOut.rqabInnerInfo.holdExt, _x.fAebOut.rqabInnerInfo.isDriverGearChg, _x.fAebOut.rqabInnerInfo.isDriverAccPedl))
      length = len(self.fAebOut.rqabInnerInfo.boolRqabInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.fAebOut.rqabInnerInfo.boolRqabInnerReserve))
      _x = self
      buff.write(_get_struct_15fQ().pack(_x.fAebOut.timeCostInfo.fctsApp, _x.fAebOut.timeCostInfo.carInfoMap, _x.fAebOut.timeCostInfo.objInfoMap, _x.fAebOut.timeCostInfo.aebMain, _x.fAebOut.timeCostInfo.ctrlInfoMap, _x.fAebOut.timeCostInfo.aebPublish, _x.fAebOut.timeCostInfo.ebhp, _x.fAebOut.timeCostInfo.ooif, _x.fAebOut.timeCostInfo.obhc, _x.fAebOut.timeCostInfo.otha, _x.fAebOut.timeCostInfo.cren, _x.fAebOut.timeCostInfo.acdn, _x.fAebOut.timeCostInfo.tscd, _x.fAebOut.timeCostInfo.stme, _x.fAebOut.timeCostInfo.rqab, _x.fAebOut.publish_ptp_ts))
      _x = self.fAebOut.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.fAebOut.counter, _x.fAebOut.publish_ts, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pedcross is None:
        self.pedcross = rospy_message_converter.msg.VRUCandiOut()
      if self.pedoncom is None:
        self.pedoncom = rospy_message_converter.msg.VRUCandiOut()
      if self.bikcross is None:
        self.bikcross = rospy_message_converter.msg.VRUCandiOut()
      if self.bikoncom is None:
        self.bikoncom = rospy_message_converter.msg.VRUCandiOut()
      if self.CCRScandi is None:
        self.CCRScandi = rospy_message_converter.msg.CCRCandiOut()
      if self.CCRMcandi is None:
        self.CCRMcandi = rospy_message_converter.msg.CCRCandiOut()
      if self.FTAPcandi is None:
        self.FTAPcandi = rospy_message_converter.msg.FTAPCandiOut()
      if self.PedRear is None:
        self.PedRear = rospy_message_converter.msg.VRUCandiOut()
      if self.BikRear is None:
        self.BikRear = rospy_message_converter.msg.VRUCandiOut()
      if self.HostState is None:
        self.HostState = rospy_message_converter.msg.EgoState()
      if self.Pedestrians is None:
        self.Pedestrians = None
      if self.CloseTarget is None:
        self.CloseTarget = rospy_message_converter.msg.CCRCandiOut()
      if self.DriverMonitor is None:
        self.DriverMonitor = rospy_message_converter.msg.DriverMonitorOut()
      if self.GenObjFilter is None:
        self.GenObjFilter = None
      if self.CCFOcandi is None:
        self.CCFOcandi = rospy_message_converter.msg.CCRCandiOut()
      if self.CCCcandi is None:
        self.CCCcandi = rospy_message_converter.msg.CCCCandiOut()
      if self.FusionCCRFlag is None:
        self.FusionCCRFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.FusionVRUFlag is None:
        self.FusionVRUFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.FusionVRURearFlag is None:
        self.FusionVRURearFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.AebActuFlg is None:
        self.AebActuFlg = rospy_message_converter.msg.AebActuFlgOut()
      if self.AebReserved is None:
        self.AebReserved = rospy_message_converter.msg.ReservedOut()
      if self.AEBSm is None:
        self.AEBSm = rospy_message_converter.msg.AEBSMOut()
      if self.FCWSm is None:
        self.FCWSm = rospy_message_converter.msg.AEBSMOut()
      if self.AebRearSm is None:
        self.AebRearSm = rospy_message_converter.msg.AEBRearSMOut()
      if self.FcwRearSm is None:
        self.FcwRearSm = rospy_message_converter.msg.AEBRearSMOut()
      if self.FuncSuppress is None:
        self.FuncSuppress = rospy_message_converter.msg.FuncSuppressOut()
      if self.AebDiag is None:
        self.AebDiag = rospy_message_converter.msg.AebDiagOut()
      if self.AebMode is None:
        self.AebMode = rospy_message_converter.msg.AebModeOut()
      if self.AESCCRcandi is None:
        self.AESCCRcandi = rospy_message_converter.msg.AESCCRCandiOut()
      if self.CloseAESTarget is None:
        self.CloseAESTarget = rospy_message_converter.msg.AESCCRCandiOut()
      if self.AESPathCheck is None:
        self.AESPathCheck = rospy_message_converter.msg.AESPathVerify()
      if self.AESPlanPath is None:
        self.AESPlanPath = rospy_message_converter.msg.AESPlanOut()
      if self.fAebOut is None:
        self.fAebOut = rospy_message_converter.msg.dgbAebOut()
      end = 0
      _x = self
      start = end
      end += 838
      (_x.pedcross.ID, _x.pedcross.VID, _x.pedcross.longpos, _x.pedcross.latpos, _x.pedcross.longspd, _x.pedcross.latspd, _x.pedcross.longacc, _x.pedcross.latacc, _x.pedcross.range, _x.pedcross.rangerear, _x.pedcross.rangerate, _x.pedcross.TTC, _x.pedcross.TTCrear, _x.pedcross.XOLC, _x.pedcross.latest, _x.pedcross.oncoming, _x.pedcross.preceding, _x.pedcross.crossing, _x.pedcross.stationary, _x.pedcross.AEBconf, _x.pedcross.inpath, _x.pedcross.vfcheck, _x.pedcross.lfcheck, _x.pedcross.age, _x.pedcross.agecheck, _x.pedcross.inpathage, _x.pedcross.inpathcheck, _x.pedcross.TOI, _x.pedcross.TOIrear, _x.pedcross.warn, _x.pedcross.prefill, _x.pedcross.lowbrake, _x.pedcross.highbrake, _x.pedcross.isvision, _x.pedcross.isfusion, _x.pedcross.isradar, _x.pedcross.timetoturn, _x.pedcross.timetobrake, _x.pedcross.steerflag, _x.pedcross.ref_pos.ref_character, _x.pedcross.ref_pos.pos_x, _x.pedcross.ref_pos.pos_y, _x.pedcross.ref_pos.range, _x.pedcross.ref_pos.heading, _x.pedcross.xpos_cir, _x.pedcross.ypos_cir, _x.pedcross.roc_tar, _x.pedcross.mindist, _x.pedcross.xpos_col, _x.pedcross.ypos_col, _x.pedcross.range_col, _x.pedcross.range_col_tar, _x.pedcross.yawrate, _x.pedcross.heading, _x.pedcross.colposs, _x.pedcross.col_num, _x.pedcross.TTC_cir, _x.pedcross.TTL_cir, _x.pedcross.TTC_tar, _x.pedcross.TTL_tar, _x.pedoncom.ID, _x.pedoncom.VID, _x.pedoncom.longpos, _x.pedoncom.latpos, _x.pedoncom.longspd, _x.pedoncom.latspd, _x.pedoncom.longacc, _x.pedoncom.latacc, _x.pedoncom.range, _x.pedoncom.rangerear, _x.pedoncom.rangerate, _x.pedoncom.TTC, _x.pedoncom.TTCrear, _x.pedoncom.XOLC, _x.pedoncom.latest, _x.pedoncom.oncoming, _x.pedoncom.preceding, _x.pedoncom.crossing, _x.pedoncom.stationary, _x.pedoncom.AEBconf, _x.pedoncom.inpath, _x.pedoncom.vfcheck, _x.pedoncom.lfcheck, _x.pedoncom.age, _x.pedoncom.agecheck, _x.pedoncom.inpathage, _x.pedoncom.inpathcheck, _x.pedoncom.TOI, _x.pedoncom.TOIrear, _x.pedoncom.warn, _x.pedoncom.prefill, _x.pedoncom.lowbrake, _x.pedoncom.highbrake, _x.pedoncom.isvision, _x.pedoncom.isfusion, _x.pedoncom.isradar, _x.pedoncom.timetoturn, _x.pedoncom.timetobrake, _x.pedoncom.steerflag, _x.pedoncom.ref_pos.ref_character, _x.pedoncom.ref_pos.pos_x, _x.pedoncom.ref_pos.pos_y, _x.pedoncom.ref_pos.range, _x.pedoncom.ref_pos.heading, _x.pedoncom.xpos_cir, _x.pedoncom.ypos_cir, _x.pedoncom.roc_tar, _x.pedoncom.mindist, _x.pedoncom.xpos_col, _x.pedoncom.ypos_col, _x.pedoncom.range_col, _x.pedoncom.range_col_tar, _x.pedoncom.yawrate, _x.pedoncom.heading, _x.pedoncom.colposs, _x.pedoncom.col_num, _x.pedoncom.TTC_cir, _x.pedoncom.TTL_cir, _x.pedoncom.TTC_tar, _x.pedoncom.TTL_tar, _x.bikcross.ID, _x.bikcross.VID, _x.bikcross.longpos, _x.bikcross.latpos, _x.bikcross.longspd, _x.bikcross.latspd, _x.bikcross.longacc, _x.bikcross.latacc, _x.bikcross.range, _x.bikcross.rangerear, _x.bikcross.rangerate, _x.bikcross.TTC, _x.bikcross.TTCrear, _x.bikcross.XOLC, _x.bikcross.latest, _x.bikcross.oncoming, _x.bikcross.preceding, _x.bikcross.crossing, _x.bikcross.stationary, _x.bikcross.AEBconf, _x.bikcross.inpath, _x.bikcross.vfcheck, _x.bikcross.lfcheck, _x.bikcross.age, _x.bikcross.agecheck, _x.bikcross.inpathage, _x.bikcross.inpathcheck, _x.bikcross.TOI, _x.bikcross.TOIrear, _x.bikcross.warn, _x.bikcross.prefill, _x.bikcross.lowbrake, _x.bikcross.highbrake, _x.bikcross.isvision, _x.bikcross.isfusion, _x.bikcross.isradar, _x.bikcross.timetoturn, _x.bikcross.timetobrake, _x.bikcross.steerflag, _x.bikcross.ref_pos.ref_character, _x.bikcross.ref_pos.pos_x, _x.bikcross.ref_pos.pos_y, _x.bikcross.ref_pos.range, _x.bikcross.ref_pos.heading, _x.bikcross.xpos_cir, _x.bikcross.ypos_cir, _x.bikcross.roc_tar, _x.bikcross.mindist, _x.bikcross.xpos_col, _x.bikcross.ypos_col, _x.bikcross.range_col, _x.bikcross.range_col_tar, _x.bikcross.yawrate, _x.bikcross.heading, _x.bikcross.colposs, _x.bikcross.col_num, _x.bikcross.TTC_cir, _x.bikcross.TTL_cir, _x.bikcross.TTC_tar, _x.bikcross.TTL_tar, _x.bikoncom.ID, _x.bikoncom.VID, _x.bikoncom.longpos, _x.bikoncom.latpos, _x.bikoncom.longspd, _x.bikoncom.latspd, _x.bikoncom.longacc, _x.bikoncom.latacc, _x.bikoncom.range, _x.bikoncom.rangerear, _x.bikoncom.rangerate, _x.bikoncom.TTC, _x.bikoncom.TTCrear, _x.bikoncom.XOLC, _x.bikoncom.latest, _x.bikoncom.oncoming, _x.bikoncom.preceding, _x.bikoncom.crossing, _x.bikoncom.stationary, _x.bikoncom.AEBconf, _x.bikoncom.inpath, _x.bikoncom.vfcheck, _x.bikoncom.lfcheck, _x.bikoncom.age, _x.bikoncom.agecheck, _x.bikoncom.inpathage, _x.bikoncom.inpathcheck, _x.bikoncom.TOI, _x.bikoncom.TOIrear, _x.bikoncom.warn, _x.bikoncom.prefill, _x.bikoncom.lowbrake, _x.bikoncom.highbrake, _x.bikoncom.isvision, _x.bikoncom.isfusion, _x.bikoncom.isradar, _x.bikoncom.timetoturn, _x.bikoncom.timetobrake, _x.bikoncom.steerflag, _x.bikoncom.ref_pos.ref_character, _x.bikoncom.ref_pos.pos_x, _x.bikoncom.ref_pos.pos_y, _x.bikoncom.ref_pos.range, _x.bikoncom.ref_pos.heading, _x.bikoncom.xpos_cir, _x.bikoncom.ypos_cir, _x.bikoncom.roc_tar, _x.bikoncom.mindist, _x.bikoncom.xpos_col, _x.bikoncom.ypos_col, _x.bikoncom.range_col, _x.bikoncom.range_col_tar, _x.bikoncom.yawrate, _x.bikoncom.heading, _x.bikoncom.colposs, _x.bikoncom.col_num, _x.bikoncom.TTC_cir, _x.bikoncom.TTL_cir, _x.bikoncom.TTC_tar, _x.bikoncom.TTL_tar, _x.CCRScandi.ID, _x.CCRScandi.VID, _x.CCRScandi.longpos, _x.CCRScandi.latpos, _x.CCRScandi.longspd, _x.CCRScandi.latspd, _x.CCRScandi.longacc, _x.CCRScandi.latacc, _x.CCRScandi.range, _x.CCRScandi.rangerate, _x.CCRScandi.TTC, _x.CCRScandi.XOLC, _x.CCRScandi.movestate, _x.CCRScandi.moveout, _x.CCRScandi.inpath_before,) = _get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B().unpack(str[start:end])
      self.pedcross.oncoming = bool(self.pedcross.oncoming)
      self.pedcross.preceding = bool(self.pedcross.preceding)
      self.pedcross.crossing = bool(self.pedcross.crossing)
      self.pedcross.stationary = bool(self.pedcross.stationary)
      self.pedcross.inpath = bool(self.pedcross.inpath)
      self.pedcross.vfcheck = bool(self.pedcross.vfcheck)
      self.pedcross.lfcheck = bool(self.pedcross.lfcheck)
      self.pedcross.agecheck = bool(self.pedcross.agecheck)
      self.pedcross.inpathcheck = bool(self.pedcross.inpathcheck)
      self.pedcross.TOI = bool(self.pedcross.TOI)
      self.pedcross.TOIrear = bool(self.pedcross.TOIrear)
      self.pedcross.warn = bool(self.pedcross.warn)
      self.pedcross.prefill = bool(self.pedcross.prefill)
      self.pedcross.lowbrake = bool(self.pedcross.lowbrake)
      self.pedcross.highbrake = bool(self.pedcross.highbrake)
      self.pedcross.isvision = bool(self.pedcross.isvision)
      self.pedcross.isfusion = bool(self.pedcross.isfusion)
      self.pedcross.isradar = bool(self.pedcross.isradar)
      self.pedcross.steerflag = bool(self.pedcross.steerflag)
      self.pedcross.colposs = bool(self.pedcross.colposs)
      self.pedoncom.oncoming = bool(self.pedoncom.oncoming)
      self.pedoncom.preceding = bool(self.pedoncom.preceding)
      self.pedoncom.crossing = bool(self.pedoncom.crossing)
      self.pedoncom.stationary = bool(self.pedoncom.stationary)
      self.pedoncom.inpath = bool(self.pedoncom.inpath)
      self.pedoncom.vfcheck = bool(self.pedoncom.vfcheck)
      self.pedoncom.lfcheck = bool(self.pedoncom.lfcheck)
      self.pedoncom.agecheck = bool(self.pedoncom.agecheck)
      self.pedoncom.inpathcheck = bool(self.pedoncom.inpathcheck)
      self.pedoncom.TOI = bool(self.pedoncom.TOI)
      self.pedoncom.TOIrear = bool(self.pedoncom.TOIrear)
      self.pedoncom.warn = bool(self.pedoncom.warn)
      self.pedoncom.prefill = bool(self.pedoncom.prefill)
      self.pedoncom.lowbrake = bool(self.pedoncom.lowbrake)
      self.pedoncom.highbrake = bool(self.pedoncom.highbrake)
      self.pedoncom.isvision = bool(self.pedoncom.isvision)
      self.pedoncom.isfusion = bool(self.pedoncom.isfusion)
      self.pedoncom.isradar = bool(self.pedoncom.isradar)
      self.pedoncom.steerflag = bool(self.pedoncom.steerflag)
      self.pedoncom.colposs = bool(self.pedoncom.colposs)
      self.bikcross.oncoming = bool(self.bikcross.oncoming)
      self.bikcross.preceding = bool(self.bikcross.preceding)
      self.bikcross.crossing = bool(self.bikcross.crossing)
      self.bikcross.stationary = bool(self.bikcross.stationary)
      self.bikcross.inpath = bool(self.bikcross.inpath)
      self.bikcross.vfcheck = bool(self.bikcross.vfcheck)
      self.bikcross.lfcheck = bool(self.bikcross.lfcheck)
      self.bikcross.agecheck = bool(self.bikcross.agecheck)
      self.bikcross.inpathcheck = bool(self.bikcross.inpathcheck)
      self.bikcross.TOI = bool(self.bikcross.TOI)
      self.bikcross.TOIrear = bool(self.bikcross.TOIrear)
      self.bikcross.warn = bool(self.bikcross.warn)
      self.bikcross.prefill = bool(self.bikcross.prefill)
      self.bikcross.lowbrake = bool(self.bikcross.lowbrake)
      self.bikcross.highbrake = bool(self.bikcross.highbrake)
      self.bikcross.isvision = bool(self.bikcross.isvision)
      self.bikcross.isfusion = bool(self.bikcross.isfusion)
      self.bikcross.isradar = bool(self.bikcross.isradar)
      self.bikcross.steerflag = bool(self.bikcross.steerflag)
      self.bikcross.colposs = bool(self.bikcross.colposs)
      self.bikoncom.oncoming = bool(self.bikoncom.oncoming)
      self.bikoncom.preceding = bool(self.bikoncom.preceding)
      self.bikoncom.crossing = bool(self.bikoncom.crossing)
      self.bikoncom.stationary = bool(self.bikoncom.stationary)
      self.bikoncom.inpath = bool(self.bikoncom.inpath)
      self.bikoncom.vfcheck = bool(self.bikoncom.vfcheck)
      self.bikoncom.lfcheck = bool(self.bikoncom.lfcheck)
      self.bikoncom.agecheck = bool(self.bikoncom.agecheck)
      self.bikoncom.inpathcheck = bool(self.bikoncom.inpathcheck)
      self.bikoncom.TOI = bool(self.bikoncom.TOI)
      self.bikoncom.TOIrear = bool(self.bikoncom.TOIrear)
      self.bikoncom.warn = bool(self.bikoncom.warn)
      self.bikoncom.prefill = bool(self.bikoncom.prefill)
      self.bikoncom.lowbrake = bool(self.bikoncom.lowbrake)
      self.bikoncom.highbrake = bool(self.bikoncom.highbrake)
      self.bikoncom.isvision = bool(self.bikoncom.isvision)
      self.bikoncom.isfusion = bool(self.bikoncom.isfusion)
      self.bikoncom.isradar = bool(self.bikoncom.isradar)
      self.bikoncom.steerflag = bool(self.bikoncom.steerflag)
      self.bikoncom.colposs = bool(self.bikoncom.colposs)
      self.CCRScandi.moveout = bool(self.CCRScandi.moveout)
      self.CCRScandi.inpath_before = bool(self.CCRScandi.inpath_before)
      _x = self
      start = end
      end += 816
      (_x.CCRScandi.inpath_after, _x.CCRScandi.AEBconf, _x.CCRScandi.inpath, _x.CCRScandi.vfcheck, _x.CCRScandi.lfcheck, _x.CCRScandi.age, _x.CCRScandi.agecheck, _x.CCRScandi.inpathage, _x.CCRScandi.inpathcheck, _x.CCRScandi.TOI, _x.CCRScandi.warn, _x.CCRScandi.prefill, _x.CCRScandi.lowbrake, _x.CCRScandi.highbrake, _x.CCRScandi.isvision, _x.CCRScandi.isfusion, _x.CCRScandi.isradar, _x.CCRScandi.timetoturn, _x.CCRScandi.timetobrake, _x.CCRScandi.steerflag, _x.CCRScandi.ref_pos.ref_character, _x.CCRScandi.ref_pos.pos_x, _x.CCRScandi.ref_pos.pos_y, _x.CCRScandi.ref_pos.range, _x.CCRScandi.ref_pos.heading, _x.CCRScandi.iba_flag, _x.CCRScandi.hitdist, _x.CCRScandi.yawdist, _x.CCRScandi.driverovertake, _x.CCRScandi.driverovertake_warn, _x.CCRScandi.movingleftcount, _x.CCRScandi.movingrightcount, _x.CCRMcandi.ID, _x.CCRMcandi.VID, _x.CCRMcandi.longpos, _x.CCRMcandi.latpos, _x.CCRMcandi.longspd, _x.CCRMcandi.latspd, _x.CCRMcandi.longacc, _x.CCRMcandi.latacc, _x.CCRMcandi.range, _x.CCRMcandi.rangerate, _x.CCRMcandi.TTC, _x.CCRMcandi.XOLC, _x.CCRMcandi.movestate, _x.CCRMcandi.moveout, _x.CCRMcandi.inpath_before, _x.CCRMcandi.inpath_after, _x.CCRMcandi.AEBconf, _x.CCRMcandi.inpath, _x.CCRMcandi.vfcheck, _x.CCRMcandi.lfcheck, _x.CCRMcandi.age, _x.CCRMcandi.agecheck, _x.CCRMcandi.inpathage, _x.CCRMcandi.inpathcheck, _x.CCRMcandi.TOI, _x.CCRMcandi.warn, _x.CCRMcandi.prefill, _x.CCRMcandi.lowbrake, _x.CCRMcandi.highbrake, _x.CCRMcandi.isvision, _x.CCRMcandi.isfusion, _x.CCRMcandi.isradar, _x.CCRMcandi.timetoturn, _x.CCRMcandi.timetobrake, _x.CCRMcandi.steerflag, _x.CCRMcandi.ref_pos.ref_character, _x.CCRMcandi.ref_pos.pos_x, _x.CCRMcandi.ref_pos.pos_y, _x.CCRMcandi.ref_pos.range, _x.CCRMcandi.ref_pos.heading, _x.CCRMcandi.iba_flag, _x.CCRMcandi.hitdist, _x.CCRMcandi.yawdist, _x.CCRMcandi.driverovertake, _x.CCRMcandi.driverovertake_warn, _x.CCRMcandi.movingleftcount, _x.CCRMcandi.movingrightcount, _x.FTAPcandi.ID, _x.FTAPcandi.VID, _x.FTAPcandi.longpos, _x.FTAPcandi.latpos, _x.FTAPcandi.longspd, _x.FTAPcandi.latspd, _x.FTAPcandi.longacc, _x.FTAPcandi.latacc, _x.FTAPcandi.range, _x.FTAPcandi.rangerate, _x.FTAPcandi.TTC, _x.FTAPcandi.TTL, _x.FTAPcandi.colnum, _x.FTAPcandi.colx, _x.FTAPcandi.coly, _x.FTAPcandi.colr, _x.FTAPcandi.heading, _x.FTAPcandi.currange, _x.FTAPcandi.estrange, _x.FTAPcandi.TTC_tar, _x.FTAPcandi.TTL_tar, _x.FTAPcandi.TOI_before, _x.FTAPcandi.TOI_after, _x.FTAPcandi.inpathcur, _x.FTAPcandi.inpathpre, _x.FTAPcandi.inpathcur_warn, _x.FTAPcandi.inpathpre_warn, _x.FTAPcandi.inpath, _x.FTAPcandi.inpath_tar, _x.FTAPcandi.inpath_warn, _x.FTAPcandi.inpathage, _x.FTAPcandi.inpathage_warn, _x.FTAPcandi.inpathagecheck, _x.FTAPcandi.inpathagecheck_warn, _x.FTAPcandi.AEBconf, _x.FTAPcandi.oncoming, _x.FTAPcandi.movingstate, _x.FTAPcandi.turnangle, _x.FTAPcandi.warn, _x.FTAPcandi.prefill, _x.FTAPcandi.lowbrake, _x.FTAPcandi.highbrake, _x.FTAPcandi.isvision, _x.FTAPcandi.isfusion, _x.FTAPcandi.isradar, _x.FTAPcandi.timetoturn, _x.FTAPcandi.timetobrake, _x.FTAPcandi.steerflag, _x.FTAPcandi.ref_pos.ref_character, _x.FTAPcandi.ref_pos.pos_x, _x.FTAPcandi.ref_pos.pos_y, _x.FTAPcandi.ref_pos.range, _x.FTAPcandi.ref_pos.heading, _x.FTAPcandi.iba_flag, _x.PedRear.ID, _x.PedRear.VID, _x.PedRear.longpos, _x.PedRear.latpos, _x.PedRear.longspd, _x.PedRear.latspd, _x.PedRear.longacc, _x.PedRear.latacc, _x.PedRear.range, _x.PedRear.rangerear, _x.PedRear.rangerate, _x.PedRear.TTC, _x.PedRear.TTCrear, _x.PedRear.XOLC, _x.PedRear.latest, _x.PedRear.oncoming, _x.PedRear.preceding, _x.PedRear.crossing, _x.PedRear.stationary, _x.PedRear.AEBconf, _x.PedRear.inpath, _x.PedRear.vfcheck, _x.PedRear.lfcheck, _x.PedRear.age, _x.PedRear.agecheck, _x.PedRear.inpathage, _x.PedRear.inpathcheck, _x.PedRear.TOI, _x.PedRear.TOIrear, _x.PedRear.warn, _x.PedRear.prefill, _x.PedRear.lowbrake, _x.PedRear.highbrake, _x.PedRear.isvision, _x.PedRear.isfusion, _x.PedRear.isradar, _x.PedRear.timetoturn, _x.PedRear.timetobrake, _x.PedRear.steerflag, _x.PedRear.ref_pos.ref_character, _x.PedRear.ref_pos.pos_x, _x.PedRear.ref_pos.pos_y, _x.PedRear.ref_pos.range, _x.PedRear.ref_pos.heading, _x.PedRear.xpos_cir, _x.PedRear.ypos_cir, _x.PedRear.roc_tar, _x.PedRear.mindist, _x.PedRear.xpos_col, _x.PedRear.ypos_col, _x.PedRear.range_col, _x.PedRear.range_col_tar, _x.PedRear.yawrate, _x.PedRear.heading, _x.PedRear.colposs, _x.PedRear.col_num, _x.PedRear.TTC_cir, _x.PedRear.TTL_cir, _x.PedRear.TTC_tar, _x.PedRear.TTL_tar, _x.BikRear.ID, _x.BikRear.VID, _x.BikRear.longpos, _x.BikRear.latpos, _x.BikRear.longspd, _x.BikRear.latspd, _x.BikRear.longacc, _x.BikRear.latacc, _x.BikRear.range, _x.BikRear.rangerear, _x.BikRear.rangerate, _x.BikRear.TTC, _x.BikRear.TTCrear, _x.BikRear.XOLC, _x.BikRear.latest, _x.BikRear.oncoming, _x.BikRear.preceding, _x.BikRear.crossing, _x.BikRear.stationary, _x.BikRear.AEBconf, _x.BikRear.inpath, _x.BikRear.vfcheck, _x.BikRear.lfcheck, _x.BikRear.age, _x.BikRear.agecheck, _x.BikRear.inpathage, _x.BikRear.inpathcheck, _x.BikRear.TOI, _x.BikRear.TOIrear, _x.BikRear.warn, _x.BikRear.prefill, _x.BikRear.lowbrake, _x.BikRear.highbrake, _x.BikRear.isvision, _x.BikRear.isfusion, _x.BikRear.isradar, _x.BikRear.timetoturn, _x.BikRear.timetobrake, _x.BikRear.steerflag, _x.BikRear.ref_pos.ref_character, _x.BikRear.ref_pos.pos_x, _x.BikRear.ref_pos.pos_y, _x.BikRear.ref_pos.range, _x.BikRear.ref_pos.heading, _x.BikRear.xpos_cir, _x.BikRear.ypos_cir, _x.BikRear.roc_tar, _x.BikRear.mindist, _x.BikRear.xpos_col, _x.BikRear.ypos_col, _x.BikRear.range_col, _x.BikRear.range_col_tar, _x.BikRear.yawrate, _x.BikRear.heading, _x.BikRear.colposs, _x.BikRear.col_num, _x.BikRear.TTC_cir, _x.BikRear.TTL_cir, _x.BikRear.TTC_tar, _x.BikRear.TTL_tar, _x.HostState.vehspd, _x.HostState.yawrate,) = _get_struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f().unpack(str[start:end])
      self.CCRScandi.inpath_after = bool(self.CCRScandi.inpath_after)
      self.CCRScandi.inpath = bool(self.CCRScandi.inpath)
      self.CCRScandi.vfcheck = bool(self.CCRScandi.vfcheck)
      self.CCRScandi.lfcheck = bool(self.CCRScandi.lfcheck)
      self.CCRScandi.agecheck = bool(self.CCRScandi.agecheck)
      self.CCRScandi.inpathcheck = bool(self.CCRScandi.inpathcheck)
      self.CCRScandi.TOI = bool(self.CCRScandi.TOI)
      self.CCRScandi.warn = bool(self.CCRScandi.warn)
      self.CCRScandi.prefill = bool(self.CCRScandi.prefill)
      self.CCRScandi.lowbrake = bool(self.CCRScandi.lowbrake)
      self.CCRScandi.highbrake = bool(self.CCRScandi.highbrake)
      self.CCRScandi.isvision = bool(self.CCRScandi.isvision)
      self.CCRScandi.isfusion = bool(self.CCRScandi.isfusion)
      self.CCRScandi.isradar = bool(self.CCRScandi.isradar)
      self.CCRScandi.steerflag = bool(self.CCRScandi.steerflag)
      self.CCRScandi.iba_flag = bool(self.CCRScandi.iba_flag)
      self.CCRScandi.driverovertake = bool(self.CCRScandi.driverovertake)
      self.CCRScandi.driverovertake_warn = bool(self.CCRScandi.driverovertake_warn)
      self.CCRMcandi.moveout = bool(self.CCRMcandi.moveout)
      self.CCRMcandi.inpath_before = bool(self.CCRMcandi.inpath_before)
      self.CCRMcandi.inpath_after = bool(self.CCRMcandi.inpath_after)
      self.CCRMcandi.inpath = bool(self.CCRMcandi.inpath)
      self.CCRMcandi.vfcheck = bool(self.CCRMcandi.vfcheck)
      self.CCRMcandi.lfcheck = bool(self.CCRMcandi.lfcheck)
      self.CCRMcandi.agecheck = bool(self.CCRMcandi.agecheck)
      self.CCRMcandi.inpathcheck = bool(self.CCRMcandi.inpathcheck)
      self.CCRMcandi.TOI = bool(self.CCRMcandi.TOI)
      self.CCRMcandi.warn = bool(self.CCRMcandi.warn)
      self.CCRMcandi.prefill = bool(self.CCRMcandi.prefill)
      self.CCRMcandi.lowbrake = bool(self.CCRMcandi.lowbrake)
      self.CCRMcandi.highbrake = bool(self.CCRMcandi.highbrake)
      self.CCRMcandi.isvision = bool(self.CCRMcandi.isvision)
      self.CCRMcandi.isfusion = bool(self.CCRMcandi.isfusion)
      self.CCRMcandi.isradar = bool(self.CCRMcandi.isradar)
      self.CCRMcandi.steerflag = bool(self.CCRMcandi.steerflag)
      self.CCRMcandi.iba_flag = bool(self.CCRMcandi.iba_flag)
      self.CCRMcandi.driverovertake = bool(self.CCRMcandi.driverovertake)
      self.CCRMcandi.driverovertake_warn = bool(self.CCRMcandi.driverovertake_warn)
      self.FTAPcandi.inpathcur = bool(self.FTAPcandi.inpathcur)
      self.FTAPcandi.inpathpre = bool(self.FTAPcandi.inpathpre)
      self.FTAPcandi.inpathcur_warn = bool(self.FTAPcandi.inpathcur_warn)
      self.FTAPcandi.inpathpre_warn = bool(self.FTAPcandi.inpathpre_warn)
      self.FTAPcandi.inpath = bool(self.FTAPcandi.inpath)
      self.FTAPcandi.inpath_tar = bool(self.FTAPcandi.inpath_tar)
      self.FTAPcandi.inpath_warn = bool(self.FTAPcandi.inpath_warn)
      self.FTAPcandi.inpathagecheck = bool(self.FTAPcandi.inpathagecheck)
      self.FTAPcandi.inpathagecheck_warn = bool(self.FTAPcandi.inpathagecheck_warn)
      self.FTAPcandi.oncoming = bool(self.FTAPcandi.oncoming)
      self.FTAPcandi.warn = bool(self.FTAPcandi.warn)
      self.FTAPcandi.prefill = bool(self.FTAPcandi.prefill)
      self.FTAPcandi.lowbrake = bool(self.FTAPcandi.lowbrake)
      self.FTAPcandi.highbrake = bool(self.FTAPcandi.highbrake)
      self.FTAPcandi.isvision = bool(self.FTAPcandi.isvision)
      self.FTAPcandi.isfusion = bool(self.FTAPcandi.isfusion)
      self.FTAPcandi.isradar = bool(self.FTAPcandi.isradar)
      self.FTAPcandi.steerflag = bool(self.FTAPcandi.steerflag)
      self.PedRear.oncoming = bool(self.PedRear.oncoming)
      self.PedRear.preceding = bool(self.PedRear.preceding)
      self.PedRear.crossing = bool(self.PedRear.crossing)
      self.PedRear.stationary = bool(self.PedRear.stationary)
      self.PedRear.inpath = bool(self.PedRear.inpath)
      self.PedRear.vfcheck = bool(self.PedRear.vfcheck)
      self.PedRear.lfcheck = bool(self.PedRear.lfcheck)
      self.PedRear.agecheck = bool(self.PedRear.agecheck)
      self.PedRear.inpathcheck = bool(self.PedRear.inpathcheck)
      self.PedRear.TOI = bool(self.PedRear.TOI)
      self.PedRear.TOIrear = bool(self.PedRear.TOIrear)
      self.PedRear.warn = bool(self.PedRear.warn)
      self.PedRear.prefill = bool(self.PedRear.prefill)
      self.PedRear.lowbrake = bool(self.PedRear.lowbrake)
      self.PedRear.highbrake = bool(self.PedRear.highbrake)
      self.PedRear.isvision = bool(self.PedRear.isvision)
      self.PedRear.isfusion = bool(self.PedRear.isfusion)
      self.PedRear.isradar = bool(self.PedRear.isradar)
      self.PedRear.steerflag = bool(self.PedRear.steerflag)
      self.PedRear.colposs = bool(self.PedRear.colposs)
      self.BikRear.oncoming = bool(self.BikRear.oncoming)
      self.BikRear.preceding = bool(self.BikRear.preceding)
      self.BikRear.crossing = bool(self.BikRear.crossing)
      self.BikRear.stationary = bool(self.BikRear.stationary)
      self.BikRear.inpath = bool(self.BikRear.inpath)
      self.BikRear.vfcheck = bool(self.BikRear.vfcheck)
      self.BikRear.lfcheck = bool(self.BikRear.lfcheck)
      self.BikRear.agecheck = bool(self.BikRear.agecheck)
      self.BikRear.inpathcheck = bool(self.BikRear.inpathcheck)
      self.BikRear.TOI = bool(self.BikRear.TOI)
      self.BikRear.TOIrear = bool(self.BikRear.TOIrear)
      self.BikRear.warn = bool(self.BikRear.warn)
      self.BikRear.prefill = bool(self.BikRear.prefill)
      self.BikRear.lowbrake = bool(self.BikRear.lowbrake)
      self.BikRear.highbrake = bool(self.BikRear.highbrake)
      self.BikRear.isvision = bool(self.BikRear.isvision)
      self.BikRear.isfusion = bool(self.BikRear.isfusion)
      self.BikRear.isradar = bool(self.BikRear.isradar)
      self.BikRear.steerflag = bool(self.BikRear.steerflag)
      self.BikRear.colposs = bool(self.BikRear.colposs)
      _x = self
      start = end
      end += 43
      (_x.HostState.steerangle, _x.HostState.hostreverse, _x.HostState.brakepos, _x.HostState.brakeposrate, _x.HostState.driverpressed, _x.HostState.maincypress, _x.HostState.maincyprsrate, _x.HostState.driverintention, _x.HostState.driverEBA, _x.HostState.ROC, _x.HostState.steerrate, _x.HostState.accpos, _x.HostState.accposrate,) = _get_struct_fB2fI2f2B4f().unpack(str[start:end])
      self.HostState.hostreverse = bool(self.HostState.hostreverse)
      self.HostState.driverintention = bool(self.HostState.driverintention)
      self.HostState.driverEBA = bool(self.HostState.driverEBA)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Pedestrians = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VRUCandiOut()
        _x = val1
        start = end
        end += 99
        (_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag,) = _get_struct_2I13f4BI3BIBI10B2fB().unpack(str[start:end])
        val1.oncoming = bool(val1.oncoming)
        val1.preceding = bool(val1.preceding)
        val1.crossing = bool(val1.crossing)
        val1.stationary = bool(val1.stationary)
        val1.inpath = bool(val1.inpath)
        val1.vfcheck = bool(val1.vfcheck)
        val1.lfcheck = bool(val1.lfcheck)
        val1.agecheck = bool(val1.agecheck)
        val1.inpathcheck = bool(val1.inpathcheck)
        val1.TOI = bool(val1.TOI)
        val1.TOIrear = bool(val1.TOIrear)
        val1.warn = bool(val1.warn)
        val1.prefill = bool(val1.prefill)
        val1.lowbrake = bool(val1.lowbrake)
        val1.highbrake = bool(val1.highbrake)
        val1.isvision = bool(val1.isvision)
        val1.isfusion = bool(val1.isfusion)
        val1.isradar = bool(val1.isradar)
        val1.steerflag = bool(val1.steerflag)
        _v24 = val1.ref_pos
        _x = _v24
        start = end
        end += 36
        (_x.ref_character, _x.pos_x, _x.pos_y, _x.range, _x.heading,) = _get_struct_I4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 61
        (_x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar,) = _get_struct_10fBI4f().unpack(str[start:end])
        val1.colposs = bool(val1.colposs)
        self.Pedestrians.append(val1)
      _x = self
      start = end
      end += 205
      (_x.CloseTarget.ID, _x.CloseTarget.VID, _x.CloseTarget.longpos, _x.CloseTarget.latpos, _x.CloseTarget.longspd, _x.CloseTarget.latspd, _x.CloseTarget.longacc, _x.CloseTarget.latacc, _x.CloseTarget.range, _x.CloseTarget.rangerate, _x.CloseTarget.TTC, _x.CloseTarget.XOLC, _x.CloseTarget.movestate, _x.CloseTarget.moveout, _x.CloseTarget.inpath_before, _x.CloseTarget.inpath_after, _x.CloseTarget.AEBconf, _x.CloseTarget.inpath, _x.CloseTarget.vfcheck, _x.CloseTarget.lfcheck, _x.CloseTarget.age, _x.CloseTarget.agecheck, _x.CloseTarget.inpathage, _x.CloseTarget.inpathcheck, _x.CloseTarget.TOI, _x.CloseTarget.warn, _x.CloseTarget.prefill, _x.CloseTarget.lowbrake, _x.CloseTarget.highbrake, _x.CloseTarget.isvision, _x.CloseTarget.isfusion, _x.CloseTarget.isradar, _x.CloseTarget.timetoturn, _x.CloseTarget.timetobrake, _x.CloseTarget.steerflag, _x.CloseTarget.ref_pos.ref_character, _x.CloseTarget.ref_pos.pos_x, _x.CloseTarget.ref_pos.pos_y, _x.CloseTarget.ref_pos.range, _x.CloseTarget.ref_pos.heading, _x.CloseTarget.iba_flag, _x.CloseTarget.hitdist, _x.CloseTarget.yawdist, _x.CloseTarget.driverovertake, _x.CloseTarget.driverovertake_warn, _x.CloseTarget.movingleftcount, _x.CloseTarget.movingrightcount, _x.DriverMonitor.gaspedpos, _x.DriverMonitor.gaspedgrad, _x.DriverMonitor.driverbrake, _x.DriverMonitor.brkpedpos, _x.DriverMonitor.steerwhlang, _x.DriverMonitor.steerwhlgrad, _x.DriverMonitor.egospd, _x.DriverMonitor.egoaccel, _x.DriverMonitor.egoyawrate, _x.DriverMonitor.turnlighton, _x.DriverMonitor.egogear, _x.DriverMonitor.feedbackstate, _x.DriverMonitor.activitystate, _x.DriverMonitor.focusstate, _x.DriverMonitor.suppressbit, _x.DriverMonitor.abortbit,) = _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I().unpack(str[start:end])
      self.CloseTarget.moveout = bool(self.CloseTarget.moveout)
      self.CloseTarget.inpath_before = bool(self.CloseTarget.inpath_before)
      self.CloseTarget.inpath_after = bool(self.CloseTarget.inpath_after)
      self.CloseTarget.inpath = bool(self.CloseTarget.inpath)
      self.CloseTarget.vfcheck = bool(self.CloseTarget.vfcheck)
      self.CloseTarget.lfcheck = bool(self.CloseTarget.lfcheck)
      self.CloseTarget.agecheck = bool(self.CloseTarget.agecheck)
      self.CloseTarget.inpathcheck = bool(self.CloseTarget.inpathcheck)
      self.CloseTarget.TOI = bool(self.CloseTarget.TOI)
      self.CloseTarget.warn = bool(self.CloseTarget.warn)
      self.CloseTarget.prefill = bool(self.CloseTarget.prefill)
      self.CloseTarget.lowbrake = bool(self.CloseTarget.lowbrake)
      self.CloseTarget.highbrake = bool(self.CloseTarget.highbrake)
      self.CloseTarget.isvision = bool(self.CloseTarget.isvision)
      self.CloseTarget.isfusion = bool(self.CloseTarget.isfusion)
      self.CloseTarget.isradar = bool(self.CloseTarget.isradar)
      self.CloseTarget.steerflag = bool(self.CloseTarget.steerflag)
      self.CloseTarget.iba_flag = bool(self.CloseTarget.iba_flag)
      self.CloseTarget.driverovertake = bool(self.CloseTarget.driverovertake)
      self.CloseTarget.driverovertake_warn = bool(self.CloseTarget.driverovertake_warn)
      self.DriverMonitor.driverbrake = bool(self.DriverMonitor.driverbrake)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DriverMonitor.dampfactor = s.unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.DriverMonitor.vel_std_dev, _x.DriverMonitor.sdytimer, _x.DriverMonitor.ramptimer, _x.DriverMonitor.dampsuppress,) = _get_struct_3fB().unpack(str[start:end])
      self.DriverMonitor.dampsuppress = bool(self.DriverMonitor.dampsuppress)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.GenObjFilter = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.GOFOut()
        _x = val1
        start = end
        end += 10
        (_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck,) = _get_struct_I6B().unpack(str[start:end])
        val1.checkvalid = bool(val1.checkvalid)
        val1.classcheck = bool(val1.classcheck)
        val1.fustcheck = bool(val1.fustcheck)
        val1.agecheck = bool(val1.agecheck)
        val1.predcheck = bool(val1.predcheck)
        val1.frespacheck = bool(val1.frespacheck)
        self.GenObjFilter.append(val1)
      _x = self
      start = end
      end += 1263
      (_x.CCFOcandi.ID, _x.CCFOcandi.VID, _x.CCFOcandi.longpos, _x.CCFOcandi.latpos, _x.CCFOcandi.longspd, _x.CCFOcandi.latspd, _x.CCFOcandi.longacc, _x.CCFOcandi.latacc, _x.CCFOcandi.range, _x.CCFOcandi.rangerate, _x.CCFOcandi.TTC, _x.CCFOcandi.XOLC, _x.CCFOcandi.movestate, _x.CCFOcandi.moveout, _x.CCFOcandi.inpath_before, _x.CCFOcandi.inpath_after, _x.CCFOcandi.AEBconf, _x.CCFOcandi.inpath, _x.CCFOcandi.vfcheck, _x.CCFOcandi.lfcheck, _x.CCFOcandi.age, _x.CCFOcandi.agecheck, _x.CCFOcandi.inpathage, _x.CCFOcandi.inpathcheck, _x.CCFOcandi.TOI, _x.CCFOcandi.warn, _x.CCFOcandi.prefill, _x.CCFOcandi.lowbrake, _x.CCFOcandi.highbrake, _x.CCFOcandi.isvision, _x.CCFOcandi.isfusion, _x.CCFOcandi.isradar, _x.CCFOcandi.timetoturn, _x.CCFOcandi.timetobrake, _x.CCFOcandi.steerflag, _x.CCFOcandi.ref_pos.ref_character, _x.CCFOcandi.ref_pos.pos_x, _x.CCFOcandi.ref_pos.pos_y, _x.CCFOcandi.ref_pos.range, _x.CCFOcandi.ref_pos.heading, _x.CCFOcandi.iba_flag, _x.CCFOcandi.hitdist, _x.CCFOcandi.yawdist, _x.CCFOcandi.driverovertake, _x.CCFOcandi.driverovertake_warn, _x.CCFOcandi.movingleftcount, _x.CCFOcandi.movingrightcount, _x.CCCcandi.ID, _x.CCCcandi.VID, _x.CCCcandi.longpos, _x.CCCcandi.latpos, _x.CCCcandi.longspd, _x.CCCcandi.latspd, _x.CCCcandi.longacc, _x.CCCcandi.latacc, _x.CCCcandi.range, _x.CCCcandi.rangerate, _x.CCCcandi.TTC, _x.CCCcandi.TTL, _x.CCCcandi.colnum, _x.CCCcandi.colx, _x.CCCcandi.coly, _x.CCCcandi.colr, _x.CCCcandi.heading, _x.CCCcandi.currange, _x.CCCcandi.estrange, _x.CCCcandi.TTC_tar, _x.CCCcandi.TTL_tar, _x.CCCcandi.TOI_before, _x.CCCcandi.TOI_after, _x.CCCcandi.inpathcur, _x.CCCcandi.inpathpre, _x.CCCcandi.inpath, _x.CCCcandi.AEBconf, _x.CCCcandi.warn, _x.CCCcandi.prefill, _x.CCCcandi.lowbrake, _x.CCCcandi.highbrake, _x.CCCcandi.isvision, _x.CCCcandi.isfusion, _x.CCCcandi.isradar, _x.CCCcandi.timetoturn, _x.CCCcandi.timetobrake, _x.CCCcandi.steerflag, _x.CCCcandi.ref_pos.ref_character, _x.CCCcandi.ref_pos.pos_x, _x.CCCcandi.ref_pos.pos_y, _x.CCCcandi.ref_pos.range, _x.CCCcandi.ref_pos.heading, _x.CCCcandi.iba_flag, _x.FusionCCRFlag.warning_flag, _x.FusionCCRFlag.prefill_flage, _x.FusionCCRFlag.lowbrake_flag, _x.FusionCCRFlag.highbrake_flag, _x.FusionCCRFlag.unconfirmed_flag, _x.FusionCCRFlag.hold_flag, _x.FusionCCRFlag.lowbrake_age, _x.FusionCCRFlag.highbrake_hold_age, _x.FusionCCRFlag.warnbrake_flag, _x.FusionCCRFlag.readyforIBA, _x.FusionVRUFlag.warning_flag, _x.FusionVRUFlag.prefill_flage, _x.FusionVRUFlag.lowbrake_flag, _x.FusionVRUFlag.highbrake_flag, _x.FusionVRUFlag.unconfirmed_flag, _x.FusionVRUFlag.hold_flag, _x.FusionVRUFlag.lowbrake_age, _x.FusionVRUFlag.highbrake_hold_age, _x.FusionVRUFlag.warnbrake_flag, _x.FusionVRUFlag.readyforIBA, _x.FusionVRURearFlag.warning_flag, _x.FusionVRURearFlag.prefill_flage, _x.FusionVRURearFlag.lowbrake_flag, _x.FusionVRURearFlag.highbrake_flag, _x.FusionVRURearFlag.unconfirmed_flag, _x.FusionVRURearFlag.hold_flag, _x.FusionVRURearFlag.lowbrake_age, _x.FusionVRURearFlag.highbrake_hold_age, _x.FusionVRURearFlag.warnbrake_flag, _x.FusionVRURearFlag.readyforIBA, _x.AebActuFlg.prewarn, _x.AebActuFlg.latentwarn, _x.AebActuFlg.prefill, _x.AebActuFlg.warnbrk, _x.AebActuFlg.softbrk, _x.AebActuFlg.hardbrk, _x.AebActuFlg.iba_req, _x.AebActuFlg.warntype, _x.AebActuFlg.hold_req, _x.AebReserved.aeb_reserved_1, _x.AebReserved.aeb_reserved_2, _x.AebReserved.aeb_reserved_3, _x.AebReserved.aeb_reserved_4, _x.AebReserved.aeb_reserved_5, _x.AebReserved.aeb_reserved_6, _x.AebReserved.aeb_reserved_7, _x.AebReserved.aeb_reserved_8, _x.AebReserved.aeb_reserved_9, _x.AebReserved.aeb_reserved_10, _x.AebReserved.aeb_reserved_11, _x.AebReserved.aeb_reserved_12, _x.AebReserved.aeb_reserved_13, _x.AebReserved.aeb_reserved_14, _x.AebReserved.aeb_reserved_15, _x.AebReserved.aeb_reserved_16, _x.AebReserved.aeb_reserved_17, _x.AebReserved.aeb_reserved_18, _x.AebReserved.aeb_reserved_19, _x.AebReserved.aeb_reserved_20, _x.AebReserved.aeb_reserved_21, _x.AebReserved.aeb_reserved_22, _x.AebReserved.aeb_reserved_23, _x.AebReserved.aeb_reserved_24, _x.AebReserved.aeb_reserved_25, _x.AebReserved.aeb_reserved_26, _x.AebReserved.aeb_reserved_27, _x.AebReserved.aeb_reserved_28, _x.AebReserved.aeb_reserved_29, _x.AebReserved.aeb_reserved_30, _x.AebReserved.aeb_reserved_31, _x.AebReserved.aeb_reserved_32, _x.AebReserved.aeb_reserved_33, _x.AebReserved.aeb_reserved_34, _x.AebReserved.aeb_reserved_35, _x.AebReserved.aeb_reserved_36, _x.AebReserved.aeb_reserved_37, _x.AebReserved.aeb_reserved_38, _x.AebReserved.aeb_reserved_39, _x.AebReserved.aeb_reserved_40, _x.AebReserved.aeb_reserved_41, _x.AebReserved.aeb_reserved_42, _x.AebReserved.aeb_reserved_43, _x.AebReserved.aeb_reserved_44, _x.AebReserved.aeb_reserved_45, _x.AebReserved.aeb_reserved_46, _x.AebReserved.aeb_reserved_47, _x.AebReserved.aeb_reserved_48, _x.AebReserved.aeb_reserved_49, _x.AebReserved.aeb_reserved_50, _x.AebReserved.aeb_reserved_51, _x.AebReserved.aeb_reserved_52, _x.AebReserved.aeb_reserved_53, _x.AebReserved.aeb_reserved_54, _x.AebReserved.aeb_reserved_55, _x.AebReserved.aeb_reserved_56, _x.AebReserved.aeb_reserved_57, _x.AebReserved.aeb_reserved_58, _x.AebReserved.aeb_reserved_59, _x.AebReserved.aeb_reserved_60, _x.AebReserved.aeb_reserved_61, _x.AebReserved.aeb_reserved_62, _x.AebReserved.aeb_reserved_63, _x.AebReserved.aeb_reserved_64, _x.AebReserved.aeb_reserved_65, _x.AebReserved.aeb_reserved_66, _x.AebReserved.aeb_reserved_67, _x.AebReserved.aeb_reserved_68, _x.AebReserved.aeb_reserved_69, _x.AebReserved.aeb_reserved_70, _x.AebReserved.aeb_reserved_71, _x.AebReserved.aeb_reserved_72, _x.AebReserved.aeb_reserved_73, _x.AebReserved.aeb_reserved_74, _x.AebReserved.aeb_reserved_75, _x.AebReserved.aeb_reserved_76, _x.AebReserved.aeb_reserved_77, _x.AebReserved.aeb_reserved_78, _x.AebReserved.aeb_reserved_79, _x.AebReserved.aeb_reserved_80, _x.AebReserved.aeb_reserved_81, _x.AebReserved.aeb_reserved_82, _x.AebReserved.aeb_reserved_83, _x.AebReserved.aeb_reserved_84, _x.AebReserved.aeb_reserved_85, _x.AebReserved.aeb_reserved_86, _x.AebReserved.aeb_reserved_87, _x.AebReserved.aeb_reserved_88, _x.AebReserved.aeb_reserved_89, _x.AebReserved.aeb_reserved_90, _x.AebReserved.aeb_reserved_91, _x.AebReserved.aeb_reserved_92, _x.AebReserved.aeb_reserved_93, _x.AebReserved.aeb_reserved_94, _x.AebReserved.aeb_reserved_95, _x.AebReserved.aeb_reserved_96, _x.AebReserved.aeb_reserved_97, _x.AebReserved.aeb_reserved_98, _x.AebReserved.aeb_reserved_99, _x.AebReserved.aeb_reserved_100, _x.AEBSm.snsrblk_cdn, _x.AEBSm.tmpfail_cdn, _x.AEBSm.permfail_cdn, _x.AEBSm.psv_cdn, _x.AEBSm.aebonff_cdn, _x.AEBSm.factive_cdn, _x.AEBSm.bactive_cdn, _x.AEBSm.stdby_cdn, _x.AEBSm.st, _x.AEBSm.sys_st, _x.FCWSm.snsrblk_cdn, _x.FCWSm.tmpfail_cdn, _x.FCWSm.permfail_cdn, _x.FCWSm.psv_cdn, _x.FCWSm.aebonff_cdn, _x.FCWSm.factive_cdn, _x.FCWSm.bactive_cdn, _x.FCWSm.stdby_cdn, _x.FCWSm.st, _x.FCWSm.sys_st, _x.AebRearSm.off_cdn, _x.AebRearSm.stdby_cdn, _x.AebRearSm.psv_cdn, _x.AebRearSm.psv_cdn_bit, _x.AebRearSm.fail_cdn, _x.AebRearSm.active_cdn,) = _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B().unpack(str[start:end])
      self.CCFOcandi.moveout = bool(self.CCFOcandi.moveout)
      self.CCFOcandi.inpath_before = bool(self.CCFOcandi.inpath_before)
      self.CCFOcandi.inpath_after = bool(self.CCFOcandi.inpath_after)
      self.CCFOcandi.inpath = bool(self.CCFOcandi.inpath)
      self.CCFOcandi.vfcheck = bool(self.CCFOcandi.vfcheck)
      self.CCFOcandi.lfcheck = bool(self.CCFOcandi.lfcheck)
      self.CCFOcandi.agecheck = bool(self.CCFOcandi.agecheck)
      self.CCFOcandi.inpathcheck = bool(self.CCFOcandi.inpathcheck)
      self.CCFOcandi.TOI = bool(self.CCFOcandi.TOI)
      self.CCFOcandi.warn = bool(self.CCFOcandi.warn)
      self.CCFOcandi.prefill = bool(self.CCFOcandi.prefill)
      self.CCFOcandi.lowbrake = bool(self.CCFOcandi.lowbrake)
      self.CCFOcandi.highbrake = bool(self.CCFOcandi.highbrake)
      self.CCFOcandi.isvision = bool(self.CCFOcandi.isvision)
      self.CCFOcandi.isfusion = bool(self.CCFOcandi.isfusion)
      self.CCFOcandi.isradar = bool(self.CCFOcandi.isradar)
      self.CCFOcandi.steerflag = bool(self.CCFOcandi.steerflag)
      self.CCFOcandi.iba_flag = bool(self.CCFOcandi.iba_flag)
      self.CCFOcandi.driverovertake = bool(self.CCFOcandi.driverovertake)
      self.CCFOcandi.driverovertake_warn = bool(self.CCFOcandi.driverovertake_warn)
      self.CCCcandi.inpathcur = bool(self.CCCcandi.inpathcur)
      self.CCCcandi.inpathpre = bool(self.CCCcandi.inpathpre)
      self.CCCcandi.inpath = bool(self.CCCcandi.inpath)
      self.CCCcandi.warn = bool(self.CCCcandi.warn)
      self.CCCcandi.prefill = bool(self.CCCcandi.prefill)
      self.CCCcandi.lowbrake = bool(self.CCCcandi.lowbrake)
      self.CCCcandi.highbrake = bool(self.CCCcandi.highbrake)
      self.CCCcandi.isvision = bool(self.CCCcandi.isvision)
      self.CCCcandi.isfusion = bool(self.CCCcandi.isfusion)
      self.CCCcandi.isradar = bool(self.CCCcandi.isradar)
      self.CCCcandi.steerflag = bool(self.CCCcandi.steerflag)
      self.FusionCCRFlag.readyforIBA = bool(self.FusionCCRFlag.readyforIBA)
      self.FusionVRUFlag.readyforIBA = bool(self.FusionVRUFlag.readyforIBA)
      self.FusionVRURearFlag.readyforIBA = bool(self.FusionVRURearFlag.readyforIBA)
      self.AebActuFlg.prewarn = bool(self.AebActuFlg.prewarn)
      self.AebActuFlg.latentwarn = bool(self.AebActuFlg.latentwarn)
      self.AebActuFlg.prefill = bool(self.AebActuFlg.prefill)
      self.AebActuFlg.warnbrk = bool(self.AebActuFlg.warnbrk)
      self.AebActuFlg.softbrk = bool(self.AebActuFlg.softbrk)
      self.AebActuFlg.hardbrk = bool(self.AebActuFlg.hardbrk)
      self.AebActuFlg.iba_req = bool(self.AebActuFlg.iba_req)
      self.AebActuFlg.hold_req = bool(self.AebActuFlg.hold_req)
      self.AEBSm.snsrblk_cdn = bool(self.AEBSm.snsrblk_cdn)
      self.AEBSm.tmpfail_cdn = bool(self.AEBSm.tmpfail_cdn)
      self.AEBSm.permfail_cdn = bool(self.AEBSm.permfail_cdn)
      self.AEBSm.psv_cdn = bool(self.AEBSm.psv_cdn)
      self.AEBSm.aebonff_cdn = bool(self.AEBSm.aebonff_cdn)
      self.AEBSm.factive_cdn = bool(self.AEBSm.factive_cdn)
      self.AEBSm.bactive_cdn = bool(self.AEBSm.bactive_cdn)
      self.AEBSm.stdby_cdn = bool(self.AEBSm.stdby_cdn)
      self.FCWSm.snsrblk_cdn = bool(self.FCWSm.snsrblk_cdn)
      self.FCWSm.tmpfail_cdn = bool(self.FCWSm.tmpfail_cdn)
      self.FCWSm.permfail_cdn = bool(self.FCWSm.permfail_cdn)
      self.FCWSm.psv_cdn = bool(self.FCWSm.psv_cdn)
      self.FCWSm.aebonff_cdn = bool(self.FCWSm.aebonff_cdn)
      self.FCWSm.factive_cdn = bool(self.FCWSm.factive_cdn)
      self.FCWSm.bactive_cdn = bool(self.FCWSm.bactive_cdn)
      self.FCWSm.stdby_cdn = bool(self.FCWSm.stdby_cdn)
      self.AebRearSm.off_cdn = bool(self.AebRearSm.off_cdn)
      self.AebRearSm.stdby_cdn = bool(self.AebRearSm.stdby_cdn)
      self.AebRearSm.psv_cdn = bool(self.AebRearSm.psv_cdn)
      self.AebRearSm.fail_cdn = bool(self.AebRearSm.fail_cdn)
      self.AebRearSm.active_cdn = bool(self.AebRearSm.active_cdn)
      _x = self
      start = end
      end += 65
      (_x.AebRearSm.sm_state, _x.FcwRearSm.off_cdn, _x.FcwRearSm.stdby_cdn, _x.FcwRearSm.psv_cdn, _x.FcwRearSm.psv_cdn_bit, _x.FcwRearSm.fail_cdn, _x.FcwRearSm.active_cdn, _x.FcwRearSm.sm_state, _x.FuncSuppress.Aeb_Suppress, _x.FuncSuppress.Fcw_Suppress, _x.FuncSuppress.Aebrear_Suppress, _x.FuncSuppress.Fcwrear_Suppress, _x.AebDiag.FCTsTopicState, _x.AebDiag.AebTopicState, _x.AebDiag.FcwTopicState, _x.AebDiag.TopicLoss, _x.AebDiag.TopicNoInit, _x.AebDiag.AebFaultSt, _x.AebDiag.FcwFaultSt, _x.AebDiag.AebFimIndex, _x.AebDiag.FcwFimIndex, _x.AebDiag.AebRearFaultSt, _x.AebDiag.AebRearFimIndex,) = _get_struct_I3BI2BI4B11I().unpack(str[start:end])
      self.FcwRearSm.off_cdn = bool(self.FcwRearSm.off_cdn)
      self.FcwRearSm.stdby_cdn = bool(self.FcwRearSm.stdby_cdn)
      self.FcwRearSm.psv_cdn = bool(self.FcwRearSm.psv_cdn)
      self.FcwRearSm.fail_cdn = bool(self.FcwRearSm.fail_cdn)
      self.FcwRearSm.active_cdn = bool(self.FcwRearSm.active_cdn)
      self.FuncSuppress.Aeb_Suppress = bool(self.FuncSuppress.Aeb_Suppress)
      self.FuncSuppress.Fcw_Suppress = bool(self.FuncSuppress.Fcw_Suppress)
      self.FuncSuppress.Aebrear_Suppress = bool(self.FuncSuppress.Aebrear_Suppress)
      self.FuncSuppress.Fcwrear_Suppress = bool(self.FuncSuppress.Fcwrear_Suppress)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.AebFault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.FcwFault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.AebRearFault = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.FcwRearFault = s.unpack(str[start:end])
      _x = self
      start = end
      end += 809
      (_x.AebDiag.FWfailsafe, _x.AebDiag.FNfailsafe, _x.AebDiag.Lidarfailsafe, _x.AebDiag.Rearfailsafe, _x.AebMode.RearEnable, _x.AebMode.ShadowMode, _x.AebMode.ShadowModeSoft, _x.AebMode.HilMode, _x.AESCCRcandi.ID, _x.AESCCRcandi.VID, _x.AESCCRcandi.range, _x.AESCCRcandi.rangerate, _x.AESCCRcandi.TTC, _x.AESCCRcandi.TTB_tt, _x.AESCCRcandi.TTB_valid, _x.AESCCRcandi.TTT_left_tt, _x.AESCCRcandi.TTT_left_valid, _x.AESCCRcandi.TTT_right_tt, _x.AESCCRcandi.TTT_right_valid, _x.AESCCRcandi.closeleft_posx, _x.AESCCRcandi.closeleft_posy, _x.AESCCRcandi.closeleft_curx, _x.AESCCRcandi.closeleft_cury, _x.AESCCRcandi.closeleft_latest, _x.AESCCRcandi.closeright_posx, _x.AESCCRcandi.closeright_posy, _x.AESCCRcandi.closeright_curx, _x.AESCCRcandi.closeright_cury, _x.AESCCRcandi.closeright_latest, _x.AESCCRcandi.remoteleft_posx, _x.AESCCRcandi.remoteleft_posy, _x.AESCCRcandi.remoteleft_curx, _x.AESCCRcandi.remoteleft_cury, _x.AESCCRcandi.remoteleft_latest, _x.AESCCRcandi.remoteright_posx, _x.AESCCRcandi.remoteright_posy, _x.AESCCRcandi.remoteright_curx, _x.AESCCRcandi.remoteright_cury, _x.AESCCRcandi.remoteright_latest, _x.AESCCRcandi.center_posx, _x.AESCCRcandi.center_posy, _x.AESCCRcandi.center_curx, _x.AESCCRcandi.center_cury, _x.AESCCRcandi.center_latest, _x.AESCCRcandi.longpos, _x.AESCCRcandi.latpos, _x.AESCCRcandi.XOLC, _x.AESCCRcandi.latest, _x.AESCCRcandi.closest_corner, _x.AESCCRcandi.close_corner_est, _x.AESCCRcandi.inpath, _x.AESCCRcandi.inpathcur, _x.AESCCRcandi.inpathpre, _x.AESCCRcandi.inpathage, _x.AESCCRcandi.inpathcheck, _x.AESCCRcandi.isfusion, _x.AESCCRcandi.isvision, _x.AESCCRcandi.isradar, _x.AESCCRcandi.toi, _x.AESCCRcandi.isoncoming, _x.AESCCRcandi.AEBconf, _x.AESCCRcandi.steerflag, _x.AESCCRcandi.steerdirection, _x.AESCCRcandi.ref_pos.ref_character, _x.AESCCRcandi.ref_pos.pos_x, _x.AESCCRcandi.ref_pos.pos_y, _x.AESCCRcandi.ref_pos.range, _x.AESCCRcandi.ref_pos.heading, _x.CloseAESTarget.ID, _x.CloseAESTarget.VID, _x.CloseAESTarget.range, _x.CloseAESTarget.rangerate, _x.CloseAESTarget.TTC, _x.CloseAESTarget.TTB_tt, _x.CloseAESTarget.TTB_valid, _x.CloseAESTarget.TTT_left_tt, _x.CloseAESTarget.TTT_left_valid, _x.CloseAESTarget.TTT_right_tt, _x.CloseAESTarget.TTT_right_valid, _x.CloseAESTarget.closeleft_posx, _x.CloseAESTarget.closeleft_posy, _x.CloseAESTarget.closeleft_curx, _x.CloseAESTarget.closeleft_cury, _x.CloseAESTarget.closeleft_latest, _x.CloseAESTarget.closeright_posx, _x.CloseAESTarget.closeright_posy, _x.CloseAESTarget.closeright_curx, _x.CloseAESTarget.closeright_cury, _x.CloseAESTarget.closeright_latest, _x.CloseAESTarget.remoteleft_posx, _x.CloseAESTarget.remoteleft_posy, _x.CloseAESTarget.remoteleft_curx, _x.CloseAESTarget.remoteleft_cury, _x.CloseAESTarget.remoteleft_latest, _x.CloseAESTarget.remoteright_posx, _x.CloseAESTarget.remoteright_posy, _x.CloseAESTarget.remoteright_curx, _x.CloseAESTarget.remoteright_cury, _x.CloseAESTarget.remoteright_latest, _x.CloseAESTarget.center_posx, _x.CloseAESTarget.center_posy, _x.CloseAESTarget.center_curx, _x.CloseAESTarget.center_cury, _x.CloseAESTarget.center_latest, _x.CloseAESTarget.longpos, _x.CloseAESTarget.latpos, _x.CloseAESTarget.XOLC, _x.CloseAESTarget.latest, _x.CloseAESTarget.closest_corner, _x.CloseAESTarget.close_corner_est, _x.CloseAESTarget.inpath, _x.CloseAESTarget.inpathcur, _x.CloseAESTarget.inpathpre, _x.CloseAESTarget.inpathage, _x.CloseAESTarget.inpathcheck, _x.CloseAESTarget.isfusion, _x.CloseAESTarget.isvision, _x.CloseAESTarget.isradar, _x.CloseAESTarget.toi, _x.CloseAESTarget.isoncoming, _x.CloseAESTarget.AEBconf, _x.CloseAESTarget.steerflag, _x.CloseAESTarget.steerdirection, _x.CloseAESTarget.ref_pos.ref_character, _x.CloseAESTarget.ref_pos.pos_x, _x.CloseAESTarget.ref_pos.pos_y, _x.CloseAESTarget.ref_pos.range, _x.CloseAESTarget.ref_pos.heading, _x.AESPathCheck.plan_valid, _x.AESPathCheck.target_valid, _x.AESPathCheck.rout_valid, _x.AESPathCheck.reservetime, _x.AESPathCheck.pnc_c0, _x.AESPathCheck.pnc_c1, _x.AESPathCheck.pnc_c2, _x.AESPathCheck.pnc_c3, _x.AESPathCheck.pnc_c4, _x.AESPathCheck.pnc_c5, _x.AESPathCheck.crash_id, _x.AESPathCheck.crash_lane, _x.AESPathCheck.aessteerangle, _x.AESPathCheck.aespncst, _x.AESPathCheck.host_left_lane.path_c0, _x.AESPathCheck.host_left_lane.path_c1, _x.AESPathCheck.host_left_lane.path_c2, _x.AESPathCheck.host_left_lane.path_c3, _x.AESPathCheck.host_left_lane.isvalid, _x.AESPathCheck.host_left_lane.path_type, _x.AESPathCheck.host_left_lane.path_color, _x.AESPathCheck.host_left_lane.character, _x.AESPathCheck.host_right_lane.path_c0, _x.AESPathCheck.host_right_lane.path_c1, _x.AESPathCheck.host_right_lane.path_c2, _x.AESPathCheck.host_right_lane.path_c3, _x.AESPathCheck.host_right_lane.isvalid, _x.AESPathCheck.host_right_lane.path_type, _x.AESPathCheck.host_right_lane.path_color, _x.AESPathCheck.host_right_lane.character, _x.AESPathCheck.left_edge.path_c0, _x.AESPathCheck.left_edge.path_c1, _x.AESPathCheck.left_edge.path_c2, _x.AESPathCheck.left_edge.path_c3, _x.AESPathCheck.left_edge.isvalid, _x.AESPathCheck.left_edge.path_type, _x.AESPathCheck.left_edge.path_color, _x.AESPathCheck.left_edge.character, _x.AESPathCheck.right_edge.path_c0, _x.AESPathCheck.right_edge.path_c1, _x.AESPathCheck.right_edge.path_c2, _x.AESPathCheck.right_edge.path_c3, _x.AESPathCheck.right_edge.isvalid, _x.AESPathCheck.right_edge.path_type, _x.AESPathCheck.right_edge.path_color, _x.AESPathCheck.right_edge.character, _x.AESPathCheck.host_lpp.path_c0, _x.AESPathCheck.host_lpp.path_c1, _x.AESPathCheck.host_lpp.path_c2, _x.AESPathCheck.host_lpp.path_c3, _x.AESPathCheck.host_lpp.isvalid, _x.AESPathCheck.host_lpp.width, _x.AESPlanPath.root_path.path_c0, _x.AESPlanPath.root_path.path_c1, _x.AESPlanPath.root_path.path_c2, _x.AESPlanPath.root_path.path_c3, _x.AESPlanPath.root_path.path_c4, _x.AESPlanPath.root_path.path_c5, _x.AESPlanPath.root_path.curvature, _x.AESPlanPath.root_path.dcurv, _x.AESPlanPath.root_path.expect_lat, _x.AESPlanPath.root_path.expect_long, _x.AESPlanPath.root_path.isvalid, _x.AESPlanPath.root_path.rout_cost, _x.AESPlanPath.root_path.max_ay, _x.AESPlanPath.aesplanactv, _x.AESPlanPath.ltrldstlacntr, _x.AESPlanPath.egolawdth, _x.AESPlanPath.agvehlanecntr, _x.AESPlanPath.lacurv, _x.AESPlanPath.ladcurv, _x.AESPlanPath.vehspdkph, _x.AESPlanPath.dispvehspdkph,) = _get_struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f().unpack(str[start:end])
      self.AebMode.RearEnable = bool(self.AebMode.RearEnable)
      self.AebMode.ShadowMode = bool(self.AebMode.ShadowMode)
      self.AebMode.ShadowModeSoft = bool(self.AebMode.ShadowModeSoft)
      self.AebMode.HilMode = bool(self.AebMode.HilMode)
      self.AESPathCheck.host_left_lane.isvalid = bool(self.AESPathCheck.host_left_lane.isvalid)
      self.AESPathCheck.host_right_lane.isvalid = bool(self.AESPathCheck.host_right_lane.isvalid)
      self.AESPathCheck.left_edge.isvalid = bool(self.AESPathCheck.left_edge.isvalid)
      self.AESPathCheck.right_edge.isvalid = bool(self.AESPathCheck.right_edge.isvalid)
      self.AESPathCheck.host_lpp.isvalid = bool(self.AESPathCheck.host_lpp.isvalid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.AESPlanPath.better_path = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PathPlaned()
        _x = val1
        start = end
        end += 52
        (_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay,) = _get_struct_10fI2f().unpack(str[start:end])
        self.AESPlanPath.better_path.append(val1)
      _x = self
      start = end
      end += 36
      (_x.fAebOut.ebhpInfo.emncInfo.maneuverProb, _x.fAebOut.ebhpInfo.emncInfo.maneuver, _x.fAebOut.ebhpInfo.emncInfo.enterWeight, _x.fAebOut.ebhpInfo.emncInfo.exitWeight, _x.fAebOut.ebhpInfo.emncInfo.reserved, _x.fAebOut.ebhpInfo.etjpInfo.curvature, _x.fAebOut.ebhpInfo.etjpInfo.curvatureRate, _x.fAebOut.ebhpInfo.etjpInfo.roc, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.accel,) = _get_struct_fI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (self.fAebOut.ebhpInfo.etjpInfo.trajCv.accel,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 44
      (_x.fAebOut.ebhpInfo.etjpInfo.xEnd, _x.fAebOut.ebhpInfo.etjpInfo.tEnd, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c0, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c1, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c2, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c3, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a0, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a1, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a2, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a3, _x.fAebOut.ebhpInfo.etjpInfo.numSeg,) = _get_struct_10fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.xEndSegment = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.tEndSegment = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Yx3CoefStru()
        _x = val1
        start = end
        end += 16
        (_x.c0, _x.c1, _x.c2, _x.c3,) = _get_struct_4f().unpack(str[start:end])
        self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.car = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v25 = val1.objInfo
        _x = _v25
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v26 = val1.obhcInfo
        _x = _v26
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v27 = val1.othaInfo
        _x = _v27
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v27.inPathNow = bool(_v27.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.objOfInterestMap.car.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.pedstrain = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v28 = val1.objInfo
        _x = _v28
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v29 = val1.obhcInfo
        _x = _v29
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v30 = val1.othaInfo
        _x = _v30
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v30.inPathNow = bool(_v30.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.objOfInterestMap.pedstrain.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.bicyclist = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v31 = val1.objInfo
        _x = _v31
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v32 = val1.obhcInfo
        _x = _v32
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v33 = val1.othaInfo
        _x = _v33
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v33.inPathNow = bool(_v33.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.objOfInterestMap.bicyclist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.motor = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v34 = val1.objInfo
        _x = _v34
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v35 = val1.obhcInfo
        _x = _v35
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v36 = val1.othaInfo
        _x = _v36
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v36.inPathNow = bool(_v36.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.objOfInterestMap.motor.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.obstacle = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v37 = val1.objInfo
        _x = _v37
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v38 = val1.obhcInfo
        _x = _v38
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v39 = val1.othaInfo
        _x = _v39
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v39.inPathNow = bool(_v39.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.objOfInterestMap.obstacle.append(val1)
      _x = self
      start = end
      end += 137
      (_x.fAebOut.crenInfo.objInfo.id, _x.fAebOut.crenInfo.objInfo.visionId, _x.fAebOut.crenInfo.objInfo.radarId, _x.fAebOut.crenInfo.objInfo.age, _x.fAebOut.crenInfo.objInfo.longDist, _x.fAebOut.crenInfo.objInfo.latDist, _x.fAebOut.crenInfo.objInfo.longVel, _x.fAebOut.crenInfo.objInfo.latVel, _x.fAebOut.crenInfo.objInfo.longAccel, _x.fAebOut.crenInfo.objInfo.latAccel, _x.fAebOut.crenInfo.objInfo.heading, _x.fAebOut.crenInfo.objInfo.curvature, _x.fAebOut.crenInfo.objInfo.existConfidence, _x.fAebOut.crenInfo.objInfo.length, _x.fAebOut.crenInfo.objInfo.width, _x.fAebOut.crenInfo.objInfo.longDistStd, _x.fAebOut.crenInfo.objInfo.latDistStd, _x.fAebOut.crenInfo.objInfo.longVelStd, _x.fAebOut.crenInfo.objInfo.latVelStd, _x.fAebOut.crenInfo.objInfo.longAccelStd, _x.fAebOut.crenInfo.objInfo.latAccelStd, _x.fAebOut.crenInfo.objInfo.motionStatus, _x.fAebOut.crenInfo.objInfo.detectionSensor, _x.fAebOut.crenInfo.objInfo.type, _x.fAebOut.crenInfo.objInfo.refPoint, _x.fAebOut.crenInfo.objInfo.trackerStatus, _x.fAebOut.crenInfo.objInfo.visionDetectionSnesor, _x.fAebOut.crenInfo.obhcInfo.hypoProb, _x.fAebOut.crenInfo.obhcInfo.collProb, _x.fAebOut.crenInfo.obhcInfo.ttb, _x.fAebOut.crenInfo.obhcInfo.hypoLabel, _x.fAebOut.crenInfo.othaInfo.aLgtNec, _x.fAebOut.crenInfo.othaInfo.aLatNec, _x.fAebOut.crenInfo.othaInfo.ttc, _x.fAebOut.crenInfo.othaInfo.inPathNow,) = _get_struct_4I17f6I3fI3fB().unpack(str[start:end])
      self.fAebOut.crenInfo.othaInfo.inPathNow = bool(self.fAebOut.crenInfo.othaInfo.inPathNow)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.crenInfo.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 103
      (_x.fAebOut.acdnInfo.flgPreWarnTrigger, _x.fAebOut.acdnInfo.flgJerkTrigger, _x.fAebOut.acdnInfo.flgPrefillTrigger, _x.fAebOut.acdnInfo.flgPartialBrkTrigger, _x.fAebOut.acdnInfo.flgFullBrkTrigger, _x.fAebOut.acdnInfo.flgEbaTrigger, _x.fAebOut.acdnInfo.flgDangerRelease, _x.fAebOut.acdnInfo.flgObjInsideBlindZoom, _x.fAebOut.acdnInfo.flgFirstObjDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnObjTrigger, _x.fAebOut.tscdInfo.spdAebReduce, _x.fAebOut.tscdInfo.spdJerkReduce, _x.fAebOut.tscdInfo.flgDriverOverride, _x.fAebOut.tscdInfo.flgDriverBrake, _x.fAebOut.tscdInfo.flgDriveForward, _x.fAebOut.tscdInfo.flgDoorOpen, _x.fAebOut.tscdInfo.flgBeltWarn, _x.fAebOut.tscdInfo.flgVehEnable, _x.fAebOut.tscdInfo.flgChassisIntervince, _x.fAebOut.tscdInfo.flgBrakeOverHeat, _x.fAebOut.tscdInfo.flgEscOff, _x.fAebOut.tscdInfo.flgSysFault, _x.fAebOut.tscdInfo.flgPathFeasible, _x.fAebOut.stmeInfo.fcwStatus, _x.fAebOut.stmeInfo.aebBrkStatus, _x.fAebOut.stmeInfo.ebaStatus, _x.fAebOut.rqabInfo.fcwTargetId, _x.fAebOut.rqabInfo.aebTargetId, _x.fAebOut.rqabInfo.aebDecelReq, _x.fAebOut.rqabInfo.aebReq, _x.fAebOut.rqabInfo.aebTargetType, _x.fAebOut.rqabInfo.aebStatus, _x.fAebOut.rqabInfo.abpReq, _x.fAebOut.rqabInfo.awbReq, _x.fAebOut.rqabInfo.ebaReq, _x.fAebOut.rqabInfo.fcwReq, _x.fAebOut.rqabInfo.fcwTargetType, _x.fAebOut.rqabInfo.fcwStatus, _x.fAebOut.taDiagBusSignals.NumberOfValidCar, _x.fAebOut.taDiagBusSignals.NumberOfValidMotor, _x.fAebOut.taDiagBusSignals.NumberOfValidPed, _x.fAebOut.taDiagBusSignals.NumberOfValidBic, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvt, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvtRate, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.filteredEgoALgt,) = _get_struct_11B2f11B5IfB2I4B6I3f().unpack(str[start:end])
      self.fAebOut.acdnInfo.flgPreWarnTrigger = bool(self.fAebOut.acdnInfo.flgPreWarnTrigger)
      self.fAebOut.acdnInfo.flgJerkTrigger = bool(self.fAebOut.acdnInfo.flgJerkTrigger)
      self.fAebOut.acdnInfo.flgPrefillTrigger = bool(self.fAebOut.acdnInfo.flgPrefillTrigger)
      self.fAebOut.acdnInfo.flgPartialBrkTrigger = bool(self.fAebOut.acdnInfo.flgPartialBrkTrigger)
      self.fAebOut.acdnInfo.flgFullBrkTrigger = bool(self.fAebOut.acdnInfo.flgFullBrkTrigger)
      self.fAebOut.acdnInfo.flgEbaTrigger = bool(self.fAebOut.acdnInfo.flgEbaTrigger)
      self.fAebOut.acdnInfo.flgDangerRelease = bool(self.fAebOut.acdnInfo.flgDangerRelease)
      self.fAebOut.acdnInfo.flgObjInsideBlindZoom = bool(self.fAebOut.acdnInfo.flgObjInsideBlindZoom)
      self.fAebOut.acdnInfo.flgFirstObjDangerRelease = bool(self.fAebOut.acdnInfo.flgFirstObjDangerRelease)
      self.fAebOut.acdnInfo.flgHeadOnDangerRelease = bool(self.fAebOut.acdnInfo.flgHeadOnDangerRelease)
      self.fAebOut.acdnInfo.flgHeadOnObjTrigger = bool(self.fAebOut.acdnInfo.flgHeadOnObjTrigger)
      self.fAebOut.tscdInfo.flgDriverOverride = bool(self.fAebOut.tscdInfo.flgDriverOverride)
      self.fAebOut.tscdInfo.flgDriverBrake = bool(self.fAebOut.tscdInfo.flgDriverBrake)
      self.fAebOut.tscdInfo.flgDriveForward = bool(self.fAebOut.tscdInfo.flgDriveForward)
      self.fAebOut.tscdInfo.flgDoorOpen = bool(self.fAebOut.tscdInfo.flgDoorOpen)
      self.fAebOut.tscdInfo.flgBeltWarn = bool(self.fAebOut.tscdInfo.flgBeltWarn)
      self.fAebOut.tscdInfo.flgVehEnable = bool(self.fAebOut.tscdInfo.flgVehEnable)
      self.fAebOut.tscdInfo.flgChassisIntervince = bool(self.fAebOut.tscdInfo.flgChassisIntervince)
      self.fAebOut.tscdInfo.flgBrakeOverHeat = bool(self.fAebOut.tscdInfo.flgBrakeOverHeat)
      self.fAebOut.tscdInfo.flgEscOff = bool(self.fAebOut.tscdInfo.flgEscOff)
      self.fAebOut.tscdInfo.flgSysFault = bool(self.fAebOut.tscdInfo.flgSysFault)
      self.fAebOut.tscdInfo.flgPathFeasible = bool(self.fAebOut.tscdInfo.flgPathFeasible)
      self.fAebOut.rqabInfo.aebReq = bool(self.fAebOut.rqabInfo.aebReq)
      self.fAebOut.rqabInfo.abpReq = bool(self.fAebOut.rqabInfo.abpReq)
      self.fAebOut.rqabInfo.awbReq = bool(self.fAebOut.rqabInfo.awbReq)
      self.fAebOut.rqabInfo.ebaReq = bool(self.fAebOut.rqabInfo.ebaReq)
      self.fAebOut.rqabInfo.fcwReq = bool(self.fAebOut.rqabInfo.fcwReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.dstInTrjctry = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLgt = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLat = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.cosOfHeading = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.sinOfHeading = s.unpack(str[start:end])
      start = end
      end += 4
      (self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.lowPAx,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjInfoOfDiagBus_t()
        _v40 = val1.diagBusForSortedObjectAeb
        _x = _v40
        start = end
        end += 33
        (_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex,) = _get_struct_2IB5fI().unpack(str[start:end])
        _v40.stillExist = bool(_v40.stillExist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.predCenPosnLgt = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.predCenPosnLat = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.predCosHeading = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.predSinHeading = s.unpack(str[start:end])
        _x = _v40
        start = end
        end += 28
        (_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi,) = _get_struct_I4B5f().unpack(str[start:end])
        _v40.linearOrCurvedPredValid = bool(_v40.linearOrCurvedPredValid)
        _v40.curvedMotion = bool(_v40.curvedMotion)
        _v40.stationary = bool(_v40.stationary)
        _v40.movingOncoming = bool(_v40.movingOncoming)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.opCond1 = s.unpack(str[start:end])
        _v40.opCond1 = list(map(bool, _v40.opCond1))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.opCond2 = s.unpack(str[start:end])
        _v40.opCond2 = list(map(bool, _v40.opCond2))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.opCond3 = s.unpack(str[start:end])
        _v40.opCond3 = list(map(bool, _v40.opCond3))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.opCond4 = s.unpack(str[start:end])
        _v40.opCond4 = list(map(bool, _v40.opCond4))
        _x = _v40
        start = end
        end += 24
        (_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex,) = _get_struct_4f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.edgeIndex = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.maxCLeIdx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.minCRiIdx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.taLateralThreatMatrixOpl = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.objLongPosnRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.objLatPosnRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.objLongSpanRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.objLatSpanRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.hostLongPosnRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.hostLatPosnRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.hostLongSpanRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.hostLatSpanRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.isValidUpdateForLongThreat = s.unpack(str[start:end])
        _v40.isValidUpdateForLongThreat = list(map(bool, _v40.isValidUpdateForLongThreat))
        _x = _v40
        start = end
        end += 24
        (_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth,) = _get_struct_3fI2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.xEdges = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.yEdges = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.egoMotionTime = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.egoXc = s.unpack(str[start:end])
        _x = _v40
        start = end
        end += 12
        (_x.ttp, _x.fusionSource, _x.brkIndex,) = _get_struct_f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.objLongDistNear = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.inFwdPathResampled = s.unpack(str[start:end])
        _v40.inFwdPathResampled = list(map(bool, _v40.inFwdPathResampled))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v40.timeVecResampled = s.unpack(str[start:end])
        _x = _v40
        start = end
        end += 70
        (_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv,) = _get_struct_4f5B5f9B5f().unpack(str[start:end])
        _v40.flgJustPass = bool(_v40.flgJustPass)
        _v40.flgObjNotInPathAtTZero = bool(_v40.flgObjNotInPathAtTZero)
        _v40.TargetOnComingDuringHostTurn = bool(_v40.TargetOnComingDuringHostTurn)
        _v40.TargetLowCurvature = bool(_v40.TargetLowCurvature)
        _v40.LessHeadOnAtCollision = bool(_v40.LessHeadOnAtCollision)
        _v40.isGenMovingOnComingScenario = bool(_v40.isGenMovingOnComingScenario)
        _v40.hostDrvStraight = bool(_v40.hostDrvStraight)
        _v40.hostIsTurning = bool(_v40.hostIsTurning)
        _v40.targetIsTurning = bool(_v40.targetIsTurning)
        _v40.relativePosnOkDuringHostTurn = bool(_v40.relativePosnOkDuringHostTurn)
        _v40.isLtapTargetTurn = bool(_v40.isLtapTargetTurn)
        _v40.isLtapHostTurn = bool(_v40.isLtapHostTurn)
        _v40.useStrictInPath = bool(_v40.useStrictInPath)
        _v40.inPathCurPosn = bool(_v40.inPathCurPosn)
        _x = val1
        start = end
        end += 21
        (_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj,) = _get_struct_I4fB().unpack(str[start:end])
        val1.brkActvDlydForObj = bool(val1.brkActvDlydForObj)
        self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjInfoOfDiagBus_t()
        _v41 = val1.diagBusForSortedObjectAeb
        _x = _v41
        start = end
        end += 33
        (_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex,) = _get_struct_2IB5fI().unpack(str[start:end])
        _v41.stillExist = bool(_v41.stillExist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.predCenPosnLgt = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.predCenPosnLat = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.predCosHeading = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.predSinHeading = s.unpack(str[start:end])
        _x = _v41
        start = end
        end += 28
        (_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi,) = _get_struct_I4B5f().unpack(str[start:end])
        _v41.linearOrCurvedPredValid = bool(_v41.linearOrCurvedPredValid)
        _v41.curvedMotion = bool(_v41.curvedMotion)
        _v41.stationary = bool(_v41.stationary)
        _v41.movingOncoming = bool(_v41.movingOncoming)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.opCond1 = s.unpack(str[start:end])
        _v41.opCond1 = list(map(bool, _v41.opCond1))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.opCond2 = s.unpack(str[start:end])
        _v41.opCond2 = list(map(bool, _v41.opCond2))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.opCond3 = s.unpack(str[start:end])
        _v41.opCond3 = list(map(bool, _v41.opCond3))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.opCond4 = s.unpack(str[start:end])
        _v41.opCond4 = list(map(bool, _v41.opCond4))
        _x = _v41
        start = end
        end += 24
        (_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex,) = _get_struct_4f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.edgeIndex = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.maxCLeIdx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.minCRiIdx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.taLateralThreatMatrixOpl = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.objLongPosnRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.objLatPosnRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.objLongSpanRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.objLatSpanRelToHost = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.hostLongPosnRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.hostLatPosnRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.hostLongSpanRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.hostLatSpanRelToObj = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.isValidUpdateForLongThreat = s.unpack(str[start:end])
        _v41.isValidUpdateForLongThreat = list(map(bool, _v41.isValidUpdateForLongThreat))
        _x = _v41
        start = end
        end += 24
        (_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth,) = _get_struct_3fI2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.xEdges = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.yEdges = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.egoMotionTime = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.egoXc = s.unpack(str[start:end])
        _x = _v41
        start = end
        end += 12
        (_x.ttp, _x.fusionSource, _x.brkIndex,) = _get_struct_f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.objLongDistNear = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.inFwdPathResampled = s.unpack(str[start:end])
        _v41.inFwdPathResampled = list(map(bool, _v41.inFwdPathResampled))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v41.timeVecResampled = s.unpack(str[start:end])
        _x = _v41
        start = end
        end += 70
        (_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv,) = _get_struct_4f5B5f9B5f().unpack(str[start:end])
        _v41.flgJustPass = bool(_v41.flgJustPass)
        _v41.flgObjNotInPathAtTZero = bool(_v41.flgObjNotInPathAtTZero)
        _v41.TargetOnComingDuringHostTurn = bool(_v41.TargetOnComingDuringHostTurn)
        _v41.TargetLowCurvature = bool(_v41.TargetLowCurvature)
        _v41.LessHeadOnAtCollision = bool(_v41.LessHeadOnAtCollision)
        _v41.isGenMovingOnComingScenario = bool(_v41.isGenMovingOnComingScenario)
        _v41.hostDrvStraight = bool(_v41.hostDrvStraight)
        _v41.hostIsTurning = bool(_v41.hostIsTurning)
        _v41.targetIsTurning = bool(_v41.targetIsTurning)
        _v41.relativePosnOkDuringHostTurn = bool(_v41.relativePosnOkDuringHostTurn)
        _v41.isLtapTargetTurn = bool(_v41.isLtapTargetTurn)
        _v41.isLtapHostTurn = bool(_v41.isLtapHostTurn)
        _v41.useStrictInPath = bool(_v41.useStrictInPath)
        _v41.inPathCurPosn = bool(_v41.inPathCurPosn)
        _x = val1
        start = end
        end += 21
        (_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj,) = _get_struct_I4fB().unpack(str[start:end])
        val1.brkActvDlydForObj = bool(val1.brkActvDlydForObj)
        self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec.append(val1)
      _x = self
      start = end
      end += 41
      (_x.fAebOut.taDiagBusSignals.jerkLatAbsMax, _x.fAebOut.taDiagBusSignals.accelLatAbsMax, _x.fAebOut.taDiagBusSignals.crvtRateAbsMax, _x.fAebOut.taDiagBusSignals.crvtAbsMax, _x.fAebOut.taDiagBusSignals.jerkLatAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsCmft, _x.fAebOut.taDiagBusSignals.crvtRateAbsCmft, _x.fAebOut.taDiagBusSignals.crvtAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsOnComingBrking, _x.fAebOut.taDiagBusSignals.latPosnRoadConf, _x.fAebOut.taDiagBusSignals.TAMode,) = _get_struct_9fIB().unpack(str[start:end])
      self.fAebOut.taDiagBusSignals.TAMode = bool(self.fAebOut.taDiagBusSignals.TAMode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.reservedTaDebug = s.unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.fAebOut.ebhpInnerInfo.yawRateNoise.bias, _x.fAebOut.ebhpInnerInfo.yawRateNoise.std, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate, _x.fAebOut.ebhpInnerInfo.yawRateLearnState, _x.fAebOut.ebhpInnerInfo.flgEsitmateEnable,) = _get_struct_2f4BIB().unpack(str[start:end])
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch)
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault)
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress)
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate)
      self.fAebOut.ebhpInnerInfo.flgEsitmateEnable = bool(self.fAebOut.ebhpInnerInfo.flgEsitmateEnable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.modelConfidence = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.modelTransMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePriorHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPriorHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePostHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPostHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePriorCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPriorCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePostCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPostCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.residualCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.sysUncertaintyCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.procUncertaintyCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePriorCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPriorCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePostCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPostCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.residualCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.sysUncertaintyCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.procUncertaintyCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.stateTransMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.measValues = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.measMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.measUncertainty = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.fAebOut.ebhpInnerInfo.curveCoeff.curvature, _x.fAebOut.ebhpInnerInfo.curveCoeff.curvatureRate, _x.fAebOut.ooifInnerInfo.allObjNum, _x.fAebOut.ooifInnerInfo.objPlausNum, _x.fAebOut.ooifInnerInfo.carCandiNum, _x.fAebOut.ooifInnerInfo.vruCandiNum,) = _get_struct_2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.objPlausStatus = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjPlausCheckStru()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.codeWord, _x.reserved,) = _get_struct_2If().unpack(str[start:end])
        self.fAebOut.ooifInnerInfo.objPlausStatus.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.objPlausVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelevanceStru()
        _x = val1
        start = end
        end += 37
        (_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance,) = _get_struct_I7fBf().unpack(str[start:end])
        val1.flgOverlap = bool(val1.flgOverlap)
        _v42 = val1.egoBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v42.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v42.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v42.reserved = s.unpack(str[start:end])
        _v43 = val1.egoBoxLengthExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v43.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v43.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v43.reserved = s.unpack(str[start:end])
        _v44 = val1.egoBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v44.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v44.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v44.reserved = s.unpack(str[start:end])
        _v45 = val1.objBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v45.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v45.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v45.reserved = s.unpack(str[start:end])
        _v46 = val1.ObjBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v46.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v46.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v46.reserved = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.objSensorTotalExt,) = _get_struct_f().unpack(str[start:end])
        self.fAebOut.ooifInnerInfo.objPlausVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ooifInnerInfo.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ooifInnerInfo.objPlausIds = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.carCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CarRelevanceMonitorStru()
        _x = val1
        start = end
        end += 88
        (_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading,) = _get_struct_3I19f().unpack(str[start:end])
        self.fAebOut.ooifInnerInfo.carCandidatesVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.vruCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VruRelevanceMonitorStru()
        _x = val1
        start = end
        end += 169
        (_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch,) = _get_struct_3I38f5B().unpack(str[start:end])
        val1.flgMoveForward = bool(val1.flgMoveForward)
        val1.flgMoveBackward = bool(val1.flgMoveBackward)
        val1.flgMoveLeft = bool(val1.flgMoveLeft)
        val1.flgMoveRight = bool(val1.flgMoveRight)
        val1.flgLatch = bool(val1.flgLatch)
        self.fAebOut.ooifInnerInfo.vruCandidatesVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.crenInnerInfo.objPruneId = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.fAebOut.crenInnerInfo.targetByPriorId, _x.fAebOut.crenInnerInfo.targetByTtcId, _x.fAebOut.crenInnerInfo.targetByDistId, _x.fAebOut.crenInnerInfo.targetByPostId, _x.fAebOut.crenInnerInfo.targetOldId,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.crenInnerInfo.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 182
      (_x.fAebOut.carInfo.vLgt, _x.fAebOut.carInfo.vLat, _x.fAebOut.carInfo.aLgt, _x.fAebOut.carInfo.aLat, _x.fAebOut.carInfo.yawRate, _x.fAebOut.carInfo.yawRateValid, _x.fAebOut.carInfo.aLgtValid, _x.fAebOut.carInfo.aLatValid, _x.fAebOut.carInfo.motionStatus, _x.fAebOut.carInfo.speed, _x.fAebOut.carInfo.spdWhlFl, _x.fAebOut.carInfo.spdWhlFr, _x.fAebOut.carInfo.spdWhlRl, _x.fAebOut.carInfo.spdWhlRr, _x.fAebOut.carInfo.spdWhlFlValid, _x.fAebOut.carInfo.spdWhlFrValid, _x.fAebOut.carInfo.spdWhlRlValid, _x.fAebOut.carInfo.spdWhlRrValid, _x.fAebOut.carInfo.dirWhlFl, _x.fAebOut.carInfo.dirWhlFr, _x.fAebOut.carInfo.dirWhlRl, _x.fAebOut.carInfo.dirWhlRr, _x.fAebOut.carInfo.brkPedalTravel, _x.fAebOut.carInfo.masterCylPress, _x.fAebOut.carInfo.aLgtDriverBrkReq, _x.fAebOut.carInfo.brkStatus, _x.fAebOut.carInfo.masterCylPressValid, _x.fAebOut.carInfo.dtcActive, _x.fAebOut.carInfo.tcsActive, _x.fAebOut.carInfo.vdcActive, _x.fAebOut.carInfo.escOverHeat, _x.fAebOut.carInfo.escFault, _x.fAebOut.carInfo.escSwitch, _x.fAebOut.carInfo.strAngle, _x.fAebOut.carInfo.strSpeed, _x.fAebOut.carInfo.pinAngle, _x.fAebOut.carInfo.strAngleValid, _x.fAebOut.carInfo.pinAngleValid, _x.fAebOut.carInfo.epsFault, _x.fAebOut.carInfo.accelPedalPos, _x.fAebOut.carInfo.actGearValid, _x.fAebOut.carInfo.accelPedalPosValid, _x.fAebOut.carInfo.accStatus, _x.fAebOut.carInfo.actGear, _x.fAebOut.carInfo.vehicleState, _x.fAebOut.carInfo.vehicleMode, _x.fAebOut.carInfo.doorDriver, _x.fAebOut.carInfo.doorFrontPassenger, _x.fAebOut.carInfo.doorRearLeft, _x.fAebOut.carInfo.doorRearRight, _x.fAebOut.carInfo.hoodStatus, _x.fAebOut.carInfo.trailerStatus, _x.fAebOut.carInfo.turnLeftLight, _x.fAebOut.carInfo.turnRightLight, _x.fAebOut.carInfo.beltWarnDriver, _x.fAebOut.carInfo.beltWarnFrontPassenger, _x.fAebOut.carInfo.beltRearLeft, _x.fAebOut.carInfo.beltRearMid, _x.fAebOut.carInfo.beltRearRight, _x.fAebOut.carInfo.aebSetting, _x.fAebOut.carInfo.fcwSetting, _x.fAebOut.carInfo.length, _x.fAebOut.carInfo.width, _x.fAebOut.carInfo.axisLength, _x.fAebOut.carInfo.rearAxisToFrontEnd, _x.fAebOut.carInfo.rearTrackWidth, _x.fAebOut.carInfo.steerRatio, _x.fAebOut.carInfo.cogToFrontAxis, _x.fAebOut.carInfo.cogToRearAxis, _x.fAebOut.carInfo.frontCornStiff, _x.fAebOut.carInfo.rearCornStiff,) = _get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().unpack(str[start:end])
      self.fAebOut.carInfo.yawRateValid = bool(self.fAebOut.carInfo.yawRateValid)
      self.fAebOut.carInfo.aLgtValid = bool(self.fAebOut.carInfo.aLgtValid)
      self.fAebOut.carInfo.aLatValid = bool(self.fAebOut.carInfo.aLatValid)
      self.fAebOut.carInfo.spdWhlFlValid = bool(self.fAebOut.carInfo.spdWhlFlValid)
      self.fAebOut.carInfo.spdWhlFrValid = bool(self.fAebOut.carInfo.spdWhlFrValid)
      self.fAebOut.carInfo.spdWhlRlValid = bool(self.fAebOut.carInfo.spdWhlRlValid)
      self.fAebOut.carInfo.spdWhlRrValid = bool(self.fAebOut.carInfo.spdWhlRrValid)
      self.fAebOut.carInfo.brkStatus = bool(self.fAebOut.carInfo.brkStatus)
      self.fAebOut.carInfo.masterCylPressValid = bool(self.fAebOut.carInfo.masterCylPressValid)
      self.fAebOut.carInfo.dtcActive = bool(self.fAebOut.carInfo.dtcActive)
      self.fAebOut.carInfo.tcsActive = bool(self.fAebOut.carInfo.tcsActive)
      self.fAebOut.carInfo.vdcActive = bool(self.fAebOut.carInfo.vdcActive)
      self.fAebOut.carInfo.escOverHeat = bool(self.fAebOut.carInfo.escOverHeat)
      self.fAebOut.carInfo.escFault = bool(self.fAebOut.carInfo.escFault)
      self.fAebOut.carInfo.escSwitch = bool(self.fAebOut.carInfo.escSwitch)
      self.fAebOut.carInfo.strAngleValid = bool(self.fAebOut.carInfo.strAngleValid)
      self.fAebOut.carInfo.pinAngleValid = bool(self.fAebOut.carInfo.pinAngleValid)
      self.fAebOut.carInfo.epsFault = bool(self.fAebOut.carInfo.epsFault)
      self.fAebOut.carInfo.actGearValid = bool(self.fAebOut.carInfo.actGearValid)
      self.fAebOut.carInfo.accelPedalPosValid = bool(self.fAebOut.carInfo.accelPedalPosValid)
      self.fAebOut.carInfo.doorDriver = bool(self.fAebOut.carInfo.doorDriver)
      self.fAebOut.carInfo.doorFrontPassenger = bool(self.fAebOut.carInfo.doorFrontPassenger)
      self.fAebOut.carInfo.doorRearLeft = bool(self.fAebOut.carInfo.doorRearLeft)
      self.fAebOut.carInfo.doorRearRight = bool(self.fAebOut.carInfo.doorRearRight)
      self.fAebOut.carInfo.hoodStatus = bool(self.fAebOut.carInfo.hoodStatus)
      self.fAebOut.carInfo.trailerStatus = bool(self.fAebOut.carInfo.trailerStatus)
      self.fAebOut.carInfo.turnLeftLight = bool(self.fAebOut.carInfo.turnLeftLight)
      self.fAebOut.carInfo.turnRightLight = bool(self.fAebOut.carInfo.turnRightLight)
      self.fAebOut.carInfo.beltWarnDriver = bool(self.fAebOut.carInfo.beltWarnDriver)
      self.fAebOut.carInfo.beltWarnFrontPassenger = bool(self.fAebOut.carInfo.beltWarnFrontPassenger)
      self.fAebOut.carInfo.beltRearLeft = bool(self.fAebOut.carInfo.beltRearLeft)
      self.fAebOut.carInfo.beltRearMid = bool(self.fAebOut.carInfo.beltRearMid)
      self.fAebOut.carInfo.beltRearRight = bool(self.fAebOut.carInfo.beltRearRight)
      self.fAebOut.carInfo.aebSetting = bool(self.fAebOut.carInfo.aebSetting)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objInfo = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjInfo()
        _x = val1
        start = end
        end += 26
        (_x.OBJ_Object_Count, _x.OBJ_VRU_Count, _x.OBJ_VD_Count, _x.OBJ_CIPV_ID, _x.OBJ_CIPV_Lost, _x.OBJ_Is_CCI, _x.OBJ_CCI_Side, _x.OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
        val1.OBJ_CIPV_Lost = bool(val1.OBJ_CIPV_Lost)
        val1.OBJ_Is_CCI = bool(val1.OBJ_Is_CCI)
        self.fAebOut.objInfo.append(val1)
      _x = self
      start = end
      end += 64
      (_x.fAebOut.acdnInnerInfo.thdFcwTtcCompens, _x.fAebOut.acdnInnerInfo.isSafeDistance, _x.fAebOut.acdnInnerInfo.isSafeLgtRelSpd, _x.fAebOut.acdnInnerInfo.isSafeLgtRelAcc, _x.fAebOut.acdnInnerInfo.dangerRelease, _x.fAebOut.acdnInnerInfo.objLongDistCorr, _x.fAebOut.acdnInnerInfo.fcwCodeWord, _x.fAebOut.acdnInnerInfo.aebCodeWord, _x.fAebOut.acdnInnerInfo.crvtReqdLe, _x.fAebOut.acdnInnerInfo.crvtReqdRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxRi, _x.fAebOut.acdnInnerInfo.oldGearAct, _x.fAebOut.acdnInnerInfo.objLatDistGap, _x.fAebOut.acdnInnerInfo.flgLatEscapeLe, _x.fAebOut.acdnInnerInfo.flgLatEscapeRi, _x.fAebOut.acdnInnerInfo.isProceedDangerRelease,) = _get_struct_f4Bf2I6fI4f().unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.isSafeDistance = bool(self.fAebOut.acdnInnerInfo.isSafeDistance)
      self.fAebOut.acdnInnerInfo.isSafeLgtRelSpd = bool(self.fAebOut.acdnInnerInfo.isSafeLgtRelSpd)
      self.fAebOut.acdnInnerInfo.isSafeLgtRelAcc = bool(self.fAebOut.acdnInnerInfo.isSafeLgtRelAcc)
      self.fAebOut.acdnInnerInfo.dangerRelease = bool(self.fAebOut.acdnInnerInfo.dangerRelease)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.floatAcdnInnerReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.intAcdnInnerReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve = s.unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve = list(map(bool, self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve))
      _x = self
      start = end
      end += 26
      (_x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverIntvFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverStrFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLe, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqRi,) = _get_struct_3B2f7B2f().unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.floatHooaInnerReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.intHooaInnerReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve = s.unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve = list(map(bool, self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve))
      _x = self
      start = end
      end += 35
      (_x.fAebOut.acdnInnerInfo.aFcwALatCritByDrvr, _x.fAebOut.acdnInnerInfo.crvtFcwALatCritByDrvrThd, _x.fAebOut.acdnInnerInfo.tTtcFcwTriger, _x.fAebOut.acdnInnerInfo.facDriverIntvFcw, _x.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap, _x.fAebOut.stmeInnerInfo.aebPassiveCodeWord, _x.fAebOut.stmeInnerInfo.aebTermintCodeWord, _x.fAebOut.stmeInnerInfo.activeCounter, _x.fAebOut.stmeInnerInfo.passiveCounter, _x.fAebOut.stmeInnerInfo.aebSwitchFlag, _x.fAebOut.stmeInnerInfo.faultFlag,) = _get_struct_4fB4I2B().unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap = bool(self.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap)
      self.fAebOut.stmeInnerInfo.aebSwitchFlag = bool(self.fAebOut.stmeInnerInfo.aebSwitchFlag)
      self.fAebOut.stmeInnerInfo.faultFlag = bool(self.fAebOut.stmeInnerInfo.faultFlag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.stmeInnerInfo.floatStmeInnerReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.reservedSpace.boolReserve = s.unpack(str[start:end])
      self.fAebOut.reservedSpace.boolReserve = list(map(bool, self.fAebOut.reservedSpace.boolReserve))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.reservedSpace.uintReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.reservedSpace.floatReserve = s.unpack(str[start:end])
      _x = self
      start = end
      end += 80
      (_x.fAebOut.fySideFeatureDebug.request.bsdlca_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_haptic_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.ext_req, _x.fAebOut.fySideFeatureDebug.request.sdow_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_right_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.sdow_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_right_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_left_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_right_req, _x.fAebOut.fySideFeatureDebug.request.rear_rad_fault_disp,) = _get_struct_20I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.bsd_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyBsdTrackedObj()
        _x = val1
        start = end
        end += 132
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time,) = _get_struct_2I11fiIi3I6f11B2fB3I().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.fySideFeatureDebug.bsd_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.lca_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyLcaTrackedObj()
        _x = val1
        start = end
        end += 144
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.fySideFeatureDebug.lca_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.sdow_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FySdowTrackedObj()
        _x = val1
        start = end
        end += 146
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right_far = bool(val1.is_in_region_right_far)
        val1.is_in_region_left_far = bool(val1.is_in_region_left_far)
        val1.is_in_region_right_near = bool(val1.is_in_region_right_near)
        val1.is_in_region_left_near = bool(val1.is_in_region_left_near)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.fAebOut.fySideFeatureDebug.sdow_tracked_obj.append(val1)
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.fAebOut.fySideFeatureDebug.num_of_ooi_bsd, _x.fAebOut.fySideFeatureDebug.num_of_ooi_lca, _x.fAebOut.fySideFeatureDebug.num_of_ooi_sdow,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.fail_inhibits = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.inactive_inhibits = s.unpack(str[start:end])
      start = end
      end += 1
      (self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off,) = _get_struct_B().unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off = bool(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.fail_inhibits = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.inactive_inhibits = s.unpack(str[start:end])
      start = end
      end += 1
      (self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off,) = _get_struct_B().unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off = bool(self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.bsdlca_decision, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_action_decision.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.fAebOut.fySideFeatureDebug.sdow_action_decision.sdow_decision, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_action_decision.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve = s.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve = list(map(bool, self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_intReserve = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_floatReserve = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.fAebOut.rqabInnerInfo.holdReq, _x.fAebOut.rqabInnerInfo.holdEnt, _x.fAebOut.rqabInnerInfo.holdExt, _x.fAebOut.rqabInnerInfo.isDriverGearChg, _x.fAebOut.rqabInnerInfo.isDriverAccPedl,) = _get_struct_5B().unpack(str[start:end])
      self.fAebOut.rqabInnerInfo.holdReq = bool(self.fAebOut.rqabInnerInfo.holdReq)
      self.fAebOut.rqabInnerInfo.holdEnt = bool(self.fAebOut.rqabInnerInfo.holdEnt)
      self.fAebOut.rqabInnerInfo.holdExt = bool(self.fAebOut.rqabInnerInfo.holdExt)
      self.fAebOut.rqabInnerInfo.isDriverGearChg = bool(self.fAebOut.rqabInnerInfo.isDriverGearChg)
      self.fAebOut.rqabInnerInfo.isDriverAccPedl = bool(self.fAebOut.rqabInnerInfo.isDriverAccPedl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.rqabInnerInfo.boolRqabInnerReserve = s.unpack(str[start:end])
      self.fAebOut.rqabInnerInfo.boolRqabInnerReserve = list(map(bool, self.fAebOut.rqabInnerInfo.boolRqabInnerReserve))
      _x = self
      start = end
      end += 68
      (_x.fAebOut.timeCostInfo.fctsApp, _x.fAebOut.timeCostInfo.carInfoMap, _x.fAebOut.timeCostInfo.objInfoMap, _x.fAebOut.timeCostInfo.aebMain, _x.fAebOut.timeCostInfo.ctrlInfoMap, _x.fAebOut.timeCostInfo.aebPublish, _x.fAebOut.timeCostInfo.ebhp, _x.fAebOut.timeCostInfo.ooif, _x.fAebOut.timeCostInfo.obhc, _x.fAebOut.timeCostInfo.otha, _x.fAebOut.timeCostInfo.cren, _x.fAebOut.timeCostInfo.acdn, _x.fAebOut.timeCostInfo.tscd, _x.fAebOut.timeCostInfo.stme, _x.fAebOut.timeCostInfo.rqab, _x.fAebOut.publish_ptp_ts,) = _get_struct_15fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fAebOut.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fAebOut.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.fAebOut.counter, _x.fAebOut.publish_ts, _x.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B().pack(_x.pedcross.ID, _x.pedcross.VID, _x.pedcross.longpos, _x.pedcross.latpos, _x.pedcross.longspd, _x.pedcross.latspd, _x.pedcross.longacc, _x.pedcross.latacc, _x.pedcross.range, _x.pedcross.rangerear, _x.pedcross.rangerate, _x.pedcross.TTC, _x.pedcross.TTCrear, _x.pedcross.XOLC, _x.pedcross.latest, _x.pedcross.oncoming, _x.pedcross.preceding, _x.pedcross.crossing, _x.pedcross.stationary, _x.pedcross.AEBconf, _x.pedcross.inpath, _x.pedcross.vfcheck, _x.pedcross.lfcheck, _x.pedcross.age, _x.pedcross.agecheck, _x.pedcross.inpathage, _x.pedcross.inpathcheck, _x.pedcross.TOI, _x.pedcross.TOIrear, _x.pedcross.warn, _x.pedcross.prefill, _x.pedcross.lowbrake, _x.pedcross.highbrake, _x.pedcross.isvision, _x.pedcross.isfusion, _x.pedcross.isradar, _x.pedcross.timetoturn, _x.pedcross.timetobrake, _x.pedcross.steerflag, _x.pedcross.ref_pos.ref_character, _x.pedcross.ref_pos.pos_x, _x.pedcross.ref_pos.pos_y, _x.pedcross.ref_pos.range, _x.pedcross.ref_pos.heading, _x.pedcross.xpos_cir, _x.pedcross.ypos_cir, _x.pedcross.roc_tar, _x.pedcross.mindist, _x.pedcross.xpos_col, _x.pedcross.ypos_col, _x.pedcross.range_col, _x.pedcross.range_col_tar, _x.pedcross.yawrate, _x.pedcross.heading, _x.pedcross.colposs, _x.pedcross.col_num, _x.pedcross.TTC_cir, _x.pedcross.TTL_cir, _x.pedcross.TTC_tar, _x.pedcross.TTL_tar, _x.pedoncom.ID, _x.pedoncom.VID, _x.pedoncom.longpos, _x.pedoncom.latpos, _x.pedoncom.longspd, _x.pedoncom.latspd, _x.pedoncom.longacc, _x.pedoncom.latacc, _x.pedoncom.range, _x.pedoncom.rangerear, _x.pedoncom.rangerate, _x.pedoncom.TTC, _x.pedoncom.TTCrear, _x.pedoncom.XOLC, _x.pedoncom.latest, _x.pedoncom.oncoming, _x.pedoncom.preceding, _x.pedoncom.crossing, _x.pedoncom.stationary, _x.pedoncom.AEBconf, _x.pedoncom.inpath, _x.pedoncom.vfcheck, _x.pedoncom.lfcheck, _x.pedoncom.age, _x.pedoncom.agecheck, _x.pedoncom.inpathage, _x.pedoncom.inpathcheck, _x.pedoncom.TOI, _x.pedoncom.TOIrear, _x.pedoncom.warn, _x.pedoncom.prefill, _x.pedoncom.lowbrake, _x.pedoncom.highbrake, _x.pedoncom.isvision, _x.pedoncom.isfusion, _x.pedoncom.isradar, _x.pedoncom.timetoturn, _x.pedoncom.timetobrake, _x.pedoncom.steerflag, _x.pedoncom.ref_pos.ref_character, _x.pedoncom.ref_pos.pos_x, _x.pedoncom.ref_pos.pos_y, _x.pedoncom.ref_pos.range, _x.pedoncom.ref_pos.heading, _x.pedoncom.xpos_cir, _x.pedoncom.ypos_cir, _x.pedoncom.roc_tar, _x.pedoncom.mindist, _x.pedoncom.xpos_col, _x.pedoncom.ypos_col, _x.pedoncom.range_col, _x.pedoncom.range_col_tar, _x.pedoncom.yawrate, _x.pedoncom.heading, _x.pedoncom.colposs, _x.pedoncom.col_num, _x.pedoncom.TTC_cir, _x.pedoncom.TTL_cir, _x.pedoncom.TTC_tar, _x.pedoncom.TTL_tar, _x.bikcross.ID, _x.bikcross.VID, _x.bikcross.longpos, _x.bikcross.latpos, _x.bikcross.longspd, _x.bikcross.latspd, _x.bikcross.longacc, _x.bikcross.latacc, _x.bikcross.range, _x.bikcross.rangerear, _x.bikcross.rangerate, _x.bikcross.TTC, _x.bikcross.TTCrear, _x.bikcross.XOLC, _x.bikcross.latest, _x.bikcross.oncoming, _x.bikcross.preceding, _x.bikcross.crossing, _x.bikcross.stationary, _x.bikcross.AEBconf, _x.bikcross.inpath, _x.bikcross.vfcheck, _x.bikcross.lfcheck, _x.bikcross.age, _x.bikcross.agecheck, _x.bikcross.inpathage, _x.bikcross.inpathcheck, _x.bikcross.TOI, _x.bikcross.TOIrear, _x.bikcross.warn, _x.bikcross.prefill, _x.bikcross.lowbrake, _x.bikcross.highbrake, _x.bikcross.isvision, _x.bikcross.isfusion, _x.bikcross.isradar, _x.bikcross.timetoturn, _x.bikcross.timetobrake, _x.bikcross.steerflag, _x.bikcross.ref_pos.ref_character, _x.bikcross.ref_pos.pos_x, _x.bikcross.ref_pos.pos_y, _x.bikcross.ref_pos.range, _x.bikcross.ref_pos.heading, _x.bikcross.xpos_cir, _x.bikcross.ypos_cir, _x.bikcross.roc_tar, _x.bikcross.mindist, _x.bikcross.xpos_col, _x.bikcross.ypos_col, _x.bikcross.range_col, _x.bikcross.range_col_tar, _x.bikcross.yawrate, _x.bikcross.heading, _x.bikcross.colposs, _x.bikcross.col_num, _x.bikcross.TTC_cir, _x.bikcross.TTL_cir, _x.bikcross.TTC_tar, _x.bikcross.TTL_tar, _x.bikoncom.ID, _x.bikoncom.VID, _x.bikoncom.longpos, _x.bikoncom.latpos, _x.bikoncom.longspd, _x.bikoncom.latspd, _x.bikoncom.longacc, _x.bikoncom.latacc, _x.bikoncom.range, _x.bikoncom.rangerear, _x.bikoncom.rangerate, _x.bikoncom.TTC, _x.bikoncom.TTCrear, _x.bikoncom.XOLC, _x.bikoncom.latest, _x.bikoncom.oncoming, _x.bikoncom.preceding, _x.bikoncom.crossing, _x.bikoncom.stationary, _x.bikoncom.AEBconf, _x.bikoncom.inpath, _x.bikoncom.vfcheck, _x.bikoncom.lfcheck, _x.bikoncom.age, _x.bikoncom.agecheck, _x.bikoncom.inpathage, _x.bikoncom.inpathcheck, _x.bikoncom.TOI, _x.bikoncom.TOIrear, _x.bikoncom.warn, _x.bikoncom.prefill, _x.bikoncom.lowbrake, _x.bikoncom.highbrake, _x.bikoncom.isvision, _x.bikoncom.isfusion, _x.bikoncom.isradar, _x.bikoncom.timetoturn, _x.bikoncom.timetobrake, _x.bikoncom.steerflag, _x.bikoncom.ref_pos.ref_character, _x.bikoncom.ref_pos.pos_x, _x.bikoncom.ref_pos.pos_y, _x.bikoncom.ref_pos.range, _x.bikoncom.ref_pos.heading, _x.bikoncom.xpos_cir, _x.bikoncom.ypos_cir, _x.bikoncom.roc_tar, _x.bikoncom.mindist, _x.bikoncom.xpos_col, _x.bikoncom.ypos_col, _x.bikoncom.range_col, _x.bikoncom.range_col_tar, _x.bikoncom.yawrate, _x.bikoncom.heading, _x.bikoncom.colposs, _x.bikoncom.col_num, _x.bikoncom.TTC_cir, _x.bikoncom.TTL_cir, _x.bikoncom.TTC_tar, _x.bikoncom.TTL_tar, _x.CCRScandi.ID, _x.CCRScandi.VID, _x.CCRScandi.longpos, _x.CCRScandi.latpos, _x.CCRScandi.longspd, _x.CCRScandi.latspd, _x.CCRScandi.longacc, _x.CCRScandi.latacc, _x.CCRScandi.range, _x.CCRScandi.rangerate, _x.CCRScandi.TTC, _x.CCRScandi.XOLC, _x.CCRScandi.movestate, _x.CCRScandi.moveout, _x.CCRScandi.inpath_before))
      _x = self
      buff.write(_get_struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f().pack(_x.CCRScandi.inpath_after, _x.CCRScandi.AEBconf, _x.CCRScandi.inpath, _x.CCRScandi.vfcheck, _x.CCRScandi.lfcheck, _x.CCRScandi.age, _x.CCRScandi.agecheck, _x.CCRScandi.inpathage, _x.CCRScandi.inpathcheck, _x.CCRScandi.TOI, _x.CCRScandi.warn, _x.CCRScandi.prefill, _x.CCRScandi.lowbrake, _x.CCRScandi.highbrake, _x.CCRScandi.isvision, _x.CCRScandi.isfusion, _x.CCRScandi.isradar, _x.CCRScandi.timetoturn, _x.CCRScandi.timetobrake, _x.CCRScandi.steerflag, _x.CCRScandi.ref_pos.ref_character, _x.CCRScandi.ref_pos.pos_x, _x.CCRScandi.ref_pos.pos_y, _x.CCRScandi.ref_pos.range, _x.CCRScandi.ref_pos.heading, _x.CCRScandi.iba_flag, _x.CCRScandi.hitdist, _x.CCRScandi.yawdist, _x.CCRScandi.driverovertake, _x.CCRScandi.driverovertake_warn, _x.CCRScandi.movingleftcount, _x.CCRScandi.movingrightcount, _x.CCRMcandi.ID, _x.CCRMcandi.VID, _x.CCRMcandi.longpos, _x.CCRMcandi.latpos, _x.CCRMcandi.longspd, _x.CCRMcandi.latspd, _x.CCRMcandi.longacc, _x.CCRMcandi.latacc, _x.CCRMcandi.range, _x.CCRMcandi.rangerate, _x.CCRMcandi.TTC, _x.CCRMcandi.XOLC, _x.CCRMcandi.movestate, _x.CCRMcandi.moveout, _x.CCRMcandi.inpath_before, _x.CCRMcandi.inpath_after, _x.CCRMcandi.AEBconf, _x.CCRMcandi.inpath, _x.CCRMcandi.vfcheck, _x.CCRMcandi.lfcheck, _x.CCRMcandi.age, _x.CCRMcandi.agecheck, _x.CCRMcandi.inpathage, _x.CCRMcandi.inpathcheck, _x.CCRMcandi.TOI, _x.CCRMcandi.warn, _x.CCRMcandi.prefill, _x.CCRMcandi.lowbrake, _x.CCRMcandi.highbrake, _x.CCRMcandi.isvision, _x.CCRMcandi.isfusion, _x.CCRMcandi.isradar, _x.CCRMcandi.timetoturn, _x.CCRMcandi.timetobrake, _x.CCRMcandi.steerflag, _x.CCRMcandi.ref_pos.ref_character, _x.CCRMcandi.ref_pos.pos_x, _x.CCRMcandi.ref_pos.pos_y, _x.CCRMcandi.ref_pos.range, _x.CCRMcandi.ref_pos.heading, _x.CCRMcandi.iba_flag, _x.CCRMcandi.hitdist, _x.CCRMcandi.yawdist, _x.CCRMcandi.driverovertake, _x.CCRMcandi.driverovertake_warn, _x.CCRMcandi.movingleftcount, _x.CCRMcandi.movingrightcount, _x.FTAPcandi.ID, _x.FTAPcandi.VID, _x.FTAPcandi.longpos, _x.FTAPcandi.latpos, _x.FTAPcandi.longspd, _x.FTAPcandi.latspd, _x.FTAPcandi.longacc, _x.FTAPcandi.latacc, _x.FTAPcandi.range, _x.FTAPcandi.rangerate, _x.FTAPcandi.TTC, _x.FTAPcandi.TTL, _x.FTAPcandi.colnum, _x.FTAPcandi.colx, _x.FTAPcandi.coly, _x.FTAPcandi.colr, _x.FTAPcandi.heading, _x.FTAPcandi.currange, _x.FTAPcandi.estrange, _x.FTAPcandi.TTC_tar, _x.FTAPcandi.TTL_tar, _x.FTAPcandi.TOI_before, _x.FTAPcandi.TOI_after, _x.FTAPcandi.inpathcur, _x.FTAPcandi.inpathpre, _x.FTAPcandi.inpathcur_warn, _x.FTAPcandi.inpathpre_warn, _x.FTAPcandi.inpath, _x.FTAPcandi.inpath_tar, _x.FTAPcandi.inpath_warn, _x.FTAPcandi.inpathage, _x.FTAPcandi.inpathage_warn, _x.FTAPcandi.inpathagecheck, _x.FTAPcandi.inpathagecheck_warn, _x.FTAPcandi.AEBconf, _x.FTAPcandi.oncoming, _x.FTAPcandi.movingstate, _x.FTAPcandi.turnangle, _x.FTAPcandi.warn, _x.FTAPcandi.prefill, _x.FTAPcandi.lowbrake, _x.FTAPcandi.highbrake, _x.FTAPcandi.isvision, _x.FTAPcandi.isfusion, _x.FTAPcandi.isradar, _x.FTAPcandi.timetoturn, _x.FTAPcandi.timetobrake, _x.FTAPcandi.steerflag, _x.FTAPcandi.ref_pos.ref_character, _x.FTAPcandi.ref_pos.pos_x, _x.FTAPcandi.ref_pos.pos_y, _x.FTAPcandi.ref_pos.range, _x.FTAPcandi.ref_pos.heading, _x.FTAPcandi.iba_flag, _x.PedRear.ID, _x.PedRear.VID, _x.PedRear.longpos, _x.PedRear.latpos, _x.PedRear.longspd, _x.PedRear.latspd, _x.PedRear.longacc, _x.PedRear.latacc, _x.PedRear.range, _x.PedRear.rangerear, _x.PedRear.rangerate, _x.PedRear.TTC, _x.PedRear.TTCrear, _x.PedRear.XOLC, _x.PedRear.latest, _x.PedRear.oncoming, _x.PedRear.preceding, _x.PedRear.crossing, _x.PedRear.stationary, _x.PedRear.AEBconf, _x.PedRear.inpath, _x.PedRear.vfcheck, _x.PedRear.lfcheck, _x.PedRear.age, _x.PedRear.agecheck, _x.PedRear.inpathage, _x.PedRear.inpathcheck, _x.PedRear.TOI, _x.PedRear.TOIrear, _x.PedRear.warn, _x.PedRear.prefill, _x.PedRear.lowbrake, _x.PedRear.highbrake, _x.PedRear.isvision, _x.PedRear.isfusion, _x.PedRear.isradar, _x.PedRear.timetoturn, _x.PedRear.timetobrake, _x.PedRear.steerflag, _x.PedRear.ref_pos.ref_character, _x.PedRear.ref_pos.pos_x, _x.PedRear.ref_pos.pos_y, _x.PedRear.ref_pos.range, _x.PedRear.ref_pos.heading, _x.PedRear.xpos_cir, _x.PedRear.ypos_cir, _x.PedRear.roc_tar, _x.PedRear.mindist, _x.PedRear.xpos_col, _x.PedRear.ypos_col, _x.PedRear.range_col, _x.PedRear.range_col_tar, _x.PedRear.yawrate, _x.PedRear.heading, _x.PedRear.colposs, _x.PedRear.col_num, _x.PedRear.TTC_cir, _x.PedRear.TTL_cir, _x.PedRear.TTC_tar, _x.PedRear.TTL_tar, _x.BikRear.ID, _x.BikRear.VID, _x.BikRear.longpos, _x.BikRear.latpos, _x.BikRear.longspd, _x.BikRear.latspd, _x.BikRear.longacc, _x.BikRear.latacc, _x.BikRear.range, _x.BikRear.rangerear, _x.BikRear.rangerate, _x.BikRear.TTC, _x.BikRear.TTCrear, _x.BikRear.XOLC, _x.BikRear.latest, _x.BikRear.oncoming, _x.BikRear.preceding, _x.BikRear.crossing, _x.BikRear.stationary, _x.BikRear.AEBconf, _x.BikRear.inpath, _x.BikRear.vfcheck, _x.BikRear.lfcheck, _x.BikRear.age, _x.BikRear.agecheck, _x.BikRear.inpathage, _x.BikRear.inpathcheck, _x.BikRear.TOI, _x.BikRear.TOIrear, _x.BikRear.warn, _x.BikRear.prefill, _x.BikRear.lowbrake, _x.BikRear.highbrake, _x.BikRear.isvision, _x.BikRear.isfusion, _x.BikRear.isradar, _x.BikRear.timetoturn, _x.BikRear.timetobrake, _x.BikRear.steerflag, _x.BikRear.ref_pos.ref_character, _x.BikRear.ref_pos.pos_x, _x.BikRear.ref_pos.pos_y, _x.BikRear.ref_pos.range, _x.BikRear.ref_pos.heading, _x.BikRear.xpos_cir, _x.BikRear.ypos_cir, _x.BikRear.roc_tar, _x.BikRear.mindist, _x.BikRear.xpos_col, _x.BikRear.ypos_col, _x.BikRear.range_col, _x.BikRear.range_col_tar, _x.BikRear.yawrate, _x.BikRear.heading, _x.BikRear.colposs, _x.BikRear.col_num, _x.BikRear.TTC_cir, _x.BikRear.TTL_cir, _x.BikRear.TTC_tar, _x.BikRear.TTL_tar, _x.HostState.vehspd, _x.HostState.yawrate))
      _x = self
      buff.write(_get_struct_fB2fI2f2B4f().pack(_x.HostState.steerangle, _x.HostState.hostreverse, _x.HostState.brakepos, _x.HostState.brakeposrate, _x.HostState.driverpressed, _x.HostState.maincypress, _x.HostState.maincyprsrate, _x.HostState.driverintention, _x.HostState.driverEBA, _x.HostState.ROC, _x.HostState.steerrate, _x.HostState.accpos, _x.HostState.accposrate))
      length = len(self.Pedestrians)
      buff.write(_struct_I.pack(length))
      for val1 in self.Pedestrians:
        _x = val1
        buff.write(_get_struct_2I13f4BI3BIBI10B2fB().pack(_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag))
        _v47 = val1.ref_pos
        _x = _v47
        buff.write(_get_struct_I4d().pack(_x.ref_character, _x.pos_x, _x.pos_y, _x.range, _x.heading))
        _x = val1
        buff.write(_get_struct_10fBI4f().pack(_x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar))
      _x = self
      buff.write(_get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I().pack(_x.CloseTarget.ID, _x.CloseTarget.VID, _x.CloseTarget.longpos, _x.CloseTarget.latpos, _x.CloseTarget.longspd, _x.CloseTarget.latspd, _x.CloseTarget.longacc, _x.CloseTarget.latacc, _x.CloseTarget.range, _x.CloseTarget.rangerate, _x.CloseTarget.TTC, _x.CloseTarget.XOLC, _x.CloseTarget.movestate, _x.CloseTarget.moveout, _x.CloseTarget.inpath_before, _x.CloseTarget.inpath_after, _x.CloseTarget.AEBconf, _x.CloseTarget.inpath, _x.CloseTarget.vfcheck, _x.CloseTarget.lfcheck, _x.CloseTarget.age, _x.CloseTarget.agecheck, _x.CloseTarget.inpathage, _x.CloseTarget.inpathcheck, _x.CloseTarget.TOI, _x.CloseTarget.warn, _x.CloseTarget.prefill, _x.CloseTarget.lowbrake, _x.CloseTarget.highbrake, _x.CloseTarget.isvision, _x.CloseTarget.isfusion, _x.CloseTarget.isradar, _x.CloseTarget.timetoturn, _x.CloseTarget.timetobrake, _x.CloseTarget.steerflag, _x.CloseTarget.ref_pos.ref_character, _x.CloseTarget.ref_pos.pos_x, _x.CloseTarget.ref_pos.pos_y, _x.CloseTarget.ref_pos.range, _x.CloseTarget.ref_pos.heading, _x.CloseTarget.iba_flag, _x.CloseTarget.hitdist, _x.CloseTarget.yawdist, _x.CloseTarget.driverovertake, _x.CloseTarget.driverovertake_warn, _x.CloseTarget.movingleftcount, _x.CloseTarget.movingrightcount, _x.DriverMonitor.gaspedpos, _x.DriverMonitor.gaspedgrad, _x.DriverMonitor.driverbrake, _x.DriverMonitor.brkpedpos, _x.DriverMonitor.steerwhlang, _x.DriverMonitor.steerwhlgrad, _x.DriverMonitor.egospd, _x.DriverMonitor.egoaccel, _x.DriverMonitor.egoyawrate, _x.DriverMonitor.turnlighton, _x.DriverMonitor.egogear, _x.DriverMonitor.feedbackstate, _x.DriverMonitor.activitystate, _x.DriverMonitor.focusstate, _x.DriverMonitor.suppressbit, _x.DriverMonitor.abortbit))
      length = len(self.DriverMonitor.dampfactor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.DriverMonitor.dampfactor.tostring())
      _x = self
      buff.write(_get_struct_3fB().pack(_x.DriverMonitor.vel_std_dev, _x.DriverMonitor.sdytimer, _x.DriverMonitor.ramptimer, _x.DriverMonitor.dampsuppress))
      length = len(self.GenObjFilter)
      buff.write(_struct_I.pack(length))
      for val1 in self.GenObjFilter:
        _x = val1
        buff.write(_get_struct_I6B().pack(_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck))
      _x = self
      buff.write(_get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B().pack(_x.CCFOcandi.ID, _x.CCFOcandi.VID, _x.CCFOcandi.longpos, _x.CCFOcandi.latpos, _x.CCFOcandi.longspd, _x.CCFOcandi.latspd, _x.CCFOcandi.longacc, _x.CCFOcandi.latacc, _x.CCFOcandi.range, _x.CCFOcandi.rangerate, _x.CCFOcandi.TTC, _x.CCFOcandi.XOLC, _x.CCFOcandi.movestate, _x.CCFOcandi.moveout, _x.CCFOcandi.inpath_before, _x.CCFOcandi.inpath_after, _x.CCFOcandi.AEBconf, _x.CCFOcandi.inpath, _x.CCFOcandi.vfcheck, _x.CCFOcandi.lfcheck, _x.CCFOcandi.age, _x.CCFOcandi.agecheck, _x.CCFOcandi.inpathage, _x.CCFOcandi.inpathcheck, _x.CCFOcandi.TOI, _x.CCFOcandi.warn, _x.CCFOcandi.prefill, _x.CCFOcandi.lowbrake, _x.CCFOcandi.highbrake, _x.CCFOcandi.isvision, _x.CCFOcandi.isfusion, _x.CCFOcandi.isradar, _x.CCFOcandi.timetoturn, _x.CCFOcandi.timetobrake, _x.CCFOcandi.steerflag, _x.CCFOcandi.ref_pos.ref_character, _x.CCFOcandi.ref_pos.pos_x, _x.CCFOcandi.ref_pos.pos_y, _x.CCFOcandi.ref_pos.range, _x.CCFOcandi.ref_pos.heading, _x.CCFOcandi.iba_flag, _x.CCFOcandi.hitdist, _x.CCFOcandi.yawdist, _x.CCFOcandi.driverovertake, _x.CCFOcandi.driverovertake_warn, _x.CCFOcandi.movingleftcount, _x.CCFOcandi.movingrightcount, _x.CCCcandi.ID, _x.CCCcandi.VID, _x.CCCcandi.longpos, _x.CCCcandi.latpos, _x.CCCcandi.longspd, _x.CCCcandi.latspd, _x.CCCcandi.longacc, _x.CCCcandi.latacc, _x.CCCcandi.range, _x.CCCcandi.rangerate, _x.CCCcandi.TTC, _x.CCCcandi.TTL, _x.CCCcandi.colnum, _x.CCCcandi.colx, _x.CCCcandi.coly, _x.CCCcandi.colr, _x.CCCcandi.heading, _x.CCCcandi.currange, _x.CCCcandi.estrange, _x.CCCcandi.TTC_tar, _x.CCCcandi.TTL_tar, _x.CCCcandi.TOI_before, _x.CCCcandi.TOI_after, _x.CCCcandi.inpathcur, _x.CCCcandi.inpathpre, _x.CCCcandi.inpath, _x.CCCcandi.AEBconf, _x.CCCcandi.warn, _x.CCCcandi.prefill, _x.CCCcandi.lowbrake, _x.CCCcandi.highbrake, _x.CCCcandi.isvision, _x.CCCcandi.isfusion, _x.CCCcandi.isradar, _x.CCCcandi.timetoturn, _x.CCCcandi.timetobrake, _x.CCCcandi.steerflag, _x.CCCcandi.ref_pos.ref_character, _x.CCCcandi.ref_pos.pos_x, _x.CCCcandi.ref_pos.pos_y, _x.CCCcandi.ref_pos.range, _x.CCCcandi.ref_pos.heading, _x.CCCcandi.iba_flag, _x.FusionCCRFlag.warning_flag, _x.FusionCCRFlag.prefill_flage, _x.FusionCCRFlag.lowbrake_flag, _x.FusionCCRFlag.highbrake_flag, _x.FusionCCRFlag.unconfirmed_flag, _x.FusionCCRFlag.hold_flag, _x.FusionCCRFlag.lowbrake_age, _x.FusionCCRFlag.highbrake_hold_age, _x.FusionCCRFlag.warnbrake_flag, _x.FusionCCRFlag.readyforIBA, _x.FusionVRUFlag.warning_flag, _x.FusionVRUFlag.prefill_flage, _x.FusionVRUFlag.lowbrake_flag, _x.FusionVRUFlag.highbrake_flag, _x.FusionVRUFlag.unconfirmed_flag, _x.FusionVRUFlag.hold_flag, _x.FusionVRUFlag.lowbrake_age, _x.FusionVRUFlag.highbrake_hold_age, _x.FusionVRUFlag.warnbrake_flag, _x.FusionVRUFlag.readyforIBA, _x.FusionVRURearFlag.warning_flag, _x.FusionVRURearFlag.prefill_flage, _x.FusionVRURearFlag.lowbrake_flag, _x.FusionVRURearFlag.highbrake_flag, _x.FusionVRURearFlag.unconfirmed_flag, _x.FusionVRURearFlag.hold_flag, _x.FusionVRURearFlag.lowbrake_age, _x.FusionVRURearFlag.highbrake_hold_age, _x.FusionVRURearFlag.warnbrake_flag, _x.FusionVRURearFlag.readyforIBA, _x.AebActuFlg.prewarn, _x.AebActuFlg.latentwarn, _x.AebActuFlg.prefill, _x.AebActuFlg.warnbrk, _x.AebActuFlg.softbrk, _x.AebActuFlg.hardbrk, _x.AebActuFlg.iba_req, _x.AebActuFlg.warntype, _x.AebActuFlg.hold_req, _x.AebReserved.aeb_reserved_1, _x.AebReserved.aeb_reserved_2, _x.AebReserved.aeb_reserved_3, _x.AebReserved.aeb_reserved_4, _x.AebReserved.aeb_reserved_5, _x.AebReserved.aeb_reserved_6, _x.AebReserved.aeb_reserved_7, _x.AebReserved.aeb_reserved_8, _x.AebReserved.aeb_reserved_9, _x.AebReserved.aeb_reserved_10, _x.AebReserved.aeb_reserved_11, _x.AebReserved.aeb_reserved_12, _x.AebReserved.aeb_reserved_13, _x.AebReserved.aeb_reserved_14, _x.AebReserved.aeb_reserved_15, _x.AebReserved.aeb_reserved_16, _x.AebReserved.aeb_reserved_17, _x.AebReserved.aeb_reserved_18, _x.AebReserved.aeb_reserved_19, _x.AebReserved.aeb_reserved_20, _x.AebReserved.aeb_reserved_21, _x.AebReserved.aeb_reserved_22, _x.AebReserved.aeb_reserved_23, _x.AebReserved.aeb_reserved_24, _x.AebReserved.aeb_reserved_25, _x.AebReserved.aeb_reserved_26, _x.AebReserved.aeb_reserved_27, _x.AebReserved.aeb_reserved_28, _x.AebReserved.aeb_reserved_29, _x.AebReserved.aeb_reserved_30, _x.AebReserved.aeb_reserved_31, _x.AebReserved.aeb_reserved_32, _x.AebReserved.aeb_reserved_33, _x.AebReserved.aeb_reserved_34, _x.AebReserved.aeb_reserved_35, _x.AebReserved.aeb_reserved_36, _x.AebReserved.aeb_reserved_37, _x.AebReserved.aeb_reserved_38, _x.AebReserved.aeb_reserved_39, _x.AebReserved.aeb_reserved_40, _x.AebReserved.aeb_reserved_41, _x.AebReserved.aeb_reserved_42, _x.AebReserved.aeb_reserved_43, _x.AebReserved.aeb_reserved_44, _x.AebReserved.aeb_reserved_45, _x.AebReserved.aeb_reserved_46, _x.AebReserved.aeb_reserved_47, _x.AebReserved.aeb_reserved_48, _x.AebReserved.aeb_reserved_49, _x.AebReserved.aeb_reserved_50, _x.AebReserved.aeb_reserved_51, _x.AebReserved.aeb_reserved_52, _x.AebReserved.aeb_reserved_53, _x.AebReserved.aeb_reserved_54, _x.AebReserved.aeb_reserved_55, _x.AebReserved.aeb_reserved_56, _x.AebReserved.aeb_reserved_57, _x.AebReserved.aeb_reserved_58, _x.AebReserved.aeb_reserved_59, _x.AebReserved.aeb_reserved_60, _x.AebReserved.aeb_reserved_61, _x.AebReserved.aeb_reserved_62, _x.AebReserved.aeb_reserved_63, _x.AebReserved.aeb_reserved_64, _x.AebReserved.aeb_reserved_65, _x.AebReserved.aeb_reserved_66, _x.AebReserved.aeb_reserved_67, _x.AebReserved.aeb_reserved_68, _x.AebReserved.aeb_reserved_69, _x.AebReserved.aeb_reserved_70, _x.AebReserved.aeb_reserved_71, _x.AebReserved.aeb_reserved_72, _x.AebReserved.aeb_reserved_73, _x.AebReserved.aeb_reserved_74, _x.AebReserved.aeb_reserved_75, _x.AebReserved.aeb_reserved_76, _x.AebReserved.aeb_reserved_77, _x.AebReserved.aeb_reserved_78, _x.AebReserved.aeb_reserved_79, _x.AebReserved.aeb_reserved_80, _x.AebReserved.aeb_reserved_81, _x.AebReserved.aeb_reserved_82, _x.AebReserved.aeb_reserved_83, _x.AebReserved.aeb_reserved_84, _x.AebReserved.aeb_reserved_85, _x.AebReserved.aeb_reserved_86, _x.AebReserved.aeb_reserved_87, _x.AebReserved.aeb_reserved_88, _x.AebReserved.aeb_reserved_89, _x.AebReserved.aeb_reserved_90, _x.AebReserved.aeb_reserved_91, _x.AebReserved.aeb_reserved_92, _x.AebReserved.aeb_reserved_93, _x.AebReserved.aeb_reserved_94, _x.AebReserved.aeb_reserved_95, _x.AebReserved.aeb_reserved_96, _x.AebReserved.aeb_reserved_97, _x.AebReserved.aeb_reserved_98, _x.AebReserved.aeb_reserved_99, _x.AebReserved.aeb_reserved_100, _x.AEBSm.snsrblk_cdn, _x.AEBSm.tmpfail_cdn, _x.AEBSm.permfail_cdn, _x.AEBSm.psv_cdn, _x.AEBSm.aebonff_cdn, _x.AEBSm.factive_cdn, _x.AEBSm.bactive_cdn, _x.AEBSm.stdby_cdn, _x.AEBSm.st, _x.AEBSm.sys_st, _x.FCWSm.snsrblk_cdn, _x.FCWSm.tmpfail_cdn, _x.FCWSm.permfail_cdn, _x.FCWSm.psv_cdn, _x.FCWSm.aebonff_cdn, _x.FCWSm.factive_cdn, _x.FCWSm.bactive_cdn, _x.FCWSm.stdby_cdn, _x.FCWSm.st, _x.FCWSm.sys_st, _x.AebRearSm.off_cdn, _x.AebRearSm.stdby_cdn, _x.AebRearSm.psv_cdn, _x.AebRearSm.psv_cdn_bit, _x.AebRearSm.fail_cdn, _x.AebRearSm.active_cdn))
      _x = self
      buff.write(_get_struct_I3BI2BI4B11I().pack(_x.AebRearSm.sm_state, _x.FcwRearSm.off_cdn, _x.FcwRearSm.stdby_cdn, _x.FcwRearSm.psv_cdn, _x.FcwRearSm.psv_cdn_bit, _x.FcwRearSm.fail_cdn, _x.FcwRearSm.active_cdn, _x.FcwRearSm.sm_state, _x.FuncSuppress.Aeb_Suppress, _x.FuncSuppress.Fcw_Suppress, _x.FuncSuppress.Aebrear_Suppress, _x.FuncSuppress.Fcwrear_Suppress, _x.AebDiag.FCTsTopicState, _x.AebDiag.AebTopicState, _x.AebDiag.FcwTopicState, _x.AebDiag.TopicLoss, _x.AebDiag.TopicNoInit, _x.AebDiag.AebFaultSt, _x.AebDiag.FcwFaultSt, _x.AebDiag.AebFimIndex, _x.AebDiag.FcwFimIndex, _x.AebDiag.AebRearFaultSt, _x.AebDiag.AebRearFimIndex))
      length = len(self.AebDiag.AebFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.AebDiag.AebFault.tostring())
      length = len(self.AebDiag.FcwFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.AebDiag.FcwFault.tostring())
      length = len(self.AebDiag.AebRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.AebDiag.AebRearFault.tostring())
      length = len(self.AebDiag.FcwRearFault)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.AebDiag.FcwRearFault.tostring())
      _x = self
      buff.write(_get_struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f().pack(_x.AebDiag.FWfailsafe, _x.AebDiag.FNfailsafe, _x.AebDiag.Lidarfailsafe, _x.AebDiag.Rearfailsafe, _x.AebMode.RearEnable, _x.AebMode.ShadowMode, _x.AebMode.ShadowModeSoft, _x.AebMode.HilMode, _x.AESCCRcandi.ID, _x.AESCCRcandi.VID, _x.AESCCRcandi.range, _x.AESCCRcandi.rangerate, _x.AESCCRcandi.TTC, _x.AESCCRcandi.TTB_tt, _x.AESCCRcandi.TTB_valid, _x.AESCCRcandi.TTT_left_tt, _x.AESCCRcandi.TTT_left_valid, _x.AESCCRcandi.TTT_right_tt, _x.AESCCRcandi.TTT_right_valid, _x.AESCCRcandi.closeleft_posx, _x.AESCCRcandi.closeleft_posy, _x.AESCCRcandi.closeleft_curx, _x.AESCCRcandi.closeleft_cury, _x.AESCCRcandi.closeleft_latest, _x.AESCCRcandi.closeright_posx, _x.AESCCRcandi.closeright_posy, _x.AESCCRcandi.closeright_curx, _x.AESCCRcandi.closeright_cury, _x.AESCCRcandi.closeright_latest, _x.AESCCRcandi.remoteleft_posx, _x.AESCCRcandi.remoteleft_posy, _x.AESCCRcandi.remoteleft_curx, _x.AESCCRcandi.remoteleft_cury, _x.AESCCRcandi.remoteleft_latest, _x.AESCCRcandi.remoteright_posx, _x.AESCCRcandi.remoteright_posy, _x.AESCCRcandi.remoteright_curx, _x.AESCCRcandi.remoteright_cury, _x.AESCCRcandi.remoteright_latest, _x.AESCCRcandi.center_posx, _x.AESCCRcandi.center_posy, _x.AESCCRcandi.center_curx, _x.AESCCRcandi.center_cury, _x.AESCCRcandi.center_latest, _x.AESCCRcandi.longpos, _x.AESCCRcandi.latpos, _x.AESCCRcandi.XOLC, _x.AESCCRcandi.latest, _x.AESCCRcandi.closest_corner, _x.AESCCRcandi.close_corner_est, _x.AESCCRcandi.inpath, _x.AESCCRcandi.inpathcur, _x.AESCCRcandi.inpathpre, _x.AESCCRcandi.inpathage, _x.AESCCRcandi.inpathcheck, _x.AESCCRcandi.isfusion, _x.AESCCRcandi.isvision, _x.AESCCRcandi.isradar, _x.AESCCRcandi.toi, _x.AESCCRcandi.isoncoming, _x.AESCCRcandi.AEBconf, _x.AESCCRcandi.steerflag, _x.AESCCRcandi.steerdirection, _x.AESCCRcandi.ref_pos.ref_character, _x.AESCCRcandi.ref_pos.pos_x, _x.AESCCRcandi.ref_pos.pos_y, _x.AESCCRcandi.ref_pos.range, _x.AESCCRcandi.ref_pos.heading, _x.CloseAESTarget.ID, _x.CloseAESTarget.VID, _x.CloseAESTarget.range, _x.CloseAESTarget.rangerate, _x.CloseAESTarget.TTC, _x.CloseAESTarget.TTB_tt, _x.CloseAESTarget.TTB_valid, _x.CloseAESTarget.TTT_left_tt, _x.CloseAESTarget.TTT_left_valid, _x.CloseAESTarget.TTT_right_tt, _x.CloseAESTarget.TTT_right_valid, _x.CloseAESTarget.closeleft_posx, _x.CloseAESTarget.closeleft_posy, _x.CloseAESTarget.closeleft_curx, _x.CloseAESTarget.closeleft_cury, _x.CloseAESTarget.closeleft_latest, _x.CloseAESTarget.closeright_posx, _x.CloseAESTarget.closeright_posy, _x.CloseAESTarget.closeright_curx, _x.CloseAESTarget.closeright_cury, _x.CloseAESTarget.closeright_latest, _x.CloseAESTarget.remoteleft_posx, _x.CloseAESTarget.remoteleft_posy, _x.CloseAESTarget.remoteleft_curx, _x.CloseAESTarget.remoteleft_cury, _x.CloseAESTarget.remoteleft_latest, _x.CloseAESTarget.remoteright_posx, _x.CloseAESTarget.remoteright_posy, _x.CloseAESTarget.remoteright_curx, _x.CloseAESTarget.remoteright_cury, _x.CloseAESTarget.remoteright_latest, _x.CloseAESTarget.center_posx, _x.CloseAESTarget.center_posy, _x.CloseAESTarget.center_curx, _x.CloseAESTarget.center_cury, _x.CloseAESTarget.center_latest, _x.CloseAESTarget.longpos, _x.CloseAESTarget.latpos, _x.CloseAESTarget.XOLC, _x.CloseAESTarget.latest, _x.CloseAESTarget.closest_corner, _x.CloseAESTarget.close_corner_est, _x.CloseAESTarget.inpath, _x.CloseAESTarget.inpathcur, _x.CloseAESTarget.inpathpre, _x.CloseAESTarget.inpathage, _x.CloseAESTarget.inpathcheck, _x.CloseAESTarget.isfusion, _x.CloseAESTarget.isvision, _x.CloseAESTarget.isradar, _x.CloseAESTarget.toi, _x.CloseAESTarget.isoncoming, _x.CloseAESTarget.AEBconf, _x.CloseAESTarget.steerflag, _x.CloseAESTarget.steerdirection, _x.CloseAESTarget.ref_pos.ref_character, _x.CloseAESTarget.ref_pos.pos_x, _x.CloseAESTarget.ref_pos.pos_y, _x.CloseAESTarget.ref_pos.range, _x.CloseAESTarget.ref_pos.heading, _x.AESPathCheck.plan_valid, _x.AESPathCheck.target_valid, _x.AESPathCheck.rout_valid, _x.AESPathCheck.reservetime, _x.AESPathCheck.pnc_c0, _x.AESPathCheck.pnc_c1, _x.AESPathCheck.pnc_c2, _x.AESPathCheck.pnc_c3, _x.AESPathCheck.pnc_c4, _x.AESPathCheck.pnc_c5, _x.AESPathCheck.crash_id, _x.AESPathCheck.crash_lane, _x.AESPathCheck.aessteerangle, _x.AESPathCheck.aespncst, _x.AESPathCheck.host_left_lane.path_c0, _x.AESPathCheck.host_left_lane.path_c1, _x.AESPathCheck.host_left_lane.path_c2, _x.AESPathCheck.host_left_lane.path_c3, _x.AESPathCheck.host_left_lane.isvalid, _x.AESPathCheck.host_left_lane.path_type, _x.AESPathCheck.host_left_lane.path_color, _x.AESPathCheck.host_left_lane.character, _x.AESPathCheck.host_right_lane.path_c0, _x.AESPathCheck.host_right_lane.path_c1, _x.AESPathCheck.host_right_lane.path_c2, _x.AESPathCheck.host_right_lane.path_c3, _x.AESPathCheck.host_right_lane.isvalid, _x.AESPathCheck.host_right_lane.path_type, _x.AESPathCheck.host_right_lane.path_color, _x.AESPathCheck.host_right_lane.character, _x.AESPathCheck.left_edge.path_c0, _x.AESPathCheck.left_edge.path_c1, _x.AESPathCheck.left_edge.path_c2, _x.AESPathCheck.left_edge.path_c3, _x.AESPathCheck.left_edge.isvalid, _x.AESPathCheck.left_edge.path_type, _x.AESPathCheck.left_edge.path_color, _x.AESPathCheck.left_edge.character, _x.AESPathCheck.right_edge.path_c0, _x.AESPathCheck.right_edge.path_c1, _x.AESPathCheck.right_edge.path_c2, _x.AESPathCheck.right_edge.path_c3, _x.AESPathCheck.right_edge.isvalid, _x.AESPathCheck.right_edge.path_type, _x.AESPathCheck.right_edge.path_color, _x.AESPathCheck.right_edge.character, _x.AESPathCheck.host_lpp.path_c0, _x.AESPathCheck.host_lpp.path_c1, _x.AESPathCheck.host_lpp.path_c2, _x.AESPathCheck.host_lpp.path_c3, _x.AESPathCheck.host_lpp.isvalid, _x.AESPathCheck.host_lpp.width, _x.AESPlanPath.root_path.path_c0, _x.AESPlanPath.root_path.path_c1, _x.AESPlanPath.root_path.path_c2, _x.AESPlanPath.root_path.path_c3, _x.AESPlanPath.root_path.path_c4, _x.AESPlanPath.root_path.path_c5, _x.AESPlanPath.root_path.curvature, _x.AESPlanPath.root_path.dcurv, _x.AESPlanPath.root_path.expect_lat, _x.AESPlanPath.root_path.expect_long, _x.AESPlanPath.root_path.isvalid, _x.AESPlanPath.root_path.rout_cost, _x.AESPlanPath.root_path.max_ay, _x.AESPlanPath.aesplanactv, _x.AESPlanPath.ltrldstlacntr, _x.AESPlanPath.egolawdth, _x.AESPlanPath.agvehlanecntr, _x.AESPlanPath.lacurv, _x.AESPlanPath.ladcurv, _x.AESPlanPath.vehspdkph, _x.AESPlanPath.dispvehspdkph))
      length = len(self.AESPlanPath.better_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.AESPlanPath.better_path:
        _x = val1
        buff.write(_get_struct_10fI2f().pack(_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay))
      _x = self
      buff.write(_get_struct_fI7f().pack(_x.fAebOut.ebhpInfo.emncInfo.maneuverProb, _x.fAebOut.ebhpInfo.emncInfo.maneuver, _x.fAebOut.ebhpInfo.emncInfo.enterWeight, _x.fAebOut.ebhpInfo.emncInfo.exitWeight, _x.fAebOut.ebhpInfo.emncInfo.reserved, _x.fAebOut.ebhpInfo.etjpInfo.curvature, _x.fAebOut.ebhpInfo.etjpInfo.curvatureRate, _x.fAebOut.ebhpInfo.etjpInfo.roc, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.accel))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.reserved.tostring())
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCa.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCa.reserved.tostring())
      _x = self.fAebOut.ebhpInfo.etjpInfo.trajCv.accel
      buff.write(_get_struct_f().pack(_x))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.t))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.reserved.tostring())
      length = len(self.fAebOut.ebhpInfo.etjpInfo.trajCv.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.trajCv.reserved.tostring())
      length = len(self.fAebOut.ebhpInfo.etjpInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.reserved.tostring())
      _x = self
      buff.write(_get_struct_10fI().pack(_x.fAebOut.ebhpInfo.etjpInfo.xEnd, _x.fAebOut.ebhpInfo.etjpInfo.tEnd, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c0, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c1, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c2, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c3, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a0, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a1, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a2, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a3, _x.fAebOut.ebhpInfo.etjpInfo.numSeg))
      length = len(self.fAebOut.ebhpInfo.etjpInfo.xEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.xEndSegment.tostring())
      length = len(self.fAebOut.ebhpInfo.etjpInfo.tEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInfo.etjpInfo.tEndSegment.tostring())
      length = len(self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.c0, _x.c1, _x.c2, _x.c3))
      length = len(self.fAebOut.objOfInterestMap.car)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.car:
        _v48 = val1.objInfo
        _x = _v48
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v49 = val1.obhcInfo
        _x = _v49
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v50 = val1.othaInfo
        _x = _v50
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      length = len(self.fAebOut.objOfInterestMap.pedstrain)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.pedstrain:
        _v51 = val1.objInfo
        _x = _v51
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v52 = val1.obhcInfo
        _x = _v52
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v53 = val1.othaInfo
        _x = _v53
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      length = len(self.fAebOut.objOfInterestMap.bicyclist)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.bicyclist:
        _v54 = val1.objInfo
        _x = _v54
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v55 = val1.obhcInfo
        _x = _v55
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v56 = val1.othaInfo
        _x = _v56
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      length = len(self.fAebOut.objOfInterestMap.motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.motor:
        _v57 = val1.objInfo
        _x = _v57
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v58 = val1.obhcInfo
        _x = _v58
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v59 = val1.othaInfo
        _x = _v59
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      length = len(self.fAebOut.objOfInterestMap.obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objOfInterestMap.obstacle:
        _v60 = val1.objInfo
        _x = _v60
        buff.write(_get_struct_4I17f6I().pack(_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor))
        _v61 = val1.obhcInfo
        _x = _v61
        buff.write(_get_struct_3fI().pack(_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel))
        _v62 = val1.othaInfo
        _x = _v62
        buff.write(_get_struct_3fB().pack(_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_4I17f6I3fI3fB().pack(_x.fAebOut.crenInfo.objInfo.id, _x.fAebOut.crenInfo.objInfo.visionId, _x.fAebOut.crenInfo.objInfo.radarId, _x.fAebOut.crenInfo.objInfo.age, _x.fAebOut.crenInfo.objInfo.longDist, _x.fAebOut.crenInfo.objInfo.latDist, _x.fAebOut.crenInfo.objInfo.longVel, _x.fAebOut.crenInfo.objInfo.latVel, _x.fAebOut.crenInfo.objInfo.longAccel, _x.fAebOut.crenInfo.objInfo.latAccel, _x.fAebOut.crenInfo.objInfo.heading, _x.fAebOut.crenInfo.objInfo.curvature, _x.fAebOut.crenInfo.objInfo.existConfidence, _x.fAebOut.crenInfo.objInfo.length, _x.fAebOut.crenInfo.objInfo.width, _x.fAebOut.crenInfo.objInfo.longDistStd, _x.fAebOut.crenInfo.objInfo.latDistStd, _x.fAebOut.crenInfo.objInfo.longVelStd, _x.fAebOut.crenInfo.objInfo.latVelStd, _x.fAebOut.crenInfo.objInfo.longAccelStd, _x.fAebOut.crenInfo.objInfo.latAccelStd, _x.fAebOut.crenInfo.objInfo.motionStatus, _x.fAebOut.crenInfo.objInfo.detectionSensor, _x.fAebOut.crenInfo.objInfo.type, _x.fAebOut.crenInfo.objInfo.refPoint, _x.fAebOut.crenInfo.objInfo.trackerStatus, _x.fAebOut.crenInfo.objInfo.visionDetectionSnesor, _x.fAebOut.crenInfo.obhcInfo.hypoProb, _x.fAebOut.crenInfo.obhcInfo.collProb, _x.fAebOut.crenInfo.obhcInfo.ttb, _x.fAebOut.crenInfo.obhcInfo.hypoLabel, _x.fAebOut.crenInfo.othaInfo.aLgtNec, _x.fAebOut.crenInfo.othaInfo.aLatNec, _x.fAebOut.crenInfo.othaInfo.ttc, _x.fAebOut.crenInfo.othaInfo.inPathNow))
      length = len(self.fAebOut.crenInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.crenInfo.reserved.tostring())
      _x = self
      buff.write(_get_struct_11B2f11B5IfB2I4B6I3f().pack(_x.fAebOut.acdnInfo.flgPreWarnTrigger, _x.fAebOut.acdnInfo.flgJerkTrigger, _x.fAebOut.acdnInfo.flgPrefillTrigger, _x.fAebOut.acdnInfo.flgPartialBrkTrigger, _x.fAebOut.acdnInfo.flgFullBrkTrigger, _x.fAebOut.acdnInfo.flgEbaTrigger, _x.fAebOut.acdnInfo.flgDangerRelease, _x.fAebOut.acdnInfo.flgObjInsideBlindZoom, _x.fAebOut.acdnInfo.flgFirstObjDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnObjTrigger, _x.fAebOut.tscdInfo.spdAebReduce, _x.fAebOut.tscdInfo.spdJerkReduce, _x.fAebOut.tscdInfo.flgDriverOverride, _x.fAebOut.tscdInfo.flgDriverBrake, _x.fAebOut.tscdInfo.flgDriveForward, _x.fAebOut.tscdInfo.flgDoorOpen, _x.fAebOut.tscdInfo.flgBeltWarn, _x.fAebOut.tscdInfo.flgVehEnable, _x.fAebOut.tscdInfo.flgChassisIntervince, _x.fAebOut.tscdInfo.flgBrakeOverHeat, _x.fAebOut.tscdInfo.flgEscOff, _x.fAebOut.tscdInfo.flgSysFault, _x.fAebOut.tscdInfo.flgPathFeasible, _x.fAebOut.stmeInfo.fcwStatus, _x.fAebOut.stmeInfo.aebBrkStatus, _x.fAebOut.stmeInfo.ebaStatus, _x.fAebOut.rqabInfo.fcwTargetId, _x.fAebOut.rqabInfo.aebTargetId, _x.fAebOut.rqabInfo.aebDecelReq, _x.fAebOut.rqabInfo.aebReq, _x.fAebOut.rqabInfo.aebTargetType, _x.fAebOut.rqabInfo.aebStatus, _x.fAebOut.rqabInfo.abpReq, _x.fAebOut.rqabInfo.awbReq, _x.fAebOut.rqabInfo.ebaReq, _x.fAebOut.rqabInfo.fcwReq, _x.fAebOut.rqabInfo.fcwTargetType, _x.fAebOut.rqabInfo.fcwStatus, _x.fAebOut.taDiagBusSignals.NumberOfValidCar, _x.fAebOut.taDiagBusSignals.NumberOfValidMotor, _x.fAebOut.taDiagBusSignals.NumberOfValidPed, _x.fAebOut.taDiagBusSignals.NumberOfValidBic, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvt, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvtRate, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.filteredEgoALgt))
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.dstInTrjctry)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.dstInTrjctry.tostring())
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLgt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLgt.tostring())
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLat.tostring())
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.cosOfHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.cosOfHeading.tostring())
      length = len(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.sinOfHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.sinOfHeading.tostring())
      _x = self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.lowPAx
      buff.write(_get_struct_f().pack(_x))
      length = len(self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec:
        _v63 = val1.diagBusForSortedObjectAeb
        _x = _v63
        buff.write(_get_struct_2IB5fI().pack(_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex))
        length = len(_v63.predCenPosnLgt)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.predCenPosnLgt.tostring())
        length = len(_v63.predCenPosnLat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.predCenPosnLat.tostring())
        length = len(_v63.predCosHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.predCosHeading.tostring())
        length = len(_v63.predSinHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.predSinHeading.tostring())
        _x = _v63
        buff.write(_get_struct_I4B5f().pack(_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi))
        length = len(_v63.opCond1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v63.opCond1.tostring())
        length = len(_v63.opCond2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v63.opCond2.tostring())
        length = len(_v63.opCond3)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v63.opCond3.tostring())
        length = len(_v63.opCond4)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v63.opCond4.tostring())
        _x = _v63
        buff.write(_get_struct_4f2I().pack(_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex))
        length = len(_v63.edgeIndex)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v63.edgeIndex.tostring())
        length = len(_v63.maxCLeIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v63.maxCLeIdx.tostring())
        length = len(_v63.minCRiIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v63.minCRiIdx.tostring())
        length = len(_v63.taLateralThreatMatrixOpl)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v63.taLateralThreatMatrixOpl.tostring())
        length = len(_v63.objLongPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.objLongPosnRelToHost.tostring())
        length = len(_v63.objLatPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.objLatPosnRelToHost.tostring())
        length = len(_v63.objLongSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.objLongSpanRelToHost.tostring())
        length = len(_v63.objLatSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.objLatSpanRelToHost.tostring())
        length = len(_v63.hostLongPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.hostLongPosnRelToObj.tostring())
        length = len(_v63.hostLatPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.hostLatPosnRelToObj.tostring())
        length = len(_v63.hostLongSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.hostLongSpanRelToObj.tostring())
        length = len(_v63.hostLatSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.hostLatSpanRelToObj.tostring())
        length = len(_v63.isValidUpdateForLongThreat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v63.isValidUpdateForLongThreat.tostring())
        _x = _v63
        buff.write(_get_struct_3fI2f().pack(_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth))
        length = len(_v63.xEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.xEdges.tostring())
        length = len(_v63.yEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.yEdges.tostring())
        length = len(_v63.egoMotionTime)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.egoMotionTime.tostring())
        length = len(_v63.egoXc)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.egoXc.tostring())
        _x = _v63
        buff.write(_get_struct_f2I().pack(_x.ttp, _x.fusionSource, _x.brkIndex))
        length = len(_v63.objLongDistNear)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.objLongDistNear.tostring())
        length = len(_v63.inFwdPathResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v63.inFwdPathResampled.tostring())
        length = len(_v63.timeVecResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v63.timeVecResampled.tostring())
        _x = _v63
        buff.write(_get_struct_4f5B5f9B5f().pack(_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv))
        _x = val1
        buff.write(_get_struct_I4fB().pack(_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj))
      length = len(self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec:
        _v64 = val1.diagBusForSortedObjectAeb
        _x = _v64
        buff.write(_get_struct_2IB5fI().pack(_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex))
        length = len(_v64.predCenPosnLgt)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.predCenPosnLgt.tostring())
        length = len(_v64.predCenPosnLat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.predCenPosnLat.tostring())
        length = len(_v64.predCosHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.predCosHeading.tostring())
        length = len(_v64.predSinHeading)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.predSinHeading.tostring())
        _x = _v64
        buff.write(_get_struct_I4B5f().pack(_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi))
        length = len(_v64.opCond1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v64.opCond1.tostring())
        length = len(_v64.opCond2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v64.opCond2.tostring())
        length = len(_v64.opCond3)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v64.opCond3.tostring())
        length = len(_v64.opCond4)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v64.opCond4.tostring())
        _x = _v64
        buff.write(_get_struct_4f2I().pack(_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex))
        length = len(_v64.edgeIndex)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v64.edgeIndex.tostring())
        length = len(_v64.maxCLeIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v64.maxCLeIdx.tostring())
        length = len(_v64.minCRiIdx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v64.minCRiIdx.tostring())
        length = len(_v64.taLateralThreatMatrixOpl)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v64.taLateralThreatMatrixOpl.tostring())
        length = len(_v64.objLongPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.objLongPosnRelToHost.tostring())
        length = len(_v64.objLatPosnRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.objLatPosnRelToHost.tostring())
        length = len(_v64.objLongSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.objLongSpanRelToHost.tostring())
        length = len(_v64.objLatSpanRelToHost)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.objLatSpanRelToHost.tostring())
        length = len(_v64.hostLongPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.hostLongPosnRelToObj.tostring())
        length = len(_v64.hostLatPosnRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.hostLatPosnRelToObj.tostring())
        length = len(_v64.hostLongSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.hostLongSpanRelToObj.tostring())
        length = len(_v64.hostLatSpanRelToObj)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.hostLatSpanRelToObj.tostring())
        length = len(_v64.isValidUpdateForLongThreat)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v64.isValidUpdateForLongThreat.tostring())
        _x = _v64
        buff.write(_get_struct_3fI2f().pack(_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth))
        length = len(_v64.xEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.xEdges.tostring())
        length = len(_v64.yEdges)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.yEdges.tostring())
        length = len(_v64.egoMotionTime)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.egoMotionTime.tostring())
        length = len(_v64.egoXc)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.egoXc.tostring())
        _x = _v64
        buff.write(_get_struct_f2I().pack(_x.ttp, _x.fusionSource, _x.brkIndex))
        length = len(_v64.objLongDistNear)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.objLongDistNear.tostring())
        length = len(_v64.inFwdPathResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v64.inFwdPathResampled.tostring())
        length = len(_v64.timeVecResampled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v64.timeVecResampled.tostring())
        _x = _v64
        buff.write(_get_struct_4f5B5f9B5f().pack(_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv))
        _x = val1
        buff.write(_get_struct_I4fB().pack(_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj))
      _x = self
      buff.write(_get_struct_9fIB().pack(_x.fAebOut.taDiagBusSignals.jerkLatAbsMax, _x.fAebOut.taDiagBusSignals.accelLatAbsMax, _x.fAebOut.taDiagBusSignals.crvtRateAbsMax, _x.fAebOut.taDiagBusSignals.crvtAbsMax, _x.fAebOut.taDiagBusSignals.jerkLatAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsCmft, _x.fAebOut.taDiagBusSignals.crvtRateAbsCmft, _x.fAebOut.taDiagBusSignals.crvtAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsOnComingBrking, _x.fAebOut.taDiagBusSignals.latPosnRoadConf, _x.fAebOut.taDiagBusSignals.TAMode))
      length = len(self.fAebOut.taDiagBusSignals.reservedTaDebug)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.taDiagBusSignals.reservedTaDebug.tostring())
      _x = self
      buff.write(_get_struct_2f4BIB().pack(_x.fAebOut.ebhpInnerInfo.yawRateNoise.bias, _x.fAebOut.ebhpInnerInfo.yawRateNoise.std, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate, _x.fAebOut.ebhpInnerInfo.yawRateLearnState, _x.fAebOut.ebhpInnerInfo.flgEsitmateEnable))
      length = len(self.fAebOut.ebhpInnerInfo.modelConfidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.modelConfidence.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.modelTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.modelTransMatrix.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.statePriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.statePriorHf.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.covPriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.covPriorHf.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.statePostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.statePostHf.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.covPostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.covPostHf.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.statePriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.statePriorCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.covPriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.covPriorCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.statePostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.statePostCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.covPostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.covPostCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.residualCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.residualCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.sysUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.sysUncertaintyCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.procUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.procUncertaintyCkv.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.statePriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.statePriorCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.covPriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.covPriorCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.statePostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.statePostCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.covPostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.covPostCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.residualCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.residualCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.sysUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.sysUncertaintyCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.procUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.procUncertaintyCka.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.stateTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.stateTransMatrix.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.measValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.measValues.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.measMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.measMatrix.tostring())
      length = len(self.fAebOut.ebhpInnerInfo.measUncertainty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ebhpInnerInfo.measUncertainty.tostring())
      _x = self
      buff.write(_get_struct_2f4I().pack(_x.fAebOut.ebhpInnerInfo.curveCoeff.curvature, _x.fAebOut.ebhpInnerInfo.curveCoeff.curvatureRate, _x.fAebOut.ooifInnerInfo.allObjNum, _x.fAebOut.ooifInnerInfo.objPlausNum, _x.fAebOut.ooifInnerInfo.carCandiNum, _x.fAebOut.ooifInnerInfo.vruCandiNum))
      length = len(self.fAebOut.ooifInnerInfo.objPlausStatus)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.objPlausStatus:
        _x = val1
        buff.write(_get_struct_2If().pack(_x.id, _x.codeWord, _x.reserved))
      length = len(self.fAebOut.ooifInnerInfo.objPlausVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.objPlausVec:
        _x = val1
        buff.write(_get_struct_I7fBf().pack(_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance))
        _v65 = val1.egoBoxBase
        length = len(_v65.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v65.x.tostring())
        length = len(_v65.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v65.y.tostring())
        length = len(_v65.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v65.reserved.tostring())
        _v66 = val1.egoBoxLengthExt
        length = len(_v66.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v66.x.tostring())
        length = len(_v66.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v66.y.tostring())
        length = len(_v66.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v66.reserved.tostring())
        _v67 = val1.egoBoxExt
        length = len(_v67.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v67.x.tostring())
        length = len(_v67.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v67.y.tostring())
        length = len(_v67.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v67.reserved.tostring())
        _v68 = val1.objBoxBase
        length = len(_v68.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v68.x.tostring())
        length = len(_v68.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v68.y.tostring())
        length = len(_v68.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v68.reserved.tostring())
        _v69 = val1.ObjBoxExt
        length = len(_v69.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v69.x.tostring())
        length = len(_v69.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v69.y.tostring())
        length = len(_v69.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v69.reserved.tostring())
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
        _x = val1.objSensorTotalExt
        buff.write(_get_struct_f().pack(_x))
      length = len(self.fAebOut.ooifInnerInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.ooifInnerInfo.reserved.tostring())
      length = len(self.fAebOut.ooifInnerInfo.objPlausIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.ooifInnerInfo.objPlausIds.tostring())
      length = len(self.fAebOut.ooifInnerInfo.carCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.carCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I19f().pack(_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading))
      length = len(self.fAebOut.ooifInnerInfo.vruCandidatesVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.ooifInnerInfo.vruCandidatesVec:
        _x = val1
        buff.write(_get_struct_3I38f5B().pack(_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch))
      length = len(self.fAebOut.crenInnerInfo.objPruneId)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.crenInnerInfo.objPruneId.tostring())
      _x = self
      buff.write(_get_struct_5I().pack(_x.fAebOut.crenInnerInfo.targetByPriorId, _x.fAebOut.crenInnerInfo.targetByTtcId, _x.fAebOut.crenInnerInfo.targetByDistId, _x.fAebOut.crenInnerInfo.targetByPostId, _x.fAebOut.crenInnerInfo.targetOldId))
      length = len(self.fAebOut.crenInnerInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.crenInnerInfo.reserved.tostring())
      _x = self
      buff.write(_get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().pack(_x.fAebOut.carInfo.vLgt, _x.fAebOut.carInfo.vLat, _x.fAebOut.carInfo.aLgt, _x.fAebOut.carInfo.aLat, _x.fAebOut.carInfo.yawRate, _x.fAebOut.carInfo.yawRateValid, _x.fAebOut.carInfo.aLgtValid, _x.fAebOut.carInfo.aLatValid, _x.fAebOut.carInfo.motionStatus, _x.fAebOut.carInfo.speed, _x.fAebOut.carInfo.spdWhlFl, _x.fAebOut.carInfo.spdWhlFr, _x.fAebOut.carInfo.spdWhlRl, _x.fAebOut.carInfo.spdWhlRr, _x.fAebOut.carInfo.spdWhlFlValid, _x.fAebOut.carInfo.spdWhlFrValid, _x.fAebOut.carInfo.spdWhlRlValid, _x.fAebOut.carInfo.spdWhlRrValid, _x.fAebOut.carInfo.dirWhlFl, _x.fAebOut.carInfo.dirWhlFr, _x.fAebOut.carInfo.dirWhlRl, _x.fAebOut.carInfo.dirWhlRr, _x.fAebOut.carInfo.brkPedalTravel, _x.fAebOut.carInfo.masterCylPress, _x.fAebOut.carInfo.aLgtDriverBrkReq, _x.fAebOut.carInfo.brkStatus, _x.fAebOut.carInfo.masterCylPressValid, _x.fAebOut.carInfo.dtcActive, _x.fAebOut.carInfo.tcsActive, _x.fAebOut.carInfo.vdcActive, _x.fAebOut.carInfo.escOverHeat, _x.fAebOut.carInfo.escFault, _x.fAebOut.carInfo.escSwitch, _x.fAebOut.carInfo.strAngle, _x.fAebOut.carInfo.strSpeed, _x.fAebOut.carInfo.pinAngle, _x.fAebOut.carInfo.strAngleValid, _x.fAebOut.carInfo.pinAngleValid, _x.fAebOut.carInfo.epsFault, _x.fAebOut.carInfo.accelPedalPos, _x.fAebOut.carInfo.actGearValid, _x.fAebOut.carInfo.accelPedalPosValid, _x.fAebOut.carInfo.accStatus, _x.fAebOut.carInfo.actGear, _x.fAebOut.carInfo.vehicleState, _x.fAebOut.carInfo.vehicleMode, _x.fAebOut.carInfo.doorDriver, _x.fAebOut.carInfo.doorFrontPassenger, _x.fAebOut.carInfo.doorRearLeft, _x.fAebOut.carInfo.doorRearRight, _x.fAebOut.carInfo.hoodStatus, _x.fAebOut.carInfo.trailerStatus, _x.fAebOut.carInfo.turnLeftLight, _x.fAebOut.carInfo.turnRightLight, _x.fAebOut.carInfo.beltWarnDriver, _x.fAebOut.carInfo.beltWarnFrontPassenger, _x.fAebOut.carInfo.beltRearLeft, _x.fAebOut.carInfo.beltRearMid, _x.fAebOut.carInfo.beltRearRight, _x.fAebOut.carInfo.aebSetting, _x.fAebOut.carInfo.fcwSetting, _x.fAebOut.carInfo.length, _x.fAebOut.carInfo.width, _x.fAebOut.carInfo.axisLength, _x.fAebOut.carInfo.rearAxisToFrontEnd, _x.fAebOut.carInfo.rearTrackWidth, _x.fAebOut.carInfo.steerRatio, _x.fAebOut.carInfo.cogToFrontAxis, _x.fAebOut.carInfo.cogToRearAxis, _x.fAebOut.carInfo.frontCornStiff, _x.fAebOut.carInfo.rearCornStiff))
      length = len(self.fAebOut.objInfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.objInfo:
        _x = val1
        buff.write(_get_struct_4I2BiI().pack(_x.OBJ_Object_Count, _x.OBJ_VRU_Count, _x.OBJ_VD_Count, _x.OBJ_CIPV_ID, _x.OBJ_CIPV_Lost, _x.OBJ_Is_CCI, _x.OBJ_CCI_Side, _x.OBJ_CCI_ID))
      _x = self
      buff.write(_get_struct_f4Bf2I6fI4f().pack(_x.fAebOut.acdnInnerInfo.thdFcwTtcCompens, _x.fAebOut.acdnInnerInfo.isSafeDistance, _x.fAebOut.acdnInnerInfo.isSafeLgtRelSpd, _x.fAebOut.acdnInnerInfo.isSafeLgtRelAcc, _x.fAebOut.acdnInnerInfo.dangerRelease, _x.fAebOut.acdnInnerInfo.objLongDistCorr, _x.fAebOut.acdnInnerInfo.fcwCodeWord, _x.fAebOut.acdnInnerInfo.aebCodeWord, _x.fAebOut.acdnInnerInfo.crvtReqdLe, _x.fAebOut.acdnInnerInfo.crvtReqdRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxRi, _x.fAebOut.acdnInnerInfo.oldGearAct, _x.fAebOut.acdnInnerInfo.objLatDistGap, _x.fAebOut.acdnInnerInfo.flgLatEscapeLe, _x.fAebOut.acdnInnerInfo.flgLatEscapeRi, _x.fAebOut.acdnInnerInfo.isProceedDangerRelease))
      length = len(self.fAebOut.acdnInnerInfo.floatAcdnInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.acdnInnerInfo.floatAcdnInnerReserve.tostring())
      length = len(self.fAebOut.acdnInnerInfo.intAcdnInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.acdnInnerInfo.intAcdnInnerReserve.tostring())
      length = len(self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve.tostring())
      _x = self
      buff.write(_get_struct_3B2f7B2f().pack(_x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverIntvFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverStrFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLe, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqRi))
      length = len(self.fAebOut.acdnInnerInfo.hooaInnerInfo.floatHooaInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.acdnInnerInfo.hooaInnerInfo.floatHooaInnerReserve.tostring())
      length = len(self.fAebOut.acdnInnerInfo.hooaInnerInfo.intHooaInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.acdnInnerInfo.hooaInnerInfo.intHooaInnerReserve.tostring())
      length = len(self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve.tostring())
      _x = self
      buff.write(_get_struct_4fB4I2B().pack(_x.fAebOut.acdnInnerInfo.aFcwALatCritByDrvr, _x.fAebOut.acdnInnerInfo.crvtFcwALatCritByDrvrThd, _x.fAebOut.acdnInnerInfo.tTtcFcwTriger, _x.fAebOut.acdnInnerInfo.facDriverIntvFcw, _x.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap, _x.fAebOut.stmeInnerInfo.aebPassiveCodeWord, _x.fAebOut.stmeInnerInfo.aebTermintCodeWord, _x.fAebOut.stmeInnerInfo.activeCounter, _x.fAebOut.stmeInnerInfo.passiveCounter, _x.fAebOut.stmeInnerInfo.aebSwitchFlag, _x.fAebOut.stmeInnerInfo.faultFlag))
      length = len(self.fAebOut.stmeInnerInfo.floatStmeInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.stmeInnerInfo.floatStmeInnerReserve.tostring())
      length = len(self.fAebOut.reservedSpace.boolReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.fAebOut.reservedSpace.boolReserve.tostring())
      length = len(self.fAebOut.reservedSpace.uintReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.reservedSpace.uintReserve.tostring())
      length = len(self.fAebOut.reservedSpace.floatReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.reservedSpace.floatReserve.tostring())
      _x = self
      buff.write(_get_struct_20I().pack(_x.fAebOut.fySideFeatureDebug.request.bsdlca_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_haptic_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.ext_req, _x.fAebOut.fySideFeatureDebug.request.sdow_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_right_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.sdow_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_right_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_left_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_right_req, _x.fAebOut.fySideFeatureDebug.request.rear_rad_fault_disp))
      length = len(self.fAebOut.fySideFeatureDebug.bsd_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.fySideFeatureDebug.bsd_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3I().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.reserved.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.lca_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.fySideFeatureDebug.lca_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.reserved.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.sdow_tracked_obj)
      buff.write(_struct_I.pack(length))
      for val1 in self.fAebOut.fySideFeatureDebug.sdow_tracked_obj:
        _x = val1
        buff.write(_get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.reserved.tostring())
      _x = self
      buff.write(_get_struct_I9f2I().pack(_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.motionStatus))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.reserved.tostring())
      _x = self
      buff.write(_get_struct_3i().pack(_x.fAebOut.fySideFeatureDebug.num_of_ooi_bsd, _x.fAebOut.fySideFeatureDebug.num_of_ooi_lca, _x.fAebOut.fySideFeatureDebug.num_of_ooi_sdow))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.fail_inhibits.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.inactive_inhibits.tostring())
      _x = self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.reserved.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.sdow_inhibits.fail_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.sdow_inhibits.fail_inhibits.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.sdow_inhibits.inactive_inhibits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.sdow_inhibits.inactive_inhibits.tostring())
      _x = self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off
      buff.write(_get_struct_B().pack(_x))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_inhibits.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.sdow_inhibits.reserved.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.bsdlca_decision, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_right))
      length = len(self.fAebOut.fySideFeatureDebug.bsdlca_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.bsdlca_action_decision.reserved.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.fAebOut.fySideFeatureDebug.sdow_action_decision.sdow_decision, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_right))
      length = len(self.fAebOut.fySideFeatureDebug.sdow_action_decision.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.sdow_action_decision.reserved.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.reserved_space.sd_intReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.fAebOut.fySideFeatureDebug.reserved_space.sd_intReserve.tostring())
      length = len(self.fAebOut.fySideFeatureDebug.reserved_space.sd_floatReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.fAebOut.fySideFeatureDebug.reserved_space.sd_floatReserve.tostring())
      _x = self
      buff.write(_get_struct_5B().pack(_x.fAebOut.rqabInnerInfo.holdReq, _x.fAebOut.rqabInnerInfo.holdEnt, _x.fAebOut.rqabInnerInfo.holdExt, _x.fAebOut.rqabInnerInfo.isDriverGearChg, _x.fAebOut.rqabInnerInfo.isDriverAccPedl))
      length = len(self.fAebOut.rqabInnerInfo.boolRqabInnerReserve)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.fAebOut.rqabInnerInfo.boolRqabInnerReserve.tostring())
      _x = self
      buff.write(_get_struct_15fQ().pack(_x.fAebOut.timeCostInfo.fctsApp, _x.fAebOut.timeCostInfo.carInfoMap, _x.fAebOut.timeCostInfo.objInfoMap, _x.fAebOut.timeCostInfo.aebMain, _x.fAebOut.timeCostInfo.ctrlInfoMap, _x.fAebOut.timeCostInfo.aebPublish, _x.fAebOut.timeCostInfo.ebhp, _x.fAebOut.timeCostInfo.ooif, _x.fAebOut.timeCostInfo.obhc, _x.fAebOut.timeCostInfo.otha, _x.fAebOut.timeCostInfo.cren, _x.fAebOut.timeCostInfo.acdn, _x.fAebOut.timeCostInfo.tscd, _x.fAebOut.timeCostInfo.stme, _x.fAebOut.timeCostInfo.rqab, _x.fAebOut.publish_ptp_ts))
      _x = self.fAebOut.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Q().pack(_x.fAebOut.counter, _x.fAebOut.publish_ts, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pedcross is None:
        self.pedcross = rospy_message_converter.msg.VRUCandiOut()
      if self.pedoncom is None:
        self.pedoncom = rospy_message_converter.msg.VRUCandiOut()
      if self.bikcross is None:
        self.bikcross = rospy_message_converter.msg.VRUCandiOut()
      if self.bikoncom is None:
        self.bikoncom = rospy_message_converter.msg.VRUCandiOut()
      if self.CCRScandi is None:
        self.CCRScandi = rospy_message_converter.msg.CCRCandiOut()
      if self.CCRMcandi is None:
        self.CCRMcandi = rospy_message_converter.msg.CCRCandiOut()
      if self.FTAPcandi is None:
        self.FTAPcandi = rospy_message_converter.msg.FTAPCandiOut()
      if self.PedRear is None:
        self.PedRear = rospy_message_converter.msg.VRUCandiOut()
      if self.BikRear is None:
        self.BikRear = rospy_message_converter.msg.VRUCandiOut()
      if self.HostState is None:
        self.HostState = rospy_message_converter.msg.EgoState()
      if self.Pedestrians is None:
        self.Pedestrians = None
      if self.CloseTarget is None:
        self.CloseTarget = rospy_message_converter.msg.CCRCandiOut()
      if self.DriverMonitor is None:
        self.DriverMonitor = rospy_message_converter.msg.DriverMonitorOut()
      if self.GenObjFilter is None:
        self.GenObjFilter = None
      if self.CCFOcandi is None:
        self.CCFOcandi = rospy_message_converter.msg.CCRCandiOut()
      if self.CCCcandi is None:
        self.CCCcandi = rospy_message_converter.msg.CCCCandiOut()
      if self.FusionCCRFlag is None:
        self.FusionCCRFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.FusionVRUFlag is None:
        self.FusionVRUFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.FusionVRURearFlag is None:
        self.FusionVRURearFlag = rospy_message_converter.msg.FusionAEBFlagOut()
      if self.AebActuFlg is None:
        self.AebActuFlg = rospy_message_converter.msg.AebActuFlgOut()
      if self.AebReserved is None:
        self.AebReserved = rospy_message_converter.msg.ReservedOut()
      if self.AEBSm is None:
        self.AEBSm = rospy_message_converter.msg.AEBSMOut()
      if self.FCWSm is None:
        self.FCWSm = rospy_message_converter.msg.AEBSMOut()
      if self.AebRearSm is None:
        self.AebRearSm = rospy_message_converter.msg.AEBRearSMOut()
      if self.FcwRearSm is None:
        self.FcwRearSm = rospy_message_converter.msg.AEBRearSMOut()
      if self.FuncSuppress is None:
        self.FuncSuppress = rospy_message_converter.msg.FuncSuppressOut()
      if self.AebDiag is None:
        self.AebDiag = rospy_message_converter.msg.AebDiagOut()
      if self.AebMode is None:
        self.AebMode = rospy_message_converter.msg.AebModeOut()
      if self.AESCCRcandi is None:
        self.AESCCRcandi = rospy_message_converter.msg.AESCCRCandiOut()
      if self.CloseAESTarget is None:
        self.CloseAESTarget = rospy_message_converter.msg.AESCCRCandiOut()
      if self.AESPathCheck is None:
        self.AESPathCheck = rospy_message_converter.msg.AESPathVerify()
      if self.AESPlanPath is None:
        self.AESPlanPath = rospy_message_converter.msg.AESPlanOut()
      if self.fAebOut is None:
        self.fAebOut = rospy_message_converter.msg.dgbAebOut()
      end = 0
      _x = self
      start = end
      end += 838
      (_x.pedcross.ID, _x.pedcross.VID, _x.pedcross.longpos, _x.pedcross.latpos, _x.pedcross.longspd, _x.pedcross.latspd, _x.pedcross.longacc, _x.pedcross.latacc, _x.pedcross.range, _x.pedcross.rangerear, _x.pedcross.rangerate, _x.pedcross.TTC, _x.pedcross.TTCrear, _x.pedcross.XOLC, _x.pedcross.latest, _x.pedcross.oncoming, _x.pedcross.preceding, _x.pedcross.crossing, _x.pedcross.stationary, _x.pedcross.AEBconf, _x.pedcross.inpath, _x.pedcross.vfcheck, _x.pedcross.lfcheck, _x.pedcross.age, _x.pedcross.agecheck, _x.pedcross.inpathage, _x.pedcross.inpathcheck, _x.pedcross.TOI, _x.pedcross.TOIrear, _x.pedcross.warn, _x.pedcross.prefill, _x.pedcross.lowbrake, _x.pedcross.highbrake, _x.pedcross.isvision, _x.pedcross.isfusion, _x.pedcross.isradar, _x.pedcross.timetoturn, _x.pedcross.timetobrake, _x.pedcross.steerflag, _x.pedcross.ref_pos.ref_character, _x.pedcross.ref_pos.pos_x, _x.pedcross.ref_pos.pos_y, _x.pedcross.ref_pos.range, _x.pedcross.ref_pos.heading, _x.pedcross.xpos_cir, _x.pedcross.ypos_cir, _x.pedcross.roc_tar, _x.pedcross.mindist, _x.pedcross.xpos_col, _x.pedcross.ypos_col, _x.pedcross.range_col, _x.pedcross.range_col_tar, _x.pedcross.yawrate, _x.pedcross.heading, _x.pedcross.colposs, _x.pedcross.col_num, _x.pedcross.TTC_cir, _x.pedcross.TTL_cir, _x.pedcross.TTC_tar, _x.pedcross.TTL_tar, _x.pedoncom.ID, _x.pedoncom.VID, _x.pedoncom.longpos, _x.pedoncom.latpos, _x.pedoncom.longspd, _x.pedoncom.latspd, _x.pedoncom.longacc, _x.pedoncom.latacc, _x.pedoncom.range, _x.pedoncom.rangerear, _x.pedoncom.rangerate, _x.pedoncom.TTC, _x.pedoncom.TTCrear, _x.pedoncom.XOLC, _x.pedoncom.latest, _x.pedoncom.oncoming, _x.pedoncom.preceding, _x.pedoncom.crossing, _x.pedoncom.stationary, _x.pedoncom.AEBconf, _x.pedoncom.inpath, _x.pedoncom.vfcheck, _x.pedoncom.lfcheck, _x.pedoncom.age, _x.pedoncom.agecheck, _x.pedoncom.inpathage, _x.pedoncom.inpathcheck, _x.pedoncom.TOI, _x.pedoncom.TOIrear, _x.pedoncom.warn, _x.pedoncom.prefill, _x.pedoncom.lowbrake, _x.pedoncom.highbrake, _x.pedoncom.isvision, _x.pedoncom.isfusion, _x.pedoncom.isradar, _x.pedoncom.timetoturn, _x.pedoncom.timetobrake, _x.pedoncom.steerflag, _x.pedoncom.ref_pos.ref_character, _x.pedoncom.ref_pos.pos_x, _x.pedoncom.ref_pos.pos_y, _x.pedoncom.ref_pos.range, _x.pedoncom.ref_pos.heading, _x.pedoncom.xpos_cir, _x.pedoncom.ypos_cir, _x.pedoncom.roc_tar, _x.pedoncom.mindist, _x.pedoncom.xpos_col, _x.pedoncom.ypos_col, _x.pedoncom.range_col, _x.pedoncom.range_col_tar, _x.pedoncom.yawrate, _x.pedoncom.heading, _x.pedoncom.colposs, _x.pedoncom.col_num, _x.pedoncom.TTC_cir, _x.pedoncom.TTL_cir, _x.pedoncom.TTC_tar, _x.pedoncom.TTL_tar, _x.bikcross.ID, _x.bikcross.VID, _x.bikcross.longpos, _x.bikcross.latpos, _x.bikcross.longspd, _x.bikcross.latspd, _x.bikcross.longacc, _x.bikcross.latacc, _x.bikcross.range, _x.bikcross.rangerear, _x.bikcross.rangerate, _x.bikcross.TTC, _x.bikcross.TTCrear, _x.bikcross.XOLC, _x.bikcross.latest, _x.bikcross.oncoming, _x.bikcross.preceding, _x.bikcross.crossing, _x.bikcross.stationary, _x.bikcross.AEBconf, _x.bikcross.inpath, _x.bikcross.vfcheck, _x.bikcross.lfcheck, _x.bikcross.age, _x.bikcross.agecheck, _x.bikcross.inpathage, _x.bikcross.inpathcheck, _x.bikcross.TOI, _x.bikcross.TOIrear, _x.bikcross.warn, _x.bikcross.prefill, _x.bikcross.lowbrake, _x.bikcross.highbrake, _x.bikcross.isvision, _x.bikcross.isfusion, _x.bikcross.isradar, _x.bikcross.timetoturn, _x.bikcross.timetobrake, _x.bikcross.steerflag, _x.bikcross.ref_pos.ref_character, _x.bikcross.ref_pos.pos_x, _x.bikcross.ref_pos.pos_y, _x.bikcross.ref_pos.range, _x.bikcross.ref_pos.heading, _x.bikcross.xpos_cir, _x.bikcross.ypos_cir, _x.bikcross.roc_tar, _x.bikcross.mindist, _x.bikcross.xpos_col, _x.bikcross.ypos_col, _x.bikcross.range_col, _x.bikcross.range_col_tar, _x.bikcross.yawrate, _x.bikcross.heading, _x.bikcross.colposs, _x.bikcross.col_num, _x.bikcross.TTC_cir, _x.bikcross.TTL_cir, _x.bikcross.TTC_tar, _x.bikcross.TTL_tar, _x.bikoncom.ID, _x.bikoncom.VID, _x.bikoncom.longpos, _x.bikoncom.latpos, _x.bikoncom.longspd, _x.bikoncom.latspd, _x.bikoncom.longacc, _x.bikoncom.latacc, _x.bikoncom.range, _x.bikoncom.rangerear, _x.bikoncom.rangerate, _x.bikoncom.TTC, _x.bikoncom.TTCrear, _x.bikoncom.XOLC, _x.bikoncom.latest, _x.bikoncom.oncoming, _x.bikoncom.preceding, _x.bikoncom.crossing, _x.bikoncom.stationary, _x.bikoncom.AEBconf, _x.bikoncom.inpath, _x.bikoncom.vfcheck, _x.bikoncom.lfcheck, _x.bikoncom.age, _x.bikoncom.agecheck, _x.bikoncom.inpathage, _x.bikoncom.inpathcheck, _x.bikoncom.TOI, _x.bikoncom.TOIrear, _x.bikoncom.warn, _x.bikoncom.prefill, _x.bikoncom.lowbrake, _x.bikoncom.highbrake, _x.bikoncom.isvision, _x.bikoncom.isfusion, _x.bikoncom.isradar, _x.bikoncom.timetoturn, _x.bikoncom.timetobrake, _x.bikoncom.steerflag, _x.bikoncom.ref_pos.ref_character, _x.bikoncom.ref_pos.pos_x, _x.bikoncom.ref_pos.pos_y, _x.bikoncom.ref_pos.range, _x.bikoncom.ref_pos.heading, _x.bikoncom.xpos_cir, _x.bikoncom.ypos_cir, _x.bikoncom.roc_tar, _x.bikoncom.mindist, _x.bikoncom.xpos_col, _x.bikoncom.ypos_col, _x.bikoncom.range_col, _x.bikoncom.range_col_tar, _x.bikoncom.yawrate, _x.bikoncom.heading, _x.bikoncom.colposs, _x.bikoncom.col_num, _x.bikoncom.TTC_cir, _x.bikoncom.TTL_cir, _x.bikoncom.TTC_tar, _x.bikoncom.TTL_tar, _x.CCRScandi.ID, _x.CCRScandi.VID, _x.CCRScandi.longpos, _x.CCRScandi.latpos, _x.CCRScandi.longspd, _x.CCRScandi.latspd, _x.CCRScandi.longacc, _x.CCRScandi.latacc, _x.CCRScandi.range, _x.CCRScandi.rangerate, _x.CCRScandi.TTC, _x.CCRScandi.XOLC, _x.CCRScandi.movestate, _x.CCRScandi.moveout, _x.CCRScandi.inpath_before,) = _get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B().unpack(str[start:end])
      self.pedcross.oncoming = bool(self.pedcross.oncoming)
      self.pedcross.preceding = bool(self.pedcross.preceding)
      self.pedcross.crossing = bool(self.pedcross.crossing)
      self.pedcross.stationary = bool(self.pedcross.stationary)
      self.pedcross.inpath = bool(self.pedcross.inpath)
      self.pedcross.vfcheck = bool(self.pedcross.vfcheck)
      self.pedcross.lfcheck = bool(self.pedcross.lfcheck)
      self.pedcross.agecheck = bool(self.pedcross.agecheck)
      self.pedcross.inpathcheck = bool(self.pedcross.inpathcheck)
      self.pedcross.TOI = bool(self.pedcross.TOI)
      self.pedcross.TOIrear = bool(self.pedcross.TOIrear)
      self.pedcross.warn = bool(self.pedcross.warn)
      self.pedcross.prefill = bool(self.pedcross.prefill)
      self.pedcross.lowbrake = bool(self.pedcross.lowbrake)
      self.pedcross.highbrake = bool(self.pedcross.highbrake)
      self.pedcross.isvision = bool(self.pedcross.isvision)
      self.pedcross.isfusion = bool(self.pedcross.isfusion)
      self.pedcross.isradar = bool(self.pedcross.isradar)
      self.pedcross.steerflag = bool(self.pedcross.steerflag)
      self.pedcross.colposs = bool(self.pedcross.colposs)
      self.pedoncom.oncoming = bool(self.pedoncom.oncoming)
      self.pedoncom.preceding = bool(self.pedoncom.preceding)
      self.pedoncom.crossing = bool(self.pedoncom.crossing)
      self.pedoncom.stationary = bool(self.pedoncom.stationary)
      self.pedoncom.inpath = bool(self.pedoncom.inpath)
      self.pedoncom.vfcheck = bool(self.pedoncom.vfcheck)
      self.pedoncom.lfcheck = bool(self.pedoncom.lfcheck)
      self.pedoncom.agecheck = bool(self.pedoncom.agecheck)
      self.pedoncom.inpathcheck = bool(self.pedoncom.inpathcheck)
      self.pedoncom.TOI = bool(self.pedoncom.TOI)
      self.pedoncom.TOIrear = bool(self.pedoncom.TOIrear)
      self.pedoncom.warn = bool(self.pedoncom.warn)
      self.pedoncom.prefill = bool(self.pedoncom.prefill)
      self.pedoncom.lowbrake = bool(self.pedoncom.lowbrake)
      self.pedoncom.highbrake = bool(self.pedoncom.highbrake)
      self.pedoncom.isvision = bool(self.pedoncom.isvision)
      self.pedoncom.isfusion = bool(self.pedoncom.isfusion)
      self.pedoncom.isradar = bool(self.pedoncom.isradar)
      self.pedoncom.steerflag = bool(self.pedoncom.steerflag)
      self.pedoncom.colposs = bool(self.pedoncom.colposs)
      self.bikcross.oncoming = bool(self.bikcross.oncoming)
      self.bikcross.preceding = bool(self.bikcross.preceding)
      self.bikcross.crossing = bool(self.bikcross.crossing)
      self.bikcross.stationary = bool(self.bikcross.stationary)
      self.bikcross.inpath = bool(self.bikcross.inpath)
      self.bikcross.vfcheck = bool(self.bikcross.vfcheck)
      self.bikcross.lfcheck = bool(self.bikcross.lfcheck)
      self.bikcross.agecheck = bool(self.bikcross.agecheck)
      self.bikcross.inpathcheck = bool(self.bikcross.inpathcheck)
      self.bikcross.TOI = bool(self.bikcross.TOI)
      self.bikcross.TOIrear = bool(self.bikcross.TOIrear)
      self.bikcross.warn = bool(self.bikcross.warn)
      self.bikcross.prefill = bool(self.bikcross.prefill)
      self.bikcross.lowbrake = bool(self.bikcross.lowbrake)
      self.bikcross.highbrake = bool(self.bikcross.highbrake)
      self.bikcross.isvision = bool(self.bikcross.isvision)
      self.bikcross.isfusion = bool(self.bikcross.isfusion)
      self.bikcross.isradar = bool(self.bikcross.isradar)
      self.bikcross.steerflag = bool(self.bikcross.steerflag)
      self.bikcross.colposs = bool(self.bikcross.colposs)
      self.bikoncom.oncoming = bool(self.bikoncom.oncoming)
      self.bikoncom.preceding = bool(self.bikoncom.preceding)
      self.bikoncom.crossing = bool(self.bikoncom.crossing)
      self.bikoncom.stationary = bool(self.bikoncom.stationary)
      self.bikoncom.inpath = bool(self.bikoncom.inpath)
      self.bikoncom.vfcheck = bool(self.bikoncom.vfcheck)
      self.bikoncom.lfcheck = bool(self.bikoncom.lfcheck)
      self.bikoncom.agecheck = bool(self.bikoncom.agecheck)
      self.bikoncom.inpathcheck = bool(self.bikoncom.inpathcheck)
      self.bikoncom.TOI = bool(self.bikoncom.TOI)
      self.bikoncom.TOIrear = bool(self.bikoncom.TOIrear)
      self.bikoncom.warn = bool(self.bikoncom.warn)
      self.bikoncom.prefill = bool(self.bikoncom.prefill)
      self.bikoncom.lowbrake = bool(self.bikoncom.lowbrake)
      self.bikoncom.highbrake = bool(self.bikoncom.highbrake)
      self.bikoncom.isvision = bool(self.bikoncom.isvision)
      self.bikoncom.isfusion = bool(self.bikoncom.isfusion)
      self.bikoncom.isradar = bool(self.bikoncom.isradar)
      self.bikoncom.steerflag = bool(self.bikoncom.steerflag)
      self.bikoncom.colposs = bool(self.bikoncom.colposs)
      self.CCRScandi.moveout = bool(self.CCRScandi.moveout)
      self.CCRScandi.inpath_before = bool(self.CCRScandi.inpath_before)
      _x = self
      start = end
      end += 816
      (_x.CCRScandi.inpath_after, _x.CCRScandi.AEBconf, _x.CCRScandi.inpath, _x.CCRScandi.vfcheck, _x.CCRScandi.lfcheck, _x.CCRScandi.age, _x.CCRScandi.agecheck, _x.CCRScandi.inpathage, _x.CCRScandi.inpathcheck, _x.CCRScandi.TOI, _x.CCRScandi.warn, _x.CCRScandi.prefill, _x.CCRScandi.lowbrake, _x.CCRScandi.highbrake, _x.CCRScandi.isvision, _x.CCRScandi.isfusion, _x.CCRScandi.isradar, _x.CCRScandi.timetoturn, _x.CCRScandi.timetobrake, _x.CCRScandi.steerflag, _x.CCRScandi.ref_pos.ref_character, _x.CCRScandi.ref_pos.pos_x, _x.CCRScandi.ref_pos.pos_y, _x.CCRScandi.ref_pos.range, _x.CCRScandi.ref_pos.heading, _x.CCRScandi.iba_flag, _x.CCRScandi.hitdist, _x.CCRScandi.yawdist, _x.CCRScandi.driverovertake, _x.CCRScandi.driverovertake_warn, _x.CCRScandi.movingleftcount, _x.CCRScandi.movingrightcount, _x.CCRMcandi.ID, _x.CCRMcandi.VID, _x.CCRMcandi.longpos, _x.CCRMcandi.latpos, _x.CCRMcandi.longspd, _x.CCRMcandi.latspd, _x.CCRMcandi.longacc, _x.CCRMcandi.latacc, _x.CCRMcandi.range, _x.CCRMcandi.rangerate, _x.CCRMcandi.TTC, _x.CCRMcandi.XOLC, _x.CCRMcandi.movestate, _x.CCRMcandi.moveout, _x.CCRMcandi.inpath_before, _x.CCRMcandi.inpath_after, _x.CCRMcandi.AEBconf, _x.CCRMcandi.inpath, _x.CCRMcandi.vfcheck, _x.CCRMcandi.lfcheck, _x.CCRMcandi.age, _x.CCRMcandi.agecheck, _x.CCRMcandi.inpathage, _x.CCRMcandi.inpathcheck, _x.CCRMcandi.TOI, _x.CCRMcandi.warn, _x.CCRMcandi.prefill, _x.CCRMcandi.lowbrake, _x.CCRMcandi.highbrake, _x.CCRMcandi.isvision, _x.CCRMcandi.isfusion, _x.CCRMcandi.isradar, _x.CCRMcandi.timetoturn, _x.CCRMcandi.timetobrake, _x.CCRMcandi.steerflag, _x.CCRMcandi.ref_pos.ref_character, _x.CCRMcandi.ref_pos.pos_x, _x.CCRMcandi.ref_pos.pos_y, _x.CCRMcandi.ref_pos.range, _x.CCRMcandi.ref_pos.heading, _x.CCRMcandi.iba_flag, _x.CCRMcandi.hitdist, _x.CCRMcandi.yawdist, _x.CCRMcandi.driverovertake, _x.CCRMcandi.driverovertake_warn, _x.CCRMcandi.movingleftcount, _x.CCRMcandi.movingrightcount, _x.FTAPcandi.ID, _x.FTAPcandi.VID, _x.FTAPcandi.longpos, _x.FTAPcandi.latpos, _x.FTAPcandi.longspd, _x.FTAPcandi.latspd, _x.FTAPcandi.longacc, _x.FTAPcandi.latacc, _x.FTAPcandi.range, _x.FTAPcandi.rangerate, _x.FTAPcandi.TTC, _x.FTAPcandi.TTL, _x.FTAPcandi.colnum, _x.FTAPcandi.colx, _x.FTAPcandi.coly, _x.FTAPcandi.colr, _x.FTAPcandi.heading, _x.FTAPcandi.currange, _x.FTAPcandi.estrange, _x.FTAPcandi.TTC_tar, _x.FTAPcandi.TTL_tar, _x.FTAPcandi.TOI_before, _x.FTAPcandi.TOI_after, _x.FTAPcandi.inpathcur, _x.FTAPcandi.inpathpre, _x.FTAPcandi.inpathcur_warn, _x.FTAPcandi.inpathpre_warn, _x.FTAPcandi.inpath, _x.FTAPcandi.inpath_tar, _x.FTAPcandi.inpath_warn, _x.FTAPcandi.inpathage, _x.FTAPcandi.inpathage_warn, _x.FTAPcandi.inpathagecheck, _x.FTAPcandi.inpathagecheck_warn, _x.FTAPcandi.AEBconf, _x.FTAPcandi.oncoming, _x.FTAPcandi.movingstate, _x.FTAPcandi.turnangle, _x.FTAPcandi.warn, _x.FTAPcandi.prefill, _x.FTAPcandi.lowbrake, _x.FTAPcandi.highbrake, _x.FTAPcandi.isvision, _x.FTAPcandi.isfusion, _x.FTAPcandi.isradar, _x.FTAPcandi.timetoturn, _x.FTAPcandi.timetobrake, _x.FTAPcandi.steerflag, _x.FTAPcandi.ref_pos.ref_character, _x.FTAPcandi.ref_pos.pos_x, _x.FTAPcandi.ref_pos.pos_y, _x.FTAPcandi.ref_pos.range, _x.FTAPcandi.ref_pos.heading, _x.FTAPcandi.iba_flag, _x.PedRear.ID, _x.PedRear.VID, _x.PedRear.longpos, _x.PedRear.latpos, _x.PedRear.longspd, _x.PedRear.latspd, _x.PedRear.longacc, _x.PedRear.latacc, _x.PedRear.range, _x.PedRear.rangerear, _x.PedRear.rangerate, _x.PedRear.TTC, _x.PedRear.TTCrear, _x.PedRear.XOLC, _x.PedRear.latest, _x.PedRear.oncoming, _x.PedRear.preceding, _x.PedRear.crossing, _x.PedRear.stationary, _x.PedRear.AEBconf, _x.PedRear.inpath, _x.PedRear.vfcheck, _x.PedRear.lfcheck, _x.PedRear.age, _x.PedRear.agecheck, _x.PedRear.inpathage, _x.PedRear.inpathcheck, _x.PedRear.TOI, _x.PedRear.TOIrear, _x.PedRear.warn, _x.PedRear.prefill, _x.PedRear.lowbrake, _x.PedRear.highbrake, _x.PedRear.isvision, _x.PedRear.isfusion, _x.PedRear.isradar, _x.PedRear.timetoturn, _x.PedRear.timetobrake, _x.PedRear.steerflag, _x.PedRear.ref_pos.ref_character, _x.PedRear.ref_pos.pos_x, _x.PedRear.ref_pos.pos_y, _x.PedRear.ref_pos.range, _x.PedRear.ref_pos.heading, _x.PedRear.xpos_cir, _x.PedRear.ypos_cir, _x.PedRear.roc_tar, _x.PedRear.mindist, _x.PedRear.xpos_col, _x.PedRear.ypos_col, _x.PedRear.range_col, _x.PedRear.range_col_tar, _x.PedRear.yawrate, _x.PedRear.heading, _x.PedRear.colposs, _x.PedRear.col_num, _x.PedRear.TTC_cir, _x.PedRear.TTL_cir, _x.PedRear.TTC_tar, _x.PedRear.TTL_tar, _x.BikRear.ID, _x.BikRear.VID, _x.BikRear.longpos, _x.BikRear.latpos, _x.BikRear.longspd, _x.BikRear.latspd, _x.BikRear.longacc, _x.BikRear.latacc, _x.BikRear.range, _x.BikRear.rangerear, _x.BikRear.rangerate, _x.BikRear.TTC, _x.BikRear.TTCrear, _x.BikRear.XOLC, _x.BikRear.latest, _x.BikRear.oncoming, _x.BikRear.preceding, _x.BikRear.crossing, _x.BikRear.stationary, _x.BikRear.AEBconf, _x.BikRear.inpath, _x.BikRear.vfcheck, _x.BikRear.lfcheck, _x.BikRear.age, _x.BikRear.agecheck, _x.BikRear.inpathage, _x.BikRear.inpathcheck, _x.BikRear.TOI, _x.BikRear.TOIrear, _x.BikRear.warn, _x.BikRear.prefill, _x.BikRear.lowbrake, _x.BikRear.highbrake, _x.BikRear.isvision, _x.BikRear.isfusion, _x.BikRear.isradar, _x.BikRear.timetoturn, _x.BikRear.timetobrake, _x.BikRear.steerflag, _x.BikRear.ref_pos.ref_character, _x.BikRear.ref_pos.pos_x, _x.BikRear.ref_pos.pos_y, _x.BikRear.ref_pos.range, _x.BikRear.ref_pos.heading, _x.BikRear.xpos_cir, _x.BikRear.ypos_cir, _x.BikRear.roc_tar, _x.BikRear.mindist, _x.BikRear.xpos_col, _x.BikRear.ypos_col, _x.BikRear.range_col, _x.BikRear.range_col_tar, _x.BikRear.yawrate, _x.BikRear.heading, _x.BikRear.colposs, _x.BikRear.col_num, _x.BikRear.TTC_cir, _x.BikRear.TTL_cir, _x.BikRear.TTC_tar, _x.BikRear.TTL_tar, _x.HostState.vehspd, _x.HostState.yawrate,) = _get_struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f().unpack(str[start:end])
      self.CCRScandi.inpath_after = bool(self.CCRScandi.inpath_after)
      self.CCRScandi.inpath = bool(self.CCRScandi.inpath)
      self.CCRScandi.vfcheck = bool(self.CCRScandi.vfcheck)
      self.CCRScandi.lfcheck = bool(self.CCRScandi.lfcheck)
      self.CCRScandi.agecheck = bool(self.CCRScandi.agecheck)
      self.CCRScandi.inpathcheck = bool(self.CCRScandi.inpathcheck)
      self.CCRScandi.TOI = bool(self.CCRScandi.TOI)
      self.CCRScandi.warn = bool(self.CCRScandi.warn)
      self.CCRScandi.prefill = bool(self.CCRScandi.prefill)
      self.CCRScandi.lowbrake = bool(self.CCRScandi.lowbrake)
      self.CCRScandi.highbrake = bool(self.CCRScandi.highbrake)
      self.CCRScandi.isvision = bool(self.CCRScandi.isvision)
      self.CCRScandi.isfusion = bool(self.CCRScandi.isfusion)
      self.CCRScandi.isradar = bool(self.CCRScandi.isradar)
      self.CCRScandi.steerflag = bool(self.CCRScandi.steerflag)
      self.CCRScandi.iba_flag = bool(self.CCRScandi.iba_flag)
      self.CCRScandi.driverovertake = bool(self.CCRScandi.driverovertake)
      self.CCRScandi.driverovertake_warn = bool(self.CCRScandi.driverovertake_warn)
      self.CCRMcandi.moveout = bool(self.CCRMcandi.moveout)
      self.CCRMcandi.inpath_before = bool(self.CCRMcandi.inpath_before)
      self.CCRMcandi.inpath_after = bool(self.CCRMcandi.inpath_after)
      self.CCRMcandi.inpath = bool(self.CCRMcandi.inpath)
      self.CCRMcandi.vfcheck = bool(self.CCRMcandi.vfcheck)
      self.CCRMcandi.lfcheck = bool(self.CCRMcandi.lfcheck)
      self.CCRMcandi.agecheck = bool(self.CCRMcandi.agecheck)
      self.CCRMcandi.inpathcheck = bool(self.CCRMcandi.inpathcheck)
      self.CCRMcandi.TOI = bool(self.CCRMcandi.TOI)
      self.CCRMcandi.warn = bool(self.CCRMcandi.warn)
      self.CCRMcandi.prefill = bool(self.CCRMcandi.prefill)
      self.CCRMcandi.lowbrake = bool(self.CCRMcandi.lowbrake)
      self.CCRMcandi.highbrake = bool(self.CCRMcandi.highbrake)
      self.CCRMcandi.isvision = bool(self.CCRMcandi.isvision)
      self.CCRMcandi.isfusion = bool(self.CCRMcandi.isfusion)
      self.CCRMcandi.isradar = bool(self.CCRMcandi.isradar)
      self.CCRMcandi.steerflag = bool(self.CCRMcandi.steerflag)
      self.CCRMcandi.iba_flag = bool(self.CCRMcandi.iba_flag)
      self.CCRMcandi.driverovertake = bool(self.CCRMcandi.driverovertake)
      self.CCRMcandi.driverovertake_warn = bool(self.CCRMcandi.driverovertake_warn)
      self.FTAPcandi.inpathcur = bool(self.FTAPcandi.inpathcur)
      self.FTAPcandi.inpathpre = bool(self.FTAPcandi.inpathpre)
      self.FTAPcandi.inpathcur_warn = bool(self.FTAPcandi.inpathcur_warn)
      self.FTAPcandi.inpathpre_warn = bool(self.FTAPcandi.inpathpre_warn)
      self.FTAPcandi.inpath = bool(self.FTAPcandi.inpath)
      self.FTAPcandi.inpath_tar = bool(self.FTAPcandi.inpath_tar)
      self.FTAPcandi.inpath_warn = bool(self.FTAPcandi.inpath_warn)
      self.FTAPcandi.inpathagecheck = bool(self.FTAPcandi.inpathagecheck)
      self.FTAPcandi.inpathagecheck_warn = bool(self.FTAPcandi.inpathagecheck_warn)
      self.FTAPcandi.oncoming = bool(self.FTAPcandi.oncoming)
      self.FTAPcandi.warn = bool(self.FTAPcandi.warn)
      self.FTAPcandi.prefill = bool(self.FTAPcandi.prefill)
      self.FTAPcandi.lowbrake = bool(self.FTAPcandi.lowbrake)
      self.FTAPcandi.highbrake = bool(self.FTAPcandi.highbrake)
      self.FTAPcandi.isvision = bool(self.FTAPcandi.isvision)
      self.FTAPcandi.isfusion = bool(self.FTAPcandi.isfusion)
      self.FTAPcandi.isradar = bool(self.FTAPcandi.isradar)
      self.FTAPcandi.steerflag = bool(self.FTAPcandi.steerflag)
      self.PedRear.oncoming = bool(self.PedRear.oncoming)
      self.PedRear.preceding = bool(self.PedRear.preceding)
      self.PedRear.crossing = bool(self.PedRear.crossing)
      self.PedRear.stationary = bool(self.PedRear.stationary)
      self.PedRear.inpath = bool(self.PedRear.inpath)
      self.PedRear.vfcheck = bool(self.PedRear.vfcheck)
      self.PedRear.lfcheck = bool(self.PedRear.lfcheck)
      self.PedRear.agecheck = bool(self.PedRear.agecheck)
      self.PedRear.inpathcheck = bool(self.PedRear.inpathcheck)
      self.PedRear.TOI = bool(self.PedRear.TOI)
      self.PedRear.TOIrear = bool(self.PedRear.TOIrear)
      self.PedRear.warn = bool(self.PedRear.warn)
      self.PedRear.prefill = bool(self.PedRear.prefill)
      self.PedRear.lowbrake = bool(self.PedRear.lowbrake)
      self.PedRear.highbrake = bool(self.PedRear.highbrake)
      self.PedRear.isvision = bool(self.PedRear.isvision)
      self.PedRear.isfusion = bool(self.PedRear.isfusion)
      self.PedRear.isradar = bool(self.PedRear.isradar)
      self.PedRear.steerflag = bool(self.PedRear.steerflag)
      self.PedRear.colposs = bool(self.PedRear.colposs)
      self.BikRear.oncoming = bool(self.BikRear.oncoming)
      self.BikRear.preceding = bool(self.BikRear.preceding)
      self.BikRear.crossing = bool(self.BikRear.crossing)
      self.BikRear.stationary = bool(self.BikRear.stationary)
      self.BikRear.inpath = bool(self.BikRear.inpath)
      self.BikRear.vfcheck = bool(self.BikRear.vfcheck)
      self.BikRear.lfcheck = bool(self.BikRear.lfcheck)
      self.BikRear.agecheck = bool(self.BikRear.agecheck)
      self.BikRear.inpathcheck = bool(self.BikRear.inpathcheck)
      self.BikRear.TOI = bool(self.BikRear.TOI)
      self.BikRear.TOIrear = bool(self.BikRear.TOIrear)
      self.BikRear.warn = bool(self.BikRear.warn)
      self.BikRear.prefill = bool(self.BikRear.prefill)
      self.BikRear.lowbrake = bool(self.BikRear.lowbrake)
      self.BikRear.highbrake = bool(self.BikRear.highbrake)
      self.BikRear.isvision = bool(self.BikRear.isvision)
      self.BikRear.isfusion = bool(self.BikRear.isfusion)
      self.BikRear.isradar = bool(self.BikRear.isradar)
      self.BikRear.steerflag = bool(self.BikRear.steerflag)
      self.BikRear.colposs = bool(self.BikRear.colposs)
      _x = self
      start = end
      end += 43
      (_x.HostState.steerangle, _x.HostState.hostreverse, _x.HostState.brakepos, _x.HostState.brakeposrate, _x.HostState.driverpressed, _x.HostState.maincypress, _x.HostState.maincyprsrate, _x.HostState.driverintention, _x.HostState.driverEBA, _x.HostState.ROC, _x.HostState.steerrate, _x.HostState.accpos, _x.HostState.accposrate,) = _get_struct_fB2fI2f2B4f().unpack(str[start:end])
      self.HostState.hostreverse = bool(self.HostState.hostreverse)
      self.HostState.driverintention = bool(self.HostState.driverintention)
      self.HostState.driverEBA = bool(self.HostState.driverEBA)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Pedestrians = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VRUCandiOut()
        _x = val1
        start = end
        end += 99
        (_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag,) = _get_struct_2I13f4BI3BIBI10B2fB().unpack(str[start:end])
        val1.oncoming = bool(val1.oncoming)
        val1.preceding = bool(val1.preceding)
        val1.crossing = bool(val1.crossing)
        val1.stationary = bool(val1.stationary)
        val1.inpath = bool(val1.inpath)
        val1.vfcheck = bool(val1.vfcheck)
        val1.lfcheck = bool(val1.lfcheck)
        val1.agecheck = bool(val1.agecheck)
        val1.inpathcheck = bool(val1.inpathcheck)
        val1.TOI = bool(val1.TOI)
        val1.TOIrear = bool(val1.TOIrear)
        val1.warn = bool(val1.warn)
        val1.prefill = bool(val1.prefill)
        val1.lowbrake = bool(val1.lowbrake)
        val1.highbrake = bool(val1.highbrake)
        val1.isvision = bool(val1.isvision)
        val1.isfusion = bool(val1.isfusion)
        val1.isradar = bool(val1.isradar)
        val1.steerflag = bool(val1.steerflag)
        _v70 = val1.ref_pos
        _x = _v70
        start = end
        end += 36
        (_x.ref_character, _x.pos_x, _x.pos_y, _x.range, _x.heading,) = _get_struct_I4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 61
        (_x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar,) = _get_struct_10fBI4f().unpack(str[start:end])
        val1.colposs = bool(val1.colposs)
        self.Pedestrians.append(val1)
      _x = self
      start = end
      end += 205
      (_x.CloseTarget.ID, _x.CloseTarget.VID, _x.CloseTarget.longpos, _x.CloseTarget.latpos, _x.CloseTarget.longspd, _x.CloseTarget.latspd, _x.CloseTarget.longacc, _x.CloseTarget.latacc, _x.CloseTarget.range, _x.CloseTarget.rangerate, _x.CloseTarget.TTC, _x.CloseTarget.XOLC, _x.CloseTarget.movestate, _x.CloseTarget.moveout, _x.CloseTarget.inpath_before, _x.CloseTarget.inpath_after, _x.CloseTarget.AEBconf, _x.CloseTarget.inpath, _x.CloseTarget.vfcheck, _x.CloseTarget.lfcheck, _x.CloseTarget.age, _x.CloseTarget.agecheck, _x.CloseTarget.inpathage, _x.CloseTarget.inpathcheck, _x.CloseTarget.TOI, _x.CloseTarget.warn, _x.CloseTarget.prefill, _x.CloseTarget.lowbrake, _x.CloseTarget.highbrake, _x.CloseTarget.isvision, _x.CloseTarget.isfusion, _x.CloseTarget.isradar, _x.CloseTarget.timetoturn, _x.CloseTarget.timetobrake, _x.CloseTarget.steerflag, _x.CloseTarget.ref_pos.ref_character, _x.CloseTarget.ref_pos.pos_x, _x.CloseTarget.ref_pos.pos_y, _x.CloseTarget.ref_pos.range, _x.CloseTarget.ref_pos.heading, _x.CloseTarget.iba_flag, _x.CloseTarget.hitdist, _x.CloseTarget.yawdist, _x.CloseTarget.driverovertake, _x.CloseTarget.driverovertake_warn, _x.CloseTarget.movingleftcount, _x.CloseTarget.movingrightcount, _x.DriverMonitor.gaspedpos, _x.DriverMonitor.gaspedgrad, _x.DriverMonitor.driverbrake, _x.DriverMonitor.brkpedpos, _x.DriverMonitor.steerwhlang, _x.DriverMonitor.steerwhlgrad, _x.DriverMonitor.egospd, _x.DriverMonitor.egoaccel, _x.DriverMonitor.egoyawrate, _x.DriverMonitor.turnlighton, _x.DriverMonitor.egogear, _x.DriverMonitor.feedbackstate, _x.DriverMonitor.activitystate, _x.DriverMonitor.focusstate, _x.DriverMonitor.suppressbit, _x.DriverMonitor.abortbit,) = _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I().unpack(str[start:end])
      self.CloseTarget.moveout = bool(self.CloseTarget.moveout)
      self.CloseTarget.inpath_before = bool(self.CloseTarget.inpath_before)
      self.CloseTarget.inpath_after = bool(self.CloseTarget.inpath_after)
      self.CloseTarget.inpath = bool(self.CloseTarget.inpath)
      self.CloseTarget.vfcheck = bool(self.CloseTarget.vfcheck)
      self.CloseTarget.lfcheck = bool(self.CloseTarget.lfcheck)
      self.CloseTarget.agecheck = bool(self.CloseTarget.agecheck)
      self.CloseTarget.inpathcheck = bool(self.CloseTarget.inpathcheck)
      self.CloseTarget.TOI = bool(self.CloseTarget.TOI)
      self.CloseTarget.warn = bool(self.CloseTarget.warn)
      self.CloseTarget.prefill = bool(self.CloseTarget.prefill)
      self.CloseTarget.lowbrake = bool(self.CloseTarget.lowbrake)
      self.CloseTarget.highbrake = bool(self.CloseTarget.highbrake)
      self.CloseTarget.isvision = bool(self.CloseTarget.isvision)
      self.CloseTarget.isfusion = bool(self.CloseTarget.isfusion)
      self.CloseTarget.isradar = bool(self.CloseTarget.isradar)
      self.CloseTarget.steerflag = bool(self.CloseTarget.steerflag)
      self.CloseTarget.iba_flag = bool(self.CloseTarget.iba_flag)
      self.CloseTarget.driverovertake = bool(self.CloseTarget.driverovertake)
      self.CloseTarget.driverovertake_warn = bool(self.CloseTarget.driverovertake_warn)
      self.DriverMonitor.driverbrake = bool(self.DriverMonitor.driverbrake)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.DriverMonitor.dampfactor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 13
      (_x.DriverMonitor.vel_std_dev, _x.DriverMonitor.sdytimer, _x.DriverMonitor.ramptimer, _x.DriverMonitor.dampsuppress,) = _get_struct_3fB().unpack(str[start:end])
      self.DriverMonitor.dampsuppress = bool(self.DriverMonitor.dampsuppress)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.GenObjFilter = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.GOFOut()
        _x = val1
        start = end
        end += 10
        (_x.checkID, _x.checkvalid, _x.classcheck, _x.fustcheck, _x.agecheck, _x.predcheck, _x.frespacheck,) = _get_struct_I6B().unpack(str[start:end])
        val1.checkvalid = bool(val1.checkvalid)
        val1.classcheck = bool(val1.classcheck)
        val1.fustcheck = bool(val1.fustcheck)
        val1.agecheck = bool(val1.agecheck)
        val1.predcheck = bool(val1.predcheck)
        val1.frespacheck = bool(val1.frespacheck)
        self.GenObjFilter.append(val1)
      _x = self
      start = end
      end += 1263
      (_x.CCFOcandi.ID, _x.CCFOcandi.VID, _x.CCFOcandi.longpos, _x.CCFOcandi.latpos, _x.CCFOcandi.longspd, _x.CCFOcandi.latspd, _x.CCFOcandi.longacc, _x.CCFOcandi.latacc, _x.CCFOcandi.range, _x.CCFOcandi.rangerate, _x.CCFOcandi.TTC, _x.CCFOcandi.XOLC, _x.CCFOcandi.movestate, _x.CCFOcandi.moveout, _x.CCFOcandi.inpath_before, _x.CCFOcandi.inpath_after, _x.CCFOcandi.AEBconf, _x.CCFOcandi.inpath, _x.CCFOcandi.vfcheck, _x.CCFOcandi.lfcheck, _x.CCFOcandi.age, _x.CCFOcandi.agecheck, _x.CCFOcandi.inpathage, _x.CCFOcandi.inpathcheck, _x.CCFOcandi.TOI, _x.CCFOcandi.warn, _x.CCFOcandi.prefill, _x.CCFOcandi.lowbrake, _x.CCFOcandi.highbrake, _x.CCFOcandi.isvision, _x.CCFOcandi.isfusion, _x.CCFOcandi.isradar, _x.CCFOcandi.timetoturn, _x.CCFOcandi.timetobrake, _x.CCFOcandi.steerflag, _x.CCFOcandi.ref_pos.ref_character, _x.CCFOcandi.ref_pos.pos_x, _x.CCFOcandi.ref_pos.pos_y, _x.CCFOcandi.ref_pos.range, _x.CCFOcandi.ref_pos.heading, _x.CCFOcandi.iba_flag, _x.CCFOcandi.hitdist, _x.CCFOcandi.yawdist, _x.CCFOcandi.driverovertake, _x.CCFOcandi.driverovertake_warn, _x.CCFOcandi.movingleftcount, _x.CCFOcandi.movingrightcount, _x.CCCcandi.ID, _x.CCCcandi.VID, _x.CCCcandi.longpos, _x.CCCcandi.latpos, _x.CCCcandi.longspd, _x.CCCcandi.latspd, _x.CCCcandi.longacc, _x.CCCcandi.latacc, _x.CCCcandi.range, _x.CCCcandi.rangerate, _x.CCCcandi.TTC, _x.CCCcandi.TTL, _x.CCCcandi.colnum, _x.CCCcandi.colx, _x.CCCcandi.coly, _x.CCCcandi.colr, _x.CCCcandi.heading, _x.CCCcandi.currange, _x.CCCcandi.estrange, _x.CCCcandi.TTC_tar, _x.CCCcandi.TTL_tar, _x.CCCcandi.TOI_before, _x.CCCcandi.TOI_after, _x.CCCcandi.inpathcur, _x.CCCcandi.inpathpre, _x.CCCcandi.inpath, _x.CCCcandi.AEBconf, _x.CCCcandi.warn, _x.CCCcandi.prefill, _x.CCCcandi.lowbrake, _x.CCCcandi.highbrake, _x.CCCcandi.isvision, _x.CCCcandi.isfusion, _x.CCCcandi.isradar, _x.CCCcandi.timetoturn, _x.CCCcandi.timetobrake, _x.CCCcandi.steerflag, _x.CCCcandi.ref_pos.ref_character, _x.CCCcandi.ref_pos.pos_x, _x.CCCcandi.ref_pos.pos_y, _x.CCCcandi.ref_pos.range, _x.CCCcandi.ref_pos.heading, _x.CCCcandi.iba_flag, _x.FusionCCRFlag.warning_flag, _x.FusionCCRFlag.prefill_flage, _x.FusionCCRFlag.lowbrake_flag, _x.FusionCCRFlag.highbrake_flag, _x.FusionCCRFlag.unconfirmed_flag, _x.FusionCCRFlag.hold_flag, _x.FusionCCRFlag.lowbrake_age, _x.FusionCCRFlag.highbrake_hold_age, _x.FusionCCRFlag.warnbrake_flag, _x.FusionCCRFlag.readyforIBA, _x.FusionVRUFlag.warning_flag, _x.FusionVRUFlag.prefill_flage, _x.FusionVRUFlag.lowbrake_flag, _x.FusionVRUFlag.highbrake_flag, _x.FusionVRUFlag.unconfirmed_flag, _x.FusionVRUFlag.hold_flag, _x.FusionVRUFlag.lowbrake_age, _x.FusionVRUFlag.highbrake_hold_age, _x.FusionVRUFlag.warnbrake_flag, _x.FusionVRUFlag.readyforIBA, _x.FusionVRURearFlag.warning_flag, _x.FusionVRURearFlag.prefill_flage, _x.FusionVRURearFlag.lowbrake_flag, _x.FusionVRURearFlag.highbrake_flag, _x.FusionVRURearFlag.unconfirmed_flag, _x.FusionVRURearFlag.hold_flag, _x.FusionVRURearFlag.lowbrake_age, _x.FusionVRURearFlag.highbrake_hold_age, _x.FusionVRURearFlag.warnbrake_flag, _x.FusionVRURearFlag.readyforIBA, _x.AebActuFlg.prewarn, _x.AebActuFlg.latentwarn, _x.AebActuFlg.prefill, _x.AebActuFlg.warnbrk, _x.AebActuFlg.softbrk, _x.AebActuFlg.hardbrk, _x.AebActuFlg.iba_req, _x.AebActuFlg.warntype, _x.AebActuFlg.hold_req, _x.AebReserved.aeb_reserved_1, _x.AebReserved.aeb_reserved_2, _x.AebReserved.aeb_reserved_3, _x.AebReserved.aeb_reserved_4, _x.AebReserved.aeb_reserved_5, _x.AebReserved.aeb_reserved_6, _x.AebReserved.aeb_reserved_7, _x.AebReserved.aeb_reserved_8, _x.AebReserved.aeb_reserved_9, _x.AebReserved.aeb_reserved_10, _x.AebReserved.aeb_reserved_11, _x.AebReserved.aeb_reserved_12, _x.AebReserved.aeb_reserved_13, _x.AebReserved.aeb_reserved_14, _x.AebReserved.aeb_reserved_15, _x.AebReserved.aeb_reserved_16, _x.AebReserved.aeb_reserved_17, _x.AebReserved.aeb_reserved_18, _x.AebReserved.aeb_reserved_19, _x.AebReserved.aeb_reserved_20, _x.AebReserved.aeb_reserved_21, _x.AebReserved.aeb_reserved_22, _x.AebReserved.aeb_reserved_23, _x.AebReserved.aeb_reserved_24, _x.AebReserved.aeb_reserved_25, _x.AebReserved.aeb_reserved_26, _x.AebReserved.aeb_reserved_27, _x.AebReserved.aeb_reserved_28, _x.AebReserved.aeb_reserved_29, _x.AebReserved.aeb_reserved_30, _x.AebReserved.aeb_reserved_31, _x.AebReserved.aeb_reserved_32, _x.AebReserved.aeb_reserved_33, _x.AebReserved.aeb_reserved_34, _x.AebReserved.aeb_reserved_35, _x.AebReserved.aeb_reserved_36, _x.AebReserved.aeb_reserved_37, _x.AebReserved.aeb_reserved_38, _x.AebReserved.aeb_reserved_39, _x.AebReserved.aeb_reserved_40, _x.AebReserved.aeb_reserved_41, _x.AebReserved.aeb_reserved_42, _x.AebReserved.aeb_reserved_43, _x.AebReserved.aeb_reserved_44, _x.AebReserved.aeb_reserved_45, _x.AebReserved.aeb_reserved_46, _x.AebReserved.aeb_reserved_47, _x.AebReserved.aeb_reserved_48, _x.AebReserved.aeb_reserved_49, _x.AebReserved.aeb_reserved_50, _x.AebReserved.aeb_reserved_51, _x.AebReserved.aeb_reserved_52, _x.AebReserved.aeb_reserved_53, _x.AebReserved.aeb_reserved_54, _x.AebReserved.aeb_reserved_55, _x.AebReserved.aeb_reserved_56, _x.AebReserved.aeb_reserved_57, _x.AebReserved.aeb_reserved_58, _x.AebReserved.aeb_reserved_59, _x.AebReserved.aeb_reserved_60, _x.AebReserved.aeb_reserved_61, _x.AebReserved.aeb_reserved_62, _x.AebReserved.aeb_reserved_63, _x.AebReserved.aeb_reserved_64, _x.AebReserved.aeb_reserved_65, _x.AebReserved.aeb_reserved_66, _x.AebReserved.aeb_reserved_67, _x.AebReserved.aeb_reserved_68, _x.AebReserved.aeb_reserved_69, _x.AebReserved.aeb_reserved_70, _x.AebReserved.aeb_reserved_71, _x.AebReserved.aeb_reserved_72, _x.AebReserved.aeb_reserved_73, _x.AebReserved.aeb_reserved_74, _x.AebReserved.aeb_reserved_75, _x.AebReserved.aeb_reserved_76, _x.AebReserved.aeb_reserved_77, _x.AebReserved.aeb_reserved_78, _x.AebReserved.aeb_reserved_79, _x.AebReserved.aeb_reserved_80, _x.AebReserved.aeb_reserved_81, _x.AebReserved.aeb_reserved_82, _x.AebReserved.aeb_reserved_83, _x.AebReserved.aeb_reserved_84, _x.AebReserved.aeb_reserved_85, _x.AebReserved.aeb_reserved_86, _x.AebReserved.aeb_reserved_87, _x.AebReserved.aeb_reserved_88, _x.AebReserved.aeb_reserved_89, _x.AebReserved.aeb_reserved_90, _x.AebReserved.aeb_reserved_91, _x.AebReserved.aeb_reserved_92, _x.AebReserved.aeb_reserved_93, _x.AebReserved.aeb_reserved_94, _x.AebReserved.aeb_reserved_95, _x.AebReserved.aeb_reserved_96, _x.AebReserved.aeb_reserved_97, _x.AebReserved.aeb_reserved_98, _x.AebReserved.aeb_reserved_99, _x.AebReserved.aeb_reserved_100, _x.AEBSm.snsrblk_cdn, _x.AEBSm.tmpfail_cdn, _x.AEBSm.permfail_cdn, _x.AEBSm.psv_cdn, _x.AEBSm.aebonff_cdn, _x.AEBSm.factive_cdn, _x.AEBSm.bactive_cdn, _x.AEBSm.stdby_cdn, _x.AEBSm.st, _x.AEBSm.sys_st, _x.FCWSm.snsrblk_cdn, _x.FCWSm.tmpfail_cdn, _x.FCWSm.permfail_cdn, _x.FCWSm.psv_cdn, _x.FCWSm.aebonff_cdn, _x.FCWSm.factive_cdn, _x.FCWSm.bactive_cdn, _x.FCWSm.stdby_cdn, _x.FCWSm.st, _x.FCWSm.sys_st, _x.AebRearSm.off_cdn, _x.AebRearSm.stdby_cdn, _x.AebRearSm.psv_cdn, _x.AebRearSm.psv_cdn_bit, _x.AebRearSm.fail_cdn, _x.AebRearSm.active_cdn,) = _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B().unpack(str[start:end])
      self.CCFOcandi.moveout = bool(self.CCFOcandi.moveout)
      self.CCFOcandi.inpath_before = bool(self.CCFOcandi.inpath_before)
      self.CCFOcandi.inpath_after = bool(self.CCFOcandi.inpath_after)
      self.CCFOcandi.inpath = bool(self.CCFOcandi.inpath)
      self.CCFOcandi.vfcheck = bool(self.CCFOcandi.vfcheck)
      self.CCFOcandi.lfcheck = bool(self.CCFOcandi.lfcheck)
      self.CCFOcandi.agecheck = bool(self.CCFOcandi.agecheck)
      self.CCFOcandi.inpathcheck = bool(self.CCFOcandi.inpathcheck)
      self.CCFOcandi.TOI = bool(self.CCFOcandi.TOI)
      self.CCFOcandi.warn = bool(self.CCFOcandi.warn)
      self.CCFOcandi.prefill = bool(self.CCFOcandi.prefill)
      self.CCFOcandi.lowbrake = bool(self.CCFOcandi.lowbrake)
      self.CCFOcandi.highbrake = bool(self.CCFOcandi.highbrake)
      self.CCFOcandi.isvision = bool(self.CCFOcandi.isvision)
      self.CCFOcandi.isfusion = bool(self.CCFOcandi.isfusion)
      self.CCFOcandi.isradar = bool(self.CCFOcandi.isradar)
      self.CCFOcandi.steerflag = bool(self.CCFOcandi.steerflag)
      self.CCFOcandi.iba_flag = bool(self.CCFOcandi.iba_flag)
      self.CCFOcandi.driverovertake = bool(self.CCFOcandi.driverovertake)
      self.CCFOcandi.driverovertake_warn = bool(self.CCFOcandi.driverovertake_warn)
      self.CCCcandi.inpathcur = bool(self.CCCcandi.inpathcur)
      self.CCCcandi.inpathpre = bool(self.CCCcandi.inpathpre)
      self.CCCcandi.inpath = bool(self.CCCcandi.inpath)
      self.CCCcandi.warn = bool(self.CCCcandi.warn)
      self.CCCcandi.prefill = bool(self.CCCcandi.prefill)
      self.CCCcandi.lowbrake = bool(self.CCCcandi.lowbrake)
      self.CCCcandi.highbrake = bool(self.CCCcandi.highbrake)
      self.CCCcandi.isvision = bool(self.CCCcandi.isvision)
      self.CCCcandi.isfusion = bool(self.CCCcandi.isfusion)
      self.CCCcandi.isradar = bool(self.CCCcandi.isradar)
      self.CCCcandi.steerflag = bool(self.CCCcandi.steerflag)
      self.FusionCCRFlag.readyforIBA = bool(self.FusionCCRFlag.readyforIBA)
      self.FusionVRUFlag.readyforIBA = bool(self.FusionVRUFlag.readyforIBA)
      self.FusionVRURearFlag.readyforIBA = bool(self.FusionVRURearFlag.readyforIBA)
      self.AebActuFlg.prewarn = bool(self.AebActuFlg.prewarn)
      self.AebActuFlg.latentwarn = bool(self.AebActuFlg.latentwarn)
      self.AebActuFlg.prefill = bool(self.AebActuFlg.prefill)
      self.AebActuFlg.warnbrk = bool(self.AebActuFlg.warnbrk)
      self.AebActuFlg.softbrk = bool(self.AebActuFlg.softbrk)
      self.AebActuFlg.hardbrk = bool(self.AebActuFlg.hardbrk)
      self.AebActuFlg.iba_req = bool(self.AebActuFlg.iba_req)
      self.AebActuFlg.hold_req = bool(self.AebActuFlg.hold_req)
      self.AEBSm.snsrblk_cdn = bool(self.AEBSm.snsrblk_cdn)
      self.AEBSm.tmpfail_cdn = bool(self.AEBSm.tmpfail_cdn)
      self.AEBSm.permfail_cdn = bool(self.AEBSm.permfail_cdn)
      self.AEBSm.psv_cdn = bool(self.AEBSm.psv_cdn)
      self.AEBSm.aebonff_cdn = bool(self.AEBSm.aebonff_cdn)
      self.AEBSm.factive_cdn = bool(self.AEBSm.factive_cdn)
      self.AEBSm.bactive_cdn = bool(self.AEBSm.bactive_cdn)
      self.AEBSm.stdby_cdn = bool(self.AEBSm.stdby_cdn)
      self.FCWSm.snsrblk_cdn = bool(self.FCWSm.snsrblk_cdn)
      self.FCWSm.tmpfail_cdn = bool(self.FCWSm.tmpfail_cdn)
      self.FCWSm.permfail_cdn = bool(self.FCWSm.permfail_cdn)
      self.FCWSm.psv_cdn = bool(self.FCWSm.psv_cdn)
      self.FCWSm.aebonff_cdn = bool(self.FCWSm.aebonff_cdn)
      self.FCWSm.factive_cdn = bool(self.FCWSm.factive_cdn)
      self.FCWSm.bactive_cdn = bool(self.FCWSm.bactive_cdn)
      self.FCWSm.stdby_cdn = bool(self.FCWSm.stdby_cdn)
      self.AebRearSm.off_cdn = bool(self.AebRearSm.off_cdn)
      self.AebRearSm.stdby_cdn = bool(self.AebRearSm.stdby_cdn)
      self.AebRearSm.psv_cdn = bool(self.AebRearSm.psv_cdn)
      self.AebRearSm.fail_cdn = bool(self.AebRearSm.fail_cdn)
      self.AebRearSm.active_cdn = bool(self.AebRearSm.active_cdn)
      _x = self
      start = end
      end += 65
      (_x.AebRearSm.sm_state, _x.FcwRearSm.off_cdn, _x.FcwRearSm.stdby_cdn, _x.FcwRearSm.psv_cdn, _x.FcwRearSm.psv_cdn_bit, _x.FcwRearSm.fail_cdn, _x.FcwRearSm.active_cdn, _x.FcwRearSm.sm_state, _x.FuncSuppress.Aeb_Suppress, _x.FuncSuppress.Fcw_Suppress, _x.FuncSuppress.Aebrear_Suppress, _x.FuncSuppress.Fcwrear_Suppress, _x.AebDiag.FCTsTopicState, _x.AebDiag.AebTopicState, _x.AebDiag.FcwTopicState, _x.AebDiag.TopicLoss, _x.AebDiag.TopicNoInit, _x.AebDiag.AebFaultSt, _x.AebDiag.FcwFaultSt, _x.AebDiag.AebFimIndex, _x.AebDiag.FcwFimIndex, _x.AebDiag.AebRearFaultSt, _x.AebDiag.AebRearFimIndex,) = _get_struct_I3BI2BI4B11I().unpack(str[start:end])
      self.FcwRearSm.off_cdn = bool(self.FcwRearSm.off_cdn)
      self.FcwRearSm.stdby_cdn = bool(self.FcwRearSm.stdby_cdn)
      self.FcwRearSm.psv_cdn = bool(self.FcwRearSm.psv_cdn)
      self.FcwRearSm.fail_cdn = bool(self.FcwRearSm.fail_cdn)
      self.FcwRearSm.active_cdn = bool(self.FcwRearSm.active_cdn)
      self.FuncSuppress.Aeb_Suppress = bool(self.FuncSuppress.Aeb_Suppress)
      self.FuncSuppress.Fcw_Suppress = bool(self.FuncSuppress.Fcw_Suppress)
      self.FuncSuppress.Aebrear_Suppress = bool(self.FuncSuppress.Aebrear_Suppress)
      self.FuncSuppress.Fcwrear_Suppress = bool(self.FuncSuppress.Fcwrear_Suppress)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.AebFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.FcwFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.AebRearFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AebDiag.FcwRearFault = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 809
      (_x.AebDiag.FWfailsafe, _x.AebDiag.FNfailsafe, _x.AebDiag.Lidarfailsafe, _x.AebDiag.Rearfailsafe, _x.AebMode.RearEnable, _x.AebMode.ShadowMode, _x.AebMode.ShadowModeSoft, _x.AebMode.HilMode, _x.AESCCRcandi.ID, _x.AESCCRcandi.VID, _x.AESCCRcandi.range, _x.AESCCRcandi.rangerate, _x.AESCCRcandi.TTC, _x.AESCCRcandi.TTB_tt, _x.AESCCRcandi.TTB_valid, _x.AESCCRcandi.TTT_left_tt, _x.AESCCRcandi.TTT_left_valid, _x.AESCCRcandi.TTT_right_tt, _x.AESCCRcandi.TTT_right_valid, _x.AESCCRcandi.closeleft_posx, _x.AESCCRcandi.closeleft_posy, _x.AESCCRcandi.closeleft_curx, _x.AESCCRcandi.closeleft_cury, _x.AESCCRcandi.closeleft_latest, _x.AESCCRcandi.closeright_posx, _x.AESCCRcandi.closeright_posy, _x.AESCCRcandi.closeright_curx, _x.AESCCRcandi.closeright_cury, _x.AESCCRcandi.closeright_latest, _x.AESCCRcandi.remoteleft_posx, _x.AESCCRcandi.remoteleft_posy, _x.AESCCRcandi.remoteleft_curx, _x.AESCCRcandi.remoteleft_cury, _x.AESCCRcandi.remoteleft_latest, _x.AESCCRcandi.remoteright_posx, _x.AESCCRcandi.remoteright_posy, _x.AESCCRcandi.remoteright_curx, _x.AESCCRcandi.remoteright_cury, _x.AESCCRcandi.remoteright_latest, _x.AESCCRcandi.center_posx, _x.AESCCRcandi.center_posy, _x.AESCCRcandi.center_curx, _x.AESCCRcandi.center_cury, _x.AESCCRcandi.center_latest, _x.AESCCRcandi.longpos, _x.AESCCRcandi.latpos, _x.AESCCRcandi.XOLC, _x.AESCCRcandi.latest, _x.AESCCRcandi.closest_corner, _x.AESCCRcandi.close_corner_est, _x.AESCCRcandi.inpath, _x.AESCCRcandi.inpathcur, _x.AESCCRcandi.inpathpre, _x.AESCCRcandi.inpathage, _x.AESCCRcandi.inpathcheck, _x.AESCCRcandi.isfusion, _x.AESCCRcandi.isvision, _x.AESCCRcandi.isradar, _x.AESCCRcandi.toi, _x.AESCCRcandi.isoncoming, _x.AESCCRcandi.AEBconf, _x.AESCCRcandi.steerflag, _x.AESCCRcandi.steerdirection, _x.AESCCRcandi.ref_pos.ref_character, _x.AESCCRcandi.ref_pos.pos_x, _x.AESCCRcandi.ref_pos.pos_y, _x.AESCCRcandi.ref_pos.range, _x.AESCCRcandi.ref_pos.heading, _x.CloseAESTarget.ID, _x.CloseAESTarget.VID, _x.CloseAESTarget.range, _x.CloseAESTarget.rangerate, _x.CloseAESTarget.TTC, _x.CloseAESTarget.TTB_tt, _x.CloseAESTarget.TTB_valid, _x.CloseAESTarget.TTT_left_tt, _x.CloseAESTarget.TTT_left_valid, _x.CloseAESTarget.TTT_right_tt, _x.CloseAESTarget.TTT_right_valid, _x.CloseAESTarget.closeleft_posx, _x.CloseAESTarget.closeleft_posy, _x.CloseAESTarget.closeleft_curx, _x.CloseAESTarget.closeleft_cury, _x.CloseAESTarget.closeleft_latest, _x.CloseAESTarget.closeright_posx, _x.CloseAESTarget.closeright_posy, _x.CloseAESTarget.closeright_curx, _x.CloseAESTarget.closeright_cury, _x.CloseAESTarget.closeright_latest, _x.CloseAESTarget.remoteleft_posx, _x.CloseAESTarget.remoteleft_posy, _x.CloseAESTarget.remoteleft_curx, _x.CloseAESTarget.remoteleft_cury, _x.CloseAESTarget.remoteleft_latest, _x.CloseAESTarget.remoteright_posx, _x.CloseAESTarget.remoteright_posy, _x.CloseAESTarget.remoteright_curx, _x.CloseAESTarget.remoteright_cury, _x.CloseAESTarget.remoteright_latest, _x.CloseAESTarget.center_posx, _x.CloseAESTarget.center_posy, _x.CloseAESTarget.center_curx, _x.CloseAESTarget.center_cury, _x.CloseAESTarget.center_latest, _x.CloseAESTarget.longpos, _x.CloseAESTarget.latpos, _x.CloseAESTarget.XOLC, _x.CloseAESTarget.latest, _x.CloseAESTarget.closest_corner, _x.CloseAESTarget.close_corner_est, _x.CloseAESTarget.inpath, _x.CloseAESTarget.inpathcur, _x.CloseAESTarget.inpathpre, _x.CloseAESTarget.inpathage, _x.CloseAESTarget.inpathcheck, _x.CloseAESTarget.isfusion, _x.CloseAESTarget.isvision, _x.CloseAESTarget.isradar, _x.CloseAESTarget.toi, _x.CloseAESTarget.isoncoming, _x.CloseAESTarget.AEBconf, _x.CloseAESTarget.steerflag, _x.CloseAESTarget.steerdirection, _x.CloseAESTarget.ref_pos.ref_character, _x.CloseAESTarget.ref_pos.pos_x, _x.CloseAESTarget.ref_pos.pos_y, _x.CloseAESTarget.ref_pos.range, _x.CloseAESTarget.ref_pos.heading, _x.AESPathCheck.plan_valid, _x.AESPathCheck.target_valid, _x.AESPathCheck.rout_valid, _x.AESPathCheck.reservetime, _x.AESPathCheck.pnc_c0, _x.AESPathCheck.pnc_c1, _x.AESPathCheck.pnc_c2, _x.AESPathCheck.pnc_c3, _x.AESPathCheck.pnc_c4, _x.AESPathCheck.pnc_c5, _x.AESPathCheck.crash_id, _x.AESPathCheck.crash_lane, _x.AESPathCheck.aessteerangle, _x.AESPathCheck.aespncst, _x.AESPathCheck.host_left_lane.path_c0, _x.AESPathCheck.host_left_lane.path_c1, _x.AESPathCheck.host_left_lane.path_c2, _x.AESPathCheck.host_left_lane.path_c3, _x.AESPathCheck.host_left_lane.isvalid, _x.AESPathCheck.host_left_lane.path_type, _x.AESPathCheck.host_left_lane.path_color, _x.AESPathCheck.host_left_lane.character, _x.AESPathCheck.host_right_lane.path_c0, _x.AESPathCheck.host_right_lane.path_c1, _x.AESPathCheck.host_right_lane.path_c2, _x.AESPathCheck.host_right_lane.path_c3, _x.AESPathCheck.host_right_lane.isvalid, _x.AESPathCheck.host_right_lane.path_type, _x.AESPathCheck.host_right_lane.path_color, _x.AESPathCheck.host_right_lane.character, _x.AESPathCheck.left_edge.path_c0, _x.AESPathCheck.left_edge.path_c1, _x.AESPathCheck.left_edge.path_c2, _x.AESPathCheck.left_edge.path_c3, _x.AESPathCheck.left_edge.isvalid, _x.AESPathCheck.left_edge.path_type, _x.AESPathCheck.left_edge.path_color, _x.AESPathCheck.left_edge.character, _x.AESPathCheck.right_edge.path_c0, _x.AESPathCheck.right_edge.path_c1, _x.AESPathCheck.right_edge.path_c2, _x.AESPathCheck.right_edge.path_c3, _x.AESPathCheck.right_edge.isvalid, _x.AESPathCheck.right_edge.path_type, _x.AESPathCheck.right_edge.path_color, _x.AESPathCheck.right_edge.character, _x.AESPathCheck.host_lpp.path_c0, _x.AESPathCheck.host_lpp.path_c1, _x.AESPathCheck.host_lpp.path_c2, _x.AESPathCheck.host_lpp.path_c3, _x.AESPathCheck.host_lpp.isvalid, _x.AESPathCheck.host_lpp.width, _x.AESPlanPath.root_path.path_c0, _x.AESPlanPath.root_path.path_c1, _x.AESPlanPath.root_path.path_c2, _x.AESPlanPath.root_path.path_c3, _x.AESPlanPath.root_path.path_c4, _x.AESPlanPath.root_path.path_c5, _x.AESPlanPath.root_path.curvature, _x.AESPlanPath.root_path.dcurv, _x.AESPlanPath.root_path.expect_lat, _x.AESPlanPath.root_path.expect_long, _x.AESPlanPath.root_path.isvalid, _x.AESPlanPath.root_path.rout_cost, _x.AESPlanPath.root_path.max_ay, _x.AESPlanPath.aesplanactv, _x.AESPlanPath.ltrldstlacntr, _x.AESPlanPath.egolawdth, _x.AESPlanPath.agvehlanecntr, _x.AESPlanPath.lacurv, _x.AESPlanPath.ladcurv, _x.AESPlanPath.vehspdkph, _x.AESPlanPath.dispvehspdkph,) = _get_struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f().unpack(str[start:end])
      self.AebMode.RearEnable = bool(self.AebMode.RearEnable)
      self.AebMode.ShadowMode = bool(self.AebMode.ShadowMode)
      self.AebMode.ShadowModeSoft = bool(self.AebMode.ShadowModeSoft)
      self.AebMode.HilMode = bool(self.AebMode.HilMode)
      self.AESPathCheck.host_left_lane.isvalid = bool(self.AESPathCheck.host_left_lane.isvalid)
      self.AESPathCheck.host_right_lane.isvalid = bool(self.AESPathCheck.host_right_lane.isvalid)
      self.AESPathCheck.left_edge.isvalid = bool(self.AESPathCheck.left_edge.isvalid)
      self.AESPathCheck.right_edge.isvalid = bool(self.AESPathCheck.right_edge.isvalid)
      self.AESPathCheck.host_lpp.isvalid = bool(self.AESPathCheck.host_lpp.isvalid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.AESPlanPath.better_path = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PathPlaned()
        _x = val1
        start = end
        end += 52
        (_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay,) = _get_struct_10fI2f().unpack(str[start:end])
        self.AESPlanPath.better_path.append(val1)
      _x = self
      start = end
      end += 36
      (_x.fAebOut.ebhpInfo.emncInfo.maneuverProb, _x.fAebOut.ebhpInfo.emncInfo.maneuver, _x.fAebOut.ebhpInfo.emncInfo.enterWeight, _x.fAebOut.ebhpInfo.emncInfo.exitWeight, _x.fAebOut.ebhpInfo.emncInfo.reserved, _x.fAebOut.ebhpInfo.etjpInfo.curvature, _x.fAebOut.ebhpInfo.etjpInfo.curvatureRate, _x.fAebOut.ebhpInfo.etjpInfo.roc, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.accel,) = _get_struct_fI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.ebhpInfo.etjpInfo.trajCa.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.endPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.validPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.stopPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCa.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.fAebOut.ebhpInfo.etjpInfo.trajCv.accel,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.ebhpInfo.etjpInfo.trajCv.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.endPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.validPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.x, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.y, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.s, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.phi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.sinPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.cosPhi, _x.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.stopPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.trajCv.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 44
      (_x.fAebOut.ebhpInfo.etjpInfo.xEnd, _x.fAebOut.ebhpInfo.etjpInfo.tEnd, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c0, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c1, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c2, _x.fAebOut.ebhpInfo.etjpInfo.xyTrajRoc.c3, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a0, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a1, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a2, _x.fAebOut.ebhpInfo.etjpInfo.xtTraj.a3, _x.fAebOut.ebhpInfo.etjpInfo.numSeg,) = _get_struct_10fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.xEndSegment = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInfo.etjpInfo.tEndSegment = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Yx3CoefStru()
        _x = val1
        start = end
        end += 16
        (_x.c0, _x.c1, _x.c2, _x.c3,) = _get_struct_4f().unpack(str[start:end])
        self.fAebOut.ebhpInfo.etjpInfo.xyTrajSegment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.car = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v71 = val1.objInfo
        _x = _v71
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v72 = val1.obhcInfo
        _x = _v72
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v73 = val1.othaInfo
        _x = _v73
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v73.inPathNow = bool(_v73.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.objOfInterestMap.car.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.pedstrain = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v74 = val1.objInfo
        _x = _v74
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v75 = val1.obhcInfo
        _x = _v75
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v76 = val1.othaInfo
        _x = _v76
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v76.inPathNow = bool(_v76.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.objOfInterestMap.pedstrain.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.bicyclist = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v77 = val1.objInfo
        _x = _v77
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v78 = val1.obhcInfo
        _x = _v78
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v79 = val1.othaInfo
        _x = _v79
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v79.inPathNow = bool(_v79.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.objOfInterestMap.bicyclist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.motor = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v80 = val1.objInfo
        _x = _v80
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v81 = val1.obhcInfo
        _x = _v81
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v82 = val1.othaInfo
        _x = _v82
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v82.inPathNow = bool(_v82.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.objOfInterestMap.motor.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objOfInterestMap.obstacle = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CrenStru()
        _v83 = val1.objInfo
        _x = _v83
        start = end
        end += 108
        (_x.id, _x.visionId, _x.radarId, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.longDistStd, _x.latDistStd, _x.longVelStd, _x.latVelStd, _x.longAccelStd, _x.latAccelStd, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSnesor,) = _get_struct_4I17f6I().unpack(str[start:end])
        _v84 = val1.obhcInfo
        _x = _v84
        start = end
        end += 16
        (_x.hypoProb, _x.collProb, _x.ttb, _x.hypoLabel,) = _get_struct_3fI().unpack(str[start:end])
        _v85 = val1.othaInfo
        _x = _v85
        start = end
        end += 13
        (_x.aLgtNec, _x.aLatNec, _x.ttc, _x.inPathNow,) = _get_struct_3fB().unpack(str[start:end])
        _v85.inPathNow = bool(_v85.inPathNow)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fAebOut.objOfInterestMap.obstacle.append(val1)
      _x = self
      start = end
      end += 137
      (_x.fAebOut.crenInfo.objInfo.id, _x.fAebOut.crenInfo.objInfo.visionId, _x.fAebOut.crenInfo.objInfo.radarId, _x.fAebOut.crenInfo.objInfo.age, _x.fAebOut.crenInfo.objInfo.longDist, _x.fAebOut.crenInfo.objInfo.latDist, _x.fAebOut.crenInfo.objInfo.longVel, _x.fAebOut.crenInfo.objInfo.latVel, _x.fAebOut.crenInfo.objInfo.longAccel, _x.fAebOut.crenInfo.objInfo.latAccel, _x.fAebOut.crenInfo.objInfo.heading, _x.fAebOut.crenInfo.objInfo.curvature, _x.fAebOut.crenInfo.objInfo.existConfidence, _x.fAebOut.crenInfo.objInfo.length, _x.fAebOut.crenInfo.objInfo.width, _x.fAebOut.crenInfo.objInfo.longDistStd, _x.fAebOut.crenInfo.objInfo.latDistStd, _x.fAebOut.crenInfo.objInfo.longVelStd, _x.fAebOut.crenInfo.objInfo.latVelStd, _x.fAebOut.crenInfo.objInfo.longAccelStd, _x.fAebOut.crenInfo.objInfo.latAccelStd, _x.fAebOut.crenInfo.objInfo.motionStatus, _x.fAebOut.crenInfo.objInfo.detectionSensor, _x.fAebOut.crenInfo.objInfo.type, _x.fAebOut.crenInfo.objInfo.refPoint, _x.fAebOut.crenInfo.objInfo.trackerStatus, _x.fAebOut.crenInfo.objInfo.visionDetectionSnesor, _x.fAebOut.crenInfo.obhcInfo.hypoProb, _x.fAebOut.crenInfo.obhcInfo.collProb, _x.fAebOut.crenInfo.obhcInfo.ttb, _x.fAebOut.crenInfo.obhcInfo.hypoLabel, _x.fAebOut.crenInfo.othaInfo.aLgtNec, _x.fAebOut.crenInfo.othaInfo.aLatNec, _x.fAebOut.crenInfo.othaInfo.ttc, _x.fAebOut.crenInfo.othaInfo.inPathNow,) = _get_struct_4I17f6I3fI3fB().unpack(str[start:end])
      self.fAebOut.crenInfo.othaInfo.inPathNow = bool(self.fAebOut.crenInfo.othaInfo.inPathNow)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.crenInfo.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 103
      (_x.fAebOut.acdnInfo.flgPreWarnTrigger, _x.fAebOut.acdnInfo.flgJerkTrigger, _x.fAebOut.acdnInfo.flgPrefillTrigger, _x.fAebOut.acdnInfo.flgPartialBrkTrigger, _x.fAebOut.acdnInfo.flgFullBrkTrigger, _x.fAebOut.acdnInfo.flgEbaTrigger, _x.fAebOut.acdnInfo.flgDangerRelease, _x.fAebOut.acdnInfo.flgObjInsideBlindZoom, _x.fAebOut.acdnInfo.flgFirstObjDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnDangerRelease, _x.fAebOut.acdnInfo.flgHeadOnObjTrigger, _x.fAebOut.tscdInfo.spdAebReduce, _x.fAebOut.tscdInfo.spdJerkReduce, _x.fAebOut.tscdInfo.flgDriverOverride, _x.fAebOut.tscdInfo.flgDriverBrake, _x.fAebOut.tscdInfo.flgDriveForward, _x.fAebOut.tscdInfo.flgDoorOpen, _x.fAebOut.tscdInfo.flgBeltWarn, _x.fAebOut.tscdInfo.flgVehEnable, _x.fAebOut.tscdInfo.flgChassisIntervince, _x.fAebOut.tscdInfo.flgBrakeOverHeat, _x.fAebOut.tscdInfo.flgEscOff, _x.fAebOut.tscdInfo.flgSysFault, _x.fAebOut.tscdInfo.flgPathFeasible, _x.fAebOut.stmeInfo.fcwStatus, _x.fAebOut.stmeInfo.aebBrkStatus, _x.fAebOut.stmeInfo.ebaStatus, _x.fAebOut.rqabInfo.fcwTargetId, _x.fAebOut.rqabInfo.aebTargetId, _x.fAebOut.rqabInfo.aebDecelReq, _x.fAebOut.rqabInfo.aebReq, _x.fAebOut.rqabInfo.aebTargetType, _x.fAebOut.rqabInfo.aebStatus, _x.fAebOut.rqabInfo.abpReq, _x.fAebOut.rqabInfo.awbReq, _x.fAebOut.rqabInfo.ebaReq, _x.fAebOut.rqabInfo.fcwReq, _x.fAebOut.rqabInfo.fcwTargetType, _x.fAebOut.rqabInfo.fcwStatus, _x.fAebOut.taDiagBusSignals.NumberOfValidCar, _x.fAebOut.taDiagBusSignals.NumberOfValidMotor, _x.fAebOut.taDiagBusSignals.NumberOfValidPed, _x.fAebOut.taDiagBusSignals.NumberOfValidBic, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvt, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.crvtRate, _x.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.filteredEgoALgt,) = _get_struct_11B2f11B5IfB2I4B6I3f().unpack(str[start:end])
      self.fAebOut.acdnInfo.flgPreWarnTrigger = bool(self.fAebOut.acdnInfo.flgPreWarnTrigger)
      self.fAebOut.acdnInfo.flgJerkTrigger = bool(self.fAebOut.acdnInfo.flgJerkTrigger)
      self.fAebOut.acdnInfo.flgPrefillTrigger = bool(self.fAebOut.acdnInfo.flgPrefillTrigger)
      self.fAebOut.acdnInfo.flgPartialBrkTrigger = bool(self.fAebOut.acdnInfo.flgPartialBrkTrigger)
      self.fAebOut.acdnInfo.flgFullBrkTrigger = bool(self.fAebOut.acdnInfo.flgFullBrkTrigger)
      self.fAebOut.acdnInfo.flgEbaTrigger = bool(self.fAebOut.acdnInfo.flgEbaTrigger)
      self.fAebOut.acdnInfo.flgDangerRelease = bool(self.fAebOut.acdnInfo.flgDangerRelease)
      self.fAebOut.acdnInfo.flgObjInsideBlindZoom = bool(self.fAebOut.acdnInfo.flgObjInsideBlindZoom)
      self.fAebOut.acdnInfo.flgFirstObjDangerRelease = bool(self.fAebOut.acdnInfo.flgFirstObjDangerRelease)
      self.fAebOut.acdnInfo.flgHeadOnDangerRelease = bool(self.fAebOut.acdnInfo.flgHeadOnDangerRelease)
      self.fAebOut.acdnInfo.flgHeadOnObjTrigger = bool(self.fAebOut.acdnInfo.flgHeadOnObjTrigger)
      self.fAebOut.tscdInfo.flgDriverOverride = bool(self.fAebOut.tscdInfo.flgDriverOverride)
      self.fAebOut.tscdInfo.flgDriverBrake = bool(self.fAebOut.tscdInfo.flgDriverBrake)
      self.fAebOut.tscdInfo.flgDriveForward = bool(self.fAebOut.tscdInfo.flgDriveForward)
      self.fAebOut.tscdInfo.flgDoorOpen = bool(self.fAebOut.tscdInfo.flgDoorOpen)
      self.fAebOut.tscdInfo.flgBeltWarn = bool(self.fAebOut.tscdInfo.flgBeltWarn)
      self.fAebOut.tscdInfo.flgVehEnable = bool(self.fAebOut.tscdInfo.flgVehEnable)
      self.fAebOut.tscdInfo.flgChassisIntervince = bool(self.fAebOut.tscdInfo.flgChassisIntervince)
      self.fAebOut.tscdInfo.flgBrakeOverHeat = bool(self.fAebOut.tscdInfo.flgBrakeOverHeat)
      self.fAebOut.tscdInfo.flgEscOff = bool(self.fAebOut.tscdInfo.flgEscOff)
      self.fAebOut.tscdInfo.flgSysFault = bool(self.fAebOut.tscdInfo.flgSysFault)
      self.fAebOut.tscdInfo.flgPathFeasible = bool(self.fAebOut.tscdInfo.flgPathFeasible)
      self.fAebOut.rqabInfo.aebReq = bool(self.fAebOut.rqabInfo.aebReq)
      self.fAebOut.rqabInfo.abpReq = bool(self.fAebOut.rqabInfo.abpReq)
      self.fAebOut.rqabInfo.awbReq = bool(self.fAebOut.rqabInfo.awbReq)
      self.fAebOut.rqabInfo.ebaReq = bool(self.fAebOut.rqabInfo.ebaReq)
      self.fAebOut.rqabInfo.fcwReq = bool(self.fAebOut.rqabInfo.fcwReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.dstInTrjctry = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLgt = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.egoPosnLat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.cosOfHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.sinOfHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.fAebOut.taDiagBusSignals.diagBusForPredEgoTrjStru.lowPAx,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjInfoOfDiagBus_t()
        _v86 = val1.diagBusForSortedObjectAeb
        _x = _v86
        start = end
        end += 33
        (_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex,) = _get_struct_2IB5fI().unpack(str[start:end])
        _v86.stillExist = bool(_v86.stillExist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.predCenPosnLgt = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.predCenPosnLat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.predCosHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.predSinHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v86
        start = end
        end += 28
        (_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi,) = _get_struct_I4B5f().unpack(str[start:end])
        _v86.linearOrCurvedPredValid = bool(_v86.linearOrCurvedPredValid)
        _v86.curvedMotion = bool(_v86.curvedMotion)
        _v86.stationary = bool(_v86.stationary)
        _v86.movingOncoming = bool(_v86.movingOncoming)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.opCond1 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v86.opCond1 = list(map(bool, _v86.opCond1))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.opCond2 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v86.opCond2 = list(map(bool, _v86.opCond2))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.opCond3 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v86.opCond3 = list(map(bool, _v86.opCond3))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.opCond4 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v86.opCond4 = list(map(bool, _v86.opCond4))
        _x = _v86
        start = end
        end += 24
        (_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex,) = _get_struct_4f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.edgeIndex = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.maxCLeIdx = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.minCRiIdx = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.taLateralThreatMatrixOpl = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.objLongPosnRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.objLatPosnRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.objLongSpanRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.objLatSpanRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.hostLongPosnRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.hostLatPosnRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.hostLongSpanRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.hostLatSpanRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.isValidUpdateForLongThreat = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v86.isValidUpdateForLongThreat = list(map(bool, _v86.isValidUpdateForLongThreat))
        _x = _v86
        start = end
        end += 24
        (_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth,) = _get_struct_3fI2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.xEdges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.yEdges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.egoMotionTime = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.egoXc = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v86
        start = end
        end += 12
        (_x.ttp, _x.fusionSource, _x.brkIndex,) = _get_struct_f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.objLongDistNear = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.inFwdPathResampled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v86.inFwdPathResampled = list(map(bool, _v86.inFwdPathResampled))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v86.timeVecResampled = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v86
        start = end
        end += 70
        (_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv,) = _get_struct_4f5B5f9B5f().unpack(str[start:end])
        _v86.flgJustPass = bool(_v86.flgJustPass)
        _v86.flgObjNotInPathAtTZero = bool(_v86.flgObjNotInPathAtTZero)
        _v86.TargetOnComingDuringHostTurn = bool(_v86.TargetOnComingDuringHostTurn)
        _v86.TargetLowCurvature = bool(_v86.TargetLowCurvature)
        _v86.LessHeadOnAtCollision = bool(_v86.LessHeadOnAtCollision)
        _v86.isGenMovingOnComingScenario = bool(_v86.isGenMovingOnComingScenario)
        _v86.hostDrvStraight = bool(_v86.hostDrvStraight)
        _v86.hostIsTurning = bool(_v86.hostIsTurning)
        _v86.targetIsTurning = bool(_v86.targetIsTurning)
        _v86.relativePosnOkDuringHostTurn = bool(_v86.relativePosnOkDuringHostTurn)
        _v86.isLtapTargetTurn = bool(_v86.isLtapTargetTurn)
        _v86.isLtapHostTurn = bool(_v86.isLtapHostTurn)
        _v86.useStrictInPath = bool(_v86.useStrictInPath)
        _v86.inPathCurPosn = bool(_v86.inPathCurPosn)
        _x = val1
        start = end
        end += 21
        (_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj,) = _get_struct_I4fB().unpack(str[start:end])
        val1.brkActvDlydForObj = bool(val1.brkActvDlydForObj)
        self.fAebOut.taDiagBusSignals.carObjInfoOfDiagBusVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjInfoOfDiagBus_t()
        _v87 = val1.diagBusForSortedObjectAeb
        _x = _v87
        start = end
        end += 33
        (_x.id, _x.type, _x.stillExist, _x.marginsLatInPathCurr, _x.marginsLatInPathPred, _x.marginsLgtForIntv, _x.marginsLatForIntv, _x.offSetLatForPrimaryTarget, _x.loopIndex,) = _get_struct_2IB5fI().unpack(str[start:end])
        _v87.stillExist = bool(_v87.stillExist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.predCenPosnLgt = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.predCenPosnLat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.predCosHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.predSinHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v87
        start = end
        end += 28
        (_x.objMovingDirection, _x.linearOrCurvedPredValid, _x.curvedMotion, _x.stationary, _x.movingOncoming, _x.aNegLgtRqrdForCtrl, _x.crvtReqdLe, _x.crvtRateReqdLe, _x.crvtReqdRi, _x.crvtRateReqdRi,) = _get_struct_I4B5f().unpack(str[start:end])
        _v87.linearOrCurvedPredValid = bool(_v87.linearOrCurvedPredValid)
        _v87.curvedMotion = bool(_v87.curvedMotion)
        _v87.stationary = bool(_v87.stationary)
        _v87.movingOncoming = bool(_v87.movingOncoming)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.opCond1 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v87.opCond1 = list(map(bool, _v87.opCond1))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.opCond2 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v87.opCond2 = list(map(bool, _v87.opCond2))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.opCond3 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v87.opCond3 = list(map(bool, _v87.opCond3))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.opCond4 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v87.opCond4 = list(map(bool, _v87.opCond4))
        _x = _v87
        start = end
        end += 24
        (_x.objVx, _x.objVy, _x.objAx, _x.objAy, _x.ttrIndex, _x.ttpIndex,) = _get_struct_4f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.edgeIndex = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.maxCLeIdx = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.minCRiIdx = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.taLateralThreatMatrixOpl = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.objLongPosnRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.objLatPosnRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.objLongSpanRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.objLatSpanRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.hostLongPosnRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.hostLatPosnRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.hostLongSpanRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.hostLatSpanRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.isValidUpdateForLongThreat = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v87.isValidUpdateForLongThreat = list(map(bool, _v87.isValidUpdateForLongThreat))
        _x = _v87
        start = end
        end += 24
        (_x.aNegLgtJerkReqdForIntv, _x.objHeading, _x.aLgtPreCalc1, _x.mostInPathIndex, _x.posnLatRel, _x.projectedWidth,) = _get_struct_3fI2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.xEdges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.yEdges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.egoMotionTime = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.egoXc = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v87
        start = end
        end += 12
        (_x.ttp, _x.fusionSource, _x.brkIndex,) = _get_struct_f2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.objLongDistNear = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.inFwdPathResampled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v87.inFwdPathResampled = list(map(bool, _v87.inFwdPathResampled))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v87.timeVecResampled = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = _v87
        start = end
        end += 70
        (_x.ttheta_left, _x.ttheta_right, _x.tZero, _x.tObjStop, _x.flgJustPass, _x.flgObjNotInPathAtTZero, _x.TargetOnComingDuringHostTurn, _x.TargetLowCurvature, _x.LessHeadOnAtCollision, _x.headingAtHostStartOfTheTurn, _x.objTrjCurvature, _x.predObjHeadingAtTtc, _x.predHostHeadingChangeAtTtc, _x.predRelativeHeadingAtTtc, _x.isGenMovingOnComingScenario, _x.hostDrvStraight, _x.hostIsTurning, _x.targetIsTurning, _x.relativePosnOkDuringHostTurn, _x.isLtapTargetTurn, _x.isLtapHostTurn, _x.useStrictInPath, _x.inPathCurPosn, _x.availStopdist, _x.rawBrkJerk, _x.rawBrkALgt, _x.impctPosnWithOutIntv, _x.impctPosnWithIntv,) = _get_struct_4f5B5f9B5f().unpack(str[start:end])
        _v87.flgJustPass = bool(_v87.flgJustPass)
        _v87.flgObjNotInPathAtTZero = bool(_v87.flgObjNotInPathAtTZero)
        _v87.TargetOnComingDuringHostTurn = bool(_v87.TargetOnComingDuringHostTurn)
        _v87.TargetLowCurvature = bool(_v87.TargetLowCurvature)
        _v87.LessHeadOnAtCollision = bool(_v87.LessHeadOnAtCollision)
        _v87.isGenMovingOnComingScenario = bool(_v87.isGenMovingOnComingScenario)
        _v87.hostDrvStraight = bool(_v87.hostDrvStraight)
        _v87.hostIsTurning = bool(_v87.hostIsTurning)
        _v87.targetIsTurning = bool(_v87.targetIsTurning)
        _v87.relativePosnOkDuringHostTurn = bool(_v87.relativePosnOkDuringHostTurn)
        _v87.isLtapTargetTurn = bool(_v87.isLtapTargetTurn)
        _v87.isLtapHostTurn = bool(_v87.isLtapHostTurn)
        _v87.useStrictInPath = bool(_v87.useStrictInPath)
        _v87.inPathCurPosn = bool(_v87.inPathCurPosn)
        _x = val1
        start = end
        end += 21
        (_x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj,) = _get_struct_I4fB().unpack(str[start:end])
        val1.brkActvDlydForObj = bool(val1.brkActvDlydForObj)
        self.fAebOut.taDiagBusSignals.vruObjInfoOfDiagBusVec.append(val1)
      _x = self
      start = end
      end += 41
      (_x.fAebOut.taDiagBusSignals.jerkLatAbsMax, _x.fAebOut.taDiagBusSignals.accelLatAbsMax, _x.fAebOut.taDiagBusSignals.crvtRateAbsMax, _x.fAebOut.taDiagBusSignals.crvtAbsMax, _x.fAebOut.taDiagBusSignals.jerkLatAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsCmft, _x.fAebOut.taDiagBusSignals.crvtRateAbsCmft, _x.fAebOut.taDiagBusSignals.crvtAbsCmft, _x.fAebOut.taDiagBusSignals.accelLatAbsOnComingBrking, _x.fAebOut.taDiagBusSignals.latPosnRoadConf, _x.fAebOut.taDiagBusSignals.TAMode,) = _get_struct_9fIB().unpack(str[start:end])
      self.fAebOut.taDiagBusSignals.TAMode = bool(self.fAebOut.taDiagBusSignals.TAMode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.taDiagBusSignals.reservedTaDebug = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 17
      (_x.fAebOut.ebhpInnerInfo.yawRateNoise.bias, _x.fAebOut.ebhpInnerInfo.yawRateNoise.std, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress, _x.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate, _x.fAebOut.ebhpInnerInfo.yawRateLearnState, _x.fAebOut.ebhpInnerInfo.flgEsitmateEnable,) = _get_struct_2f4BIB().unpack(str[start:end])
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSwitch)
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgFault)
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgSuppress)
      self.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate = bool(self.fAebOut.ebhpInnerInfo.learningCondInfo.flgActivate)
      self.fAebOut.ebhpInnerInfo.flgEsitmateEnable = bool(self.fAebOut.ebhpInnerInfo.flgEsitmateEnable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.modelConfidence = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.modelTransMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePriorHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPriorHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePostHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPostHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePriorCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPriorCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePostCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPostCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.residualCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.sysUncertaintyCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.procUncertaintyCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePriorCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPriorCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.statePostCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.covPostCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.residualCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.sysUncertaintyCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.procUncertaintyCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.stateTransMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.measValues = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.measMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ebhpInnerInfo.measUncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 24
      (_x.fAebOut.ebhpInnerInfo.curveCoeff.curvature, _x.fAebOut.ebhpInnerInfo.curveCoeff.curvatureRate, _x.fAebOut.ooifInnerInfo.allObjNum, _x.fAebOut.ooifInnerInfo.objPlausNum, _x.fAebOut.ooifInnerInfo.carCandiNum, _x.fAebOut.ooifInnerInfo.vruCandiNum,) = _get_struct_2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.objPlausStatus = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjPlausCheckStru()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.codeWord, _x.reserved,) = _get_struct_2If().unpack(str[start:end])
        self.fAebOut.ooifInnerInfo.objPlausStatus.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.objPlausVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjRelevanceStru()
        _x = val1
        start = end
        end += 37
        (_x.id, _x.tClose, _x.rangeClose, _x.objSensorErrorExt, _x.objSensorFluctExt, _x.egoFrontEndExt, _x.egoWidthExt, _x.overlapRate, _x.flgOverlap, _x.collisionRelevance,) = _get_struct_I7fBf().unpack(str[start:end])
        val1.flgOverlap = bool(val1.flgOverlap)
        _v88 = val1.egoBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v88.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v88.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v88.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v89 = val1.egoBoxLengthExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v90 = val1.egoBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v90.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v90.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v90.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v91 = val1.objBoxBase
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v91.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v91.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v91.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v92 = val1.ObjBoxExt
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v92.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v92.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v92.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.objSensorTotalExt,) = _get_struct_f().unpack(str[start:end])
        self.fAebOut.ooifInnerInfo.objPlausVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ooifInnerInfo.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.ooifInnerInfo.objPlausIds = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.carCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.CarRelevanceMonitorStru()
        _x = val1
        start = end
        end += 88
        (_x.id, _x.type, _x.laneLoc, _x.curThw, _x.ttcLgt, _x.tFuture, _x.futRelevance, _x.curLgtDistCorr, _x.curLatDistCorr, _x.futLgtDistCorr, _x.futLatDistCorr, _x.futPosRelevance, _x.corridorHalfWidth, _x.adjLaneBoundary, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseLgtDist, _x.futPoseLatDist, _x.futPoseRange, _x.futPoseHeading,) = _get_struct_3I19f().unpack(str[start:end])
        self.fAebOut.ooifInnerInfo.carCandidatesVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.ooifInnerInfo.vruCandidatesVec = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.VruRelevanceMonitorStru()
        _x = val1
        start = end
        end += 169
        (_x.id, _x.type, _x.laneLoc, _x.futRelevance, _x.futRelevanceThld, _x.ttcLgtRear, _x.ttcLgtFront, _x.tFutureFront, _x.tFutureRear, _x.curLgtDistCorr, _x.curLatDistCorr, _x.dangerousZoneHalfWidth, _x.transitZoneHalftWidth, _x.zoneLength, _x.curPosRelevance, _x.corridorHalfWidth, _x.corridorMarginHalfWidth, _x.escapeHalfWidth, _x.escapeMarginHalfWidth, _x.objFutFrontLatDistMin, _x.objFutFrontLatDistMax, _x.objFutRearLatDistMin, _x.objFutRearLatDistMax, _x.pEscapeLeft, _x.pEscapeRight, _x.pEenterLeft, _x.pEnterRight, _x.pEnter, _x.pEscape, _x.curPoseLgtDist, _x.curPoseLatDist, _x.curPoseRange, _x.curPoseHeading, _x.futPoseToEgoFrontLgtDist, _x.futPoseToEgoFrontLatDist, _x.futPoseToEgoFrontRange, _x.futPoseToEgoFrontHeading, _x.futPoseToEgoRearLgtDist, _x.futPoseToEgoRearLatDist, _x.futPoseToEgoRearRange, _x.futPoseToEgoRearHeading, _x.flgMoveForward, _x.flgMoveBackward, _x.flgMoveLeft, _x.flgMoveRight, _x.flgLatch,) = _get_struct_3I38f5B().unpack(str[start:end])
        val1.flgMoveForward = bool(val1.flgMoveForward)
        val1.flgMoveBackward = bool(val1.flgMoveBackward)
        val1.flgMoveLeft = bool(val1.flgMoveLeft)
        val1.flgMoveRight = bool(val1.flgMoveRight)
        val1.flgLatch = bool(val1.flgLatch)
        self.fAebOut.ooifInnerInfo.vruCandidatesVec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.crenInnerInfo.objPruneId = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 20
      (_x.fAebOut.crenInnerInfo.targetByPriorId, _x.fAebOut.crenInnerInfo.targetByTtcId, _x.fAebOut.crenInnerInfo.targetByDistId, _x.fAebOut.crenInnerInfo.targetByPostId, _x.fAebOut.crenInnerInfo.targetOldId,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.crenInnerInfo.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 182
      (_x.fAebOut.carInfo.vLgt, _x.fAebOut.carInfo.vLat, _x.fAebOut.carInfo.aLgt, _x.fAebOut.carInfo.aLat, _x.fAebOut.carInfo.yawRate, _x.fAebOut.carInfo.yawRateValid, _x.fAebOut.carInfo.aLgtValid, _x.fAebOut.carInfo.aLatValid, _x.fAebOut.carInfo.motionStatus, _x.fAebOut.carInfo.speed, _x.fAebOut.carInfo.spdWhlFl, _x.fAebOut.carInfo.spdWhlFr, _x.fAebOut.carInfo.spdWhlRl, _x.fAebOut.carInfo.spdWhlRr, _x.fAebOut.carInfo.spdWhlFlValid, _x.fAebOut.carInfo.spdWhlFrValid, _x.fAebOut.carInfo.spdWhlRlValid, _x.fAebOut.carInfo.spdWhlRrValid, _x.fAebOut.carInfo.dirWhlFl, _x.fAebOut.carInfo.dirWhlFr, _x.fAebOut.carInfo.dirWhlRl, _x.fAebOut.carInfo.dirWhlRr, _x.fAebOut.carInfo.brkPedalTravel, _x.fAebOut.carInfo.masterCylPress, _x.fAebOut.carInfo.aLgtDriverBrkReq, _x.fAebOut.carInfo.brkStatus, _x.fAebOut.carInfo.masterCylPressValid, _x.fAebOut.carInfo.dtcActive, _x.fAebOut.carInfo.tcsActive, _x.fAebOut.carInfo.vdcActive, _x.fAebOut.carInfo.escOverHeat, _x.fAebOut.carInfo.escFault, _x.fAebOut.carInfo.escSwitch, _x.fAebOut.carInfo.strAngle, _x.fAebOut.carInfo.strSpeed, _x.fAebOut.carInfo.pinAngle, _x.fAebOut.carInfo.strAngleValid, _x.fAebOut.carInfo.pinAngleValid, _x.fAebOut.carInfo.epsFault, _x.fAebOut.carInfo.accelPedalPos, _x.fAebOut.carInfo.actGearValid, _x.fAebOut.carInfo.accelPedalPosValid, _x.fAebOut.carInfo.accStatus, _x.fAebOut.carInfo.actGear, _x.fAebOut.carInfo.vehicleState, _x.fAebOut.carInfo.vehicleMode, _x.fAebOut.carInfo.doorDriver, _x.fAebOut.carInfo.doorFrontPassenger, _x.fAebOut.carInfo.doorRearLeft, _x.fAebOut.carInfo.doorRearRight, _x.fAebOut.carInfo.hoodStatus, _x.fAebOut.carInfo.trailerStatus, _x.fAebOut.carInfo.turnLeftLight, _x.fAebOut.carInfo.turnRightLight, _x.fAebOut.carInfo.beltWarnDriver, _x.fAebOut.carInfo.beltWarnFrontPassenger, _x.fAebOut.carInfo.beltRearLeft, _x.fAebOut.carInfo.beltRearMid, _x.fAebOut.carInfo.beltRearRight, _x.fAebOut.carInfo.aebSetting, _x.fAebOut.carInfo.fcwSetting, _x.fAebOut.carInfo.length, _x.fAebOut.carInfo.width, _x.fAebOut.carInfo.axisLength, _x.fAebOut.carInfo.rearAxisToFrontEnd, _x.fAebOut.carInfo.rearTrackWidth, _x.fAebOut.carInfo.steerRatio, _x.fAebOut.carInfo.cogToFrontAxis, _x.fAebOut.carInfo.cogToRearAxis, _x.fAebOut.carInfo.frontCornStiff, _x.fAebOut.carInfo.rearCornStiff,) = _get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().unpack(str[start:end])
      self.fAebOut.carInfo.yawRateValid = bool(self.fAebOut.carInfo.yawRateValid)
      self.fAebOut.carInfo.aLgtValid = bool(self.fAebOut.carInfo.aLgtValid)
      self.fAebOut.carInfo.aLatValid = bool(self.fAebOut.carInfo.aLatValid)
      self.fAebOut.carInfo.spdWhlFlValid = bool(self.fAebOut.carInfo.spdWhlFlValid)
      self.fAebOut.carInfo.spdWhlFrValid = bool(self.fAebOut.carInfo.spdWhlFrValid)
      self.fAebOut.carInfo.spdWhlRlValid = bool(self.fAebOut.carInfo.spdWhlRlValid)
      self.fAebOut.carInfo.spdWhlRrValid = bool(self.fAebOut.carInfo.spdWhlRrValid)
      self.fAebOut.carInfo.brkStatus = bool(self.fAebOut.carInfo.brkStatus)
      self.fAebOut.carInfo.masterCylPressValid = bool(self.fAebOut.carInfo.masterCylPressValid)
      self.fAebOut.carInfo.dtcActive = bool(self.fAebOut.carInfo.dtcActive)
      self.fAebOut.carInfo.tcsActive = bool(self.fAebOut.carInfo.tcsActive)
      self.fAebOut.carInfo.vdcActive = bool(self.fAebOut.carInfo.vdcActive)
      self.fAebOut.carInfo.escOverHeat = bool(self.fAebOut.carInfo.escOverHeat)
      self.fAebOut.carInfo.escFault = bool(self.fAebOut.carInfo.escFault)
      self.fAebOut.carInfo.escSwitch = bool(self.fAebOut.carInfo.escSwitch)
      self.fAebOut.carInfo.strAngleValid = bool(self.fAebOut.carInfo.strAngleValid)
      self.fAebOut.carInfo.pinAngleValid = bool(self.fAebOut.carInfo.pinAngleValid)
      self.fAebOut.carInfo.epsFault = bool(self.fAebOut.carInfo.epsFault)
      self.fAebOut.carInfo.actGearValid = bool(self.fAebOut.carInfo.actGearValid)
      self.fAebOut.carInfo.accelPedalPosValid = bool(self.fAebOut.carInfo.accelPedalPosValid)
      self.fAebOut.carInfo.doorDriver = bool(self.fAebOut.carInfo.doorDriver)
      self.fAebOut.carInfo.doorFrontPassenger = bool(self.fAebOut.carInfo.doorFrontPassenger)
      self.fAebOut.carInfo.doorRearLeft = bool(self.fAebOut.carInfo.doorRearLeft)
      self.fAebOut.carInfo.doorRearRight = bool(self.fAebOut.carInfo.doorRearRight)
      self.fAebOut.carInfo.hoodStatus = bool(self.fAebOut.carInfo.hoodStatus)
      self.fAebOut.carInfo.trailerStatus = bool(self.fAebOut.carInfo.trailerStatus)
      self.fAebOut.carInfo.turnLeftLight = bool(self.fAebOut.carInfo.turnLeftLight)
      self.fAebOut.carInfo.turnRightLight = bool(self.fAebOut.carInfo.turnRightLight)
      self.fAebOut.carInfo.beltWarnDriver = bool(self.fAebOut.carInfo.beltWarnDriver)
      self.fAebOut.carInfo.beltWarnFrontPassenger = bool(self.fAebOut.carInfo.beltWarnFrontPassenger)
      self.fAebOut.carInfo.beltRearLeft = bool(self.fAebOut.carInfo.beltRearLeft)
      self.fAebOut.carInfo.beltRearMid = bool(self.fAebOut.carInfo.beltRearMid)
      self.fAebOut.carInfo.beltRearRight = bool(self.fAebOut.carInfo.beltRearRight)
      self.fAebOut.carInfo.aebSetting = bool(self.fAebOut.carInfo.aebSetting)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.objInfo = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ObjInfo()
        _x = val1
        start = end
        end += 26
        (_x.OBJ_Object_Count, _x.OBJ_VRU_Count, _x.OBJ_VD_Count, _x.OBJ_CIPV_ID, _x.OBJ_CIPV_Lost, _x.OBJ_Is_CCI, _x.OBJ_CCI_Side, _x.OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
        val1.OBJ_CIPV_Lost = bool(val1.OBJ_CIPV_Lost)
        val1.OBJ_Is_CCI = bool(val1.OBJ_Is_CCI)
        self.fAebOut.objInfo.append(val1)
      _x = self
      start = end
      end += 64
      (_x.fAebOut.acdnInnerInfo.thdFcwTtcCompens, _x.fAebOut.acdnInnerInfo.isSafeDistance, _x.fAebOut.acdnInnerInfo.isSafeLgtRelSpd, _x.fAebOut.acdnInnerInfo.isSafeLgtRelAcc, _x.fAebOut.acdnInnerInfo.dangerRelease, _x.fAebOut.acdnInnerInfo.objLongDistCorr, _x.fAebOut.acdnInnerInfo.fcwCodeWord, _x.fAebOut.acdnInnerInfo.aebCodeWord, _x.fAebOut.acdnInnerInfo.crvtReqdLe, _x.fAebOut.acdnInnerInfo.crvtReqdRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtCmfRi, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxLe, _x.fAebOut.acdnInnerInfo.driverCapCrvtMaxRi, _x.fAebOut.acdnInnerInfo.oldGearAct, _x.fAebOut.acdnInnerInfo.objLatDistGap, _x.fAebOut.acdnInnerInfo.flgLatEscapeLe, _x.fAebOut.acdnInnerInfo.flgLatEscapeRi, _x.fAebOut.acdnInnerInfo.isProceedDangerRelease,) = _get_struct_f4Bf2I6fI4f().unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.isSafeDistance = bool(self.fAebOut.acdnInnerInfo.isSafeDistance)
      self.fAebOut.acdnInnerInfo.isSafeLgtRelSpd = bool(self.fAebOut.acdnInnerInfo.isSafeLgtRelSpd)
      self.fAebOut.acdnInnerInfo.isSafeLgtRelAcc = bool(self.fAebOut.acdnInnerInfo.isSafeLgtRelAcc)
      self.fAebOut.acdnInnerInfo.dangerRelease = bool(self.fAebOut.acdnInnerInfo.dangerRelease)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.floatAcdnInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.intAcdnInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve = list(map(bool, self.fAebOut.acdnInnerInfo.boolAcdnInnerReserve))
      _x = self
      start = end
      end += 26
      (_x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverIntvFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.dirverStrFactor, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid, _x.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLe, _x.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqRi,) = _get_struct_3B2f7B2f().unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isObjChange)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriverStrAction)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driverAction.isDriAccPedalAction)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDirverFocuseOnMaxDelay)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAcc2Overtake)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverAvoidanceObj)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverChgPedlAct)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverDecelAvoid)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.isDriverTurnning)
      self.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger = bool(self.fAebOut.acdnInnerInfo.drilInnerInfo.driAvdObjInfo.objCrvtAbsReqLeBigger)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.floatHooaInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.intHooaInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve = list(map(bool, self.fAebOut.acdnInnerInfo.hooaInnerInfo.boolHooaInnerReserve))
      _x = self
      start = end
      end += 35
      (_x.fAebOut.acdnInnerInfo.aFcwALatCritByDrvr, _x.fAebOut.acdnInnerInfo.crvtFcwALatCritByDrvrThd, _x.fAebOut.acdnInnerInfo.tTtcFcwTriger, _x.fAebOut.acdnInnerInfo.facDriverIntvFcw, _x.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap, _x.fAebOut.stmeInnerInfo.aebPassiveCodeWord, _x.fAebOut.stmeInnerInfo.aebTermintCodeWord, _x.fAebOut.stmeInnerInfo.activeCounter, _x.fAebOut.stmeInnerInfo.passiveCounter, _x.fAebOut.stmeInnerInfo.aebSwitchFlag, _x.fAebOut.stmeInnerInfo.faultFlag,) = _get_struct_4fB4I2B().unpack(str[start:end])
      self.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap = bool(self.fAebOut.acdnInnerInfo.isHeadOnObjTrjOverlap)
      self.fAebOut.stmeInnerInfo.aebSwitchFlag = bool(self.fAebOut.stmeInnerInfo.aebSwitchFlag)
      self.fAebOut.stmeInnerInfo.faultFlag = bool(self.fAebOut.stmeInnerInfo.faultFlag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.stmeInnerInfo.floatStmeInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.reservedSpace.boolReserve = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.fAebOut.reservedSpace.boolReserve = list(map(bool, self.fAebOut.reservedSpace.boolReserve))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.reservedSpace.uintReserve = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.reservedSpace.floatReserve = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 80
      (_x.fAebOut.fySideFeatureDebug.request.bsdlca_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_sts, _x.fAebOut.fySideFeatureDebug.request.bsdlca_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.bsdlca_haptic_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.ext_req, _x.fAebOut.fySideFeatureDebug.request.sdow_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_right_sts, _x.fAebOut.fySideFeatureDebug.request.sdow_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.sdow_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_onoff_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_right_sts, _x.fAebOut.fySideFeatureDebug.request.rcta_left_warn_req, _x.fAebOut.fySideFeatureDebug.request.rcta_right_warn_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_left_req, _x.fAebOut.fySideFeatureDebug.request.mirr_light_right_req, _x.fAebOut.fySideFeatureDebug.request.rear_rad_fault_disp,) = _get_struct_20I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.bsd_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyBsdTrackedObj()
        _x = val1
        start = end
        end += 132
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time,) = _get_struct_2I11fiIi3I6f11B2fB3I().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.fAebOut.fySideFeatureDebug.bsd_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.lca_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FyLcaTrackedObj()
        _x = val1
        start = end
        end += 144
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f11B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right = bool(val1.is_in_region_right)
        val1.is_in_region_left = bool(val1.is_in_region_left)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.fAebOut.fySideFeatureDebug.lca_tracked_obj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.sdow_tracked_obj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FySdowTrackedObj()
        _x = val1
        start = end
        end += 146
        (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right_far, _x.is_in_region_left_far, _x.is_in_region_right_near, _x.is_in_region_left_near, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time, _x.ttc, _x.meet_ttc_thresh, _x.is_following_lane, _x.dist_to_collide_position, _x.is_dist_to_collide_position_big, _x.suppress_warn_by_brake_dist,) = _get_struct_2I11fiIi3I6f13B2fB3If2Bf2B().unpack(str[start:end])
        val1.is_valid_by_spd = bool(val1.is_valid_by_spd)
        val1.is_in_range_long = bool(val1.is_in_range_long)
        val1.is_any_pt_in_rect_right = bool(val1.is_any_pt_in_rect_right)
        val1.is_any_pt_in_rect_left = bool(val1.is_any_pt_in_rect_left)
        val1.is_frntmid_pt_in_range_right = bool(val1.is_frntmid_pt_in_range_right)
        val1.is_frntmid_pt_in_range_left = bool(val1.is_frntmid_pt_in_range_left)
        val1.is_in_region_right_far = bool(val1.is_in_region_right_far)
        val1.is_in_region_left_far = bool(val1.is_in_region_left_far)
        val1.is_in_region_right_near = bool(val1.is_in_region_right_near)
        val1.is_in_region_left_near = bool(val1.is_in_region_left_near)
        val1.is_valid_threat_right = bool(val1.is_valid_threat_right)
        val1.is_valid_threat_left = bool(val1.is_valid_threat_left)
        val1.is_tracked = bool(val1.is_tracked)
        val1.is_updated = bool(val1.is_updated)
        val1.meet_ttc_thresh = bool(val1.meet_ttc_thresh)
        val1.is_following_lane = bool(val1.is_following_lane)
        val1.is_dist_to_collide_position_big = bool(val1.is_dist_to_collide_position_big)
        val1.suppress_warn_by_brake_dist = bool(val1.suppress_warn_by_brake_dist)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.fAebOut.fySideFeatureDebug.sdow_tracked_obj.append(val1)
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_left.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_trig_obj_right.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_trig_obj_left.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 48
      (_x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.id, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latDist, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.heading, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.length, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.width, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ttc, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.ta, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.longVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.latVel, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.type, _x.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.motionStatus,) = _get_struct_I9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_trig_obj_right.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.fAebOut.fySideFeatureDebug.num_of_ooi_bsd, _x.fAebOut.fySideFeatureDebug.num_of_ooi_lca, _x.fAebOut.fySideFeatureDebug.num_of_ooi_sdow,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.fail_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.inactive_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 1
      (self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off,) = _get_struct_B().unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off = bool(self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.is_bsdlca_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_inhibits.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.fail_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.inactive_inhibits = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 1
      (self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off,) = _get_struct_B().unpack(str[start:end])
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off = bool(self.fAebOut.fySideFeatureDebug.sdow_inhibits.is_sdow_off)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_inhibits.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.bsdlca_decision, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.bsdlca_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.bsdlca_action_decision.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.fAebOut.fySideFeatureDebug.sdow_action_decision.sdow_decision, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_left, _x.fAebOut.fySideFeatureDebug.sdow_action_decision.trig_obj_id_right,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.sdow_action_decision.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve = list(map(bool, self.fAebOut.fySideFeatureDebug.reserved_space.sd_boolReserve))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_intReserve = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.fySideFeatureDebug.reserved_space.sd_floatReserve = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 5
      (_x.fAebOut.rqabInnerInfo.holdReq, _x.fAebOut.rqabInnerInfo.holdEnt, _x.fAebOut.rqabInnerInfo.holdExt, _x.fAebOut.rqabInnerInfo.isDriverGearChg, _x.fAebOut.rqabInnerInfo.isDriverAccPedl,) = _get_struct_5B().unpack(str[start:end])
      self.fAebOut.rqabInnerInfo.holdReq = bool(self.fAebOut.rqabInnerInfo.holdReq)
      self.fAebOut.rqabInnerInfo.holdEnt = bool(self.fAebOut.rqabInnerInfo.holdEnt)
      self.fAebOut.rqabInnerInfo.holdExt = bool(self.fAebOut.rqabInnerInfo.holdExt)
      self.fAebOut.rqabInnerInfo.isDriverGearChg = bool(self.fAebOut.rqabInnerInfo.isDriverGearChg)
      self.fAebOut.rqabInnerInfo.isDriverAccPedl = bool(self.fAebOut.rqabInnerInfo.isDriverAccPedl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.fAebOut.rqabInnerInfo.boolRqabInnerReserve = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.fAebOut.rqabInnerInfo.boolRqabInnerReserve = list(map(bool, self.fAebOut.rqabInnerInfo.boolRqabInnerReserve))
      _x = self
      start = end
      end += 68
      (_x.fAebOut.timeCostInfo.fctsApp, _x.fAebOut.timeCostInfo.carInfoMap, _x.fAebOut.timeCostInfo.objInfoMap, _x.fAebOut.timeCostInfo.aebMain, _x.fAebOut.timeCostInfo.ctrlInfoMap, _x.fAebOut.timeCostInfo.aebPublish, _x.fAebOut.timeCostInfo.ebhp, _x.fAebOut.timeCostInfo.ooif, _x.fAebOut.timeCostInfo.obhc, _x.fAebOut.timeCostInfo.otha, _x.fAebOut.timeCostInfo.cren, _x.fAebOut.timeCostInfo.acdn, _x.fAebOut.timeCostInfo.tscd, _x.fAebOut.timeCostInfo.stme, _x.fAebOut.timeCostInfo.rqab, _x.fAebOut.publish_ptp_ts,) = _get_struct_15fQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fAebOut.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fAebOut.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.fAebOut.counter, _x.fAebOut.publish_ts, _x.publish_ptp_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10fBI4f = None
def _get_struct_10fBI4f():
    global _struct_10fBI4f
    if _struct_10fBI4f is None:
        _struct_10fBI4f = struct.Struct("<10fBI4f")
    return _struct_10fBI4f
_struct_10fI = None
def _get_struct_10fI():
    global _struct_10fI
    if _struct_10fI is None:
        _struct_10fI = struct.Struct("<10fI")
    return _struct_10fI
_struct_10fI2f = None
def _get_struct_10fI2f():
    global _struct_10fI2f
    if _struct_10fI2f is None:
        _struct_10fI2f = struct.Struct("<10fI2f")
    return _struct_10fI2f
_struct_11B2f11B5IfB2I4B6I3f = None
def _get_struct_11B2f11B5IfB2I4B6I3f():
    global _struct_11B2f11B5IfB2I4B6I3f
    if _struct_11B2f11B5IfB2I4B6I3f is None:
        _struct_11B2f11B5IfB2I4B6I3f = struct.Struct("<11B2f11B5IfB2I4B6I3f")
    return _struct_11B2f11B5IfB2I4B6I3f
_struct_15fQ = None
def _get_struct_15fQ():
    global _struct_15fQ
    if _struct_15fQ is None:
        _struct_15fQ = struct.Struct("<15fQ")
    return _struct_15fQ
_struct_20I = None
def _get_struct_20I():
    global _struct_20I
    if _struct_20I is None:
        _struct_20I = struct.Struct("<20I")
    return _struct_20I
_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I = None
def _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I():
    global _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I
    if _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I is None:
        _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I = struct.Struct("<2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I")
    return _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B2I2fB7f6I
_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B = None
def _get_struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B():
    global _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B
    if _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B is None:
        _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B = struct.Struct("<2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B")
    return _struct_2I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I3BI7B2fBI4d10IB9IB9I8BIB100d8B2I8B2I3BI2B
_struct_2I11fiIi3I6f11B2fB3I = None
def _get_struct_2I11fiIi3I6f11B2fB3I():
    global _struct_2I11fiIi3I6f11B2fB3I
    if _struct_2I11fiIi3I6f11B2fB3I is None:
        _struct_2I11fiIi3I6f11B2fB3I = struct.Struct("<2I11fiIi3I6f11B2fB3I")
    return _struct_2I11fiIi3I6f11B2fB3I
_struct_2I11fiIi3I6f11B2fB3If2Bf2B = None
def _get_struct_2I11fiIi3I6f11B2fB3If2Bf2B():
    global _struct_2I11fiIi3I6f11B2fB3If2Bf2B
    if _struct_2I11fiIi3I6f11B2fB3If2Bf2B is None:
        _struct_2I11fiIi3I6f11B2fB3If2Bf2B = struct.Struct("<2I11fiIi3I6f11B2fB3If2Bf2B")
    return _struct_2I11fiIi3I6f11B2fB3If2Bf2B
_struct_2I11fiIi3I6f13B2fB3If2Bf2B = None
def _get_struct_2I11fiIi3I6f13B2fB3If2Bf2B():
    global _struct_2I11fiIi3I6f13B2fB3If2Bf2B
    if _struct_2I11fiIi3I6f13B2fB3If2Bf2B is None:
        _struct_2I11fiIi3I6f13B2fB3If2Bf2B = struct.Struct("<2I11fiIi3I6f13B2fB3If2Bf2B")
    return _struct_2I11fiIi3I6f13B2fB3If2Bf2B
_struct_2I13f4BI3BIBI10B2fB = None
def _get_struct_2I13f4BI3BIBI10B2fB():
    global _struct_2I13f4BI3BIBI10B2fB
    if _struct_2I13f4BI3BIBI10B2fB is None:
        _struct_2I13f4BI3BIBI10B2fB = struct.Struct("<2I13f4BI3BIBI10B2fB")
    return _struct_2I13f4BI3BIBI10B2fB
_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B = None
def _get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B():
    global _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B
    if _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B is None:
        _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B = struct.Struct("<2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B")
    return _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI4f2I10fI2B
_struct_2IB5fI = None
def _get_struct_2IB5fI():
    global _struct_2IB5fI
    if _struct_2IB5fI is None:
        _struct_2IB5fI = struct.Struct("<2IB5fI")
    return _struct_2IB5fI
_struct_2If = None
def _get_struct_2If():
    global _struct_2If
    if _struct_2If is None:
        _struct_2If = struct.Struct("<2If")
    return _struct_2If
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f4BIB = None
def _get_struct_2f4BIB():
    global _struct_2f4BIB
    if _struct_2f4BIB is None:
        _struct_2f4BIB = struct.Struct("<2f4BIB")
    return _struct_2f4BIB
_struct_2f4I = None
def _get_struct_2f4I():
    global _struct_2f4I
    if _struct_2f4I is None:
        _struct_2f4I = struct.Struct("<2f4I")
    return _struct_2f4I
_struct_3B2f7B2f = None
def _get_struct_3B2f7B2f():
    global _struct_3B2f7B2f
    if _struct_3B2f7B2f is None:
        _struct_3B2f7B2f = struct.Struct("<3B2f7B2f")
    return _struct_3B2f7B2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3I19f = None
def _get_struct_3I19f():
    global _struct_3I19f
    if _struct_3I19f is None:
        _struct_3I19f = struct.Struct("<3I19f")
    return _struct_3I19f
_struct_3I38f5B = None
def _get_struct_3I38f5B():
    global _struct_3I38f5B
    if _struct_3I38f5B is None:
        _struct_3I38f5B = struct.Struct("<3I38f5B")
    return _struct_3I38f5B
_struct_3Q = None
def _get_struct_3Q():
    global _struct_3Q
    if _struct_3Q is None:
        _struct_3Q = struct.Struct("<3Q")
    return _struct_3Q
_struct_3fB = None
def _get_struct_3fB():
    global _struct_3fB
    if _struct_3fB is None:
        _struct_3fB = struct.Struct("<3fB")
    return _struct_3fB
_struct_3fI = None
def _get_struct_3fI():
    global _struct_3fI
    if _struct_3fI is None:
        _struct_3fI = struct.Struct("<3fI")
    return _struct_3fI
_struct_3fI2f = None
def _get_struct_3fI2f():
    global _struct_3fI2f
    if _struct_3fI2f is None:
        _struct_3fI2f = struct.Struct("<3fI2f")
    return _struct_3fI2f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4I17f6I = None
def _get_struct_4I17f6I():
    global _struct_4I17f6I
    if _struct_4I17f6I is None:
        _struct_4I17f6I = struct.Struct("<4I17f6I")
    return _struct_4I17f6I
_struct_4I17f6I3fI3fB = None
def _get_struct_4I17f6I3fI3fB():
    global _struct_4I17f6I3fI3fB
    if _struct_4I17f6I3fI3fB is None:
        _struct_4I17f6I3fI3fB = struct.Struct("<4I17f6I3fI3fB")
    return _struct_4I17f6I3fI3fB
_struct_4I2BiI = None
def _get_struct_4I2BiI():
    global _struct_4I2BiI
    if _struct_4I2BiI is None:
        _struct_4I2BiI = struct.Struct("<4I2BiI")
    return _struct_4I2BiI
_struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f = None
def _get_struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f():
    global _struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f
    if _struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f is None:
        _struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f = struct.Struct("<4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f")
    return _struct_4I4B2I6fIfI29f14IfI4d2I6fIfI29f14IfI4d4I6f2I6fB3I4fB3I4fB3I4fB3I4fB11fI2fI7f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4f2I = None
def _get_struct_4f2I():
    global _struct_4f2I
    if _struct_4f2I is None:
        _struct_4f2I = struct.Struct("<4f2I")
    return _struct_4f2I
_struct_4f5B5f9B5f = None
def _get_struct_4f5B5f9B5f():
    global _struct_4f5B5f9B5f
    if _struct_4f5B5f9B5f is None:
        _struct_4f5B5f9B5f = struct.Struct("<4f5B5f9B5f")
    return _struct_4f5B5f9B5f
_struct_4fB4I2B = None
def _get_struct_4fB4I2B():
    global _struct_4fB4I2B
    if _struct_4fB4I2B is None:
        _struct_4fB4I2B = struct.Struct("<4fB4I2B")
    return _struct_4fB4I2B
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f = None
def _get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f():
    global _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f
    if _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f is None:
        _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f = struct.Struct("<5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f")
    return _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_9fIB = None
def _get_struct_9fIB():
    global _struct_9fIB
    if _struct_9fIB is None:
        _struct_9fIB = struct.Struct("<9fIB")
    return _struct_9fIB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f = None
def _get_struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f():
    global _struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f
    if _struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f is None:
        _struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f = struct.Struct("<BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f")
    return _struct_BI3BIBI9B2fBI4dB2f2B4I10fI3BI3BIBI9B2fBI4dB2f2B4I10fI8f2I7B2I2BIBId7B2fBI4d3I13f4BI3BIBI10B2fBI4d10fBI4f2I13f4BI3BIBI10B2fBI4d10fBI6f
_struct_I3BI2BI4B11I = None
def _get_struct_I3BI2BI4B11I():
    global _struct_I3BI2BI4B11I
    if _struct_I3BI2BI4B11I is None:
        _struct_I3BI2BI4B11I = struct.Struct("<I3BI2BI4B11I")
    return _struct_I3BI2BI4B11I
_struct_I4B5f = None
def _get_struct_I4B5f():
    global _struct_I4B5f
    if _struct_I4B5f is None:
        _struct_I4B5f = struct.Struct("<I4B5f")
    return _struct_I4B5f
_struct_I4d = None
def _get_struct_I4d():
    global _struct_I4d
    if _struct_I4d is None:
        _struct_I4d = struct.Struct("<I4d")
    return _struct_I4d
_struct_I4fB = None
def _get_struct_I4fB():
    global _struct_I4fB
    if _struct_I4fB is None:
        _struct_I4fB = struct.Struct("<I4fB")
    return _struct_I4fB
_struct_I6B = None
def _get_struct_I6B():
    global _struct_I6B
    if _struct_I6B is None:
        _struct_I6B = struct.Struct("<I6B")
    return _struct_I6B
_struct_I7fBf = None
def _get_struct_I7fBf():
    global _struct_I7fBf
    if _struct_I7fBf is None:
        _struct_I7fBf = struct.Struct("<I7fBf")
    return _struct_I7fBf
_struct_I9f2I = None
def _get_struct_I9f2I():
    global _struct_I9f2I
    if _struct_I9f2I is None:
        _struct_I9f2I = struct.Struct("<I9f2I")
    return _struct_I9f2I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_f2I = None
def _get_struct_f2I():
    global _struct_f2I
    if _struct_f2I is None:
        _struct_f2I = struct.Struct("<f2I")
    return _struct_f2I
_struct_f4Bf2I6fI4f = None
def _get_struct_f4Bf2I6fI4f():
    global _struct_f4Bf2I6fI4f
    if _struct_f4Bf2I6fI4f is None:
        _struct_f4Bf2I6fI4f = struct.Struct("<f4Bf2I6fI4f")
    return _struct_f4Bf2I6fI4f
_struct_fB2fI2f2B4f = None
def _get_struct_fB2fI2f2B4f():
    global _struct_fB2fI2f2B4f
    if _struct_fB2fI2f2B4f is None:
        _struct_fB2fI2f2B4f = struct.Struct("<fB2fI2f2B4f")
    return _struct_fB2fI2f2B4f
_struct_fI7f = None
def _get_struct_fI7f():
    global _struct_fI7f
    if _struct_fI7f is None:
        _struct_fI7f = struct.Struct("<fI7f")
    return _struct_fI7f

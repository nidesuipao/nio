# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdLinkInfoList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdLinkInfoList(genpy.Message):
  _md5sum = "15c76146f0d7acf8e2286bf2a59ac89d"
  _type = "rospy_message_converter/HdLinkInfoList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """HdLinkInfo[] link_info_list

================================================================================
MSG: rospy_message_converter/HdLinkInfo
uint64 id
float64 length
uint32 average_speed
int32 priority_road_class
int32 travel_direction
int32[] form_way
uint64[] predecessor_link_ids
uint64[] successor_link_ids
uint64[] lane_ids
uint64[] lane_group_ids
uint64[] road_geo_line_ids
bool complex_intersection
LinkFeaturePoint[] feature_points

================================================================================
MSG: rospy_message_converter/LinkFeaturePoint
int32 type
float32 offset
MapPoint position
uint64 link_id

================================================================================
MSG: rospy_message_converter/MapPoint
float64 x
float64 y
float64 z
"""
  __slots__ = ['link_info_list']
  _slot_types = ['rospy_message_converter/HdLinkInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       link_info_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdLinkInfoList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.link_info_list is None:
        self.link_info_list = []
    else:
      self.link_info_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.link_info_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_info_list:
        _x = val1
        buff.write(_get_struct_QdI2i().pack(_x.id, _x.length, _x.average_speed, _x.priority_road_class, _x.travel_direction))
        length = len(val1.form_way)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.form_way))
        length = len(val1.predecessor_link_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.predecessor_link_ids))
        length = len(val1.successor_link_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.successor_link_ids))
        length = len(val1.lane_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.lane_ids))
        length = len(val1.lane_group_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.lane_group_ids))
        length = len(val1.road_geo_line_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.road_geo_line_ids))
        _x = val1.complex_intersection
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.feature_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.feature_points:
          _x = val2
          buff.write(_get_struct_if().pack(_x.type, _x.offset))
          _v1 = val2.position
          _x = _v1
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.link_id
          buff.write(_get_struct_Q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.link_info_list is None:
        self.link_info_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_info_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HdLinkInfo()
        _x = val1
        start = end
        end += 28
        (_x.id, _x.length, _x.average_speed, _x.priority_road_class, _x.travel_direction,) = _get_struct_QdI2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.form_way = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.predecessor_link_ids = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.successor_link_ids = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.lane_ids = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.lane_group_ids = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.road_geo_line_ids = s.unpack(str[start:end])
        start = end
        end += 1
        (val1.complex_intersection,) = _get_struct_B().unpack(str[start:end])
        val1.complex_intersection = bool(val1.complex_intersection)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.feature_points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.LinkFeaturePoint()
          _x = val2
          start = end
          end += 8
          (_x.type, _x.offset,) = _get_struct_if().unpack(str[start:end])
          _v2 = val2.position
          _x = _v2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.link_id,) = _get_struct_Q().unpack(str[start:end])
          val1.feature_points.append(val2)
        self.link_info_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.link_info_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.link_info_list:
        _x = val1
        buff.write(_get_struct_QdI2i().pack(_x.id, _x.length, _x.average_speed, _x.priority_road_class, _x.travel_direction))
        length = len(val1.form_way)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.form_way.tostring())
        length = len(val1.predecessor_link_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.predecessor_link_ids.tostring())
        length = len(val1.successor_link_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.successor_link_ids.tostring())
        length = len(val1.lane_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.lane_ids.tostring())
        length = len(val1.lane_group_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.lane_group_ids.tostring())
        length = len(val1.road_geo_line_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.road_geo_line_ids.tostring())
        _x = val1.complex_intersection
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.feature_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.feature_points:
          _x = val2
          buff.write(_get_struct_if().pack(_x.type, _x.offset))
          _v3 = val2.position
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.link_id
          buff.write(_get_struct_Q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.link_info_list is None:
        self.link_info_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.link_info_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HdLinkInfo()
        _x = val1
        start = end
        end += 28
        (_x.id, _x.length, _x.average_speed, _x.priority_road_class, _x.travel_direction,) = _get_struct_QdI2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.form_way = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.predecessor_link_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.successor_link_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.lane_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.lane_group_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.road_geo_line_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        start = end
        end += 1
        (val1.complex_intersection,) = _get_struct_B().unpack(str[start:end])
        val1.complex_intersection = bool(val1.complex_intersection)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.feature_points = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.LinkFeaturePoint()
          _x = val2
          start = end
          end += 8
          (_x.type, _x.offset,) = _get_struct_if().unpack(str[start:end])
          _v4 = val2.position
          _x = _v4
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.link_id,) = _get_struct_Q().unpack(str[start:end])
          val1.feature_points.append(val2)
        self.link_info_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_QdI2i = None
def _get_struct_QdI2i():
    global _struct_QdI2i
    if _struct_QdI2i is None:
        _struct_QdI2i = struct.Struct("<QdI2i")
    return _struct_QdI2i
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RadarDetections.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RadarDetections(genpy.Message):
  _md5sum = "1111106bfa1fa1b73b560154ecea493e"
  _type = "rospy_message_converter/RadarDetections"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64[] rad_det_time
uint32 det_fus_idx
RadarPoints[] rad_pt

================================================================================
MSG: rospy_message_converter/RadarPoints
uint32 det_id
float64 range
float64 range_rate
float64 azimuth_ang
float64 elevation_ang
float32 det_rcs
"""
  __slots__ = ['rad_det_time','det_fus_idx','rad_pt']
  _slot_types = ['uint64[]','uint32','rospy_message_converter/RadarPoints[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rad_det_time,det_fus_idx,rad_pt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarDetections, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rad_det_time is None:
        self.rad_det_time = []
      if self.det_fus_idx is None:
        self.det_fus_idx = 0
      if self.rad_pt is None:
        self.rad_pt = []
    else:
      self.rad_det_time = []
      self.det_fus_idx = 0
      self.rad_pt = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.rad_det_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.rad_det_time))
      _x = self.det_fus_idx
      buff.write(_get_struct_I().pack(_x))
      length = len(self.rad_pt)
      buff.write(_struct_I.pack(length))
      for val1 in self.rad_pt:
        _x = val1
        buff.write(_get_struct_I4df().pack(_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rad_pt is None:
        self.rad_pt = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rad_det_time = s.unpack(str[start:end])
      start = end
      end += 4
      (self.det_fus_idx,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rad_pt = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarPoints()
        _x = val1
        start = end
        end += 40
        (_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs,) = _get_struct_I4df().unpack(str[start:end])
        self.rad_pt.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.rad_det_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.rad_det_time.tostring())
      _x = self.det_fus_idx
      buff.write(_get_struct_I().pack(_x))
      length = len(self.rad_pt)
      buff.write(_struct_I.pack(length))
      for val1 in self.rad_pt:
        _x = val1
        buff.write(_get_struct_I4df().pack(_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rad_pt is None:
        self.rad_pt = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.rad_det_time = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (self.det_fus_idx,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rad_pt = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RadarPoints()
        _x = val1
        start = end
        end += 40
        (_x.det_id, _x.range, _x.range_rate, _x.azimuth_ang, _x.elevation_ang, _x.det_rcs,) = _get_struct_I4df().unpack(str[start:end])
        self.rad_pt.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I4df = None
def _get_struct_I4df():
    global _struct_I4df
    if _struct_I4df is None:
        _struct_I4df = struct.Struct("<I4df")
    return _struct_I4df

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/CarInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarInfo(genpy.Message):
  _md5sum = "d9c4850c0959b26ea2fe484cdca1df13"
  _type = "rospy_message_converter/CarInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 vLgt
float32 vLat
float32 aLgt
float32 aLat
float32 yawRate
bool yawRateValid
bool aLgtValid
bool aLatValid
uint32 motionStatus
float32 speed
float32 spdWhlFl
float32 spdWhlFr
float32 spdWhlRl
float32 spdWhlRr
bool spdWhlFlValid
bool spdWhlFrValid
bool spdWhlRlValid
bool spdWhlRrValid
uint32 dirWhlFl
uint32 dirWhlFr
uint32 dirWhlRl
uint32 dirWhlRr
float32 brkPedalTravel
float32 masterCylPress
float32 aLgtDriverBrkReq
bool brkStatus
bool masterCylPressValid
bool dtcActive
bool tcsActive
bool vdcActive
bool escOverHeat
bool escFault
bool escSwitch
float32 strAngle
float32 strSpeed
float32 pinAngle
bool strAngleValid
bool pinAngleValid
bool epsFault
float32 accelPedalPos
bool actGearValid
bool accelPedalPosValid
uint32 accStatus
uint32 actGear
uint32 vehicleState
uint32 vehicleMode
bool doorDriver
bool doorFrontPassenger
bool doorRearLeft
bool doorRearRight
bool hoodStatus
bool trailerStatus
bool turnLeftLight
bool turnRightLight
bool beltWarnDriver
bool beltWarnFrontPassenger
bool beltRearLeft
bool beltRearMid
bool beltRearRight
bool aebSetting
uint32 fcwSetting
float32 length
float32 width
float32 axisLength
float32 rearAxisToFrontEnd
float32 rearTrackWidth
float32 steerRatio
float32 cogToFrontAxis
float32 cogToRearAxis
float32 frontCornStiff
float32 rearCornStiff
"""
  __slots__ = ['vLgt','vLat','aLgt','aLat','yawRate','yawRateValid','aLgtValid','aLatValid','motionStatus','speed','spdWhlFl','spdWhlFr','spdWhlRl','spdWhlRr','spdWhlFlValid','spdWhlFrValid','spdWhlRlValid','spdWhlRrValid','dirWhlFl','dirWhlFr','dirWhlRl','dirWhlRr','brkPedalTravel','masterCylPress','aLgtDriverBrkReq','brkStatus','masterCylPressValid','dtcActive','tcsActive','vdcActive','escOverHeat','escFault','escSwitch','strAngle','strSpeed','pinAngle','strAngleValid','pinAngleValid','epsFault','accelPedalPos','actGearValid','accelPedalPosValid','accStatus','actGear','vehicleState','vehicleMode','doorDriver','doorFrontPassenger','doorRearLeft','doorRearRight','hoodStatus','trailerStatus','turnLeftLight','turnRightLight','beltWarnDriver','beltWarnFrontPassenger','beltRearLeft','beltRearMid','beltRearRight','aebSetting','fcwSetting','length','width','axisLength','rearAxisToFrontEnd','rearTrackWidth','steerRatio','cogToFrontAxis','cogToRearAxis','frontCornStiff','rearCornStiff']
  _slot_types = ['float32','float32','float32','float32','float32','bool','bool','bool','uint32','float32','float32','float32','float32','float32','bool','bool','bool','bool','uint32','uint32','uint32','uint32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','float32','bool','bool','bool','float32','bool','bool','uint32','uint32','uint32','uint32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vLgt,vLat,aLgt,aLat,yawRate,yawRateValid,aLgtValid,aLatValid,motionStatus,speed,spdWhlFl,spdWhlFr,spdWhlRl,spdWhlRr,spdWhlFlValid,spdWhlFrValid,spdWhlRlValid,spdWhlRrValid,dirWhlFl,dirWhlFr,dirWhlRl,dirWhlRr,brkPedalTravel,masterCylPress,aLgtDriverBrkReq,brkStatus,masterCylPressValid,dtcActive,tcsActive,vdcActive,escOverHeat,escFault,escSwitch,strAngle,strSpeed,pinAngle,strAngleValid,pinAngleValid,epsFault,accelPedalPos,actGearValid,accelPedalPosValid,accStatus,actGear,vehicleState,vehicleMode,doorDriver,doorFrontPassenger,doorRearLeft,doorRearRight,hoodStatus,trailerStatus,turnLeftLight,turnRightLight,beltWarnDriver,beltWarnFrontPassenger,beltRearLeft,beltRearMid,beltRearRight,aebSetting,fcwSetting,length,width,axisLength,rearAxisToFrontEnd,rearTrackWidth,steerRatio,cogToFrontAxis,cogToRearAxis,frontCornStiff,rearCornStiff

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vLgt is None:
        self.vLgt = 0.
      if self.vLat is None:
        self.vLat = 0.
      if self.aLgt is None:
        self.aLgt = 0.
      if self.aLat is None:
        self.aLat = 0.
      if self.yawRate is None:
        self.yawRate = 0.
      if self.yawRateValid is None:
        self.yawRateValid = False
      if self.aLgtValid is None:
        self.aLgtValid = False
      if self.aLatValid is None:
        self.aLatValid = False
      if self.motionStatus is None:
        self.motionStatus = 0
      if self.speed is None:
        self.speed = 0.
      if self.spdWhlFl is None:
        self.spdWhlFl = 0.
      if self.spdWhlFr is None:
        self.spdWhlFr = 0.
      if self.spdWhlRl is None:
        self.spdWhlRl = 0.
      if self.spdWhlRr is None:
        self.spdWhlRr = 0.
      if self.spdWhlFlValid is None:
        self.spdWhlFlValid = False
      if self.spdWhlFrValid is None:
        self.spdWhlFrValid = False
      if self.spdWhlRlValid is None:
        self.spdWhlRlValid = False
      if self.spdWhlRrValid is None:
        self.spdWhlRrValid = False
      if self.dirWhlFl is None:
        self.dirWhlFl = 0
      if self.dirWhlFr is None:
        self.dirWhlFr = 0
      if self.dirWhlRl is None:
        self.dirWhlRl = 0
      if self.dirWhlRr is None:
        self.dirWhlRr = 0
      if self.brkPedalTravel is None:
        self.brkPedalTravel = 0.
      if self.masterCylPress is None:
        self.masterCylPress = 0.
      if self.aLgtDriverBrkReq is None:
        self.aLgtDriverBrkReq = 0.
      if self.brkStatus is None:
        self.brkStatus = False
      if self.masterCylPressValid is None:
        self.masterCylPressValid = False
      if self.dtcActive is None:
        self.dtcActive = False
      if self.tcsActive is None:
        self.tcsActive = False
      if self.vdcActive is None:
        self.vdcActive = False
      if self.escOverHeat is None:
        self.escOverHeat = False
      if self.escFault is None:
        self.escFault = False
      if self.escSwitch is None:
        self.escSwitch = False
      if self.strAngle is None:
        self.strAngle = 0.
      if self.strSpeed is None:
        self.strSpeed = 0.
      if self.pinAngle is None:
        self.pinAngle = 0.
      if self.strAngleValid is None:
        self.strAngleValid = False
      if self.pinAngleValid is None:
        self.pinAngleValid = False
      if self.epsFault is None:
        self.epsFault = False
      if self.accelPedalPos is None:
        self.accelPedalPos = 0.
      if self.actGearValid is None:
        self.actGearValid = False
      if self.accelPedalPosValid is None:
        self.accelPedalPosValid = False
      if self.accStatus is None:
        self.accStatus = 0
      if self.actGear is None:
        self.actGear = 0
      if self.vehicleState is None:
        self.vehicleState = 0
      if self.vehicleMode is None:
        self.vehicleMode = 0
      if self.doorDriver is None:
        self.doorDriver = False
      if self.doorFrontPassenger is None:
        self.doorFrontPassenger = False
      if self.doorRearLeft is None:
        self.doorRearLeft = False
      if self.doorRearRight is None:
        self.doorRearRight = False
      if self.hoodStatus is None:
        self.hoodStatus = False
      if self.trailerStatus is None:
        self.trailerStatus = False
      if self.turnLeftLight is None:
        self.turnLeftLight = False
      if self.turnRightLight is None:
        self.turnRightLight = False
      if self.beltWarnDriver is None:
        self.beltWarnDriver = False
      if self.beltWarnFrontPassenger is None:
        self.beltWarnFrontPassenger = False
      if self.beltRearLeft is None:
        self.beltRearLeft = False
      if self.beltRearMid is None:
        self.beltRearMid = False
      if self.beltRearRight is None:
        self.beltRearRight = False
      if self.aebSetting is None:
        self.aebSetting = False
      if self.fcwSetting is None:
        self.fcwSetting = 0
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.axisLength is None:
        self.axisLength = 0.
      if self.rearAxisToFrontEnd is None:
        self.rearAxisToFrontEnd = 0.
      if self.rearTrackWidth is None:
        self.rearTrackWidth = 0.
      if self.steerRatio is None:
        self.steerRatio = 0.
      if self.cogToFrontAxis is None:
        self.cogToFrontAxis = 0.
      if self.cogToRearAxis is None:
        self.cogToRearAxis = 0.
      if self.frontCornStiff is None:
        self.frontCornStiff = 0.
      if self.rearCornStiff is None:
        self.rearCornStiff = 0.
    else:
      self.vLgt = 0.
      self.vLat = 0.
      self.aLgt = 0.
      self.aLat = 0.
      self.yawRate = 0.
      self.yawRateValid = False
      self.aLgtValid = False
      self.aLatValid = False
      self.motionStatus = 0
      self.speed = 0.
      self.spdWhlFl = 0.
      self.spdWhlFr = 0.
      self.spdWhlRl = 0.
      self.spdWhlRr = 0.
      self.spdWhlFlValid = False
      self.spdWhlFrValid = False
      self.spdWhlRlValid = False
      self.spdWhlRrValid = False
      self.dirWhlFl = 0
      self.dirWhlFr = 0
      self.dirWhlRl = 0
      self.dirWhlRr = 0
      self.brkPedalTravel = 0.
      self.masterCylPress = 0.
      self.aLgtDriverBrkReq = 0.
      self.brkStatus = False
      self.masterCylPressValid = False
      self.dtcActive = False
      self.tcsActive = False
      self.vdcActive = False
      self.escOverHeat = False
      self.escFault = False
      self.escSwitch = False
      self.strAngle = 0.
      self.strSpeed = 0.
      self.pinAngle = 0.
      self.strAngleValid = False
      self.pinAngleValid = False
      self.epsFault = False
      self.accelPedalPos = 0.
      self.actGearValid = False
      self.accelPedalPosValid = False
      self.accStatus = 0
      self.actGear = 0
      self.vehicleState = 0
      self.vehicleMode = 0
      self.doorDriver = False
      self.doorFrontPassenger = False
      self.doorRearLeft = False
      self.doorRearRight = False
      self.hoodStatus = False
      self.trailerStatus = False
      self.turnLeftLight = False
      self.turnRightLight = False
      self.beltWarnDriver = False
      self.beltWarnFrontPassenger = False
      self.beltRearLeft = False
      self.beltRearMid = False
      self.beltRearRight = False
      self.aebSetting = False
      self.fcwSetting = 0
      self.length = 0.
      self.width = 0.
      self.axisLength = 0.
      self.rearAxisToFrontEnd = 0.
      self.rearTrackWidth = 0.
      self.steerRatio = 0.
      self.cogToFrontAxis = 0.
      self.cogToRearAxis = 0.
      self.frontCornStiff = 0.
      self.rearCornStiff = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().pack(_x.vLgt, _x.vLat, _x.aLgt, _x.aLat, _x.yawRate, _x.yawRateValid, _x.aLgtValid, _x.aLatValid, _x.motionStatus, _x.speed, _x.spdWhlFl, _x.spdWhlFr, _x.spdWhlRl, _x.spdWhlRr, _x.spdWhlFlValid, _x.spdWhlFrValid, _x.spdWhlRlValid, _x.spdWhlRrValid, _x.dirWhlFl, _x.dirWhlFr, _x.dirWhlRl, _x.dirWhlRr, _x.brkPedalTravel, _x.masterCylPress, _x.aLgtDriverBrkReq, _x.brkStatus, _x.masterCylPressValid, _x.dtcActive, _x.tcsActive, _x.vdcActive, _x.escOverHeat, _x.escFault, _x.escSwitch, _x.strAngle, _x.strSpeed, _x.pinAngle, _x.strAngleValid, _x.pinAngleValid, _x.epsFault, _x.accelPedalPos, _x.actGearValid, _x.accelPedalPosValid, _x.accStatus, _x.actGear, _x.vehicleState, _x.vehicleMode, _x.doorDriver, _x.doorFrontPassenger, _x.doorRearLeft, _x.doorRearRight, _x.hoodStatus, _x.trailerStatus, _x.turnLeftLight, _x.turnRightLight, _x.beltWarnDriver, _x.beltWarnFrontPassenger, _x.beltRearLeft, _x.beltRearMid, _x.beltRearRight, _x.aebSetting, _x.fcwSetting, _x.length, _x.width, _x.axisLength, _x.rearAxisToFrontEnd, _x.rearTrackWidth, _x.steerRatio, _x.cogToFrontAxis, _x.cogToRearAxis, _x.frontCornStiff, _x.rearCornStiff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 182
      (_x.vLgt, _x.vLat, _x.aLgt, _x.aLat, _x.yawRate, _x.yawRateValid, _x.aLgtValid, _x.aLatValid, _x.motionStatus, _x.speed, _x.spdWhlFl, _x.spdWhlFr, _x.spdWhlRl, _x.spdWhlRr, _x.spdWhlFlValid, _x.spdWhlFrValid, _x.spdWhlRlValid, _x.spdWhlRrValid, _x.dirWhlFl, _x.dirWhlFr, _x.dirWhlRl, _x.dirWhlRr, _x.brkPedalTravel, _x.masterCylPress, _x.aLgtDriverBrkReq, _x.brkStatus, _x.masterCylPressValid, _x.dtcActive, _x.tcsActive, _x.vdcActive, _x.escOverHeat, _x.escFault, _x.escSwitch, _x.strAngle, _x.strSpeed, _x.pinAngle, _x.strAngleValid, _x.pinAngleValid, _x.epsFault, _x.accelPedalPos, _x.actGearValid, _x.accelPedalPosValid, _x.accStatus, _x.actGear, _x.vehicleState, _x.vehicleMode, _x.doorDriver, _x.doorFrontPassenger, _x.doorRearLeft, _x.doorRearRight, _x.hoodStatus, _x.trailerStatus, _x.turnLeftLight, _x.turnRightLight, _x.beltWarnDriver, _x.beltWarnFrontPassenger, _x.beltRearLeft, _x.beltRearMid, _x.beltRearRight, _x.aebSetting, _x.fcwSetting, _x.length, _x.width, _x.axisLength, _x.rearAxisToFrontEnd, _x.rearTrackWidth, _x.steerRatio, _x.cogToFrontAxis, _x.cogToRearAxis, _x.frontCornStiff, _x.rearCornStiff,) = _get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().unpack(str[start:end])
      self.yawRateValid = bool(self.yawRateValid)
      self.aLgtValid = bool(self.aLgtValid)
      self.aLatValid = bool(self.aLatValid)
      self.spdWhlFlValid = bool(self.spdWhlFlValid)
      self.spdWhlFrValid = bool(self.spdWhlFrValid)
      self.spdWhlRlValid = bool(self.spdWhlRlValid)
      self.spdWhlRrValid = bool(self.spdWhlRrValid)
      self.brkStatus = bool(self.brkStatus)
      self.masterCylPressValid = bool(self.masterCylPressValid)
      self.dtcActive = bool(self.dtcActive)
      self.tcsActive = bool(self.tcsActive)
      self.vdcActive = bool(self.vdcActive)
      self.escOverHeat = bool(self.escOverHeat)
      self.escFault = bool(self.escFault)
      self.escSwitch = bool(self.escSwitch)
      self.strAngleValid = bool(self.strAngleValid)
      self.pinAngleValid = bool(self.pinAngleValid)
      self.epsFault = bool(self.epsFault)
      self.actGearValid = bool(self.actGearValid)
      self.accelPedalPosValid = bool(self.accelPedalPosValid)
      self.doorDriver = bool(self.doorDriver)
      self.doorFrontPassenger = bool(self.doorFrontPassenger)
      self.doorRearLeft = bool(self.doorRearLeft)
      self.doorRearRight = bool(self.doorRearRight)
      self.hoodStatus = bool(self.hoodStatus)
      self.trailerStatus = bool(self.trailerStatus)
      self.turnLeftLight = bool(self.turnLeftLight)
      self.turnRightLight = bool(self.turnRightLight)
      self.beltWarnDriver = bool(self.beltWarnDriver)
      self.beltWarnFrontPassenger = bool(self.beltWarnFrontPassenger)
      self.beltRearLeft = bool(self.beltRearLeft)
      self.beltRearMid = bool(self.beltRearMid)
      self.beltRearRight = bool(self.beltRearRight)
      self.aebSetting = bool(self.aebSetting)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().pack(_x.vLgt, _x.vLat, _x.aLgt, _x.aLat, _x.yawRate, _x.yawRateValid, _x.aLgtValid, _x.aLatValid, _x.motionStatus, _x.speed, _x.spdWhlFl, _x.spdWhlFr, _x.spdWhlRl, _x.spdWhlRr, _x.spdWhlFlValid, _x.spdWhlFrValid, _x.spdWhlRlValid, _x.spdWhlRrValid, _x.dirWhlFl, _x.dirWhlFr, _x.dirWhlRl, _x.dirWhlRr, _x.brkPedalTravel, _x.masterCylPress, _x.aLgtDriverBrkReq, _x.brkStatus, _x.masterCylPressValid, _x.dtcActive, _x.tcsActive, _x.vdcActive, _x.escOverHeat, _x.escFault, _x.escSwitch, _x.strAngle, _x.strSpeed, _x.pinAngle, _x.strAngleValid, _x.pinAngleValid, _x.epsFault, _x.accelPedalPos, _x.actGearValid, _x.accelPedalPosValid, _x.accStatus, _x.actGear, _x.vehicleState, _x.vehicleMode, _x.doorDriver, _x.doorFrontPassenger, _x.doorRearLeft, _x.doorRearRight, _x.hoodStatus, _x.trailerStatus, _x.turnLeftLight, _x.turnRightLight, _x.beltWarnDriver, _x.beltWarnFrontPassenger, _x.beltRearLeft, _x.beltRearMid, _x.beltRearRight, _x.aebSetting, _x.fcwSetting, _x.length, _x.width, _x.axisLength, _x.rearAxisToFrontEnd, _x.rearTrackWidth, _x.steerRatio, _x.cogToFrontAxis, _x.cogToRearAxis, _x.frontCornStiff, _x.rearCornStiff))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 182
      (_x.vLgt, _x.vLat, _x.aLgt, _x.aLat, _x.yawRate, _x.yawRateValid, _x.aLgtValid, _x.aLatValid, _x.motionStatus, _x.speed, _x.spdWhlFl, _x.spdWhlFr, _x.spdWhlRl, _x.spdWhlRr, _x.spdWhlFlValid, _x.spdWhlFrValid, _x.spdWhlRlValid, _x.spdWhlRrValid, _x.dirWhlFl, _x.dirWhlFr, _x.dirWhlRl, _x.dirWhlRr, _x.brkPedalTravel, _x.masterCylPress, _x.aLgtDriverBrkReq, _x.brkStatus, _x.masterCylPressValid, _x.dtcActive, _x.tcsActive, _x.vdcActive, _x.escOverHeat, _x.escFault, _x.escSwitch, _x.strAngle, _x.strSpeed, _x.pinAngle, _x.strAngleValid, _x.pinAngleValid, _x.epsFault, _x.accelPedalPos, _x.actGearValid, _x.accelPedalPosValid, _x.accStatus, _x.actGear, _x.vehicleState, _x.vehicleMode, _x.doorDriver, _x.doorFrontPassenger, _x.doorRearLeft, _x.doorRearRight, _x.hoodStatus, _x.trailerStatus, _x.turnLeftLight, _x.turnRightLight, _x.beltWarnDriver, _x.beltWarnFrontPassenger, _x.beltRearLeft, _x.beltRearMid, _x.beltRearRight, _x.aebSetting, _x.fcwSetting, _x.length, _x.width, _x.axisLength, _x.rearAxisToFrontEnd, _x.rearTrackWidth, _x.steerRatio, _x.cogToFrontAxis, _x.cogToRearAxis, _x.frontCornStiff, _x.rearCornStiff,) = _get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f().unpack(str[start:end])
      self.yawRateValid = bool(self.yawRateValid)
      self.aLgtValid = bool(self.aLgtValid)
      self.aLatValid = bool(self.aLatValid)
      self.spdWhlFlValid = bool(self.spdWhlFlValid)
      self.spdWhlFrValid = bool(self.spdWhlFrValid)
      self.spdWhlRlValid = bool(self.spdWhlRlValid)
      self.spdWhlRrValid = bool(self.spdWhlRrValid)
      self.brkStatus = bool(self.brkStatus)
      self.masterCylPressValid = bool(self.masterCylPressValid)
      self.dtcActive = bool(self.dtcActive)
      self.tcsActive = bool(self.tcsActive)
      self.vdcActive = bool(self.vdcActive)
      self.escOverHeat = bool(self.escOverHeat)
      self.escFault = bool(self.escFault)
      self.escSwitch = bool(self.escSwitch)
      self.strAngleValid = bool(self.strAngleValid)
      self.pinAngleValid = bool(self.pinAngleValid)
      self.epsFault = bool(self.epsFault)
      self.actGearValid = bool(self.actGearValid)
      self.accelPedalPosValid = bool(self.accelPedalPosValid)
      self.doorDriver = bool(self.doorDriver)
      self.doorFrontPassenger = bool(self.doorFrontPassenger)
      self.doorRearLeft = bool(self.doorRearLeft)
      self.doorRearRight = bool(self.doorRearRight)
      self.hoodStatus = bool(self.hoodStatus)
      self.trailerStatus = bool(self.trailerStatus)
      self.turnLeftLight = bool(self.turnLeftLight)
      self.turnRightLight = bool(self.turnRightLight)
      self.beltWarnDriver = bool(self.beltWarnDriver)
      self.beltWarnFrontPassenger = bool(self.beltWarnFrontPassenger)
      self.beltRearLeft = bool(self.beltRearLeft)
      self.beltRearMid = bool(self.beltRearMid)
      self.beltRearRight = bool(self.beltRearRight)
      self.aebSetting = bool(self.aebSetting)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f = None
def _get_struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f():
    global _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f
    if _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f is None:
        _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f = struct.Struct("<5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f")
    return _struct_5f3BI5f4B4I3f8B3f3Bf2B4I14BI10f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AESPlanOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AESPlanOut(genpy.Message):
  _md5sum = "f22d7783f5f30510504417952ef2f445"
  _type = "rospy_message_converter/AESPlanOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PathPlaned root_path
uint32 aesplanactv
float32 ltrldstlacntr
float32 egolawdth
float32 agvehlanecntr
float32 lacurv
float32 ladcurv
float32 vehspdkph
float32 dispvehspdkph
PathPlaned[] better_path

================================================================================
MSG: rospy_message_converter/PathPlaned
float32 path_c0
float32 path_c1
float32 path_c2
float32 path_c3
float32 path_c4
float32 path_c5
float32 curvature
float32 dcurv
float32 expect_lat
float32 expect_long
uint32 isvalid
float32 rout_cost
float32 max_ay
"""
  __slots__ = ['root_path','aesplanactv','ltrldstlacntr','egolawdth','agvehlanecntr','lacurv','ladcurv','vehspdkph','dispvehspdkph','better_path']
  _slot_types = ['rospy_message_converter/PathPlaned','uint32','float32','float32','float32','float32','float32','float32','float32','rospy_message_converter/PathPlaned[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       root_path,aesplanactv,ltrldstlacntr,egolawdth,agvehlanecntr,lacurv,ladcurv,vehspdkph,dispvehspdkph,better_path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AESPlanOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.root_path is None:
        self.root_path = rospy_message_converter.msg.PathPlaned()
      if self.aesplanactv is None:
        self.aesplanactv = 0
      if self.ltrldstlacntr is None:
        self.ltrldstlacntr = 0.
      if self.egolawdth is None:
        self.egolawdth = 0.
      if self.agvehlanecntr is None:
        self.agvehlanecntr = 0.
      if self.lacurv is None:
        self.lacurv = 0.
      if self.ladcurv is None:
        self.ladcurv = 0.
      if self.vehspdkph is None:
        self.vehspdkph = 0.
      if self.dispvehspdkph is None:
        self.dispvehspdkph = 0.
      if self.better_path is None:
        self.better_path = []
    else:
      self.root_path = rospy_message_converter.msg.PathPlaned()
      self.aesplanactv = 0
      self.ltrldstlacntr = 0.
      self.egolawdth = 0.
      self.agvehlanecntr = 0.
      self.lacurv = 0.
      self.ladcurv = 0.
      self.vehspdkph = 0.
      self.dispvehspdkph = 0.
      self.better_path = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10fI2fI7f().pack(_x.root_path.path_c0, _x.root_path.path_c1, _x.root_path.path_c2, _x.root_path.path_c3, _x.root_path.path_c4, _x.root_path.path_c5, _x.root_path.curvature, _x.root_path.dcurv, _x.root_path.expect_lat, _x.root_path.expect_long, _x.root_path.isvalid, _x.root_path.rout_cost, _x.root_path.max_ay, _x.aesplanactv, _x.ltrldstlacntr, _x.egolawdth, _x.agvehlanecntr, _x.lacurv, _x.ladcurv, _x.vehspdkph, _x.dispvehspdkph))
      length = len(self.better_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.better_path:
        _x = val1
        buff.write(_get_struct_10fI2f().pack(_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.root_path is None:
        self.root_path = rospy_message_converter.msg.PathPlaned()
      if self.better_path is None:
        self.better_path = None
      end = 0
      _x = self
      start = end
      end += 84
      (_x.root_path.path_c0, _x.root_path.path_c1, _x.root_path.path_c2, _x.root_path.path_c3, _x.root_path.path_c4, _x.root_path.path_c5, _x.root_path.curvature, _x.root_path.dcurv, _x.root_path.expect_lat, _x.root_path.expect_long, _x.root_path.isvalid, _x.root_path.rout_cost, _x.root_path.max_ay, _x.aesplanactv, _x.ltrldstlacntr, _x.egolawdth, _x.agvehlanecntr, _x.lacurv, _x.ladcurv, _x.vehspdkph, _x.dispvehspdkph,) = _get_struct_10fI2fI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.better_path = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PathPlaned()
        _x = val1
        start = end
        end += 52
        (_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay,) = _get_struct_10fI2f().unpack(str[start:end])
        self.better_path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10fI2fI7f().pack(_x.root_path.path_c0, _x.root_path.path_c1, _x.root_path.path_c2, _x.root_path.path_c3, _x.root_path.path_c4, _x.root_path.path_c5, _x.root_path.curvature, _x.root_path.dcurv, _x.root_path.expect_lat, _x.root_path.expect_long, _x.root_path.isvalid, _x.root_path.rout_cost, _x.root_path.max_ay, _x.aesplanactv, _x.ltrldstlacntr, _x.egolawdth, _x.agvehlanecntr, _x.lacurv, _x.ladcurv, _x.vehspdkph, _x.dispvehspdkph))
      length = len(self.better_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.better_path:
        _x = val1
        buff.write(_get_struct_10fI2f().pack(_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.root_path is None:
        self.root_path = rospy_message_converter.msg.PathPlaned()
      if self.better_path is None:
        self.better_path = None
      end = 0
      _x = self
      start = end
      end += 84
      (_x.root_path.path_c0, _x.root_path.path_c1, _x.root_path.path_c2, _x.root_path.path_c3, _x.root_path.path_c4, _x.root_path.path_c5, _x.root_path.curvature, _x.root_path.dcurv, _x.root_path.expect_lat, _x.root_path.expect_long, _x.root_path.isvalid, _x.root_path.rout_cost, _x.root_path.max_ay, _x.aesplanactv, _x.ltrldstlacntr, _x.egolawdth, _x.agvehlanecntr, _x.lacurv, _x.ladcurv, _x.vehspdkph, _x.dispvehspdkph,) = _get_struct_10fI2fI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.better_path = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PathPlaned()
        _x = val1
        start = end
        end += 52
        (_x.path_c0, _x.path_c1, _x.path_c2, _x.path_c3, _x.path_c4, _x.path_c5, _x.curvature, _x.dcurv, _x.expect_lat, _x.expect_long, _x.isvalid, _x.rout_cost, _x.max_ay,) = _get_struct_10fI2f().unpack(str[start:end])
        self.better_path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10fI2f = None
def _get_struct_10fI2f():
    global _struct_10fI2f
    if _struct_10fI2f is None:
        _struct_10fI2f = struct.Struct("<10fI2f")
    return _struct_10fI2f
_struct_10fI2fI7f = None
def _get_struct_10fI2fI7f():
    global _struct_10fI2fI7f
    if _struct_10fI2fI7f is None:
        _struct_10fI2fI7f = struct.Struct("<10fI2fI7f")
    return _struct_10fI2fI7f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BrkFunInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BrkFunInfo(genpy.Message):
  _md5sum = "5ee8f42958c2f9afd06e8e97c562d2d1"
  _type = "rospy_message_converter/BrkFunInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool BDWActv
bool ABAAvl
bool ABAActv
bool ABPAvl
bool ABPActv
bool ABSActv
int32 AVHSts
bool DTCActv
bool DWTActv
bool EBAAvl
bool EBAActv
bool EBDActv
bool HBAActv
int32 HDCSts
bool HHCAvl
bool HHCActv
bool TCSActv
bool TCSDeactv
bool VDCActv
bool VDCDeactv
bool EBDFailLampReq
bool VDCTCSLampInfo
bool VDCTCSFailLampReq
bool ABSFailLampReq
bool VDCTCSOnOfflampReq
bool AWBActv
bool AWBAvl
bool EBPActv
bool HBCActv
int32 ARPCfgSts
bool CDPActv
bool CDPAvail
bool ARPActv
bool DTCAvl
uint64 timestamp_ptp_ns
"""
  __slots__ = ['BDWActv','ABAAvl','ABAActv','ABPAvl','ABPActv','ABSActv','AVHSts','DTCActv','DWTActv','EBAAvl','EBAActv','EBDActv','HBAActv','HDCSts','HHCAvl','HHCActv','TCSActv','TCSDeactv','VDCActv','VDCDeactv','EBDFailLampReq','VDCTCSLampInfo','VDCTCSFailLampReq','ABSFailLampReq','VDCTCSOnOfflampReq','AWBActv','AWBAvl','EBPActv','HBCActv','ARPCfgSts','CDPActv','CDPAvail','ARPActv','DTCAvl','timestamp_ptp_ns']
  _slot_types = ['bool','bool','bool','bool','bool','bool','int32','bool','bool','bool','bool','bool','bool','int32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','int32','bool','bool','bool','bool','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       BDWActv,ABAAvl,ABAActv,ABPAvl,ABPActv,ABSActv,AVHSts,DTCActv,DWTActv,EBAAvl,EBAActv,EBDActv,HBAActv,HDCSts,HHCAvl,HHCActv,TCSActv,TCSDeactv,VDCActv,VDCDeactv,EBDFailLampReq,VDCTCSLampInfo,VDCTCSFailLampReq,ABSFailLampReq,VDCTCSOnOfflampReq,AWBActv,AWBAvl,EBPActv,HBCActv,ARPCfgSts,CDPActv,CDPAvail,ARPActv,DTCAvl,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BrkFunInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.BDWActv is None:
        self.BDWActv = False
      if self.ABAAvl is None:
        self.ABAAvl = False
      if self.ABAActv is None:
        self.ABAActv = False
      if self.ABPAvl is None:
        self.ABPAvl = False
      if self.ABPActv is None:
        self.ABPActv = False
      if self.ABSActv is None:
        self.ABSActv = False
      if self.AVHSts is None:
        self.AVHSts = 0
      if self.DTCActv is None:
        self.DTCActv = False
      if self.DWTActv is None:
        self.DWTActv = False
      if self.EBAAvl is None:
        self.EBAAvl = False
      if self.EBAActv is None:
        self.EBAActv = False
      if self.EBDActv is None:
        self.EBDActv = False
      if self.HBAActv is None:
        self.HBAActv = False
      if self.HDCSts is None:
        self.HDCSts = 0
      if self.HHCAvl is None:
        self.HHCAvl = False
      if self.HHCActv is None:
        self.HHCActv = False
      if self.TCSActv is None:
        self.TCSActv = False
      if self.TCSDeactv is None:
        self.TCSDeactv = False
      if self.VDCActv is None:
        self.VDCActv = False
      if self.VDCDeactv is None:
        self.VDCDeactv = False
      if self.EBDFailLampReq is None:
        self.EBDFailLampReq = False
      if self.VDCTCSLampInfo is None:
        self.VDCTCSLampInfo = False
      if self.VDCTCSFailLampReq is None:
        self.VDCTCSFailLampReq = False
      if self.ABSFailLampReq is None:
        self.ABSFailLampReq = False
      if self.VDCTCSOnOfflampReq is None:
        self.VDCTCSOnOfflampReq = False
      if self.AWBActv is None:
        self.AWBActv = False
      if self.AWBAvl is None:
        self.AWBAvl = False
      if self.EBPActv is None:
        self.EBPActv = False
      if self.HBCActv is None:
        self.HBCActv = False
      if self.ARPCfgSts is None:
        self.ARPCfgSts = 0
      if self.CDPActv is None:
        self.CDPActv = False
      if self.CDPAvail is None:
        self.CDPAvail = False
      if self.ARPActv is None:
        self.ARPActv = False
      if self.DTCAvl is None:
        self.DTCAvl = False
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
    else:
      self.BDWActv = False
      self.ABAAvl = False
      self.ABAActv = False
      self.ABPAvl = False
      self.ABPActv = False
      self.ABSActv = False
      self.AVHSts = 0
      self.DTCActv = False
      self.DWTActv = False
      self.EBAAvl = False
      self.EBAActv = False
      self.EBDActv = False
      self.HBAActv = False
      self.HDCSts = 0
      self.HHCAvl = False
      self.HHCActv = False
      self.TCSActv = False
      self.TCSDeactv = False
      self.VDCActv = False
      self.VDCDeactv = False
      self.EBDFailLampReq = False
      self.VDCTCSLampInfo = False
      self.VDCTCSFailLampReq = False
      self.ABSFailLampReq = False
      self.VDCTCSOnOfflampReq = False
      self.AWBActv = False
      self.AWBAvl = False
      self.EBPActv = False
      self.HBCActv = False
      self.ARPCfgSts = 0
      self.CDPActv = False
      self.CDPAvail = False
      self.ARPActv = False
      self.DTCAvl = False
      self.timestamp_ptp_ns = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6Bi6Bi15Bi4BQ().pack(_x.BDWActv, _x.ABAAvl, _x.ABAActv, _x.ABPAvl, _x.ABPActv, _x.ABSActv, _x.AVHSts, _x.DTCActv, _x.DWTActv, _x.EBAAvl, _x.EBAActv, _x.EBDActv, _x.HBAActv, _x.HDCSts, _x.HHCAvl, _x.HHCActv, _x.TCSActv, _x.TCSDeactv, _x.VDCActv, _x.VDCDeactv, _x.EBDFailLampReq, _x.VDCTCSLampInfo, _x.VDCTCSFailLampReq, _x.ABSFailLampReq, _x.VDCTCSOnOfflampReq, _x.AWBActv, _x.AWBAvl, _x.EBPActv, _x.HBCActv, _x.ARPCfgSts, _x.CDPActv, _x.CDPAvail, _x.ARPActv, _x.DTCAvl, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.BDWActv, _x.ABAAvl, _x.ABAActv, _x.ABPAvl, _x.ABPActv, _x.ABSActv, _x.AVHSts, _x.DTCActv, _x.DWTActv, _x.EBAAvl, _x.EBAActv, _x.EBDActv, _x.HBAActv, _x.HDCSts, _x.HHCAvl, _x.HHCActv, _x.TCSActv, _x.TCSDeactv, _x.VDCActv, _x.VDCDeactv, _x.EBDFailLampReq, _x.VDCTCSLampInfo, _x.VDCTCSFailLampReq, _x.ABSFailLampReq, _x.VDCTCSOnOfflampReq, _x.AWBActv, _x.AWBAvl, _x.EBPActv, _x.HBCActv, _x.ARPCfgSts, _x.CDPActv, _x.CDPAvail, _x.ARPActv, _x.DTCAvl, _x.timestamp_ptp_ns,) = _get_struct_6Bi6Bi15Bi4BQ().unpack(str[start:end])
      self.BDWActv = bool(self.BDWActv)
      self.ABAAvl = bool(self.ABAAvl)
      self.ABAActv = bool(self.ABAActv)
      self.ABPAvl = bool(self.ABPAvl)
      self.ABPActv = bool(self.ABPActv)
      self.ABSActv = bool(self.ABSActv)
      self.DTCActv = bool(self.DTCActv)
      self.DWTActv = bool(self.DWTActv)
      self.EBAAvl = bool(self.EBAAvl)
      self.EBAActv = bool(self.EBAActv)
      self.EBDActv = bool(self.EBDActv)
      self.HBAActv = bool(self.HBAActv)
      self.HHCAvl = bool(self.HHCAvl)
      self.HHCActv = bool(self.HHCActv)
      self.TCSActv = bool(self.TCSActv)
      self.TCSDeactv = bool(self.TCSDeactv)
      self.VDCActv = bool(self.VDCActv)
      self.VDCDeactv = bool(self.VDCDeactv)
      self.EBDFailLampReq = bool(self.EBDFailLampReq)
      self.VDCTCSLampInfo = bool(self.VDCTCSLampInfo)
      self.VDCTCSFailLampReq = bool(self.VDCTCSFailLampReq)
      self.ABSFailLampReq = bool(self.ABSFailLampReq)
      self.VDCTCSOnOfflampReq = bool(self.VDCTCSOnOfflampReq)
      self.AWBActv = bool(self.AWBActv)
      self.AWBAvl = bool(self.AWBAvl)
      self.EBPActv = bool(self.EBPActv)
      self.HBCActv = bool(self.HBCActv)
      self.CDPActv = bool(self.CDPActv)
      self.CDPAvail = bool(self.CDPAvail)
      self.ARPActv = bool(self.ARPActv)
      self.DTCAvl = bool(self.DTCAvl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6Bi6Bi15Bi4BQ().pack(_x.BDWActv, _x.ABAAvl, _x.ABAActv, _x.ABPAvl, _x.ABPActv, _x.ABSActv, _x.AVHSts, _x.DTCActv, _x.DWTActv, _x.EBAAvl, _x.EBAActv, _x.EBDActv, _x.HBAActv, _x.HDCSts, _x.HHCAvl, _x.HHCActv, _x.TCSActv, _x.TCSDeactv, _x.VDCActv, _x.VDCDeactv, _x.EBDFailLampReq, _x.VDCTCSLampInfo, _x.VDCTCSFailLampReq, _x.ABSFailLampReq, _x.VDCTCSOnOfflampReq, _x.AWBActv, _x.AWBAvl, _x.EBPActv, _x.HBCActv, _x.ARPCfgSts, _x.CDPActv, _x.CDPAvail, _x.ARPActv, _x.DTCAvl, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.BDWActv, _x.ABAAvl, _x.ABAActv, _x.ABPAvl, _x.ABPActv, _x.ABSActv, _x.AVHSts, _x.DTCActv, _x.DWTActv, _x.EBAAvl, _x.EBAActv, _x.EBDActv, _x.HBAActv, _x.HDCSts, _x.HHCAvl, _x.HHCActv, _x.TCSActv, _x.TCSDeactv, _x.VDCActv, _x.VDCDeactv, _x.EBDFailLampReq, _x.VDCTCSLampInfo, _x.VDCTCSFailLampReq, _x.ABSFailLampReq, _x.VDCTCSOnOfflampReq, _x.AWBActv, _x.AWBAvl, _x.EBPActv, _x.HBCActv, _x.ARPCfgSts, _x.CDPActv, _x.CDPAvail, _x.ARPActv, _x.DTCAvl, _x.timestamp_ptp_ns,) = _get_struct_6Bi6Bi15Bi4BQ().unpack(str[start:end])
      self.BDWActv = bool(self.BDWActv)
      self.ABAAvl = bool(self.ABAAvl)
      self.ABAActv = bool(self.ABAActv)
      self.ABPAvl = bool(self.ABPAvl)
      self.ABPActv = bool(self.ABPActv)
      self.ABSActv = bool(self.ABSActv)
      self.DTCActv = bool(self.DTCActv)
      self.DWTActv = bool(self.DWTActv)
      self.EBAAvl = bool(self.EBAAvl)
      self.EBAActv = bool(self.EBAActv)
      self.EBDActv = bool(self.EBDActv)
      self.HBAActv = bool(self.HBAActv)
      self.HHCAvl = bool(self.HHCAvl)
      self.HHCActv = bool(self.HHCActv)
      self.TCSActv = bool(self.TCSActv)
      self.TCSDeactv = bool(self.TCSDeactv)
      self.VDCActv = bool(self.VDCActv)
      self.VDCDeactv = bool(self.VDCDeactv)
      self.EBDFailLampReq = bool(self.EBDFailLampReq)
      self.VDCTCSLampInfo = bool(self.VDCTCSLampInfo)
      self.VDCTCSFailLampReq = bool(self.VDCTCSFailLampReq)
      self.ABSFailLampReq = bool(self.ABSFailLampReq)
      self.VDCTCSOnOfflampReq = bool(self.VDCTCSOnOfflampReq)
      self.AWBActv = bool(self.AWBActv)
      self.AWBAvl = bool(self.AWBAvl)
      self.EBPActv = bool(self.EBPActv)
      self.HBCActv = bool(self.HBCActv)
      self.CDPActv = bool(self.CDPActv)
      self.CDPAvail = bool(self.CDPAvail)
      self.ARPActv = bool(self.ARPActv)
      self.DTCAvl = bool(self.DTCAvl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6Bi6Bi15Bi4BQ = None
def _get_struct_6Bi6Bi15Bi4BQ():
    global _struct_6Bi6Bi15Bi4BQ
    if _struct_6Bi6Bi15Bi4BQ is None:
        _struct_6Bi6Bi15Bi4BQ = struct.Struct("<6Bi6Bi15Bi4BQ")
    return _struct_6Bi6Bi15Bi4BQ

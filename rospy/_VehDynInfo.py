# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehDynInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VehDynInfo(genpy.Message):
  _md5sum = "2f86ead6dae10d6d9096800b66905b1a"
  _type = "rospy_message_converter/VehDynInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """VehSpdInfos VehSpd
int32 AxAyYrsCalSts
int32 LgtASts
float32 LgtSAEAg
float32 LgtSAEAmpss
int32 LatASts
float32 LatSAEAg
float32 LatSAEAmpss
int32 YawRateSts
float32 YawRateSAERps
float32 YawRateSAEDps
float32 VehOdom
uint64 YawRate_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VehSpdInfos
int32 VehSpdSts
int32 VehMovgDir
float32 VehSpdkph
float32 VehSpdmps
float32 VehFiltLngAcc
int32 VehSpdASILDSts
float32 VehSpdASILD
float32 VehDispSpd
int32 VCUVehDispSpdSts
uint64[] timestamp_ptp_ns
"""
  __slots__ = ['VehSpd','AxAyYrsCalSts','LgtASts','LgtSAEAg','LgtSAEAmpss','LatASts','LatSAEAg','LatSAEAmpss','YawRateSts','YawRateSAERps','YawRateSAEDps','VehOdom','YawRate_Timestamp','timestamp_ptp_ns']
  _slot_types = ['rospy_message_converter/VehSpdInfos','int32','int32','float32','float32','int32','float32','float32','int32','float32','float32','float32','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VehSpd,AxAyYrsCalSts,LgtASts,LgtSAEAg,LgtSAEAmpss,LatASts,LatSAEAg,LatSAEAmpss,YawRateSts,YawRateSAERps,YawRateSAEDps,VehOdom,YawRate_Timestamp,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehDynInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VehSpd is None:
        self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      if self.AxAyYrsCalSts is None:
        self.AxAyYrsCalSts = 0
      if self.LgtASts is None:
        self.LgtASts = 0
      if self.LgtSAEAg is None:
        self.LgtSAEAg = 0.
      if self.LgtSAEAmpss is None:
        self.LgtSAEAmpss = 0.
      if self.LatASts is None:
        self.LatASts = 0
      if self.LatSAEAg is None:
        self.LatSAEAg = 0.
      if self.LatSAEAmpss is None:
        self.LatSAEAmpss = 0.
      if self.YawRateSts is None:
        self.YawRateSts = 0
      if self.YawRateSAERps is None:
        self.YawRateSAERps = 0.
      if self.YawRateSAEDps is None:
        self.YawRateSAEDps = 0.
      if self.VehOdom is None:
        self.VehOdom = 0.
      if self.YawRate_Timestamp is None:
        self.YawRate_Timestamp = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
    else:
      self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      self.AxAyYrsCalSts = 0
      self.LgtASts = 0
      self.LgtSAEAg = 0.
      self.LgtSAEAmpss = 0.
      self.LatASts = 0
      self.LatSAEAg = 0.
      self.LatSAEAmpss = 0.
      self.YawRateSts = 0
      self.YawRateSAERps = 0.
      self.YawRateSAEDps = 0.
      self.VehOdom = 0.
      self.YawRate_Timestamp = 0
      self.timestamp_ptp_ns = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3fi2fi().pack(_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts))
      length = len(self.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.VehSpd.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2i2fi2fi3f2Q().pack(_x.AxAyYrsCalSts, _x.LgtASts, _x.LgtSAEAg, _x.LgtSAEAmpss, _x.LatASts, _x.LatSAEAg, _x.LatSAEAmpss, _x.YawRateSts, _x.YawRateSAERps, _x.YawRateSAEDps, _x.VehOdom, _x.YawRate_Timestamp, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.VehSpd is None:
        self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts,) = _get_struct_2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehSpd.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 60
      (_x.AxAyYrsCalSts, _x.LgtASts, _x.LgtSAEAg, _x.LgtSAEAmpss, _x.LatASts, _x.LatSAEAg, _x.LatSAEAmpss, _x.YawRateSts, _x.YawRateSAERps, _x.YawRateSAEDps, _x.VehOdom, _x.YawRate_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2i2fi2fi3f2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3fi2fi().pack(_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts))
      length = len(self.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.VehSpd.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_2i2fi2fi3f2Q().pack(_x.AxAyYrsCalSts, _x.LgtASts, _x.LgtSAEAg, _x.LgtSAEAmpss, _x.LatASts, _x.LatSAEAg, _x.LatSAEAmpss, _x.YawRateSts, _x.YawRateSAERps, _x.YawRateSAEDps, _x.VehOdom, _x.YawRate_Timestamp, _x.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.VehSpd is None:
        self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts,) = _get_struct_2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehSpd.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 60
      (_x.AxAyYrsCalSts, _x.LgtASts, _x.LgtSAEAg, _x.LgtSAEAmpss, _x.LatASts, _x.LatSAEAg, _x.LatSAEAmpss, _x.YawRateSts, _x.YawRateSAERps, _x.YawRateSAEDps, _x.VehOdom, _x.YawRate_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2i2fi2fi3f2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2fi2fi3f2Q = None
def _get_struct_2i2fi2fi3f2Q():
    global _struct_2i2fi2fi3f2Q
    if _struct_2i2fi2fi3f2Q is None:
        _struct_2i2fi2fi3f2Q = struct.Struct("<2i2fi2fi3f2Q")
    return _struct_2i2fi2fi3f2Q
_struct_2i3fi2fi = None
def _get_struct_2i3fi2fi():
    global _struct_2i3fi2fi
    if _struct_2i3fi2fi is None:
        _struct_2i3fi2fi = struct.Struct("<2i3fi2fi")
    return _struct_2i3fi2fi

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SdMapLaneConnection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SdMapLaneConnection(genpy.Message):
  _md5sum = "c2e3a2e012d42092a5cf1fd48b114531"
  _type = "rospy_message_converter/SdMapLaneConnection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 offset
uint64 index
uint32 lane_num
uint32 first_predecessor_lane
uint32 last_predecessor_lane
uint32 priority_predecessor_lane
uint32 arrow_marking
uint32 lane_type
uint32 line_marking
uint32 yield_flag
"""
  __slots__ = ['offset','index','lane_num','first_predecessor_lane','last_predecessor_lane','priority_predecessor_lane','arrow_marking','lane_type','line_marking','yield_flag']
  _slot_types = ['uint64','uint64','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       offset,index,lane_num,first_predecessor_lane,last_predecessor_lane,priority_predecessor_lane,arrow_marking,lane_type,line_marking,yield_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SdMapLaneConnection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.offset is None:
        self.offset = 0
      if self.index is None:
        self.index = 0
      if self.lane_num is None:
        self.lane_num = 0
      if self.first_predecessor_lane is None:
        self.first_predecessor_lane = 0
      if self.last_predecessor_lane is None:
        self.last_predecessor_lane = 0
      if self.priority_predecessor_lane is None:
        self.priority_predecessor_lane = 0
      if self.arrow_marking is None:
        self.arrow_marking = 0
      if self.lane_type is None:
        self.lane_type = 0
      if self.line_marking is None:
        self.line_marking = 0
      if self.yield_flag is None:
        self.yield_flag = 0
    else:
      self.offset = 0
      self.index = 0
      self.lane_num = 0
      self.first_predecessor_lane = 0
      self.last_predecessor_lane = 0
      self.priority_predecessor_lane = 0
      self.arrow_marking = 0
      self.lane_type = 0
      self.line_marking = 0
      self.yield_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Q8I().pack(_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_2Q8I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Q8I().pack(_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.offset, _x.index, _x.lane_num, _x.first_predecessor_lane, _x.last_predecessor_lane, _x.priority_predecessor_lane, _x.arrow_marking, _x.lane_type, _x.line_marking, _x.yield_flag,) = _get_struct_2Q8I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q8I = None
def _get_struct_2Q8I():
    global _struct_2Q8I
    if _struct_2Q8I is None:
        _struct_2Q8I = struct.Struct("<2Q8I")
    return _struct_2Q8I

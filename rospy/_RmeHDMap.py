# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RmeHDMap.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class RmeHDMap(genpy.Message):
  _md5sum = "68288480261bc95d53424c9987cacc81"
  _type = "rospy_message_converter/RmeHDMap"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RmeMapGP[] ngp_list

================================================================================
MSG: rospy_message_converter/RmeMapGP
float32 gp_distance
uint32 gp_type
float32 recom_speed
float32 link_length
uint32 recom_lane_idx
uint32 recom_speed_id
uint32 recom_speed_src
uint32 recom_speed_conf
bool spd_unit
int32 sup_sign_typ
int32 sup_sign_attr
"""
  __slots__ = ['ngp_list']
  _slot_types = ['rospy_message_converter/RmeMapGP[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ngp_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RmeHDMap, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ngp_list is None:
        self.ngp_list = []
    else:
      self.ngp_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ngp_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.ngp_list:
        _x = val1
        buff.write(_get_struct_fI2f4IB2i().pack(_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ngp_list is None:
        self.ngp_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ngp_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RmeMapGP()
        _x = val1
        start = end
        end += 41
        (_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr,) = _get_struct_fI2f4IB2i().unpack(str[start:end])
        val1.spd_unit = bool(val1.spd_unit)
        self.ngp_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ngp_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.ngp_list:
        _x = val1
        buff.write(_get_struct_fI2f4IB2i().pack(_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ngp_list is None:
        self.ngp_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ngp_list = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.RmeMapGP()
        _x = val1
        start = end
        end += 41
        (_x.gp_distance, _x.gp_type, _x.recom_speed, _x.link_length, _x.recom_lane_idx, _x.recom_speed_id, _x.recom_speed_src, _x.recom_speed_conf, _x.spd_unit, _x.sup_sign_typ, _x.sup_sign_attr,) = _get_struct_fI2f4IB2i().unpack(str[start:end])
        val1.spd_unit = bool(val1.spd_unit)
        self.ngp_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fI2f4IB2i = None
def _get_struct_fI2f4IB2i():
    global _struct_fI2f4IB2i
    if _struct_fI2f4IB2i is None:
        _struct_fI2f4IB2i = struct.Struct("<fI2f4IB2i")
    return _struct_fI2f4IB2i

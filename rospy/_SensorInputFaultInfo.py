# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SensorInputFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorInputFaultInfo(genpy.Message):
  _md5sum = "62ff2e97b69a6b7eb896a6741e4701af"
  _type = "rospy_message_converter/SensorInputFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool APP_IMU_InputMsg_OrderError
bool APP_IMU_PTPTimeStamp_RollBackError
bool APP_IMU_PTPTimeStamp_LatencyError
bool APP_FrontLidar_InputTimeStamp_Error
bool APP_WhlInfosCAN_InputTimeStamp_RollBackError
bool APP_FW_Camera_DataInput_Error
bool APP_FN_Camera_DataInput_Error
bool APP_FL_Camera_DataInput_Error
bool APP_FR_Camera_DataInput_Error
bool APP_RL_Camera_DataInput_Error
bool APP_RR_Camera_DataInput_Error
bool APP_SVC_LEFT_Camera_DataInput_Error
bool APP_SVC_RIGHT_Camera_DataInput_Error
bool APP_SVC_FRONT_Camera_DataInput_Error
bool APP_SVC_REAR_Camera_DataInput_Error
bool APP_RN_Camera_DataInput_Error
bool APP_IMU_DataInput_Error
bool APP_RTK_DataInput_Error
bool APP_VehicleCAN_DataInput_Error
bool APP_LIDAR_DataInput_E2E_Error
bool APP_LIDAR_ProcessResultInput_Error
"""
  __slots__ = ['APP_IMU_InputMsg_OrderError','APP_IMU_PTPTimeStamp_RollBackError','APP_IMU_PTPTimeStamp_LatencyError','APP_FrontLidar_InputTimeStamp_Error','APP_WhlInfosCAN_InputTimeStamp_RollBackError','APP_FW_Camera_DataInput_Error','APP_FN_Camera_DataInput_Error','APP_FL_Camera_DataInput_Error','APP_FR_Camera_DataInput_Error','APP_RL_Camera_DataInput_Error','APP_RR_Camera_DataInput_Error','APP_SVC_LEFT_Camera_DataInput_Error','APP_SVC_RIGHT_Camera_DataInput_Error','APP_SVC_FRONT_Camera_DataInput_Error','APP_SVC_REAR_Camera_DataInput_Error','APP_RN_Camera_DataInput_Error','APP_IMU_DataInput_Error','APP_RTK_DataInput_Error','APP_VehicleCAN_DataInput_Error','APP_LIDAR_DataInput_E2E_Error','APP_LIDAR_ProcessResultInput_Error']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       APP_IMU_InputMsg_OrderError,APP_IMU_PTPTimeStamp_RollBackError,APP_IMU_PTPTimeStamp_LatencyError,APP_FrontLidar_InputTimeStamp_Error,APP_WhlInfosCAN_InputTimeStamp_RollBackError,APP_FW_Camera_DataInput_Error,APP_FN_Camera_DataInput_Error,APP_FL_Camera_DataInput_Error,APP_FR_Camera_DataInput_Error,APP_RL_Camera_DataInput_Error,APP_RR_Camera_DataInput_Error,APP_SVC_LEFT_Camera_DataInput_Error,APP_SVC_RIGHT_Camera_DataInput_Error,APP_SVC_FRONT_Camera_DataInput_Error,APP_SVC_REAR_Camera_DataInput_Error,APP_RN_Camera_DataInput_Error,APP_IMU_DataInput_Error,APP_RTK_DataInput_Error,APP_VehicleCAN_DataInput_Error,APP_LIDAR_DataInput_E2E_Error,APP_LIDAR_ProcessResultInput_Error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorInputFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.APP_IMU_InputMsg_OrderError is None:
        self.APP_IMU_InputMsg_OrderError = False
      if self.APP_IMU_PTPTimeStamp_RollBackError is None:
        self.APP_IMU_PTPTimeStamp_RollBackError = False
      if self.APP_IMU_PTPTimeStamp_LatencyError is None:
        self.APP_IMU_PTPTimeStamp_LatencyError = False
      if self.APP_FrontLidar_InputTimeStamp_Error is None:
        self.APP_FrontLidar_InputTimeStamp_Error = False
      if self.APP_WhlInfosCAN_InputTimeStamp_RollBackError is None:
        self.APP_WhlInfosCAN_InputTimeStamp_RollBackError = False
      if self.APP_FW_Camera_DataInput_Error is None:
        self.APP_FW_Camera_DataInput_Error = False
      if self.APP_FN_Camera_DataInput_Error is None:
        self.APP_FN_Camera_DataInput_Error = False
      if self.APP_FL_Camera_DataInput_Error is None:
        self.APP_FL_Camera_DataInput_Error = False
      if self.APP_FR_Camera_DataInput_Error is None:
        self.APP_FR_Camera_DataInput_Error = False
      if self.APP_RL_Camera_DataInput_Error is None:
        self.APP_RL_Camera_DataInput_Error = False
      if self.APP_RR_Camera_DataInput_Error is None:
        self.APP_RR_Camera_DataInput_Error = False
      if self.APP_SVC_LEFT_Camera_DataInput_Error is None:
        self.APP_SVC_LEFT_Camera_DataInput_Error = False
      if self.APP_SVC_RIGHT_Camera_DataInput_Error is None:
        self.APP_SVC_RIGHT_Camera_DataInput_Error = False
      if self.APP_SVC_FRONT_Camera_DataInput_Error is None:
        self.APP_SVC_FRONT_Camera_DataInput_Error = False
      if self.APP_SVC_REAR_Camera_DataInput_Error is None:
        self.APP_SVC_REAR_Camera_DataInput_Error = False
      if self.APP_RN_Camera_DataInput_Error is None:
        self.APP_RN_Camera_DataInput_Error = False
      if self.APP_IMU_DataInput_Error is None:
        self.APP_IMU_DataInput_Error = False
      if self.APP_RTK_DataInput_Error is None:
        self.APP_RTK_DataInput_Error = False
      if self.APP_VehicleCAN_DataInput_Error is None:
        self.APP_VehicleCAN_DataInput_Error = False
      if self.APP_LIDAR_DataInput_E2E_Error is None:
        self.APP_LIDAR_DataInput_E2E_Error = False
      if self.APP_LIDAR_ProcessResultInput_Error is None:
        self.APP_LIDAR_ProcessResultInput_Error = False
    else:
      self.APP_IMU_InputMsg_OrderError = False
      self.APP_IMU_PTPTimeStamp_RollBackError = False
      self.APP_IMU_PTPTimeStamp_LatencyError = False
      self.APP_FrontLidar_InputTimeStamp_Error = False
      self.APP_WhlInfosCAN_InputTimeStamp_RollBackError = False
      self.APP_FW_Camera_DataInput_Error = False
      self.APP_FN_Camera_DataInput_Error = False
      self.APP_FL_Camera_DataInput_Error = False
      self.APP_FR_Camera_DataInput_Error = False
      self.APP_RL_Camera_DataInput_Error = False
      self.APP_RR_Camera_DataInput_Error = False
      self.APP_SVC_LEFT_Camera_DataInput_Error = False
      self.APP_SVC_RIGHT_Camera_DataInput_Error = False
      self.APP_SVC_FRONT_Camera_DataInput_Error = False
      self.APP_SVC_REAR_Camera_DataInput_Error = False
      self.APP_RN_Camera_DataInput_Error = False
      self.APP_IMU_DataInput_Error = False
      self.APP_RTK_DataInput_Error = False
      self.APP_VehicleCAN_DataInput_Error = False
      self.APP_LIDAR_DataInput_E2E_Error = False
      self.APP_LIDAR_ProcessResultInput_Error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_21B().pack(_x.APP_IMU_InputMsg_OrderError, _x.APP_IMU_PTPTimeStamp_RollBackError, _x.APP_IMU_PTPTimeStamp_LatencyError, _x.APP_FrontLidar_InputTimeStamp_Error, _x.APP_WhlInfosCAN_InputTimeStamp_RollBackError, _x.APP_FW_Camera_DataInput_Error, _x.APP_FN_Camera_DataInput_Error, _x.APP_FL_Camera_DataInput_Error, _x.APP_FR_Camera_DataInput_Error, _x.APP_RL_Camera_DataInput_Error, _x.APP_RR_Camera_DataInput_Error, _x.APP_SVC_LEFT_Camera_DataInput_Error, _x.APP_SVC_RIGHT_Camera_DataInput_Error, _x.APP_SVC_FRONT_Camera_DataInput_Error, _x.APP_SVC_REAR_Camera_DataInput_Error, _x.APP_RN_Camera_DataInput_Error, _x.APP_IMU_DataInput_Error, _x.APP_RTK_DataInput_Error, _x.APP_VehicleCAN_DataInput_Error, _x.APP_LIDAR_DataInput_E2E_Error, _x.APP_LIDAR_ProcessResultInput_Error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.APP_IMU_InputMsg_OrderError, _x.APP_IMU_PTPTimeStamp_RollBackError, _x.APP_IMU_PTPTimeStamp_LatencyError, _x.APP_FrontLidar_InputTimeStamp_Error, _x.APP_WhlInfosCAN_InputTimeStamp_RollBackError, _x.APP_FW_Camera_DataInput_Error, _x.APP_FN_Camera_DataInput_Error, _x.APP_FL_Camera_DataInput_Error, _x.APP_FR_Camera_DataInput_Error, _x.APP_RL_Camera_DataInput_Error, _x.APP_RR_Camera_DataInput_Error, _x.APP_SVC_LEFT_Camera_DataInput_Error, _x.APP_SVC_RIGHT_Camera_DataInput_Error, _x.APP_SVC_FRONT_Camera_DataInput_Error, _x.APP_SVC_REAR_Camera_DataInput_Error, _x.APP_RN_Camera_DataInput_Error, _x.APP_IMU_DataInput_Error, _x.APP_RTK_DataInput_Error, _x.APP_VehicleCAN_DataInput_Error, _x.APP_LIDAR_DataInput_E2E_Error, _x.APP_LIDAR_ProcessResultInput_Error,) = _get_struct_21B().unpack(str[start:end])
      self.APP_IMU_InputMsg_OrderError = bool(self.APP_IMU_InputMsg_OrderError)
      self.APP_IMU_PTPTimeStamp_RollBackError = bool(self.APP_IMU_PTPTimeStamp_RollBackError)
      self.APP_IMU_PTPTimeStamp_LatencyError = bool(self.APP_IMU_PTPTimeStamp_LatencyError)
      self.APP_FrontLidar_InputTimeStamp_Error = bool(self.APP_FrontLidar_InputTimeStamp_Error)
      self.APP_WhlInfosCAN_InputTimeStamp_RollBackError = bool(self.APP_WhlInfosCAN_InputTimeStamp_RollBackError)
      self.APP_FW_Camera_DataInput_Error = bool(self.APP_FW_Camera_DataInput_Error)
      self.APP_FN_Camera_DataInput_Error = bool(self.APP_FN_Camera_DataInput_Error)
      self.APP_FL_Camera_DataInput_Error = bool(self.APP_FL_Camera_DataInput_Error)
      self.APP_FR_Camera_DataInput_Error = bool(self.APP_FR_Camera_DataInput_Error)
      self.APP_RL_Camera_DataInput_Error = bool(self.APP_RL_Camera_DataInput_Error)
      self.APP_RR_Camera_DataInput_Error = bool(self.APP_RR_Camera_DataInput_Error)
      self.APP_SVC_LEFT_Camera_DataInput_Error = bool(self.APP_SVC_LEFT_Camera_DataInput_Error)
      self.APP_SVC_RIGHT_Camera_DataInput_Error = bool(self.APP_SVC_RIGHT_Camera_DataInput_Error)
      self.APP_SVC_FRONT_Camera_DataInput_Error = bool(self.APP_SVC_FRONT_Camera_DataInput_Error)
      self.APP_SVC_REAR_Camera_DataInput_Error = bool(self.APP_SVC_REAR_Camera_DataInput_Error)
      self.APP_RN_Camera_DataInput_Error = bool(self.APP_RN_Camera_DataInput_Error)
      self.APP_IMU_DataInput_Error = bool(self.APP_IMU_DataInput_Error)
      self.APP_RTK_DataInput_Error = bool(self.APP_RTK_DataInput_Error)
      self.APP_VehicleCAN_DataInput_Error = bool(self.APP_VehicleCAN_DataInput_Error)
      self.APP_LIDAR_DataInput_E2E_Error = bool(self.APP_LIDAR_DataInput_E2E_Error)
      self.APP_LIDAR_ProcessResultInput_Error = bool(self.APP_LIDAR_ProcessResultInput_Error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_21B().pack(_x.APP_IMU_InputMsg_OrderError, _x.APP_IMU_PTPTimeStamp_RollBackError, _x.APP_IMU_PTPTimeStamp_LatencyError, _x.APP_FrontLidar_InputTimeStamp_Error, _x.APP_WhlInfosCAN_InputTimeStamp_RollBackError, _x.APP_FW_Camera_DataInput_Error, _x.APP_FN_Camera_DataInput_Error, _x.APP_FL_Camera_DataInput_Error, _x.APP_FR_Camera_DataInput_Error, _x.APP_RL_Camera_DataInput_Error, _x.APP_RR_Camera_DataInput_Error, _x.APP_SVC_LEFT_Camera_DataInput_Error, _x.APP_SVC_RIGHT_Camera_DataInput_Error, _x.APP_SVC_FRONT_Camera_DataInput_Error, _x.APP_SVC_REAR_Camera_DataInput_Error, _x.APP_RN_Camera_DataInput_Error, _x.APP_IMU_DataInput_Error, _x.APP_RTK_DataInput_Error, _x.APP_VehicleCAN_DataInput_Error, _x.APP_LIDAR_DataInput_E2E_Error, _x.APP_LIDAR_ProcessResultInput_Error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.APP_IMU_InputMsg_OrderError, _x.APP_IMU_PTPTimeStamp_RollBackError, _x.APP_IMU_PTPTimeStamp_LatencyError, _x.APP_FrontLidar_InputTimeStamp_Error, _x.APP_WhlInfosCAN_InputTimeStamp_RollBackError, _x.APP_FW_Camera_DataInput_Error, _x.APP_FN_Camera_DataInput_Error, _x.APP_FL_Camera_DataInput_Error, _x.APP_FR_Camera_DataInput_Error, _x.APP_RL_Camera_DataInput_Error, _x.APP_RR_Camera_DataInput_Error, _x.APP_SVC_LEFT_Camera_DataInput_Error, _x.APP_SVC_RIGHT_Camera_DataInput_Error, _x.APP_SVC_FRONT_Camera_DataInput_Error, _x.APP_SVC_REAR_Camera_DataInput_Error, _x.APP_RN_Camera_DataInput_Error, _x.APP_IMU_DataInput_Error, _x.APP_RTK_DataInput_Error, _x.APP_VehicleCAN_DataInput_Error, _x.APP_LIDAR_DataInput_E2E_Error, _x.APP_LIDAR_ProcessResultInput_Error,) = _get_struct_21B().unpack(str[start:end])
      self.APP_IMU_InputMsg_OrderError = bool(self.APP_IMU_InputMsg_OrderError)
      self.APP_IMU_PTPTimeStamp_RollBackError = bool(self.APP_IMU_PTPTimeStamp_RollBackError)
      self.APP_IMU_PTPTimeStamp_LatencyError = bool(self.APP_IMU_PTPTimeStamp_LatencyError)
      self.APP_FrontLidar_InputTimeStamp_Error = bool(self.APP_FrontLidar_InputTimeStamp_Error)
      self.APP_WhlInfosCAN_InputTimeStamp_RollBackError = bool(self.APP_WhlInfosCAN_InputTimeStamp_RollBackError)
      self.APP_FW_Camera_DataInput_Error = bool(self.APP_FW_Camera_DataInput_Error)
      self.APP_FN_Camera_DataInput_Error = bool(self.APP_FN_Camera_DataInput_Error)
      self.APP_FL_Camera_DataInput_Error = bool(self.APP_FL_Camera_DataInput_Error)
      self.APP_FR_Camera_DataInput_Error = bool(self.APP_FR_Camera_DataInput_Error)
      self.APP_RL_Camera_DataInput_Error = bool(self.APP_RL_Camera_DataInput_Error)
      self.APP_RR_Camera_DataInput_Error = bool(self.APP_RR_Camera_DataInput_Error)
      self.APP_SVC_LEFT_Camera_DataInput_Error = bool(self.APP_SVC_LEFT_Camera_DataInput_Error)
      self.APP_SVC_RIGHT_Camera_DataInput_Error = bool(self.APP_SVC_RIGHT_Camera_DataInput_Error)
      self.APP_SVC_FRONT_Camera_DataInput_Error = bool(self.APP_SVC_FRONT_Camera_DataInput_Error)
      self.APP_SVC_REAR_Camera_DataInput_Error = bool(self.APP_SVC_REAR_Camera_DataInput_Error)
      self.APP_RN_Camera_DataInput_Error = bool(self.APP_RN_Camera_DataInput_Error)
      self.APP_IMU_DataInput_Error = bool(self.APP_IMU_DataInput_Error)
      self.APP_RTK_DataInput_Error = bool(self.APP_RTK_DataInput_Error)
      self.APP_VehicleCAN_DataInput_Error = bool(self.APP_VehicleCAN_DataInput_Error)
      self.APP_LIDAR_DataInput_E2E_Error = bool(self.APP_LIDAR_DataInput_E2E_Error)
      self.APP_LIDAR_ProcessResultInput_Error = bool(self.APP_LIDAR_ProcessResultInput_Error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21B = None
def _get_struct_21B():
    global _struct_21B
    if _struct_21B is None:
        _struct_21B = struct.Struct("<21B")
    return _struct_21B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/esd_ObjInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class esd_ObjInfo(genpy.Message):
  _md5sum = "a431ca895e42cbd5bd8badfef86865a5"
  _type = "rospy_message_converter/esd_ObjInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 esd_OBJ_Object_Count
uint32 esd_OBJ_VRU_Count
uint32 esd_OBJ_VD_Count
uint32 esd_OBJ_CIPV_ID
bool esd_OBJ_CIPV_Lost
bool esd_OBJ_Is_CCI
int32 esd_OBJ_CCI_Side
uint32 esd_OBJ_CCI_ID
"""
  __slots__ = ['esd_OBJ_Object_Count','esd_OBJ_VRU_Count','esd_OBJ_VD_Count','esd_OBJ_CIPV_ID','esd_OBJ_CIPV_Lost','esd_OBJ_Is_CCI','esd_OBJ_CCI_Side','esd_OBJ_CCI_ID']
  _slot_types = ['uint32','uint32','uint32','uint32','bool','bool','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       esd_OBJ_Object_Count,esd_OBJ_VRU_Count,esd_OBJ_VD_Count,esd_OBJ_CIPV_ID,esd_OBJ_CIPV_Lost,esd_OBJ_Is_CCI,esd_OBJ_CCI_Side,esd_OBJ_CCI_ID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(esd_ObjInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.esd_OBJ_Object_Count is None:
        self.esd_OBJ_Object_Count = 0
      if self.esd_OBJ_VRU_Count is None:
        self.esd_OBJ_VRU_Count = 0
      if self.esd_OBJ_VD_Count is None:
        self.esd_OBJ_VD_Count = 0
      if self.esd_OBJ_CIPV_ID is None:
        self.esd_OBJ_CIPV_ID = 0
      if self.esd_OBJ_CIPV_Lost is None:
        self.esd_OBJ_CIPV_Lost = False
      if self.esd_OBJ_Is_CCI is None:
        self.esd_OBJ_Is_CCI = False
      if self.esd_OBJ_CCI_Side is None:
        self.esd_OBJ_CCI_Side = 0
      if self.esd_OBJ_CCI_ID is None:
        self.esd_OBJ_CCI_ID = 0
    else:
      self.esd_OBJ_Object_Count = 0
      self.esd_OBJ_VRU_Count = 0
      self.esd_OBJ_VD_Count = 0
      self.esd_OBJ_CIPV_ID = 0
      self.esd_OBJ_CIPV_Lost = False
      self.esd_OBJ_Is_CCI = False
      self.esd_OBJ_CCI_Side = 0
      self.esd_OBJ_CCI_ID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I2BiI().pack(_x.esd_OBJ_Object_Count, _x.esd_OBJ_VRU_Count, _x.esd_OBJ_VD_Count, _x.esd_OBJ_CIPV_ID, _x.esd_OBJ_CIPV_Lost, _x.esd_OBJ_Is_CCI, _x.esd_OBJ_CCI_Side, _x.esd_OBJ_CCI_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.esd_OBJ_Object_Count, _x.esd_OBJ_VRU_Count, _x.esd_OBJ_VD_Count, _x.esd_OBJ_CIPV_ID, _x.esd_OBJ_CIPV_Lost, _x.esd_OBJ_Is_CCI, _x.esd_OBJ_CCI_Side, _x.esd_OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
      self.esd_OBJ_CIPV_Lost = bool(self.esd_OBJ_CIPV_Lost)
      self.esd_OBJ_Is_CCI = bool(self.esd_OBJ_Is_CCI)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I2BiI().pack(_x.esd_OBJ_Object_Count, _x.esd_OBJ_VRU_Count, _x.esd_OBJ_VD_Count, _x.esd_OBJ_CIPV_ID, _x.esd_OBJ_CIPV_Lost, _x.esd_OBJ_Is_CCI, _x.esd_OBJ_CCI_Side, _x.esd_OBJ_CCI_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.esd_OBJ_Object_Count, _x.esd_OBJ_VRU_Count, _x.esd_OBJ_VD_Count, _x.esd_OBJ_CIPV_ID, _x.esd_OBJ_CIPV_Lost, _x.esd_OBJ_Is_CCI, _x.esd_OBJ_CCI_Side, _x.esd_OBJ_CCI_ID,) = _get_struct_4I2BiI().unpack(str[start:end])
      self.esd_OBJ_CIPV_Lost = bool(self.esd_OBJ_CIPV_Lost)
      self.esd_OBJ_Is_CCI = bool(self.esd_OBJ_Is_CCI)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4I2BiI = None
def _get_struct_4I2BiI():
    global _struct_4I2BiI
    if _struct_4I2BiI is None:
        _struct_4I2BiI = struct.Struct("<4I2BiI")
    return _struct_4I2BiI

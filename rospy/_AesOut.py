# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AesOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AesOut(genpy.Message):
  _md5sum = "49513f72f66081dbe3678de666c372e1"
  _type = "rospy_message_converter/AesOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 aes_pncsts
uint32 epsaciramprate
float32 epsacireqsae
float32 epsacisaflim_angdyn
uint32 epsacisaflim_angdynoffs
uint32 epsacisaflim_anglm
uint32 epsacisaflim_angrm
uint32 epsacisaflim_mode
uint32 epsacisaflim_rate
uint32 epsaciovrthr
uint32 epsacitsusup
float32 epsctireqsae
uint32 laneassiststs
uint32 aes_sts
uint32 aes_warningsts
"""
  __slots__ = ['aes_pncsts','epsaciramprate','epsacireqsae','epsacisaflim_angdyn','epsacisaflim_angdynoffs','epsacisaflim_anglm','epsacisaflim_angrm','epsacisaflim_mode','epsacisaflim_rate','epsaciovrthr','epsacitsusup','epsctireqsae','laneassiststs','aes_sts','aes_warningsts']
  _slot_types = ['uint32','uint32','float32','float32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       aes_pncsts,epsaciramprate,epsacireqsae,epsacisaflim_angdyn,epsacisaflim_angdynoffs,epsacisaflim_anglm,epsacisaflim_angrm,epsacisaflim_mode,epsacisaflim_rate,epsaciovrthr,epsacitsusup,epsctireqsae,laneassiststs,aes_sts,aes_warningsts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AesOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.aes_pncsts is None:
        self.aes_pncsts = 0
      if self.epsaciramprate is None:
        self.epsaciramprate = 0
      if self.epsacireqsae is None:
        self.epsacireqsae = 0.
      if self.epsacisaflim_angdyn is None:
        self.epsacisaflim_angdyn = 0.
      if self.epsacisaflim_angdynoffs is None:
        self.epsacisaflim_angdynoffs = 0
      if self.epsacisaflim_anglm is None:
        self.epsacisaflim_anglm = 0
      if self.epsacisaflim_angrm is None:
        self.epsacisaflim_angrm = 0
      if self.epsacisaflim_mode is None:
        self.epsacisaflim_mode = 0
      if self.epsacisaflim_rate is None:
        self.epsacisaflim_rate = 0
      if self.epsaciovrthr is None:
        self.epsaciovrthr = 0
      if self.epsacitsusup is None:
        self.epsacitsusup = 0
      if self.epsctireqsae is None:
        self.epsctireqsae = 0.
      if self.laneassiststs is None:
        self.laneassiststs = 0
      if self.aes_sts is None:
        self.aes_sts = 0
      if self.aes_warningsts is None:
        self.aes_warningsts = 0
    else:
      self.aes_pncsts = 0
      self.epsaciramprate = 0
      self.epsacireqsae = 0.
      self.epsacisaflim_angdyn = 0.
      self.epsacisaflim_angdynoffs = 0
      self.epsacisaflim_anglm = 0
      self.epsacisaflim_angrm = 0
      self.epsacisaflim_mode = 0
      self.epsacisaflim_rate = 0
      self.epsaciovrthr = 0
      self.epsacitsusup = 0
      self.epsctireqsae = 0.
      self.laneassiststs = 0
      self.aes_sts = 0
      self.aes_warningsts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2f7If3I().pack(_x.aes_pncsts, _x.epsaciramprate, _x.epsacireqsae, _x.epsacisaflim_angdyn, _x.epsacisaflim_angdynoffs, _x.epsacisaflim_anglm, _x.epsacisaflim_angrm, _x.epsacisaflim_mode, _x.epsacisaflim_rate, _x.epsaciovrthr, _x.epsacitsusup, _x.epsctireqsae, _x.laneassiststs, _x.aes_sts, _x.aes_warningsts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.aes_pncsts, _x.epsaciramprate, _x.epsacireqsae, _x.epsacisaflim_angdyn, _x.epsacisaflim_angdynoffs, _x.epsacisaflim_anglm, _x.epsacisaflim_angrm, _x.epsacisaflim_mode, _x.epsacisaflim_rate, _x.epsaciovrthr, _x.epsacitsusup, _x.epsctireqsae, _x.laneassiststs, _x.aes_sts, _x.aes_warningsts,) = _get_struct_2I2f7If3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2f7If3I().pack(_x.aes_pncsts, _x.epsaciramprate, _x.epsacireqsae, _x.epsacisaflim_angdyn, _x.epsacisaflim_angdynoffs, _x.epsacisaflim_anglm, _x.epsacisaflim_angrm, _x.epsacisaflim_mode, _x.epsacisaflim_rate, _x.epsaciovrthr, _x.epsacitsusup, _x.epsctireqsae, _x.laneassiststs, _x.aes_sts, _x.aes_warningsts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.aes_pncsts, _x.epsaciramprate, _x.epsacireqsae, _x.epsacisaflim_angdyn, _x.epsacisaflim_angdynoffs, _x.epsacisaflim_anglm, _x.epsacisaflim_angrm, _x.epsacisaflim_mode, _x.epsacisaflim_rate, _x.epsaciovrthr, _x.epsacitsusup, _x.epsctireqsae, _x.laneassiststs, _x.aes_sts, _x.aes_warningsts,) = _get_struct_2I2f7If3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2f7If3I = None
def _get_struct_2I2f7If3I():
    global _struct_2I2f7If3I
    if _struct_2I2f7If3I is None:
        _struct_2I2f7If3I = struct.Struct("<2I2f7If3I")
    return _struct_2I2f7If3I

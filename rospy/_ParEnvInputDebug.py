# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvInputDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvInputDebug(genpy.Message):
  _md5sum = "21e39cac645fc3210335b48bd10730fa"
  _type = "rospy_message_converter/ParEnvInputDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParEnvInputData vehicle_10
ParEnvInputData vehicle_50
ParEnvInputData svc
ParEnvInputData location
ParEnvInputData state_machine
ParEnvInputData planning_result
ParEnvInputData psap_station
ParEnvInputUssState uss_state
SVCDetectionStatus svc_state
ParFusedLocation location_info
StateMachine state_machine_info
uint32 planning_slot_size
PsapStationInfo psap_station_info
uint64 reserved_0
uint64 reserved_1
uint64 reserved_2
uint64 reserved_3
float32 reserved_4
float32 reserved_5
float32 reserved_6
float32 reserved_7
bool reserved_8
bool reserved_9
string reserved_10

================================================================================
MSG: rospy_message_converter/ParEnvInputData
bool is_received
uint64 counter
uint64 timestamp
uint64 elapsed_time

================================================================================
MSG: rospy_message_converter/ParEnvInputUssState
int32 sdw_status
int32 apa_status
int32 map_obj_statue
int32 upa_sys_status
int32 uss_mode

================================================================================
MSG: rospy_message_converter/SVCDetectionStatus
int32 svc_det_status_type
bool svcsapa_detection_avl
bool svcpowerswap_detection_avl
int32 svc_det_sub_status_type
SVCAlarm[] svc_alarms
SVCFault[] svc_faults
bool is_dlb_triggered
SVCDLBRequest dlb_request

================================================================================
MSG: rospy_message_converter/SVCAlarm
int32 alarm_type
int32 alarm_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCFault
int32 fault_type
int32 fault_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCDLBRequest
int32 index
int32 dlb_reason_type
int32 dlb_reason_code
uint64 dlb_begin_timestamp_utc
uint64 dlb_end_timestamp_utc
string description

================================================================================
MSG: rospy_message_converter/ParFusedLocation
ParLocation loc_odom
ParLocation loc_slot
ParLocation loc_fused
int32 wheel_odom_status
int32 imu_status
int32 svc_status
int32 lidar_status
NodeInfo node_info
int32 slot_status
int32 psap_station_info_status
int32 psap_station_entrance_type
PSAPResult psap_result
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/ParLocation
uint64 timestamp
bool location_valid
ParPoint position
ParQuaternion orientation
float32 easting
float32 northing
float32 height
float32 speed
float32 sum_s

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/ParQuaternion
float32 x
float32 y
float32 z
float32 w

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer

================================================================================
MSG: rospy_message_converter/PSAPResult
uint64 timestamp
PSAPObject[] objects
SVCPoint veh_loc
float32 veh_loc_z
SVCOrientation veh_orientation
bool veh_loc_valid
PSAPSlot slot
int32 coordinate_type

================================================================================
MSG: rospy_message_converter/PSAPObject
int32 obj_type
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
int32 marker_id

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/SVCOrientation
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: rospy_message_converter/PSAPSlot
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
SVCPoint veh_pos
float32 veh_psi
int32 slot_status

================================================================================
MSG: rospy_message_converter/StateMachine
NodeInfo node_info
int32 feature_status
SlotBase target_slot
int32 operation_mode
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SlotBase
int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/PsapStationInfo
string station_id
int32 station_gen
int32 station_type
int32 station_entrance_type
float32 slope_length
bool station_available
string offline_reason
float32 station_platform_height
float32 station_tagb_to_slot_dst_x
float32 station_ref_offset
float32 station_reserved
float32 station_tagc_to_slot_dst_x
uint64 timestamp_ptp_ns
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts
"""
  __slots__ = ['vehicle_10','vehicle_50','svc','location','state_machine','planning_result','psap_station','uss_state','svc_state','location_info','state_machine_info','planning_slot_size','psap_station_info','reserved_0','reserved_1','reserved_2','reserved_3','reserved_4','reserved_5','reserved_6','reserved_7','reserved_8','reserved_9','reserved_10']
  _slot_types = ['rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputData','rospy_message_converter/ParEnvInputUssState','rospy_message_converter/SVCDetectionStatus','rospy_message_converter/ParFusedLocation','rospy_message_converter/StateMachine','uint32','rospy_message_converter/PsapStationInfo','uint64','uint64','uint64','uint64','float32','float32','float32','float32','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_10,vehicle_50,svc,location,state_machine,planning_result,psap_station,uss_state,svc_state,location_info,state_machine_info,planning_slot_size,psap_station_info,reserved_0,reserved_1,reserved_2,reserved_3,reserved_4,reserved_5,reserved_6,reserved_7,reserved_8,reserved_9,reserved_10

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvInputDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehicle_10 is None:
        self.vehicle_10 = rospy_message_converter.msg.ParEnvInputData()
      if self.vehicle_50 is None:
        self.vehicle_50 = rospy_message_converter.msg.ParEnvInputData()
      if self.svc is None:
        self.svc = rospy_message_converter.msg.ParEnvInputData()
      if self.location is None:
        self.location = rospy_message_converter.msg.ParEnvInputData()
      if self.state_machine is None:
        self.state_machine = rospy_message_converter.msg.ParEnvInputData()
      if self.planning_result is None:
        self.planning_result = rospy_message_converter.msg.ParEnvInputData()
      if self.psap_station is None:
        self.psap_station = rospy_message_converter.msg.ParEnvInputData()
      if self.uss_state is None:
        self.uss_state = rospy_message_converter.msg.ParEnvInputUssState()
      if self.svc_state is None:
        self.svc_state = rospy_message_converter.msg.SVCDetectionStatus()
      if self.location_info is None:
        self.location_info = rospy_message_converter.msg.ParFusedLocation()
      if self.state_machine_info is None:
        self.state_machine_info = rospy_message_converter.msg.StateMachine()
      if self.planning_slot_size is None:
        self.planning_slot_size = 0
      if self.psap_station_info is None:
        self.psap_station_info = rospy_message_converter.msg.PsapStationInfo()
      if self.reserved_0 is None:
        self.reserved_0 = 0
      if self.reserved_1 is None:
        self.reserved_1 = 0
      if self.reserved_2 is None:
        self.reserved_2 = 0
      if self.reserved_3 is None:
        self.reserved_3 = 0
      if self.reserved_4 is None:
        self.reserved_4 = 0.
      if self.reserved_5 is None:
        self.reserved_5 = 0.
      if self.reserved_6 is None:
        self.reserved_6 = 0.
      if self.reserved_7 is None:
        self.reserved_7 = 0.
      if self.reserved_8 is None:
        self.reserved_8 = False
      if self.reserved_9 is None:
        self.reserved_9 = False
      if self.reserved_10 is None:
        self.reserved_10 = ''
    else:
      self.vehicle_10 = rospy_message_converter.msg.ParEnvInputData()
      self.vehicle_50 = rospy_message_converter.msg.ParEnvInputData()
      self.svc = rospy_message_converter.msg.ParEnvInputData()
      self.location = rospy_message_converter.msg.ParEnvInputData()
      self.state_machine = rospy_message_converter.msg.ParEnvInputData()
      self.planning_result = rospy_message_converter.msg.ParEnvInputData()
      self.psap_station = rospy_message_converter.msg.ParEnvInputData()
      self.uss_state = rospy_message_converter.msg.ParEnvInputUssState()
      self.svc_state = rospy_message_converter.msg.SVCDetectionStatus()
      self.location_info = rospy_message_converter.msg.ParFusedLocation()
      self.state_machine_info = rospy_message_converter.msg.StateMachine()
      self.planning_slot_size = 0
      self.psap_station_info = rospy_message_converter.msg.PsapStationInfo()
      self.reserved_0 = 0
      self.reserved_1 = 0
      self.reserved_2 = 0
      self.reserved_3 = 0
      self.reserved_4 = 0.
      self.reserved_5 = 0.
      self.reserved_6 = 0.
      self.reserved_7 = 0.
      self.reserved_8 = False
      self.reserved_9 = False
      self.reserved_10 = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().pack(_x.vehicle_10.is_received, _x.vehicle_10.counter, _x.vehicle_10.timestamp, _x.vehicle_10.elapsed_time, _x.vehicle_50.is_received, _x.vehicle_50.counter, _x.vehicle_50.timestamp, _x.vehicle_50.elapsed_time, _x.svc.is_received, _x.svc.counter, _x.svc.timestamp, _x.svc.elapsed_time, _x.location.is_received, _x.location.counter, _x.location.timestamp, _x.location.elapsed_time, _x.state_machine.is_received, _x.state_machine.counter, _x.state_machine.timestamp, _x.state_machine.elapsed_time, _x.planning_result.is_received, _x.planning_result.counter, _x.planning_result.timestamp, _x.planning_result.elapsed_time, _x.psap_station.is_received, _x.psap_station.counter, _x.psap_station.timestamp, _x.psap_station.elapsed_time, _x.uss_state.sdw_status, _x.uss_state.apa_status, _x.uss_state.map_obj_statue, _x.uss_state.upa_sys_status, _x.uss_state.uss_mode, _x.svc_state.svc_det_status_type, _x.svc_state.svcsapa_detection_avl, _x.svc_state.svcpowerswap_detection_avl, _x.svc_state.svc_det_sub_status_type))
      length = len(self.svc_state.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_state.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.svc_state.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_state.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.svc_state.is_dlb_triggered, _x.svc_state.dlb_request.index, _x.svc_state.dlb_request.dlb_reason_type, _x.svc_state.dlb_request.dlb_reason_code, _x.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.svc_state.dlb_request.dlb_end_timestamp_utc))
      _x = self.svc_state.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QB12fQB12fQB12f6i().pack(_x.location_info.loc_odom.timestamp, _x.location_info.loc_odom.location_valid, _x.location_info.loc_odom.position.x, _x.location_info.loc_odom.position.y, _x.location_info.loc_odom.position.z, _x.location_info.loc_odom.orientation.x, _x.location_info.loc_odom.orientation.y, _x.location_info.loc_odom.orientation.z, _x.location_info.loc_odom.orientation.w, _x.location_info.loc_odom.easting, _x.location_info.loc_odom.northing, _x.location_info.loc_odom.height, _x.location_info.loc_odom.speed, _x.location_info.loc_odom.sum_s, _x.location_info.loc_slot.timestamp, _x.location_info.loc_slot.location_valid, _x.location_info.loc_slot.position.x, _x.location_info.loc_slot.position.y, _x.location_info.loc_slot.position.z, _x.location_info.loc_slot.orientation.x, _x.location_info.loc_slot.orientation.y, _x.location_info.loc_slot.orientation.z, _x.location_info.loc_slot.orientation.w, _x.location_info.loc_slot.easting, _x.location_info.loc_slot.northing, _x.location_info.loc_slot.height, _x.location_info.loc_slot.speed, _x.location_info.loc_slot.sum_s, _x.location_info.loc_fused.timestamp, _x.location_info.loc_fused.location_valid, _x.location_info.loc_fused.position.x, _x.location_info.loc_fused.position.y, _x.location_info.loc_fused.position.z, _x.location_info.loc_fused.orientation.x, _x.location_info.loc_fused.orientation.y, _x.location_info.loc_fused.orientation.z, _x.location_info.loc_fused.orientation.w, _x.location_info.loc_fused.easting, _x.location_info.loc_fused.northing, _x.location_info.loc_fused.height, _x.location_info.loc_fused.speed, _x.location_info.loc_fused.sum_s, _x.location_info.wheel_odom_status, _x.location_info.imu_status, _x.location_info.svc_status, _x.location_info.lidar_status, _x.location_info.node_info.node_status, _x.location_info.node_info.feature_type))
      _x = self.location_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.location_info.node_info.counter, _x.location_info.node_info.timestamp))
      _x = self.location_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.location_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.location_info.node_info.buffer))
      _x = self
      buff.write(_get_struct_3iQ().pack(_x.location_info.slot_status, _x.location_info.psap_station_info_status, _x.location_info.psap_station_entrance_type, _x.location_info.psap_result.timestamp))
      length = len(self.location_info.psap_result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.location_info.psap_result.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pt1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.pt2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.pt3
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.pt4
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2iQ().pack(_x.location_info.psap_result.veh_loc.x, _x.location_info.psap_result.veh_loc.y, _x.location_info.psap_result.veh_loc_z, _x.location_info.psap_result.veh_orientation.roll, _x.location_info.psap_result.veh_orientation.pitch, _x.location_info.psap_result.veh_orientation.yaw, _x.location_info.psap_result.veh_loc_valid, _x.location_info.psap_result.slot.pt1.x, _x.location_info.psap_result.slot.pt1.y, _x.location_info.psap_result.slot.pt2.x, _x.location_info.psap_result.slot.pt2.y, _x.location_info.psap_result.slot.pt3.x, _x.location_info.psap_result.slot.pt3.y, _x.location_info.psap_result.slot.pt4.x, _x.location_info.psap_result.slot.pt4.y, _x.location_info.psap_result.slot.veh_pos.x, _x.location_info.psap_result.slot.veh_pos.y, _x.location_info.psap_result.slot.veh_psi, _x.location_info.psap_result.slot.slot_status, _x.location_info.psap_result.coordinate_type, _x.location_info.publish_ptp_ts))
      _x = self.location_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q2i().pack(_x.location_info.counter, _x.location_info.publish_ts, _x.state_machine_info.node_info.node_status, _x.state_machine_info.node_info.feature_type))
      _x = self.state_machine_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.state_machine_info.node_info.counter, _x.state_machine_info.node_info.timestamp))
      _x = self.state_machine_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state_machine_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.state_machine_info.node_info.buffer))
      _x = self
      buff.write(_get_struct_4i12f2i6f3ifiQ().pack(_x.state_machine_info.feature_status, _x.state_machine_info.target_slot.hmi_index, _x.state_machine_info.target_slot.svc_index, _x.state_machine_info.target_slot.uss_index, _x.state_machine_info.target_slot.pt1.x, _x.state_machine_info.target_slot.pt1.y, _x.state_machine_info.target_slot.pt1.z, _x.state_machine_info.target_slot.pt2.x, _x.state_machine_info.target_slot.pt2.y, _x.state_machine_info.target_slot.pt2.z, _x.state_machine_info.target_slot.pt3.x, _x.state_machine_info.target_slot.pt3.y, _x.state_machine_info.target_slot.pt3.z, _x.state_machine_info.target_slot.pt4.x, _x.state_machine_info.target_slot.pt4.y, _x.state_machine_info.target_slot.pt4.z, _x.state_machine_info.target_slot.type, _x.state_machine_info.target_slot.source, _x.state_machine_info.target_slot.size_x, _x.state_machine_info.target_slot.size_y, _x.state_machine_info.target_slot.VehPos.x, _x.state_machine_info.target_slot.VehPos.y, _x.state_machine_info.target_slot.VehPos.z, _x.state_machine_info.target_slot.VehPsi, _x.state_machine_info.target_slot.status, _x.state_machine_info.target_slot.fov, _x.state_machine_info.target_slot.planning_result, _x.state_machine_info.target_slot.slot_angle, _x.state_machine_info.operation_mode, _x.state_machine_info.publish_ptp_ts))
      _x = self.state_machine_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QI().pack(_x.state_machine_info.counter, _x.state_machine_info.publish_ts, _x.planning_slot_size))
      _x = self.psap_station_info.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3ifB().pack(_x.psap_station_info.station_gen, _x.psap_station_info.station_type, _x.psap_station_info.station_entrance_type, _x.psap_station_info.slope_length, _x.psap_station_info.station_available))
      _x = self.psap_station_info.offline_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2Q().pack(_x.psap_station_info.station_platform_height, _x.psap_station_info.station_tagb_to_slot_dst_x, _x.psap_station_info.station_ref_offset, _x.psap_station_info.station_reserved, _x.psap_station_info.station_tagc_to_slot_dst_x, _x.psap_station_info.timestamp_ptp_ns, _x.psap_station_info.publish_ptp_ts))
      _x = self.psap_station_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6Q4f2B().pack(_x.psap_station_info.counter, _x.psap_station_info.publish_ts, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9))
      _x = self.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_10 is None:
        self.vehicle_10 = rospy_message_converter.msg.ParEnvInputData()
      if self.vehicle_50 is None:
        self.vehicle_50 = rospy_message_converter.msg.ParEnvInputData()
      if self.svc is None:
        self.svc = rospy_message_converter.msg.ParEnvInputData()
      if self.location is None:
        self.location = rospy_message_converter.msg.ParEnvInputData()
      if self.state_machine is None:
        self.state_machine = rospy_message_converter.msg.ParEnvInputData()
      if self.planning_result is None:
        self.planning_result = rospy_message_converter.msg.ParEnvInputData()
      if self.psap_station is None:
        self.psap_station = rospy_message_converter.msg.ParEnvInputData()
      if self.uss_state is None:
        self.uss_state = rospy_message_converter.msg.ParEnvInputUssState()
      if self.svc_state is None:
        self.svc_state = rospy_message_converter.msg.SVCDetectionStatus()
      if self.location_info is None:
        self.location_info = rospy_message_converter.msg.ParFusedLocation()
      if self.state_machine_info is None:
        self.state_machine_info = rospy_message_converter.msg.StateMachine()
      if self.psap_station_info is None:
        self.psap_station_info = rospy_message_converter.msg.PsapStationInfo()
      end = 0
      _x = self
      start = end
      end += 205
      (_x.vehicle_10.is_received, _x.vehicle_10.counter, _x.vehicle_10.timestamp, _x.vehicle_10.elapsed_time, _x.vehicle_50.is_received, _x.vehicle_50.counter, _x.vehicle_50.timestamp, _x.vehicle_50.elapsed_time, _x.svc.is_received, _x.svc.counter, _x.svc.timestamp, _x.svc.elapsed_time, _x.location.is_received, _x.location.counter, _x.location.timestamp, _x.location.elapsed_time, _x.state_machine.is_received, _x.state_machine.counter, _x.state_machine.timestamp, _x.state_machine.elapsed_time, _x.planning_result.is_received, _x.planning_result.counter, _x.planning_result.timestamp, _x.planning_result.elapsed_time, _x.psap_station.is_received, _x.psap_station.counter, _x.psap_station.timestamp, _x.psap_station.elapsed_time, _x.uss_state.sdw_status, _x.uss_state.apa_status, _x.uss_state.map_obj_statue, _x.uss_state.upa_sys_status, _x.uss_state.uss_mode, _x.svc_state.svc_det_status_type, _x.svc_state.svcsapa_detection_avl, _x.svc_state.svcpowerswap_detection_avl, _x.svc_state.svc_det_sub_status_type,) = _get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().unpack(str[start:end])
      self.vehicle_10.is_received = bool(self.vehicle_10.is_received)
      self.vehicle_50.is_received = bool(self.vehicle_50.is_received)
      self.svc.is_received = bool(self.svc.is_received)
      self.location.is_received = bool(self.location.is_received)
      self.state_machine.is_received = bool(self.state_machine.is_received)
      self.planning_result.is_received = bool(self.planning_result.is_received)
      self.psap_station.is_received = bool(self.psap_station.is_received)
      self.svc_state.svcsapa_detection_avl = bool(self.svc_state.svcsapa_detection_avl)
      self.svc_state.svcpowerswap_detection_avl = bool(self.svc_state.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_state.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_state.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_state.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_state.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.svc_state.is_dlb_triggered, _x.svc_state.dlb_request.index, _x.svc_state.dlb_request.dlb_reason_type, _x.svc_state.dlb_request.dlb_reason_code, _x.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.svc_state.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.svc_state.is_dlb_triggered = bool(self.svc_state.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.svc_state.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.svc_state.dlb_request.description = str[start:end]
      _x = self
      start = end
      end += 195
      (_x.location_info.loc_odom.timestamp, _x.location_info.loc_odom.location_valid, _x.location_info.loc_odom.position.x, _x.location_info.loc_odom.position.y, _x.location_info.loc_odom.position.z, _x.location_info.loc_odom.orientation.x, _x.location_info.loc_odom.orientation.y, _x.location_info.loc_odom.orientation.z, _x.location_info.loc_odom.orientation.w, _x.location_info.loc_odom.easting, _x.location_info.loc_odom.northing, _x.location_info.loc_odom.height, _x.location_info.loc_odom.speed, _x.location_info.loc_odom.sum_s, _x.location_info.loc_slot.timestamp, _x.location_info.loc_slot.location_valid, _x.location_info.loc_slot.position.x, _x.location_info.loc_slot.position.y, _x.location_info.loc_slot.position.z, _x.location_info.loc_slot.orientation.x, _x.location_info.loc_slot.orientation.y, _x.location_info.loc_slot.orientation.z, _x.location_info.loc_slot.orientation.w, _x.location_info.loc_slot.easting, _x.location_info.loc_slot.northing, _x.location_info.loc_slot.height, _x.location_info.loc_slot.speed, _x.location_info.loc_slot.sum_s, _x.location_info.loc_fused.timestamp, _x.location_info.loc_fused.location_valid, _x.location_info.loc_fused.position.x, _x.location_info.loc_fused.position.y, _x.location_info.loc_fused.position.z, _x.location_info.loc_fused.orientation.x, _x.location_info.loc_fused.orientation.y, _x.location_info.loc_fused.orientation.z, _x.location_info.loc_fused.orientation.w, _x.location_info.loc_fused.easting, _x.location_info.loc_fused.northing, _x.location_info.loc_fused.height, _x.location_info.loc_fused.speed, _x.location_info.loc_fused.sum_s, _x.location_info.wheel_odom_status, _x.location_info.imu_status, _x.location_info.svc_status, _x.location_info.lidar_status, _x.location_info.node_info.node_status, _x.location_info.node_info.feature_type,) = _get_struct_QB12fQB12fQB12f6i().unpack(str[start:end])
      self.location_info.loc_odom.location_valid = bool(self.location_info.loc_odom.location_valid)
      self.location_info.loc_slot.location_valid = bool(self.location_info.loc_slot.location_valid)
      self.location_info.loc_fused.location_valid = bool(self.location_info.loc_fused.location_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.location_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.location_info.node_info.counter, _x.location_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.location_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.location_info.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.location_info.slot_status, _x.location_info.psap_station_info_status, _x.location_info.psap_station_entrance_type, _x.location_info.psap_result.timestamp,) = _get_struct_3iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.location_info.psap_result.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v5 = val1.pt1
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v6 = val1.pt2
        _x = _v6
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v7 = val1.pt3
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.pt4
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.location_info.psap_result.objects.append(val1)
      _x = self
      start = end
      end += 85
      (_x.location_info.psap_result.veh_loc.x, _x.location_info.psap_result.veh_loc.y, _x.location_info.psap_result.veh_loc_z, _x.location_info.psap_result.veh_orientation.roll, _x.location_info.psap_result.veh_orientation.pitch, _x.location_info.psap_result.veh_orientation.yaw, _x.location_info.psap_result.veh_loc_valid, _x.location_info.psap_result.slot.pt1.x, _x.location_info.psap_result.slot.pt1.y, _x.location_info.psap_result.slot.pt2.x, _x.location_info.psap_result.slot.pt2.y, _x.location_info.psap_result.slot.pt3.x, _x.location_info.psap_result.slot.pt3.y, _x.location_info.psap_result.slot.pt4.x, _x.location_info.psap_result.slot.pt4.y, _x.location_info.psap_result.slot.veh_pos.x, _x.location_info.psap_result.slot.veh_pos.y, _x.location_info.psap_result.slot.veh_psi, _x.location_info.psap_result.slot.slot_status, _x.location_info.psap_result.coordinate_type, _x.location_info.publish_ptp_ts,) = _get_struct_6fB11f2iQ().unpack(str[start:end])
      self.location_info.psap_result.veh_loc_valid = bool(self.location_info.psap_result.veh_loc_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.location_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.location_info.counter, _x.location_info.publish_ts, _x.state_machine_info.node_info.node_status, _x.state_machine_info.node_info.feature_type,) = _get_struct_2Q2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_machine_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_machine_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.state_machine_info.node_info.counter, _x.state_machine_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_machine_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_machine_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state_machine_info.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 124
      (_x.state_machine_info.feature_status, _x.state_machine_info.target_slot.hmi_index, _x.state_machine_info.target_slot.svc_index, _x.state_machine_info.target_slot.uss_index, _x.state_machine_info.target_slot.pt1.x, _x.state_machine_info.target_slot.pt1.y, _x.state_machine_info.target_slot.pt1.z, _x.state_machine_info.target_slot.pt2.x, _x.state_machine_info.target_slot.pt2.y, _x.state_machine_info.target_slot.pt2.z, _x.state_machine_info.target_slot.pt3.x, _x.state_machine_info.target_slot.pt3.y, _x.state_machine_info.target_slot.pt3.z, _x.state_machine_info.target_slot.pt4.x, _x.state_machine_info.target_slot.pt4.y, _x.state_machine_info.target_slot.pt4.z, _x.state_machine_info.target_slot.type, _x.state_machine_info.target_slot.source, _x.state_machine_info.target_slot.size_x, _x.state_machine_info.target_slot.size_y, _x.state_machine_info.target_slot.VehPos.x, _x.state_machine_info.target_slot.VehPos.y, _x.state_machine_info.target_slot.VehPos.z, _x.state_machine_info.target_slot.VehPsi, _x.state_machine_info.target_slot.status, _x.state_machine_info.target_slot.fov, _x.state_machine_info.target_slot.planning_result, _x.state_machine_info.target_slot.slot_angle, _x.state_machine_info.operation_mode, _x.state_machine_info.publish_ptp_ts,) = _get_struct_4i12f2i6f3ifiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_machine_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_machine_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.state_machine_info.counter, _x.state_machine_info.publish_ts, _x.planning_slot_size,) = _get_struct_2QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.psap_station_info.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.psap_station_info.station_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.psap_station_info.station_gen, _x.psap_station_info.station_type, _x.psap_station_info.station_entrance_type, _x.psap_station_info.slope_length, _x.psap_station_info.station_available,) = _get_struct_3ifB().unpack(str[start:end])
      self.psap_station_info.station_available = bool(self.psap_station_info.station_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.psap_station_info.offline_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.psap_station_info.offline_reason = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.psap_station_info.station_platform_height, _x.psap_station_info.station_tagb_to_slot_dst_x, _x.psap_station_info.station_ref_offset, _x.psap_station_info.station_reserved, _x.psap_station_info.station_tagc_to_slot_dst_x, _x.psap_station_info.timestamp_ptp_ns, _x.psap_station_info.publish_ptp_ts,) = _get_struct_5f2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.psap_station_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.psap_station_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.psap_station_info.counter, _x.psap_station_info.publish_ts, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9,) = _get_struct_6Q4f2B().unpack(str[start:end])
      self.reserved_8 = bool(self.reserved_8)
      self.reserved_9 = bool(self.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved_10 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().pack(_x.vehicle_10.is_received, _x.vehicle_10.counter, _x.vehicle_10.timestamp, _x.vehicle_10.elapsed_time, _x.vehicle_50.is_received, _x.vehicle_50.counter, _x.vehicle_50.timestamp, _x.vehicle_50.elapsed_time, _x.svc.is_received, _x.svc.counter, _x.svc.timestamp, _x.svc.elapsed_time, _x.location.is_received, _x.location.counter, _x.location.timestamp, _x.location.elapsed_time, _x.state_machine.is_received, _x.state_machine.counter, _x.state_machine.timestamp, _x.state_machine.elapsed_time, _x.planning_result.is_received, _x.planning_result.counter, _x.planning_result.timestamp, _x.planning_result.elapsed_time, _x.psap_station.is_received, _x.psap_station.counter, _x.psap_station.timestamp, _x.psap_station.elapsed_time, _x.uss_state.sdw_status, _x.uss_state.apa_status, _x.uss_state.map_obj_statue, _x.uss_state.upa_sys_status, _x.uss_state.uss_mode, _x.svc_state.svc_det_status_type, _x.svc_state.svcsapa_detection_avl, _x.svc_state.svcpowerswap_detection_avl, _x.svc_state.svc_det_sub_status_type))
      length = len(self.svc_state.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_state.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.svc_state.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_state.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.svc_state.is_dlb_triggered, _x.svc_state.dlb_request.index, _x.svc_state.dlb_request.dlb_reason_type, _x.svc_state.dlb_request.dlb_reason_code, _x.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.svc_state.dlb_request.dlb_end_timestamp_utc))
      _x = self.svc_state.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QB12fQB12fQB12f6i().pack(_x.location_info.loc_odom.timestamp, _x.location_info.loc_odom.location_valid, _x.location_info.loc_odom.position.x, _x.location_info.loc_odom.position.y, _x.location_info.loc_odom.position.z, _x.location_info.loc_odom.orientation.x, _x.location_info.loc_odom.orientation.y, _x.location_info.loc_odom.orientation.z, _x.location_info.loc_odom.orientation.w, _x.location_info.loc_odom.easting, _x.location_info.loc_odom.northing, _x.location_info.loc_odom.height, _x.location_info.loc_odom.speed, _x.location_info.loc_odom.sum_s, _x.location_info.loc_slot.timestamp, _x.location_info.loc_slot.location_valid, _x.location_info.loc_slot.position.x, _x.location_info.loc_slot.position.y, _x.location_info.loc_slot.position.z, _x.location_info.loc_slot.orientation.x, _x.location_info.loc_slot.orientation.y, _x.location_info.loc_slot.orientation.z, _x.location_info.loc_slot.orientation.w, _x.location_info.loc_slot.easting, _x.location_info.loc_slot.northing, _x.location_info.loc_slot.height, _x.location_info.loc_slot.speed, _x.location_info.loc_slot.sum_s, _x.location_info.loc_fused.timestamp, _x.location_info.loc_fused.location_valid, _x.location_info.loc_fused.position.x, _x.location_info.loc_fused.position.y, _x.location_info.loc_fused.position.z, _x.location_info.loc_fused.orientation.x, _x.location_info.loc_fused.orientation.y, _x.location_info.loc_fused.orientation.z, _x.location_info.loc_fused.orientation.w, _x.location_info.loc_fused.easting, _x.location_info.loc_fused.northing, _x.location_info.loc_fused.height, _x.location_info.loc_fused.speed, _x.location_info.loc_fused.sum_s, _x.location_info.wheel_odom_status, _x.location_info.imu_status, _x.location_info.svc_status, _x.location_info.lidar_status, _x.location_info.node_info.node_status, _x.location_info.node_info.feature_type))
      _x = self.location_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.location_info.node_info.counter, _x.location_info.node_info.timestamp))
      _x = self.location_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.location_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.location_info.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_3iQ().pack(_x.location_info.slot_status, _x.location_info.psap_station_info_status, _x.location_info.psap_station_entrance_type, _x.location_info.psap_result.timestamp))
      length = len(self.location_info.psap_result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.location_info.psap_result.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v9 = val1.pt1
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v10 = val1.pt2
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = val1.pt3
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = val1.pt4
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2iQ().pack(_x.location_info.psap_result.veh_loc.x, _x.location_info.psap_result.veh_loc.y, _x.location_info.psap_result.veh_loc_z, _x.location_info.psap_result.veh_orientation.roll, _x.location_info.psap_result.veh_orientation.pitch, _x.location_info.psap_result.veh_orientation.yaw, _x.location_info.psap_result.veh_loc_valid, _x.location_info.psap_result.slot.pt1.x, _x.location_info.psap_result.slot.pt1.y, _x.location_info.psap_result.slot.pt2.x, _x.location_info.psap_result.slot.pt2.y, _x.location_info.psap_result.slot.pt3.x, _x.location_info.psap_result.slot.pt3.y, _x.location_info.psap_result.slot.pt4.x, _x.location_info.psap_result.slot.pt4.y, _x.location_info.psap_result.slot.veh_pos.x, _x.location_info.psap_result.slot.veh_pos.y, _x.location_info.psap_result.slot.veh_psi, _x.location_info.psap_result.slot.slot_status, _x.location_info.psap_result.coordinate_type, _x.location_info.publish_ptp_ts))
      _x = self.location_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q2i().pack(_x.location_info.counter, _x.location_info.publish_ts, _x.state_machine_info.node_info.node_status, _x.state_machine_info.node_info.feature_type))
      _x = self.state_machine_info.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.state_machine_info.node_info.counter, _x.state_machine_info.node_info.timestamp))
      _x = self.state_machine_info.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.state_machine_info.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.state_machine_info.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_4i12f2i6f3ifiQ().pack(_x.state_machine_info.feature_status, _x.state_machine_info.target_slot.hmi_index, _x.state_machine_info.target_slot.svc_index, _x.state_machine_info.target_slot.uss_index, _x.state_machine_info.target_slot.pt1.x, _x.state_machine_info.target_slot.pt1.y, _x.state_machine_info.target_slot.pt1.z, _x.state_machine_info.target_slot.pt2.x, _x.state_machine_info.target_slot.pt2.y, _x.state_machine_info.target_slot.pt2.z, _x.state_machine_info.target_slot.pt3.x, _x.state_machine_info.target_slot.pt3.y, _x.state_machine_info.target_slot.pt3.z, _x.state_machine_info.target_slot.pt4.x, _x.state_machine_info.target_slot.pt4.y, _x.state_machine_info.target_slot.pt4.z, _x.state_machine_info.target_slot.type, _x.state_machine_info.target_slot.source, _x.state_machine_info.target_slot.size_x, _x.state_machine_info.target_slot.size_y, _x.state_machine_info.target_slot.VehPos.x, _x.state_machine_info.target_slot.VehPos.y, _x.state_machine_info.target_slot.VehPos.z, _x.state_machine_info.target_slot.VehPsi, _x.state_machine_info.target_slot.status, _x.state_machine_info.target_slot.fov, _x.state_machine_info.target_slot.planning_result, _x.state_machine_info.target_slot.slot_angle, _x.state_machine_info.operation_mode, _x.state_machine_info.publish_ptp_ts))
      _x = self.state_machine_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QI().pack(_x.state_machine_info.counter, _x.state_machine_info.publish_ts, _x.planning_slot_size))
      _x = self.psap_station_info.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3ifB().pack(_x.psap_station_info.station_gen, _x.psap_station_info.station_type, _x.psap_station_info.station_entrance_type, _x.psap_station_info.slope_length, _x.psap_station_info.station_available))
      _x = self.psap_station_info.offline_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5f2Q().pack(_x.psap_station_info.station_platform_height, _x.psap_station_info.station_tagb_to_slot_dst_x, _x.psap_station_info.station_ref_offset, _x.psap_station_info.station_reserved, _x.psap_station_info.station_tagc_to_slot_dst_x, _x.psap_station_info.timestamp_ptp_ns, _x.psap_station_info.publish_ptp_ts))
      _x = self.psap_station_info.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6Q4f2B().pack(_x.psap_station_info.counter, _x.psap_station_info.publish_ts, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9))
      _x = self.reserved_10
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_10 is None:
        self.vehicle_10 = rospy_message_converter.msg.ParEnvInputData()
      if self.vehicle_50 is None:
        self.vehicle_50 = rospy_message_converter.msg.ParEnvInputData()
      if self.svc is None:
        self.svc = rospy_message_converter.msg.ParEnvInputData()
      if self.location is None:
        self.location = rospy_message_converter.msg.ParEnvInputData()
      if self.state_machine is None:
        self.state_machine = rospy_message_converter.msg.ParEnvInputData()
      if self.planning_result is None:
        self.planning_result = rospy_message_converter.msg.ParEnvInputData()
      if self.psap_station is None:
        self.psap_station = rospy_message_converter.msg.ParEnvInputData()
      if self.uss_state is None:
        self.uss_state = rospy_message_converter.msg.ParEnvInputUssState()
      if self.svc_state is None:
        self.svc_state = rospy_message_converter.msg.SVCDetectionStatus()
      if self.location_info is None:
        self.location_info = rospy_message_converter.msg.ParFusedLocation()
      if self.state_machine_info is None:
        self.state_machine_info = rospy_message_converter.msg.StateMachine()
      if self.psap_station_info is None:
        self.psap_station_info = rospy_message_converter.msg.PsapStationInfo()
      end = 0
      _x = self
      start = end
      end += 205
      (_x.vehicle_10.is_received, _x.vehicle_10.counter, _x.vehicle_10.timestamp, _x.vehicle_10.elapsed_time, _x.vehicle_50.is_received, _x.vehicle_50.counter, _x.vehicle_50.timestamp, _x.vehicle_50.elapsed_time, _x.svc.is_received, _x.svc.counter, _x.svc.timestamp, _x.svc.elapsed_time, _x.location.is_received, _x.location.counter, _x.location.timestamp, _x.location.elapsed_time, _x.state_machine.is_received, _x.state_machine.counter, _x.state_machine.timestamp, _x.state_machine.elapsed_time, _x.planning_result.is_received, _x.planning_result.counter, _x.planning_result.timestamp, _x.planning_result.elapsed_time, _x.psap_station.is_received, _x.psap_station.counter, _x.psap_station.timestamp, _x.psap_station.elapsed_time, _x.uss_state.sdw_status, _x.uss_state.apa_status, _x.uss_state.map_obj_statue, _x.uss_state.upa_sys_status, _x.uss_state.uss_mode, _x.svc_state.svc_det_status_type, _x.svc_state.svcsapa_detection_avl, _x.svc_state.svcpowerswap_detection_avl, _x.svc_state.svc_det_sub_status_type,) = _get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi().unpack(str[start:end])
      self.vehicle_10.is_received = bool(self.vehicle_10.is_received)
      self.vehicle_50.is_received = bool(self.vehicle_50.is_received)
      self.svc.is_received = bool(self.svc.is_received)
      self.location.is_received = bool(self.location.is_received)
      self.state_machine.is_received = bool(self.state_machine.is_received)
      self.planning_result.is_received = bool(self.planning_result.is_received)
      self.psap_station.is_received = bool(self.psap_station.is_received)
      self.svc_state.svcsapa_detection_avl = bool(self.svc_state.svcsapa_detection_avl)
      self.svc_state.svcpowerswap_detection_avl = bool(self.svc_state.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_state.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_state.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_state.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_state.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.svc_state.is_dlb_triggered, _x.svc_state.dlb_request.index, _x.svc_state.dlb_request.dlb_reason_type, _x.svc_state.dlb_request.dlb_reason_code, _x.svc_state.dlb_request.dlb_begin_timestamp_utc, _x.svc_state.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.svc_state.is_dlb_triggered = bool(self.svc_state.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.svc_state.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.svc_state.dlb_request.description = str[start:end]
      _x = self
      start = end
      end += 195
      (_x.location_info.loc_odom.timestamp, _x.location_info.loc_odom.location_valid, _x.location_info.loc_odom.position.x, _x.location_info.loc_odom.position.y, _x.location_info.loc_odom.position.z, _x.location_info.loc_odom.orientation.x, _x.location_info.loc_odom.orientation.y, _x.location_info.loc_odom.orientation.z, _x.location_info.loc_odom.orientation.w, _x.location_info.loc_odom.easting, _x.location_info.loc_odom.northing, _x.location_info.loc_odom.height, _x.location_info.loc_odom.speed, _x.location_info.loc_odom.sum_s, _x.location_info.loc_slot.timestamp, _x.location_info.loc_slot.location_valid, _x.location_info.loc_slot.position.x, _x.location_info.loc_slot.position.y, _x.location_info.loc_slot.position.z, _x.location_info.loc_slot.orientation.x, _x.location_info.loc_slot.orientation.y, _x.location_info.loc_slot.orientation.z, _x.location_info.loc_slot.orientation.w, _x.location_info.loc_slot.easting, _x.location_info.loc_slot.northing, _x.location_info.loc_slot.height, _x.location_info.loc_slot.speed, _x.location_info.loc_slot.sum_s, _x.location_info.loc_fused.timestamp, _x.location_info.loc_fused.location_valid, _x.location_info.loc_fused.position.x, _x.location_info.loc_fused.position.y, _x.location_info.loc_fused.position.z, _x.location_info.loc_fused.orientation.x, _x.location_info.loc_fused.orientation.y, _x.location_info.loc_fused.orientation.z, _x.location_info.loc_fused.orientation.w, _x.location_info.loc_fused.easting, _x.location_info.loc_fused.northing, _x.location_info.loc_fused.height, _x.location_info.loc_fused.speed, _x.location_info.loc_fused.sum_s, _x.location_info.wheel_odom_status, _x.location_info.imu_status, _x.location_info.svc_status, _x.location_info.lidar_status, _x.location_info.node_info.node_status, _x.location_info.node_info.feature_type,) = _get_struct_QB12fQB12fQB12f6i().unpack(str[start:end])
      self.location_info.loc_odom.location_valid = bool(self.location_info.loc_odom.location_valid)
      self.location_info.loc_slot.location_valid = bool(self.location_info.loc_slot.location_valid)
      self.location_info.loc_fused.location_valid = bool(self.location_info.loc_fused.location_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.location_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.location_info.node_info.counter, _x.location_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.location_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.location_info.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 20
      (_x.location_info.slot_status, _x.location_info.psap_station_info_status, _x.location_info.psap_station_entrance_type, _x.location_info.psap_result.timestamp,) = _get_struct_3iQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.location_info.psap_result.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v13 = val1.pt1
        _x = _v13
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v14 = val1.pt2
        _x = _v14
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v15 = val1.pt3
        _x = _v15
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.pt4
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.location_info.psap_result.objects.append(val1)
      _x = self
      start = end
      end += 85
      (_x.location_info.psap_result.veh_loc.x, _x.location_info.psap_result.veh_loc.y, _x.location_info.psap_result.veh_loc_z, _x.location_info.psap_result.veh_orientation.roll, _x.location_info.psap_result.veh_orientation.pitch, _x.location_info.psap_result.veh_orientation.yaw, _x.location_info.psap_result.veh_loc_valid, _x.location_info.psap_result.slot.pt1.x, _x.location_info.psap_result.slot.pt1.y, _x.location_info.psap_result.slot.pt2.x, _x.location_info.psap_result.slot.pt2.y, _x.location_info.psap_result.slot.pt3.x, _x.location_info.psap_result.slot.pt3.y, _x.location_info.psap_result.slot.pt4.x, _x.location_info.psap_result.slot.pt4.y, _x.location_info.psap_result.slot.veh_pos.x, _x.location_info.psap_result.slot.veh_pos.y, _x.location_info.psap_result.slot.veh_psi, _x.location_info.psap_result.slot.slot_status, _x.location_info.psap_result.coordinate_type, _x.location_info.publish_ptp_ts,) = _get_struct_6fB11f2iQ().unpack(str[start:end])
      self.location_info.psap_result.veh_loc_valid = bool(self.location_info.psap_result.veh_loc_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.location_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.location_info.counter, _x.location_info.publish_ts, _x.state_machine_info.node_info.node_status, _x.state_machine_info.node_info.feature_type,) = _get_struct_2Q2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_machine_info.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_machine_info.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.state_machine_info.node_info.counter, _x.state_machine_info.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_machine_info.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_machine_info.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state_machine_info.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 124
      (_x.state_machine_info.feature_status, _x.state_machine_info.target_slot.hmi_index, _x.state_machine_info.target_slot.svc_index, _x.state_machine_info.target_slot.uss_index, _x.state_machine_info.target_slot.pt1.x, _x.state_machine_info.target_slot.pt1.y, _x.state_machine_info.target_slot.pt1.z, _x.state_machine_info.target_slot.pt2.x, _x.state_machine_info.target_slot.pt2.y, _x.state_machine_info.target_slot.pt2.z, _x.state_machine_info.target_slot.pt3.x, _x.state_machine_info.target_slot.pt3.y, _x.state_machine_info.target_slot.pt3.z, _x.state_machine_info.target_slot.pt4.x, _x.state_machine_info.target_slot.pt4.y, _x.state_machine_info.target_slot.pt4.z, _x.state_machine_info.target_slot.type, _x.state_machine_info.target_slot.source, _x.state_machine_info.target_slot.size_x, _x.state_machine_info.target_slot.size_y, _x.state_machine_info.target_slot.VehPos.x, _x.state_machine_info.target_slot.VehPos.y, _x.state_machine_info.target_slot.VehPos.z, _x.state_machine_info.target_slot.VehPsi, _x.state_machine_info.target_slot.status, _x.state_machine_info.target_slot.fov, _x.state_machine_info.target_slot.planning_result, _x.state_machine_info.target_slot.slot_angle, _x.state_machine_info.operation_mode, _x.state_machine_info.publish_ptp_ts,) = _get_struct_4i12f2i6f3ifiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state_machine_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state_machine_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.state_machine_info.counter, _x.state_machine_info.publish_ts, _x.planning_slot_size,) = _get_struct_2QI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.psap_station_info.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.psap_station_info.station_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.psap_station_info.station_gen, _x.psap_station_info.station_type, _x.psap_station_info.station_entrance_type, _x.psap_station_info.slope_length, _x.psap_station_info.station_available,) = _get_struct_3ifB().unpack(str[start:end])
      self.psap_station_info.station_available = bool(self.psap_station_info.station_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.psap_station_info.offline_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.psap_station_info.offline_reason = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.psap_station_info.station_platform_height, _x.psap_station_info.station_tagb_to_slot_dst_x, _x.psap_station_info.station_ref_offset, _x.psap_station_info.station_reserved, _x.psap_station_info.station_tagc_to_slot_dst_x, _x.psap_station_info.timestamp_ptp_ns, _x.psap_station_info.publish_ptp_ts,) = _get_struct_5f2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.psap_station_info.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.psap_station_info.publisher_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.psap_station_info.counter, _x.psap_station_info.publish_ts, _x.reserved_0, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.reserved_8, _x.reserved_9,) = _get_struct_6Q4f2B().unpack(str[start:end])
      self.reserved_8 = bool(self.reserved_8)
      self.reserved_9 = bool(self.reserved_9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reserved_10 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reserved_10 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2Q2i = None
def _get_struct_2Q2i():
    global _struct_2Q2i
    if _struct_2Q2i is None:
        _struct_2Q2i = struct.Struct("<2Q2i")
    return _struct_2Q2i
_struct_2QI = None
def _get_struct_2QI():
    global _struct_2QI
    if _struct_2QI is None:
        _struct_2QI = struct.Struct("<2QI")
    return _struct_2QI
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i2Qi = None
def _get_struct_2i2Qi():
    global _struct_2i2Qi
    if _struct_2i2Qi is None:
        _struct_2i2Qi = struct.Struct("<2i2Qi")
    return _struct_2i2Qi
_struct_3iQ = None
def _get_struct_3iQ():
    global _struct_3iQ
    if _struct_3iQ is None:
        _struct_3iQ = struct.Struct("<3iQ")
    return _struct_3iQ
_struct_3ifB = None
def _get_struct_3ifB():
    global _struct_3ifB
    if _struct_3ifB is None:
        _struct_3ifB = struct.Struct("<3ifB")
    return _struct_3ifB
_struct_4i12f2i6f3ifiQ = None
def _get_struct_4i12f2i6f3ifiQ():
    global _struct_4i12f2i6f3ifiQ
    if _struct_4i12f2i6f3ifiQ is None:
        _struct_4i12f2i6f3ifiQ = struct.Struct("<4i12f2i6f3ifiQ")
    return _struct_4i12f2i6f3ifiQ
_struct_5f2Q = None
def _get_struct_5f2Q():
    global _struct_5f2Q
    if _struct_5f2Q is None:
        _struct_5f2Q = struct.Struct("<5f2Q")
    return _struct_5f2Q
_struct_6Q4f2B = None
def _get_struct_6Q4f2B():
    global _struct_6Q4f2B
    if _struct_6Q4f2B is None:
        _struct_6Q4f2B = struct.Struct("<6Q4f2B")
    return _struct_6Q4f2B
_struct_6fB11f2iQ = None
def _get_struct_6fB11f2iQ():
    global _struct_6fB11f2iQ
    if _struct_6fB11f2iQ is None:
        _struct_6fB11f2iQ = struct.Struct("<6fB11f2iQ")
    return _struct_6fB11f2iQ
_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi = None
def _get_struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi():
    global _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi
    if _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi is None:
        _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi = struct.Struct("<B3QB3QB3QB3QB3QB3QB3Q6i2Bi")
    return _struct_B3QB3QB3QB3QB3QB3QB3Q6i2Bi
_struct_B3i2Q = None
def _get_struct_B3i2Q():
    global _struct_B3i2Q
    if _struct_B3i2Q is None:
        _struct_B3i2Q = struct.Struct("<B3i2Q")
    return _struct_B3i2Q
_struct_QB12fQB12fQB12f6i = None
def _get_struct_QB12fQB12fQB12f6i():
    global _struct_QB12fQB12fQB12f6i
    if _struct_QB12fQB12fQB12f6i is None:
        _struct_QB12fQB12fQB12f6i = struct.Struct("<QB12fQB12fQB12f6i")
    return _struct_QB12fQB12fQB12f6i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

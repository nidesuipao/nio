# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/UPAInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class UPAInfo(genpy.Message):
  _md5sum = "28fee96a6de90fbd31ef53807887327d"
  _type = "rospy_message_converter/UPAInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 SDWSts
int32 APASts
int32 MapObjSts
bool UpaSysDi
int32 UpaSysSts
bool UpaSysSrv
USSlotInfo[] USSlot
MapObjBaseType[] MapObj
ApaSdwType[] ApaSdw
UsRegnDstType[] UsRegnDst
int32 USSMode

================================================================================
MSG: rospy_message_converter/USSlotInfo
uint32 SlotSizeX
uint32 SlotSizeY
int32 SlotVehX
int32 SlotVehY
float32 SlotVehPsi
int32 SlotDepthRef
uint32 SlotIndex
int32 SlotType
int32 SlotSts
int32 SlotObj1Typ
int32 SlotObj1X
int32 SlotObj1Y
int32 SlotObj1Alpha
int32 SlotObj2Typ
int32 SlotObj2X
int32 SlotObj2Y
int32 SlotObj2Alpha

================================================================================
MSG: rospy_message_converter/MapObjBaseType
int32 MapObjTyp
float32 MapObjP1X
float32 MapObjP1Y
float32 MapObjP2X
float32 MapObjP2Y
float32 MapObjProblty
int32 MapObjHeiWarn
float32 MapObjHeiProblty
int32 MapObjHeiBrake

================================================================================
MSG: rospy_message_converter/ApaSdwType
uint32[] Dst

================================================================================
MSG: rospy_message_converter/UsRegnDstType
int32 SnsrFltSt
uint32[] RegnDst
"""
  __slots__ = ['SDWSts','APASts','MapObjSts','UpaSysDi','UpaSysSts','UpaSysSrv','USSlot','MapObj','ApaSdw','UsRegnDst','USSMode']
  _slot_types = ['int32','int32','int32','bool','int32','bool','rospy_message_converter/USSlotInfo[]','rospy_message_converter/MapObjBaseType[]','rospy_message_converter/ApaSdwType[]','rospy_message_converter/UsRegnDstType[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SDWSts,APASts,MapObjSts,UpaSysDi,UpaSysSts,UpaSysSrv,USSlot,MapObj,ApaSdw,UsRegnDst,USSMode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UPAInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.SDWSts is None:
        self.SDWSts = 0
      if self.APASts is None:
        self.APASts = 0
      if self.MapObjSts is None:
        self.MapObjSts = 0
      if self.UpaSysDi is None:
        self.UpaSysDi = False
      if self.UpaSysSts is None:
        self.UpaSysSts = 0
      if self.UpaSysSrv is None:
        self.UpaSysSrv = False
      if self.USSlot is None:
        self.USSlot = []
      if self.MapObj is None:
        self.MapObj = []
      if self.ApaSdw is None:
        self.ApaSdw = []
      if self.UsRegnDst is None:
        self.UsRegnDst = []
      if self.USSMode is None:
        self.USSMode = 0
    else:
      self.SDWSts = 0
      self.APASts = 0
      self.MapObjSts = 0
      self.UpaSysDi = False
      self.UpaSysSts = 0
      self.UpaSysSrv = False
      self.USSlot = []
      self.MapObj = []
      self.ApaSdw = []
      self.UsRegnDst = []
      self.USSMode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3iBiB().pack(_x.SDWSts, _x.APASts, _x.MapObjSts, _x.UpaSysDi, _x.UpaSysSts, _x.UpaSysSrv))
      length = len(self.USSlot)
      buff.write(_struct_I.pack(length))
      for val1 in self.USSlot:
        _x = val1
        buff.write(_get_struct_2I2ifiI10i().pack(_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha))
      length = len(self.MapObj)
      buff.write(_struct_I.pack(length))
      for val1 in self.MapObj:
        _x = val1
        buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
      length = len(self.ApaSdw)
      buff.write(_struct_I.pack(length))
      for val1 in self.ApaSdw:
        length = len(val1.Dst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.Dst))
      length = len(self.UsRegnDst)
      buff.write(_struct_I.pack(length))
      for val1 in self.UsRegnDst:
        _x = val1.SnsrFltSt
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.RegnDst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.RegnDst))
      _x = self.USSMode
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.USSlot is None:
        self.USSlot = None
      if self.MapObj is None:
        self.MapObj = None
      if self.ApaSdw is None:
        self.ApaSdw = None
      if self.UsRegnDst is None:
        self.UsRegnDst = None
      end = 0
      _x = self
      start = end
      end += 18
      (_x.SDWSts, _x.APASts, _x.MapObjSts, _x.UpaSysDi, _x.UpaSysSts, _x.UpaSysSrv,) = _get_struct_3iBiB().unpack(str[start:end])
      self.UpaSysDi = bool(self.UpaSysDi)
      self.UpaSysSrv = bool(self.UpaSysSrv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.USSlot = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.USSlotInfo()
        _x = val1
        start = end
        end += 68
        (_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha,) = _get_struct_2I2ifiI10i().unpack(str[start:end])
        self.USSlot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.MapObj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MapObjBaseType()
        _x = val1
        start = end
        end += 36
        (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
        self.MapObj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ApaSdw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ApaSdwType()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.Dst = s.unpack(str[start:end])
        self.ApaSdw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UsRegnDst = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.UsRegnDstType()
        start = end
        end += 4
        (val1.SnsrFltSt,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.RegnDst = s.unpack(str[start:end])
        self.UsRegnDst.append(val1)
      start = end
      end += 4
      (self.USSMode,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3iBiB().pack(_x.SDWSts, _x.APASts, _x.MapObjSts, _x.UpaSysDi, _x.UpaSysSts, _x.UpaSysSrv))
      length = len(self.USSlot)
      buff.write(_struct_I.pack(length))
      for val1 in self.USSlot:
        _x = val1
        buff.write(_get_struct_2I2ifiI10i().pack(_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha))
      length = len(self.MapObj)
      buff.write(_struct_I.pack(length))
      for val1 in self.MapObj:
        _x = val1
        buff.write(_get_struct_i5fifi().pack(_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake))
      length = len(self.ApaSdw)
      buff.write(_struct_I.pack(length))
      for val1 in self.ApaSdw:
        length = len(val1.Dst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.Dst.tostring())
      length = len(self.UsRegnDst)
      buff.write(_struct_I.pack(length))
      for val1 in self.UsRegnDst:
        _x = val1.SnsrFltSt
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.RegnDst)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.RegnDst.tostring())
      _x = self.USSMode
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.USSlot is None:
        self.USSlot = None
      if self.MapObj is None:
        self.MapObj = None
      if self.ApaSdw is None:
        self.ApaSdw = None
      if self.UsRegnDst is None:
        self.UsRegnDst = None
      end = 0
      _x = self
      start = end
      end += 18
      (_x.SDWSts, _x.APASts, _x.MapObjSts, _x.UpaSysDi, _x.UpaSysSts, _x.UpaSysSrv,) = _get_struct_3iBiB().unpack(str[start:end])
      self.UpaSysDi = bool(self.UpaSysDi)
      self.UpaSysSrv = bool(self.UpaSysSrv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.USSlot = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.USSlotInfo()
        _x = val1
        start = end
        end += 68
        (_x.SlotSizeX, _x.SlotSizeY, _x.SlotVehX, _x.SlotVehY, _x.SlotVehPsi, _x.SlotDepthRef, _x.SlotIndex, _x.SlotType, _x.SlotSts, _x.SlotObj1Typ, _x.SlotObj1X, _x.SlotObj1Y, _x.SlotObj1Alpha, _x.SlotObj2Typ, _x.SlotObj2X, _x.SlotObj2Y, _x.SlotObj2Alpha,) = _get_struct_2I2ifiI10i().unpack(str[start:end])
        self.USSlot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.MapObj = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MapObjBaseType()
        _x = val1
        start = end
        end += 36
        (_x.MapObjTyp, _x.MapObjP1X, _x.MapObjP1Y, _x.MapObjP2X, _x.MapObjP2Y, _x.MapObjProblty, _x.MapObjHeiWarn, _x.MapObjHeiProblty, _x.MapObjHeiBrake,) = _get_struct_i5fifi().unpack(str[start:end])
        self.MapObj.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ApaSdw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ApaSdwType()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.Dst = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.ApaSdw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.UsRegnDst = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.UsRegnDstType()
        start = end
        end += 4
        (val1.SnsrFltSt,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.RegnDst = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.UsRegnDst.append(val1)
      start = end
      end += 4
      (self.USSMode,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2ifiI10i = None
def _get_struct_2I2ifiI10i():
    global _struct_2I2ifiI10i
    if _struct_2I2ifiI10i is None:
        _struct_2I2ifiI10i = struct.Struct("<2I2ifiI10i")
    return _struct_2I2ifiI10i
_struct_3iBiB = None
def _get_struct_3iBiB():
    global _struct_3iBiB
    if _struct_3iBiB is None:
        _struct_3iBiB = struct.Struct("<3iBiB")
    return _struct_3iBiB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i5fifi = None
def _get_struct_i5fifi():
    global _struct_i5fifi
    if _struct_i5fifi is None:
        _struct_i5fifi = struct.Struct("<i5fifi")
    return _struct_i5fifi

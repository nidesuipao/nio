# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FyBsdTrackedObj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FyBsdTrackedObj(genpy.Message):
  _md5sum = "f98f55f7a8f7fc769d632536504bf4dc"
  _type = "rospy_message_converter/FyBsdTrackedObj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
uint32 age
float32 longDist
float32 latDist
float32 longVel
float32 latVel
float32 longAccel
float32 latAccel
float32 heading
float32 curvature
float32 existConfidence
float32 length
float32 width
int32 motionStatus
uint32 detectionSensor
int32 type
uint32 refPoint
uint32 trackerStatus
uint32 visionDetectionSensor
float32 longDist_sl
float32 latDist_sl
float32 longVel_sl
float32 latVel_sl
float32 longAccel_sl
float32 latAccel_sl
bool is_valid_by_spd
bool is_in_range_long
bool is_any_pt_in_rect_right
bool is_any_pt_in_rect_left
bool is_frntmid_pt_in_range_right
bool is_frntmid_pt_in_range_left
bool is_in_region_right
bool is_in_region_left
bool is_valid_threat_right
bool is_valid_threat_left
bool is_tracked
float32 ta_info_left
float32 ta_info_right
bool is_updated
uint32 threat_time_left
uint32 threat_time_right
uint32 life_time
uint32[] reserved
"""
  __slots__ = ['id','age','longDist','latDist','longVel','latVel','longAccel','latAccel','heading','curvature','existConfidence','length','width','motionStatus','detectionSensor','type','refPoint','trackerStatus','visionDetectionSensor','longDist_sl','latDist_sl','longVel_sl','latVel_sl','longAccel_sl','latAccel_sl','is_valid_by_spd','is_in_range_long','is_any_pt_in_rect_right','is_any_pt_in_rect_left','is_frntmid_pt_in_range_right','is_frntmid_pt_in_range_left','is_in_region_right','is_in_region_left','is_valid_threat_right','is_valid_threat_left','is_tracked','ta_info_left','ta_info_right','is_updated','threat_time_left','threat_time_right','life_time','reserved']
  _slot_types = ['uint32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','uint32','int32','uint32','uint32','uint32','float32','float32','float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','bool','uint32','uint32','uint32','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,longDist,latDist,longVel,latVel,longAccel,latAccel,heading,curvature,existConfidence,length,width,motionStatus,detectionSensor,type,refPoint,trackerStatus,visionDetectionSensor,longDist_sl,latDist_sl,longVel_sl,latVel_sl,longAccel_sl,latAccel_sl,is_valid_by_spd,is_in_range_long,is_any_pt_in_rect_right,is_any_pt_in_rect_left,is_frntmid_pt_in_range_right,is_frntmid_pt_in_range_left,is_in_region_right,is_in_region_left,is_valid_threat_right,is_valid_threat_left,is_tracked,ta_info_left,ta_info_right,is_updated,threat_time_left,threat_time_right,life_time,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FyBsdTrackedObj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0
      if self.longDist is None:
        self.longDist = 0.
      if self.latDist is None:
        self.latDist = 0.
      if self.longVel is None:
        self.longVel = 0.
      if self.latVel is None:
        self.latVel = 0.
      if self.longAccel is None:
        self.longAccel = 0.
      if self.latAccel is None:
        self.latAccel = 0.
      if self.heading is None:
        self.heading = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.existConfidence is None:
        self.existConfidence = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.motionStatus is None:
        self.motionStatus = 0
      if self.detectionSensor is None:
        self.detectionSensor = 0
      if self.type is None:
        self.type = 0
      if self.refPoint is None:
        self.refPoint = 0
      if self.trackerStatus is None:
        self.trackerStatus = 0
      if self.visionDetectionSensor is None:
        self.visionDetectionSensor = 0
      if self.longDist_sl is None:
        self.longDist_sl = 0.
      if self.latDist_sl is None:
        self.latDist_sl = 0.
      if self.longVel_sl is None:
        self.longVel_sl = 0.
      if self.latVel_sl is None:
        self.latVel_sl = 0.
      if self.longAccel_sl is None:
        self.longAccel_sl = 0.
      if self.latAccel_sl is None:
        self.latAccel_sl = 0.
      if self.is_valid_by_spd is None:
        self.is_valid_by_spd = False
      if self.is_in_range_long is None:
        self.is_in_range_long = False
      if self.is_any_pt_in_rect_right is None:
        self.is_any_pt_in_rect_right = False
      if self.is_any_pt_in_rect_left is None:
        self.is_any_pt_in_rect_left = False
      if self.is_frntmid_pt_in_range_right is None:
        self.is_frntmid_pt_in_range_right = False
      if self.is_frntmid_pt_in_range_left is None:
        self.is_frntmid_pt_in_range_left = False
      if self.is_in_region_right is None:
        self.is_in_region_right = False
      if self.is_in_region_left is None:
        self.is_in_region_left = False
      if self.is_valid_threat_right is None:
        self.is_valid_threat_right = False
      if self.is_valid_threat_left is None:
        self.is_valid_threat_left = False
      if self.is_tracked is None:
        self.is_tracked = False
      if self.ta_info_left is None:
        self.ta_info_left = 0.
      if self.ta_info_right is None:
        self.ta_info_right = 0.
      if self.is_updated is None:
        self.is_updated = False
      if self.threat_time_left is None:
        self.threat_time_left = 0
      if self.threat_time_right is None:
        self.threat_time_right = 0
      if self.life_time is None:
        self.life_time = 0
      if self.reserved is None:
        self.reserved = []
    else:
      self.id = 0
      self.age = 0
      self.longDist = 0.
      self.latDist = 0.
      self.longVel = 0.
      self.latVel = 0.
      self.longAccel = 0.
      self.latAccel = 0.
      self.heading = 0.
      self.curvature = 0.
      self.existConfidence = 0.
      self.length = 0.
      self.width = 0.
      self.motionStatus = 0
      self.detectionSensor = 0
      self.type = 0
      self.refPoint = 0
      self.trackerStatus = 0
      self.visionDetectionSensor = 0
      self.longDist_sl = 0.
      self.latDist_sl = 0.
      self.longVel_sl = 0.
      self.latVel_sl = 0.
      self.longAccel_sl = 0.
      self.latAccel_sl = 0.
      self.is_valid_by_spd = False
      self.is_in_range_long = False
      self.is_any_pt_in_rect_right = False
      self.is_any_pt_in_rect_left = False
      self.is_frntmid_pt_in_range_right = False
      self.is_frntmid_pt_in_range_left = False
      self.is_in_region_right = False
      self.is_in_region_left = False
      self.is_valid_threat_right = False
      self.is_valid_threat_left = False
      self.is_tracked = False
      self.ta_info_left = 0.
      self.ta_info_right = 0.
      self.is_updated = False
      self.threat_time_left = 0
      self.threat_time_right = 0
      self.life_time = 0
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I11fiIi3I6f11B2fB3I().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time,) = _get_struct_2I11fiIi3I6f11B2fB3I().unpack(str[start:end])
      self.is_valid_by_spd = bool(self.is_valid_by_spd)
      self.is_in_range_long = bool(self.is_in_range_long)
      self.is_any_pt_in_rect_right = bool(self.is_any_pt_in_rect_right)
      self.is_any_pt_in_rect_left = bool(self.is_any_pt_in_rect_left)
      self.is_frntmid_pt_in_range_right = bool(self.is_frntmid_pt_in_range_right)
      self.is_frntmid_pt_in_range_left = bool(self.is_frntmid_pt_in_range_left)
      self.is_in_region_right = bool(self.is_in_region_right)
      self.is_in_region_left = bool(self.is_in_region_left)
      self.is_valid_threat_right = bool(self.is_valid_threat_right)
      self.is_valid_threat_left = bool(self.is_valid_threat_left)
      self.is_tracked = bool(self.is_tracked)
      self.is_updated = bool(self.is_updated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I11fiIi3I6f11B2fB3I().pack(_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.id, _x.age, _x.longDist, _x.latDist, _x.longVel, _x.latVel, _x.longAccel, _x.latAccel, _x.heading, _x.curvature, _x.existConfidence, _x.length, _x.width, _x.motionStatus, _x.detectionSensor, _x.type, _x.refPoint, _x.trackerStatus, _x.visionDetectionSensor, _x.longDist_sl, _x.latDist_sl, _x.longVel_sl, _x.latVel_sl, _x.longAccel_sl, _x.latAccel_sl, _x.is_valid_by_spd, _x.is_in_range_long, _x.is_any_pt_in_rect_right, _x.is_any_pt_in_rect_left, _x.is_frntmid_pt_in_range_right, _x.is_frntmid_pt_in_range_left, _x.is_in_region_right, _x.is_in_region_left, _x.is_valid_threat_right, _x.is_valid_threat_left, _x.is_tracked, _x.ta_info_left, _x.ta_info_right, _x.is_updated, _x.threat_time_left, _x.threat_time_right, _x.life_time,) = _get_struct_2I11fiIi3I6f11B2fB3I().unpack(str[start:end])
      self.is_valid_by_spd = bool(self.is_valid_by_spd)
      self.is_in_range_long = bool(self.is_in_range_long)
      self.is_any_pt_in_rect_right = bool(self.is_any_pt_in_rect_right)
      self.is_any_pt_in_rect_left = bool(self.is_any_pt_in_rect_left)
      self.is_frntmid_pt_in_range_right = bool(self.is_frntmid_pt_in_range_right)
      self.is_frntmid_pt_in_range_left = bool(self.is_frntmid_pt_in_range_left)
      self.is_in_region_right = bool(self.is_in_region_right)
      self.is_in_region_left = bool(self.is_in_region_left)
      self.is_valid_threat_right = bool(self.is_valid_threat_right)
      self.is_valid_threat_left = bool(self.is_valid_threat_left)
      self.is_tracked = bool(self.is_tracked)
      self.is_updated = bool(self.is_updated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I11fiIi3I6f11B2fB3I = None
def _get_struct_2I11fiIi3I6f11B2fB3I():
    global _struct_2I11fiIi3I6f11B2fB3I
    if _struct_2I11fiIi3I6f11B2fB3I is None:
        _struct_2I11fiIi3I6f11B2fB3I = struct.Struct("<2I11fiIi3I6f11B2fB3I")
    return _struct_2I11fiIi3I6f11B2fB3I

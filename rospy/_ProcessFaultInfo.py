# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ProcessFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ProcessFaultInfo(genpy.Message):
  _md5sum = "aebcac2f0e37a80ca76fa2bce65a0a11"
  _type = "rospy_message_converter/ProcessFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool CAN_RX_Exited_Abnormal
bool CAN_TX_Exited_Abnormal
bool Radar_APP_Exited_Abnormal
bool Camera_SAL_Exited_Abnormal
bool Position_APP_Exited_Abnormal
bool AA_APP_Exited_Abnormal
bool EHY_APP_Exited_Abnormal
bool FCT_APP_Exited_Abnormal
bool FCTs_APP_Exited_Abnormal
bool FAM_Extied_Abnoraml
bool CDM_APP_Exited_Abnormal
bool DLB_APP_Exited_Abnormal
bool Desensitization_APP_Exited_Abnoraml
bool Launcher_Exited_Abnormal
bool Rel_Loc_APP_Exited_Abnoraml
bool NOPDelta_Planner_Exited_Abnoraml
bool NOPDelta_Control_Exited_Abnoraml
bool NOPDelta_Canbus_Exited_Abnoraml
bool NOPDelta_WM_Exited_Abnoraml
"""
  __slots__ = ['CAN_RX_Exited_Abnormal','CAN_TX_Exited_Abnormal','Radar_APP_Exited_Abnormal','Camera_SAL_Exited_Abnormal','Position_APP_Exited_Abnormal','AA_APP_Exited_Abnormal','EHY_APP_Exited_Abnormal','FCT_APP_Exited_Abnormal','FCTs_APP_Exited_Abnormal','FAM_Extied_Abnoraml','CDM_APP_Exited_Abnormal','DLB_APP_Exited_Abnormal','Desensitization_APP_Exited_Abnoraml','Launcher_Exited_Abnormal','Rel_Loc_APP_Exited_Abnoraml','NOPDelta_Planner_Exited_Abnoraml','NOPDelta_Control_Exited_Abnoraml','NOPDelta_Canbus_Exited_Abnoraml','NOPDelta_WM_Exited_Abnoraml']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CAN_RX_Exited_Abnormal,CAN_TX_Exited_Abnormal,Radar_APP_Exited_Abnormal,Camera_SAL_Exited_Abnormal,Position_APP_Exited_Abnormal,AA_APP_Exited_Abnormal,EHY_APP_Exited_Abnormal,FCT_APP_Exited_Abnormal,FCTs_APP_Exited_Abnormal,FAM_Extied_Abnoraml,CDM_APP_Exited_Abnormal,DLB_APP_Exited_Abnormal,Desensitization_APP_Exited_Abnoraml,Launcher_Exited_Abnormal,Rel_Loc_APP_Exited_Abnoraml,NOPDelta_Planner_Exited_Abnoraml,NOPDelta_Control_Exited_Abnoraml,NOPDelta_Canbus_Exited_Abnoraml,NOPDelta_WM_Exited_Abnoraml

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProcessFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.CAN_RX_Exited_Abnormal is None:
        self.CAN_RX_Exited_Abnormal = False
      if self.CAN_TX_Exited_Abnormal is None:
        self.CAN_TX_Exited_Abnormal = False
      if self.Radar_APP_Exited_Abnormal is None:
        self.Radar_APP_Exited_Abnormal = False
      if self.Camera_SAL_Exited_Abnormal is None:
        self.Camera_SAL_Exited_Abnormal = False
      if self.Position_APP_Exited_Abnormal is None:
        self.Position_APP_Exited_Abnormal = False
      if self.AA_APP_Exited_Abnormal is None:
        self.AA_APP_Exited_Abnormal = False
      if self.EHY_APP_Exited_Abnormal is None:
        self.EHY_APP_Exited_Abnormal = False
      if self.FCT_APP_Exited_Abnormal is None:
        self.FCT_APP_Exited_Abnormal = False
      if self.FCTs_APP_Exited_Abnormal is None:
        self.FCTs_APP_Exited_Abnormal = False
      if self.FAM_Extied_Abnoraml is None:
        self.FAM_Extied_Abnoraml = False
      if self.CDM_APP_Exited_Abnormal is None:
        self.CDM_APP_Exited_Abnormal = False
      if self.DLB_APP_Exited_Abnormal is None:
        self.DLB_APP_Exited_Abnormal = False
      if self.Desensitization_APP_Exited_Abnoraml is None:
        self.Desensitization_APP_Exited_Abnoraml = False
      if self.Launcher_Exited_Abnormal is None:
        self.Launcher_Exited_Abnormal = False
      if self.Rel_Loc_APP_Exited_Abnoraml is None:
        self.Rel_Loc_APP_Exited_Abnoraml = False
      if self.NOPDelta_Planner_Exited_Abnoraml is None:
        self.NOPDelta_Planner_Exited_Abnoraml = False
      if self.NOPDelta_Control_Exited_Abnoraml is None:
        self.NOPDelta_Control_Exited_Abnoraml = False
      if self.NOPDelta_Canbus_Exited_Abnoraml is None:
        self.NOPDelta_Canbus_Exited_Abnoraml = False
      if self.NOPDelta_WM_Exited_Abnoraml is None:
        self.NOPDelta_WM_Exited_Abnoraml = False
    else:
      self.CAN_RX_Exited_Abnormal = False
      self.CAN_TX_Exited_Abnormal = False
      self.Radar_APP_Exited_Abnormal = False
      self.Camera_SAL_Exited_Abnormal = False
      self.Position_APP_Exited_Abnormal = False
      self.AA_APP_Exited_Abnormal = False
      self.EHY_APP_Exited_Abnormal = False
      self.FCT_APP_Exited_Abnormal = False
      self.FCTs_APP_Exited_Abnormal = False
      self.FAM_Extied_Abnoraml = False
      self.CDM_APP_Exited_Abnormal = False
      self.DLB_APP_Exited_Abnormal = False
      self.Desensitization_APP_Exited_Abnoraml = False
      self.Launcher_Exited_Abnormal = False
      self.Rel_Loc_APP_Exited_Abnoraml = False
      self.NOPDelta_Planner_Exited_Abnoraml = False
      self.NOPDelta_Control_Exited_Abnoraml = False
      self.NOPDelta_Canbus_Exited_Abnoraml = False
      self.NOPDelta_WM_Exited_Abnoraml = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_19B().pack(_x.CAN_RX_Exited_Abnormal, _x.CAN_TX_Exited_Abnormal, _x.Radar_APP_Exited_Abnormal, _x.Camera_SAL_Exited_Abnormal, _x.Position_APP_Exited_Abnormal, _x.AA_APP_Exited_Abnormal, _x.EHY_APP_Exited_Abnormal, _x.FCT_APP_Exited_Abnormal, _x.FCTs_APP_Exited_Abnormal, _x.FAM_Extied_Abnoraml, _x.CDM_APP_Exited_Abnormal, _x.DLB_APP_Exited_Abnormal, _x.Desensitization_APP_Exited_Abnoraml, _x.Launcher_Exited_Abnormal, _x.Rel_Loc_APP_Exited_Abnoraml, _x.NOPDelta_Planner_Exited_Abnoraml, _x.NOPDelta_Control_Exited_Abnoraml, _x.NOPDelta_Canbus_Exited_Abnoraml, _x.NOPDelta_WM_Exited_Abnoraml))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.CAN_RX_Exited_Abnormal, _x.CAN_TX_Exited_Abnormal, _x.Radar_APP_Exited_Abnormal, _x.Camera_SAL_Exited_Abnormal, _x.Position_APP_Exited_Abnormal, _x.AA_APP_Exited_Abnormal, _x.EHY_APP_Exited_Abnormal, _x.FCT_APP_Exited_Abnormal, _x.FCTs_APP_Exited_Abnormal, _x.FAM_Extied_Abnoraml, _x.CDM_APP_Exited_Abnormal, _x.DLB_APP_Exited_Abnormal, _x.Desensitization_APP_Exited_Abnoraml, _x.Launcher_Exited_Abnormal, _x.Rel_Loc_APP_Exited_Abnoraml, _x.NOPDelta_Planner_Exited_Abnoraml, _x.NOPDelta_Control_Exited_Abnoraml, _x.NOPDelta_Canbus_Exited_Abnoraml, _x.NOPDelta_WM_Exited_Abnoraml,) = _get_struct_19B().unpack(str[start:end])
      self.CAN_RX_Exited_Abnormal = bool(self.CAN_RX_Exited_Abnormal)
      self.CAN_TX_Exited_Abnormal = bool(self.CAN_TX_Exited_Abnormal)
      self.Radar_APP_Exited_Abnormal = bool(self.Radar_APP_Exited_Abnormal)
      self.Camera_SAL_Exited_Abnormal = bool(self.Camera_SAL_Exited_Abnormal)
      self.Position_APP_Exited_Abnormal = bool(self.Position_APP_Exited_Abnormal)
      self.AA_APP_Exited_Abnormal = bool(self.AA_APP_Exited_Abnormal)
      self.EHY_APP_Exited_Abnormal = bool(self.EHY_APP_Exited_Abnormal)
      self.FCT_APP_Exited_Abnormal = bool(self.FCT_APP_Exited_Abnormal)
      self.FCTs_APP_Exited_Abnormal = bool(self.FCTs_APP_Exited_Abnormal)
      self.FAM_Extied_Abnoraml = bool(self.FAM_Extied_Abnoraml)
      self.CDM_APP_Exited_Abnormal = bool(self.CDM_APP_Exited_Abnormal)
      self.DLB_APP_Exited_Abnormal = bool(self.DLB_APP_Exited_Abnormal)
      self.Desensitization_APP_Exited_Abnoraml = bool(self.Desensitization_APP_Exited_Abnoraml)
      self.Launcher_Exited_Abnormal = bool(self.Launcher_Exited_Abnormal)
      self.Rel_Loc_APP_Exited_Abnoraml = bool(self.Rel_Loc_APP_Exited_Abnoraml)
      self.NOPDelta_Planner_Exited_Abnoraml = bool(self.NOPDelta_Planner_Exited_Abnoraml)
      self.NOPDelta_Control_Exited_Abnoraml = bool(self.NOPDelta_Control_Exited_Abnoraml)
      self.NOPDelta_Canbus_Exited_Abnoraml = bool(self.NOPDelta_Canbus_Exited_Abnoraml)
      self.NOPDelta_WM_Exited_Abnoraml = bool(self.NOPDelta_WM_Exited_Abnoraml)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_19B().pack(_x.CAN_RX_Exited_Abnormal, _x.CAN_TX_Exited_Abnormal, _x.Radar_APP_Exited_Abnormal, _x.Camera_SAL_Exited_Abnormal, _x.Position_APP_Exited_Abnormal, _x.AA_APP_Exited_Abnormal, _x.EHY_APP_Exited_Abnormal, _x.FCT_APP_Exited_Abnormal, _x.FCTs_APP_Exited_Abnormal, _x.FAM_Extied_Abnoraml, _x.CDM_APP_Exited_Abnormal, _x.DLB_APP_Exited_Abnormal, _x.Desensitization_APP_Exited_Abnoraml, _x.Launcher_Exited_Abnormal, _x.Rel_Loc_APP_Exited_Abnoraml, _x.NOPDelta_Planner_Exited_Abnoraml, _x.NOPDelta_Control_Exited_Abnoraml, _x.NOPDelta_Canbus_Exited_Abnoraml, _x.NOPDelta_WM_Exited_Abnoraml))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.CAN_RX_Exited_Abnormal, _x.CAN_TX_Exited_Abnormal, _x.Radar_APP_Exited_Abnormal, _x.Camera_SAL_Exited_Abnormal, _x.Position_APP_Exited_Abnormal, _x.AA_APP_Exited_Abnormal, _x.EHY_APP_Exited_Abnormal, _x.FCT_APP_Exited_Abnormal, _x.FCTs_APP_Exited_Abnormal, _x.FAM_Extied_Abnoraml, _x.CDM_APP_Exited_Abnormal, _x.DLB_APP_Exited_Abnormal, _x.Desensitization_APP_Exited_Abnoraml, _x.Launcher_Exited_Abnormal, _x.Rel_Loc_APP_Exited_Abnoraml, _x.NOPDelta_Planner_Exited_Abnoraml, _x.NOPDelta_Control_Exited_Abnoraml, _x.NOPDelta_Canbus_Exited_Abnoraml, _x.NOPDelta_WM_Exited_Abnoraml,) = _get_struct_19B().unpack(str[start:end])
      self.CAN_RX_Exited_Abnormal = bool(self.CAN_RX_Exited_Abnormal)
      self.CAN_TX_Exited_Abnormal = bool(self.CAN_TX_Exited_Abnormal)
      self.Radar_APP_Exited_Abnormal = bool(self.Radar_APP_Exited_Abnormal)
      self.Camera_SAL_Exited_Abnormal = bool(self.Camera_SAL_Exited_Abnormal)
      self.Position_APP_Exited_Abnormal = bool(self.Position_APP_Exited_Abnormal)
      self.AA_APP_Exited_Abnormal = bool(self.AA_APP_Exited_Abnormal)
      self.EHY_APP_Exited_Abnormal = bool(self.EHY_APP_Exited_Abnormal)
      self.FCT_APP_Exited_Abnormal = bool(self.FCT_APP_Exited_Abnormal)
      self.FCTs_APP_Exited_Abnormal = bool(self.FCTs_APP_Exited_Abnormal)
      self.FAM_Extied_Abnoraml = bool(self.FAM_Extied_Abnoraml)
      self.CDM_APP_Exited_Abnormal = bool(self.CDM_APP_Exited_Abnormal)
      self.DLB_APP_Exited_Abnormal = bool(self.DLB_APP_Exited_Abnormal)
      self.Desensitization_APP_Exited_Abnoraml = bool(self.Desensitization_APP_Exited_Abnoraml)
      self.Launcher_Exited_Abnormal = bool(self.Launcher_Exited_Abnormal)
      self.Rel_Loc_APP_Exited_Abnoraml = bool(self.Rel_Loc_APP_Exited_Abnoraml)
      self.NOPDelta_Planner_Exited_Abnoraml = bool(self.NOPDelta_Planner_Exited_Abnoraml)
      self.NOPDelta_Control_Exited_Abnoraml = bool(self.NOPDelta_Control_Exited_Abnoraml)
      self.NOPDelta_Canbus_Exited_Abnoraml = bool(self.NOPDelta_Canbus_Exited_Abnoraml)
      self.NOPDelta_WM_Exited_Abnoraml = bool(self.NOPDelta_WM_Exited_Abnoraml)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19B = None
def _get_struct_19B():
    global _struct_19B
    if _struct_19B is None:
        _struct_19B = struct.Struct("<19B")
    return _struct_19B

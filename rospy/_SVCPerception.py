# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SVCPerception.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SVCPerception(genpy.Message):
  _md5sum = "850192adcae34cd44bc053d72eb05338"
  _type = "rospy_message_converter/SVCPerception"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SlotResult slots
SVCObjResult objects
SVCFreeSpace freespace
PSAPResult psap_results
SVCDetectionStatus svc_det_status
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/SlotResult
uint64 timestamp
Slot[] slots
int32 pld_eserved1
int32 pld_Reserved2

================================================================================
MSG: rospy_message_converter/Slot
int32 slot_index
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
SVCPoint veh_pos
float32 veh_psi
float32 slot_prob
int32 slot_type
int32 slot_status
float32 slot_angel
int32 slot_priority
float32 slot_distance
float32 slot_line_width
int32 reserved1
int32 reserved2

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/SVCObjResult
uint64 timestamp
int32 obj_sensor_src
SVCObject[] objects
int32 od_reserved1
int32 od_reserved2

================================================================================
MSG: rospy_message_converter/SVCObject
int32 index
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
float32 exist_prob
float32 height
float32 height_prob
int32 obj_type
int32 obj_mov_state
int32 obj_dim
float32 obj_distance
float32 obj_rel_vel_x
float32 obj_rel_vel_y
int32 reserved1
int32 reserved2

================================================================================
MSG: rospy_message_converter/SVCFreeSpace
float32 grid_size
int32 gridshape_row
int32 gridshape_col
float32 grid_pos_x
float32 grid_pos_y
FSBoundary[] boundary_maps
int32[] origin_grid_map
uint64 timestamp
float32 confidence
int32 reserved1
int32 reserved2
FSPoint[] boundary_map_FL
FSPoint[] boundary_map_FR

================================================================================
MSG: rospy_message_converter/FSBoundary
FSPoint[] boundary_map
int32 boundary_num
int32 boundary_type

================================================================================
MSG: rospy_message_converter/FSPoint
float32 X
float32 y
int32 point_type
int32 ground_type

================================================================================
MSG: rospy_message_converter/PSAPResult
uint64 timestamp
PSAPObject[] objects
SVCPoint veh_loc
float32 veh_loc_z
SVCOrientation veh_orientation
bool veh_loc_valid
PSAPSlot slot
int32 coordinate_type

================================================================================
MSG: rospy_message_converter/PSAPObject
int32 obj_type
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
int32 marker_id

================================================================================
MSG: rospy_message_converter/SVCOrientation
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: rospy_message_converter/PSAPSlot
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
SVCPoint veh_pos
float32 veh_psi
int32 slot_status

================================================================================
MSG: rospy_message_converter/SVCDetectionStatus
int32 svc_det_status_type
bool svcsapa_detection_avl
bool svcpowerswap_detection_avl
int32 svc_det_sub_status_type
SVCAlarm[] svc_alarms
SVCFault[] svc_faults
bool is_dlb_triggered
SVCDLBRequest dlb_request

================================================================================
MSG: rospy_message_converter/SVCAlarm
int32 alarm_type
int32 alarm_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCFault
int32 fault_type
int32 fault_code
uint64 utc_timestamp
uint64 ptp_timestamp
int32 reserved

================================================================================
MSG: rospy_message_converter/SVCDLBRequest
int32 index
int32 dlb_reason_type
int32 dlb_reason_code
uint64 dlb_begin_timestamp_utc
uint64 dlb_end_timestamp_utc
string description
"""
  __slots__ = ['slots','objects','freespace','psap_results','svc_det_status','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/SlotResult','rospy_message_converter/SVCObjResult','rospy_message_converter/SVCFreeSpace','rospy_message_converter/PSAPResult','rospy_message_converter/SVCDetectionStatus','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       slots,objects,freespace,psap_results,svc_det_status,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SVCPerception, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.slots is None:
        self.slots = rospy_message_converter.msg.SlotResult()
      if self.objects is None:
        self.objects = rospy_message_converter.msg.SVCObjResult()
      if self.freespace is None:
        self.freespace = rospy_message_converter.msg.SVCFreeSpace()
      if self.psap_results is None:
        self.psap_results = rospy_message_converter.msg.PSAPResult()
      if self.svc_det_status is None:
        self.svc_det_status = rospy_message_converter.msg.SVCDetectionStatus()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.slots = rospy_message_converter.msg.SlotResult()
      self.objects = rospy_message_converter.msg.SVCObjResult()
      self.freespace = rospy_message_converter.msg.SVCFreeSpace()
      self.psap_results = rospy_message_converter.msg.PSAPResult()
      self.svc_det_status = rospy_message_converter.msg.SVCDetectionStatus()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.slots.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.slots.slots)
      buff.write(_struct_I.pack(length))
      for val1 in self.slots.slots:
        _x = val1.slot_index
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pt1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.pt2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.pt3
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.pt4
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v5 = val1.veh_pos
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2f2ifi2f2i().pack(_x.veh_psi, _x.slot_prob, _x.slot_type, _x.slot_status, _x.slot_angel, _x.slot_priority, _x.slot_distance, _x.slot_line_width, _x.reserved1, _x.reserved2))
      _x = self
      buff.write(_get_struct_2iQi().pack(_x.slots.pld_eserved1, _x.slots.pld_Reserved2, _x.objects.timestamp, _x.objects.obj_sensor_src))
      length = len(self.objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects.objects:
        _x = val1.index
        buff.write(_get_struct_i().pack(_x))
        _v6 = val1.pt1
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v7 = val1.pt2
        _x = _v7
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v8 = val1.pt3
        _x = _v8
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v9 = val1.pt4
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f3i3f2i().pack(_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2))
      _x = self
      buff.write(_get_struct_2if2i2f().pack(_x.objects.od_reserved1, _x.objects.od_reserved2, _x.freespace.grid_size, _x.freespace.gridshape_row, _x.freespace.gridshape_col, _x.freespace.grid_pos_x, _x.freespace.grid_pos_y))
      length = len(self.freespace.boundary_maps)
      buff.write(_struct_I.pack(length))
      for val1 in self.freespace.boundary_maps:
        length = len(val1.boundary_map)
        buff.write(_struct_I.pack(length))
        for val2 in val1.boundary_map:
          _x = val2
          buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.boundary_num, _x.boundary_type))
      length = len(self.freespace.origin_grid_map)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.freespace.origin_grid_map))
      _x = self
      buff.write(_get_struct_Qf2i().pack(_x.freespace.timestamp, _x.freespace.confidence, _x.freespace.reserved1, _x.freespace.reserved2))
      length = len(self.freespace.boundary_map_FL)
      buff.write(_struct_I.pack(length))
      for val1 in self.freespace.boundary_map_FL:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
      length = len(self.freespace.boundary_map_FR)
      buff.write(_struct_I.pack(length))
      for val1 in self.freespace.boundary_map_FR:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
      _x = self.psap_results.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.psap_results.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.psap_results.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v10 = val1.pt1
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = val1.pt2
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = val1.pt3
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v13 = val1.pt4
        _x = _v13
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f3i2Bi().pack(_x.psap_results.veh_loc.x, _x.psap_results.veh_loc.y, _x.psap_results.veh_loc_z, _x.psap_results.veh_orientation.roll, _x.psap_results.veh_orientation.pitch, _x.psap_results.veh_orientation.yaw, _x.psap_results.veh_loc_valid, _x.psap_results.slot.pt1.x, _x.psap_results.slot.pt1.y, _x.psap_results.slot.pt2.x, _x.psap_results.slot.pt2.y, _x.psap_results.slot.pt3.x, _x.psap_results.slot.pt3.y, _x.psap_results.slot.pt4.x, _x.psap_results.slot.pt4.y, _x.psap_results.slot.veh_pos.x, _x.psap_results.slot.veh_pos.y, _x.psap_results.slot.veh_psi, _x.psap_results.slot.slot_status, _x.psap_results.coordinate_type, _x.svc_det_status.svc_det_status_type, _x.svc_det_status.svcsapa_detection_avl, _x.svc_det_status.svcpowerswap_detection_avl, _x.svc_det_status.svc_det_sub_status_type))
      length = len(self.svc_det_status.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_det_status.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.svc_det_status.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_det_status.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.svc_det_status.is_dlb_triggered, _x.svc_det_status.dlb_request.index, _x.svc_det_status.dlb_request.dlb_reason_type, _x.svc_det_status.dlb_request.dlb_reason_code, _x.svc_det_status.dlb_request.dlb_begin_timestamp_utc, _x.svc_det_status.dlb_request.dlb_end_timestamp_utc))
      _x = self.svc_det_status.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slots is None:
        self.slots = rospy_message_converter.msg.SlotResult()
      if self.objects is None:
        self.objects = rospy_message_converter.msg.SVCObjResult()
      if self.freespace is None:
        self.freespace = rospy_message_converter.msg.SVCFreeSpace()
      if self.psap_results is None:
        self.psap_results = rospy_message_converter.msg.PSAPResult()
      if self.svc_det_status is None:
        self.svc_det_status = rospy_message_converter.msg.SVCDetectionStatus()
      end = 0
      start = end
      end += 8
      (self.slots.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slots.slots = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Slot()
        start = end
        end += 4
        (val1.slot_index,) = _get_struct_i().unpack(str[start:end])
        _v14 = val1.pt1
        _x = _v14
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v15 = val1.pt2
        _x = _v15
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.pt3
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v17 = val1.pt4
        _x = _v17
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v18 = val1.veh_pos
        _x = _v18
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.veh_psi, _x.slot_prob, _x.slot_type, _x.slot_status, _x.slot_angel, _x.slot_priority, _x.slot_distance, _x.slot_line_width, _x.reserved1, _x.reserved2,) = _get_struct_2f2ifi2f2i().unpack(str[start:end])
        self.slots.slots.append(val1)
      _x = self
      start = end
      end += 20
      (_x.slots.pld_eserved1, _x.slots.pld_Reserved2, _x.objects.timestamp, _x.objects.obj_sensor_src,) = _get_struct_2iQi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCObject()
        start = end
        end += 4
        (val1.index,) = _get_struct_i().unpack(str[start:end])
        _v19 = val1.pt1
        _x = _v19
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v20 = val1.pt2
        _x = _v20
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v21 = val1.pt3
        _x = _v21
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v22 = val1.pt4
        _x = _v22
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 44
        (_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2,) = _get_struct_3f3i3f2i().unpack(str[start:end])
        self.objects.objects.append(val1)
      _x = self
      start = end
      end += 28
      (_x.objects.od_reserved1, _x.objects.od_reserved2, _x.freespace.grid_size, _x.freespace.gridshape_row, _x.freespace.gridshape_col, _x.freespace.grid_pos_x, _x.freespace.grid_pos_y,) = _get_struct_2if2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.freespace.boundary_maps = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSBoundary()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.boundary_map = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.FSPoint()
          _x = val2
          start = end
          end += 16
          (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
          val1.boundary_map.append(val2)
        _x = val1
        start = end
        end += 8
        (_x.boundary_num, _x.boundary_type,) = _get_struct_2i().unpack(str[start:end])
        self.freespace.boundary_maps.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.freespace.origin_grid_map = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.freespace.timestamp, _x.freespace.confidence, _x.freespace.reserved1, _x.freespace.reserved2,) = _get_struct_Qf2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.freespace.boundary_map_FL = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.freespace.boundary_map_FL.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.freespace.boundary_map_FR = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.freespace.boundary_map_FR.append(val1)
      start = end
      end += 8
      (self.psap_results.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.psap_results.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v23 = val1.pt1
        _x = _v23
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v24 = val1.pt2
        _x = _v24
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v25 = val1.pt3
        _x = _v25
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v26 = val1.pt4
        _x = _v26
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.psap_results.objects.append(val1)
      _x = self
      start = end
      end += 87
      (_x.psap_results.veh_loc.x, _x.psap_results.veh_loc.y, _x.psap_results.veh_loc_z, _x.psap_results.veh_orientation.roll, _x.psap_results.veh_orientation.pitch, _x.psap_results.veh_orientation.yaw, _x.psap_results.veh_loc_valid, _x.psap_results.slot.pt1.x, _x.psap_results.slot.pt1.y, _x.psap_results.slot.pt2.x, _x.psap_results.slot.pt2.y, _x.psap_results.slot.pt3.x, _x.psap_results.slot.pt3.y, _x.psap_results.slot.pt4.x, _x.psap_results.slot.pt4.y, _x.psap_results.slot.veh_pos.x, _x.psap_results.slot.veh_pos.y, _x.psap_results.slot.veh_psi, _x.psap_results.slot.slot_status, _x.psap_results.coordinate_type, _x.svc_det_status.svc_det_status_type, _x.svc_det_status.svcsapa_detection_avl, _x.svc_det_status.svcpowerswap_detection_avl, _x.svc_det_status.svc_det_sub_status_type,) = _get_struct_6fB11f3i2Bi().unpack(str[start:end])
      self.psap_results.veh_loc_valid = bool(self.psap_results.veh_loc_valid)
      self.svc_det_status.svcsapa_detection_avl = bool(self.svc_det_status.svcsapa_detection_avl)
      self.svc_det_status.svcpowerswap_detection_avl = bool(self.svc_det_status.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_det_status.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_det_status.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_det_status.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_det_status.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.svc_det_status.is_dlb_triggered, _x.svc_det_status.dlb_request.index, _x.svc_det_status.dlb_request.dlb_reason_type, _x.svc_det_status.dlb_request.dlb_reason_code, _x.svc_det_status.dlb_request.dlb_begin_timestamp_utc, _x.svc_det_status.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.svc_det_status.is_dlb_triggered = bool(self.svc_det_status.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.svc_det_status.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.svc_det_status.dlb_request.description = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.slots.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.slots.slots)
      buff.write(_struct_I.pack(length))
      for val1 in self.slots.slots:
        _x = val1.slot_index
        buff.write(_get_struct_i().pack(_x))
        _v27 = val1.pt1
        _x = _v27
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v28 = val1.pt2
        _x = _v28
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v29 = val1.pt3
        _x = _v29
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v30 = val1.pt4
        _x = _v30
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v31 = val1.veh_pos
        _x = _v31
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2f2ifi2f2i().pack(_x.veh_psi, _x.slot_prob, _x.slot_type, _x.slot_status, _x.slot_angel, _x.slot_priority, _x.slot_distance, _x.slot_line_width, _x.reserved1, _x.reserved2))
      _x = self
      buff.write(_get_struct_2iQi().pack(_x.slots.pld_eserved1, _x.slots.pld_Reserved2, _x.objects.timestamp, _x.objects.obj_sensor_src))
      length = len(self.objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects.objects:
        _x = val1.index
        buff.write(_get_struct_i().pack(_x))
        _v32 = val1.pt1
        _x = _v32
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v33 = val1.pt2
        _x = _v33
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v34 = val1.pt3
        _x = _v34
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v35 = val1.pt4
        _x = _v35
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_3f3i3f2i().pack(_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2))
      _x = self
      buff.write(_get_struct_2if2i2f().pack(_x.objects.od_reserved1, _x.objects.od_reserved2, _x.freespace.grid_size, _x.freespace.gridshape_row, _x.freespace.gridshape_col, _x.freespace.grid_pos_x, _x.freespace.grid_pos_y))
      length = len(self.freespace.boundary_maps)
      buff.write(_struct_I.pack(length))
      for val1 in self.freespace.boundary_maps:
        length = len(val1.boundary_map)
        buff.write(_struct_I.pack(length))
        for val2 in val1.boundary_map:
          _x = val2
          buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.boundary_num, _x.boundary_type))
      length = len(self.freespace.origin_grid_map)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.freespace.origin_grid_map.tostring())
      _x = self
      buff.write(_get_struct_Qf2i().pack(_x.freespace.timestamp, _x.freespace.confidence, _x.freespace.reserved1, _x.freespace.reserved2))
      length = len(self.freespace.boundary_map_FL)
      buff.write(_struct_I.pack(length))
      for val1 in self.freespace.boundary_map_FL:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
      length = len(self.freespace.boundary_map_FR)
      buff.write(_struct_I.pack(length))
      for val1 in self.freespace.boundary_map_FR:
        _x = val1
        buff.write(_get_struct_2f2i().pack(_x.X, _x.y, _x.point_type, _x.ground_type))
      _x = self.psap_results.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.psap_results.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.psap_results.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v36 = val1.pt1
        _x = _v36
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v37 = val1.pt2
        _x = _v37
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v38 = val1.pt3
        _x = _v38
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v39 = val1.pt4
        _x = _v39
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f3i2Bi().pack(_x.psap_results.veh_loc.x, _x.psap_results.veh_loc.y, _x.psap_results.veh_loc_z, _x.psap_results.veh_orientation.roll, _x.psap_results.veh_orientation.pitch, _x.psap_results.veh_orientation.yaw, _x.psap_results.veh_loc_valid, _x.psap_results.slot.pt1.x, _x.psap_results.slot.pt1.y, _x.psap_results.slot.pt2.x, _x.psap_results.slot.pt2.y, _x.psap_results.slot.pt3.x, _x.psap_results.slot.pt3.y, _x.psap_results.slot.pt4.x, _x.psap_results.slot.pt4.y, _x.psap_results.slot.veh_pos.x, _x.psap_results.slot.veh_pos.y, _x.psap_results.slot.veh_psi, _x.psap_results.slot.slot_status, _x.psap_results.coordinate_type, _x.svc_det_status.svc_det_status_type, _x.svc_det_status.svcsapa_detection_avl, _x.svc_det_status.svcpowerswap_detection_avl, _x.svc_det_status.svc_det_sub_status_type))
      length = len(self.svc_det_status.svc_alarms)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_det_status.svc_alarms:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      length = len(self.svc_det_status.svc_faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.svc_det_status.svc_faults:
        _x = val1
        buff.write(_get_struct_2i2Qi().pack(_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved))
      _x = self
      buff.write(_get_struct_B3i2Q().pack(_x.svc_det_status.is_dlb_triggered, _x.svc_det_status.dlb_request.index, _x.svc_det_status.dlb_request.dlb_reason_type, _x.svc_det_status.dlb_request.dlb_reason_code, _x.svc_det_status.dlb_request.dlb_begin_timestamp_utc, _x.svc_det_status.dlb_request.dlb_end_timestamp_utc))
      _x = self.svc_det_status.dlb_request.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.slots is None:
        self.slots = rospy_message_converter.msg.SlotResult()
      if self.objects is None:
        self.objects = rospy_message_converter.msg.SVCObjResult()
      if self.freespace is None:
        self.freespace = rospy_message_converter.msg.SVCFreeSpace()
      if self.psap_results is None:
        self.psap_results = rospy_message_converter.msg.PSAPResult()
      if self.svc_det_status is None:
        self.svc_det_status = rospy_message_converter.msg.SVCDetectionStatus()
      end = 0
      start = end
      end += 8
      (self.slots.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.slots.slots = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Slot()
        start = end
        end += 4
        (val1.slot_index,) = _get_struct_i().unpack(str[start:end])
        _v40 = val1.pt1
        _x = _v40
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v41 = val1.pt2
        _x = _v41
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v42 = val1.pt3
        _x = _v42
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v43 = val1.pt4
        _x = _v43
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v44 = val1.veh_pos
        _x = _v44
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 40
        (_x.veh_psi, _x.slot_prob, _x.slot_type, _x.slot_status, _x.slot_angel, _x.slot_priority, _x.slot_distance, _x.slot_line_width, _x.reserved1, _x.reserved2,) = _get_struct_2f2ifi2f2i().unpack(str[start:end])
        self.slots.slots.append(val1)
      _x = self
      start = end
      end += 20
      (_x.slots.pld_eserved1, _x.slots.pld_Reserved2, _x.objects.timestamp, _x.objects.obj_sensor_src,) = _get_struct_2iQi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCObject()
        start = end
        end += 4
        (val1.index,) = _get_struct_i().unpack(str[start:end])
        _v45 = val1.pt1
        _x = _v45
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v46 = val1.pt2
        _x = _v46
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v47 = val1.pt3
        _x = _v47
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v48 = val1.pt4
        _x = _v48
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 44
        (_x.exist_prob, _x.height, _x.height_prob, _x.obj_type, _x.obj_mov_state, _x.obj_dim, _x.obj_distance, _x.obj_rel_vel_x, _x.obj_rel_vel_y, _x.reserved1, _x.reserved2,) = _get_struct_3f3i3f2i().unpack(str[start:end])
        self.objects.objects.append(val1)
      _x = self
      start = end
      end += 28
      (_x.objects.od_reserved1, _x.objects.od_reserved2, _x.freespace.grid_size, _x.freespace.gridshape_row, _x.freespace.gridshape_col, _x.freespace.grid_pos_x, _x.freespace.grid_pos_y,) = _get_struct_2if2i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.freespace.boundary_maps = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSBoundary()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.boundary_map = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.FSPoint()
          _x = val2
          start = end
          end += 16
          (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
          val1.boundary_map.append(val2)
        _x = val1
        start = end
        end += 8
        (_x.boundary_num, _x.boundary_type,) = _get_struct_2i().unpack(str[start:end])
        self.freespace.boundary_maps.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.freespace.origin_grid_map = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.freespace.timestamp, _x.freespace.confidence, _x.freespace.reserved1, _x.freespace.reserved2,) = _get_struct_Qf2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.freespace.boundary_map_FL = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.freespace.boundary_map_FL.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.freespace.boundary_map_FR = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.FSPoint()
        _x = val1
        start = end
        end += 16
        (_x.X, _x.y, _x.point_type, _x.ground_type,) = _get_struct_2f2i().unpack(str[start:end])
        self.freespace.boundary_map_FR.append(val1)
      start = end
      end += 8
      (self.psap_results.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.psap_results.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v49 = val1.pt1
        _x = _v49
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v50 = val1.pt2
        _x = _v50
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v51 = val1.pt3
        _x = _v51
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v52 = val1.pt4
        _x = _v52
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.psap_results.objects.append(val1)
      _x = self
      start = end
      end += 87
      (_x.psap_results.veh_loc.x, _x.psap_results.veh_loc.y, _x.psap_results.veh_loc_z, _x.psap_results.veh_orientation.roll, _x.psap_results.veh_orientation.pitch, _x.psap_results.veh_orientation.yaw, _x.psap_results.veh_loc_valid, _x.psap_results.slot.pt1.x, _x.psap_results.slot.pt1.y, _x.psap_results.slot.pt2.x, _x.psap_results.slot.pt2.y, _x.psap_results.slot.pt3.x, _x.psap_results.slot.pt3.y, _x.psap_results.slot.pt4.x, _x.psap_results.slot.pt4.y, _x.psap_results.slot.veh_pos.x, _x.psap_results.slot.veh_pos.y, _x.psap_results.slot.veh_psi, _x.psap_results.slot.slot_status, _x.psap_results.coordinate_type, _x.svc_det_status.svc_det_status_type, _x.svc_det_status.svcsapa_detection_avl, _x.svc_det_status.svcpowerswap_detection_avl, _x.svc_det_status.svc_det_sub_status_type,) = _get_struct_6fB11f3i2Bi().unpack(str[start:end])
      self.psap_results.veh_loc_valid = bool(self.psap_results.veh_loc_valid)
      self.svc_det_status.svcsapa_detection_avl = bool(self.svc_det_status.svcsapa_detection_avl)
      self.svc_det_status.svcpowerswap_detection_avl = bool(self.svc_det_status.svcpowerswap_detection_avl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_det_status.svc_alarms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCAlarm()
        _x = val1
        start = end
        end += 28
        (_x.alarm_type, _x.alarm_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_det_status.svc_alarms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svc_det_status.svc_faults = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.SVCFault()
        _x = val1
        start = end
        end += 28
        (_x.fault_type, _x.fault_code, _x.utc_timestamp, _x.ptp_timestamp, _x.reserved,) = _get_struct_2i2Qi().unpack(str[start:end])
        self.svc_det_status.svc_faults.append(val1)
      _x = self
      start = end
      end += 29
      (_x.svc_det_status.is_dlb_triggered, _x.svc_det_status.dlb_request.index, _x.svc_det_status.dlb_request.dlb_reason_type, _x.svc_det_status.dlb_request.dlb_reason_code, _x.svc_det_status.dlb_request.dlb_begin_timestamp_utc, _x.svc_det_status.dlb_request.dlb_end_timestamp_utc,) = _get_struct_B3i2Q().unpack(str[start:end])
      self.svc_det_status.is_dlb_triggered = bool(self.svc_det_status.is_dlb_triggered)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.svc_det_status.dlb_request.description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.svc_det_status.dlb_request.description = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2f2i = None
def _get_struct_2f2i():
    global _struct_2f2i
    if _struct_2f2i is None:
        _struct_2f2i = struct.Struct("<2f2i")
    return _struct_2f2i
_struct_2f2ifi2f2i = None
def _get_struct_2f2ifi2f2i():
    global _struct_2f2ifi2f2i
    if _struct_2f2ifi2f2i is None:
        _struct_2f2ifi2f2i = struct.Struct("<2f2ifi2f2i")
    return _struct_2f2ifi2f2i
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i2Qi = None
def _get_struct_2i2Qi():
    global _struct_2i2Qi
    if _struct_2i2Qi is None:
        _struct_2i2Qi = struct.Struct("<2i2Qi")
    return _struct_2i2Qi
_struct_2iQi = None
def _get_struct_2iQi():
    global _struct_2iQi
    if _struct_2iQi is None:
        _struct_2iQi = struct.Struct("<2iQi")
    return _struct_2iQi
_struct_2if2i2f = None
def _get_struct_2if2i2f():
    global _struct_2if2i2f
    if _struct_2if2i2f is None:
        _struct_2if2i2f = struct.Struct("<2if2i2f")
    return _struct_2if2i2f
_struct_3f3i3f2i = None
def _get_struct_3f3i3f2i():
    global _struct_3f3i3f2i
    if _struct_3f3i3f2i is None:
        _struct_3f3i3f2i = struct.Struct("<3f3i3f2i")
    return _struct_3f3i3f2i
_struct_6fB11f3i2Bi = None
def _get_struct_6fB11f3i2Bi():
    global _struct_6fB11f3i2Bi
    if _struct_6fB11f3i2Bi is None:
        _struct_6fB11f3i2Bi = struct.Struct("<6fB11f3i2Bi")
    return _struct_6fB11f3i2Bi
_struct_B3i2Q = None
def _get_struct_B3i2Q():
    global _struct_B3i2Q
    if _struct_B3i2Q is None:
        _struct_B3i2Q = struct.Struct("<B3i2Q")
    return _struct_B3i2Q
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_Qf2i = None
def _get_struct_Qf2i():
    global _struct_Qf2i
    if _struct_Qf2i is None:
        _struct_Qf2i = struct.Struct("<Qf2i")
    return _struct_Qf2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

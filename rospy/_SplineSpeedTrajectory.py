# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SplineSpeedTrajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SplineSpeedTrajectory(genpy.Message):
  _md5sum = "a6226bc1529d65075e473825973f9ec2"
  _type = "rospy_message_converter/SplineSpeedTrajectory"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PolyCurve[] poly_curve
float32 cost
SpeedPoint init_point
SpeedPoint connect_point
SpeedPoint end_point

================================================================================
MSG: rospy_message_converter/PolyCurve
int32 order
float32[] y_coeff
float32 p_start
float32 p_end

================================================================================
MSG: rospy_message_converter/SpeedPoint
float64 s
float64 t
float64 v
float64 a
float64 da
"""
  __slots__ = ['poly_curve','cost','init_point','connect_point','end_point']
  _slot_types = ['rospy_message_converter/PolyCurve[]','float32','rospy_message_converter/SpeedPoint','rospy_message_converter/SpeedPoint','rospy_message_converter/SpeedPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       poly_curve,cost,init_point,connect_point,end_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SplineSpeedTrajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.poly_curve is None:
        self.poly_curve = []
      if self.cost is None:
        self.cost = 0.
      if self.init_point is None:
        self.init_point = rospy_message_converter.msg.SpeedPoint()
      if self.connect_point is None:
        self.connect_point = rospy_message_converter.msg.SpeedPoint()
      if self.end_point is None:
        self.end_point = rospy_message_converter.msg.SpeedPoint()
    else:
      self.poly_curve = []
      self.cost = 0.
      self.init_point = rospy_message_converter.msg.SpeedPoint()
      self.connect_point = rospy_message_converter.msg.SpeedPoint()
      self.end_point = rospy_message_converter.msg.SpeedPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.poly_curve)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_curve:
        _x = val1.order
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.y_coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y_coeff))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
      _x = self
      buff.write(_get_struct_f15d().pack(_x.cost, _x.init_point.s, _x.init_point.t, _x.init_point.v, _x.init_point.a, _x.init_point.da, _x.connect_point.s, _x.connect_point.t, _x.connect_point.v, _x.connect_point.a, _x.connect_point.da, _x.end_point.s, _x.end_point.t, _x.end_point.v, _x.end_point.a, _x.end_point.da))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poly_curve is None:
        self.poly_curve = None
      if self.init_point is None:
        self.init_point = rospy_message_converter.msg.SpeedPoint()
      if self.connect_point is None:
        self.connect_point = rospy_message_converter.msg.SpeedPoint()
      if self.end_point is None:
        self.end_point = rospy_message_converter.msg.SpeedPoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_curve = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PolyCurve()
        start = end
        end += 4
        (val1.order,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y_coeff = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
        self.poly_curve.append(val1)
      _x = self
      start = end
      end += 124
      (_x.cost, _x.init_point.s, _x.init_point.t, _x.init_point.v, _x.init_point.a, _x.init_point.da, _x.connect_point.s, _x.connect_point.t, _x.connect_point.v, _x.connect_point.a, _x.connect_point.da, _x.end_point.s, _x.end_point.t, _x.end_point.v, _x.end_point.a, _x.end_point.da,) = _get_struct_f15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.poly_curve)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_curve:
        _x = val1.order
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.y_coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y_coeff.tostring())
        _x = val1
        buff.write(_get_struct_2f().pack(_x.p_start, _x.p_end))
      _x = self
      buff.write(_get_struct_f15d().pack(_x.cost, _x.init_point.s, _x.init_point.t, _x.init_point.v, _x.init_point.a, _x.init_point.da, _x.connect_point.s, _x.connect_point.t, _x.connect_point.v, _x.connect_point.a, _x.connect_point.da, _x.end_point.s, _x.end_point.t, _x.end_point.v, _x.end_point.a, _x.end_point.da))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poly_curve is None:
        self.poly_curve = None
      if self.init_point is None:
        self.init_point = rospy_message_converter.msg.SpeedPoint()
      if self.connect_point is None:
        self.connect_point = rospy_message_converter.msg.SpeedPoint()
      if self.end_point is None:
        self.end_point = rospy_message_converter.msg.SpeedPoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_curve = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PolyCurve()
        start = end
        end += 4
        (val1.order,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y_coeff = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _x = val1
        start = end
        end += 8
        (_x.p_start, _x.p_end,) = _get_struct_2f().unpack(str[start:end])
        self.poly_curve.append(val1)
      _x = self
      start = end
      end += 124
      (_x.cost, _x.init_point.s, _x.init_point.t, _x.init_point.v, _x.init_point.a, _x.init_point.da, _x.connect_point.s, _x.connect_point.t, _x.connect_point.v, _x.connect_point.a, _x.connect_point.da, _x.end_point.s, _x.end_point.t, _x.end_point.v, _x.end_point.a, _x.end_point.da,) = _get_struct_f15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_f15d = None
def _get_struct_f15d():
    global _struct_f15d
    if _struct_f15d is None:
        _struct_f15d = struct.Struct("<f15d")
    return _struct_f15d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/GnssResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class GnssResult(genpy.Message):
  _md5sum = "eeaf98c19965ac591b2c426ef5011197"
  _type = "rospy_message_converter/GnssResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """UTCTime utc_time
int32 position_type
DOPValue dop_value
float64 latitude
float64 longitude
float32 msl_height
float32 undulation
float32 velocity_e
float32 velocity_n
float32 velocity_u
int32 ort_type
float32 roll
float32 pitch
float32 yaw
float32 std_lat
float32 std_long
float32 std_height
float32 std_vel_e
float32 std_vel_n
float32 std_vel_u
float32 std_roll
float32 std_pitch
float32 std_yaw
float64 itow_time
uint32 gps_ref_week
uint32 leap_second
uint32 num_sat_used
int32 gdpr_status
uint64 timestamp_ptp_ns
float64 rtk_age
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/UTCTime
uint32 year
uint32 month
uint32 day
uint32 hour
uint32 min
uint32 sec
float32 msec

================================================================================
MSG: rospy_message_converter/DOPValue
float32 gdop
float32 pdop
float32 hdop
float32 vdop
float32 tdop
"""
  __slots__ = ['utc_time','position_type','dop_value','latitude','longitude','msl_height','undulation','velocity_e','velocity_n','velocity_u','ort_type','roll','pitch','yaw','std_lat','std_long','std_height','std_vel_e','std_vel_n','std_vel_u','std_roll','std_pitch','std_yaw','itow_time','gps_ref_week','leap_second','num_sat_used','gdpr_status','timestamp_ptp_ns','rtk_age','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/UTCTime','int32','rospy_message_converter/DOPValue','float64','float64','float32','float32','float32','float32','float32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float64','uint32','uint32','uint32','int32','uint64','float64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       utc_time,position_type,dop_value,latitude,longitude,msl_height,undulation,velocity_e,velocity_n,velocity_u,ort_type,roll,pitch,yaw,std_lat,std_long,std_height,std_vel_e,std_vel_n,std_vel_u,std_roll,std_pitch,std_yaw,itow_time,gps_ref_week,leap_second,num_sat_used,gdpr_status,timestamp_ptp_ns,rtk_age,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      if self.position_type is None:
        self.position_type = 0
      if self.dop_value is None:
        self.dop_value = rospy_message_converter.msg.DOPValue()
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.msl_height is None:
        self.msl_height = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.velocity_e is None:
        self.velocity_e = 0.
      if self.velocity_n is None:
        self.velocity_n = 0.
      if self.velocity_u is None:
        self.velocity_u = 0.
      if self.ort_type is None:
        self.ort_type = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.std_lat is None:
        self.std_lat = 0.
      if self.std_long is None:
        self.std_long = 0.
      if self.std_height is None:
        self.std_height = 0.
      if self.std_vel_e is None:
        self.std_vel_e = 0.
      if self.std_vel_n is None:
        self.std_vel_n = 0.
      if self.std_vel_u is None:
        self.std_vel_u = 0.
      if self.std_roll is None:
        self.std_roll = 0.
      if self.std_pitch is None:
        self.std_pitch = 0.
      if self.std_yaw is None:
        self.std_yaw = 0.
      if self.itow_time is None:
        self.itow_time = 0.
      if self.gps_ref_week is None:
        self.gps_ref_week = 0
      if self.leap_second is None:
        self.leap_second = 0
      if self.num_sat_used is None:
        self.num_sat_used = 0
      if self.gdpr_status is None:
        self.gdpr_status = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
      if self.rtk_age is None:
        self.rtk_age = 0.
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.utc_time = rospy_message_converter.msg.UTCTime()
      self.position_type = 0
      self.dop_value = rospy_message_converter.msg.DOPValue()
      self.latitude = 0.
      self.longitude = 0.
      self.msl_height = 0.
      self.undulation = 0.
      self.velocity_e = 0.
      self.velocity_n = 0.
      self.velocity_u = 0.
      self.ort_type = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.std_lat = 0.
      self.std_long = 0.
      self.std_height = 0.
      self.std_vel_e = 0.
      self.std_vel_n = 0.
      self.std_vel_u = 0.
      self.std_roll = 0.
      self.std_pitch = 0.
      self.std_yaw = 0.
      self.itow_time = 0.
      self.gps_ref_week = 0
      self.leap_second = 0
      self.num_sat_used = 0
      self.gdpr_status = 0
      self.timestamp_ptp_ns = 0
      self.rtk_age = 0.
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6Ifi5f2d5fi12fd3IiQdQ().pack(_x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.position_type, _x.dop_value.gdop, _x.dop_value.pdop, _x.dop_value.hdop, _x.dop_value.vdop, _x.dop_value.tdop, _x.latitude, _x.longitude, _x.msl_height, _x.undulation, _x.velocity_e, _x.velocity_n, _x.velocity_u, _x.ort_type, _x.roll, _x.pitch, _x.yaw, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_e, _x.std_vel_n, _x.std_vel_u, _x.std_roll, _x.std_pitch, _x.std_yaw, _x.itow_time, _x.gps_ref_week, _x.leap_second, _x.num_sat_used, _x.gdpr_status, _x.timestamp_ptp_ns, _x.rtk_age, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      if self.dop_value is None:
        self.dop_value = rospy_message_converter.msg.DOPValue()
      end = 0
      _x = self
      start = end
      end += 188
      (_x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.position_type, _x.dop_value.gdop, _x.dop_value.pdop, _x.dop_value.hdop, _x.dop_value.vdop, _x.dop_value.tdop, _x.latitude, _x.longitude, _x.msl_height, _x.undulation, _x.velocity_e, _x.velocity_n, _x.velocity_u, _x.ort_type, _x.roll, _x.pitch, _x.yaw, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_e, _x.std_vel_n, _x.std_vel_u, _x.std_roll, _x.std_pitch, _x.std_yaw, _x.itow_time, _x.gps_ref_week, _x.leap_second, _x.num_sat_used, _x.gdpr_status, _x.timestamp_ptp_ns, _x.rtk_age, _x.publish_ptp_ts,) = _get_struct_6Ifi5f2d5fi12fd3IiQdQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6Ifi5f2d5fi12fd3IiQdQ().pack(_x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.position_type, _x.dop_value.gdop, _x.dop_value.pdop, _x.dop_value.hdop, _x.dop_value.vdop, _x.dop_value.tdop, _x.latitude, _x.longitude, _x.msl_height, _x.undulation, _x.velocity_e, _x.velocity_n, _x.velocity_u, _x.ort_type, _x.roll, _x.pitch, _x.yaw, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_e, _x.std_vel_n, _x.std_vel_u, _x.std_roll, _x.std_pitch, _x.std_yaw, _x.itow_time, _x.gps_ref_week, _x.leap_second, _x.num_sat_used, _x.gdpr_status, _x.timestamp_ptp_ns, _x.rtk_age, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      if self.dop_value is None:
        self.dop_value = rospy_message_converter.msg.DOPValue()
      end = 0
      _x = self
      start = end
      end += 188
      (_x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.position_type, _x.dop_value.gdop, _x.dop_value.pdop, _x.dop_value.hdop, _x.dop_value.vdop, _x.dop_value.tdop, _x.latitude, _x.longitude, _x.msl_height, _x.undulation, _x.velocity_e, _x.velocity_n, _x.velocity_u, _x.ort_type, _x.roll, _x.pitch, _x.yaw, _x.std_lat, _x.std_long, _x.std_height, _x.std_vel_e, _x.std_vel_n, _x.std_vel_u, _x.std_roll, _x.std_pitch, _x.std_yaw, _x.itow_time, _x.gps_ref_week, _x.leap_second, _x.num_sat_used, _x.gdpr_status, _x.timestamp_ptp_ns, _x.rtk_age, _x.publish_ptp_ts,) = _get_struct_6Ifi5f2d5fi12fd3IiQdQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_6Ifi5f2d5fi12fd3IiQdQ = None
def _get_struct_6Ifi5f2d5fi12fd3IiQdQ():
    global _struct_6Ifi5f2d5fi12fd3IiQdQ
    if _struct_6Ifi5f2d5fi12fd3IiQdQ is None:
        _struct_6Ifi5f2d5fi12fd3IiQdQ = struct.Struct("<6Ifi5f2d5fi12fd3IiQdQ")
    return _struct_6Ifi5f2d5fi12fd3IiQdQ

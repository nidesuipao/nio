# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TscdStru.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TscdStru(genpy.Message):
  _md5sum = "df40135fe14cf3cc0fb9349107ca2e77"
  _type = "rospy_message_converter/TscdStru"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 spdAebReduce
float32 spdJerkReduce
bool flgDriverOverride
bool flgDriverBrake
bool flgDriveForward
bool flgDoorOpen
bool flgBeltWarn
bool flgVehEnable
bool flgChassisIntervince
bool flgBrakeOverHeat
bool flgEscOff
bool flgSysFault
bool flgPathFeasible
"""
  __slots__ = ['spdAebReduce','spdJerkReduce','flgDriverOverride','flgDriverBrake','flgDriveForward','flgDoorOpen','flgBeltWarn','flgVehEnable','flgChassisIntervince','flgBrakeOverHeat','flgEscOff','flgSysFault','flgPathFeasible']
  _slot_types = ['float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       spdAebReduce,spdJerkReduce,flgDriverOverride,flgDriverBrake,flgDriveForward,flgDoorOpen,flgBeltWarn,flgVehEnable,flgChassisIntervince,flgBrakeOverHeat,flgEscOff,flgSysFault,flgPathFeasible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TscdStru, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.spdAebReduce is None:
        self.spdAebReduce = 0.
      if self.spdJerkReduce is None:
        self.spdJerkReduce = 0.
      if self.flgDriverOverride is None:
        self.flgDriverOverride = False
      if self.flgDriverBrake is None:
        self.flgDriverBrake = False
      if self.flgDriveForward is None:
        self.flgDriveForward = False
      if self.flgDoorOpen is None:
        self.flgDoorOpen = False
      if self.flgBeltWarn is None:
        self.flgBeltWarn = False
      if self.flgVehEnable is None:
        self.flgVehEnable = False
      if self.flgChassisIntervince is None:
        self.flgChassisIntervince = False
      if self.flgBrakeOverHeat is None:
        self.flgBrakeOverHeat = False
      if self.flgEscOff is None:
        self.flgEscOff = False
      if self.flgSysFault is None:
        self.flgSysFault = False
      if self.flgPathFeasible is None:
        self.flgPathFeasible = False
    else:
      self.spdAebReduce = 0.
      self.spdJerkReduce = 0.
      self.flgDriverOverride = False
      self.flgDriverBrake = False
      self.flgDriveForward = False
      self.flgDoorOpen = False
      self.flgBeltWarn = False
      self.flgVehEnable = False
      self.flgChassisIntervince = False
      self.flgBrakeOverHeat = False
      self.flgEscOff = False
      self.flgSysFault = False
      self.flgPathFeasible = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f11B().pack(_x.spdAebReduce, _x.spdJerkReduce, _x.flgDriverOverride, _x.flgDriverBrake, _x.flgDriveForward, _x.flgDoorOpen, _x.flgBeltWarn, _x.flgVehEnable, _x.flgChassisIntervince, _x.flgBrakeOverHeat, _x.flgEscOff, _x.flgSysFault, _x.flgPathFeasible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.spdAebReduce, _x.spdJerkReduce, _x.flgDriverOverride, _x.flgDriverBrake, _x.flgDriveForward, _x.flgDoorOpen, _x.flgBeltWarn, _x.flgVehEnable, _x.flgChassisIntervince, _x.flgBrakeOverHeat, _x.flgEscOff, _x.flgSysFault, _x.flgPathFeasible,) = _get_struct_2f11B().unpack(str[start:end])
      self.flgDriverOverride = bool(self.flgDriverOverride)
      self.flgDriverBrake = bool(self.flgDriverBrake)
      self.flgDriveForward = bool(self.flgDriveForward)
      self.flgDoorOpen = bool(self.flgDoorOpen)
      self.flgBeltWarn = bool(self.flgBeltWarn)
      self.flgVehEnable = bool(self.flgVehEnable)
      self.flgChassisIntervince = bool(self.flgChassisIntervince)
      self.flgBrakeOverHeat = bool(self.flgBrakeOverHeat)
      self.flgEscOff = bool(self.flgEscOff)
      self.flgSysFault = bool(self.flgSysFault)
      self.flgPathFeasible = bool(self.flgPathFeasible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f11B().pack(_x.spdAebReduce, _x.spdJerkReduce, _x.flgDriverOverride, _x.flgDriverBrake, _x.flgDriveForward, _x.flgDoorOpen, _x.flgBeltWarn, _x.flgVehEnable, _x.flgChassisIntervince, _x.flgBrakeOverHeat, _x.flgEscOff, _x.flgSysFault, _x.flgPathFeasible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.spdAebReduce, _x.spdJerkReduce, _x.flgDriverOverride, _x.flgDriverBrake, _x.flgDriveForward, _x.flgDoorOpen, _x.flgBeltWarn, _x.flgVehEnable, _x.flgChassisIntervince, _x.flgBrakeOverHeat, _x.flgEscOff, _x.flgSysFault, _x.flgPathFeasible,) = _get_struct_2f11B().unpack(str[start:end])
      self.flgDriverOverride = bool(self.flgDriverOverride)
      self.flgDriverBrake = bool(self.flgDriverBrake)
      self.flgDriveForward = bool(self.flgDriveForward)
      self.flgDoorOpen = bool(self.flgDoorOpen)
      self.flgBeltWarn = bool(self.flgBeltWarn)
      self.flgVehEnable = bool(self.flgVehEnable)
      self.flgChassisIntervince = bool(self.flgChassisIntervince)
      self.flgBrakeOverHeat = bool(self.flgBrakeOverHeat)
      self.flgEscOff = bool(self.flgEscOff)
      self.flgSysFault = bool(self.flgSysFault)
      self.flgPathFeasible = bool(self.flgPathFeasible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f11B = None
def _get_struct_2f11B():
    global _struct_2f11B
    if _struct_2f11B is None:
        _struct_2f11B = struct.Struct("<2f11B")
    return _struct_2f11B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/OverloadFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OverloadFaultInfo(genpy.Message):
  _md5sum = "effe9df111e1f4cb8fad2da83edcd433"
  _type = "rospy_message_converter/OverloadFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool mcu1_cpu0_overload
bool mcu1_cpu1_overload
bool mcu1_cpu2_overload
bool mcu1_cpu3_overload
bool mcu1_cpu4_overload
bool mcu1_cpu5_overload
bool mcu2_cpu0_overload
bool mcu2_cpu1_overload
bool mcu2_cpu2_overload
bool mcu2_cpu3_overload
bool mcu2_cpu4_overload
bool mcu2_cpu5_overload
"""
  __slots__ = ['mcu1_cpu0_overload','mcu1_cpu1_overload','mcu1_cpu2_overload','mcu1_cpu3_overload','mcu1_cpu4_overload','mcu1_cpu5_overload','mcu2_cpu0_overload','mcu2_cpu1_overload','mcu2_cpu2_overload','mcu2_cpu3_overload','mcu2_cpu4_overload','mcu2_cpu5_overload']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mcu1_cpu0_overload,mcu1_cpu1_overload,mcu1_cpu2_overload,mcu1_cpu3_overload,mcu1_cpu4_overload,mcu1_cpu5_overload,mcu2_cpu0_overload,mcu2_cpu1_overload,mcu2_cpu2_overload,mcu2_cpu3_overload,mcu2_cpu4_overload,mcu2_cpu5_overload

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverloadFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mcu1_cpu0_overload is None:
        self.mcu1_cpu0_overload = False
      if self.mcu1_cpu1_overload is None:
        self.mcu1_cpu1_overload = False
      if self.mcu1_cpu2_overload is None:
        self.mcu1_cpu2_overload = False
      if self.mcu1_cpu3_overload is None:
        self.mcu1_cpu3_overload = False
      if self.mcu1_cpu4_overload is None:
        self.mcu1_cpu4_overload = False
      if self.mcu1_cpu5_overload is None:
        self.mcu1_cpu5_overload = False
      if self.mcu2_cpu0_overload is None:
        self.mcu2_cpu0_overload = False
      if self.mcu2_cpu1_overload is None:
        self.mcu2_cpu1_overload = False
      if self.mcu2_cpu2_overload is None:
        self.mcu2_cpu2_overload = False
      if self.mcu2_cpu3_overload is None:
        self.mcu2_cpu3_overload = False
      if self.mcu2_cpu4_overload is None:
        self.mcu2_cpu4_overload = False
      if self.mcu2_cpu5_overload is None:
        self.mcu2_cpu5_overload = False
    else:
      self.mcu1_cpu0_overload = False
      self.mcu1_cpu1_overload = False
      self.mcu1_cpu2_overload = False
      self.mcu1_cpu3_overload = False
      self.mcu1_cpu4_overload = False
      self.mcu1_cpu5_overload = False
      self.mcu2_cpu0_overload = False
      self.mcu2_cpu1_overload = False
      self.mcu2_cpu2_overload = False
      self.mcu2_cpu3_overload = False
      self.mcu2_cpu4_overload = False
      self.mcu2_cpu5_overload = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12B().pack(_x.mcu1_cpu0_overload, _x.mcu1_cpu1_overload, _x.mcu1_cpu2_overload, _x.mcu1_cpu3_overload, _x.mcu1_cpu4_overload, _x.mcu1_cpu5_overload, _x.mcu2_cpu0_overload, _x.mcu2_cpu1_overload, _x.mcu2_cpu2_overload, _x.mcu2_cpu3_overload, _x.mcu2_cpu4_overload, _x.mcu2_cpu5_overload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.mcu1_cpu0_overload, _x.mcu1_cpu1_overload, _x.mcu1_cpu2_overload, _x.mcu1_cpu3_overload, _x.mcu1_cpu4_overload, _x.mcu1_cpu5_overload, _x.mcu2_cpu0_overload, _x.mcu2_cpu1_overload, _x.mcu2_cpu2_overload, _x.mcu2_cpu3_overload, _x.mcu2_cpu4_overload, _x.mcu2_cpu5_overload,) = _get_struct_12B().unpack(str[start:end])
      self.mcu1_cpu0_overload = bool(self.mcu1_cpu0_overload)
      self.mcu1_cpu1_overload = bool(self.mcu1_cpu1_overload)
      self.mcu1_cpu2_overload = bool(self.mcu1_cpu2_overload)
      self.mcu1_cpu3_overload = bool(self.mcu1_cpu3_overload)
      self.mcu1_cpu4_overload = bool(self.mcu1_cpu4_overload)
      self.mcu1_cpu5_overload = bool(self.mcu1_cpu5_overload)
      self.mcu2_cpu0_overload = bool(self.mcu2_cpu0_overload)
      self.mcu2_cpu1_overload = bool(self.mcu2_cpu1_overload)
      self.mcu2_cpu2_overload = bool(self.mcu2_cpu2_overload)
      self.mcu2_cpu3_overload = bool(self.mcu2_cpu3_overload)
      self.mcu2_cpu4_overload = bool(self.mcu2_cpu4_overload)
      self.mcu2_cpu5_overload = bool(self.mcu2_cpu5_overload)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12B().pack(_x.mcu1_cpu0_overload, _x.mcu1_cpu1_overload, _x.mcu1_cpu2_overload, _x.mcu1_cpu3_overload, _x.mcu1_cpu4_overload, _x.mcu1_cpu5_overload, _x.mcu2_cpu0_overload, _x.mcu2_cpu1_overload, _x.mcu2_cpu2_overload, _x.mcu2_cpu3_overload, _x.mcu2_cpu4_overload, _x.mcu2_cpu5_overload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.mcu1_cpu0_overload, _x.mcu1_cpu1_overload, _x.mcu1_cpu2_overload, _x.mcu1_cpu3_overload, _x.mcu1_cpu4_overload, _x.mcu1_cpu5_overload, _x.mcu2_cpu0_overload, _x.mcu2_cpu1_overload, _x.mcu2_cpu2_overload, _x.mcu2_cpu3_overload, _x.mcu2_cpu4_overload, _x.mcu2_cpu5_overload,) = _get_struct_12B().unpack(str[start:end])
      self.mcu1_cpu0_overload = bool(self.mcu1_cpu0_overload)
      self.mcu1_cpu1_overload = bool(self.mcu1_cpu1_overload)
      self.mcu1_cpu2_overload = bool(self.mcu1_cpu2_overload)
      self.mcu1_cpu3_overload = bool(self.mcu1_cpu3_overload)
      self.mcu1_cpu4_overload = bool(self.mcu1_cpu4_overload)
      self.mcu1_cpu5_overload = bool(self.mcu1_cpu5_overload)
      self.mcu2_cpu0_overload = bool(self.mcu2_cpu0_overload)
      self.mcu2_cpu1_overload = bool(self.mcu2_cpu1_overload)
      self.mcu2_cpu2_overload = bool(self.mcu2_cpu2_overload)
      self.mcu2_cpu3_overload = bool(self.mcu2_cpu3_overload)
      self.mcu2_cpu4_overload = bool(self.mcu2_cpu4_overload)
      self.mcu2_cpu5_overload = bool(self.mcu2_cpu5_overload)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12B = None
def _get_struct_12B():
    global _struct_12B
    if _struct_12B is None:
        _struct_12B = struct.Struct("<12B")
    return _struct_12B

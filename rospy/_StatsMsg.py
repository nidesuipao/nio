# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/StatsMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class StatsMsg(genpy.Message):
  _md5sum = "e620040f283425e996e5c09c82eb2b75"
  _type = "rospy_message_converter/StatsMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 module_id
uint64 date_from_ts
uint64 date_to_ts
TagValues[] vals

================================================================================
MSG: rospy_message_converter/TagValues
string tag
string[] contents
"""
  __slots__ = ['module_id','date_from_ts','date_to_ts','vals']
  _slot_types = ['uint64','uint64','uint64','rospy_message_converter/TagValues[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       module_id,date_from_ts,date_to_ts,vals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatsMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.module_id is None:
        self.module_id = 0
      if self.date_from_ts is None:
        self.date_from_ts = 0
      if self.date_to_ts is None:
        self.date_to_ts = 0
      if self.vals is None:
        self.vals = []
    else:
      self.module_id = 0
      self.date_from_ts = 0
      self.date_to_ts = 0
      self.vals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Q().pack(_x.module_id, _x.date_from_ts, _x.date_to_ts))
      length = len(self.vals)
      buff.write(_struct_I.pack(length))
      for val1 in self.vals:
        _x = val1.tag
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.contents)
        buff.write(_struct_I.pack(length))
        for val2 in val1.contents:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vals is None:
        self.vals = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.module_id, _x.date_from_ts, _x.date_to_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vals = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TagValues()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.tag = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.tag = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.contents = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.contents.append(val2)
        self.vals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Q().pack(_x.module_id, _x.date_from_ts, _x.date_to_ts))
      length = len(self.vals)
      buff.write(_struct_I.pack(length))
      for val1 in self.vals:
        _x = val1.tag
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.contents)
        buff.write(_struct_I.pack(length))
        for val2 in val1.contents:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vals is None:
        self.vals = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.module_id, _x.date_from_ts, _x.date_to_ts,) = _get_struct_3Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vals = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TagValues()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.tag = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.tag = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.contents = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.contents.append(val2)
        self.vals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Q = None
def _get_struct_3Q():
    global _struct_3Q
    if _struct_3Q is None:
        _struct_3Q = struct.Struct("<3Q")
    return _struct_3Q

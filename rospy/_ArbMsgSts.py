# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ArbMsgSts.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ArbMsgSts(genpy.Message):
  _md5sum = "48481f9949f7a4ffaaec284e05c9ef99"
  _type = "rospy_message_converter/ArbMsgSts"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 msg_sts_fct_out
int32 msg_sts_fcts_out
int32 msg_sts_parking_out
int32 msg_sts_dms_eas
int32 msg_sts_aa_base_algo_sts
int32 msg_sts_hw_mode
int32 msg_sts_hw_mode_rsp
int32 msg_sts_soc_shutdown_req
int32 msg_sts_camera_sts
int32 msg_sts_camera_sal_sts
int32 msg_sts_veh_10ms
int32 msg_sts_veh_50ms
int32 msg_sts_dms_can
int32 msg_sts_aa_nbc
int32[] msg_sts_reserved
"""
  __slots__ = ['msg_sts_fct_out','msg_sts_fcts_out','msg_sts_parking_out','msg_sts_dms_eas','msg_sts_aa_base_algo_sts','msg_sts_hw_mode','msg_sts_hw_mode_rsp','msg_sts_soc_shutdown_req','msg_sts_camera_sts','msg_sts_camera_sal_sts','msg_sts_veh_10ms','msg_sts_veh_50ms','msg_sts_dms_can','msg_sts_aa_nbc','msg_sts_reserved']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       msg_sts_fct_out,msg_sts_fcts_out,msg_sts_parking_out,msg_sts_dms_eas,msg_sts_aa_base_algo_sts,msg_sts_hw_mode,msg_sts_hw_mode_rsp,msg_sts_soc_shutdown_req,msg_sts_camera_sts,msg_sts_camera_sal_sts,msg_sts_veh_10ms,msg_sts_veh_50ms,msg_sts_dms_can,msg_sts_aa_nbc,msg_sts_reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArbMsgSts, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.msg_sts_fct_out is None:
        self.msg_sts_fct_out = 0
      if self.msg_sts_fcts_out is None:
        self.msg_sts_fcts_out = 0
      if self.msg_sts_parking_out is None:
        self.msg_sts_parking_out = 0
      if self.msg_sts_dms_eas is None:
        self.msg_sts_dms_eas = 0
      if self.msg_sts_aa_base_algo_sts is None:
        self.msg_sts_aa_base_algo_sts = 0
      if self.msg_sts_hw_mode is None:
        self.msg_sts_hw_mode = 0
      if self.msg_sts_hw_mode_rsp is None:
        self.msg_sts_hw_mode_rsp = 0
      if self.msg_sts_soc_shutdown_req is None:
        self.msg_sts_soc_shutdown_req = 0
      if self.msg_sts_camera_sts is None:
        self.msg_sts_camera_sts = 0
      if self.msg_sts_camera_sal_sts is None:
        self.msg_sts_camera_sal_sts = 0
      if self.msg_sts_veh_10ms is None:
        self.msg_sts_veh_10ms = 0
      if self.msg_sts_veh_50ms is None:
        self.msg_sts_veh_50ms = 0
      if self.msg_sts_dms_can is None:
        self.msg_sts_dms_can = 0
      if self.msg_sts_aa_nbc is None:
        self.msg_sts_aa_nbc = 0
      if self.msg_sts_reserved is None:
        self.msg_sts_reserved = []
    else:
      self.msg_sts_fct_out = 0
      self.msg_sts_fcts_out = 0
      self.msg_sts_parking_out = 0
      self.msg_sts_dms_eas = 0
      self.msg_sts_aa_base_algo_sts = 0
      self.msg_sts_hw_mode = 0
      self.msg_sts_hw_mode_rsp = 0
      self.msg_sts_soc_shutdown_req = 0
      self.msg_sts_camera_sts = 0
      self.msg_sts_camera_sal_sts = 0
      self.msg_sts_veh_10ms = 0
      self.msg_sts_veh_50ms = 0
      self.msg_sts_dms_can = 0
      self.msg_sts_aa_nbc = 0
      self.msg_sts_reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14i().pack(_x.msg_sts_fct_out, _x.msg_sts_fcts_out, _x.msg_sts_parking_out, _x.msg_sts_dms_eas, _x.msg_sts_aa_base_algo_sts, _x.msg_sts_hw_mode, _x.msg_sts_hw_mode_rsp, _x.msg_sts_soc_shutdown_req, _x.msg_sts_camera_sts, _x.msg_sts_camera_sal_sts, _x.msg_sts_veh_10ms, _x.msg_sts_veh_50ms, _x.msg_sts_dms_can, _x.msg_sts_aa_nbc))
      length = len(self.msg_sts_reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.msg_sts_reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.msg_sts_fct_out, _x.msg_sts_fcts_out, _x.msg_sts_parking_out, _x.msg_sts_dms_eas, _x.msg_sts_aa_base_algo_sts, _x.msg_sts_hw_mode, _x.msg_sts_hw_mode_rsp, _x.msg_sts_soc_shutdown_req, _x.msg_sts_camera_sts, _x.msg_sts_camera_sal_sts, _x.msg_sts_veh_10ms, _x.msg_sts_veh_50ms, _x.msg_sts_dms_can, _x.msg_sts_aa_nbc,) = _get_struct_14i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.msg_sts_reserved = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14i().pack(_x.msg_sts_fct_out, _x.msg_sts_fcts_out, _x.msg_sts_parking_out, _x.msg_sts_dms_eas, _x.msg_sts_aa_base_algo_sts, _x.msg_sts_hw_mode, _x.msg_sts_hw_mode_rsp, _x.msg_sts_soc_shutdown_req, _x.msg_sts_camera_sts, _x.msg_sts_camera_sal_sts, _x.msg_sts_veh_10ms, _x.msg_sts_veh_50ms, _x.msg_sts_dms_can, _x.msg_sts_aa_nbc))
      length = len(self.msg_sts_reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.msg_sts_reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.msg_sts_fct_out, _x.msg_sts_fcts_out, _x.msg_sts_parking_out, _x.msg_sts_dms_eas, _x.msg_sts_aa_base_algo_sts, _x.msg_sts_hw_mode, _x.msg_sts_hw_mode_rsp, _x.msg_sts_soc_shutdown_req, _x.msg_sts_camera_sts, _x.msg_sts_camera_sal_sts, _x.msg_sts_veh_10ms, _x.msg_sts_veh_50ms, _x.msg_sts_dms_can, _x.msg_sts_aa_nbc,) = _get_struct_14i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.msg_sts_reserved = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14i = None
def _get_struct_14i():
    global _struct_14i
    if _struct_14i is None:
        _struct_14i = struct.Struct("<14i")
    return _struct_14i

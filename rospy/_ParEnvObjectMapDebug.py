# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ParEnvObjectMapDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ParEnvObjectMapDebug(genpy.Message):
  _md5sum = "67406128fc41d2138398ab50bdd836fd"
  _type = "rospy_message_converter/ParEnvObjectMapDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 module_state
bool vehicle_state_valid
bool uss_instance_valid
bool uss_instance_frame_updated
bool svc_instance_valid
bool svc_instance_frame_updated
bool is_psap_left
int32 feature_type
int32 feature_state
float32 latest_location_odom_x
float32 latest_location_odom_y
float32 latest_location_odom_theta
float32 latest_location_psap_x
float32 latest_location_psap_y
float32 latest_location_psap_theta
uint32 uss_valid_input_num
uint32 uss_high_filtered_num
uint32 uss_high_line_num
uint32 uss_high_point_num
uint32 uss_timesync_state
float32 uss_timesync_reserve
uint32 uss_current_objects_num
uint32 uss_fused_objects_num
uint32 uss_associated_num
ParEnvAssociationInfo[] uss_pairing
uint32 uss_update_num
uint32 uss_increase_num
uint32 fs_input_num
uint32 fs_valid_num
uint32 fs_timesync_state
float32 fs_timesync_reserve
uint32 fs_current_pts_num
uint32 fs_reserve_type1_num
uint32 fs_reserve_type2_num
uint32 fs_reserve_type3_num
uint32 fs_reserve_type4_num
uint32 fs_reserve_type5_num
uint32 od_input_num
uint32 od_valid_num
uint32 od_timesync_state
float32 od_timesync_reserve
uint32 od_current_object_num
uint32 od_fused_objects_num
uint32 od_associated_num
ParEnvAssociationInfo[] od_pairing
uint32 od_reserve_type1_num
uint32 od_reserve_type2_num
uint32 od_reserve_type3_num
uint32 od_reserve_type4_num
uint32 od_reserve_type5_num
ParEnvAssociationInfo[] fusion_result
uint32 roi_filtered_num
ParEnvObjectSegment[] roi_filtered_segments
ParEnvObjectPoint[] roi_filtered_points
float32 uss_debug_float_reserve1
float32 uss_debug_float_reserve2
float32 uss_debug_float_reserve3
float32 uss_debug_float_reserve4
float32 uss_debug_float_reserve5
float32 uss_debug_float_reserve6
float32 uss_debug_float_reserve7
float32 uss_debug_float_reserve8
float32 uss_debug_float_reserve9
float32 uss_debug_float_reserve10
int32 uss_debug_int32_reserve1
int32 uss_debug_int32_reserve2
int32 uss_debug_int32_reserve3
int32 uss_debug_int32_reserve4
int32 uss_debug_int32_reserve5
int32 uss_debug_int32_reserve6
int32 uss_debug_int32_reserve7
int32 uss_debug_int32_reserve8
int32 uss_debug_int32_reserve9
int32 uss_debug_int32_reserve10
float32 svc_debug_float_reserve1
float32 svc_debug_float_reserve2
float32 svc_debug_float_reserve3
float32 svc_debug_float_reserve4
float32 svc_debug_float_reserve5
float32 svc_debug_float_reserve6
float32 svc_debug_float_reserve7
float32 svc_debug_float_reserve8
float32 svc_debug_float_reserve9
float32 svc_debug_float_reserve10
int32 svc_debug_int32_reserve1
int32 svc_debug_int32_reserve2
int32 svc_debug_int32_reserve3
int32 svc_debug_int32_reserve4
int32 svc_debug_int32_reserve5
int32 svc_debug_int32_reserve6
int32 svc_debug_int32_reserve7
int32 svc_debug_int32_reserve8
int32 svc_debug_int32_reserve9
int32 svc_debug_int32_reserve10

================================================================================
MSG: rospy_message_converter/ParEnvAssociationInfo
int32 index1
int32 index2
ParEnvObjectInfo obj1
ParEnvObjectInfo obj2
int32 reserve1
int32 reserve2

================================================================================
MSG: rospy_message_converter/ParEnvObjectInfo
int32 type
int32 src
ParEnvObjectPoint pt
ParEnvObjectSegment line
ParEnvObjectPolygon polygon

================================================================================
MSG: rospy_message_converter/ParEnvObjectPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/ParEnvObjectSegment
ParEnvObjectPoint pt1
ParEnvObjectPoint pt2

================================================================================
MSG: rospy_message_converter/ParEnvObjectPolygon
ParEnvObjectPoint[] pts
"""
  __slots__ = ['module_state','vehicle_state_valid','uss_instance_valid','uss_instance_frame_updated','svc_instance_valid','svc_instance_frame_updated','is_psap_left','feature_type','feature_state','latest_location_odom_x','latest_location_odom_y','latest_location_odom_theta','latest_location_psap_x','latest_location_psap_y','latest_location_psap_theta','uss_valid_input_num','uss_high_filtered_num','uss_high_line_num','uss_high_point_num','uss_timesync_state','uss_timesync_reserve','uss_current_objects_num','uss_fused_objects_num','uss_associated_num','uss_pairing','uss_update_num','uss_increase_num','fs_input_num','fs_valid_num','fs_timesync_state','fs_timesync_reserve','fs_current_pts_num','fs_reserve_type1_num','fs_reserve_type2_num','fs_reserve_type3_num','fs_reserve_type4_num','fs_reserve_type5_num','od_input_num','od_valid_num','od_timesync_state','od_timesync_reserve','od_current_object_num','od_fused_objects_num','od_associated_num','od_pairing','od_reserve_type1_num','od_reserve_type2_num','od_reserve_type3_num','od_reserve_type4_num','od_reserve_type5_num','fusion_result','roi_filtered_num','roi_filtered_segments','roi_filtered_points','uss_debug_float_reserve1','uss_debug_float_reserve2','uss_debug_float_reserve3','uss_debug_float_reserve4','uss_debug_float_reserve5','uss_debug_float_reserve6','uss_debug_float_reserve7','uss_debug_float_reserve8','uss_debug_float_reserve9','uss_debug_float_reserve10','uss_debug_int32_reserve1','uss_debug_int32_reserve2','uss_debug_int32_reserve3','uss_debug_int32_reserve4','uss_debug_int32_reserve5','uss_debug_int32_reserve6','uss_debug_int32_reserve7','uss_debug_int32_reserve8','uss_debug_int32_reserve9','uss_debug_int32_reserve10','svc_debug_float_reserve1','svc_debug_float_reserve2','svc_debug_float_reserve3','svc_debug_float_reserve4','svc_debug_float_reserve5','svc_debug_float_reserve6','svc_debug_float_reserve7','svc_debug_float_reserve8','svc_debug_float_reserve9','svc_debug_float_reserve10','svc_debug_int32_reserve1','svc_debug_int32_reserve2','svc_debug_int32_reserve3','svc_debug_int32_reserve4','svc_debug_int32_reserve5','svc_debug_int32_reserve6','svc_debug_int32_reserve7','svc_debug_int32_reserve8','svc_debug_int32_reserve9','svc_debug_int32_reserve10']
  _slot_types = ['int32','bool','bool','bool','bool','bool','bool','int32','int32','float32','float32','float32','float32','float32','float32','uint32','uint32','uint32','uint32','uint32','float32','uint32','uint32','uint32','rospy_message_converter/ParEnvAssociationInfo[]','uint32','uint32','uint32','uint32','uint32','float32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float32','uint32','uint32','uint32','rospy_message_converter/ParEnvAssociationInfo[]','uint32','uint32','uint32','uint32','uint32','rospy_message_converter/ParEnvAssociationInfo[]','uint32','rospy_message_converter/ParEnvObjectSegment[]','rospy_message_converter/ParEnvObjectPoint[]','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       module_state,vehicle_state_valid,uss_instance_valid,uss_instance_frame_updated,svc_instance_valid,svc_instance_frame_updated,is_psap_left,feature_type,feature_state,latest_location_odom_x,latest_location_odom_y,latest_location_odom_theta,latest_location_psap_x,latest_location_psap_y,latest_location_psap_theta,uss_valid_input_num,uss_high_filtered_num,uss_high_line_num,uss_high_point_num,uss_timesync_state,uss_timesync_reserve,uss_current_objects_num,uss_fused_objects_num,uss_associated_num,uss_pairing,uss_update_num,uss_increase_num,fs_input_num,fs_valid_num,fs_timesync_state,fs_timesync_reserve,fs_current_pts_num,fs_reserve_type1_num,fs_reserve_type2_num,fs_reserve_type3_num,fs_reserve_type4_num,fs_reserve_type5_num,od_input_num,od_valid_num,od_timesync_state,od_timesync_reserve,od_current_object_num,od_fused_objects_num,od_associated_num,od_pairing,od_reserve_type1_num,od_reserve_type2_num,od_reserve_type3_num,od_reserve_type4_num,od_reserve_type5_num,fusion_result,roi_filtered_num,roi_filtered_segments,roi_filtered_points,uss_debug_float_reserve1,uss_debug_float_reserve2,uss_debug_float_reserve3,uss_debug_float_reserve4,uss_debug_float_reserve5,uss_debug_float_reserve6,uss_debug_float_reserve7,uss_debug_float_reserve8,uss_debug_float_reserve9,uss_debug_float_reserve10,uss_debug_int32_reserve1,uss_debug_int32_reserve2,uss_debug_int32_reserve3,uss_debug_int32_reserve4,uss_debug_int32_reserve5,uss_debug_int32_reserve6,uss_debug_int32_reserve7,uss_debug_int32_reserve8,uss_debug_int32_reserve9,uss_debug_int32_reserve10,svc_debug_float_reserve1,svc_debug_float_reserve2,svc_debug_float_reserve3,svc_debug_float_reserve4,svc_debug_float_reserve5,svc_debug_float_reserve6,svc_debug_float_reserve7,svc_debug_float_reserve8,svc_debug_float_reserve9,svc_debug_float_reserve10,svc_debug_int32_reserve1,svc_debug_int32_reserve2,svc_debug_int32_reserve3,svc_debug_int32_reserve4,svc_debug_int32_reserve5,svc_debug_int32_reserve6,svc_debug_int32_reserve7,svc_debug_int32_reserve8,svc_debug_int32_reserve9,svc_debug_int32_reserve10

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParEnvObjectMapDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.module_state is None:
        self.module_state = 0
      if self.vehicle_state_valid is None:
        self.vehicle_state_valid = False
      if self.uss_instance_valid is None:
        self.uss_instance_valid = False
      if self.uss_instance_frame_updated is None:
        self.uss_instance_frame_updated = False
      if self.svc_instance_valid is None:
        self.svc_instance_valid = False
      if self.svc_instance_frame_updated is None:
        self.svc_instance_frame_updated = False
      if self.is_psap_left is None:
        self.is_psap_left = False
      if self.feature_type is None:
        self.feature_type = 0
      if self.feature_state is None:
        self.feature_state = 0
      if self.latest_location_odom_x is None:
        self.latest_location_odom_x = 0.
      if self.latest_location_odom_y is None:
        self.latest_location_odom_y = 0.
      if self.latest_location_odom_theta is None:
        self.latest_location_odom_theta = 0.
      if self.latest_location_psap_x is None:
        self.latest_location_psap_x = 0.
      if self.latest_location_psap_y is None:
        self.latest_location_psap_y = 0.
      if self.latest_location_psap_theta is None:
        self.latest_location_psap_theta = 0.
      if self.uss_valid_input_num is None:
        self.uss_valid_input_num = 0
      if self.uss_high_filtered_num is None:
        self.uss_high_filtered_num = 0
      if self.uss_high_line_num is None:
        self.uss_high_line_num = 0
      if self.uss_high_point_num is None:
        self.uss_high_point_num = 0
      if self.uss_timesync_state is None:
        self.uss_timesync_state = 0
      if self.uss_timesync_reserve is None:
        self.uss_timesync_reserve = 0.
      if self.uss_current_objects_num is None:
        self.uss_current_objects_num = 0
      if self.uss_fused_objects_num is None:
        self.uss_fused_objects_num = 0
      if self.uss_associated_num is None:
        self.uss_associated_num = 0
      if self.uss_pairing is None:
        self.uss_pairing = []
      if self.uss_update_num is None:
        self.uss_update_num = 0
      if self.uss_increase_num is None:
        self.uss_increase_num = 0
      if self.fs_input_num is None:
        self.fs_input_num = 0
      if self.fs_valid_num is None:
        self.fs_valid_num = 0
      if self.fs_timesync_state is None:
        self.fs_timesync_state = 0
      if self.fs_timesync_reserve is None:
        self.fs_timesync_reserve = 0.
      if self.fs_current_pts_num is None:
        self.fs_current_pts_num = 0
      if self.fs_reserve_type1_num is None:
        self.fs_reserve_type1_num = 0
      if self.fs_reserve_type2_num is None:
        self.fs_reserve_type2_num = 0
      if self.fs_reserve_type3_num is None:
        self.fs_reserve_type3_num = 0
      if self.fs_reserve_type4_num is None:
        self.fs_reserve_type4_num = 0
      if self.fs_reserve_type5_num is None:
        self.fs_reserve_type5_num = 0
      if self.od_input_num is None:
        self.od_input_num = 0
      if self.od_valid_num is None:
        self.od_valid_num = 0
      if self.od_timesync_state is None:
        self.od_timesync_state = 0
      if self.od_timesync_reserve is None:
        self.od_timesync_reserve = 0.
      if self.od_current_object_num is None:
        self.od_current_object_num = 0
      if self.od_fused_objects_num is None:
        self.od_fused_objects_num = 0
      if self.od_associated_num is None:
        self.od_associated_num = 0
      if self.od_pairing is None:
        self.od_pairing = []
      if self.od_reserve_type1_num is None:
        self.od_reserve_type1_num = 0
      if self.od_reserve_type2_num is None:
        self.od_reserve_type2_num = 0
      if self.od_reserve_type3_num is None:
        self.od_reserve_type3_num = 0
      if self.od_reserve_type4_num is None:
        self.od_reserve_type4_num = 0
      if self.od_reserve_type5_num is None:
        self.od_reserve_type5_num = 0
      if self.fusion_result is None:
        self.fusion_result = []
      if self.roi_filtered_num is None:
        self.roi_filtered_num = 0
      if self.roi_filtered_segments is None:
        self.roi_filtered_segments = []
      if self.roi_filtered_points is None:
        self.roi_filtered_points = []
      if self.uss_debug_float_reserve1 is None:
        self.uss_debug_float_reserve1 = 0.
      if self.uss_debug_float_reserve2 is None:
        self.uss_debug_float_reserve2 = 0.
      if self.uss_debug_float_reserve3 is None:
        self.uss_debug_float_reserve3 = 0.
      if self.uss_debug_float_reserve4 is None:
        self.uss_debug_float_reserve4 = 0.
      if self.uss_debug_float_reserve5 is None:
        self.uss_debug_float_reserve5 = 0.
      if self.uss_debug_float_reserve6 is None:
        self.uss_debug_float_reserve6 = 0.
      if self.uss_debug_float_reserve7 is None:
        self.uss_debug_float_reserve7 = 0.
      if self.uss_debug_float_reserve8 is None:
        self.uss_debug_float_reserve8 = 0.
      if self.uss_debug_float_reserve9 is None:
        self.uss_debug_float_reserve9 = 0.
      if self.uss_debug_float_reserve10 is None:
        self.uss_debug_float_reserve10 = 0.
      if self.uss_debug_int32_reserve1 is None:
        self.uss_debug_int32_reserve1 = 0
      if self.uss_debug_int32_reserve2 is None:
        self.uss_debug_int32_reserve2 = 0
      if self.uss_debug_int32_reserve3 is None:
        self.uss_debug_int32_reserve3 = 0
      if self.uss_debug_int32_reserve4 is None:
        self.uss_debug_int32_reserve4 = 0
      if self.uss_debug_int32_reserve5 is None:
        self.uss_debug_int32_reserve5 = 0
      if self.uss_debug_int32_reserve6 is None:
        self.uss_debug_int32_reserve6 = 0
      if self.uss_debug_int32_reserve7 is None:
        self.uss_debug_int32_reserve7 = 0
      if self.uss_debug_int32_reserve8 is None:
        self.uss_debug_int32_reserve8 = 0
      if self.uss_debug_int32_reserve9 is None:
        self.uss_debug_int32_reserve9 = 0
      if self.uss_debug_int32_reserve10 is None:
        self.uss_debug_int32_reserve10 = 0
      if self.svc_debug_float_reserve1 is None:
        self.svc_debug_float_reserve1 = 0.
      if self.svc_debug_float_reserve2 is None:
        self.svc_debug_float_reserve2 = 0.
      if self.svc_debug_float_reserve3 is None:
        self.svc_debug_float_reserve3 = 0.
      if self.svc_debug_float_reserve4 is None:
        self.svc_debug_float_reserve4 = 0.
      if self.svc_debug_float_reserve5 is None:
        self.svc_debug_float_reserve5 = 0.
      if self.svc_debug_float_reserve6 is None:
        self.svc_debug_float_reserve6 = 0.
      if self.svc_debug_float_reserve7 is None:
        self.svc_debug_float_reserve7 = 0.
      if self.svc_debug_float_reserve8 is None:
        self.svc_debug_float_reserve8 = 0.
      if self.svc_debug_float_reserve9 is None:
        self.svc_debug_float_reserve9 = 0.
      if self.svc_debug_float_reserve10 is None:
        self.svc_debug_float_reserve10 = 0.
      if self.svc_debug_int32_reserve1 is None:
        self.svc_debug_int32_reserve1 = 0
      if self.svc_debug_int32_reserve2 is None:
        self.svc_debug_int32_reserve2 = 0
      if self.svc_debug_int32_reserve3 is None:
        self.svc_debug_int32_reserve3 = 0
      if self.svc_debug_int32_reserve4 is None:
        self.svc_debug_int32_reserve4 = 0
      if self.svc_debug_int32_reserve5 is None:
        self.svc_debug_int32_reserve5 = 0
      if self.svc_debug_int32_reserve6 is None:
        self.svc_debug_int32_reserve6 = 0
      if self.svc_debug_int32_reserve7 is None:
        self.svc_debug_int32_reserve7 = 0
      if self.svc_debug_int32_reserve8 is None:
        self.svc_debug_int32_reserve8 = 0
      if self.svc_debug_int32_reserve9 is None:
        self.svc_debug_int32_reserve9 = 0
      if self.svc_debug_int32_reserve10 is None:
        self.svc_debug_int32_reserve10 = 0
    else:
      self.module_state = 0
      self.vehicle_state_valid = False
      self.uss_instance_valid = False
      self.uss_instance_frame_updated = False
      self.svc_instance_valid = False
      self.svc_instance_frame_updated = False
      self.is_psap_left = False
      self.feature_type = 0
      self.feature_state = 0
      self.latest_location_odom_x = 0.
      self.latest_location_odom_y = 0.
      self.latest_location_odom_theta = 0.
      self.latest_location_psap_x = 0.
      self.latest_location_psap_y = 0.
      self.latest_location_psap_theta = 0.
      self.uss_valid_input_num = 0
      self.uss_high_filtered_num = 0
      self.uss_high_line_num = 0
      self.uss_high_point_num = 0
      self.uss_timesync_state = 0
      self.uss_timesync_reserve = 0.
      self.uss_current_objects_num = 0
      self.uss_fused_objects_num = 0
      self.uss_associated_num = 0
      self.uss_pairing = []
      self.uss_update_num = 0
      self.uss_increase_num = 0
      self.fs_input_num = 0
      self.fs_valid_num = 0
      self.fs_timesync_state = 0
      self.fs_timesync_reserve = 0.
      self.fs_current_pts_num = 0
      self.fs_reserve_type1_num = 0
      self.fs_reserve_type2_num = 0
      self.fs_reserve_type3_num = 0
      self.fs_reserve_type4_num = 0
      self.fs_reserve_type5_num = 0
      self.od_input_num = 0
      self.od_valid_num = 0
      self.od_timesync_state = 0
      self.od_timesync_reserve = 0.
      self.od_current_object_num = 0
      self.od_fused_objects_num = 0
      self.od_associated_num = 0
      self.od_pairing = []
      self.od_reserve_type1_num = 0
      self.od_reserve_type2_num = 0
      self.od_reserve_type3_num = 0
      self.od_reserve_type4_num = 0
      self.od_reserve_type5_num = 0
      self.fusion_result = []
      self.roi_filtered_num = 0
      self.roi_filtered_segments = []
      self.roi_filtered_points = []
      self.uss_debug_float_reserve1 = 0.
      self.uss_debug_float_reserve2 = 0.
      self.uss_debug_float_reserve3 = 0.
      self.uss_debug_float_reserve4 = 0.
      self.uss_debug_float_reserve5 = 0.
      self.uss_debug_float_reserve6 = 0.
      self.uss_debug_float_reserve7 = 0.
      self.uss_debug_float_reserve8 = 0.
      self.uss_debug_float_reserve9 = 0.
      self.uss_debug_float_reserve10 = 0.
      self.uss_debug_int32_reserve1 = 0
      self.uss_debug_int32_reserve2 = 0
      self.uss_debug_int32_reserve3 = 0
      self.uss_debug_int32_reserve4 = 0
      self.uss_debug_int32_reserve5 = 0
      self.uss_debug_int32_reserve6 = 0
      self.uss_debug_int32_reserve7 = 0
      self.uss_debug_int32_reserve8 = 0
      self.uss_debug_int32_reserve9 = 0
      self.uss_debug_int32_reserve10 = 0
      self.svc_debug_float_reserve1 = 0.
      self.svc_debug_float_reserve2 = 0.
      self.svc_debug_float_reserve3 = 0.
      self.svc_debug_float_reserve4 = 0.
      self.svc_debug_float_reserve5 = 0.
      self.svc_debug_float_reserve6 = 0.
      self.svc_debug_float_reserve7 = 0.
      self.svc_debug_float_reserve8 = 0.
      self.svc_debug_float_reserve9 = 0.
      self.svc_debug_float_reserve10 = 0.
      self.svc_debug_int32_reserve1 = 0
      self.svc_debug_int32_reserve2 = 0
      self.svc_debug_int32_reserve3 = 0
      self.svc_debug_int32_reserve4 = 0
      self.svc_debug_int32_reserve5 = 0
      self.svc_debug_int32_reserve6 = 0
      self.svc_debug_int32_reserve7 = 0
      self.svc_debug_int32_reserve8 = 0
      self.svc_debug_int32_reserve9 = 0
      self.svc_debug_int32_reserve10 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6B2i6f5If3I().pack(_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.uss_instance_frame_updated, _x.svc_instance_valid, _x.svc_instance_frame_updated, _x.is_psap_left, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.uss_valid_input_num, _x.uss_high_filtered_num, _x.uss_high_line_num, _x.uss_high_point_num, _x.uss_timesync_state, _x.uss_timesync_reserve, _x.uss_current_objects_num, _x.uss_fused_objects_num, _x.uss_associated_num))
      length = len(self.uss_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.uss_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v1 = val1.obj1
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v2 = _v1.pt
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = _v1.line
        _v4 = _v3.pt1
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v5 = _v3.pt2
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v6 = _v1.polygon
        length = len(_v6.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v6.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v7 = val1.obj2
        _x = _v7
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v8 = _v7.pt
        _x = _v8
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v9 = _v7.line
        _v10 = _v9.pt1
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = _v9.pt2
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = _v7.polygon
        length = len(_v12.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v12.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5If9If3I().pack(_x.uss_update_num, _x.uss_increase_num, _x.fs_input_num, _x.fs_valid_num, _x.fs_timesync_state, _x.fs_timesync_reserve, _x.fs_current_pts_num, _x.fs_reserve_type1_num, _x.fs_reserve_type2_num, _x.fs_reserve_type3_num, _x.fs_reserve_type4_num, _x.fs_reserve_type5_num, _x.od_input_num, _x.od_valid_num, _x.od_timesync_state, _x.od_timesync_reserve, _x.od_current_object_num, _x.od_fused_objects_num, _x.od_associated_num))
      length = len(self.od_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v13 = val1.obj1
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v14 = _v13.pt
        _x = _v14
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v15 = _v13.line
        _v16 = _v15.pt1
        _x = _v16
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v17 = _v15.pt2
        _x = _v17
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v18 = _v13.polygon
        length = len(_v18.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v18.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v19 = val1.obj2
        _x = _v19
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v20 = _v19.pt
        _x = _v20
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v21 = _v19.line
        _v22 = _v21.pt1
        _x = _v22
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v23 = _v21.pt2
        _x = _v23
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v24 = _v19.polygon
        length = len(_v24.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v24.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5I().pack(_x.od_reserve_type1_num, _x.od_reserve_type2_num, _x.od_reserve_type3_num, _x.od_reserve_type4_num, _x.od_reserve_type5_num))
      length = len(self.fusion_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.fusion_result:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v25 = val1.obj1
        _x = _v25
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v26 = _v25.pt
        _x = _v26
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v27 = _v25.line
        _v28 = _v27.pt1
        _x = _v28
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v29 = _v27.pt2
        _x = _v29
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v30 = _v25.polygon
        length = len(_v30.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v30.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v31 = val1.obj2
        _x = _v31
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v32 = _v31.pt
        _x = _v32
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v33 = _v31.line
        _v34 = _v33.pt1
        _x = _v34
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v35 = _v33.pt2
        _x = _v35
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v36 = _v31.polygon
        length = len(_v36.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v36.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self.roi_filtered_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.roi_filtered_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.roi_filtered_segments:
        _v37 = val1.pt1
        _x = _v37
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v38 = val1.pt2
        _x = _v38
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.roi_filtered_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.roi_filtered_points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_10f10i10f10i().pack(_x.uss_debug_float_reserve1, _x.uss_debug_float_reserve2, _x.uss_debug_float_reserve3, _x.uss_debug_float_reserve4, _x.uss_debug_float_reserve5, _x.uss_debug_float_reserve6, _x.uss_debug_float_reserve7, _x.uss_debug_float_reserve8, _x.uss_debug_float_reserve9, _x.uss_debug_float_reserve10, _x.uss_debug_int32_reserve1, _x.uss_debug_int32_reserve2, _x.uss_debug_int32_reserve3, _x.uss_debug_int32_reserve4, _x.uss_debug_int32_reserve5, _x.uss_debug_int32_reserve6, _x.uss_debug_int32_reserve7, _x.uss_debug_int32_reserve8, _x.uss_debug_int32_reserve9, _x.uss_debug_int32_reserve10, _x.svc_debug_float_reserve1, _x.svc_debug_float_reserve2, _x.svc_debug_float_reserve3, _x.svc_debug_float_reserve4, _x.svc_debug_float_reserve5, _x.svc_debug_float_reserve6, _x.svc_debug_float_reserve7, _x.svc_debug_float_reserve8, _x.svc_debug_float_reserve9, _x.svc_debug_float_reserve10, _x.svc_debug_int32_reserve1, _x.svc_debug_int32_reserve2, _x.svc_debug_int32_reserve3, _x.svc_debug_int32_reserve4, _x.svc_debug_int32_reserve5, _x.svc_debug_int32_reserve6, _x.svc_debug_int32_reserve7, _x.svc_debug_int32_reserve8, _x.svc_debug_int32_reserve9, _x.svc_debug_int32_reserve10))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.uss_pairing is None:
        self.uss_pairing = None
      if self.od_pairing is None:
        self.od_pairing = None
      if self.fusion_result is None:
        self.fusion_result = None
      if self.roi_filtered_segments is None:
        self.roi_filtered_segments = None
      if self.roi_filtered_points is None:
        self.roi_filtered_points = None
      end = 0
      _x = self
      start = end
      end += 78
      (_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.uss_instance_frame_updated, _x.svc_instance_valid, _x.svc_instance_frame_updated, _x.is_psap_left, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.uss_valid_input_num, _x.uss_high_filtered_num, _x.uss_high_line_num, _x.uss_high_point_num, _x.uss_timesync_state, _x.uss_timesync_reserve, _x.uss_current_objects_num, _x.uss_fused_objects_num, _x.uss_associated_num,) = _get_struct_i6B2i6f5If3I().unpack(str[start:end])
      self.vehicle_state_valid = bool(self.vehicle_state_valid)
      self.uss_instance_valid = bool(self.uss_instance_valid)
      self.uss_instance_frame_updated = bool(self.uss_instance_frame_updated)
      self.svc_instance_valid = bool(self.svc_instance_valid)
      self.svc_instance_frame_updated = bool(self.svc_instance_frame_updated)
      self.is_psap_left = bool(self.is_psap_left)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uss_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v39 = val1.obj1
        _x = _v39
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v40 = _v39.pt
        _x = _v40
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v41 = _v39.line
        _v42 = _v41.pt1
        _x = _v42
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v43 = _v41.pt2
        _x = _v43
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v44 = _v39.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v44.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v44.pts.append(val4)
        _v45 = val1.obj2
        _x = _v45
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v46 = _v45.pt
        _x = _v46
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v47 = _v45.line
        _v48 = _v47.pt1
        _x = _v48
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v49 = _v47.pt2
        _x = _v49
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v50 = _v45.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v50.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v50.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.uss_pairing.append(val1)
      _x = self
      start = end
      end += 76
      (_x.uss_update_num, _x.uss_increase_num, _x.fs_input_num, _x.fs_valid_num, _x.fs_timesync_state, _x.fs_timesync_reserve, _x.fs_current_pts_num, _x.fs_reserve_type1_num, _x.fs_reserve_type2_num, _x.fs_reserve_type3_num, _x.fs_reserve_type4_num, _x.fs_reserve_type5_num, _x.od_input_num, _x.od_valid_num, _x.od_timesync_state, _x.od_timesync_reserve, _x.od_current_object_num, _x.od_fused_objects_num, _x.od_associated_num,) = _get_struct_5If9If3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v51 = val1.obj1
        _x = _v51
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v52 = _v51.pt
        _x = _v52
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v53 = _v51.line
        _v54 = _v53.pt1
        _x = _v54
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v55 = _v53.pt2
        _x = _v55
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v56 = _v51.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v56.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v56.pts.append(val4)
        _v57 = val1.obj2
        _x = _v57
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v58 = _v57.pt
        _x = _v58
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v59 = _v57.line
        _v60 = _v59.pt1
        _x = _v60
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v61 = _v59.pt2
        _x = _v61
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v62 = _v57.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v62.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v62.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.od_pairing.append(val1)
      _x = self
      start = end
      end += 20
      (_x.od_reserve_type1_num, _x.od_reserve_type2_num, _x.od_reserve_type3_num, _x.od_reserve_type4_num, _x.od_reserve_type5_num,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fusion_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v63 = val1.obj1
        _x = _v63
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v64 = _v63.pt
        _x = _v64
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v65 = _v63.line
        _v66 = _v65.pt1
        _x = _v66
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v67 = _v65.pt2
        _x = _v67
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v68 = _v63.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v68.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v68.pts.append(val4)
        _v69 = val1.obj2
        _x = _v69
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v70 = _v69.pt
        _x = _v70
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v71 = _v69.line
        _v72 = _v71.pt1
        _x = _v72
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v73 = _v71.pt2
        _x = _v73
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v74 = _v69.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v74.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v74.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.fusion_result.append(val1)
      start = end
      end += 4
      (self.roi_filtered_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roi_filtered_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectSegment()
        _v75 = val1.pt1
        _x = _v75
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v76 = val1.pt2
        _x = _v76
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.roi_filtered_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roi_filtered_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.roi_filtered_points.append(val1)
      _x = self
      start = end
      end += 160
      (_x.uss_debug_float_reserve1, _x.uss_debug_float_reserve2, _x.uss_debug_float_reserve3, _x.uss_debug_float_reserve4, _x.uss_debug_float_reserve5, _x.uss_debug_float_reserve6, _x.uss_debug_float_reserve7, _x.uss_debug_float_reserve8, _x.uss_debug_float_reserve9, _x.uss_debug_float_reserve10, _x.uss_debug_int32_reserve1, _x.uss_debug_int32_reserve2, _x.uss_debug_int32_reserve3, _x.uss_debug_int32_reserve4, _x.uss_debug_int32_reserve5, _x.uss_debug_int32_reserve6, _x.uss_debug_int32_reserve7, _x.uss_debug_int32_reserve8, _x.uss_debug_int32_reserve9, _x.uss_debug_int32_reserve10, _x.svc_debug_float_reserve1, _x.svc_debug_float_reserve2, _x.svc_debug_float_reserve3, _x.svc_debug_float_reserve4, _x.svc_debug_float_reserve5, _x.svc_debug_float_reserve6, _x.svc_debug_float_reserve7, _x.svc_debug_float_reserve8, _x.svc_debug_float_reserve9, _x.svc_debug_float_reserve10, _x.svc_debug_int32_reserve1, _x.svc_debug_int32_reserve2, _x.svc_debug_int32_reserve3, _x.svc_debug_int32_reserve4, _x.svc_debug_int32_reserve5, _x.svc_debug_int32_reserve6, _x.svc_debug_int32_reserve7, _x.svc_debug_int32_reserve8, _x.svc_debug_int32_reserve9, _x.svc_debug_int32_reserve10,) = _get_struct_10f10i10f10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6B2i6f5If3I().pack(_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.uss_instance_frame_updated, _x.svc_instance_valid, _x.svc_instance_frame_updated, _x.is_psap_left, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.uss_valid_input_num, _x.uss_high_filtered_num, _x.uss_high_line_num, _x.uss_high_point_num, _x.uss_timesync_state, _x.uss_timesync_reserve, _x.uss_current_objects_num, _x.uss_fused_objects_num, _x.uss_associated_num))
      length = len(self.uss_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.uss_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v77 = val1.obj1
        _x = _v77
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v78 = _v77.pt
        _x = _v78
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v79 = _v77.line
        _v80 = _v79.pt1
        _x = _v80
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v81 = _v79.pt2
        _x = _v81
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v82 = _v77.polygon
        length = len(_v82.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v82.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v83 = val1.obj2
        _x = _v83
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v84 = _v83.pt
        _x = _v84
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v85 = _v83.line
        _v86 = _v85.pt1
        _x = _v86
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v87 = _v85.pt2
        _x = _v87
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v88 = _v83.polygon
        length = len(_v88.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v88.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5If9If3I().pack(_x.uss_update_num, _x.uss_increase_num, _x.fs_input_num, _x.fs_valid_num, _x.fs_timesync_state, _x.fs_timesync_reserve, _x.fs_current_pts_num, _x.fs_reserve_type1_num, _x.fs_reserve_type2_num, _x.fs_reserve_type3_num, _x.fs_reserve_type4_num, _x.fs_reserve_type5_num, _x.od_input_num, _x.od_valid_num, _x.od_timesync_state, _x.od_timesync_reserve, _x.od_current_object_num, _x.od_fused_objects_num, _x.od_associated_num))
      length = len(self.od_pairing)
      buff.write(_struct_I.pack(length))
      for val1 in self.od_pairing:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v89 = val1.obj1
        _x = _v89
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v90 = _v89.pt
        _x = _v90
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v91 = _v89.line
        _v92 = _v91.pt1
        _x = _v92
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v93 = _v91.pt2
        _x = _v93
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v94 = _v89.polygon
        length = len(_v94.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v94.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v95 = val1.obj2
        _x = _v95
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v96 = _v95.pt
        _x = _v96
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v97 = _v95.line
        _v98 = _v97.pt1
        _x = _v98
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v99 = _v97.pt2
        _x = _v99
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v100 = _v95.polygon
        length = len(_v100.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v100.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self
      buff.write(_get_struct_5I().pack(_x.od_reserve_type1_num, _x.od_reserve_type2_num, _x.od_reserve_type3_num, _x.od_reserve_type4_num, _x.od_reserve_type5_num))
      length = len(self.fusion_result)
      buff.write(_struct_I.pack(length))
      for val1 in self.fusion_result:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.index1, _x.index2))
        _v101 = val1.obj1
        _x = _v101
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v102 = _v101.pt
        _x = _v102
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v103 = _v101.line
        _v104 = _v103.pt1
        _x = _v104
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v105 = _v103.pt2
        _x = _v105
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v106 = _v101.polygon
        length = len(_v106.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v106.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v107 = val1.obj2
        _x = _v107
        buff.write(_get_struct_2i().pack(_x.type, _x.src))
        _v108 = _v107.pt
        _x = _v108
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v109 = _v107.line
        _v110 = _v109.pt1
        _x = _v110
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v111 = _v109.pt2
        _x = _v111
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v112 = _v107.polygon
        length = len(_v112.pts)
        buff.write(_struct_I.pack(length))
        for val4 in _v112.pts:
          _x = val4
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.reserve1, _x.reserve2))
      _x = self.roi_filtered_num
      buff.write(_get_struct_I().pack(_x))
      length = len(self.roi_filtered_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.roi_filtered_segments:
        _v113 = val1.pt1
        _x = _v113
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v114 = val1.pt2
        _x = _v114
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.roi_filtered_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.roi_filtered_points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_10f10i10f10i().pack(_x.uss_debug_float_reserve1, _x.uss_debug_float_reserve2, _x.uss_debug_float_reserve3, _x.uss_debug_float_reserve4, _x.uss_debug_float_reserve5, _x.uss_debug_float_reserve6, _x.uss_debug_float_reserve7, _x.uss_debug_float_reserve8, _x.uss_debug_float_reserve9, _x.uss_debug_float_reserve10, _x.uss_debug_int32_reserve1, _x.uss_debug_int32_reserve2, _x.uss_debug_int32_reserve3, _x.uss_debug_int32_reserve4, _x.uss_debug_int32_reserve5, _x.uss_debug_int32_reserve6, _x.uss_debug_int32_reserve7, _x.uss_debug_int32_reserve8, _x.uss_debug_int32_reserve9, _x.uss_debug_int32_reserve10, _x.svc_debug_float_reserve1, _x.svc_debug_float_reserve2, _x.svc_debug_float_reserve3, _x.svc_debug_float_reserve4, _x.svc_debug_float_reserve5, _x.svc_debug_float_reserve6, _x.svc_debug_float_reserve7, _x.svc_debug_float_reserve8, _x.svc_debug_float_reserve9, _x.svc_debug_float_reserve10, _x.svc_debug_int32_reserve1, _x.svc_debug_int32_reserve2, _x.svc_debug_int32_reserve3, _x.svc_debug_int32_reserve4, _x.svc_debug_int32_reserve5, _x.svc_debug_int32_reserve6, _x.svc_debug_int32_reserve7, _x.svc_debug_int32_reserve8, _x.svc_debug_int32_reserve9, _x.svc_debug_int32_reserve10))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.uss_pairing is None:
        self.uss_pairing = None
      if self.od_pairing is None:
        self.od_pairing = None
      if self.fusion_result is None:
        self.fusion_result = None
      if self.roi_filtered_segments is None:
        self.roi_filtered_segments = None
      if self.roi_filtered_points is None:
        self.roi_filtered_points = None
      end = 0
      _x = self
      start = end
      end += 78
      (_x.module_state, _x.vehicle_state_valid, _x.uss_instance_valid, _x.uss_instance_frame_updated, _x.svc_instance_valid, _x.svc_instance_frame_updated, _x.is_psap_left, _x.feature_type, _x.feature_state, _x.latest_location_odom_x, _x.latest_location_odom_y, _x.latest_location_odom_theta, _x.latest_location_psap_x, _x.latest_location_psap_y, _x.latest_location_psap_theta, _x.uss_valid_input_num, _x.uss_high_filtered_num, _x.uss_high_line_num, _x.uss_high_point_num, _x.uss_timesync_state, _x.uss_timesync_reserve, _x.uss_current_objects_num, _x.uss_fused_objects_num, _x.uss_associated_num,) = _get_struct_i6B2i6f5If3I().unpack(str[start:end])
      self.vehicle_state_valid = bool(self.vehicle_state_valid)
      self.uss_instance_valid = bool(self.uss_instance_valid)
      self.uss_instance_frame_updated = bool(self.uss_instance_frame_updated)
      self.svc_instance_valid = bool(self.svc_instance_valid)
      self.svc_instance_frame_updated = bool(self.svc_instance_frame_updated)
      self.is_psap_left = bool(self.is_psap_left)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uss_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v115 = val1.obj1
        _x = _v115
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v116 = _v115.pt
        _x = _v116
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v117 = _v115.line
        _v118 = _v117.pt1
        _x = _v118
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v119 = _v117.pt2
        _x = _v119
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v120 = _v115.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v120.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v120.pts.append(val4)
        _v121 = val1.obj2
        _x = _v121
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v122 = _v121.pt
        _x = _v122
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v123 = _v121.line
        _v124 = _v123.pt1
        _x = _v124
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v125 = _v123.pt2
        _x = _v125
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v126 = _v121.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v126.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v126.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.uss_pairing.append(val1)
      _x = self
      start = end
      end += 76
      (_x.uss_update_num, _x.uss_increase_num, _x.fs_input_num, _x.fs_valid_num, _x.fs_timesync_state, _x.fs_timesync_reserve, _x.fs_current_pts_num, _x.fs_reserve_type1_num, _x.fs_reserve_type2_num, _x.fs_reserve_type3_num, _x.fs_reserve_type4_num, _x.fs_reserve_type5_num, _x.od_input_num, _x.od_valid_num, _x.od_timesync_state, _x.od_timesync_reserve, _x.od_current_object_num, _x.od_fused_objects_num, _x.od_associated_num,) = _get_struct_5If9If3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.od_pairing = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v127 = val1.obj1
        _x = _v127
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v128 = _v127.pt
        _x = _v128
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v129 = _v127.line
        _v130 = _v129.pt1
        _x = _v130
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v131 = _v129.pt2
        _x = _v131
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v132 = _v127.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v132.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v132.pts.append(val4)
        _v133 = val1.obj2
        _x = _v133
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v134 = _v133.pt
        _x = _v134
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v135 = _v133.line
        _v136 = _v135.pt1
        _x = _v136
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v137 = _v135.pt2
        _x = _v137
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v138 = _v133.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v138.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.od_pairing.append(val1)
      _x = self
      start = end
      end += 20
      (_x.od_reserve_type1_num, _x.od_reserve_type2_num, _x.od_reserve_type3_num, _x.od_reserve_type4_num, _x.od_reserve_type5_num,) = _get_struct_5I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fusion_result = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvAssociationInfo()
        _x = val1
        start = end
        end += 8
        (_x.index1, _x.index2,) = _get_struct_2i().unpack(str[start:end])
        _v139 = val1.obj1
        _x = _v139
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v140 = _v139.pt
        _x = _v140
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v141 = _v139.line
        _v142 = _v141.pt1
        _x = _v142
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v143 = _v141.pt2
        _x = _v143
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v144 = _v139.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v144.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v144.pts.append(val4)
        _v145 = val1.obj2
        _x = _v145
        start = end
        end += 8
        (_x.type, _x.src,) = _get_struct_2i().unpack(str[start:end])
        _v146 = _v145.pt
        _x = _v146
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v147 = _v145.line
        _v148 = _v147.pt1
        _x = _v148
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v149 = _v147.pt2
        _x = _v149
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v150 = _v145.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.pts = []
        for i in range(0, length):
          val4 = rospy_message_converter.msg.ParEnvObjectPoint()
          _x = val4
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
          _v150.pts.append(val4)
        _x = val1
        start = end
        end += 8
        (_x.reserve1, _x.reserve2,) = _get_struct_2i().unpack(str[start:end])
        self.fusion_result.append(val1)
      start = end
      end += 4
      (self.roi_filtered_num,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roi_filtered_segments = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectSegment()
        _v151 = val1.pt1
        _x = _v151
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v152 = val1.pt2
        _x = _v152
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.roi_filtered_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roi_filtered_points = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.ParEnvObjectPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.roi_filtered_points.append(val1)
      _x = self
      start = end
      end += 160
      (_x.uss_debug_float_reserve1, _x.uss_debug_float_reserve2, _x.uss_debug_float_reserve3, _x.uss_debug_float_reserve4, _x.uss_debug_float_reserve5, _x.uss_debug_float_reserve6, _x.uss_debug_float_reserve7, _x.uss_debug_float_reserve8, _x.uss_debug_float_reserve9, _x.uss_debug_float_reserve10, _x.uss_debug_int32_reserve1, _x.uss_debug_int32_reserve2, _x.uss_debug_int32_reserve3, _x.uss_debug_int32_reserve4, _x.uss_debug_int32_reserve5, _x.uss_debug_int32_reserve6, _x.uss_debug_int32_reserve7, _x.uss_debug_int32_reserve8, _x.uss_debug_int32_reserve9, _x.uss_debug_int32_reserve10, _x.svc_debug_float_reserve1, _x.svc_debug_float_reserve2, _x.svc_debug_float_reserve3, _x.svc_debug_float_reserve4, _x.svc_debug_float_reserve5, _x.svc_debug_float_reserve6, _x.svc_debug_float_reserve7, _x.svc_debug_float_reserve8, _x.svc_debug_float_reserve9, _x.svc_debug_float_reserve10, _x.svc_debug_int32_reserve1, _x.svc_debug_int32_reserve2, _x.svc_debug_int32_reserve3, _x.svc_debug_int32_reserve4, _x.svc_debug_int32_reserve5, _x.svc_debug_int32_reserve6, _x.svc_debug_int32_reserve7, _x.svc_debug_int32_reserve8, _x.svc_debug_int32_reserve9, _x.svc_debug_int32_reserve10,) = _get_struct_10f10i10f10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f10i10f10i = None
def _get_struct_10f10i10f10i():
    global _struct_10f10i10f10i
    if _struct_10f10i10f10i is None:
        _struct_10f10i10f10i = struct.Struct("<10f10i10f10i")
    return _struct_10f10i10f10i
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_5I = None
def _get_struct_5I():
    global _struct_5I
    if _struct_5I is None:
        _struct_5I = struct.Struct("<5I")
    return _struct_5I
_struct_5If9If3I = None
def _get_struct_5If9If3I():
    global _struct_5If9If3I
    if _struct_5If9If3I is None:
        _struct_5If9If3I = struct.Struct("<5If9If3I")
    return _struct_5If9If3I
_struct_i6B2i6f5If3I = None
def _get_struct_i6B2i6f5If3I():
    global _struct_i6B2i6f5If3I
    if _struct_i6B2i6f5If3I is None:
        _struct_i6B2i6f5If3I = struct.Struct("<i6B2i6f5If3I")
    return _struct_i6B2i6f5If3I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EPS1FeatureFimInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EPS1FeatureFimInfo(genpy.Message):
  _md5sum = "4266029d6ff2277e888fa9ad2ab9e1ce"
  _type = "rospy_message_converter/EPS1FeatureFimInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool FIM_CHS1_EPS1_EPS1_Sts_Invalid
bool FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid
bool FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid
bool FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid
bool FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid
bool FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid
bool FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid
bool FIM_CHS1_EPS1_ADCACIOrAvl
"""
  __slots__ = ['FIM_CHS1_EPS1_EPS1_Sts_Invalid','FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid','FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid','FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid','FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid','FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid','FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid','FIM_CHS1_EPS1_ADCACIOrAvl']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FIM_CHS1_EPS1_EPS1_Sts_Invalid,FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid,FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid,FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid,FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid,FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid,FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid,FIM_CHS1_EPS1_ADCACIOrAvl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EPS1FeatureFimInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FIM_CHS1_EPS1_EPS1_Sts_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_Sts_Invalid = False
      if self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid = False
      if self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid = False
      if self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid = False
      if self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid = False
      if self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid = False
      if self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid is None:
        self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid = False
      if self.FIM_CHS1_EPS1_ADCACIOrAvl is None:
        self.FIM_CHS1_EPS1_ADCACIOrAvl = False
    else:
      self.FIM_CHS1_EPS1_EPS1_Sts_Invalid = False
      self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid = False
      self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid = False
      self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid = False
      self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid = False
      self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid = False
      self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid = False
      self.FIM_CHS1_EPS1_ADCACIOrAvl = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.FIM_CHS1_EPS1_EPS1_Sts_Invalid, _x.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid, _x.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_ADCACIOrAvl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.FIM_CHS1_EPS1_EPS1_Sts_Invalid, _x.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid, _x.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_ADCACIOrAvl,) = _get_struct_8B().unpack(str[start:end])
      self.FIM_CHS1_EPS1_EPS1_Sts_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_Sts_Invalid)
      self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid)
      self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid)
      self.FIM_CHS1_EPS1_ADCACIOrAvl = bool(self.FIM_CHS1_EPS1_ADCACIOrAvl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.FIM_CHS1_EPS1_EPS1_Sts_Invalid, _x.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid, _x.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_ADCACIOrAvl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.FIM_CHS1_EPS1_EPS1_Sts_Invalid, _x.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid, _x.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid, _x.FIM_CHS1_EPS1_ADCACIOrAvl,) = _get_struct_8B().unpack(str[start:end])
      self.FIM_CHS1_EPS1_EPS1_Sts_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_Sts_Invalid)
      self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_ActvExtIf_Invalid)
      self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_PinAngVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_TorsBarTqVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_EstRackForceVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_ACIMotorTqVal_Invalid)
      self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid = bool(self.FIM_CHS1_EPS1_EPS1_TotMotorTqVal_Invalid)
      self.FIM_CHS1_EPS1_ADCACIOrAvl = bool(self.FIM_CHS1_EPS1_ADCACIOrAvl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/BCMFeatureFaultInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BCMFeatureFaultInfo(genpy.Message):
  _md5sum = "3a4e14eae26f6e73bad9f02bc6aca34c"
  _type = "rospy_message_converter/BCMFeatureFaultInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool ADAS_BCM_HiBeamSts_Invalid
bool ADAS_BCM_LoBeamSts_Invalid
bool ADAS_BCM_FrntWiprSts_Invalid
bool ADAS_BCM_LeTurnIndcrLiSts_Invalid
bool ADAS_BCM_RiTurnIndcrLiSts_Invalid
bool CHS1_BCM_SeatOccpFrntLeSts_Invalid
bool ADAS_BCM_HoodAjarSts_Invalid
bool ADAS_BCM_DoorAjarSts_invalid
bool ADAS_BCM_FrontFogLight_Invalid
bool ADAS_BCM_RearFogLight_Invalid
bool CHS1_BCM_TrAjarSts_Invalid
bool CHS1_BCM_SeatOccpFrntLeFail_Failure
bool CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage
bool CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage
bool CHS1_BCM_ReLeTurnIndcn_Outage
bool CHS1_BCM_ReRiTurnIndcn_Outage
bool ADAS_WSHeatError_BCM
"""
  __slots__ = ['ADAS_BCM_HiBeamSts_Invalid','ADAS_BCM_LoBeamSts_Invalid','ADAS_BCM_FrntWiprSts_Invalid','ADAS_BCM_LeTurnIndcrLiSts_Invalid','ADAS_BCM_RiTurnIndcrLiSts_Invalid','CHS1_BCM_SeatOccpFrntLeSts_Invalid','ADAS_BCM_HoodAjarSts_Invalid','ADAS_BCM_DoorAjarSts_invalid','ADAS_BCM_FrontFogLight_Invalid','ADAS_BCM_RearFogLight_Invalid','CHS1_BCM_TrAjarSts_Invalid','CHS1_BCM_SeatOccpFrntLeFail_Failure','CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage','CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage','CHS1_BCM_ReLeTurnIndcn_Outage','CHS1_BCM_ReRiTurnIndcn_Outage','ADAS_WSHeatError_BCM']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ADAS_BCM_HiBeamSts_Invalid,ADAS_BCM_LoBeamSts_Invalid,ADAS_BCM_FrntWiprSts_Invalid,ADAS_BCM_LeTurnIndcrLiSts_Invalid,ADAS_BCM_RiTurnIndcrLiSts_Invalid,CHS1_BCM_SeatOccpFrntLeSts_Invalid,ADAS_BCM_HoodAjarSts_Invalid,ADAS_BCM_DoorAjarSts_invalid,ADAS_BCM_FrontFogLight_Invalid,ADAS_BCM_RearFogLight_Invalid,CHS1_BCM_TrAjarSts_Invalid,CHS1_BCM_SeatOccpFrntLeFail_Failure,CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage,CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage,CHS1_BCM_ReLeTurnIndcn_Outage,CHS1_BCM_ReRiTurnIndcn_Outage,ADAS_WSHeatError_BCM

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BCMFeatureFaultInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ADAS_BCM_HiBeamSts_Invalid is None:
        self.ADAS_BCM_HiBeamSts_Invalid = False
      if self.ADAS_BCM_LoBeamSts_Invalid is None:
        self.ADAS_BCM_LoBeamSts_Invalid = False
      if self.ADAS_BCM_FrntWiprSts_Invalid is None:
        self.ADAS_BCM_FrntWiprSts_Invalid = False
      if self.ADAS_BCM_LeTurnIndcrLiSts_Invalid is None:
        self.ADAS_BCM_LeTurnIndcrLiSts_Invalid = False
      if self.ADAS_BCM_RiTurnIndcrLiSts_Invalid is None:
        self.ADAS_BCM_RiTurnIndcrLiSts_Invalid = False
      if self.CHS1_BCM_SeatOccpFrntLeSts_Invalid is None:
        self.CHS1_BCM_SeatOccpFrntLeSts_Invalid = False
      if self.ADAS_BCM_HoodAjarSts_Invalid is None:
        self.ADAS_BCM_HoodAjarSts_Invalid = False
      if self.ADAS_BCM_DoorAjarSts_invalid is None:
        self.ADAS_BCM_DoorAjarSts_invalid = False
      if self.ADAS_BCM_FrontFogLight_Invalid is None:
        self.ADAS_BCM_FrontFogLight_Invalid = False
      if self.ADAS_BCM_RearFogLight_Invalid is None:
        self.ADAS_BCM_RearFogLight_Invalid = False
      if self.CHS1_BCM_TrAjarSts_Invalid is None:
        self.CHS1_BCM_TrAjarSts_Invalid = False
      if self.CHS1_BCM_SeatOccpFrntLeFail_Failure is None:
        self.CHS1_BCM_SeatOccpFrntLeFail_Failure = False
      if self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage is None:
        self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage = False
      if self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage is None:
        self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage = False
      if self.CHS1_BCM_ReLeTurnIndcn_Outage is None:
        self.CHS1_BCM_ReLeTurnIndcn_Outage = False
      if self.CHS1_BCM_ReRiTurnIndcn_Outage is None:
        self.CHS1_BCM_ReRiTurnIndcn_Outage = False
      if self.ADAS_WSHeatError_BCM is None:
        self.ADAS_WSHeatError_BCM = False
    else:
      self.ADAS_BCM_HiBeamSts_Invalid = False
      self.ADAS_BCM_LoBeamSts_Invalid = False
      self.ADAS_BCM_FrntWiprSts_Invalid = False
      self.ADAS_BCM_LeTurnIndcrLiSts_Invalid = False
      self.ADAS_BCM_RiTurnIndcrLiSts_Invalid = False
      self.CHS1_BCM_SeatOccpFrntLeSts_Invalid = False
      self.ADAS_BCM_HoodAjarSts_Invalid = False
      self.ADAS_BCM_DoorAjarSts_invalid = False
      self.ADAS_BCM_FrontFogLight_Invalid = False
      self.ADAS_BCM_RearFogLight_Invalid = False
      self.CHS1_BCM_TrAjarSts_Invalid = False
      self.CHS1_BCM_SeatOccpFrntLeFail_Failure = False
      self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage = False
      self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage = False
      self.CHS1_BCM_ReLeTurnIndcn_Outage = False
      self.CHS1_BCM_ReRiTurnIndcn_Outage = False
      self.ADAS_WSHeatError_BCM = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17B().pack(_x.ADAS_BCM_HiBeamSts_Invalid, _x.ADAS_BCM_LoBeamSts_Invalid, _x.ADAS_BCM_FrntWiprSts_Invalid, _x.ADAS_BCM_LeTurnIndcrLiSts_Invalid, _x.ADAS_BCM_RiTurnIndcrLiSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeSts_Invalid, _x.ADAS_BCM_HoodAjarSts_Invalid, _x.ADAS_BCM_DoorAjarSts_invalid, _x.ADAS_BCM_FrontFogLight_Invalid, _x.ADAS_BCM_RearFogLight_Invalid, _x.CHS1_BCM_TrAjarSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeFail_Failure, _x.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage, _x.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage, _x.CHS1_BCM_ReLeTurnIndcn_Outage, _x.CHS1_BCM_ReRiTurnIndcn_Outage, _x.ADAS_WSHeatError_BCM))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.ADAS_BCM_HiBeamSts_Invalid, _x.ADAS_BCM_LoBeamSts_Invalid, _x.ADAS_BCM_FrntWiprSts_Invalid, _x.ADAS_BCM_LeTurnIndcrLiSts_Invalid, _x.ADAS_BCM_RiTurnIndcrLiSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeSts_Invalid, _x.ADAS_BCM_HoodAjarSts_Invalid, _x.ADAS_BCM_DoorAjarSts_invalid, _x.ADAS_BCM_FrontFogLight_Invalid, _x.ADAS_BCM_RearFogLight_Invalid, _x.CHS1_BCM_TrAjarSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeFail_Failure, _x.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage, _x.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage, _x.CHS1_BCM_ReLeTurnIndcn_Outage, _x.CHS1_BCM_ReRiTurnIndcn_Outage, _x.ADAS_WSHeatError_BCM,) = _get_struct_17B().unpack(str[start:end])
      self.ADAS_BCM_HiBeamSts_Invalid = bool(self.ADAS_BCM_HiBeamSts_Invalid)
      self.ADAS_BCM_LoBeamSts_Invalid = bool(self.ADAS_BCM_LoBeamSts_Invalid)
      self.ADAS_BCM_FrntWiprSts_Invalid = bool(self.ADAS_BCM_FrntWiprSts_Invalid)
      self.ADAS_BCM_LeTurnIndcrLiSts_Invalid = bool(self.ADAS_BCM_LeTurnIndcrLiSts_Invalid)
      self.ADAS_BCM_RiTurnIndcrLiSts_Invalid = bool(self.ADAS_BCM_RiTurnIndcrLiSts_Invalid)
      self.CHS1_BCM_SeatOccpFrntLeSts_Invalid = bool(self.CHS1_BCM_SeatOccpFrntLeSts_Invalid)
      self.ADAS_BCM_HoodAjarSts_Invalid = bool(self.ADAS_BCM_HoodAjarSts_Invalid)
      self.ADAS_BCM_DoorAjarSts_invalid = bool(self.ADAS_BCM_DoorAjarSts_invalid)
      self.ADAS_BCM_FrontFogLight_Invalid = bool(self.ADAS_BCM_FrontFogLight_Invalid)
      self.ADAS_BCM_RearFogLight_Invalid = bool(self.ADAS_BCM_RearFogLight_Invalid)
      self.CHS1_BCM_TrAjarSts_Invalid = bool(self.CHS1_BCM_TrAjarSts_Invalid)
      self.CHS1_BCM_SeatOccpFrntLeFail_Failure = bool(self.CHS1_BCM_SeatOccpFrntLeFail_Failure)
      self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage = bool(self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage)
      self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage = bool(self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage)
      self.CHS1_BCM_ReLeTurnIndcn_Outage = bool(self.CHS1_BCM_ReLeTurnIndcn_Outage)
      self.CHS1_BCM_ReRiTurnIndcn_Outage = bool(self.CHS1_BCM_ReRiTurnIndcn_Outage)
      self.ADAS_WSHeatError_BCM = bool(self.ADAS_WSHeatError_BCM)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17B().pack(_x.ADAS_BCM_HiBeamSts_Invalid, _x.ADAS_BCM_LoBeamSts_Invalid, _x.ADAS_BCM_FrntWiprSts_Invalid, _x.ADAS_BCM_LeTurnIndcrLiSts_Invalid, _x.ADAS_BCM_RiTurnIndcrLiSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeSts_Invalid, _x.ADAS_BCM_HoodAjarSts_Invalid, _x.ADAS_BCM_DoorAjarSts_invalid, _x.ADAS_BCM_FrontFogLight_Invalid, _x.ADAS_BCM_RearFogLight_Invalid, _x.CHS1_BCM_TrAjarSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeFail_Failure, _x.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage, _x.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage, _x.CHS1_BCM_ReLeTurnIndcn_Outage, _x.CHS1_BCM_ReRiTurnIndcn_Outage, _x.ADAS_WSHeatError_BCM))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.ADAS_BCM_HiBeamSts_Invalid, _x.ADAS_BCM_LoBeamSts_Invalid, _x.ADAS_BCM_FrntWiprSts_Invalid, _x.ADAS_BCM_LeTurnIndcrLiSts_Invalid, _x.ADAS_BCM_RiTurnIndcrLiSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeSts_Invalid, _x.ADAS_BCM_HoodAjarSts_Invalid, _x.ADAS_BCM_DoorAjarSts_invalid, _x.ADAS_BCM_FrontFogLight_Invalid, _x.ADAS_BCM_RearFogLight_Invalid, _x.CHS1_BCM_TrAjarSts_Invalid, _x.CHS1_BCM_SeatOccpFrntLeFail_Failure, _x.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage, _x.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage, _x.CHS1_BCM_ReLeTurnIndcn_Outage, _x.CHS1_BCM_ReRiTurnIndcn_Outage, _x.ADAS_WSHeatError_BCM,) = _get_struct_17B().unpack(str[start:end])
      self.ADAS_BCM_HiBeamSts_Invalid = bool(self.ADAS_BCM_HiBeamSts_Invalid)
      self.ADAS_BCM_LoBeamSts_Invalid = bool(self.ADAS_BCM_LoBeamSts_Invalid)
      self.ADAS_BCM_FrntWiprSts_Invalid = bool(self.ADAS_BCM_FrntWiprSts_Invalid)
      self.ADAS_BCM_LeTurnIndcrLiSts_Invalid = bool(self.ADAS_BCM_LeTurnIndcrLiSts_Invalid)
      self.ADAS_BCM_RiTurnIndcrLiSts_Invalid = bool(self.ADAS_BCM_RiTurnIndcrLiSts_Invalid)
      self.CHS1_BCM_SeatOccpFrntLeSts_Invalid = bool(self.CHS1_BCM_SeatOccpFrntLeSts_Invalid)
      self.ADAS_BCM_HoodAjarSts_Invalid = bool(self.ADAS_BCM_HoodAjarSts_Invalid)
      self.ADAS_BCM_DoorAjarSts_invalid = bool(self.ADAS_BCM_DoorAjarSts_invalid)
      self.ADAS_BCM_FrontFogLight_Invalid = bool(self.ADAS_BCM_FrontFogLight_Invalid)
      self.ADAS_BCM_RearFogLight_Invalid = bool(self.ADAS_BCM_RearFogLight_Invalid)
      self.CHS1_BCM_TrAjarSts_Invalid = bool(self.CHS1_BCM_TrAjarSts_Invalid)
      self.CHS1_BCM_SeatOccpFrntLeFail_Failure = bool(self.CHS1_BCM_SeatOccpFrntLeFail_Failure)
      self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage = bool(self.CHS1_BCM_LgtErrTurnIndcnFrntLe_Outage)
      self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage = bool(self.CHS1_BCM_LgtErrTurnIndcnFrntRi_Outage)
      self.CHS1_BCM_ReLeTurnIndcn_Outage = bool(self.CHS1_BCM_ReLeTurnIndcn_Outage)
      self.CHS1_BCM_ReRiTurnIndcn_Outage = bool(self.CHS1_BCM_ReRiTurnIndcn_Outage)
      self.ADAS_WSHeatError_BCM = bool(self.ADAS_WSHeatError_BCM)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SummonStInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SummonStInfo(genpy.Message):
  _md5sum = "8b4a3ce3441a14a2fa92d525d82c919d"
  _type = "rospy_message_converter/SummonStInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 NBSInstruction
int32 NBSBlkage
uint32 NBSAbortReason
bool NBSBlkageFrntLe
bool NBSBlkageFrntRi
bool NBSBlkageReLe
bool NBSBlkageReRi
int32[] RpsDir_Avail
uint32 RpsTextInfo
int32 RpsSlotSts
uint32 RpsProgress
bool RpsStandstillReq
int32 RpsSts
int32 RpsLockUnlckCtrl
int32 RpsInstruction
uint32 RpsAbortReason
"""
  __slots__ = ['NBSInstruction','NBSBlkage','NBSAbortReason','NBSBlkageFrntLe','NBSBlkageFrntRi','NBSBlkageReLe','NBSBlkageReRi','RpsDir_Avail','RpsTextInfo','RpsSlotSts','RpsProgress','RpsStandstillReq','RpsSts','RpsLockUnlckCtrl','RpsInstruction','RpsAbortReason']
  _slot_types = ['uint32','int32','uint32','bool','bool','bool','bool','int32[]','uint32','int32','uint32','bool','int32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       NBSInstruction,NBSBlkage,NBSAbortReason,NBSBlkageFrntLe,NBSBlkageFrntRi,NBSBlkageReLe,NBSBlkageReRi,RpsDir_Avail,RpsTextInfo,RpsSlotSts,RpsProgress,RpsStandstillReq,RpsSts,RpsLockUnlckCtrl,RpsInstruction,RpsAbortReason

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SummonStInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.NBSInstruction is None:
        self.NBSInstruction = 0
      if self.NBSBlkage is None:
        self.NBSBlkage = 0
      if self.NBSAbortReason is None:
        self.NBSAbortReason = 0
      if self.NBSBlkageFrntLe is None:
        self.NBSBlkageFrntLe = False
      if self.NBSBlkageFrntRi is None:
        self.NBSBlkageFrntRi = False
      if self.NBSBlkageReLe is None:
        self.NBSBlkageReLe = False
      if self.NBSBlkageReRi is None:
        self.NBSBlkageReRi = False
      if self.RpsDir_Avail is None:
        self.RpsDir_Avail = []
      if self.RpsTextInfo is None:
        self.RpsTextInfo = 0
      if self.RpsSlotSts is None:
        self.RpsSlotSts = 0
      if self.RpsProgress is None:
        self.RpsProgress = 0
      if self.RpsStandstillReq is None:
        self.RpsStandstillReq = False
      if self.RpsSts is None:
        self.RpsSts = 0
      if self.RpsLockUnlckCtrl is None:
        self.RpsLockUnlckCtrl = 0
      if self.RpsInstruction is None:
        self.RpsInstruction = 0
      if self.RpsAbortReason is None:
        self.RpsAbortReason = 0
    else:
      self.NBSInstruction = 0
      self.NBSBlkage = 0
      self.NBSAbortReason = 0
      self.NBSBlkageFrntLe = False
      self.NBSBlkageFrntRi = False
      self.NBSBlkageReLe = False
      self.NBSBlkageReRi = False
      self.RpsDir_Avail = []
      self.RpsTextInfo = 0
      self.RpsSlotSts = 0
      self.RpsProgress = 0
      self.RpsStandstillReq = False
      self.RpsSts = 0
      self.RpsLockUnlckCtrl = 0
      self.RpsInstruction = 0
      self.RpsAbortReason = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IiI4B().pack(_x.NBSInstruction, _x.NBSBlkage, _x.NBSAbortReason, _x.NBSBlkageFrntLe, _x.NBSBlkageFrntRi, _x.NBSBlkageReLe, _x.NBSBlkageReRi))
      length = len(self.RpsDir_Avail)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.RpsDir_Avail))
      _x = self
      buff.write(_get_struct_IiIB3iI().pack(_x.RpsTextInfo, _x.RpsSlotSts, _x.RpsProgress, _x.RpsStandstillReq, _x.RpsSts, _x.RpsLockUnlckCtrl, _x.RpsInstruction, _x.RpsAbortReason))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.NBSInstruction, _x.NBSBlkage, _x.NBSAbortReason, _x.NBSBlkageFrntLe, _x.NBSBlkageFrntRi, _x.NBSBlkageReLe, _x.NBSBlkageReRi,) = _get_struct_IiI4B().unpack(str[start:end])
      self.NBSBlkageFrntLe = bool(self.NBSBlkageFrntLe)
      self.NBSBlkageFrntRi = bool(self.NBSBlkageFrntRi)
      self.NBSBlkageReLe = bool(self.NBSBlkageReLe)
      self.NBSBlkageReRi = bool(self.NBSBlkageReRi)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.RpsDir_Avail = s.unpack(str[start:end])
      _x = self
      start = end
      end += 29
      (_x.RpsTextInfo, _x.RpsSlotSts, _x.RpsProgress, _x.RpsStandstillReq, _x.RpsSts, _x.RpsLockUnlckCtrl, _x.RpsInstruction, _x.RpsAbortReason,) = _get_struct_IiIB3iI().unpack(str[start:end])
      self.RpsStandstillReq = bool(self.RpsStandstillReq)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IiI4B().pack(_x.NBSInstruction, _x.NBSBlkage, _x.NBSAbortReason, _x.NBSBlkageFrntLe, _x.NBSBlkageFrntRi, _x.NBSBlkageReLe, _x.NBSBlkageReRi))
      length = len(self.RpsDir_Avail)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.RpsDir_Avail.tostring())
      _x = self
      buff.write(_get_struct_IiIB3iI().pack(_x.RpsTextInfo, _x.RpsSlotSts, _x.RpsProgress, _x.RpsStandstillReq, _x.RpsSts, _x.RpsLockUnlckCtrl, _x.RpsInstruction, _x.RpsAbortReason))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.NBSInstruction, _x.NBSBlkage, _x.NBSAbortReason, _x.NBSBlkageFrntLe, _x.NBSBlkageFrntRi, _x.NBSBlkageReLe, _x.NBSBlkageReRi,) = _get_struct_IiI4B().unpack(str[start:end])
      self.NBSBlkageFrntLe = bool(self.NBSBlkageFrntLe)
      self.NBSBlkageFrntRi = bool(self.NBSBlkageFrntRi)
      self.NBSBlkageReLe = bool(self.NBSBlkageReLe)
      self.NBSBlkageReRi = bool(self.NBSBlkageReRi)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.RpsDir_Avail = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 29
      (_x.RpsTextInfo, _x.RpsSlotSts, _x.RpsProgress, _x.RpsStandstillReq, _x.RpsSts, _x.RpsLockUnlckCtrl, _x.RpsInstruction, _x.RpsAbortReason,) = _get_struct_IiIB3iI().unpack(str[start:end])
      self.RpsStandstillReq = bool(self.RpsStandstillReq)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IiI4B = None
def _get_struct_IiI4B():
    global _struct_IiI4B
    if _struct_IiI4B is None:
        _struct_IiI4B = struct.Struct("<IiI4B")
    return _struct_IiI4B
_struct_IiIB3iI = None
def _get_struct_IiIB3iI():
    global _struct_IiIB3iI
    if _struct_IiIB3iI is None:
        _struct_IiIB3iI = struct.Struct("<IiIB3iI")
    return _struct_IiIB3iI

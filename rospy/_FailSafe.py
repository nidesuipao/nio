# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FailSafe.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FailSafe(genpy.Message):
  _md5sum = "d0dffc93e32ada0427886a35b27e851d"
  _type = "rospy_message_converter/FailSafe"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 FS_Rain
uint32 FS_Fog
uint32 FS_Snow
uint32 FS_Full_Blockage
uint32 FS_Partial_Blockage
uint32 FS_Lowsun
uint32 FS_Sunray
uint32 FS_Splash
uint32 FS_Windshield_Frozen
uint32 FS_Out_Of_Calibration
uint32 FS_Out_Of_Focus
uint32 FS_Blur
uint32 FS_Smeared_Halo
uint32 FS_illuminance
"""
  __slots__ = ['FS_Rain','FS_Fog','FS_Snow','FS_Full_Blockage','FS_Partial_Blockage','FS_Lowsun','FS_Sunray','FS_Splash','FS_Windshield_Frozen','FS_Out_Of_Calibration','FS_Out_Of_Focus','FS_Blur','FS_Smeared_Halo','FS_illuminance']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FS_Rain,FS_Fog,FS_Snow,FS_Full_Blockage,FS_Partial_Blockage,FS_Lowsun,FS_Sunray,FS_Splash,FS_Windshield_Frozen,FS_Out_Of_Calibration,FS_Out_Of_Focus,FS_Blur,FS_Smeared_Halo,FS_illuminance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FailSafe, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FS_Rain is None:
        self.FS_Rain = 0
      if self.FS_Fog is None:
        self.FS_Fog = 0
      if self.FS_Snow is None:
        self.FS_Snow = 0
      if self.FS_Full_Blockage is None:
        self.FS_Full_Blockage = 0
      if self.FS_Partial_Blockage is None:
        self.FS_Partial_Blockage = 0
      if self.FS_Lowsun is None:
        self.FS_Lowsun = 0
      if self.FS_Sunray is None:
        self.FS_Sunray = 0
      if self.FS_Splash is None:
        self.FS_Splash = 0
      if self.FS_Windshield_Frozen is None:
        self.FS_Windshield_Frozen = 0
      if self.FS_Out_Of_Calibration is None:
        self.FS_Out_Of_Calibration = 0
      if self.FS_Out_Of_Focus is None:
        self.FS_Out_Of_Focus = 0
      if self.FS_Blur is None:
        self.FS_Blur = 0
      if self.FS_Smeared_Halo is None:
        self.FS_Smeared_Halo = 0
      if self.FS_illuminance is None:
        self.FS_illuminance = 0
    else:
      self.FS_Rain = 0
      self.FS_Fog = 0
      self.FS_Snow = 0
      self.FS_Full_Blockage = 0
      self.FS_Partial_Blockage = 0
      self.FS_Lowsun = 0
      self.FS_Sunray = 0
      self.FS_Splash = 0
      self.FS_Windshield_Frozen = 0
      self.FS_Out_Of_Calibration = 0
      self.FS_Out_Of_Focus = 0
      self.FS_Blur = 0
      self.FS_Smeared_Halo = 0
      self.FS_illuminance = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14I().pack(_x.FS_Rain, _x.FS_Fog, _x.FS_Snow, _x.FS_Full_Blockage, _x.FS_Partial_Blockage, _x.FS_Lowsun, _x.FS_Sunray, _x.FS_Splash, _x.FS_Windshield_Frozen, _x.FS_Out_Of_Calibration, _x.FS_Out_Of_Focus, _x.FS_Blur, _x.FS_Smeared_Halo, _x.FS_illuminance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.FS_Rain, _x.FS_Fog, _x.FS_Snow, _x.FS_Full_Blockage, _x.FS_Partial_Blockage, _x.FS_Lowsun, _x.FS_Sunray, _x.FS_Splash, _x.FS_Windshield_Frozen, _x.FS_Out_Of_Calibration, _x.FS_Out_Of_Focus, _x.FS_Blur, _x.FS_Smeared_Halo, _x.FS_illuminance,) = _get_struct_14I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14I().pack(_x.FS_Rain, _x.FS_Fog, _x.FS_Snow, _x.FS_Full_Blockage, _x.FS_Partial_Blockage, _x.FS_Lowsun, _x.FS_Sunray, _x.FS_Splash, _x.FS_Windshield_Frozen, _x.FS_Out_Of_Calibration, _x.FS_Out_Of_Focus, _x.FS_Blur, _x.FS_Smeared_Halo, _x.FS_illuminance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.FS_Rain, _x.FS_Fog, _x.FS_Snow, _x.FS_Full_Blockage, _x.FS_Partial_Blockage, _x.FS_Lowsun, _x.FS_Sunray, _x.FS_Splash, _x.FS_Windshield_Frozen, _x.FS_Out_Of_Calibration, _x.FS_Out_Of_Focus, _x.FS_Blur, _x.FS_Smeared_Halo, _x.FS_illuminance,) = _get_struct_14I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14I = None
def _get_struct_14I():
    global _struct_14I
    if _struct_14I is None:
        _struct_14I = struct.Struct("<14I")
    return _struct_14I

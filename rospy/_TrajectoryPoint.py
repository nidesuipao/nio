# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TrajectoryPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class TrajectoryPoint(genpy.Message):
  _md5sum = "88884418c33675389ae51d88d90b5fe2"
  _type = "rospy_message_converter/TrajectoryPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a
"""
  __slots__ = ['path_point','v','a','relative_time','da','steer','gaussian_info','gear']
  _slot_types = ['rospy_message_converter/PathPoint','float64','float64','float64','float64','float64','rospy_message_converter/GaussianInfo','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_point,v,a,relative_time,da,steer,gaussian_info,gear

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path_point is None:
        self.path_point = rospy_message_converter.msg.PathPoint()
      if self.v is None:
        self.v = 0.
      if self.a is None:
        self.a = 0.
      if self.relative_time is None:
        self.relative_time = 0.
      if self.da is None:
        self.da = 0.
      if self.steer is None:
        self.steer = 0.
      if self.gaussian_info is None:
        self.gaussian_info = rospy_message_converter.msg.GaussianInfo()
      if self.gear is None:
        self.gear = 0
    else:
      self.path_point = rospy_message_converter.msg.PathPoint()
      self.v = 0.
      self.a = 0.
      self.relative_time = 0.
      self.da = 0.
      self.steer = 0.
      self.gaussian_info = rospy_message_converter.msg.GaussianInfo()
      self.gear = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.theta, _x.path_point.kappa, _x.path_point.s, _x.path_point.dkappa, _x.path_point.ddkappa))
      _x = self.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14di().pack(_x.path_point.x_derivative, _x.path_point.y_derivative, _x.v, _x.a, _x.relative_time, _x.da, _x.steer, _x.gaussian_info.sigma_x, _x.gaussian_info.sigma_y, _x.gaussian_info.correlation, _x.gaussian_info.area_probability, _x.gaussian_info.ellipse_a, _x.gaussian_info.ellipse_b, _x.gaussian_info.theta_a, _x.gear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path_point is None:
        self.path_point = rospy_message_converter.msg.PathPoint()
      if self.gaussian_info is None:
        self.gaussian_info = rospy_message_converter.msg.GaussianInfo()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.theta, _x.path_point.kappa, _x.path_point.s, _x.path_point.dkappa, _x.path_point.ddkappa,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.path_point.x_derivative, _x.path_point.y_derivative, _x.v, _x.a, _x.relative_time, _x.da, _x.steer, _x.gaussian_info.sigma_x, _x.gaussian_info.sigma_y, _x.gaussian_info.correlation, _x.gaussian_info.area_probability, _x.gaussian_info.ellipse_a, _x.gaussian_info.ellipse_b, _x.gaussian_info.theta_a, _x.gear,) = _get_struct_14di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.theta, _x.path_point.kappa, _x.path_point.s, _x.path_point.dkappa, _x.path_point.ddkappa))
      _x = self.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14di().pack(_x.path_point.x_derivative, _x.path_point.y_derivative, _x.v, _x.a, _x.relative_time, _x.da, _x.steer, _x.gaussian_info.sigma_x, _x.gaussian_info.sigma_y, _x.gaussian_info.correlation, _x.gaussian_info.area_probability, _x.gaussian_info.ellipse_a, _x.gaussian_info.ellipse_b, _x.gaussian_info.theta_a, _x.gear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path_point is None:
        self.path_point = rospy_message_converter.msg.PathPoint()
      if self.gaussian_info is None:
        self.gaussian_info = rospy_message_converter.msg.GaussianInfo()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.path_point.x, _x.path_point.y, _x.path_point.z, _x.path_point.theta, _x.path_point.kappa, _x.path_point.s, _x.path_point.dkappa, _x.path_point.ddkappa,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.path_point.x_derivative, _x.path_point.y_derivative, _x.v, _x.a, _x.relative_time, _x.da, _x.steer, _x.gaussian_info.sigma_x, _x.gaussian_info.sigma_y, _x.gaussian_info.correlation, _x.gaussian_info.area_probability, _x.gaussian_info.ellipse_a, _x.gaussian_info.ellipse_b, _x.gaussian_info.theta_a, _x.gear,) = _get_struct_14di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14di = None
def _get_struct_14di():
    global _struct_14di
    if _struct_14di is None:
        _struct_14di = struct.Struct("<14di")
    return _struct_14di
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/StateMachine.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class StateMachine(genpy.Message):
  _md5sum = "623b0ccc345c058eda45969393f0551d"
  _type = "rospy_message_converter/StateMachine"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """NodeInfo node_info
int32 feature_status
SlotBase target_slot
int32 operation_mode
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/NodeInfo
int32 node_status
int32 feature_type
string fault_reason
uint64 counter
uint64 timestamp
string info
uint32[] buffer

================================================================================
MSG: rospy_message_converter/SlotBase
int32 hmi_index
int32 svc_index
int32 uss_index
ParPoint pt1
ParPoint pt2
ParPoint pt3
ParPoint pt4
int32 type
int32 source
float32 size_x
float32 size_y
ParPoint VehPos
float32 VehPsi
int32 status
int32 fov
int32 planning_result
float32 slot_angle

================================================================================
MSG: rospy_message_converter/ParPoint
float32 x
float32 y
float32 z
"""
  __slots__ = ['node_info','feature_status','target_slot','operation_mode','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/NodeInfo','int32','rospy_message_converter/SlotBase','int32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node_info,feature_status,target_slot,operation_mode,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateMachine, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.feature_status is None:
        self.feature_status = 0
      if self.target_slot is None:
        self.target_slot = rospy_message_converter.msg.SlotBase()
      if self.operation_mode is None:
        self.operation_mode = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.node_info = rospy_message_converter.msg.NodeInfo()
      self.feature_status = 0
      self.target_slot = rospy_message_converter.msg.SlotBase()
      self.operation_mode = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.node_info.buffer))
      _x = self
      buff.write(_get_struct_4i12f2i6f3ifiQ().pack(_x.feature_status, _x.target_slot.hmi_index, _x.target_slot.svc_index, _x.target_slot.uss_index, _x.target_slot.pt1.x, _x.target_slot.pt1.y, _x.target_slot.pt1.z, _x.target_slot.pt2.x, _x.target_slot.pt2.y, _x.target_slot.pt2.z, _x.target_slot.pt3.x, _x.target_slot.pt3.y, _x.target_slot.pt3.z, _x.target_slot.pt4.x, _x.target_slot.pt4.y, _x.target_slot.pt4.z, _x.target_slot.type, _x.target_slot.source, _x.target_slot.size_x, _x.target_slot.size_y, _x.target_slot.VehPos.x, _x.target_slot.VehPos.y, _x.target_slot.VehPos.z, _x.target_slot.VehPsi, _x.target_slot.status, _x.target_slot.fov, _x.target_slot.planning_result, _x.target_slot.slot_angle, _x.operation_mode, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.target_slot is None:
        self.target_slot = rospy_message_converter.msg.SlotBase()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = s.unpack(str[start:end])
      _x = self
      start = end
      end += 124
      (_x.feature_status, _x.target_slot.hmi_index, _x.target_slot.svc_index, _x.target_slot.uss_index, _x.target_slot.pt1.x, _x.target_slot.pt1.y, _x.target_slot.pt1.z, _x.target_slot.pt2.x, _x.target_slot.pt2.y, _x.target_slot.pt2.z, _x.target_slot.pt3.x, _x.target_slot.pt3.y, _x.target_slot.pt3.z, _x.target_slot.pt4.x, _x.target_slot.pt4.y, _x.target_slot.pt4.z, _x.target_slot.type, _x.target_slot.source, _x.target_slot.size_x, _x.target_slot.size_y, _x.target_slot.VehPos.x, _x.target_slot.VehPos.y, _x.target_slot.VehPos.z, _x.target_slot.VehPsi, _x.target_slot.status, _x.target_slot.fov, _x.target_slot.planning_result, _x.target_slot.slot_angle, _x.operation_mode, _x.publish_ptp_ts,) = _get_struct_4i12f2i6f3ifiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.node_info.node_status, _x.node_info.feature_type))
      _x = self.node_info.fault_reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.node_info.counter, _x.node_info.timestamp))
      _x = self.node_info.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.node_info.buffer)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.node_info.buffer.tostring())
      _x = self
      buff.write(_get_struct_4i12f2i6f3ifiQ().pack(_x.feature_status, _x.target_slot.hmi_index, _x.target_slot.svc_index, _x.target_slot.uss_index, _x.target_slot.pt1.x, _x.target_slot.pt1.y, _x.target_slot.pt1.z, _x.target_slot.pt2.x, _x.target_slot.pt2.y, _x.target_slot.pt2.z, _x.target_slot.pt3.x, _x.target_slot.pt3.y, _x.target_slot.pt3.z, _x.target_slot.pt4.x, _x.target_slot.pt4.y, _x.target_slot.pt4.z, _x.target_slot.type, _x.target_slot.source, _x.target_slot.size_x, _x.target_slot.size_y, _x.target_slot.VehPos.x, _x.target_slot.VehPos.y, _x.target_slot.VehPos.z, _x.target_slot.VehPsi, _x.target_slot.status, _x.target_slot.fov, _x.target_slot.planning_result, _x.target_slot.slot_angle, _x.operation_mode, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.node_info is None:
        self.node_info = rospy_message_converter.msg.NodeInfo()
      if self.target_slot is None:
        self.target_slot = rospy_message_converter.msg.SlotBase()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.node_info.node_status, _x.node_info.feature_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.fault_reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.fault_reason = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.node_info.counter, _x.node_info.timestamp,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_info.info = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_info.info = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.node_info.buffer = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 124
      (_x.feature_status, _x.target_slot.hmi_index, _x.target_slot.svc_index, _x.target_slot.uss_index, _x.target_slot.pt1.x, _x.target_slot.pt1.y, _x.target_slot.pt1.z, _x.target_slot.pt2.x, _x.target_slot.pt2.y, _x.target_slot.pt2.z, _x.target_slot.pt3.x, _x.target_slot.pt3.y, _x.target_slot.pt3.z, _x.target_slot.pt4.x, _x.target_slot.pt4.y, _x.target_slot.pt4.z, _x.target_slot.type, _x.target_slot.source, _x.target_slot.size_x, _x.target_slot.size_y, _x.target_slot.VehPos.x, _x.target_slot.VehPos.y, _x.target_slot.VehPos.z, _x.target_slot.VehPsi, _x.target_slot.status, _x.target_slot.fov, _x.target_slot.planning_result, _x.target_slot.slot_angle, _x.operation_mode, _x.publish_ptp_ts,) = _get_struct_4i12f2i6f3ifiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_4i12f2i6f3ifiQ = None
def _get_struct_4i12f2i6f3ifiQ():
    global _struct_4i12f2i6f3ifiQ
    if _struct_4i12f2i6f3ifiQ is None:
        _struct_4i12f2i6f3ifiQ = struct.Struct("<4i12f2i6f3ifiQ")
    return _struct_4i12f2i6f3ifiQ

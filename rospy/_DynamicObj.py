# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DynamicObj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DynamicObj(genpy.Message):
  _md5sum = "38dc2df99ed43327d6a840032c288176"
  _type = "rospy_message_converter/DynamicObj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 OBJ_Object_Class
uint32 OBJ_Age_Frame
uint32 OBJ_Object_ID
int32 OBJ_Color
float32 OBJ_Existence_Probability
bool OBJ_Is_Very_Close
int32 OBJ_Lane_Assignment
uint32 OBJ_Measuring_Status
int32 OBJ_Motion_Status
int32 OBJ_Motion_Category
uint32 OBJ_Is_Blocked_Parts
float32 OBJ_Heading
float32 OBJ_Heading_STD
float32 OBJ_Angle_Rate
float32 OBJ_Angle_Rate_STD
int32 OBJ_Brake_Light
int32 OBJ_Turn_Indicator
int32 OBJ_HB_Status
float32 OBJ_Dst_Left_Line
float32 OBJ_Dst_Right_Line
bool OBJ_Is_Blocked_Left
bool OBJ_Is_Blocked_Right
Position OBJ_Distance
Velocity OBJ_Abs_Velocity
Acceleration OBJ_Abs_Acc
Dimension OBJ_Dimension
int32 source
uint32 OBJ_Relate_ID
int32 OBJ_Object_Door_Left_Status
int32 OBJ_Object_Door_Right_Status
float32 OBJ_Cut_In_Lat_Distance
float32 OBJ_Cut_In_Lat_Distance_STD
float32 OBJ_Cut_In_Long_Distance
float32 OBJ_Cut_In_Long_Distance_STD
float32 OBJ_Cut_In_Angle
float32 OBJ_Cut_In_Angle_STD
float32 OBJ_Age_Second
float32 OBJ_Missing_Age_Second

================================================================================
MSG: rospy_message_converter/Position
float32 Long_Position
float32 Long_Position_STD
float32 Lat_Position
float32 Lat_Position_STD
float32 Vertical_Position
float32 Vertical_Position_STD

================================================================================
MSG: rospy_message_converter/Velocity
float32 Long_Velocity
float32 Long_Velocity_STD
float32 Lat_Velocity
float32 Lat_Velocity_STD
float32 Up_Velocity
float32 Up_Velocity_STD

================================================================================
MSG: rospy_message_converter/Acceleration
float32 Long_Acc
float32 Long_Acc_STD
float32 Lat_Acc
float32 Lat_Acc_STD
float32 Up_Acc
float32 Up_Acc_STD

================================================================================
MSG: rospy_message_converter/Dimension
float32 OBJ_Length
float32 OBJ_Length_STD
float32 OBJ_Width
float32 OBJ_Width_STD
float32 OBJ_Height
float32 OBJ_Height_STD
"""
  __slots__ = ['OBJ_Object_Class','OBJ_Age_Frame','OBJ_Object_ID','OBJ_Color','OBJ_Existence_Probability','OBJ_Is_Very_Close','OBJ_Lane_Assignment','OBJ_Measuring_Status','OBJ_Motion_Status','OBJ_Motion_Category','OBJ_Is_Blocked_Parts','OBJ_Heading','OBJ_Heading_STD','OBJ_Angle_Rate','OBJ_Angle_Rate_STD','OBJ_Brake_Light','OBJ_Turn_Indicator','OBJ_HB_Status','OBJ_Dst_Left_Line','OBJ_Dst_Right_Line','OBJ_Is_Blocked_Left','OBJ_Is_Blocked_Right','OBJ_Distance','OBJ_Abs_Velocity','OBJ_Abs_Acc','OBJ_Dimension','source','OBJ_Relate_ID','OBJ_Object_Door_Left_Status','OBJ_Object_Door_Right_Status','OBJ_Cut_In_Lat_Distance','OBJ_Cut_In_Lat_Distance_STD','OBJ_Cut_In_Long_Distance','OBJ_Cut_In_Long_Distance_STD','OBJ_Cut_In_Angle','OBJ_Cut_In_Angle_STD','OBJ_Age_Second','OBJ_Missing_Age_Second']
  _slot_types = ['int32','uint32','uint32','int32','float32','bool','int32','uint32','int32','int32','uint32','float32','float32','float32','float32','int32','int32','int32','float32','float32','bool','bool','rospy_message_converter/Position','rospy_message_converter/Velocity','rospy_message_converter/Acceleration','rospy_message_converter/Dimension','int32','uint32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       OBJ_Object_Class,OBJ_Age_Frame,OBJ_Object_ID,OBJ_Color,OBJ_Existence_Probability,OBJ_Is_Very_Close,OBJ_Lane_Assignment,OBJ_Measuring_Status,OBJ_Motion_Status,OBJ_Motion_Category,OBJ_Is_Blocked_Parts,OBJ_Heading,OBJ_Heading_STD,OBJ_Angle_Rate,OBJ_Angle_Rate_STD,OBJ_Brake_Light,OBJ_Turn_Indicator,OBJ_HB_Status,OBJ_Dst_Left_Line,OBJ_Dst_Right_Line,OBJ_Is_Blocked_Left,OBJ_Is_Blocked_Right,OBJ_Distance,OBJ_Abs_Velocity,OBJ_Abs_Acc,OBJ_Dimension,source,OBJ_Relate_ID,OBJ_Object_Door_Left_Status,OBJ_Object_Door_Right_Status,OBJ_Cut_In_Lat_Distance,OBJ_Cut_In_Lat_Distance_STD,OBJ_Cut_In_Long_Distance,OBJ_Cut_In_Long_Distance_STD,OBJ_Cut_In_Angle,OBJ_Cut_In_Angle_STD,OBJ_Age_Second,OBJ_Missing_Age_Second

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicObj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.OBJ_Object_Class is None:
        self.OBJ_Object_Class = 0
      if self.OBJ_Age_Frame is None:
        self.OBJ_Age_Frame = 0
      if self.OBJ_Object_ID is None:
        self.OBJ_Object_ID = 0
      if self.OBJ_Color is None:
        self.OBJ_Color = 0
      if self.OBJ_Existence_Probability is None:
        self.OBJ_Existence_Probability = 0.
      if self.OBJ_Is_Very_Close is None:
        self.OBJ_Is_Very_Close = False
      if self.OBJ_Lane_Assignment is None:
        self.OBJ_Lane_Assignment = 0
      if self.OBJ_Measuring_Status is None:
        self.OBJ_Measuring_Status = 0
      if self.OBJ_Motion_Status is None:
        self.OBJ_Motion_Status = 0
      if self.OBJ_Motion_Category is None:
        self.OBJ_Motion_Category = 0
      if self.OBJ_Is_Blocked_Parts is None:
        self.OBJ_Is_Blocked_Parts = 0
      if self.OBJ_Heading is None:
        self.OBJ_Heading = 0.
      if self.OBJ_Heading_STD is None:
        self.OBJ_Heading_STD = 0.
      if self.OBJ_Angle_Rate is None:
        self.OBJ_Angle_Rate = 0.
      if self.OBJ_Angle_Rate_STD is None:
        self.OBJ_Angle_Rate_STD = 0.
      if self.OBJ_Brake_Light is None:
        self.OBJ_Brake_Light = 0
      if self.OBJ_Turn_Indicator is None:
        self.OBJ_Turn_Indicator = 0
      if self.OBJ_HB_Status is None:
        self.OBJ_HB_Status = 0
      if self.OBJ_Dst_Left_Line is None:
        self.OBJ_Dst_Left_Line = 0.
      if self.OBJ_Dst_Right_Line is None:
        self.OBJ_Dst_Right_Line = 0.
      if self.OBJ_Is_Blocked_Left is None:
        self.OBJ_Is_Blocked_Left = False
      if self.OBJ_Is_Blocked_Right is None:
        self.OBJ_Is_Blocked_Right = False
      if self.OBJ_Distance is None:
        self.OBJ_Distance = rospy_message_converter.msg.Position()
      if self.OBJ_Abs_Velocity is None:
        self.OBJ_Abs_Velocity = rospy_message_converter.msg.Velocity()
      if self.OBJ_Abs_Acc is None:
        self.OBJ_Abs_Acc = rospy_message_converter.msg.Acceleration()
      if self.OBJ_Dimension is None:
        self.OBJ_Dimension = rospy_message_converter.msg.Dimension()
      if self.source is None:
        self.source = 0
      if self.OBJ_Relate_ID is None:
        self.OBJ_Relate_ID = 0
      if self.OBJ_Object_Door_Left_Status is None:
        self.OBJ_Object_Door_Left_Status = 0
      if self.OBJ_Object_Door_Right_Status is None:
        self.OBJ_Object_Door_Right_Status = 0
      if self.OBJ_Cut_In_Lat_Distance is None:
        self.OBJ_Cut_In_Lat_Distance = 0.
      if self.OBJ_Cut_In_Lat_Distance_STD is None:
        self.OBJ_Cut_In_Lat_Distance_STD = 0.
      if self.OBJ_Cut_In_Long_Distance is None:
        self.OBJ_Cut_In_Long_Distance = 0.
      if self.OBJ_Cut_In_Long_Distance_STD is None:
        self.OBJ_Cut_In_Long_Distance_STD = 0.
      if self.OBJ_Cut_In_Angle is None:
        self.OBJ_Cut_In_Angle = 0.
      if self.OBJ_Cut_In_Angle_STD is None:
        self.OBJ_Cut_In_Angle_STD = 0.
      if self.OBJ_Age_Second is None:
        self.OBJ_Age_Second = 0.
      if self.OBJ_Missing_Age_Second is None:
        self.OBJ_Missing_Age_Second = 0.
    else:
      self.OBJ_Object_Class = 0
      self.OBJ_Age_Frame = 0
      self.OBJ_Object_ID = 0
      self.OBJ_Color = 0
      self.OBJ_Existence_Probability = 0.
      self.OBJ_Is_Very_Close = False
      self.OBJ_Lane_Assignment = 0
      self.OBJ_Measuring_Status = 0
      self.OBJ_Motion_Status = 0
      self.OBJ_Motion_Category = 0
      self.OBJ_Is_Blocked_Parts = 0
      self.OBJ_Heading = 0.
      self.OBJ_Heading_STD = 0.
      self.OBJ_Angle_Rate = 0.
      self.OBJ_Angle_Rate_STD = 0.
      self.OBJ_Brake_Light = 0
      self.OBJ_Turn_Indicator = 0
      self.OBJ_HB_Status = 0
      self.OBJ_Dst_Left_Line = 0.
      self.OBJ_Dst_Right_Line = 0.
      self.OBJ_Is_Blocked_Left = False
      self.OBJ_Is_Blocked_Right = False
      self.OBJ_Distance = rospy_message_converter.msg.Position()
      self.OBJ_Abs_Velocity = rospy_message_converter.msg.Velocity()
      self.OBJ_Abs_Acc = rospy_message_converter.msg.Acceleration()
      self.OBJ_Dimension = rospy_message_converter.msg.Dimension()
      self.source = 0
      self.OBJ_Relate_ID = 0
      self.OBJ_Object_Door_Left_Status = 0
      self.OBJ_Object_Door_Right_Status = 0
      self.OBJ_Cut_In_Lat_Distance = 0.
      self.OBJ_Cut_In_Lat_Distance_STD = 0.
      self.OBJ_Cut_In_Long_Distance = 0.
      self.OBJ_Cut_In_Long_Distance_STD = 0.
      self.OBJ_Cut_In_Angle = 0.
      self.OBJ_Cut_In_Angle_STD = 0.
      self.OBJ_Age_Second = 0.
      self.OBJ_Missing_Age_Second = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().pack(_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right, _x.OBJ_Distance.Long_Position, _x.OBJ_Distance.Long_Position_STD, _x.OBJ_Distance.Lat_Position, _x.OBJ_Distance.Lat_Position_STD, _x.OBJ_Distance.Vertical_Position, _x.OBJ_Distance.Vertical_Position_STD, _x.OBJ_Abs_Velocity.Long_Velocity, _x.OBJ_Abs_Velocity.Long_Velocity_STD, _x.OBJ_Abs_Velocity.Lat_Velocity, _x.OBJ_Abs_Velocity.Lat_Velocity_STD, _x.OBJ_Abs_Velocity.Up_Velocity, _x.OBJ_Abs_Velocity.Up_Velocity_STD, _x.OBJ_Abs_Acc.Long_Acc, _x.OBJ_Abs_Acc.Long_Acc_STD, _x.OBJ_Abs_Acc.Lat_Acc, _x.OBJ_Abs_Acc.Lat_Acc_STD, _x.OBJ_Abs_Acc.Up_Acc, _x.OBJ_Abs_Acc.Up_Acc_STD, _x.OBJ_Dimension.OBJ_Length, _x.OBJ_Dimension.OBJ_Length_STD, _x.OBJ_Dimension.OBJ_Width, _x.OBJ_Dimension.OBJ_Width_STD, _x.OBJ_Dimension.OBJ_Height, _x.OBJ_Dimension.OBJ_Height_STD, _x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.OBJ_Distance is None:
        self.OBJ_Distance = rospy_message_converter.msg.Position()
      if self.OBJ_Abs_Velocity is None:
        self.OBJ_Abs_Velocity = rospy_message_converter.msg.Velocity()
      if self.OBJ_Abs_Acc is None:
        self.OBJ_Abs_Acc = rospy_message_converter.msg.Acceleration()
      if self.OBJ_Dimension is None:
        self.OBJ_Dimension = rospy_message_converter.msg.Dimension()
      end = 0
      _x = self
      start = end
      end += 223
      (_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right, _x.OBJ_Distance.Long_Position, _x.OBJ_Distance.Long_Position_STD, _x.OBJ_Distance.Lat_Position, _x.OBJ_Distance.Lat_Position_STD, _x.OBJ_Distance.Vertical_Position, _x.OBJ_Distance.Vertical_Position_STD, _x.OBJ_Abs_Velocity.Long_Velocity, _x.OBJ_Abs_Velocity.Long_Velocity_STD, _x.OBJ_Abs_Velocity.Lat_Velocity, _x.OBJ_Abs_Velocity.Lat_Velocity_STD, _x.OBJ_Abs_Velocity.Up_Velocity, _x.OBJ_Abs_Velocity.Up_Velocity_STD, _x.OBJ_Abs_Acc.Long_Acc, _x.OBJ_Abs_Acc.Long_Acc_STD, _x.OBJ_Abs_Acc.Lat_Acc, _x.OBJ_Abs_Acc.Lat_Acc_STD, _x.OBJ_Abs_Acc.Up_Acc, _x.OBJ_Abs_Acc.Up_Acc_STD, _x.OBJ_Dimension.OBJ_Length, _x.OBJ_Dimension.OBJ_Length_STD, _x.OBJ_Dimension.OBJ_Width, _x.OBJ_Dimension.OBJ_Width_STD, _x.OBJ_Dimension.OBJ_Height, _x.OBJ_Dimension.OBJ_Height_STD, _x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second,) = _get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().unpack(str[start:end])
      self.OBJ_Is_Very_Close = bool(self.OBJ_Is_Very_Close)
      self.OBJ_Is_Blocked_Left = bool(self.OBJ_Is_Blocked_Left)
      self.OBJ_Is_Blocked_Right = bool(self.OBJ_Is_Blocked_Right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().pack(_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right, _x.OBJ_Distance.Long_Position, _x.OBJ_Distance.Long_Position_STD, _x.OBJ_Distance.Lat_Position, _x.OBJ_Distance.Lat_Position_STD, _x.OBJ_Distance.Vertical_Position, _x.OBJ_Distance.Vertical_Position_STD, _x.OBJ_Abs_Velocity.Long_Velocity, _x.OBJ_Abs_Velocity.Long_Velocity_STD, _x.OBJ_Abs_Velocity.Lat_Velocity, _x.OBJ_Abs_Velocity.Lat_Velocity_STD, _x.OBJ_Abs_Velocity.Up_Velocity, _x.OBJ_Abs_Velocity.Up_Velocity_STD, _x.OBJ_Abs_Acc.Long_Acc, _x.OBJ_Abs_Acc.Long_Acc_STD, _x.OBJ_Abs_Acc.Lat_Acc, _x.OBJ_Abs_Acc.Lat_Acc_STD, _x.OBJ_Abs_Acc.Up_Acc, _x.OBJ_Abs_Acc.Up_Acc_STD, _x.OBJ_Dimension.OBJ_Length, _x.OBJ_Dimension.OBJ_Length_STD, _x.OBJ_Dimension.OBJ_Width, _x.OBJ_Dimension.OBJ_Width_STD, _x.OBJ_Dimension.OBJ_Height, _x.OBJ_Dimension.OBJ_Height_STD, _x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.OBJ_Distance is None:
        self.OBJ_Distance = rospy_message_converter.msg.Position()
      if self.OBJ_Abs_Velocity is None:
        self.OBJ_Abs_Velocity = rospy_message_converter.msg.Velocity()
      if self.OBJ_Abs_Acc is None:
        self.OBJ_Abs_Acc = rospy_message_converter.msg.Acceleration()
      if self.OBJ_Dimension is None:
        self.OBJ_Dimension = rospy_message_converter.msg.Dimension()
      end = 0
      _x = self
      start = end
      end += 223
      (_x.OBJ_Object_Class, _x.OBJ_Age_Frame, _x.OBJ_Object_ID, _x.OBJ_Color, _x.OBJ_Existence_Probability, _x.OBJ_Is_Very_Close, _x.OBJ_Lane_Assignment, _x.OBJ_Measuring_Status, _x.OBJ_Motion_Status, _x.OBJ_Motion_Category, _x.OBJ_Is_Blocked_Parts, _x.OBJ_Heading, _x.OBJ_Heading_STD, _x.OBJ_Angle_Rate, _x.OBJ_Angle_Rate_STD, _x.OBJ_Brake_Light, _x.OBJ_Turn_Indicator, _x.OBJ_HB_Status, _x.OBJ_Dst_Left_Line, _x.OBJ_Dst_Right_Line, _x.OBJ_Is_Blocked_Left, _x.OBJ_Is_Blocked_Right, _x.OBJ_Distance.Long_Position, _x.OBJ_Distance.Long_Position_STD, _x.OBJ_Distance.Lat_Position, _x.OBJ_Distance.Lat_Position_STD, _x.OBJ_Distance.Vertical_Position, _x.OBJ_Distance.Vertical_Position_STD, _x.OBJ_Abs_Velocity.Long_Velocity, _x.OBJ_Abs_Velocity.Long_Velocity_STD, _x.OBJ_Abs_Velocity.Lat_Velocity, _x.OBJ_Abs_Velocity.Lat_Velocity_STD, _x.OBJ_Abs_Velocity.Up_Velocity, _x.OBJ_Abs_Velocity.Up_Velocity_STD, _x.OBJ_Abs_Acc.Long_Acc, _x.OBJ_Abs_Acc.Long_Acc_STD, _x.OBJ_Abs_Acc.Lat_Acc, _x.OBJ_Abs_Acc.Lat_Acc_STD, _x.OBJ_Abs_Acc.Up_Acc, _x.OBJ_Abs_Acc.Up_Acc_STD, _x.OBJ_Dimension.OBJ_Length, _x.OBJ_Dimension.OBJ_Length_STD, _x.OBJ_Dimension.OBJ_Width, _x.OBJ_Dimension.OBJ_Width_STD, _x.OBJ_Dimension.OBJ_Height, _x.OBJ_Dimension.OBJ_Height_STD, _x.source, _x.OBJ_Relate_ID, _x.OBJ_Object_Door_Left_Status, _x.OBJ_Object_Door_Right_Status, _x.OBJ_Cut_In_Lat_Distance, _x.OBJ_Cut_In_Lat_Distance_STD, _x.OBJ_Cut_In_Long_Distance, _x.OBJ_Cut_In_Long_Distance_STD, _x.OBJ_Cut_In_Angle, _x.OBJ_Cut_In_Angle_STD, _x.OBJ_Age_Second, _x.OBJ_Missing_Age_Second,) = _get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f().unpack(str[start:end])
      self.OBJ_Is_Very_Close = bool(self.OBJ_Is_Very_Close)
      self.OBJ_Is_Blocked_Left = bool(self.OBJ_Is_Blocked_Left)
      self.OBJ_Is_Blocked_Right = bool(self.OBJ_Is_Blocked_Right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f = None
def _get_struct_i2IifBiI2iI4f3i2f2B24fiI2i8f():
    global _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f
    if _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f is None:
        _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f = struct.Struct("<i2IifBiI2iI4f3i2f2B24fiI2i8f")
    return _struct_i2IifBiI2iI4f3i2f2B24fiI2i8f

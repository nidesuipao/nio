# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/ObjInfoOfDiagBus_t.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class ObjInfoOfDiagBus_t(genpy.Message):
  _md5sum = "d212d5986dfea97a5335ffda54c0dffc"
  _type = "rospy_message_converter/ObjInfoOfDiagBus_t"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SortedObjectAebForDiag_t diagBusForSortedObjectAeb
uint32 objEnablerCheckResults
float32 longCloseEdgeDist
float32 timeDelay
float32 aLgtReqdPreCalcd
float32 aLatReqdPreCalcd
bool brkActvDlydForObj

================================================================================
MSG: rospy_message_converter/SortedObjectAebForDiag_t
uint32 id
uint32 type
bool stillExist
float32 marginsLatInPathCurr
float32 marginsLatInPathPred
float32 marginsLgtForIntv
float32 marginsLatForIntv
float32 offSetLatForPrimaryTarget
uint32 loopIndex
float32[] predCenPosnLgt
float32[] predCenPosnLat
float32[] predCosHeading
float32[] predSinHeading
uint32 objMovingDirection
bool linearOrCurvedPredValid
bool curvedMotion
bool stationary
bool movingOncoming
float32 aNegLgtRqrdForCtrl
float32 crvtReqdLe
float32 crvtRateReqdLe
float32 crvtReqdRi
float32 crvtRateReqdRi
bool[] opCond1
bool[] opCond2
bool[] opCond3
bool[] opCond4
float32 objVx
float32 objVy
float32 objAx
float32 objAy
uint32 ttrIndex
uint32 ttpIndex
uint32[] edgeIndex
uint32[] maxCLeIdx
uint32[] minCRiIdx
uint32[] taLateralThreatMatrixOpl
float32[] objLongPosnRelToHost
float32[] objLatPosnRelToHost
float32[] objLongSpanRelToHost
float32[] objLatSpanRelToHost
float32[] hostLongPosnRelToObj
float32[] hostLatPosnRelToObj
float32[] hostLongSpanRelToObj
float32[] hostLatSpanRelToObj
bool[] isValidUpdateForLongThreat
float32 aNegLgtJerkReqdForIntv
float32 objHeading
float32 aLgtPreCalc1
uint32 mostInPathIndex
float32 posnLatRel
float32 projectedWidth
float32[] xEdges
float32[] yEdges
float32[] egoMotionTime
float32[] egoXc
float32 ttp
uint32 fusionSource
uint32 brkIndex
float32[] objLongDistNear
bool[] inFwdPathResampled
float32[] timeVecResampled
float32 ttheta_left
float32 ttheta_right
float32 tZero
float32 tObjStop
bool flgJustPass
bool flgObjNotInPathAtTZero
bool TargetOnComingDuringHostTurn
bool TargetLowCurvature
bool LessHeadOnAtCollision
float32 headingAtHostStartOfTheTurn
float32 objTrjCurvature
float32 predObjHeadingAtTtc
float32 predHostHeadingChangeAtTtc
float32 predRelativeHeadingAtTtc
bool isGenMovingOnComingScenario
bool hostDrvStraight
bool hostIsTurning
bool targetIsTurning
bool relativePosnOkDuringHostTurn
bool isLtapTargetTurn
bool isLtapHostTurn
bool useStrictInPath
bool inPathCurPosn
float32 availStopdist
float32 rawBrkJerk
float32 rawBrkALgt
float32 impctPosnWithOutIntv
float32 impctPosnWithIntv
"""
  __slots__ = ['diagBusForSortedObjectAeb','objEnablerCheckResults','longCloseEdgeDist','timeDelay','aLgtReqdPreCalcd','aLatReqdPreCalcd','brkActvDlydForObj']
  _slot_types = ['rospy_message_converter/SortedObjectAebForDiag_t','uint32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       diagBusForSortedObjectAeb,objEnablerCheckResults,longCloseEdgeDist,timeDelay,aLgtReqdPreCalcd,aLatReqdPreCalcd,brkActvDlydForObj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjInfoOfDiagBus_t, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.diagBusForSortedObjectAeb is None:
        self.diagBusForSortedObjectAeb = rospy_message_converter.msg.SortedObjectAebForDiag_t()
      if self.objEnablerCheckResults is None:
        self.objEnablerCheckResults = 0
      if self.longCloseEdgeDist is None:
        self.longCloseEdgeDist = 0.
      if self.timeDelay is None:
        self.timeDelay = 0.
      if self.aLgtReqdPreCalcd is None:
        self.aLgtReqdPreCalcd = 0.
      if self.aLatReqdPreCalcd is None:
        self.aLatReqdPreCalcd = 0.
      if self.brkActvDlydForObj is None:
        self.brkActvDlydForObj = False
    else:
      self.diagBusForSortedObjectAeb = rospy_message_converter.msg.SortedObjectAebForDiag_t()
      self.objEnablerCheckResults = 0
      self.longCloseEdgeDist = 0.
      self.timeDelay = 0.
      self.aLgtReqdPreCalcd = 0.
      self.aLatReqdPreCalcd = 0.
      self.brkActvDlydForObj = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IB5fI().pack(_x.diagBusForSortedObjectAeb.id, _x.diagBusForSortedObjectAeb.type, _x.diagBusForSortedObjectAeb.stillExist, _x.diagBusForSortedObjectAeb.marginsLatInPathCurr, _x.diagBusForSortedObjectAeb.marginsLatInPathPred, _x.diagBusForSortedObjectAeb.marginsLgtForIntv, _x.diagBusForSortedObjectAeb.marginsLatForIntv, _x.diagBusForSortedObjectAeb.offSetLatForPrimaryTarget, _x.diagBusForSortedObjectAeb.loopIndex))
      length = len(self.diagBusForSortedObjectAeb.predCenPosnLgt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.predCenPosnLgt))
      length = len(self.diagBusForSortedObjectAeb.predCenPosnLat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.predCenPosnLat))
      length = len(self.diagBusForSortedObjectAeb.predCosHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.predCosHeading))
      length = len(self.diagBusForSortedObjectAeb.predSinHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.predSinHeading))
      _x = self
      buff.write(_get_struct_I4B5f().pack(_x.diagBusForSortedObjectAeb.objMovingDirection, _x.diagBusForSortedObjectAeb.linearOrCurvedPredValid, _x.diagBusForSortedObjectAeb.curvedMotion, _x.diagBusForSortedObjectAeb.stationary, _x.diagBusForSortedObjectAeb.movingOncoming, _x.diagBusForSortedObjectAeb.aNegLgtRqrdForCtrl, _x.diagBusForSortedObjectAeb.crvtReqdLe, _x.diagBusForSortedObjectAeb.crvtRateReqdLe, _x.diagBusForSortedObjectAeb.crvtReqdRi, _x.diagBusForSortedObjectAeb.crvtRateReqdRi))
      length = len(self.diagBusForSortedObjectAeb.opCond1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.opCond1))
      length = len(self.diagBusForSortedObjectAeb.opCond2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.opCond2))
      length = len(self.diagBusForSortedObjectAeb.opCond3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.opCond3))
      length = len(self.diagBusForSortedObjectAeb.opCond4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.opCond4))
      _x = self
      buff.write(_get_struct_4f2I().pack(_x.diagBusForSortedObjectAeb.objVx, _x.diagBusForSortedObjectAeb.objVy, _x.diagBusForSortedObjectAeb.objAx, _x.diagBusForSortedObjectAeb.objAy, _x.diagBusForSortedObjectAeb.ttrIndex, _x.diagBusForSortedObjectAeb.ttpIndex))
      length = len(self.diagBusForSortedObjectAeb.edgeIndex)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.edgeIndex))
      length = len(self.diagBusForSortedObjectAeb.maxCLeIdx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.maxCLeIdx))
      length = len(self.diagBusForSortedObjectAeb.minCRiIdx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.minCRiIdx))
      length = len(self.diagBusForSortedObjectAeb.taLateralThreatMatrixOpl)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.taLateralThreatMatrixOpl))
      length = len(self.diagBusForSortedObjectAeb.objLongPosnRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.objLongPosnRelToHost))
      length = len(self.diagBusForSortedObjectAeb.objLatPosnRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.objLatPosnRelToHost))
      length = len(self.diagBusForSortedObjectAeb.objLongSpanRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.objLongSpanRelToHost))
      length = len(self.diagBusForSortedObjectAeb.objLatSpanRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.objLatSpanRelToHost))
      length = len(self.diagBusForSortedObjectAeb.hostLongPosnRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.hostLongPosnRelToObj))
      length = len(self.diagBusForSortedObjectAeb.hostLatPosnRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.hostLatPosnRelToObj))
      length = len(self.diagBusForSortedObjectAeb.hostLongSpanRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.hostLongSpanRelToObj))
      length = len(self.diagBusForSortedObjectAeb.hostLatSpanRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.hostLatSpanRelToObj))
      length = len(self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat))
      _x = self
      buff.write(_get_struct_3fI2f().pack(_x.diagBusForSortedObjectAeb.aNegLgtJerkReqdForIntv, _x.diagBusForSortedObjectAeb.objHeading, _x.diagBusForSortedObjectAeb.aLgtPreCalc1, _x.diagBusForSortedObjectAeb.mostInPathIndex, _x.diagBusForSortedObjectAeb.posnLatRel, _x.diagBusForSortedObjectAeb.projectedWidth))
      length = len(self.diagBusForSortedObjectAeb.xEdges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.xEdges))
      length = len(self.diagBusForSortedObjectAeb.yEdges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.yEdges))
      length = len(self.diagBusForSortedObjectAeb.egoMotionTime)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.egoMotionTime))
      length = len(self.diagBusForSortedObjectAeb.egoXc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.egoXc))
      _x = self
      buff.write(_get_struct_f2I().pack(_x.diagBusForSortedObjectAeb.ttp, _x.diagBusForSortedObjectAeb.fusionSource, _x.diagBusForSortedObjectAeb.brkIndex))
      length = len(self.diagBusForSortedObjectAeb.objLongDistNear)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.objLongDistNear))
      length = len(self.diagBusForSortedObjectAeb.inFwdPathResampled)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.inFwdPathResampled))
      length = len(self.diagBusForSortedObjectAeb.timeVecResampled)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.diagBusForSortedObjectAeb.timeVecResampled))
      _x = self
      buff.write(_get_struct_4f5B5f9B5fI4fB().pack(_x.diagBusForSortedObjectAeb.ttheta_left, _x.diagBusForSortedObjectAeb.ttheta_right, _x.diagBusForSortedObjectAeb.tZero, _x.diagBusForSortedObjectAeb.tObjStop, _x.diagBusForSortedObjectAeb.flgJustPass, _x.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero, _x.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn, _x.diagBusForSortedObjectAeb.TargetLowCurvature, _x.diagBusForSortedObjectAeb.LessHeadOnAtCollision, _x.diagBusForSortedObjectAeb.headingAtHostStartOfTheTurn, _x.diagBusForSortedObjectAeb.objTrjCurvature, _x.diagBusForSortedObjectAeb.predObjHeadingAtTtc, _x.diagBusForSortedObjectAeb.predHostHeadingChangeAtTtc, _x.diagBusForSortedObjectAeb.predRelativeHeadingAtTtc, _x.diagBusForSortedObjectAeb.isGenMovingOnComingScenario, _x.diagBusForSortedObjectAeb.hostDrvStraight, _x.diagBusForSortedObjectAeb.hostIsTurning, _x.diagBusForSortedObjectAeb.targetIsTurning, _x.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn, _x.diagBusForSortedObjectAeb.isLtapTargetTurn, _x.diagBusForSortedObjectAeb.isLtapHostTurn, _x.diagBusForSortedObjectAeb.useStrictInPath, _x.diagBusForSortedObjectAeb.inPathCurPosn, _x.diagBusForSortedObjectAeb.availStopdist, _x.diagBusForSortedObjectAeb.rawBrkJerk, _x.diagBusForSortedObjectAeb.rawBrkALgt, _x.diagBusForSortedObjectAeb.impctPosnWithOutIntv, _x.diagBusForSortedObjectAeb.impctPosnWithIntv, _x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.diagBusForSortedObjectAeb is None:
        self.diagBusForSortedObjectAeb = rospy_message_converter.msg.SortedObjectAebForDiag_t()
      end = 0
      _x = self
      start = end
      end += 33
      (_x.diagBusForSortedObjectAeb.id, _x.diagBusForSortedObjectAeb.type, _x.diagBusForSortedObjectAeb.stillExist, _x.diagBusForSortedObjectAeb.marginsLatInPathCurr, _x.diagBusForSortedObjectAeb.marginsLatInPathPred, _x.diagBusForSortedObjectAeb.marginsLgtForIntv, _x.diagBusForSortedObjectAeb.marginsLatForIntv, _x.diagBusForSortedObjectAeb.offSetLatForPrimaryTarget, _x.diagBusForSortedObjectAeb.loopIndex,) = _get_struct_2IB5fI().unpack(str[start:end])
      self.diagBusForSortedObjectAeb.stillExist = bool(self.diagBusForSortedObjectAeb.stillExist)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predCenPosnLgt = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predCenPosnLat = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predCosHeading = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predSinHeading = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.diagBusForSortedObjectAeb.objMovingDirection, _x.diagBusForSortedObjectAeb.linearOrCurvedPredValid, _x.diagBusForSortedObjectAeb.curvedMotion, _x.diagBusForSortedObjectAeb.stationary, _x.diagBusForSortedObjectAeb.movingOncoming, _x.diagBusForSortedObjectAeb.aNegLgtRqrdForCtrl, _x.diagBusForSortedObjectAeb.crvtReqdLe, _x.diagBusForSortedObjectAeb.crvtRateReqdLe, _x.diagBusForSortedObjectAeb.crvtReqdRi, _x.diagBusForSortedObjectAeb.crvtRateReqdRi,) = _get_struct_I4B5f().unpack(str[start:end])
      self.diagBusForSortedObjectAeb.linearOrCurvedPredValid = bool(self.diagBusForSortedObjectAeb.linearOrCurvedPredValid)
      self.diagBusForSortedObjectAeb.curvedMotion = bool(self.diagBusForSortedObjectAeb.curvedMotion)
      self.diagBusForSortedObjectAeb.stationary = bool(self.diagBusForSortedObjectAeb.stationary)
      self.diagBusForSortedObjectAeb.movingOncoming = bool(self.diagBusForSortedObjectAeb.movingOncoming)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond1 = s.unpack(str[start:end])
      self.diagBusForSortedObjectAeb.opCond1 = list(map(bool, self.diagBusForSortedObjectAeb.opCond1))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond2 = s.unpack(str[start:end])
      self.diagBusForSortedObjectAeb.opCond2 = list(map(bool, self.diagBusForSortedObjectAeb.opCond2))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond3 = s.unpack(str[start:end])
      self.diagBusForSortedObjectAeb.opCond3 = list(map(bool, self.diagBusForSortedObjectAeb.opCond3))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond4 = s.unpack(str[start:end])
      self.diagBusForSortedObjectAeb.opCond4 = list(map(bool, self.diagBusForSortedObjectAeb.opCond4))
      _x = self
      start = end
      end += 24
      (_x.diagBusForSortedObjectAeb.objVx, _x.diagBusForSortedObjectAeb.objVy, _x.diagBusForSortedObjectAeb.objAx, _x.diagBusForSortedObjectAeb.objAy, _x.diagBusForSortedObjectAeb.ttrIndex, _x.diagBusForSortedObjectAeb.ttpIndex,) = _get_struct_4f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.edgeIndex = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.maxCLeIdx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.minCRiIdx = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.taLateralThreatMatrixOpl = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLongPosnRelToHost = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLatPosnRelToHost = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLongSpanRelToHost = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLatSpanRelToHost = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLongPosnRelToObj = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLatPosnRelToObj = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLongSpanRelToObj = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLatSpanRelToObj = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat = s.unpack(str[start:end])
      self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat = list(map(bool, self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat))
      _x = self
      start = end
      end += 24
      (_x.diagBusForSortedObjectAeb.aNegLgtJerkReqdForIntv, _x.diagBusForSortedObjectAeb.objHeading, _x.diagBusForSortedObjectAeb.aLgtPreCalc1, _x.diagBusForSortedObjectAeb.mostInPathIndex, _x.diagBusForSortedObjectAeb.posnLatRel, _x.diagBusForSortedObjectAeb.projectedWidth,) = _get_struct_3fI2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.xEdges = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.yEdges = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.egoMotionTime = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.egoXc = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.diagBusForSortedObjectAeb.ttp, _x.diagBusForSortedObjectAeb.fusionSource, _x.diagBusForSortedObjectAeb.brkIndex,) = _get_struct_f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLongDistNear = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.inFwdPathResampled = s.unpack(str[start:end])
      self.diagBusForSortedObjectAeb.inFwdPathResampled = list(map(bool, self.diagBusForSortedObjectAeb.inFwdPathResampled))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.timeVecResampled = s.unpack(str[start:end])
      _x = self
      start = end
      end += 91
      (_x.diagBusForSortedObjectAeb.ttheta_left, _x.diagBusForSortedObjectAeb.ttheta_right, _x.diagBusForSortedObjectAeb.tZero, _x.diagBusForSortedObjectAeb.tObjStop, _x.diagBusForSortedObjectAeb.flgJustPass, _x.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero, _x.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn, _x.diagBusForSortedObjectAeb.TargetLowCurvature, _x.diagBusForSortedObjectAeb.LessHeadOnAtCollision, _x.diagBusForSortedObjectAeb.headingAtHostStartOfTheTurn, _x.diagBusForSortedObjectAeb.objTrjCurvature, _x.diagBusForSortedObjectAeb.predObjHeadingAtTtc, _x.diagBusForSortedObjectAeb.predHostHeadingChangeAtTtc, _x.diagBusForSortedObjectAeb.predRelativeHeadingAtTtc, _x.diagBusForSortedObjectAeb.isGenMovingOnComingScenario, _x.diagBusForSortedObjectAeb.hostDrvStraight, _x.diagBusForSortedObjectAeb.hostIsTurning, _x.diagBusForSortedObjectAeb.targetIsTurning, _x.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn, _x.diagBusForSortedObjectAeb.isLtapTargetTurn, _x.diagBusForSortedObjectAeb.isLtapHostTurn, _x.diagBusForSortedObjectAeb.useStrictInPath, _x.diagBusForSortedObjectAeb.inPathCurPosn, _x.diagBusForSortedObjectAeb.availStopdist, _x.diagBusForSortedObjectAeb.rawBrkJerk, _x.diagBusForSortedObjectAeb.rawBrkALgt, _x.diagBusForSortedObjectAeb.impctPosnWithOutIntv, _x.diagBusForSortedObjectAeb.impctPosnWithIntv, _x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj,) = _get_struct_4f5B5f9B5fI4fB().unpack(str[start:end])
      self.diagBusForSortedObjectAeb.flgJustPass = bool(self.diagBusForSortedObjectAeb.flgJustPass)
      self.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero = bool(self.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero)
      self.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn = bool(self.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn)
      self.diagBusForSortedObjectAeb.TargetLowCurvature = bool(self.diagBusForSortedObjectAeb.TargetLowCurvature)
      self.diagBusForSortedObjectAeb.LessHeadOnAtCollision = bool(self.diagBusForSortedObjectAeb.LessHeadOnAtCollision)
      self.diagBusForSortedObjectAeb.isGenMovingOnComingScenario = bool(self.diagBusForSortedObjectAeb.isGenMovingOnComingScenario)
      self.diagBusForSortedObjectAeb.hostDrvStraight = bool(self.diagBusForSortedObjectAeb.hostDrvStraight)
      self.diagBusForSortedObjectAeb.hostIsTurning = bool(self.diagBusForSortedObjectAeb.hostIsTurning)
      self.diagBusForSortedObjectAeb.targetIsTurning = bool(self.diagBusForSortedObjectAeb.targetIsTurning)
      self.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn = bool(self.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn)
      self.diagBusForSortedObjectAeb.isLtapTargetTurn = bool(self.diagBusForSortedObjectAeb.isLtapTargetTurn)
      self.diagBusForSortedObjectAeb.isLtapHostTurn = bool(self.diagBusForSortedObjectAeb.isLtapHostTurn)
      self.diagBusForSortedObjectAeb.useStrictInPath = bool(self.diagBusForSortedObjectAeb.useStrictInPath)
      self.diagBusForSortedObjectAeb.inPathCurPosn = bool(self.diagBusForSortedObjectAeb.inPathCurPosn)
      self.brkActvDlydForObj = bool(self.brkActvDlydForObj)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IB5fI().pack(_x.diagBusForSortedObjectAeb.id, _x.diagBusForSortedObjectAeb.type, _x.diagBusForSortedObjectAeb.stillExist, _x.diagBusForSortedObjectAeb.marginsLatInPathCurr, _x.diagBusForSortedObjectAeb.marginsLatInPathPred, _x.diagBusForSortedObjectAeb.marginsLgtForIntv, _x.diagBusForSortedObjectAeb.marginsLatForIntv, _x.diagBusForSortedObjectAeb.offSetLatForPrimaryTarget, _x.diagBusForSortedObjectAeb.loopIndex))
      length = len(self.diagBusForSortedObjectAeb.predCenPosnLgt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.predCenPosnLgt.tostring())
      length = len(self.diagBusForSortedObjectAeb.predCenPosnLat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.predCenPosnLat.tostring())
      length = len(self.diagBusForSortedObjectAeb.predCosHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.predCosHeading.tostring())
      length = len(self.diagBusForSortedObjectAeb.predSinHeading)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.predSinHeading.tostring())
      _x = self
      buff.write(_get_struct_I4B5f().pack(_x.diagBusForSortedObjectAeb.objMovingDirection, _x.diagBusForSortedObjectAeb.linearOrCurvedPredValid, _x.diagBusForSortedObjectAeb.curvedMotion, _x.diagBusForSortedObjectAeb.stationary, _x.diagBusForSortedObjectAeb.movingOncoming, _x.diagBusForSortedObjectAeb.aNegLgtRqrdForCtrl, _x.diagBusForSortedObjectAeb.crvtReqdLe, _x.diagBusForSortedObjectAeb.crvtRateReqdLe, _x.diagBusForSortedObjectAeb.crvtReqdRi, _x.diagBusForSortedObjectAeb.crvtRateReqdRi))
      length = len(self.diagBusForSortedObjectAeb.opCond1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.diagBusForSortedObjectAeb.opCond1.tostring())
      length = len(self.diagBusForSortedObjectAeb.opCond2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.diagBusForSortedObjectAeb.opCond2.tostring())
      length = len(self.diagBusForSortedObjectAeb.opCond3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.diagBusForSortedObjectAeb.opCond3.tostring())
      length = len(self.diagBusForSortedObjectAeb.opCond4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.diagBusForSortedObjectAeb.opCond4.tostring())
      _x = self
      buff.write(_get_struct_4f2I().pack(_x.diagBusForSortedObjectAeb.objVx, _x.diagBusForSortedObjectAeb.objVy, _x.diagBusForSortedObjectAeb.objAx, _x.diagBusForSortedObjectAeb.objAy, _x.diagBusForSortedObjectAeb.ttrIndex, _x.diagBusForSortedObjectAeb.ttpIndex))
      length = len(self.diagBusForSortedObjectAeb.edgeIndex)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.diagBusForSortedObjectAeb.edgeIndex.tostring())
      length = len(self.diagBusForSortedObjectAeb.maxCLeIdx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.diagBusForSortedObjectAeb.maxCLeIdx.tostring())
      length = len(self.diagBusForSortedObjectAeb.minCRiIdx)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.diagBusForSortedObjectAeb.minCRiIdx.tostring())
      length = len(self.diagBusForSortedObjectAeb.taLateralThreatMatrixOpl)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.diagBusForSortedObjectAeb.taLateralThreatMatrixOpl.tostring())
      length = len(self.diagBusForSortedObjectAeb.objLongPosnRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.objLongPosnRelToHost.tostring())
      length = len(self.diagBusForSortedObjectAeb.objLatPosnRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.objLatPosnRelToHost.tostring())
      length = len(self.diagBusForSortedObjectAeb.objLongSpanRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.objLongSpanRelToHost.tostring())
      length = len(self.diagBusForSortedObjectAeb.objLatSpanRelToHost)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.objLatSpanRelToHost.tostring())
      length = len(self.diagBusForSortedObjectAeb.hostLongPosnRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.hostLongPosnRelToObj.tostring())
      length = len(self.diagBusForSortedObjectAeb.hostLatPosnRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.hostLatPosnRelToObj.tostring())
      length = len(self.diagBusForSortedObjectAeb.hostLongSpanRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.hostLongSpanRelToObj.tostring())
      length = len(self.diagBusForSortedObjectAeb.hostLatSpanRelToObj)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.hostLatSpanRelToObj.tostring())
      length = len(self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat.tostring())
      _x = self
      buff.write(_get_struct_3fI2f().pack(_x.diagBusForSortedObjectAeb.aNegLgtJerkReqdForIntv, _x.diagBusForSortedObjectAeb.objHeading, _x.diagBusForSortedObjectAeb.aLgtPreCalc1, _x.diagBusForSortedObjectAeb.mostInPathIndex, _x.diagBusForSortedObjectAeb.posnLatRel, _x.diagBusForSortedObjectAeb.projectedWidth))
      length = len(self.diagBusForSortedObjectAeb.xEdges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.xEdges.tostring())
      length = len(self.diagBusForSortedObjectAeb.yEdges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.yEdges.tostring())
      length = len(self.diagBusForSortedObjectAeb.egoMotionTime)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.egoMotionTime.tostring())
      length = len(self.diagBusForSortedObjectAeb.egoXc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.egoXc.tostring())
      _x = self
      buff.write(_get_struct_f2I().pack(_x.diagBusForSortedObjectAeb.ttp, _x.diagBusForSortedObjectAeb.fusionSource, _x.diagBusForSortedObjectAeb.brkIndex))
      length = len(self.diagBusForSortedObjectAeb.objLongDistNear)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.objLongDistNear.tostring())
      length = len(self.diagBusForSortedObjectAeb.inFwdPathResampled)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.diagBusForSortedObjectAeb.inFwdPathResampled.tostring())
      length = len(self.diagBusForSortedObjectAeb.timeVecResampled)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.diagBusForSortedObjectAeb.timeVecResampled.tostring())
      _x = self
      buff.write(_get_struct_4f5B5f9B5fI4fB().pack(_x.diagBusForSortedObjectAeb.ttheta_left, _x.diagBusForSortedObjectAeb.ttheta_right, _x.diagBusForSortedObjectAeb.tZero, _x.diagBusForSortedObjectAeb.tObjStop, _x.diagBusForSortedObjectAeb.flgJustPass, _x.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero, _x.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn, _x.diagBusForSortedObjectAeb.TargetLowCurvature, _x.diagBusForSortedObjectAeb.LessHeadOnAtCollision, _x.diagBusForSortedObjectAeb.headingAtHostStartOfTheTurn, _x.diagBusForSortedObjectAeb.objTrjCurvature, _x.diagBusForSortedObjectAeb.predObjHeadingAtTtc, _x.diagBusForSortedObjectAeb.predHostHeadingChangeAtTtc, _x.diagBusForSortedObjectAeb.predRelativeHeadingAtTtc, _x.diagBusForSortedObjectAeb.isGenMovingOnComingScenario, _x.diagBusForSortedObjectAeb.hostDrvStraight, _x.diagBusForSortedObjectAeb.hostIsTurning, _x.diagBusForSortedObjectAeb.targetIsTurning, _x.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn, _x.diagBusForSortedObjectAeb.isLtapTargetTurn, _x.diagBusForSortedObjectAeb.isLtapHostTurn, _x.diagBusForSortedObjectAeb.useStrictInPath, _x.diagBusForSortedObjectAeb.inPathCurPosn, _x.diagBusForSortedObjectAeb.availStopdist, _x.diagBusForSortedObjectAeb.rawBrkJerk, _x.diagBusForSortedObjectAeb.rawBrkALgt, _x.diagBusForSortedObjectAeb.impctPosnWithOutIntv, _x.diagBusForSortedObjectAeb.impctPosnWithIntv, _x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.diagBusForSortedObjectAeb is None:
        self.diagBusForSortedObjectAeb = rospy_message_converter.msg.SortedObjectAebForDiag_t()
      end = 0
      _x = self
      start = end
      end += 33
      (_x.diagBusForSortedObjectAeb.id, _x.diagBusForSortedObjectAeb.type, _x.diagBusForSortedObjectAeb.stillExist, _x.diagBusForSortedObjectAeb.marginsLatInPathCurr, _x.diagBusForSortedObjectAeb.marginsLatInPathPred, _x.diagBusForSortedObjectAeb.marginsLgtForIntv, _x.diagBusForSortedObjectAeb.marginsLatForIntv, _x.diagBusForSortedObjectAeb.offSetLatForPrimaryTarget, _x.diagBusForSortedObjectAeb.loopIndex,) = _get_struct_2IB5fI().unpack(str[start:end])
      self.diagBusForSortedObjectAeb.stillExist = bool(self.diagBusForSortedObjectAeb.stillExist)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predCenPosnLgt = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predCenPosnLat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predCosHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.predSinHeading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.diagBusForSortedObjectAeb.objMovingDirection, _x.diagBusForSortedObjectAeb.linearOrCurvedPredValid, _x.diagBusForSortedObjectAeb.curvedMotion, _x.diagBusForSortedObjectAeb.stationary, _x.diagBusForSortedObjectAeb.movingOncoming, _x.diagBusForSortedObjectAeb.aNegLgtRqrdForCtrl, _x.diagBusForSortedObjectAeb.crvtReqdLe, _x.diagBusForSortedObjectAeb.crvtRateReqdLe, _x.diagBusForSortedObjectAeb.crvtReqdRi, _x.diagBusForSortedObjectAeb.crvtRateReqdRi,) = _get_struct_I4B5f().unpack(str[start:end])
      self.diagBusForSortedObjectAeb.linearOrCurvedPredValid = bool(self.diagBusForSortedObjectAeb.linearOrCurvedPredValid)
      self.diagBusForSortedObjectAeb.curvedMotion = bool(self.diagBusForSortedObjectAeb.curvedMotion)
      self.diagBusForSortedObjectAeb.stationary = bool(self.diagBusForSortedObjectAeb.stationary)
      self.diagBusForSortedObjectAeb.movingOncoming = bool(self.diagBusForSortedObjectAeb.movingOncoming)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond1 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.diagBusForSortedObjectAeb.opCond1 = list(map(bool, self.diagBusForSortedObjectAeb.opCond1))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond2 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.diagBusForSortedObjectAeb.opCond2 = list(map(bool, self.diagBusForSortedObjectAeb.opCond2))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond3 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.diagBusForSortedObjectAeb.opCond3 = list(map(bool, self.diagBusForSortedObjectAeb.opCond3))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.opCond4 = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.diagBusForSortedObjectAeb.opCond4 = list(map(bool, self.diagBusForSortedObjectAeb.opCond4))
      _x = self
      start = end
      end += 24
      (_x.diagBusForSortedObjectAeb.objVx, _x.diagBusForSortedObjectAeb.objVy, _x.diagBusForSortedObjectAeb.objAx, _x.diagBusForSortedObjectAeb.objAy, _x.diagBusForSortedObjectAeb.ttrIndex, _x.diagBusForSortedObjectAeb.ttpIndex,) = _get_struct_4f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.edgeIndex = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.maxCLeIdx = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.minCRiIdx = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.taLateralThreatMatrixOpl = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLongPosnRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLatPosnRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLongSpanRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLatSpanRelToHost = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLongPosnRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLatPosnRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLongSpanRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.hostLatSpanRelToObj = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat = list(map(bool, self.diagBusForSortedObjectAeb.isValidUpdateForLongThreat))
      _x = self
      start = end
      end += 24
      (_x.diagBusForSortedObjectAeb.aNegLgtJerkReqdForIntv, _x.diagBusForSortedObjectAeb.objHeading, _x.diagBusForSortedObjectAeb.aLgtPreCalc1, _x.diagBusForSortedObjectAeb.mostInPathIndex, _x.diagBusForSortedObjectAeb.posnLatRel, _x.diagBusForSortedObjectAeb.projectedWidth,) = _get_struct_3fI2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.xEdges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.yEdges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.egoMotionTime = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.egoXc = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.diagBusForSortedObjectAeb.ttp, _x.diagBusForSortedObjectAeb.fusionSource, _x.diagBusForSortedObjectAeb.brkIndex,) = _get_struct_f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.objLongDistNear = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.inFwdPathResampled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.diagBusForSortedObjectAeb.inFwdPathResampled = list(map(bool, self.diagBusForSortedObjectAeb.inFwdPathResampled))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.diagBusForSortedObjectAeb.timeVecResampled = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 91
      (_x.diagBusForSortedObjectAeb.ttheta_left, _x.diagBusForSortedObjectAeb.ttheta_right, _x.diagBusForSortedObjectAeb.tZero, _x.diagBusForSortedObjectAeb.tObjStop, _x.diagBusForSortedObjectAeb.flgJustPass, _x.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero, _x.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn, _x.diagBusForSortedObjectAeb.TargetLowCurvature, _x.diagBusForSortedObjectAeb.LessHeadOnAtCollision, _x.diagBusForSortedObjectAeb.headingAtHostStartOfTheTurn, _x.diagBusForSortedObjectAeb.objTrjCurvature, _x.diagBusForSortedObjectAeb.predObjHeadingAtTtc, _x.diagBusForSortedObjectAeb.predHostHeadingChangeAtTtc, _x.diagBusForSortedObjectAeb.predRelativeHeadingAtTtc, _x.diagBusForSortedObjectAeb.isGenMovingOnComingScenario, _x.diagBusForSortedObjectAeb.hostDrvStraight, _x.diagBusForSortedObjectAeb.hostIsTurning, _x.diagBusForSortedObjectAeb.targetIsTurning, _x.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn, _x.diagBusForSortedObjectAeb.isLtapTargetTurn, _x.diagBusForSortedObjectAeb.isLtapHostTurn, _x.diagBusForSortedObjectAeb.useStrictInPath, _x.diagBusForSortedObjectAeb.inPathCurPosn, _x.diagBusForSortedObjectAeb.availStopdist, _x.diagBusForSortedObjectAeb.rawBrkJerk, _x.diagBusForSortedObjectAeb.rawBrkALgt, _x.diagBusForSortedObjectAeb.impctPosnWithOutIntv, _x.diagBusForSortedObjectAeb.impctPosnWithIntv, _x.objEnablerCheckResults, _x.longCloseEdgeDist, _x.timeDelay, _x.aLgtReqdPreCalcd, _x.aLatReqdPreCalcd, _x.brkActvDlydForObj,) = _get_struct_4f5B5f9B5fI4fB().unpack(str[start:end])
      self.diagBusForSortedObjectAeb.flgJustPass = bool(self.diagBusForSortedObjectAeb.flgJustPass)
      self.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero = bool(self.diagBusForSortedObjectAeb.flgObjNotInPathAtTZero)
      self.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn = bool(self.diagBusForSortedObjectAeb.TargetOnComingDuringHostTurn)
      self.diagBusForSortedObjectAeb.TargetLowCurvature = bool(self.diagBusForSortedObjectAeb.TargetLowCurvature)
      self.diagBusForSortedObjectAeb.LessHeadOnAtCollision = bool(self.diagBusForSortedObjectAeb.LessHeadOnAtCollision)
      self.diagBusForSortedObjectAeb.isGenMovingOnComingScenario = bool(self.diagBusForSortedObjectAeb.isGenMovingOnComingScenario)
      self.diagBusForSortedObjectAeb.hostDrvStraight = bool(self.diagBusForSortedObjectAeb.hostDrvStraight)
      self.diagBusForSortedObjectAeb.hostIsTurning = bool(self.diagBusForSortedObjectAeb.hostIsTurning)
      self.diagBusForSortedObjectAeb.targetIsTurning = bool(self.diagBusForSortedObjectAeb.targetIsTurning)
      self.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn = bool(self.diagBusForSortedObjectAeb.relativePosnOkDuringHostTurn)
      self.diagBusForSortedObjectAeb.isLtapTargetTurn = bool(self.diagBusForSortedObjectAeb.isLtapTargetTurn)
      self.diagBusForSortedObjectAeb.isLtapHostTurn = bool(self.diagBusForSortedObjectAeb.isLtapHostTurn)
      self.diagBusForSortedObjectAeb.useStrictInPath = bool(self.diagBusForSortedObjectAeb.useStrictInPath)
      self.diagBusForSortedObjectAeb.inPathCurPosn = bool(self.diagBusForSortedObjectAeb.inPathCurPosn)
      self.brkActvDlydForObj = bool(self.brkActvDlydForObj)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB5fI = None
def _get_struct_2IB5fI():
    global _struct_2IB5fI
    if _struct_2IB5fI is None:
        _struct_2IB5fI = struct.Struct("<2IB5fI")
    return _struct_2IB5fI
_struct_3fI2f = None
def _get_struct_3fI2f():
    global _struct_3fI2f
    if _struct_3fI2f is None:
        _struct_3fI2f = struct.Struct("<3fI2f")
    return _struct_3fI2f
_struct_4f2I = None
def _get_struct_4f2I():
    global _struct_4f2I
    if _struct_4f2I is None:
        _struct_4f2I = struct.Struct("<4f2I")
    return _struct_4f2I
_struct_4f5B5f9B5fI4fB = None
def _get_struct_4f5B5f9B5fI4fB():
    global _struct_4f5B5f9B5fI4fB
    if _struct_4f5B5f9B5fI4fB is None:
        _struct_4f5B5f9B5fI4fB = struct.Struct("<4f5B5f9B5fI4fB")
    return _struct_4f5B5f9B5fI4fB
_struct_I4B5f = None
def _get_struct_I4B5f():
    global _struct_I4B5f
    if _struct_I4B5f is None:
        _struct_I4B5f = struct.Struct("<I4B5f")
    return _struct_I4B5f
_struct_f2I = None
def _get_struct_f2I():
    global _struct_f2I
    if _struct_f2I is None:
        _struct_f2I = struct.Struct("<f2I")
    return _struct_f2I

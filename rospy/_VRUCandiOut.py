# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VRUCandiOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VRUCandiOut(genpy.Message):
  _md5sum = "48d156a1c50784ae338f4487638201ab"
  _type = "rospy_message_converter/VRUCandiOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 ID
uint32 VID
float32 longpos
float32 latpos
float32 longspd
float32 latspd
float32 longacc
float32 latacc
float32 range
float32 rangerear
float32 rangerate
float32 TTC
float32 TTCrear
float32 XOLC
float32 latest
bool oncoming
bool preceding
bool crossing
bool stationary
uint32 AEBconf
bool inpath
bool vfcheck
bool lfcheck
uint32 age
bool agecheck
uint32 inpathage
bool inpathcheck
bool TOI
bool TOIrear
bool warn
bool prefill
bool lowbrake
bool highbrake
bool isvision
bool isfusion
bool isradar
float32 timetoturn
float32 timetobrake
bool steerflag
RefPoint ref_pos
float32 xpos_cir
float32 ypos_cir
float32 roc_tar
float32 mindist
float32 xpos_col
float32 ypos_col
float32 range_col
float32 range_col_tar
float32 yawrate
float32 heading
bool colposs
uint32 col_num
float32 TTC_cir
float32 TTL_cir
float32 TTC_tar
float32 TTL_tar

================================================================================
MSG: rospy_message_converter/RefPoint
uint32 ref_character
float64 pos_x
float64 pos_y
float64 range
float64 heading
"""
  __slots__ = ['ID','VID','longpos','latpos','longspd','latspd','longacc','latacc','range','rangerear','rangerate','TTC','TTCrear','XOLC','latest','oncoming','preceding','crossing','stationary','AEBconf','inpath','vfcheck','lfcheck','age','agecheck','inpathage','inpathcheck','TOI','TOIrear','warn','prefill','lowbrake','highbrake','isvision','isfusion','isradar','timetoturn','timetobrake','steerflag','ref_pos','xpos_cir','ypos_cir','roc_tar','mindist','xpos_col','ypos_col','range_col','range_col_tar','yawrate','heading','colposs','col_num','TTC_cir','TTL_cir','TTC_tar','TTL_tar']
  _slot_types = ['uint32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','bool','bool','uint32','bool','bool','bool','uint32','bool','uint32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','bool','rospy_message_converter/RefPoint','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','uint32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,VID,longpos,latpos,longspd,latspd,longacc,latacc,range,rangerear,rangerate,TTC,TTCrear,XOLC,latest,oncoming,preceding,crossing,stationary,AEBconf,inpath,vfcheck,lfcheck,age,agecheck,inpathage,inpathcheck,TOI,TOIrear,warn,prefill,lowbrake,highbrake,isvision,isfusion,isradar,timetoturn,timetobrake,steerflag,ref_pos,xpos_cir,ypos_cir,roc_tar,mindist,xpos_col,ypos_col,range_col,range_col_tar,yawrate,heading,colposs,col_num,TTC_cir,TTL_cir,TTC_tar,TTL_tar

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VRUCandiOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.VID is None:
        self.VID = 0
      if self.longpos is None:
        self.longpos = 0.
      if self.latpos is None:
        self.latpos = 0.
      if self.longspd is None:
        self.longspd = 0.
      if self.latspd is None:
        self.latspd = 0.
      if self.longacc is None:
        self.longacc = 0.
      if self.latacc is None:
        self.latacc = 0.
      if self.range is None:
        self.range = 0.
      if self.rangerear is None:
        self.rangerear = 0.
      if self.rangerate is None:
        self.rangerate = 0.
      if self.TTC is None:
        self.TTC = 0.
      if self.TTCrear is None:
        self.TTCrear = 0.
      if self.XOLC is None:
        self.XOLC = 0.
      if self.latest is None:
        self.latest = 0.
      if self.oncoming is None:
        self.oncoming = False
      if self.preceding is None:
        self.preceding = False
      if self.crossing is None:
        self.crossing = False
      if self.stationary is None:
        self.stationary = False
      if self.AEBconf is None:
        self.AEBconf = 0
      if self.inpath is None:
        self.inpath = False
      if self.vfcheck is None:
        self.vfcheck = False
      if self.lfcheck is None:
        self.lfcheck = False
      if self.age is None:
        self.age = 0
      if self.agecheck is None:
        self.agecheck = False
      if self.inpathage is None:
        self.inpathage = 0
      if self.inpathcheck is None:
        self.inpathcheck = False
      if self.TOI is None:
        self.TOI = False
      if self.TOIrear is None:
        self.TOIrear = False
      if self.warn is None:
        self.warn = False
      if self.prefill is None:
        self.prefill = False
      if self.lowbrake is None:
        self.lowbrake = False
      if self.highbrake is None:
        self.highbrake = False
      if self.isvision is None:
        self.isvision = False
      if self.isfusion is None:
        self.isfusion = False
      if self.isradar is None:
        self.isradar = False
      if self.timetoturn is None:
        self.timetoturn = 0.
      if self.timetobrake is None:
        self.timetobrake = 0.
      if self.steerflag is None:
        self.steerflag = False
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      if self.xpos_cir is None:
        self.xpos_cir = 0.
      if self.ypos_cir is None:
        self.ypos_cir = 0.
      if self.roc_tar is None:
        self.roc_tar = 0.
      if self.mindist is None:
        self.mindist = 0.
      if self.xpos_col is None:
        self.xpos_col = 0.
      if self.ypos_col is None:
        self.ypos_col = 0.
      if self.range_col is None:
        self.range_col = 0.
      if self.range_col_tar is None:
        self.range_col_tar = 0.
      if self.yawrate is None:
        self.yawrate = 0.
      if self.heading is None:
        self.heading = 0.
      if self.colposs is None:
        self.colposs = False
      if self.col_num is None:
        self.col_num = 0
      if self.TTC_cir is None:
        self.TTC_cir = 0.
      if self.TTL_cir is None:
        self.TTL_cir = 0.
      if self.TTC_tar is None:
        self.TTC_tar = 0.
      if self.TTL_tar is None:
        self.TTL_tar = 0.
    else:
      self.ID = 0
      self.VID = 0
      self.longpos = 0.
      self.latpos = 0.
      self.longspd = 0.
      self.latspd = 0.
      self.longacc = 0.
      self.latacc = 0.
      self.range = 0.
      self.rangerear = 0.
      self.rangerate = 0.
      self.TTC = 0.
      self.TTCrear = 0.
      self.XOLC = 0.
      self.latest = 0.
      self.oncoming = False
      self.preceding = False
      self.crossing = False
      self.stationary = False
      self.AEBconf = 0
      self.inpath = False
      self.vfcheck = False
      self.lfcheck = False
      self.age = 0
      self.agecheck = False
      self.inpathage = 0
      self.inpathcheck = False
      self.TOI = False
      self.TOIrear = False
      self.warn = False
      self.prefill = False
      self.lowbrake = False
      self.highbrake = False
      self.isvision = False
      self.isfusion = False
      self.isradar = False
      self.timetoturn = 0.
      self.timetobrake = 0.
      self.steerflag = False
      self.ref_pos = rospy_message_converter.msg.RefPoint()
      self.xpos_cir = 0.
      self.ypos_cir = 0.
      self.roc_tar = 0.
      self.mindist = 0.
      self.xpos_col = 0.
      self.ypos_col = 0.
      self.range_col = 0.
      self.range_col_tar = 0.
      self.yawrate = 0.
      self.heading = 0.
      self.colposs = False
      self.col_num = 0
      self.TTC_cir = 0.
      self.TTL_cir = 0.
      self.TTC_tar = 0.
      self.TTL_tar = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f().pack(_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      end = 0
      _x = self
      start = end
      end += 196
      (_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar,) = _get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f().unpack(str[start:end])
      self.oncoming = bool(self.oncoming)
      self.preceding = bool(self.preceding)
      self.crossing = bool(self.crossing)
      self.stationary = bool(self.stationary)
      self.inpath = bool(self.inpath)
      self.vfcheck = bool(self.vfcheck)
      self.lfcheck = bool(self.lfcheck)
      self.agecheck = bool(self.agecheck)
      self.inpathcheck = bool(self.inpathcheck)
      self.TOI = bool(self.TOI)
      self.TOIrear = bool(self.TOIrear)
      self.warn = bool(self.warn)
      self.prefill = bool(self.prefill)
      self.lowbrake = bool(self.lowbrake)
      self.highbrake = bool(self.highbrake)
      self.isvision = bool(self.isvision)
      self.isfusion = bool(self.isfusion)
      self.isradar = bool(self.isradar)
      self.steerflag = bool(self.steerflag)
      self.colposs = bool(self.colposs)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f().pack(_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      end = 0
      _x = self
      start = end
      end += 196
      (_x.ID, _x.VID, _x.longpos, _x.latpos, _x.longspd, _x.latspd, _x.longacc, _x.latacc, _x.range, _x.rangerear, _x.rangerate, _x.TTC, _x.TTCrear, _x.XOLC, _x.latest, _x.oncoming, _x.preceding, _x.crossing, _x.stationary, _x.AEBconf, _x.inpath, _x.vfcheck, _x.lfcheck, _x.age, _x.agecheck, _x.inpathage, _x.inpathcheck, _x.TOI, _x.TOIrear, _x.warn, _x.prefill, _x.lowbrake, _x.highbrake, _x.isvision, _x.isfusion, _x.isradar, _x.timetoturn, _x.timetobrake, _x.steerflag, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading, _x.xpos_cir, _x.ypos_cir, _x.roc_tar, _x.mindist, _x.xpos_col, _x.ypos_col, _x.range_col, _x.range_col_tar, _x.yawrate, _x.heading, _x.colposs, _x.col_num, _x.TTC_cir, _x.TTL_cir, _x.TTC_tar, _x.TTL_tar,) = _get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f().unpack(str[start:end])
      self.oncoming = bool(self.oncoming)
      self.preceding = bool(self.preceding)
      self.crossing = bool(self.crossing)
      self.stationary = bool(self.stationary)
      self.inpath = bool(self.inpath)
      self.vfcheck = bool(self.vfcheck)
      self.lfcheck = bool(self.lfcheck)
      self.agecheck = bool(self.agecheck)
      self.inpathcheck = bool(self.inpathcheck)
      self.TOI = bool(self.TOI)
      self.TOIrear = bool(self.TOIrear)
      self.warn = bool(self.warn)
      self.prefill = bool(self.prefill)
      self.lowbrake = bool(self.lowbrake)
      self.highbrake = bool(self.highbrake)
      self.isvision = bool(self.isvision)
      self.isfusion = bool(self.isfusion)
      self.isradar = bool(self.isradar)
      self.steerflag = bool(self.steerflag)
      self.colposs = bool(self.colposs)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f = None
def _get_struct_2I13f4BI3BIBI10B2fBI4d10fBI4f():
    global _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f
    if _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f is None:
        _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f = struct.Struct("<2I13f4BI3BIBI10B2fBI4d10fBI4f")
    return _struct_2I13f4BI3BIBI10B2fBI4d10fBI4f

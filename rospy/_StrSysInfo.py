# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/StrSysInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StrSysInfo(genpy.Message):
  _md5sum = "404ca609fc958c50d0cc96c6ab1c7695"
  _type = "rospy_message_converter/StrSysInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 StrAgFailSts
int32 StrAgCalSts
float32 StrWhlAgSAE
float32 StrWhlAgSpdSAE
int32 PnnAgVld
float32 PnnAgSAE
float32 PnnAgOffsetSAE
int32 EstRackFrcVld
float32 EstRackFrcSae
int32 MtrTqVld
float32 MtrTqSAE
int32 TorsBarTqVld
float32 TorsBarTqSAE
int32 EPSSts
int32 DrvngMod
bool RampSts
int32 ACIMtrTqVld
float32 ACIMtrTqSAE
uint32 Temperature
uint32 SupInfo
uint32 VMCHVIAvl
uint32 EPSReqTyp
bool BCUCTIAvl
int32 WarnLampReq
bool SteerWhlAgAndSpdValid
int32 SWCFailSts
int32 SteerColTiltCtrlSts
uint32 SteerColTiltPos
int32 SteerColTeleCtrlSts
uint32 SteerColTelescopePos
bool HODErrSts
int32 HOSts
int32 OverRideDetn
uint64[] timestamp_ptp_ns
"""
  __slots__ = ['StrAgFailSts','StrAgCalSts','StrWhlAgSAE','StrWhlAgSpdSAE','PnnAgVld','PnnAgSAE','PnnAgOffsetSAE','EstRackFrcVld','EstRackFrcSae','MtrTqVld','MtrTqSAE','TorsBarTqVld','TorsBarTqSAE','EPSSts','DrvngMod','RampSts','ACIMtrTqVld','ACIMtrTqSAE','Temperature','SupInfo','VMCHVIAvl','EPSReqTyp','BCUCTIAvl','WarnLampReq','SteerWhlAgAndSpdValid','SWCFailSts','SteerColTiltCtrlSts','SteerColTiltPos','SteerColTeleCtrlSts','SteerColTelescopePos','HODErrSts','HOSts','OverRideDetn','timestamp_ptp_ns']
  _slot_types = ['int32','int32','float32','float32','int32','float32','float32','int32','float32','int32','float32','int32','float32','int32','int32','bool','int32','float32','uint32','uint32','uint32','uint32','bool','int32','bool','int32','int32','uint32','int32','uint32','bool','int32','int32','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       StrAgFailSts,StrAgCalSts,StrWhlAgSAE,StrWhlAgSpdSAE,PnnAgVld,PnnAgSAE,PnnAgOffsetSAE,EstRackFrcVld,EstRackFrcSae,MtrTqVld,MtrTqSAE,TorsBarTqVld,TorsBarTqSAE,EPSSts,DrvngMod,RampSts,ACIMtrTqVld,ACIMtrTqSAE,Temperature,SupInfo,VMCHVIAvl,EPSReqTyp,BCUCTIAvl,WarnLampReq,SteerWhlAgAndSpdValid,SWCFailSts,SteerColTiltCtrlSts,SteerColTiltPos,SteerColTeleCtrlSts,SteerColTelescopePos,HODErrSts,HOSts,OverRideDetn,timestamp_ptp_ns

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StrSysInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.StrAgFailSts is None:
        self.StrAgFailSts = 0
      if self.StrAgCalSts is None:
        self.StrAgCalSts = 0
      if self.StrWhlAgSAE is None:
        self.StrWhlAgSAE = 0.
      if self.StrWhlAgSpdSAE is None:
        self.StrWhlAgSpdSAE = 0.
      if self.PnnAgVld is None:
        self.PnnAgVld = 0
      if self.PnnAgSAE is None:
        self.PnnAgSAE = 0.
      if self.PnnAgOffsetSAE is None:
        self.PnnAgOffsetSAE = 0.
      if self.EstRackFrcVld is None:
        self.EstRackFrcVld = 0
      if self.EstRackFrcSae is None:
        self.EstRackFrcSae = 0.
      if self.MtrTqVld is None:
        self.MtrTqVld = 0
      if self.MtrTqSAE is None:
        self.MtrTqSAE = 0.
      if self.TorsBarTqVld is None:
        self.TorsBarTqVld = 0
      if self.TorsBarTqSAE is None:
        self.TorsBarTqSAE = 0.
      if self.EPSSts is None:
        self.EPSSts = 0
      if self.DrvngMod is None:
        self.DrvngMod = 0
      if self.RampSts is None:
        self.RampSts = False
      if self.ACIMtrTqVld is None:
        self.ACIMtrTqVld = 0
      if self.ACIMtrTqSAE is None:
        self.ACIMtrTqSAE = 0.
      if self.Temperature is None:
        self.Temperature = 0
      if self.SupInfo is None:
        self.SupInfo = 0
      if self.VMCHVIAvl is None:
        self.VMCHVIAvl = 0
      if self.EPSReqTyp is None:
        self.EPSReqTyp = 0
      if self.BCUCTIAvl is None:
        self.BCUCTIAvl = False
      if self.WarnLampReq is None:
        self.WarnLampReq = 0
      if self.SteerWhlAgAndSpdValid is None:
        self.SteerWhlAgAndSpdValid = False
      if self.SWCFailSts is None:
        self.SWCFailSts = 0
      if self.SteerColTiltCtrlSts is None:
        self.SteerColTiltCtrlSts = 0
      if self.SteerColTiltPos is None:
        self.SteerColTiltPos = 0
      if self.SteerColTeleCtrlSts is None:
        self.SteerColTeleCtrlSts = 0
      if self.SteerColTelescopePos is None:
        self.SteerColTelescopePos = 0
      if self.HODErrSts is None:
        self.HODErrSts = False
      if self.HOSts is None:
        self.HOSts = 0
      if self.OverRideDetn is None:
        self.OverRideDetn = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = []
    else:
      self.StrAgFailSts = 0
      self.StrAgCalSts = 0
      self.StrWhlAgSAE = 0.
      self.StrWhlAgSpdSAE = 0.
      self.PnnAgVld = 0
      self.PnnAgSAE = 0.
      self.PnnAgOffsetSAE = 0.
      self.EstRackFrcVld = 0
      self.EstRackFrcSae = 0.
      self.MtrTqVld = 0
      self.MtrTqSAE = 0.
      self.TorsBarTqVld = 0
      self.TorsBarTqSAE = 0.
      self.EPSSts = 0
      self.DrvngMod = 0
      self.RampSts = False
      self.ACIMtrTqVld = 0
      self.ACIMtrTqSAE = 0.
      self.Temperature = 0
      self.SupInfo = 0
      self.VMCHVIAvl = 0
      self.EPSReqTyp = 0
      self.BCUCTIAvl = False
      self.WarnLampReq = 0
      self.SteerWhlAgAndSpdValid = False
      self.SWCFailSts = 0
      self.SteerColTiltCtrlSts = 0
      self.SteerColTiltPos = 0
      self.SteerColTeleCtrlSts = 0
      self.SteerColTelescopePos = 0
      self.HODErrSts = False
      self.HOSts = 0
      self.OverRideDetn = 0
      self.timestamp_ptp_ns = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().pack(_x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.PnnAgVld, _x.PnnAgSAE, _x.PnnAgOffsetSAE, _x.EstRackFrcVld, _x.EstRackFrcSae, _x.MtrTqVld, _x.MtrTqSAE, _x.TorsBarTqVld, _x.TorsBarTqSAE, _x.EPSSts, _x.DrvngMod, _x.RampSts, _x.ACIMtrTqVld, _x.ACIMtrTqSAE, _x.Temperature, _x.SupInfo, _x.VMCHVIAvl, _x.EPSReqTyp, _x.BCUCTIAvl, _x.WarnLampReq, _x.SteerWhlAgAndSpdValid, _x.SWCFailSts, _x.SteerColTiltCtrlSts, _x.SteerColTiltPos, _x.SteerColTeleCtrlSts, _x.SteerColTelescopePos, _x.HODErrSts, _x.HOSts, _x.OverRideDetn))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.timestamp_ptp_ns))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.PnnAgVld, _x.PnnAgSAE, _x.PnnAgOffsetSAE, _x.EstRackFrcVld, _x.EstRackFrcSae, _x.MtrTqVld, _x.MtrTqSAE, _x.TorsBarTqVld, _x.TorsBarTqSAE, _x.EPSSts, _x.DrvngMod, _x.RampSts, _x.ACIMtrTqVld, _x.ACIMtrTqSAE, _x.Temperature, _x.SupInfo, _x.VMCHVIAvl, _x.EPSReqTyp, _x.BCUCTIAvl, _x.WarnLampReq, _x.SteerWhlAgAndSpdValid, _x.SWCFailSts, _x.SteerColTiltCtrlSts, _x.SteerColTiltPos, _x.SteerColTeleCtrlSts, _x.SteerColTelescopePos, _x.HODErrSts, _x.HOSts, _x.OverRideDetn,) = _get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().unpack(str[start:end])
      self.RampSts = bool(self.RampSts)
      self.BCUCTIAvl = bool(self.BCUCTIAvl)
      self.SteerWhlAgAndSpdValid = bool(self.SteerWhlAgAndSpdValid)
      self.HODErrSts = bool(self.HODErrSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().pack(_x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.PnnAgVld, _x.PnnAgSAE, _x.PnnAgOffsetSAE, _x.EstRackFrcVld, _x.EstRackFrcSae, _x.MtrTqVld, _x.MtrTqSAE, _x.TorsBarTqVld, _x.TorsBarTqSAE, _x.EPSSts, _x.DrvngMod, _x.RampSts, _x.ACIMtrTqVld, _x.ACIMtrTqSAE, _x.Temperature, _x.SupInfo, _x.VMCHVIAvl, _x.EPSReqTyp, _x.BCUCTIAvl, _x.WarnLampReq, _x.SteerWhlAgAndSpdValid, _x.SWCFailSts, _x.SteerColTiltCtrlSts, _x.SteerColTiltPos, _x.SteerColTeleCtrlSts, _x.SteerColTelescopePos, _x.HODErrSts, _x.HOSts, _x.OverRideDetn))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.timestamp_ptp_ns.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.PnnAgVld, _x.PnnAgSAE, _x.PnnAgOffsetSAE, _x.EstRackFrcVld, _x.EstRackFrcSae, _x.MtrTqVld, _x.MtrTqSAE, _x.TorsBarTqVld, _x.TorsBarTqSAE, _x.EPSSts, _x.DrvngMod, _x.RampSts, _x.ACIMtrTqVld, _x.ACIMtrTqSAE, _x.Temperature, _x.SupInfo, _x.VMCHVIAvl, _x.EPSReqTyp, _x.BCUCTIAvl, _x.WarnLampReq, _x.SteerWhlAgAndSpdValid, _x.SWCFailSts, _x.SteerColTiltCtrlSts, _x.SteerColTiltPos, _x.SteerColTeleCtrlSts, _x.SteerColTelescopePos, _x.HODErrSts, _x.HOSts, _x.OverRideDetn,) = _get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().unpack(str[start:end])
      self.RampSts = bool(self.RampSts)
      self.BCUCTIAvl = bool(self.BCUCTIAvl)
      self.SteerWhlAgAndSpdValid = bool(self.SteerWhlAgAndSpdValid)
      self.HODErrSts = bool(self.HODErrSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i = None
def _get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i():
    global _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i
    if _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i is None:
        _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i = struct.Struct("<2i2fi2fififif2iBif4IBiB2iIiIB2i")
    return _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i

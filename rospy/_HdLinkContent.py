# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/HdLinkContent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class HdLinkContent(genpy.Message):
  _md5sum = "dbfa4feb6fb4d046bde58c53c2f80049"
  _type = "rospy_message_converter/HdLinkContent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 hd_link_id
float64 hd_link_length
HDLaneGroup[] hd_lane_groups
Point3d link_start_point
Point3d link_end_point
uint32 hd_link_lane_status

================================================================================
MSG: rospy_message_converter/HDLaneGroup
uint64 hd_lane_group_id
HDLaneInfo[] hd_lane_infos

================================================================================
MSG: rospy_message_converter/HDLaneInfo
uint64 hd_lane_id
uint64[] entry_lane_ids
uint64[] exit_lane_ids

================================================================================
MSG: rospy_message_converter/Point3d
float64 longitude
float64 latitude
float64 altitude
"""
  __slots__ = ['hd_link_id','hd_link_length','hd_lane_groups','link_start_point','link_end_point','hd_link_lane_status']
  _slot_types = ['uint64','float64','rospy_message_converter/HDLaneGroup[]','rospy_message_converter/Point3d','rospy_message_converter/Point3d','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hd_link_id,hd_link_length,hd_lane_groups,link_start_point,link_end_point,hd_link_lane_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HdLinkContent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.hd_link_id is None:
        self.hd_link_id = 0
      if self.hd_link_length is None:
        self.hd_link_length = 0.
      if self.hd_lane_groups is None:
        self.hd_lane_groups = []
      if self.link_start_point is None:
        self.link_start_point = rospy_message_converter.msg.Point3d()
      if self.link_end_point is None:
        self.link_end_point = rospy_message_converter.msg.Point3d()
      if self.hd_link_lane_status is None:
        self.hd_link_lane_status = 0
    else:
      self.hd_link_id = 0
      self.hd_link_length = 0.
      self.hd_lane_groups = []
      self.link_start_point = rospy_message_converter.msg.Point3d()
      self.link_end_point = rospy_message_converter.msg.Point3d()
      self.hd_link_lane_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Qd().pack(_x.hd_link_id, _x.hd_link_length))
      length = len(self.hd_lane_groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.hd_lane_groups:
        _x = val1.hd_lane_group_id
        buff.write(_get_struct_Q().pack(_x))
        length = len(val1.hd_lane_infos)
        buff.write(_struct_I.pack(length))
        for val2 in val1.hd_lane_infos:
          _x = val2.hd_lane_id
          buff.write(_get_struct_Q().pack(_x))
          length = len(val2.entry_lane_ids)
          buff.write(_struct_I.pack(length))
          pattern = '<%sQ'%length
          buff.write(struct.Struct(pattern).pack(*val2.entry_lane_ids))
          length = len(val2.exit_lane_ids)
          buff.write(_struct_I.pack(length))
          pattern = '<%sQ'%length
          buff.write(struct.Struct(pattern).pack(*val2.exit_lane_ids))
      _x = self
      buff.write(_get_struct_6dI().pack(_x.link_start_point.longitude, _x.link_start_point.latitude, _x.link_start_point.altitude, _x.link_end_point.longitude, _x.link_end_point.latitude, _x.link_end_point.altitude, _x.hd_link_lane_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.hd_lane_groups is None:
        self.hd_lane_groups = None
      if self.link_start_point is None:
        self.link_start_point = rospy_message_converter.msg.Point3d()
      if self.link_end_point is None:
        self.link_end_point = rospy_message_converter.msg.Point3d()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.hd_link_id, _x.hd_link_length,) = _get_struct_Qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hd_lane_groups = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HDLaneGroup()
        start = end
        end += 8
        (val1.hd_lane_group_id,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.hd_lane_infos = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.HDLaneInfo()
          start = end
          end += 8
          (val2.hd_lane_id,) = _get_struct_Q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sQ'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.entry_lane_ids = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sQ'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.exit_lane_ids = s.unpack(str[start:end])
          val1.hd_lane_infos.append(val2)
        self.hd_lane_groups.append(val1)
      _x = self
      start = end
      end += 52
      (_x.link_start_point.longitude, _x.link_start_point.latitude, _x.link_start_point.altitude, _x.link_end_point.longitude, _x.link_end_point.latitude, _x.link_end_point.altitude, _x.hd_link_lane_status,) = _get_struct_6dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Qd().pack(_x.hd_link_id, _x.hd_link_length))
      length = len(self.hd_lane_groups)
      buff.write(_struct_I.pack(length))
      for val1 in self.hd_lane_groups:
        _x = val1.hd_lane_group_id
        buff.write(_get_struct_Q().pack(_x))
        length = len(val1.hd_lane_infos)
        buff.write(_struct_I.pack(length))
        for val2 in val1.hd_lane_infos:
          _x = val2.hd_lane_id
          buff.write(_get_struct_Q().pack(_x))
          length = len(val2.entry_lane_ids)
          buff.write(_struct_I.pack(length))
          pattern = '<%sQ'%length
          buff.write(val2.entry_lane_ids.tostring())
          length = len(val2.exit_lane_ids)
          buff.write(_struct_I.pack(length))
          pattern = '<%sQ'%length
          buff.write(val2.exit_lane_ids.tostring())
      _x = self
      buff.write(_get_struct_6dI().pack(_x.link_start_point.longitude, _x.link_start_point.latitude, _x.link_start_point.altitude, _x.link_end_point.longitude, _x.link_end_point.latitude, _x.link_end_point.altitude, _x.hd_link_lane_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.hd_lane_groups is None:
        self.hd_lane_groups = None
      if self.link_start_point is None:
        self.link_start_point = rospy_message_converter.msg.Point3d()
      if self.link_end_point is None:
        self.link_end_point = rospy_message_converter.msg.Point3d()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.hd_link_id, _x.hd_link_length,) = _get_struct_Qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hd_lane_groups = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.HDLaneGroup()
        start = end
        end += 8
        (val1.hd_lane_group_id,) = _get_struct_Q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.hd_lane_infos = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.HDLaneInfo()
          start = end
          end += 8
          (val2.hd_lane_id,) = _get_struct_Q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sQ'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.entry_lane_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sQ'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.exit_lane_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
          val1.hd_lane_infos.append(val2)
        self.hd_lane_groups.append(val1)
      _x = self
      start = end
      end += 52
      (_x.link_start_point.longitude, _x.link_start_point.latitude, _x.link_start_point.altitude, _x.link_end_point.longitude, _x.link_end_point.latitude, _x.link_end_point.altitude, _x.hd_link_lane_status,) = _get_struct_6dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6dI = None
def _get_struct_6dI():
    global _struct_6dI
    if _struct_6dI is None:
        _struct_6dI = struct.Struct("<6dI")
    return _struct_6dI
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_Qd = None
def _get_struct_Qd():
    global _struct_Qd
    if _struct_Qd is None:
        _struct_Qd = struct.Struct("<Qd")
    return _struct_Qd

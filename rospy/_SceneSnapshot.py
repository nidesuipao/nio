# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SceneSnapshot.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SceneSnapshot(genpy.Message):
  _md5sum = "e668a0a151dcc80f54775f684c39be11"
  _type = "rospy_message_converter/SceneSnapshot"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
int32 DANADSts
uint32 DA_NAD_WTI
int32 HODsymbol
int32 drowsiness_lvl
int32 distraction_lvl
int32 distraction_sts
int32 LnAssistSts
int32 AdasLeLine
int32 AdasRiLine
int32 ELKSts
int32 ESFWarningSts
uint32 EASSts
uint32 DA_ALCSsts
int32[] BSDLCAReWarnReq
int32[] SDOWWarnSts
int32[] CTAReWarnReq
int32 RCTABrkSts
int32[] CTAFrntWarnReq
bool AhcHiBmReq
int32 SAS_SLIF_State
int32 SAS_SLWF_WarnTrigger
int32 SApaStatus
int32 PSAPHMIStatus
int32 SetDA_SteerAssist
int32 SetDA_ALCS
int32 AEBOnOffReq
int32 FCTAOnOffCmd
int32 SetLnAssiAidTyp
int32 SetLaneAssiSnvty
int32 DrowsinessSwtSts
int32 DistractionSwtSts
int32 EASWarningLevel
int32 LCAOnOff
int32 LCATctlWarnOnOff
int32 RCTABReq
int32 RCTAReq
int32 SdowOnOffReq
int32 SetHMA
int32 VehEgyMngtMod
PVATResult pvat
LocVector3 wgs84_position
int32 status
LaneLoc lane_loc
VehCtrlIfInfo VehCtrlIf
int32 TurnIndcrSwtSts
int32 FrntWiprSwtSts
int32 TurnLightReq
int32 HzrdWarnSts
int32 VehState
bool CrashDetd
DMS_DrowsinessResult drowsiness_result
DMS_DistractionResult distraction_result
LatCtrlIf LatCtrl
LngctrlCmfrtIf LngCtrlCmfrt
LngCtrlEmrgIf LngCtrlEmrgnc
LngLwSpdCtrlIf LngLwSpdCtrl
VehModMngIfInfo VehModMng
SafeStateInfo SafetyState
int32 FCWSetReq
int32 StrAgFailSts
int32 StrAgCalSts
float32 StrWhlAgSAE
float32 StrWhlAgSpdSAE
int32 EPSSts
int32 DrvngMod
float32 TorsBarTqSAE
int32 OverRideDetn
BrkPdlInfo BrkPdl
BrkFunInfo BrkFunSt
AccrPedalInfo AccrPedal
GearInfo Gear
int32 CruiseStatus
int32 VCUEPBReq
WhlDynInfo[] WhlDyn
VehSpdInfos VehSpd
float32 LgtSAEAg
float32 LatSAEAg
float32 YawRateSAERps
float32 VehOdom
uint32 HWASM_stHeroButtonPress_mp
int32 AEBSts
int32 gaze_aoi
DMSPose head_pose
uint32 lane_id
int32 position_type
int32 ort_type
float64 latitude
float64 longitude
float32 msl_height
float32 yaw
float32 std_lat
float32 std_long
uint32 num_sat_used
int32 mode
LocEulerAngle euler_angle
float32 confidence
int32[] TSR_Name
float32[] TSR_Lat_Distance
float32[] TSR_Long_Distance
float32[] TSR_Name_Value
int32 SAPAPrkgModReq
int32 PcwWarnReq
int32 function_status_nop_sts
uint32 nop_alc_sts
int32 TauGapSet
int32 SetSpeedCtrlSts
bool SwtichDA_NOP
int32 SetDA_NOPALC
uint32 LatCtrl_bfLksSprs_mp
uint32 LatCtrl_bfLCATakeOverSprsMask_mp
float32 VehDispSpd
uint32 SAS_SpeedLimitValue
DMS_EyeStatusResult eye_status_result
DMS_PhoneActionResult phone_result
DMS_SmokeResult smoke_result
DMS_YawnResult yawn_result
DMS_HeadMovementResult head_movement_result
DMS_AgeResult age_result
DMS_GenderResult gender_result
DMS_EmotionResult emotion_result
int32 strabismus_result
int32 system_status
string uuid
int32 SetDA_SpeedAssist
int32[] AdUpSwtSts
uint32 DisplaySetSpd
int32 SpeedLimitTakeover
uint32 DA_NopWTI
uint32 nop_speed_limit_value
int32 DriverPSAPRequest
uint32 ACCSC_uNOPActivationPrevention_mp
uint32 ACCSC_uNOPSuppression_mp
bool nop_scene_mgmt_ok
uint32 form_of_way
uint32 m_adasmap_is_highway
uint32 SApaAbortReason
int32 PSAPAbortReason
string station_id
RmeLine tpp_trajectory
LaneDetection laneline
int32 DA_SetSpeedAnimation

================================================================================
MSG: rospy_message_converter/PVATResult
uint32 init_state
uint32 ins_state
int32 position_type
float64 latitude
float64 longitude
float64 height
float64 undulation
float64 velocity_north
float64 velocity_east
float64 velocity_up
float64 roll
float64 pitch
float64 azimuth
float64 bias_gyro_x
float64 bias_gyro_y
float64 bias_gyro_z
float64 bias_acc_x
float64 bias_acc_y
float64 bias_acc_z
float32 std_lat
float32 std_long
float32 std_height
float32 std_vel_north
float32 std_vel_east
float32 std_vel_up
float32 std_roll
float32 std_pitch
float32 std_azimuth
UTCTime utc_time
float64 itow_time
uint32 gps_ref_week
uint32 num_sat_track
uint32 num_sat_used
uint32 num_sat_dfrq
uint32 update_flag
uint32 propagate_time
int32 gdpr_status
float32 rsd_imu_bdy_x
float32 rsd_imu_bdy_y
float32 rsd_imu_bdy_z
uint32 dyna_cal_state
uint64 timestamp_ptp_ns
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/UTCTime
uint32 year
uint32 month
uint32 day
uint32 hour
uint32 min
uint32 sec
float32 msec

================================================================================
MSG: rospy_message_converter/LocVector3
float64 x
float64 y
float64 z

================================================================================
MSG: rospy_message_converter/LaneLoc
int32 lane_loc_status
uint64 curr_link_id
uint64 curr_lane_id
int32 hdmap_version

================================================================================
MSG: rospy_message_converter/VehCtrlIfInfo
LngCtrlFun LngCtrlIf
StrCtrlInfo LatCtrlIf

================================================================================
MSG: rospy_message_converter/LngCtrlFun
bool VLCAvl
bool VLCActv
float32 VLCTarDecel
int32 LLCFctSt
int32 LLCIntrrptErrTyp
bool AutoBrkgAvl
bool AutoBrkgActv
int32 ADTSts
int32 HldLampReq
bool FCC1_ForceFctEna
bool FCC1_BrkReqEna
float32 FCC1_TarBrkFReq
bool FCC1_VehHldReq
bool FCC1_VLCActv
float32 RVMCLgtDecCp
uint32 RVMCLgtSts
int32 VCUCruiseCtrlMod
int32 VMCBrkOvrd
float32 VMCLgtAccCp
float32 VMCLgtDecCp
uint32 VMCLgtSts
uint64[] timestamp_ptp_ns
float32 FCC1_VLCTarDecel
bool FCC1_VMCBrkOvrd

================================================================================
MSG: rospy_message_converter/StrCtrlInfo
int32 ActvExtIf
bool HIAvl
bool TOIAvl
bool DAIAvl
bool PAIAvl
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/DMS_DrowsinessResult
int32 level
bool is_valid
float32 perclos

================================================================================
MSG: rospy_message_converter/DMS_DistractionResult
int32 level
float32 confidence
bool is_valid
int32 short_level
int32 fcw_set

================================================================================
MSG: rospy_message_converter/LatCtrlIf
int32 ACIReqVld
float32 ACIReqSAE
float32 ACISafLimAngDyn
uint32 ACISafLimAngRM
float32 ACISafLimAngDynOffs
uint32 ACISafLimRate
uint32 ACIRampRate
uint32 ACISafLimAngLM
uint32 ACISafLimMode
int32 CTIReqVal
float32 CTIReqSAE
int32 StrIFReq
uint32 HVIReq
int32 HVIReqVld
int32 ACITsuSup
int32 ACIOvrdThr

================================================================================
MSG: rospy_message_converter/LngctrlCmfrtIf
int32 VLCReqFct
int32 VLCMode
float32 VLCTarA
float32 VLCMinJerkA
float32 VLCMaxJerkA
bool VLCDrvOffReq
bool VLCDecToStopReq
int32 VLCShutdownModReq
int32 AD_ActvSftyBltReq

================================================================================
MSG: rospy_message_converter/LngCtrlEmrgIf
bool AEBDecelReq
float32 AEBTarDecel
bool EBADecelReq
bool ABPReq
uint32 AWBSnvtyLvl
bool AWBReq
uint32 ABASnvtyLvl
bool ABAReq
bool AEBDecelReq_DummyForDVR

================================================================================
MSG: rospy_message_converter/LngLwSpdCtrlIf
int32 FctSeln
int32 CntrlModReq
int32 LLCSt
int32 TarGearReq
float32 TarSpdKph
float32 StopDst
int32 ShutdownModReq
int32 EPBReq
float32 VehDstToVSlot
float32 SlopeDstOffset
int32 VCU_ObjModTyp
float32 VCU_ObjModLonDst
float32 VCU_ObjModLatDst

================================================================================
MSG: rospy_message_converter/VehModMngIfInfo
int32 ADDrvTypReq
int32 DDMReq

================================================================================
MSG: rospy_message_converter/SafeStateInfo
uint32 SafetyState1

================================================================================
MSG: rospy_message_converter/BrkPdlInfo
int32 TrvlCalSts
float32 Trvl
int32 BrkPedlSts
bool BrkpedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkFunInfo
bool BDWActv
bool ABAAvl
bool ABAActv
bool ABPAvl
bool ABPActv
bool ABSActv
int32 AVHSts
bool DTCActv
bool DWTActv
bool EBAAvl
bool EBAActv
bool EBDActv
bool HBAActv
int32 HDCSts
bool HHCAvl
bool HHCActv
bool TCSActv
bool TCSDeactv
bool VDCActv
bool VDCDeactv
bool EBDFailLampReq
bool VDCTCSLampInfo
bool VDCTCSFailLampReq
bool ABSFailLampReq
bool VDCTCSOnOfflampReq
bool AWBActv
bool AWBAvl
bool EBPActv
bool HBCActv
int32 ARPCfgSts
bool CDPActv
bool CDPAvail
bool ARPActv
bool DTCAvl
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/AccrPedalInfo
int32 EfcPosnVld
float32 EfcPosn
int32 ActPosnVld
float32 ActPosn
bool PedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/GearInfo
int32 SlctrPosnVld
int32 ActGearVld
int32 TrgtGearVld
int32 SlctrPosn
int32 ActGear
int32 TrgtGear
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlDynInfo
int32 WhlSpdSts
int32 WhlSpdMovgDir
float32 WhlSpd
int32 WhlPlsCntrVld
uint32 WhlPlsCntr
uint64 WhlSpd_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VehSpdInfos
int32 VehSpdSts
int32 VehMovgDir
float32 VehSpdkph
float32 VehSpdmps
float32 VehFiltLngAcc
int32 VehSpdASILDSts
float32 VehSpdASILD
float32 VehDispSpd
int32 VCUVehDispSpdSts
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/DMSPose
bool is_valid
float32 yaw
float32 pitch
float32 roll

================================================================================
MSG: rospy_message_converter/LocEulerAngle
float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: rospy_message_converter/DMS_EyeStatusResult
int32 left_eye
float32 left_open_confidence
float32 left_visible_percent
DMSVector left_eye_gaze_vector
DMSPosition3f left_eye_position
int32 right_eye
float32 right_open_confidence
float32 right_visible_percent
DMSVector right_eye_gaze_vector
DMSPosition3f right_eye_position

================================================================================
MSG: rospy_message_converter/DMSVector
bool is_valid
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/DMSPosition3f
bool is_valid
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/DMS_PhoneActionResult
int32 phone_action
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_SmokeResult
bool is_smoking
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_YawnResult
bool is_yawning
float32 confidence
uint32 yawn_num

================================================================================
MSG: rospy_message_converter/DMS_HeadMovementResult
int32 head_movement
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_AgeResult
float32 age
float32 age_confidence
bool is_child
float32 child_confidence

================================================================================
MSG: rospy_message_converter/DMS_GenderResult
int32 gender
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_EmotionResult
int32 emotion
float32 confidence

================================================================================
MSG: rospy_message_converter/RmeLine
float32 pt_conf
float32 c0
float32 c1
float32 c2
float32 c3
float32 lrange_start
float32 lrange_end
float32 lm_width
int32 line_color
int32 line_type
int32 line_src

================================================================================
MSG: rospy_message_converter/LaneDetection
float32 LD_Lane_Width
bool LD_Crossing_Flag
LaneLine[] line

================================================================================
MSG: rospy_message_converter/LaneLine
int32 LD_Role
LineProperty LD_First_Line
bool LD_Is_Multi_Clothoid
LineProperty LD_Second_Line
bool LD_Special_Point_Is_Detected
int32 LD_Special_Point_Type
Point LD_Special_Point
Point[] LD_Point
float32 LD_Dash_Average_Gap
float32 LD_Dash_Average_Length
bool LD_Crossing
uint32 LD_Crossing_ID
int32 LD_Measuring_Status
int32 LD_Prediction_Reason
uint32 LD_Track_ID
uint32 LD_Track_Age
int32 LD_Quality
float32 LD_Confidence
float32 LD_Marker_Width

================================================================================
MSG: rospy_message_converter/LineProperty
int32 LD_Type
int32 LD_Color
PolyLine LD_Line
float32 LD_Start
float32 LD_End
int32 LD_End_Reason

================================================================================
MSG: rospy_message_converter/PolyLine
float32 line_C0
float32 line_C1
float32 line_C2
float32 line_C3

================================================================================
MSG: rospy_message_converter/Point
float32 LD_Point_Lat
float32 LD_Point_Long
float32 LD_Point_Alti
"""
  __slots__ = ['timestamp','DANADSts','DA_NAD_WTI','HODsymbol','drowsiness_lvl','distraction_lvl','distraction_sts','LnAssistSts','AdasLeLine','AdasRiLine','ELKSts','ESFWarningSts','EASSts','DA_ALCSsts','BSDLCAReWarnReq','SDOWWarnSts','CTAReWarnReq','RCTABrkSts','CTAFrntWarnReq','AhcHiBmReq','SAS_SLIF_State','SAS_SLWF_WarnTrigger','SApaStatus','PSAPHMIStatus','SetDA_SteerAssist','SetDA_ALCS','AEBOnOffReq','FCTAOnOffCmd','SetLnAssiAidTyp','SetLaneAssiSnvty','DrowsinessSwtSts','DistractionSwtSts','EASWarningLevel','LCAOnOff','LCATctlWarnOnOff','RCTABReq','RCTAReq','SdowOnOffReq','SetHMA','VehEgyMngtMod','pvat','wgs84_position','status','lane_loc','VehCtrlIf','TurnIndcrSwtSts','FrntWiprSwtSts','TurnLightReq','HzrdWarnSts','VehState','CrashDetd','drowsiness_result','distraction_result','LatCtrl','LngCtrlCmfrt','LngCtrlEmrgnc','LngLwSpdCtrl','VehModMng','SafetyState','FCWSetReq','StrAgFailSts','StrAgCalSts','StrWhlAgSAE','StrWhlAgSpdSAE','EPSSts','DrvngMod','TorsBarTqSAE','OverRideDetn','BrkPdl','BrkFunSt','AccrPedal','Gear','CruiseStatus','VCUEPBReq','WhlDyn','VehSpd','LgtSAEAg','LatSAEAg','YawRateSAERps','VehOdom','HWASM_stHeroButtonPress_mp','AEBSts','gaze_aoi','head_pose','lane_id','position_type','ort_type','latitude','longitude','msl_height','yaw','std_lat','std_long','num_sat_used','mode','euler_angle','confidence','TSR_Name','TSR_Lat_Distance','TSR_Long_Distance','TSR_Name_Value','SAPAPrkgModReq','PcwWarnReq','function_status_nop_sts','nop_alc_sts','TauGapSet','SetSpeedCtrlSts','SwtichDA_NOP','SetDA_NOPALC','LatCtrl_bfLksSprs_mp','LatCtrl_bfLCATakeOverSprsMask_mp','VehDispSpd','SAS_SpeedLimitValue','eye_status_result','phone_result','smoke_result','yawn_result','head_movement_result','age_result','gender_result','emotion_result','strabismus_result','system_status','uuid','SetDA_SpeedAssist','AdUpSwtSts','DisplaySetSpd','SpeedLimitTakeover','DA_NopWTI','nop_speed_limit_value','DriverPSAPRequest','ACCSC_uNOPActivationPrevention_mp','ACCSC_uNOPSuppression_mp','nop_scene_mgmt_ok','form_of_way','m_adasmap_is_highway','SApaAbortReason','PSAPAbortReason','station_id','tpp_trajectory','laneline','DA_SetSpeedAnimation']
  _slot_types = ['uint64','int32','uint32','int32','int32','int32','int32','int32','int32','int32','int32','int32','uint32','uint32','int32[]','int32[]','int32[]','int32','int32[]','bool','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','rospy_message_converter/PVATResult','rospy_message_converter/LocVector3','int32','rospy_message_converter/LaneLoc','rospy_message_converter/VehCtrlIfInfo','int32','int32','int32','int32','int32','bool','rospy_message_converter/DMS_DrowsinessResult','rospy_message_converter/DMS_DistractionResult','rospy_message_converter/LatCtrlIf','rospy_message_converter/LngctrlCmfrtIf','rospy_message_converter/LngCtrlEmrgIf','rospy_message_converter/LngLwSpdCtrlIf','rospy_message_converter/VehModMngIfInfo','rospy_message_converter/SafeStateInfo','int32','int32','int32','float32','float32','int32','int32','float32','int32','rospy_message_converter/BrkPdlInfo','rospy_message_converter/BrkFunInfo','rospy_message_converter/AccrPedalInfo','rospy_message_converter/GearInfo','int32','int32','rospy_message_converter/WhlDynInfo[]','rospy_message_converter/VehSpdInfos','float32','float32','float32','float32','uint32','int32','int32','rospy_message_converter/DMSPose','uint32','int32','int32','float64','float64','float32','float32','float32','float32','uint32','int32','rospy_message_converter/LocEulerAngle','float32','int32[]','float32[]','float32[]','float32[]','int32','int32','int32','uint32','int32','int32','bool','int32','uint32','uint32','float32','uint32','rospy_message_converter/DMS_EyeStatusResult','rospy_message_converter/DMS_PhoneActionResult','rospy_message_converter/DMS_SmokeResult','rospy_message_converter/DMS_YawnResult','rospy_message_converter/DMS_HeadMovementResult','rospy_message_converter/DMS_AgeResult','rospy_message_converter/DMS_GenderResult','rospy_message_converter/DMS_EmotionResult','int32','int32','string','int32','int32[]','uint32','int32','uint32','uint32','int32','uint32','uint32','bool','uint32','uint32','uint32','int32','string','rospy_message_converter/RmeLine','rospy_message_converter/LaneDetection','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,DANADSts,DA_NAD_WTI,HODsymbol,drowsiness_lvl,distraction_lvl,distraction_sts,LnAssistSts,AdasLeLine,AdasRiLine,ELKSts,ESFWarningSts,EASSts,DA_ALCSsts,BSDLCAReWarnReq,SDOWWarnSts,CTAReWarnReq,RCTABrkSts,CTAFrntWarnReq,AhcHiBmReq,SAS_SLIF_State,SAS_SLWF_WarnTrigger,SApaStatus,PSAPHMIStatus,SetDA_SteerAssist,SetDA_ALCS,AEBOnOffReq,FCTAOnOffCmd,SetLnAssiAidTyp,SetLaneAssiSnvty,DrowsinessSwtSts,DistractionSwtSts,EASWarningLevel,LCAOnOff,LCATctlWarnOnOff,RCTABReq,RCTAReq,SdowOnOffReq,SetHMA,VehEgyMngtMod,pvat,wgs84_position,status,lane_loc,VehCtrlIf,TurnIndcrSwtSts,FrntWiprSwtSts,TurnLightReq,HzrdWarnSts,VehState,CrashDetd,drowsiness_result,distraction_result,LatCtrl,LngCtrlCmfrt,LngCtrlEmrgnc,LngLwSpdCtrl,VehModMng,SafetyState,FCWSetReq,StrAgFailSts,StrAgCalSts,StrWhlAgSAE,StrWhlAgSpdSAE,EPSSts,DrvngMod,TorsBarTqSAE,OverRideDetn,BrkPdl,BrkFunSt,AccrPedal,Gear,CruiseStatus,VCUEPBReq,WhlDyn,VehSpd,LgtSAEAg,LatSAEAg,YawRateSAERps,VehOdom,HWASM_stHeroButtonPress_mp,AEBSts,gaze_aoi,head_pose,lane_id,position_type,ort_type,latitude,longitude,msl_height,yaw,std_lat,std_long,num_sat_used,mode,euler_angle,confidence,TSR_Name,TSR_Lat_Distance,TSR_Long_Distance,TSR_Name_Value,SAPAPrkgModReq,PcwWarnReq,function_status_nop_sts,nop_alc_sts,TauGapSet,SetSpeedCtrlSts,SwtichDA_NOP,SetDA_NOPALC,LatCtrl_bfLksSprs_mp,LatCtrl_bfLCATakeOverSprsMask_mp,VehDispSpd,SAS_SpeedLimitValue,eye_status_result,phone_result,smoke_result,yawn_result,head_movement_result,age_result,gender_result,emotion_result,strabismus_result,system_status,uuid,SetDA_SpeedAssist,AdUpSwtSts,DisplaySetSpd,SpeedLimitTakeover,DA_NopWTI,nop_speed_limit_value,DriverPSAPRequest,ACCSC_uNOPActivationPrevention_mp,ACCSC_uNOPSuppression_mp,nop_scene_mgmt_ok,form_of_way,m_adasmap_is_highway,SApaAbortReason,PSAPAbortReason,station_id,tpp_trajectory,laneline,DA_SetSpeedAnimation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SceneSnapshot, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.DANADSts is None:
        self.DANADSts = 0
      if self.DA_NAD_WTI is None:
        self.DA_NAD_WTI = 0
      if self.HODsymbol is None:
        self.HODsymbol = 0
      if self.drowsiness_lvl is None:
        self.drowsiness_lvl = 0
      if self.distraction_lvl is None:
        self.distraction_lvl = 0
      if self.distraction_sts is None:
        self.distraction_sts = 0
      if self.LnAssistSts is None:
        self.LnAssistSts = 0
      if self.AdasLeLine is None:
        self.AdasLeLine = 0
      if self.AdasRiLine is None:
        self.AdasRiLine = 0
      if self.ELKSts is None:
        self.ELKSts = 0
      if self.ESFWarningSts is None:
        self.ESFWarningSts = 0
      if self.EASSts is None:
        self.EASSts = 0
      if self.DA_ALCSsts is None:
        self.DA_ALCSsts = 0
      if self.BSDLCAReWarnReq is None:
        self.BSDLCAReWarnReq = []
      if self.SDOWWarnSts is None:
        self.SDOWWarnSts = []
      if self.CTAReWarnReq is None:
        self.CTAReWarnReq = []
      if self.RCTABrkSts is None:
        self.RCTABrkSts = 0
      if self.CTAFrntWarnReq is None:
        self.CTAFrntWarnReq = []
      if self.AhcHiBmReq is None:
        self.AhcHiBmReq = False
      if self.SAS_SLIF_State is None:
        self.SAS_SLIF_State = 0
      if self.SAS_SLWF_WarnTrigger is None:
        self.SAS_SLWF_WarnTrigger = 0
      if self.SApaStatus is None:
        self.SApaStatus = 0
      if self.PSAPHMIStatus is None:
        self.PSAPHMIStatus = 0
      if self.SetDA_SteerAssist is None:
        self.SetDA_SteerAssist = 0
      if self.SetDA_ALCS is None:
        self.SetDA_ALCS = 0
      if self.AEBOnOffReq is None:
        self.AEBOnOffReq = 0
      if self.FCTAOnOffCmd is None:
        self.FCTAOnOffCmd = 0
      if self.SetLnAssiAidTyp is None:
        self.SetLnAssiAidTyp = 0
      if self.SetLaneAssiSnvty is None:
        self.SetLaneAssiSnvty = 0
      if self.DrowsinessSwtSts is None:
        self.DrowsinessSwtSts = 0
      if self.DistractionSwtSts is None:
        self.DistractionSwtSts = 0
      if self.EASWarningLevel is None:
        self.EASWarningLevel = 0
      if self.LCAOnOff is None:
        self.LCAOnOff = 0
      if self.LCATctlWarnOnOff is None:
        self.LCATctlWarnOnOff = 0
      if self.RCTABReq is None:
        self.RCTABReq = 0
      if self.RCTAReq is None:
        self.RCTAReq = 0
      if self.SdowOnOffReq is None:
        self.SdowOnOffReq = 0
      if self.SetHMA is None:
        self.SetHMA = 0
      if self.VehEgyMngtMod is None:
        self.VehEgyMngtMod = 0
      if self.pvat is None:
        self.pvat = rospy_message_converter.msg.PVATResult()
      if self.wgs84_position is None:
        self.wgs84_position = rospy_message_converter.msg.LocVector3()
      if self.status is None:
        self.status = 0
      if self.lane_loc is None:
        self.lane_loc = rospy_message_converter.msg.LaneLoc()
      if self.VehCtrlIf is None:
        self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      if self.TurnIndcrSwtSts is None:
        self.TurnIndcrSwtSts = 0
      if self.FrntWiprSwtSts is None:
        self.FrntWiprSwtSts = 0
      if self.TurnLightReq is None:
        self.TurnLightReq = 0
      if self.HzrdWarnSts is None:
        self.HzrdWarnSts = 0
      if self.VehState is None:
        self.VehState = 0
      if self.CrashDetd is None:
        self.CrashDetd = False
      if self.drowsiness_result is None:
        self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      if self.distraction_result is None:
        self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      if self.LatCtrl is None:
        self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      if self.LngCtrlCmfrt is None:
        self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      if self.LngCtrlEmrgnc is None:
        self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      if self.LngLwSpdCtrl is None:
        self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.VehModMng is None:
        self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      if self.SafetyState is None:
        self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      if self.FCWSetReq is None:
        self.FCWSetReq = 0
      if self.StrAgFailSts is None:
        self.StrAgFailSts = 0
      if self.StrAgCalSts is None:
        self.StrAgCalSts = 0
      if self.StrWhlAgSAE is None:
        self.StrWhlAgSAE = 0.
      if self.StrWhlAgSpdSAE is None:
        self.StrWhlAgSpdSAE = 0.
      if self.EPSSts is None:
        self.EPSSts = 0
      if self.DrvngMod is None:
        self.DrvngMod = 0
      if self.TorsBarTqSAE is None:
        self.TorsBarTqSAE = 0.
      if self.OverRideDetn is None:
        self.OverRideDetn = 0
      if self.BrkPdl is None:
        self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      if self.BrkFunSt is None:
        self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      if self.AccrPedal is None:
        self.AccrPedal = rospy_message_converter.msg.AccrPedalInfo()
      if self.Gear is None:
        self.Gear = rospy_message_converter.msg.GearInfo()
      if self.CruiseStatus is None:
        self.CruiseStatus = 0
      if self.VCUEPBReq is None:
        self.VCUEPBReq = 0
      if self.WhlDyn is None:
        self.WhlDyn = []
      if self.VehSpd is None:
        self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      if self.LgtSAEAg is None:
        self.LgtSAEAg = 0.
      if self.LatSAEAg is None:
        self.LatSAEAg = 0.
      if self.YawRateSAERps is None:
        self.YawRateSAERps = 0.
      if self.VehOdom is None:
        self.VehOdom = 0.
      if self.HWASM_stHeroButtonPress_mp is None:
        self.HWASM_stHeroButtonPress_mp = 0
      if self.AEBSts is None:
        self.AEBSts = 0
      if self.gaze_aoi is None:
        self.gaze_aoi = 0
      if self.head_pose is None:
        self.head_pose = rospy_message_converter.msg.DMSPose()
      if self.lane_id is None:
        self.lane_id = 0
      if self.position_type is None:
        self.position_type = 0
      if self.ort_type is None:
        self.ort_type = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.msl_height is None:
        self.msl_height = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.std_lat is None:
        self.std_lat = 0.
      if self.std_long is None:
        self.std_long = 0.
      if self.num_sat_used is None:
        self.num_sat_used = 0
      if self.mode is None:
        self.mode = 0
      if self.euler_angle is None:
        self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      if self.confidence is None:
        self.confidence = 0.
      if self.TSR_Name is None:
        self.TSR_Name = []
      if self.TSR_Lat_Distance is None:
        self.TSR_Lat_Distance = []
      if self.TSR_Long_Distance is None:
        self.TSR_Long_Distance = []
      if self.TSR_Name_Value is None:
        self.TSR_Name_Value = []
      if self.SAPAPrkgModReq is None:
        self.SAPAPrkgModReq = 0
      if self.PcwWarnReq is None:
        self.PcwWarnReq = 0
      if self.function_status_nop_sts is None:
        self.function_status_nop_sts = 0
      if self.nop_alc_sts is None:
        self.nop_alc_sts = 0
      if self.TauGapSet is None:
        self.TauGapSet = 0
      if self.SetSpeedCtrlSts is None:
        self.SetSpeedCtrlSts = 0
      if self.SwtichDA_NOP is None:
        self.SwtichDA_NOP = False
      if self.SetDA_NOPALC is None:
        self.SetDA_NOPALC = 0
      if self.LatCtrl_bfLksSprs_mp is None:
        self.LatCtrl_bfLksSprs_mp = 0
      if self.LatCtrl_bfLCATakeOverSprsMask_mp is None:
        self.LatCtrl_bfLCATakeOverSprsMask_mp = 0
      if self.VehDispSpd is None:
        self.VehDispSpd = 0.
      if self.SAS_SpeedLimitValue is None:
        self.SAS_SpeedLimitValue = 0
      if self.eye_status_result is None:
        self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      if self.phone_result is None:
        self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      if self.smoke_result is None:
        self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      if self.yawn_result is None:
        self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      if self.head_movement_result is None:
        self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      if self.age_result is None:
        self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      if self.gender_result is None:
        self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      if self.emotion_result is None:
        self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      if self.strabismus_result is None:
        self.strabismus_result = 0
      if self.system_status is None:
        self.system_status = 0
      if self.uuid is None:
        self.uuid = ''
      if self.SetDA_SpeedAssist is None:
        self.SetDA_SpeedAssist = 0
      if self.AdUpSwtSts is None:
        self.AdUpSwtSts = []
      if self.DisplaySetSpd is None:
        self.DisplaySetSpd = 0
      if self.SpeedLimitTakeover is None:
        self.SpeedLimitTakeover = 0
      if self.DA_NopWTI is None:
        self.DA_NopWTI = 0
      if self.nop_speed_limit_value is None:
        self.nop_speed_limit_value = 0
      if self.DriverPSAPRequest is None:
        self.DriverPSAPRequest = 0
      if self.ACCSC_uNOPActivationPrevention_mp is None:
        self.ACCSC_uNOPActivationPrevention_mp = 0
      if self.ACCSC_uNOPSuppression_mp is None:
        self.ACCSC_uNOPSuppression_mp = 0
      if self.nop_scene_mgmt_ok is None:
        self.nop_scene_mgmt_ok = False
      if self.form_of_way is None:
        self.form_of_way = 0
      if self.m_adasmap_is_highway is None:
        self.m_adasmap_is_highway = 0
      if self.SApaAbortReason is None:
        self.SApaAbortReason = 0
      if self.PSAPAbortReason is None:
        self.PSAPAbortReason = 0
      if self.station_id is None:
        self.station_id = ''
      if self.tpp_trajectory is None:
        self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      if self.laneline is None:
        self.laneline = rospy_message_converter.msg.LaneDetection()
      if self.DA_SetSpeedAnimation is None:
        self.DA_SetSpeedAnimation = 0
    else:
      self.timestamp = 0
      self.DANADSts = 0
      self.DA_NAD_WTI = 0
      self.HODsymbol = 0
      self.drowsiness_lvl = 0
      self.distraction_lvl = 0
      self.distraction_sts = 0
      self.LnAssistSts = 0
      self.AdasLeLine = 0
      self.AdasRiLine = 0
      self.ELKSts = 0
      self.ESFWarningSts = 0
      self.EASSts = 0
      self.DA_ALCSsts = 0
      self.BSDLCAReWarnReq = []
      self.SDOWWarnSts = []
      self.CTAReWarnReq = []
      self.RCTABrkSts = 0
      self.CTAFrntWarnReq = []
      self.AhcHiBmReq = False
      self.SAS_SLIF_State = 0
      self.SAS_SLWF_WarnTrigger = 0
      self.SApaStatus = 0
      self.PSAPHMIStatus = 0
      self.SetDA_SteerAssist = 0
      self.SetDA_ALCS = 0
      self.AEBOnOffReq = 0
      self.FCTAOnOffCmd = 0
      self.SetLnAssiAidTyp = 0
      self.SetLaneAssiSnvty = 0
      self.DrowsinessSwtSts = 0
      self.DistractionSwtSts = 0
      self.EASWarningLevel = 0
      self.LCAOnOff = 0
      self.LCATctlWarnOnOff = 0
      self.RCTABReq = 0
      self.RCTAReq = 0
      self.SdowOnOffReq = 0
      self.SetHMA = 0
      self.VehEgyMngtMod = 0
      self.pvat = rospy_message_converter.msg.PVATResult()
      self.wgs84_position = rospy_message_converter.msg.LocVector3()
      self.status = 0
      self.lane_loc = rospy_message_converter.msg.LaneLoc()
      self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      self.TurnIndcrSwtSts = 0
      self.FrntWiprSwtSts = 0
      self.TurnLightReq = 0
      self.HzrdWarnSts = 0
      self.VehState = 0
      self.CrashDetd = False
      self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      self.FCWSetReq = 0
      self.StrAgFailSts = 0
      self.StrAgCalSts = 0
      self.StrWhlAgSAE = 0.
      self.StrWhlAgSpdSAE = 0.
      self.EPSSts = 0
      self.DrvngMod = 0
      self.TorsBarTqSAE = 0.
      self.OverRideDetn = 0
      self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      self.AccrPedal = rospy_message_converter.msg.AccrPedalInfo()
      self.Gear = rospy_message_converter.msg.GearInfo()
      self.CruiseStatus = 0
      self.VCUEPBReq = 0
      self.WhlDyn = []
      self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      self.LgtSAEAg = 0.
      self.LatSAEAg = 0.
      self.YawRateSAERps = 0.
      self.VehOdom = 0.
      self.HWASM_stHeroButtonPress_mp = 0
      self.AEBSts = 0
      self.gaze_aoi = 0
      self.head_pose = rospy_message_converter.msg.DMSPose()
      self.lane_id = 0
      self.position_type = 0
      self.ort_type = 0
      self.latitude = 0.
      self.longitude = 0.
      self.msl_height = 0.
      self.yaw = 0.
      self.std_lat = 0.
      self.std_long = 0.
      self.num_sat_used = 0
      self.mode = 0
      self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      self.confidence = 0.
      self.TSR_Name = []
      self.TSR_Lat_Distance = []
      self.TSR_Long_Distance = []
      self.TSR_Name_Value = []
      self.SAPAPrkgModReq = 0
      self.PcwWarnReq = 0
      self.function_status_nop_sts = 0
      self.nop_alc_sts = 0
      self.TauGapSet = 0
      self.SetSpeedCtrlSts = 0
      self.SwtichDA_NOP = False
      self.SetDA_NOPALC = 0
      self.LatCtrl_bfLksSprs_mp = 0
      self.LatCtrl_bfLCATakeOverSprsMask_mp = 0
      self.VehDispSpd = 0.
      self.SAS_SpeedLimitValue = 0
      self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      self.strabismus_result = 0
      self.system_status = 0
      self.uuid = ''
      self.SetDA_SpeedAssist = 0
      self.AdUpSwtSts = []
      self.DisplaySetSpd = 0
      self.SpeedLimitTakeover = 0
      self.DA_NopWTI = 0
      self.nop_speed_limit_value = 0
      self.DriverPSAPRequest = 0
      self.ACCSC_uNOPActivationPrevention_mp = 0
      self.ACCSC_uNOPSuppression_mp = 0
      self.nop_scene_mgmt_ok = False
      self.form_of_way = 0
      self.m_adasmap_is_highway = 0
      self.SApaAbortReason = 0
      self.PSAPAbortReason = 0
      self.station_id = ''
      self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      self.laneline = rospy_message_converter.msg.LaneDetection()
      self.DA_SetSpeedAnimation = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QiI9i2I().pack(_x.timestamp, _x.DANADSts, _x.DA_NAD_WTI, _x.HODsymbol, _x.drowsiness_lvl, _x.distraction_lvl, _x.distraction_sts, _x.LnAssistSts, _x.AdasLeLine, _x.AdasRiLine, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.DA_ALCSsts))
      length = len(self.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.BSDLCAReWarnReq))
      length = len(self.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.SDOWWarnSts))
      length = len(self.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAReWarnReq))
      _x = self.RCTABrkSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.CTAFrntWarnReq))
      _x = self
      buff.write(_get_struct_B20i2Ii16d9f6Ifd6Ii3fI2Q().pack(_x.AhcHiBmReq, _x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SApaStatus, _x.PSAPHMIStatus, _x.SetDA_SteerAssist, _x.SetDA_ALCS, _x.AEBOnOffReq, _x.FCTAOnOffCmd, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.DrowsinessSwtSts, _x.DistractionSwtSts, _x.EASWarningLevel, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTABReq, _x.RCTAReq, _x.SdowOnOffReq, _x.SetHMA, _x.VehEgyMngtMod, _x.pvat.init_state, _x.pvat.ins_state, _x.pvat.position_type, _x.pvat.latitude, _x.pvat.longitude, _x.pvat.height, _x.pvat.undulation, _x.pvat.velocity_north, _x.pvat.velocity_east, _x.pvat.velocity_up, _x.pvat.roll, _x.pvat.pitch, _x.pvat.azimuth, _x.pvat.bias_gyro_x, _x.pvat.bias_gyro_y, _x.pvat.bias_gyro_z, _x.pvat.bias_acc_x, _x.pvat.bias_acc_y, _x.pvat.bias_acc_z, _x.pvat.std_lat, _x.pvat.std_long, _x.pvat.std_height, _x.pvat.std_vel_north, _x.pvat.std_vel_east, _x.pvat.std_vel_up, _x.pvat.std_roll, _x.pvat.std_pitch, _x.pvat.std_azimuth, _x.pvat.utc_time.year, _x.pvat.utc_time.month, _x.pvat.utc_time.day, _x.pvat.utc_time.hour, _x.pvat.utc_time.min, _x.pvat.utc_time.sec, _x.pvat.utc_time.msec, _x.pvat.itow_time, _x.pvat.gps_ref_week, _x.pvat.num_sat_track, _x.pvat.num_sat_used, _x.pvat.num_sat_dfrq, _x.pvat.update_flag, _x.pvat.propagate_time, _x.pvat.gdpr_status, _x.pvat.rsd_imu_bdy_x, _x.pvat.rsd_imu_bdy_y, _x.pvat.rsd_imu_bdy_z, _x.pvat.dyna_cal_state, _x.pvat.timestamp_ptp_ns, _x.pvat.publish_ptp_ts))
      _x = self.pvat.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.pvat.counter, _x.pvat.publish_ts, _x.wgs84_position.x, _x.wgs84_position.y, _x.wgs84_position.z, _x.status, _x.lane_loc.lane_loc_status, _x.lane_loc.curr_link_id, _x.lane_loc.curr_lane_id, _x.lane_loc.hdmap_version, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts))
      length = len(self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i().pack(_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.TurnIndcrSwtSts, _x.FrntWiprSwtSts, _x.TurnLightReq, _x.HzrdWarnSts, _x.VehState, _x.CrashDetd, _x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.FCWSetReq, _x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.EPSSts, _x.DrvngMod, _x.TorsBarTqSAE, _x.OverRideDetn, _x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.AccrPedal.EfcPosnVld, _x.AccrPedal.EfcPosn, _x.AccrPedal.ActPosnVld, _x.AccrPedal.ActPosn, _x.AccrPedal.PedlOvrd, _x.AccrPedal.timestamp_ptp_ns, _x.Gear.SlctrPosnVld, _x.Gear.ActGearVld, _x.Gear.TrgtGearVld, _x.Gear.SlctrPosn, _x.Gear.ActGear, _x.Gear.TrgtGear, _x.Gear.timestamp_ptp_ns, _x.CruiseStatus, _x.VCUEPBReq))
      length = len(self.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2i3fi2fi().pack(_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts))
      length = len(self.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.VehSpd.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_4fI2iB3fI2i2d4fIi3df().pack(_x.LgtSAEAg, _x.LatSAEAg, _x.YawRateSAERps, _x.VehOdom, _x.HWASM_stHeroButtonPress_mp, _x.AEBSts, _x.gaze_aoi, _x.head_pose.is_valid, _x.head_pose.yaw, _x.head_pose.pitch, _x.head_pose.roll, _x.lane_id, _x.position_type, _x.ort_type, _x.latitude, _x.longitude, _x.msl_height, _x.yaw, _x.std_lat, _x.std_long, _x.num_sat_used, _x.mode, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.confidence))
      length = len(self.TSR_Name)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.TSR_Name))
      length = len(self.TSR_Lat_Distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.TSR_Lat_Distance))
      length = len(self.TSR_Long_Distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.TSR_Long_Distance))
      length = len(self.TSR_Name_Value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.TSR_Name_Value))
      _x = self
      buff.write(_get_struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i().pack(_x.SAPAPrkgModReq, _x.PcwWarnReq, _x.function_status_nop_sts, _x.nop_alc_sts, _x.TauGapSet, _x.SetSpeedCtrlSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.LatCtrl_bfLksSprs_mp, _x.LatCtrl_bfLCATakeOverSprsMask_mp, _x.VehDispSpd, _x.SAS_SpeedLimitValue, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.strabismus_result, _x.system_status))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.SetDA_SpeedAssist
      buff.write(_get_struct_i().pack(_x))
      length = len(self.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.AdUpSwtSts))
      _x = self
      buff.write(_get_struct_Ii2Ii2IB3Ii().pack(_x.DisplaySetSpd, _x.SpeedLimitTakeover, _x.DA_NopWTI, _x.nop_speed_limit_value, _x.DriverPSAPRequest, _x.ACCSC_uNOPActivationPrevention_mp, _x.ACCSC_uNOPSuppression_mp, _x.nop_scene_mgmt_ok, _x.form_of_way, _x.m_adasmap_is_highway, _x.SApaAbortReason, _x.PSAPAbortReason))
      _x = self.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8f3ifB().pack(_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.laneline.LD_Lane_Width, _x.laneline.LD_Crossing_Flag))
      length = len(self.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.LD_First_Line
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v2 = _v1.LD_Line
        _x = _v2
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v1
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v3 = val1.LD_Second_Line
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v4 = _v3.LD_Line
        _x = _v4
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v3
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v5 = val1.LD_Special_Point
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self.DA_SetSpeedAnimation
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pvat is None:
        self.pvat = rospy_message_converter.msg.PVATResult()
      if self.wgs84_position is None:
        self.wgs84_position = rospy_message_converter.msg.LocVector3()
      if self.lane_loc is None:
        self.lane_loc = rospy_message_converter.msg.LaneLoc()
      if self.VehCtrlIf is None:
        self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      if self.drowsiness_result is None:
        self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      if self.distraction_result is None:
        self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      if self.LatCtrl is None:
        self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      if self.LngCtrlCmfrt is None:
        self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      if self.LngCtrlEmrgnc is None:
        self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      if self.LngLwSpdCtrl is None:
        self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.VehModMng is None:
        self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      if self.SafetyState is None:
        self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      if self.BrkPdl is None:
        self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      if self.BrkFunSt is None:
        self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      if self.AccrPedal is None:
        self.AccrPedal = rospy_message_converter.msg.AccrPedalInfo()
      if self.Gear is None:
        self.Gear = rospy_message_converter.msg.GearInfo()
      if self.WhlDyn is None:
        self.WhlDyn = None
      if self.VehSpd is None:
        self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      if self.head_pose is None:
        self.head_pose = rospy_message_converter.msg.DMSPose()
      if self.euler_angle is None:
        self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      if self.eye_status_result is None:
        self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      if self.phone_result is None:
        self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      if self.smoke_result is None:
        self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      if self.yawn_result is None:
        self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      if self.head_movement_result is None:
        self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      if self.age_result is None:
        self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      if self.gender_result is None:
        self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      if self.emotion_result is None:
        self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      if self.tpp_trajectory is None:
        self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      if self.laneline is None:
        self.laneline = rospy_message_converter.msg.LaneDetection()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.timestamp, _x.DANADSts, _x.DA_NAD_WTI, _x.HODsymbol, _x.drowsiness_lvl, _x.distraction_lvl, _x.distraction_sts, _x.LnAssistSts, _x.AdasLeLine, _x.AdasRiLine, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.DA_ALCSsts,) = _get_struct_QiI9i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BSDLCAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SDOWWarnSts = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAReWarnReq = s.unpack(str[start:end])
      start = end
      end += 4
      (self.RCTABrkSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAFrntWarnReq = s.unpack(str[start:end])
      _x = self
      start = end
      end += 353
      (_x.AhcHiBmReq, _x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SApaStatus, _x.PSAPHMIStatus, _x.SetDA_SteerAssist, _x.SetDA_ALCS, _x.AEBOnOffReq, _x.FCTAOnOffCmd, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.DrowsinessSwtSts, _x.DistractionSwtSts, _x.EASWarningLevel, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTABReq, _x.RCTAReq, _x.SdowOnOffReq, _x.SetHMA, _x.VehEgyMngtMod, _x.pvat.init_state, _x.pvat.ins_state, _x.pvat.position_type, _x.pvat.latitude, _x.pvat.longitude, _x.pvat.height, _x.pvat.undulation, _x.pvat.velocity_north, _x.pvat.velocity_east, _x.pvat.velocity_up, _x.pvat.roll, _x.pvat.pitch, _x.pvat.azimuth, _x.pvat.bias_gyro_x, _x.pvat.bias_gyro_y, _x.pvat.bias_gyro_z, _x.pvat.bias_acc_x, _x.pvat.bias_acc_y, _x.pvat.bias_acc_z, _x.pvat.std_lat, _x.pvat.std_long, _x.pvat.std_height, _x.pvat.std_vel_north, _x.pvat.std_vel_east, _x.pvat.std_vel_up, _x.pvat.std_roll, _x.pvat.std_pitch, _x.pvat.std_azimuth, _x.pvat.utc_time.year, _x.pvat.utc_time.month, _x.pvat.utc_time.day, _x.pvat.utc_time.hour, _x.pvat.utc_time.min, _x.pvat.utc_time.sec, _x.pvat.utc_time.msec, _x.pvat.itow_time, _x.pvat.gps_ref_week, _x.pvat.num_sat_track, _x.pvat.num_sat_used, _x.pvat.num_sat_dfrq, _x.pvat.update_flag, _x.pvat.propagate_time, _x.pvat.gdpr_status, _x.pvat.rsd_imu_bdy_x, _x.pvat.rsd_imu_bdy_y, _x.pvat.rsd_imu_bdy_z, _x.pvat.dyna_cal_state, _x.pvat.timestamp_ptp_ns, _x.pvat.publish_ptp_ts,) = _get_struct_B20i2Ii16d9f6Ifd6Ii3fI2Q().unpack(str[start:end])
      self.AhcHiBmReq = bool(self.AhcHiBmReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pvat.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pvat.publisher_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.pvat.counter, _x.pvat.publish_ts, _x.wgs84_position.x, _x.wgs84_position.y, _x.wgs84_position.z, _x.status, _x.lane_loc.lane_loc_status, _x.lane_loc.curr_link_id, _x.lane_loc.curr_lane_id, _x.lane_loc.hdmap_version, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts,) = _get_struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.VLCAvl = bool(self.VehCtrlIf.LngCtrlIf.VLCAvl)
      self.VehCtrlIf.LngCtrlIf.VLCActv = bool(self.VehCtrlIf.LngCtrlIf.VLCActv)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgActv = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgActv)
      self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq)
      self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 417
      (_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.TurnIndcrSwtSts, _x.FrntWiprSwtSts, _x.TurnLightReq, _x.HzrdWarnSts, _x.VehState, _x.CrashDetd, _x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.FCWSetReq, _x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.EPSSts, _x.DrvngMod, _x.TorsBarTqSAE, _x.OverRideDetn, _x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.AccrPedal.EfcPosnVld, _x.AccrPedal.EfcPosn, _x.AccrPedal.ActPosnVld, _x.AccrPedal.ActPosn, _x.AccrPedal.PedlOvrd, _x.AccrPedal.timestamp_ptp_ns, _x.Gear.SlctrPosnVld, _x.Gear.ActGearVld, _x.Gear.TrgtGearVld, _x.Gear.SlctrPosn, _x.Gear.ActGear, _x.Gear.TrgtGear, _x.Gear.timestamp_ptp_ns, _x.CruiseStatus, _x.VCUEPBReq,) = _get_struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.VehCtrlIf.LatCtrlIf.HIAvl = bool(self.VehCtrlIf.LatCtrlIf.HIAvl)
      self.VehCtrlIf.LatCtrlIf.TOIAvl = bool(self.VehCtrlIf.LatCtrlIf.TOIAvl)
      self.VehCtrlIf.LatCtrlIf.DAIAvl = bool(self.VehCtrlIf.LatCtrlIf.DAIAvl)
      self.VehCtrlIf.LatCtrlIf.PAIAvl = bool(self.VehCtrlIf.LatCtrlIf.PAIAvl)
      self.CrashDetd = bool(self.CrashDetd)
      self.drowsiness_result.is_valid = bool(self.drowsiness_result.is_valid)
      self.distraction_result.is_valid = bool(self.distraction_result.is_valid)
      self.LngCtrlCmfrt.VLCDrvOffReq = bool(self.LngCtrlCmfrt.VLCDrvOffReq)
      self.LngCtrlCmfrt.VLCDecToStopReq = bool(self.LngCtrlCmfrt.VLCDecToStopReq)
      self.LngCtrlEmrgnc.AEBDecelReq = bool(self.LngCtrlEmrgnc.AEBDecelReq)
      self.LngCtrlEmrgnc.EBADecelReq = bool(self.LngCtrlEmrgnc.EBADecelReq)
      self.LngCtrlEmrgnc.ABPReq = bool(self.LngCtrlEmrgnc.ABPReq)
      self.LngCtrlEmrgnc.AWBReq = bool(self.LngCtrlEmrgnc.AWBReq)
      self.LngCtrlEmrgnc.ABAReq = bool(self.LngCtrlEmrgnc.ABAReq)
      self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR = bool(self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR)
      self.BrkPdl.BrkpedlOvrd = bool(self.BrkPdl.BrkpedlOvrd)
      self.BrkFunSt.BDWActv = bool(self.BrkFunSt.BDWActv)
      self.BrkFunSt.ABAAvl = bool(self.BrkFunSt.ABAAvl)
      self.BrkFunSt.ABAActv = bool(self.BrkFunSt.ABAActv)
      self.BrkFunSt.ABPAvl = bool(self.BrkFunSt.ABPAvl)
      self.BrkFunSt.ABPActv = bool(self.BrkFunSt.ABPActv)
      self.BrkFunSt.ABSActv = bool(self.BrkFunSt.ABSActv)
      self.BrkFunSt.DTCActv = bool(self.BrkFunSt.DTCActv)
      self.BrkFunSt.DWTActv = bool(self.BrkFunSt.DWTActv)
      self.BrkFunSt.EBAAvl = bool(self.BrkFunSt.EBAAvl)
      self.BrkFunSt.EBAActv = bool(self.BrkFunSt.EBAActv)
      self.BrkFunSt.EBDActv = bool(self.BrkFunSt.EBDActv)
      self.BrkFunSt.HBAActv = bool(self.BrkFunSt.HBAActv)
      self.BrkFunSt.HHCAvl = bool(self.BrkFunSt.HHCAvl)
      self.BrkFunSt.HHCActv = bool(self.BrkFunSt.HHCActv)
      self.BrkFunSt.TCSActv = bool(self.BrkFunSt.TCSActv)
      self.BrkFunSt.TCSDeactv = bool(self.BrkFunSt.TCSDeactv)
      self.BrkFunSt.VDCActv = bool(self.BrkFunSt.VDCActv)
      self.BrkFunSt.VDCDeactv = bool(self.BrkFunSt.VDCDeactv)
      self.BrkFunSt.EBDFailLampReq = bool(self.BrkFunSt.EBDFailLampReq)
      self.BrkFunSt.VDCTCSLampInfo = bool(self.BrkFunSt.VDCTCSLampInfo)
      self.BrkFunSt.VDCTCSFailLampReq = bool(self.BrkFunSt.VDCTCSFailLampReq)
      self.BrkFunSt.ABSFailLampReq = bool(self.BrkFunSt.ABSFailLampReq)
      self.BrkFunSt.VDCTCSOnOfflampReq = bool(self.BrkFunSt.VDCTCSOnOfflampReq)
      self.BrkFunSt.AWBActv = bool(self.BrkFunSt.AWBActv)
      self.BrkFunSt.AWBAvl = bool(self.BrkFunSt.AWBAvl)
      self.BrkFunSt.EBPActv = bool(self.BrkFunSt.EBPActv)
      self.BrkFunSt.HBCActv = bool(self.BrkFunSt.HBCActv)
      self.BrkFunSt.CDPActv = bool(self.BrkFunSt.CDPActv)
      self.BrkFunSt.CDPAvail = bool(self.BrkFunSt.CDPAvail)
      self.BrkFunSt.ARPActv = bool(self.BrkFunSt.ARPActv)
      self.BrkFunSt.DTCAvl = bool(self.BrkFunSt.DTCAvl)
      self.AccrPedal.PedlOvrd = bool(self.AccrPedal.PedlOvrd)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.WhlDyn.append(val1)
      _x = self
      start = end
      end += 36
      (_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts,) = _get_struct_2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehSpd.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 121
      (_x.LgtSAEAg, _x.LatSAEAg, _x.YawRateSAERps, _x.VehOdom, _x.HWASM_stHeroButtonPress_mp, _x.AEBSts, _x.gaze_aoi, _x.head_pose.is_valid, _x.head_pose.yaw, _x.head_pose.pitch, _x.head_pose.roll, _x.lane_id, _x.position_type, _x.ort_type, _x.latitude, _x.longitude, _x.msl_height, _x.yaw, _x.std_lat, _x.std_long, _x.num_sat_used, _x.mode, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.confidence,) = _get_struct_4fI2iB3fI2i2d4fIi3df().unpack(str[start:end])
      self.head_pose.is_valid = bool(self.head_pose.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Name = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Lat_Distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Long_Distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Name_Value = s.unpack(str[start:end])
      _x = self
      start = end
      end += 188
      (_x.SAPAPrkgModReq, _x.PcwWarnReq, _x.function_status_nop_sts, _x.nop_alc_sts, _x.TauGapSet, _x.SetSpeedCtrlSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.LatCtrl_bfLksSprs_mp, _x.LatCtrl_bfLCATakeOverSprsMask_mp, _x.VehDispSpd, _x.SAS_SpeedLimitValue, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.strabismus_result, _x.system_status,) = _get_struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i().unpack(str[start:end])
      self.SwtichDA_NOP = bool(self.SwtichDA_NOP)
      self.eye_status_result.left_eye_gaze_vector.is_valid = bool(self.eye_status_result.left_eye_gaze_vector.is_valid)
      self.eye_status_result.left_eye_position.is_valid = bool(self.eye_status_result.left_eye_position.is_valid)
      self.eye_status_result.right_eye_gaze_vector.is_valid = bool(self.eye_status_result.right_eye_gaze_vector.is_valid)
      self.eye_status_result.right_eye_position.is_valid = bool(self.eye_status_result.right_eye_position.is_valid)
      self.smoke_result.is_smoking = bool(self.smoke_result.is_smoking)
      self.yawn_result.is_yawning = bool(self.yawn_result.is_yawning)
      self.age_result.is_child = bool(self.age_result.is_child)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 4
      (self.SetDA_SpeedAssist,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AdUpSwtSts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 45
      (_x.DisplaySetSpd, _x.SpeedLimitTakeover, _x.DA_NopWTI, _x.nop_speed_limit_value, _x.DriverPSAPRequest, _x.ACCSC_uNOPActivationPrevention_mp, _x.ACCSC_uNOPSuppression_mp, _x.nop_scene_mgmt_ok, _x.form_of_way, _x.m_adasmap_is_highway, _x.SApaAbortReason, _x.PSAPAbortReason,) = _get_struct_Ii2Ii2IB3Ii().unpack(str[start:end])
      self.nop_scene_mgmt_ok = bool(self.nop_scene_mgmt_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.station_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.laneline.LD_Lane_Width, _x.laneline.LD_Crossing_Flag,) = _get_struct_8f3ifB().unpack(str[start:end])
      self.laneline.LD_Crossing_Flag = bool(self.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v6 = val1.LD_First_Line
        _x = _v6
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v7 = _v6.LD_Line
        _x = _v7
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v6
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v8 = val1.LD_Second_Line
        _x = _v8
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v9 = _v8.LD_Line
        _x = _v9
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v8
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v10 = val1.LD_Special_Point
        _x = _v10
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.laneline.line.append(val1)
      start = end
      end += 4
      (self.DA_SetSpeedAnimation,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QiI9i2I().pack(_x.timestamp, _x.DANADSts, _x.DA_NAD_WTI, _x.HODsymbol, _x.drowsiness_lvl, _x.distraction_lvl, _x.distraction_sts, _x.LnAssistSts, _x.AdasLeLine, _x.AdasRiLine, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.DA_ALCSsts))
      length = len(self.BSDLCAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.BSDLCAReWarnReq.tostring())
      length = len(self.SDOWWarnSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.SDOWWarnSts.tostring())
      length = len(self.CTAReWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAReWarnReq.tostring())
      _x = self.RCTABrkSts
      buff.write(_get_struct_i().pack(_x))
      length = len(self.CTAFrntWarnReq)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.CTAFrntWarnReq.tostring())
      _x = self
      buff.write(_get_struct_B20i2Ii16d9f6Ifd6Ii3fI2Q().pack(_x.AhcHiBmReq, _x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SApaStatus, _x.PSAPHMIStatus, _x.SetDA_SteerAssist, _x.SetDA_ALCS, _x.AEBOnOffReq, _x.FCTAOnOffCmd, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.DrowsinessSwtSts, _x.DistractionSwtSts, _x.EASWarningLevel, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTABReq, _x.RCTAReq, _x.SdowOnOffReq, _x.SetHMA, _x.VehEgyMngtMod, _x.pvat.init_state, _x.pvat.ins_state, _x.pvat.position_type, _x.pvat.latitude, _x.pvat.longitude, _x.pvat.height, _x.pvat.undulation, _x.pvat.velocity_north, _x.pvat.velocity_east, _x.pvat.velocity_up, _x.pvat.roll, _x.pvat.pitch, _x.pvat.azimuth, _x.pvat.bias_gyro_x, _x.pvat.bias_gyro_y, _x.pvat.bias_gyro_z, _x.pvat.bias_acc_x, _x.pvat.bias_acc_y, _x.pvat.bias_acc_z, _x.pvat.std_lat, _x.pvat.std_long, _x.pvat.std_height, _x.pvat.std_vel_north, _x.pvat.std_vel_east, _x.pvat.std_vel_up, _x.pvat.std_roll, _x.pvat.std_pitch, _x.pvat.std_azimuth, _x.pvat.utc_time.year, _x.pvat.utc_time.month, _x.pvat.utc_time.day, _x.pvat.utc_time.hour, _x.pvat.utc_time.min, _x.pvat.utc_time.sec, _x.pvat.utc_time.msec, _x.pvat.itow_time, _x.pvat.gps_ref_week, _x.pvat.num_sat_track, _x.pvat.num_sat_used, _x.pvat.num_sat_dfrq, _x.pvat.update_flag, _x.pvat.propagate_time, _x.pvat.gdpr_status, _x.pvat.rsd_imu_bdy_x, _x.pvat.rsd_imu_bdy_y, _x.pvat.rsd_imu_bdy_z, _x.pvat.dyna_cal_state, _x.pvat.timestamp_ptp_ns, _x.pvat.publish_ptp_ts))
      _x = self.pvat.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.pvat.counter, _x.pvat.publish_ts, _x.wgs84_position.x, _x.wgs84_position.y, _x.wgs84_position.z, _x.status, _x.lane_loc.lane_loc_status, _x.lane_loc.curr_link_id, _x.lane_loc.curr_lane_id, _x.lane_loc.hdmap_version, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts))
      length = len(self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i().pack(_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.TurnIndcrSwtSts, _x.FrntWiprSwtSts, _x.TurnLightReq, _x.HzrdWarnSts, _x.VehState, _x.CrashDetd, _x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.FCWSetReq, _x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.EPSSts, _x.DrvngMod, _x.TorsBarTqSAE, _x.OverRideDetn, _x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.AccrPedal.EfcPosnVld, _x.AccrPedal.EfcPosn, _x.AccrPedal.ActPosnVld, _x.AccrPedal.ActPosn, _x.AccrPedal.PedlOvrd, _x.AccrPedal.timestamp_ptp_ns, _x.Gear.SlctrPosnVld, _x.Gear.ActGearVld, _x.Gear.TrgtGearVld, _x.Gear.SlctrPosn, _x.Gear.ActGear, _x.Gear.TrgtGear, _x.Gear.timestamp_ptp_ns, _x.CruiseStatus, _x.VCUEPBReq))
      length = len(self.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2i3fi2fi().pack(_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts))
      length = len(self.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.VehSpd.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_4fI2iB3fI2i2d4fIi3df().pack(_x.LgtSAEAg, _x.LatSAEAg, _x.YawRateSAERps, _x.VehOdom, _x.HWASM_stHeroButtonPress_mp, _x.AEBSts, _x.gaze_aoi, _x.head_pose.is_valid, _x.head_pose.yaw, _x.head_pose.pitch, _x.head_pose.roll, _x.lane_id, _x.position_type, _x.ort_type, _x.latitude, _x.longitude, _x.msl_height, _x.yaw, _x.std_lat, _x.std_long, _x.num_sat_used, _x.mode, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.confidence))
      length = len(self.TSR_Name)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.TSR_Name.tostring())
      length = len(self.TSR_Lat_Distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.TSR_Lat_Distance.tostring())
      length = len(self.TSR_Long_Distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.TSR_Long_Distance.tostring())
      length = len(self.TSR_Name_Value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.TSR_Name_Value.tostring())
      _x = self
      buff.write(_get_struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i().pack(_x.SAPAPrkgModReq, _x.PcwWarnReq, _x.function_status_nop_sts, _x.nop_alc_sts, _x.TauGapSet, _x.SetSpeedCtrlSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.LatCtrl_bfLksSprs_mp, _x.LatCtrl_bfLCATakeOverSprsMask_mp, _x.VehDispSpd, _x.SAS_SpeedLimitValue, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.strabismus_result, _x.system_status))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.SetDA_SpeedAssist
      buff.write(_get_struct_i().pack(_x))
      length = len(self.AdUpSwtSts)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.AdUpSwtSts.tostring())
      _x = self
      buff.write(_get_struct_Ii2Ii2IB3Ii().pack(_x.DisplaySetSpd, _x.SpeedLimitTakeover, _x.DA_NopWTI, _x.nop_speed_limit_value, _x.DriverPSAPRequest, _x.ACCSC_uNOPActivationPrevention_mp, _x.ACCSC_uNOPSuppression_mp, _x.nop_scene_mgmt_ok, _x.form_of_way, _x.m_adasmap_is_highway, _x.SApaAbortReason, _x.PSAPAbortReason))
      _x = self.station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8f3ifB().pack(_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.laneline.LD_Lane_Width, _x.laneline.LD_Crossing_Flag))
      length = len(self.laneline.line)
      buff.write(_struct_I.pack(length))
      for val1 in self.laneline.line:
        _x = val1.LD_Role
        buff.write(_get_struct_i().pack(_x))
        _v11 = val1.LD_First_Line
        _x = _v11
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v12 = _v11.LD_Line
        _x = _v12
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v11
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1.LD_Is_Multi_Clothoid
        buff.write(_get_struct_B().pack(_x))
        _v13 = val1.LD_Second_Line
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.LD_Type, _x.LD_Color))
        _v14 = _v13.LD_Line
        _x = _v14
        buff.write(_get_struct_4f().pack(_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3))
        _x = _v13
        buff.write(_get_struct_2fi().pack(_x.LD_Start, _x.LD_End, _x.LD_End_Reason))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type))
        _v15 = val1.LD_Special_Point
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        length = len(val1.LD_Point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.LD_Point:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti))
        _x = val1
        buff.write(_get_struct_2fBI2i2Ii2f().pack(_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width))
      _x = self.DA_SetSpeedAnimation
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pvat is None:
        self.pvat = rospy_message_converter.msg.PVATResult()
      if self.wgs84_position is None:
        self.wgs84_position = rospy_message_converter.msg.LocVector3()
      if self.lane_loc is None:
        self.lane_loc = rospy_message_converter.msg.LaneLoc()
      if self.VehCtrlIf is None:
        self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      if self.drowsiness_result is None:
        self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      if self.distraction_result is None:
        self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      if self.LatCtrl is None:
        self.LatCtrl = rospy_message_converter.msg.LatCtrlIf()
      if self.LngCtrlCmfrt is None:
        self.LngCtrlCmfrt = rospy_message_converter.msg.LngctrlCmfrtIf()
      if self.LngCtrlEmrgnc is None:
        self.LngCtrlEmrgnc = rospy_message_converter.msg.LngCtrlEmrgIf()
      if self.LngLwSpdCtrl is None:
        self.LngLwSpdCtrl = rospy_message_converter.msg.LngLwSpdCtrlIf()
      if self.VehModMng is None:
        self.VehModMng = rospy_message_converter.msg.VehModMngIfInfo()
      if self.SafetyState is None:
        self.SafetyState = rospy_message_converter.msg.SafeStateInfo()
      if self.BrkPdl is None:
        self.BrkPdl = rospy_message_converter.msg.BrkPdlInfo()
      if self.BrkFunSt is None:
        self.BrkFunSt = rospy_message_converter.msg.BrkFunInfo()
      if self.AccrPedal is None:
        self.AccrPedal = rospy_message_converter.msg.AccrPedalInfo()
      if self.Gear is None:
        self.Gear = rospy_message_converter.msg.GearInfo()
      if self.WhlDyn is None:
        self.WhlDyn = None
      if self.VehSpd is None:
        self.VehSpd = rospy_message_converter.msg.VehSpdInfos()
      if self.head_pose is None:
        self.head_pose = rospy_message_converter.msg.DMSPose()
      if self.euler_angle is None:
        self.euler_angle = rospy_message_converter.msg.LocEulerAngle()
      if self.eye_status_result is None:
        self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      if self.phone_result is None:
        self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      if self.smoke_result is None:
        self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      if self.yawn_result is None:
        self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      if self.head_movement_result is None:
        self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      if self.age_result is None:
        self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      if self.gender_result is None:
        self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      if self.emotion_result is None:
        self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      if self.tpp_trajectory is None:
        self.tpp_trajectory = rospy_message_converter.msg.RmeLine()
      if self.laneline is None:
        self.laneline = rospy_message_converter.msg.LaneDetection()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.timestamp, _x.DANADSts, _x.DA_NAD_WTI, _x.HODsymbol, _x.drowsiness_lvl, _x.distraction_lvl, _x.distraction_sts, _x.LnAssistSts, _x.AdasLeLine, _x.AdasRiLine, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.DA_ALCSsts,) = _get_struct_QiI9i2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.BSDLCAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.SDOWWarnSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAReWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.RCTABrkSts,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.CTAFrntWarnReq = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 353
      (_x.AhcHiBmReq, _x.SAS_SLIF_State, _x.SAS_SLWF_WarnTrigger, _x.SApaStatus, _x.PSAPHMIStatus, _x.SetDA_SteerAssist, _x.SetDA_ALCS, _x.AEBOnOffReq, _x.FCTAOnOffCmd, _x.SetLnAssiAidTyp, _x.SetLaneAssiSnvty, _x.DrowsinessSwtSts, _x.DistractionSwtSts, _x.EASWarningLevel, _x.LCAOnOff, _x.LCATctlWarnOnOff, _x.RCTABReq, _x.RCTAReq, _x.SdowOnOffReq, _x.SetHMA, _x.VehEgyMngtMod, _x.pvat.init_state, _x.pvat.ins_state, _x.pvat.position_type, _x.pvat.latitude, _x.pvat.longitude, _x.pvat.height, _x.pvat.undulation, _x.pvat.velocity_north, _x.pvat.velocity_east, _x.pvat.velocity_up, _x.pvat.roll, _x.pvat.pitch, _x.pvat.azimuth, _x.pvat.bias_gyro_x, _x.pvat.bias_gyro_y, _x.pvat.bias_gyro_z, _x.pvat.bias_acc_x, _x.pvat.bias_acc_y, _x.pvat.bias_acc_z, _x.pvat.std_lat, _x.pvat.std_long, _x.pvat.std_height, _x.pvat.std_vel_north, _x.pvat.std_vel_east, _x.pvat.std_vel_up, _x.pvat.std_roll, _x.pvat.std_pitch, _x.pvat.std_azimuth, _x.pvat.utc_time.year, _x.pvat.utc_time.month, _x.pvat.utc_time.day, _x.pvat.utc_time.hour, _x.pvat.utc_time.min, _x.pvat.utc_time.sec, _x.pvat.utc_time.msec, _x.pvat.itow_time, _x.pvat.gps_ref_week, _x.pvat.num_sat_track, _x.pvat.num_sat_used, _x.pvat.num_sat_dfrq, _x.pvat.update_flag, _x.pvat.propagate_time, _x.pvat.gdpr_status, _x.pvat.rsd_imu_bdy_x, _x.pvat.rsd_imu_bdy_y, _x.pvat.rsd_imu_bdy_z, _x.pvat.dyna_cal_state, _x.pvat.timestamp_ptp_ns, _x.pvat.publish_ptp_ts,) = _get_struct_B20i2Ii16d9f6Ifd6Ii3fI2Q().unpack(str[start:end])
      self.AhcHiBmReq = bool(self.AhcHiBmReq)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pvat.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pvat.publisher_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.pvat.counter, _x.pvat.publish_ts, _x.wgs84_position.x, _x.wgs84_position.y, _x.wgs84_position.z, _x.status, _x.lane_loc.lane_loc_status, _x.lane_loc.curr_link_id, _x.lane_loc.curr_lane_id, _x.lane_loc.hdmap_version, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts,) = _get_struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.VLCAvl = bool(self.VehCtrlIf.LngCtrlIf.VLCAvl)
      self.VehCtrlIf.LngCtrlIf.VLCActv = bool(self.VehCtrlIf.LngCtrlIf.VLCActv)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgActv = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgActv)
      self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq)
      self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 417
      (_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.TurnIndcrSwtSts, _x.FrntWiprSwtSts, _x.TurnLightReq, _x.HzrdWarnSts, _x.VehState, _x.CrashDetd, _x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.LatCtrl.ACIReqVld, _x.LatCtrl.ACIReqSAE, _x.LatCtrl.ACISafLimAngDyn, _x.LatCtrl.ACISafLimAngRM, _x.LatCtrl.ACISafLimAngDynOffs, _x.LatCtrl.ACISafLimRate, _x.LatCtrl.ACIRampRate, _x.LatCtrl.ACISafLimAngLM, _x.LatCtrl.ACISafLimMode, _x.LatCtrl.CTIReqVal, _x.LatCtrl.CTIReqSAE, _x.LatCtrl.StrIFReq, _x.LatCtrl.HVIReq, _x.LatCtrl.HVIReqVld, _x.LatCtrl.ACITsuSup, _x.LatCtrl.ACIOvrdThr, _x.LngCtrlCmfrt.VLCReqFct, _x.LngCtrlCmfrt.VLCMode, _x.LngCtrlCmfrt.VLCTarA, _x.LngCtrlCmfrt.VLCMinJerkA, _x.LngCtrlCmfrt.VLCMaxJerkA, _x.LngCtrlCmfrt.VLCDrvOffReq, _x.LngCtrlCmfrt.VLCDecToStopReq, _x.LngCtrlCmfrt.VLCShutdownModReq, _x.LngCtrlCmfrt.AD_ActvSftyBltReq, _x.LngCtrlEmrgnc.AEBDecelReq, _x.LngCtrlEmrgnc.AEBTarDecel, _x.LngCtrlEmrgnc.EBADecelReq, _x.LngCtrlEmrgnc.ABPReq, _x.LngCtrlEmrgnc.AWBSnvtyLvl, _x.LngCtrlEmrgnc.AWBReq, _x.LngCtrlEmrgnc.ABASnvtyLvl, _x.LngCtrlEmrgnc.ABAReq, _x.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR, _x.LngLwSpdCtrl.FctSeln, _x.LngLwSpdCtrl.CntrlModReq, _x.LngLwSpdCtrl.LLCSt, _x.LngLwSpdCtrl.TarGearReq, _x.LngLwSpdCtrl.TarSpdKph, _x.LngLwSpdCtrl.StopDst, _x.LngLwSpdCtrl.ShutdownModReq, _x.LngLwSpdCtrl.EPBReq, _x.LngLwSpdCtrl.VehDstToVSlot, _x.LngLwSpdCtrl.SlopeDstOffset, _x.LngLwSpdCtrl.VCU_ObjModTyp, _x.LngLwSpdCtrl.VCU_ObjModLonDst, _x.LngLwSpdCtrl.VCU_ObjModLatDst, _x.VehModMng.ADDrvTypReq, _x.VehModMng.DDMReq, _x.SafetyState.SafetyState1, _x.FCWSetReq, _x.StrAgFailSts, _x.StrAgCalSts, _x.StrWhlAgSAE, _x.StrWhlAgSpdSAE, _x.EPSSts, _x.DrvngMod, _x.TorsBarTqSAE, _x.OverRideDetn, _x.BrkPdl.TrvlCalSts, _x.BrkPdl.Trvl, _x.BrkPdl.BrkPedlSts, _x.BrkPdl.BrkpedlOvrd, _x.BrkPdl.timestamp_ptp_ns, _x.BrkFunSt.BDWActv, _x.BrkFunSt.ABAAvl, _x.BrkFunSt.ABAActv, _x.BrkFunSt.ABPAvl, _x.BrkFunSt.ABPActv, _x.BrkFunSt.ABSActv, _x.BrkFunSt.AVHSts, _x.BrkFunSt.DTCActv, _x.BrkFunSt.DWTActv, _x.BrkFunSt.EBAAvl, _x.BrkFunSt.EBAActv, _x.BrkFunSt.EBDActv, _x.BrkFunSt.HBAActv, _x.BrkFunSt.HDCSts, _x.BrkFunSt.HHCAvl, _x.BrkFunSt.HHCActv, _x.BrkFunSt.TCSActv, _x.BrkFunSt.TCSDeactv, _x.BrkFunSt.VDCActv, _x.BrkFunSt.VDCDeactv, _x.BrkFunSt.EBDFailLampReq, _x.BrkFunSt.VDCTCSLampInfo, _x.BrkFunSt.VDCTCSFailLampReq, _x.BrkFunSt.ABSFailLampReq, _x.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkFunSt.AWBActv, _x.BrkFunSt.AWBAvl, _x.BrkFunSt.EBPActv, _x.BrkFunSt.HBCActv, _x.BrkFunSt.ARPCfgSts, _x.BrkFunSt.CDPActv, _x.BrkFunSt.CDPAvail, _x.BrkFunSt.ARPActv, _x.BrkFunSt.DTCAvl, _x.BrkFunSt.timestamp_ptp_ns, _x.AccrPedal.EfcPosnVld, _x.AccrPedal.EfcPosn, _x.AccrPedal.ActPosnVld, _x.AccrPedal.ActPosn, _x.AccrPedal.PedlOvrd, _x.AccrPedal.timestamp_ptp_ns, _x.Gear.SlctrPosnVld, _x.Gear.ActGearVld, _x.Gear.TrgtGearVld, _x.Gear.SlctrPosn, _x.Gear.ActGear, _x.Gear.TrgtGear, _x.Gear.timestamp_ptp_ns, _x.CruiseStatus, _x.VCUEPBReq,) = _get_struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.VehCtrlIf.LatCtrlIf.HIAvl = bool(self.VehCtrlIf.LatCtrlIf.HIAvl)
      self.VehCtrlIf.LatCtrlIf.TOIAvl = bool(self.VehCtrlIf.LatCtrlIf.TOIAvl)
      self.VehCtrlIf.LatCtrlIf.DAIAvl = bool(self.VehCtrlIf.LatCtrlIf.DAIAvl)
      self.VehCtrlIf.LatCtrlIf.PAIAvl = bool(self.VehCtrlIf.LatCtrlIf.PAIAvl)
      self.CrashDetd = bool(self.CrashDetd)
      self.drowsiness_result.is_valid = bool(self.drowsiness_result.is_valid)
      self.distraction_result.is_valid = bool(self.distraction_result.is_valid)
      self.LngCtrlCmfrt.VLCDrvOffReq = bool(self.LngCtrlCmfrt.VLCDrvOffReq)
      self.LngCtrlCmfrt.VLCDecToStopReq = bool(self.LngCtrlCmfrt.VLCDecToStopReq)
      self.LngCtrlEmrgnc.AEBDecelReq = bool(self.LngCtrlEmrgnc.AEBDecelReq)
      self.LngCtrlEmrgnc.EBADecelReq = bool(self.LngCtrlEmrgnc.EBADecelReq)
      self.LngCtrlEmrgnc.ABPReq = bool(self.LngCtrlEmrgnc.ABPReq)
      self.LngCtrlEmrgnc.AWBReq = bool(self.LngCtrlEmrgnc.AWBReq)
      self.LngCtrlEmrgnc.ABAReq = bool(self.LngCtrlEmrgnc.ABAReq)
      self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR = bool(self.LngCtrlEmrgnc.AEBDecelReq_DummyForDVR)
      self.BrkPdl.BrkpedlOvrd = bool(self.BrkPdl.BrkpedlOvrd)
      self.BrkFunSt.BDWActv = bool(self.BrkFunSt.BDWActv)
      self.BrkFunSt.ABAAvl = bool(self.BrkFunSt.ABAAvl)
      self.BrkFunSt.ABAActv = bool(self.BrkFunSt.ABAActv)
      self.BrkFunSt.ABPAvl = bool(self.BrkFunSt.ABPAvl)
      self.BrkFunSt.ABPActv = bool(self.BrkFunSt.ABPActv)
      self.BrkFunSt.ABSActv = bool(self.BrkFunSt.ABSActv)
      self.BrkFunSt.DTCActv = bool(self.BrkFunSt.DTCActv)
      self.BrkFunSt.DWTActv = bool(self.BrkFunSt.DWTActv)
      self.BrkFunSt.EBAAvl = bool(self.BrkFunSt.EBAAvl)
      self.BrkFunSt.EBAActv = bool(self.BrkFunSt.EBAActv)
      self.BrkFunSt.EBDActv = bool(self.BrkFunSt.EBDActv)
      self.BrkFunSt.HBAActv = bool(self.BrkFunSt.HBAActv)
      self.BrkFunSt.HHCAvl = bool(self.BrkFunSt.HHCAvl)
      self.BrkFunSt.HHCActv = bool(self.BrkFunSt.HHCActv)
      self.BrkFunSt.TCSActv = bool(self.BrkFunSt.TCSActv)
      self.BrkFunSt.TCSDeactv = bool(self.BrkFunSt.TCSDeactv)
      self.BrkFunSt.VDCActv = bool(self.BrkFunSt.VDCActv)
      self.BrkFunSt.VDCDeactv = bool(self.BrkFunSt.VDCDeactv)
      self.BrkFunSt.EBDFailLampReq = bool(self.BrkFunSt.EBDFailLampReq)
      self.BrkFunSt.VDCTCSLampInfo = bool(self.BrkFunSt.VDCTCSLampInfo)
      self.BrkFunSt.VDCTCSFailLampReq = bool(self.BrkFunSt.VDCTCSFailLampReq)
      self.BrkFunSt.ABSFailLampReq = bool(self.BrkFunSt.ABSFailLampReq)
      self.BrkFunSt.VDCTCSOnOfflampReq = bool(self.BrkFunSt.VDCTCSOnOfflampReq)
      self.BrkFunSt.AWBActv = bool(self.BrkFunSt.AWBActv)
      self.BrkFunSt.AWBAvl = bool(self.BrkFunSt.AWBAvl)
      self.BrkFunSt.EBPActv = bool(self.BrkFunSt.EBPActv)
      self.BrkFunSt.HBCActv = bool(self.BrkFunSt.HBCActv)
      self.BrkFunSt.CDPActv = bool(self.BrkFunSt.CDPActv)
      self.BrkFunSt.CDPAvail = bool(self.BrkFunSt.CDPAvail)
      self.BrkFunSt.ARPActv = bool(self.BrkFunSt.ARPActv)
      self.BrkFunSt.DTCAvl = bool(self.BrkFunSt.DTCAvl)
      self.AccrPedal.PedlOvrd = bool(self.AccrPedal.PedlOvrd)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.WhlDyn.append(val1)
      _x = self
      start = end
      end += 36
      (_x.VehSpd.VehSpdSts, _x.VehSpd.VehMovgDir, _x.VehSpd.VehSpdkph, _x.VehSpd.VehSpdmps, _x.VehSpd.VehFiltLngAcc, _x.VehSpd.VehSpdASILDSts, _x.VehSpd.VehSpdASILD, _x.VehSpd.VehDispSpd, _x.VehSpd.VCUVehDispSpdSts,) = _get_struct_2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehSpd.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 121
      (_x.LgtSAEAg, _x.LatSAEAg, _x.YawRateSAERps, _x.VehOdom, _x.HWASM_stHeroButtonPress_mp, _x.AEBSts, _x.gaze_aoi, _x.head_pose.is_valid, _x.head_pose.yaw, _x.head_pose.pitch, _x.head_pose.roll, _x.lane_id, _x.position_type, _x.ort_type, _x.latitude, _x.longitude, _x.msl_height, _x.yaw, _x.std_lat, _x.std_long, _x.num_sat_used, _x.mode, _x.euler_angle.roll, _x.euler_angle.pitch, _x.euler_angle.yaw, _x.confidence,) = _get_struct_4fI2iB3fI2i2d4fIi3df().unpack(str[start:end])
      self.head_pose.is_valid = bool(self.head_pose.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Name = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Lat_Distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Long_Distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.TSR_Name_Value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 188
      (_x.SAPAPrkgModReq, _x.PcwWarnReq, _x.function_status_nop_sts, _x.nop_alc_sts, _x.TauGapSet, _x.SetSpeedCtrlSts, _x.SwtichDA_NOP, _x.SetDA_NOPALC, _x.LatCtrl_bfLksSprs_mp, _x.LatCtrl_bfLCATakeOverSprsMask_mp, _x.VehDispSpd, _x.SAS_SpeedLimitValue, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.strabismus_result, _x.system_status,) = _get_struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i().unpack(str[start:end])
      self.SwtichDA_NOP = bool(self.SwtichDA_NOP)
      self.eye_status_result.left_eye_gaze_vector.is_valid = bool(self.eye_status_result.left_eye_gaze_vector.is_valid)
      self.eye_status_result.left_eye_position.is_valid = bool(self.eye_status_result.left_eye_position.is_valid)
      self.eye_status_result.right_eye_gaze_vector.is_valid = bool(self.eye_status_result.right_eye_gaze_vector.is_valid)
      self.eye_status_result.right_eye_position.is_valid = bool(self.eye_status_result.right_eye_position.is_valid)
      self.smoke_result.is_smoking = bool(self.smoke_result.is_smoking)
      self.yawn_result.is_yawning = bool(self.yawn_result.is_yawning)
      self.age_result.is_child = bool(self.age_result.is_child)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 4
      (self.SetDA_SpeedAssist,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.AdUpSwtSts = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 45
      (_x.DisplaySetSpd, _x.SpeedLimitTakeover, _x.DA_NopWTI, _x.nop_speed_limit_value, _x.DriverPSAPRequest, _x.ACCSC_uNOPActivationPrevention_mp, _x.ACCSC_uNOPSuppression_mp, _x.nop_scene_mgmt_ok, _x.form_of_way, _x.m_adasmap_is_highway, _x.SApaAbortReason, _x.PSAPAbortReason,) = _get_struct_Ii2Ii2IB3Ii().unpack(str[start:end])
      self.nop_scene_mgmt_ok = bool(self.nop_scene_mgmt_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.station_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.tpp_trajectory.pt_conf, _x.tpp_trajectory.c0, _x.tpp_trajectory.c1, _x.tpp_trajectory.c2, _x.tpp_trajectory.c3, _x.tpp_trajectory.lrange_start, _x.tpp_trajectory.lrange_end, _x.tpp_trajectory.lm_width, _x.tpp_trajectory.line_color, _x.tpp_trajectory.line_type, _x.tpp_trajectory.line_src, _x.laneline.LD_Lane_Width, _x.laneline.LD_Crossing_Flag,) = _get_struct_8f3ifB().unpack(str[start:end])
      self.laneline.LD_Crossing_Flag = bool(self.laneline.LD_Crossing_Flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.laneline.line = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.LaneLine()
        start = end
        end += 4
        (val1.LD_Role,) = _get_struct_i().unpack(str[start:end])
        _v16 = val1.LD_First_Line
        _x = _v16
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v17 = _v16.LD_Line
        _x = _v17
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v16
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        start = end
        end += 1
        (val1.LD_Is_Multi_Clothoid,) = _get_struct_B().unpack(str[start:end])
        val1.LD_Is_Multi_Clothoid = bool(val1.LD_Is_Multi_Clothoid)
        _v18 = val1.LD_Second_Line
        _x = _v18
        start = end
        end += 8
        (_x.LD_Type, _x.LD_Color,) = _get_struct_2i().unpack(str[start:end])
        _v19 = _v18.LD_Line
        _x = _v19
        start = end
        end += 16
        (_x.line_C0, _x.line_C1, _x.line_C2, _x.line_C3,) = _get_struct_4f().unpack(str[start:end])
        _x = _v18
        start = end
        end += 12
        (_x.LD_Start, _x.LD_End, _x.LD_End_Reason,) = _get_struct_2fi().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.LD_Special_Point_Is_Detected, _x.LD_Special_Point_Type,) = _get_struct_Bi().unpack(str[start:end])
        val1.LD_Special_Point_Is_Detected = bool(val1.LD_Special_Point_Is_Detected)
        _v20 = val1.LD_Special_Point
        _x = _v20
        start = end
        end += 12
        (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.LD_Point = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.Point()
          _x = val2
          start = end
          end += 12
          (_x.LD_Point_Lat, _x.LD_Point_Long, _x.LD_Point_Alti,) = _get_struct_3f().unpack(str[start:end])
          val1.LD_Point.append(val2)
        _x = val1
        start = end
        end += 41
        (_x.LD_Dash_Average_Gap, _x.LD_Dash_Average_Length, _x.LD_Crossing, _x.LD_Crossing_ID, _x.LD_Measuring_Status, _x.LD_Prediction_Reason, _x.LD_Track_ID, _x.LD_Track_Age, _x.LD_Quality, _x.LD_Confidence, _x.LD_Marker_Width,) = _get_struct_2fBI2i2Ii2f().unpack(str[start:end])
        val1.LD_Crossing = bool(val1.LD_Crossing)
        self.laneline.line.append(val1)
      start = end
      end += 4
      (self.DA_SetSpeedAnimation,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI = None
def _get_struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI():
    global _struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI
    if _struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI is None:
        _struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI = struct.Struct("<2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI")
    return _struct_2Q3d2i2Qi2Bf2i2B2i2Bf2BfI2i2fI
_struct_2fBI2i2Ii2f = None
def _get_struct_2fBI2i2Ii2f():
    global _struct_2fBI2i2Ii2f
    if _struct_2fBI2i2Ii2f is None:
        _struct_2fBI2i2Ii2f = struct.Struct("<2fBI2i2Ii2f")
    return _struct_2fBI2i2Ii2f
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i3fi2fi = None
def _get_struct_2i3fi2fi():
    global _struct_2i3fi2fi
    if _struct_2i3fi2fi is None:
        _struct_2i3fi2fi = struct.Struct("<2i3fi2fi")
    return _struct_2i3fi2fi
_struct_2ifiI2Q = None
def _get_struct_2ifiI2Q():
    global _struct_2ifiI2Q
    if _struct_2ifiI2Q is None:
        _struct_2ifiI2Q = struct.Struct("<2ifiI2Q")
    return _struct_2ifiI2Q
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i = None
def _get_struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i():
    global _struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i
    if _struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i is None:
        _struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i = struct.Struct("<3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i")
    return _struct_3iI2iBi2IfIi2fB3fB3fi2fB3fB3fifBfBfIi3fBfifif2i
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4fI2iB3fI2i2d4fIi3df = None
def _get_struct_4fI2iB3fI2i2d4fIi3df():
    global _struct_4fI2iB3fI2i2d4fIi3df
    if _struct_4fI2iB3fI2i2d4fIi3df is None:
        _struct_4fI2iB3fI2i2d4fIi3df = struct.Struct("<4fI2iB3fI2i2d4fIi3df")
    return _struct_4fI2iB3fI2i2d4fIi3df
_struct_8f3ifB = None
def _get_struct_8f3ifB():
    global _struct_8f3ifB
    if _struct_8f3ifB is None:
        _struct_8f3ifB = struct.Struct("<8f3ifB")
    return _struct_8f3ifB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B20i2Ii16d9f6Ifd6Ii3fI2Q = None
def _get_struct_B20i2Ii16d9f6Ifd6Ii3fI2Q():
    global _struct_B20i2Ii16d9f6Ifd6Ii3fI2Q
    if _struct_B20i2Ii16d9f6Ifd6Ii3fI2Q is None:
        _struct_B20i2Ii16d9f6Ifd6Ii3fI2Q = struct.Struct("<B20i2Ii16d9f6Ifd6Ii3fI2Q")
    return _struct_B20i2Ii16d9f6Ifd6Ii3fI2Q
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_Ii2Ii2IB3Ii = None
def _get_struct_Ii2Ii2IB3Ii():
    global _struct_Ii2Ii2IB3Ii
    if _struct_Ii2Ii2IB3Ii is None:
        _struct_Ii2Ii2IB3Ii = struct.Struct("<Ii2Ii2IB3Ii")
    return _struct_Ii2Ii2IB3Ii
_struct_QiI9i2I = None
def _get_struct_QiI9i2I():
    global _struct_QiI9i2I
    if _struct_QiI9i2I is None:
        _struct_QiI9i2I = struct.Struct("<QiI9i2I")
    return _struct_QiI9i2I
_struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i = None
def _get_struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i():
    global _struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i
    if _struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i is None:
        _struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i = struct.Struct("<fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i")
    return _struct_fBi4BQ5iBiBfifB3i2fIf4IifiI5i3f2B2iBf2BIBI2B4i2f2i2fi2f2iI3i2f2if2ifiBQ6Bi6Bi15Bi4BQififBQ6iQ2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

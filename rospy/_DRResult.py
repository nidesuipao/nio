# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DRResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DRResult(genpy.Message):
  _md5sum = "7bb336ae26dcba5ccfa8761092177135"
  _type = "rospy_message_converter/DRResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 dr_type
float64 delta_north
float64 delta_east
float64 delta_up
float64 velocity_north
float64 velocity_east
float64 velocity_up
float64 roll
float64 pitch
float64 azimuth
float64 gyro_x
float64 gyro_y
float64 gyro_z
float64 acc_x
float64 acc_y
float64 acc_z
float32 std_dr_north
float32 std_dr_east
float32 std_dr_up
float32 std_dr_roll
float32 std_dr_pitch
float32 std_dr_azimuth
UTCTime utc_time
float64 itow_time
uint32 gps_ref_week
int32 gdpr_status
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/UTCTime
uint32 year
uint32 month
uint32 day
uint32 hour
uint32 min
uint32 sec
float32 msec
"""
  __slots__ = ['dr_type','delta_north','delta_east','delta_up','velocity_north','velocity_east','velocity_up','roll','pitch','azimuth','gyro_x','gyro_y','gyro_z','acc_x','acc_y','acc_z','std_dr_north','std_dr_east','std_dr_up','std_dr_roll','std_dr_pitch','std_dr_azimuth','utc_time','itow_time','gps_ref_week','gdpr_status','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','rospy_message_converter/UTCTime','float64','uint32','int32','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dr_type,delta_north,delta_east,delta_up,velocity_north,velocity_east,velocity_up,roll,pitch,azimuth,gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z,std_dr_north,std_dr_east,std_dr_up,std_dr_roll,std_dr_pitch,std_dr_azimuth,utc_time,itow_time,gps_ref_week,gdpr_status,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DRResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dr_type is None:
        self.dr_type = 0
      if self.delta_north is None:
        self.delta_north = 0.
      if self.delta_east is None:
        self.delta_east = 0.
      if self.delta_up is None:
        self.delta_up = 0.
      if self.velocity_north is None:
        self.velocity_north = 0.
      if self.velocity_east is None:
        self.velocity_east = 0.
      if self.velocity_up is None:
        self.velocity_up = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.std_dr_north is None:
        self.std_dr_north = 0.
      if self.std_dr_east is None:
        self.std_dr_east = 0.
      if self.std_dr_up is None:
        self.std_dr_up = 0.
      if self.std_dr_roll is None:
        self.std_dr_roll = 0.
      if self.std_dr_pitch is None:
        self.std_dr_pitch = 0.
      if self.std_dr_azimuth is None:
        self.std_dr_azimuth = 0.
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      if self.itow_time is None:
        self.itow_time = 0.
      if self.gps_ref_week is None:
        self.gps_ref_week = 0
      if self.gdpr_status is None:
        self.gdpr_status = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.dr_type = 0
      self.delta_north = 0.
      self.delta_east = 0.
      self.delta_up = 0.
      self.velocity_north = 0.
      self.velocity_east = 0.
      self.velocity_up = 0.
      self.roll = 0.
      self.pitch = 0.
      self.azimuth = 0.
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.std_dr_north = 0.
      self.std_dr_east = 0.
      self.std_dr_up = 0.
      self.std_dr_roll = 0.
      self.std_dr_pitch = 0.
      self.std_dr_azimuth = 0.
      self.utc_time = rospy_message_converter.msg.UTCTime()
      self.itow_time = 0.
      self.gps_ref_week = 0
      self.gdpr_status = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i15d6f6IfdIiQ().pack(_x.dr_type, _x.delta_north, _x.delta_east, _x.delta_up, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.std_dr_north, _x.std_dr_east, _x.std_dr_up, _x.std_dr_roll, _x.std_dr_pitch, _x.std_dr_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.gdpr_status, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      end = 0
      _x = self
      start = end
      end += 200
      (_x.dr_type, _x.delta_north, _x.delta_east, _x.delta_up, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.std_dr_north, _x.std_dr_east, _x.std_dr_up, _x.std_dr_roll, _x.std_dr_pitch, _x.std_dr_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.gdpr_status, _x.publish_ptp_ts,) = _get_struct_i15d6f6IfdIiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i15d6f6IfdIiQ().pack(_x.dr_type, _x.delta_north, _x.delta_east, _x.delta_up, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.std_dr_north, _x.std_dr_east, _x.std_dr_up, _x.std_dr_roll, _x.std_dr_pitch, _x.std_dr_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.gdpr_status, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.utc_time is None:
        self.utc_time = rospy_message_converter.msg.UTCTime()
      end = 0
      _x = self
      start = end
      end += 200
      (_x.dr_type, _x.delta_north, _x.delta_east, _x.delta_up, _x.velocity_north, _x.velocity_east, _x.velocity_up, _x.roll, _x.pitch, _x.azimuth, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.std_dr_north, _x.std_dr_east, _x.std_dr_up, _x.std_dr_roll, _x.std_dr_pitch, _x.std_dr_azimuth, _x.utc_time.year, _x.utc_time.month, _x.utc_time.day, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.msec, _x.itow_time, _x.gps_ref_week, _x.gdpr_status, _x.publish_ptp_ts,) = _get_struct_i15d6f6IfdIiQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_i15d6f6IfdIiQ = None
def _get_struct_i15d6f6IfdIiQ():
    global _struct_i15d6f6IfdIiQ
    if _struct_i15d6f6IfdIiQ is None:
        _struct_i15d6f6IfdIiQ = struct.Struct("<i15d6f6IfdIiQ")
    return _struct_i15d6f6IfdIiQ

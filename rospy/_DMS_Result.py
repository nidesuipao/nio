# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/DMS_Result.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class DMS_Result(genpy.Message):
  _md5sum = "8020414fa303a142fb86ae42212e580c"
  _type = "rospy_message_converter/DMS_Result"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """DMS_DrowsinessResult drowsiness_result
DMS_DistractionResult distraction_result
DMS_EyeStatusResult eye_status_result
DMS_GazeAoiResult gaze_aoi_result
DMS_HeadResult head_result
DMS_PhoneActionResult phone_result
DMS_SmokeResult smoke_result
DMS_YawnResult yawn_result
DMS_HeadMovementResult head_movement_result
DMS_AgeResult age_result
DMS_GenderResult gender_result
DMS_EmotionResult emotion_result
DMS_FaceResult face_result
int32 strabismus_result
int32 system_status
string uuid
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/DMS_DrowsinessResult
int32 level
bool is_valid
float32 perclos

================================================================================
MSG: rospy_message_converter/DMS_DistractionResult
int32 level
float32 confidence
bool is_valid
int32 short_level
int32 fcw_set

================================================================================
MSG: rospy_message_converter/DMS_EyeStatusResult
int32 left_eye
float32 left_open_confidence
float32 left_visible_percent
DMSVector left_eye_gaze_vector
DMSPosition3f left_eye_position
int32 right_eye
float32 right_open_confidence
float32 right_visible_percent
DMSVector right_eye_gaze_vector
DMSPosition3f right_eye_position

================================================================================
MSG: rospy_message_converter/DMSVector
bool is_valid
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/DMSPosition3f
bool is_valid
float32 x
float32 y
float32 z

================================================================================
MSG: rospy_message_converter/DMS_GazeAoiResult
int32 gaze_aoi
bool is_valid

================================================================================
MSG: rospy_message_converter/DMS_HeadResult
DMSPosition3f head_position
DMSPose head_pose

================================================================================
MSG: rospy_message_converter/DMSPose
bool is_valid
float32 yaw
float32 pitch
float32 roll

================================================================================
MSG: rospy_message_converter/DMS_PhoneActionResult
int32 phone_action
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_SmokeResult
bool is_smoking
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_YawnResult
bool is_yawning
float32 confidence
uint32 yawn_num

================================================================================
MSG: rospy_message_converter/DMS_HeadMovementResult
int32 head_movement
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_AgeResult
float32 age
float32 age_confidence
bool is_child
float32 child_confidence

================================================================================
MSG: rospy_message_converter/DMS_GenderResult
int32 gender
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_EmotionResult
int32 emotion
float32 confidence

================================================================================
MSG: rospy_message_converter/DMS_FaceResult
bool is_valid
DMSPoint2f[] landmarks
uint32 landmark_number
int32 top_left_x
int32 bottom_right_x
int32 top_left_y
int32 bottom_right_y

================================================================================
MSG: rospy_message_converter/DMSPoint2f
float32 x
float32 y
"""
  __slots__ = ['drowsiness_result','distraction_result','eye_status_result','gaze_aoi_result','head_result','phone_result','smoke_result','yawn_result','head_movement_result','age_result','gender_result','emotion_result','face_result','strabismus_result','system_status','uuid','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/DMS_DrowsinessResult','rospy_message_converter/DMS_DistractionResult','rospy_message_converter/DMS_EyeStatusResult','rospy_message_converter/DMS_GazeAoiResult','rospy_message_converter/DMS_HeadResult','rospy_message_converter/DMS_PhoneActionResult','rospy_message_converter/DMS_SmokeResult','rospy_message_converter/DMS_YawnResult','rospy_message_converter/DMS_HeadMovementResult','rospy_message_converter/DMS_AgeResult','rospy_message_converter/DMS_GenderResult','rospy_message_converter/DMS_EmotionResult','rospy_message_converter/DMS_FaceResult','int32','int32','string','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drowsiness_result,distraction_result,eye_status_result,gaze_aoi_result,head_result,phone_result,smoke_result,yawn_result,head_movement_result,age_result,gender_result,emotion_result,face_result,strabismus_result,system_status,uuid,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DMS_Result, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drowsiness_result is None:
        self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      if self.distraction_result is None:
        self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      if self.eye_status_result is None:
        self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      if self.gaze_aoi_result is None:
        self.gaze_aoi_result = rospy_message_converter.msg.DMS_GazeAoiResult()
      if self.head_result is None:
        self.head_result = rospy_message_converter.msg.DMS_HeadResult()
      if self.phone_result is None:
        self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      if self.smoke_result is None:
        self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      if self.yawn_result is None:
        self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      if self.head_movement_result is None:
        self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      if self.age_result is None:
        self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      if self.gender_result is None:
        self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      if self.emotion_result is None:
        self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      if self.face_result is None:
        self.face_result = rospy_message_converter.msg.DMS_FaceResult()
      if self.strabismus_result is None:
        self.strabismus_result = 0
      if self.system_status is None:
        self.system_status = 0
      if self.uuid is None:
        self.uuid = ''
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      self.gaze_aoi_result = rospy_message_converter.msg.DMS_GazeAoiResult()
      self.head_result = rospy_message_converter.msg.DMS_HeadResult()
      self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      self.face_result = rospy_message_converter.msg.DMS_FaceResult()
      self.strabismus_result = 0
      self.system_status = 0
      self.uuid = ''
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB().pack(_x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.gaze_aoi_result.gaze_aoi, _x.gaze_aoi_result.is_valid, _x.head_result.head_position.is_valid, _x.head_result.head_position.x, _x.head_result.head_position.y, _x.head_result.head_position.z, _x.head_result.head_pose.is_valid, _x.head_result.head_pose.yaw, _x.head_result.head_pose.pitch, _x.head_result.head_pose.roll, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.face_result.is_valid))
      length = len(self.face_result.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.face_result.landmarks:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I6i().pack(_x.face_result.landmark_number, _x.face_result.top_left_x, _x.face_result.bottom_right_x, _x.face_result.top_left_y, _x.face_result.bottom_right_y, _x.strabismus_result, _x.system_status))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drowsiness_result is None:
        self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      if self.distraction_result is None:
        self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      if self.eye_status_result is None:
        self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      if self.gaze_aoi_result is None:
        self.gaze_aoi_result = rospy_message_converter.msg.DMS_GazeAoiResult()
      if self.head_result is None:
        self.head_result = rospy_message_converter.msg.DMS_HeadResult()
      if self.phone_result is None:
        self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      if self.smoke_result is None:
        self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      if self.yawn_result is None:
        self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      if self.head_movement_result is None:
        self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      if self.age_result is None:
        self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      if self.gender_result is None:
        self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      if self.emotion_result is None:
        self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      if self.face_result is None:
        self.face_result = rospy_message_converter.msg.DMS_FaceResult()
      end = 0
      _x = self
      start = end
      end += 193
      (_x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.gaze_aoi_result.gaze_aoi, _x.gaze_aoi_result.is_valid, _x.head_result.head_position.is_valid, _x.head_result.head_position.x, _x.head_result.head_position.y, _x.head_result.head_position.z, _x.head_result.head_pose.is_valid, _x.head_result.head_pose.yaw, _x.head_result.head_pose.pitch, _x.head_result.head_pose.roll, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.face_result.is_valid,) = _get_struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB().unpack(str[start:end])
      self.drowsiness_result.is_valid = bool(self.drowsiness_result.is_valid)
      self.distraction_result.is_valid = bool(self.distraction_result.is_valid)
      self.eye_status_result.left_eye_gaze_vector.is_valid = bool(self.eye_status_result.left_eye_gaze_vector.is_valid)
      self.eye_status_result.left_eye_position.is_valid = bool(self.eye_status_result.left_eye_position.is_valid)
      self.eye_status_result.right_eye_gaze_vector.is_valid = bool(self.eye_status_result.right_eye_gaze_vector.is_valid)
      self.eye_status_result.right_eye_position.is_valid = bool(self.eye_status_result.right_eye_position.is_valid)
      self.gaze_aoi_result.is_valid = bool(self.gaze_aoi_result.is_valid)
      self.head_result.head_position.is_valid = bool(self.head_result.head_position.is_valid)
      self.head_result.head_pose.is_valid = bool(self.head_result.head_pose.is_valid)
      self.smoke_result.is_smoking = bool(self.smoke_result.is_smoking)
      self.yawn_result.is_yawning = bool(self.yawn_result.is_yawning)
      self.age_result.is_child = bool(self.age_result.is_child)
      self.face_result.is_valid = bool(self.face_result.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.face_result.landmarks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DMSPoint2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.face_result.landmarks.append(val1)
      _x = self
      start = end
      end += 28
      (_x.face_result.landmark_number, _x.face_result.top_left_x, _x.face_result.bottom_right_x, _x.face_result.top_left_y, _x.face_result.bottom_right_y, _x.strabismus_result, _x.system_status,) = _get_struct_I6i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB().pack(_x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.gaze_aoi_result.gaze_aoi, _x.gaze_aoi_result.is_valid, _x.head_result.head_position.is_valid, _x.head_result.head_position.x, _x.head_result.head_position.y, _x.head_result.head_position.z, _x.head_result.head_pose.is_valid, _x.head_result.head_pose.yaw, _x.head_result.head_pose.pitch, _x.head_result.head_pose.roll, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.face_result.is_valid))
      length = len(self.face_result.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.face_result.landmarks:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_I6i().pack(_x.face_result.landmark_number, _x.face_result.top_left_x, _x.face_result.bottom_right_x, _x.face_result.top_left_y, _x.face_result.bottom_right_y, _x.strabismus_result, _x.system_status))
      _x = self.uuid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drowsiness_result is None:
        self.drowsiness_result = rospy_message_converter.msg.DMS_DrowsinessResult()
      if self.distraction_result is None:
        self.distraction_result = rospy_message_converter.msg.DMS_DistractionResult()
      if self.eye_status_result is None:
        self.eye_status_result = rospy_message_converter.msg.DMS_EyeStatusResult()
      if self.gaze_aoi_result is None:
        self.gaze_aoi_result = rospy_message_converter.msg.DMS_GazeAoiResult()
      if self.head_result is None:
        self.head_result = rospy_message_converter.msg.DMS_HeadResult()
      if self.phone_result is None:
        self.phone_result = rospy_message_converter.msg.DMS_PhoneActionResult()
      if self.smoke_result is None:
        self.smoke_result = rospy_message_converter.msg.DMS_SmokeResult()
      if self.yawn_result is None:
        self.yawn_result = rospy_message_converter.msg.DMS_YawnResult()
      if self.head_movement_result is None:
        self.head_movement_result = rospy_message_converter.msg.DMS_HeadMovementResult()
      if self.age_result is None:
        self.age_result = rospy_message_converter.msg.DMS_AgeResult()
      if self.gender_result is None:
        self.gender_result = rospy_message_converter.msg.DMS_GenderResult()
      if self.emotion_result is None:
        self.emotion_result = rospy_message_converter.msg.DMS_EmotionResult()
      if self.face_result is None:
        self.face_result = rospy_message_converter.msg.DMS_FaceResult()
      end = 0
      _x = self
      start = end
      end += 193
      (_x.drowsiness_result.level, _x.drowsiness_result.is_valid, _x.drowsiness_result.perclos, _x.distraction_result.level, _x.distraction_result.confidence, _x.distraction_result.is_valid, _x.distraction_result.short_level, _x.distraction_result.fcw_set, _x.eye_status_result.left_eye, _x.eye_status_result.left_open_confidence, _x.eye_status_result.left_visible_percent, _x.eye_status_result.left_eye_gaze_vector.is_valid, _x.eye_status_result.left_eye_gaze_vector.x, _x.eye_status_result.left_eye_gaze_vector.y, _x.eye_status_result.left_eye_gaze_vector.z, _x.eye_status_result.left_eye_position.is_valid, _x.eye_status_result.left_eye_position.x, _x.eye_status_result.left_eye_position.y, _x.eye_status_result.left_eye_position.z, _x.eye_status_result.right_eye, _x.eye_status_result.right_open_confidence, _x.eye_status_result.right_visible_percent, _x.eye_status_result.right_eye_gaze_vector.is_valid, _x.eye_status_result.right_eye_gaze_vector.x, _x.eye_status_result.right_eye_gaze_vector.y, _x.eye_status_result.right_eye_gaze_vector.z, _x.eye_status_result.right_eye_position.is_valid, _x.eye_status_result.right_eye_position.x, _x.eye_status_result.right_eye_position.y, _x.eye_status_result.right_eye_position.z, _x.gaze_aoi_result.gaze_aoi, _x.gaze_aoi_result.is_valid, _x.head_result.head_position.is_valid, _x.head_result.head_position.x, _x.head_result.head_position.y, _x.head_result.head_position.z, _x.head_result.head_pose.is_valid, _x.head_result.head_pose.yaw, _x.head_result.head_pose.pitch, _x.head_result.head_pose.roll, _x.phone_result.phone_action, _x.phone_result.confidence, _x.smoke_result.is_smoking, _x.smoke_result.confidence, _x.yawn_result.is_yawning, _x.yawn_result.confidence, _x.yawn_result.yawn_num, _x.head_movement_result.head_movement, _x.head_movement_result.confidence, _x.age_result.age, _x.age_result.age_confidence, _x.age_result.is_child, _x.age_result.child_confidence, _x.gender_result.gender, _x.gender_result.confidence, _x.emotion_result.emotion, _x.emotion_result.confidence, _x.face_result.is_valid,) = _get_struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB().unpack(str[start:end])
      self.drowsiness_result.is_valid = bool(self.drowsiness_result.is_valid)
      self.distraction_result.is_valid = bool(self.distraction_result.is_valid)
      self.eye_status_result.left_eye_gaze_vector.is_valid = bool(self.eye_status_result.left_eye_gaze_vector.is_valid)
      self.eye_status_result.left_eye_position.is_valid = bool(self.eye_status_result.left_eye_position.is_valid)
      self.eye_status_result.right_eye_gaze_vector.is_valid = bool(self.eye_status_result.right_eye_gaze_vector.is_valid)
      self.eye_status_result.right_eye_position.is_valid = bool(self.eye_status_result.right_eye_position.is_valid)
      self.gaze_aoi_result.is_valid = bool(self.gaze_aoi_result.is_valid)
      self.head_result.head_position.is_valid = bool(self.head_result.head_position.is_valid)
      self.head_result.head_pose.is_valid = bool(self.head_result.head_pose.is_valid)
      self.smoke_result.is_smoking = bool(self.smoke_result.is_smoking)
      self.yawn_result.is_yawning = bool(self.yawn_result.is_yawning)
      self.age_result.is_child = bool(self.age_result.is_child)
      self.face_result.is_valid = bool(self.face_result.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.face_result.landmarks = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.DMSPoint2f()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.face_result.landmarks.append(val1)
      _x = self
      start = end
      end += 28
      (_x.face_result.landmark_number, _x.face_result.top_left_x, _x.face_result.bottom_right_x, _x.face_result.top_left_y, _x.face_result.bottom_right_y, _x.strabismus_result, _x.system_status,) = _get_struct_I6i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uuid = str[start:end]
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_I6i = None
def _get_struct_I6i():
    global _struct_I6i
    if _struct_I6i is None:
        _struct_I6i = struct.Struct("<I6i")
    return _struct_I6i
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB = None
def _get_struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB():
    global _struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB
    if _struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB is None:
        _struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB = struct.Struct("<iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB")
    return _struct_iBfifB3i2fB3fB3fi2fB3fB3fi2B3fB3fifBfBfIi3fBfififB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PSAPObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class PSAPObject(genpy.Message):
  _md5sum = "982c17c28151ade9c5da47b0e56e5d24"
  _type = "rospy_message_converter/PSAPObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 obj_type
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
int32 marker_id

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y
"""
  __slots__ = ['obj_type','pt1','pt2','pt3','pt4','marker_id']
  _slot_types = ['int32','rospy_message_converter/SVCPoint','rospy_message_converter/SVCPoint','rospy_message_converter/SVCPoint','rospy_message_converter/SVCPoint','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_type,pt1,pt2,pt3,pt4,marker_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PSAPObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_type is None:
        self.obj_type = 0
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.SVCPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.SVCPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.SVCPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.SVCPoint()
      if self.marker_id is None:
        self.marker_id = 0
    else:
      self.obj_type = 0
      self.pt1 = rospy_message_converter.msg.SVCPoint()
      self.pt2 = rospy_message_converter.msg.SVCPoint()
      self.pt3 = rospy_message_converter.msg.SVCPoint()
      self.pt4 = rospy_message_converter.msg.SVCPoint()
      self.marker_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i8fi().pack(_x.obj_type, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.marker_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.SVCPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.SVCPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.SVCPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.SVCPoint()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.obj_type, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.marker_id,) = _get_struct_i8fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i8fi().pack(_x.obj_type, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.marker_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pt1 is None:
        self.pt1 = rospy_message_converter.msg.SVCPoint()
      if self.pt2 is None:
        self.pt2 = rospy_message_converter.msg.SVCPoint()
      if self.pt3 is None:
        self.pt3 = rospy_message_converter.msg.SVCPoint()
      if self.pt4 is None:
        self.pt4 = rospy_message_converter.msg.SVCPoint()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.obj_type, _x.pt1.x, _x.pt1.y, _x.pt2.x, _x.pt2.y, _x.pt3.x, _x.pt3.y, _x.pt4.x, _x.pt4.y, _x.marker_id,) = _get_struct_i8fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i8fi = None
def _get_struct_i8fi():
    global _struct_i8fi
    if _struct_i8fi is None:
        _struct_i8fi = struct.Struct("<i8fi")
    return _struct_i8fi

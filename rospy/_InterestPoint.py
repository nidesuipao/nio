# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/InterestPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InterestPoint(genpy.Message):
  _md5sum = "f69fcad6ba55296841ab4ab791b3158c"
  _type = "rospy_message_converter/InterestPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 INTP_Type
uint32 INTP_ID
uint32 INTP_Age
int32 INTP_Line_Role
float32 INTP_Long_Distance
float32 INTP_Lat_Distance
float32 INTP_Exist_Probability
"""
  __slots__ = ['INTP_Type','INTP_ID','INTP_Age','INTP_Line_Role','INTP_Long_Distance','INTP_Lat_Distance','INTP_Exist_Probability']
  _slot_types = ['int32','uint32','uint32','int32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       INTP_Type,INTP_ID,INTP_Age,INTP_Line_Role,INTP_Long_Distance,INTP_Lat_Distance,INTP_Exist_Probability

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InterestPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.INTP_Type is None:
        self.INTP_Type = 0
      if self.INTP_ID is None:
        self.INTP_ID = 0
      if self.INTP_Age is None:
        self.INTP_Age = 0
      if self.INTP_Line_Role is None:
        self.INTP_Line_Role = 0
      if self.INTP_Long_Distance is None:
        self.INTP_Long_Distance = 0.
      if self.INTP_Lat_Distance is None:
        self.INTP_Lat_Distance = 0.
      if self.INTP_Exist_Probability is None:
        self.INTP_Exist_Probability = 0.
    else:
      self.INTP_Type = 0
      self.INTP_ID = 0
      self.INTP_Age = 0
      self.INTP_Line_Role = 0
      self.INTP_Long_Distance = 0.
      self.INTP_Lat_Distance = 0.
      self.INTP_Exist_Probability = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2Ii3f().pack(_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.INTP_Type, _x.INTP_ID, _x.INTP_Age, _x.INTP_Line_Role, _x.INTP_Long_Distance, _x.INTP_Lat_Distance, _x.INTP_Exist_Probability,) = _get_struct_i2Ii3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2Ii3f = None
def _get_struct_i2Ii3f():
    global _struct_i2Ii3f
    if _struct_i2Ii3f is None:
        _struct_i2Ii3f = struct.Struct("<i2Ii3f")
    return _struct_i2Ii3f

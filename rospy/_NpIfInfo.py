# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/NpIfInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NpIfInfo(genpy.Message):
  _md5sum = "1310243d28308e270b0debb895a4e440"
  _type = "rospy_message_converter/NpIfInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 Textinfo
int32 GoNotifyReq
int32 LnAssiTyp
int32 LnAssiSnvty
bool LnAstHptcOnOffSts
int32 LnAssistSts
int32 DANADSts
int32 AdasLeLine
int32 AdasRiLine
int32 TurnLightReq
int32 TauGapSet
bool DisplaySetSpeedSwtch
bool SetSpeedUnit
uint32 DisplaySetSpd
uint32 DA_NAD_WTI
uint32 ALCSsts
int32 LatCtrlTarLe
int32 LatCtrlTarRi
bool LongCtrlTar
int32 TauGapChangeDisp
int32 HODsymbol
int32 ELKSts
int32 ESFWarningSts
int32 EASSts
int32 EASWarningLevel
bool EcallReq
bool DA_FreeSpaceIntrusion
uint32 DA_NOP_ALC_Sts
int32 DA_NOP_Avl
uint32 DA_LaneChgSupReason
int32 ADCDoorLockReq
uint32 DA_NOP_WTIs
uint32 DA_iACC_WTIs
uint32 DA_Pilot_WTIs
bool DA_SysFailSymbol
int32 DA_SetSpeedAnimation
int32 DMSIntrvSnvtyReq
int32 DMSFaultInfo
int32 ADBSysErrSts
uint32 DA_NopWTI
"""
  __slots__ = ['Textinfo','GoNotifyReq','LnAssiTyp','LnAssiSnvty','LnAstHptcOnOffSts','LnAssistSts','DANADSts','AdasLeLine','AdasRiLine','TurnLightReq','TauGapSet','DisplaySetSpeedSwtch','SetSpeedUnit','DisplaySetSpd','DA_NAD_WTI','ALCSsts','LatCtrlTarLe','LatCtrlTarRi','LongCtrlTar','TauGapChangeDisp','HODsymbol','ELKSts','ESFWarningSts','EASSts','EASWarningLevel','EcallReq','DA_FreeSpaceIntrusion','DA_NOP_ALC_Sts','DA_NOP_Avl','DA_LaneChgSupReason','ADCDoorLockReq','DA_NOP_WTIs','DA_iACC_WTIs','DA_Pilot_WTIs','DA_SysFailSymbol','DA_SetSpeedAnimation','DMSIntrvSnvtyReq','DMSFaultInfo','ADBSysErrSts','DA_NopWTI']
  _slot_types = ['uint32','int32','int32','int32','bool','int32','int32','int32','int32','int32','int32','bool','bool','uint32','uint32','uint32','int32','int32','bool','int32','int32','int32','int32','int32','int32','bool','bool','uint32','int32','uint32','int32','uint32','uint32','uint32','bool','int32','int32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Textinfo,GoNotifyReq,LnAssiTyp,LnAssiSnvty,LnAstHptcOnOffSts,LnAssistSts,DANADSts,AdasLeLine,AdasRiLine,TurnLightReq,TauGapSet,DisplaySetSpeedSwtch,SetSpeedUnit,DisplaySetSpd,DA_NAD_WTI,ALCSsts,LatCtrlTarLe,LatCtrlTarRi,LongCtrlTar,TauGapChangeDisp,HODsymbol,ELKSts,ESFWarningSts,EASSts,EASWarningLevel,EcallReq,DA_FreeSpaceIntrusion,DA_NOP_ALC_Sts,DA_NOP_Avl,DA_LaneChgSupReason,ADCDoorLockReq,DA_NOP_WTIs,DA_iACC_WTIs,DA_Pilot_WTIs,DA_SysFailSymbol,DA_SetSpeedAnimation,DMSIntrvSnvtyReq,DMSFaultInfo,ADBSysErrSts,DA_NopWTI

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NpIfInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Textinfo is None:
        self.Textinfo = 0
      if self.GoNotifyReq is None:
        self.GoNotifyReq = 0
      if self.LnAssiTyp is None:
        self.LnAssiTyp = 0
      if self.LnAssiSnvty is None:
        self.LnAssiSnvty = 0
      if self.LnAstHptcOnOffSts is None:
        self.LnAstHptcOnOffSts = False
      if self.LnAssistSts is None:
        self.LnAssistSts = 0
      if self.DANADSts is None:
        self.DANADSts = 0
      if self.AdasLeLine is None:
        self.AdasLeLine = 0
      if self.AdasRiLine is None:
        self.AdasRiLine = 0
      if self.TurnLightReq is None:
        self.TurnLightReq = 0
      if self.TauGapSet is None:
        self.TauGapSet = 0
      if self.DisplaySetSpeedSwtch is None:
        self.DisplaySetSpeedSwtch = False
      if self.SetSpeedUnit is None:
        self.SetSpeedUnit = False
      if self.DisplaySetSpd is None:
        self.DisplaySetSpd = 0
      if self.DA_NAD_WTI is None:
        self.DA_NAD_WTI = 0
      if self.ALCSsts is None:
        self.ALCSsts = 0
      if self.LatCtrlTarLe is None:
        self.LatCtrlTarLe = 0
      if self.LatCtrlTarRi is None:
        self.LatCtrlTarRi = 0
      if self.LongCtrlTar is None:
        self.LongCtrlTar = False
      if self.TauGapChangeDisp is None:
        self.TauGapChangeDisp = 0
      if self.HODsymbol is None:
        self.HODsymbol = 0
      if self.ELKSts is None:
        self.ELKSts = 0
      if self.ESFWarningSts is None:
        self.ESFWarningSts = 0
      if self.EASSts is None:
        self.EASSts = 0
      if self.EASWarningLevel is None:
        self.EASWarningLevel = 0
      if self.EcallReq is None:
        self.EcallReq = False
      if self.DA_FreeSpaceIntrusion is None:
        self.DA_FreeSpaceIntrusion = False
      if self.DA_NOP_ALC_Sts is None:
        self.DA_NOP_ALC_Sts = 0
      if self.DA_NOP_Avl is None:
        self.DA_NOP_Avl = 0
      if self.DA_LaneChgSupReason is None:
        self.DA_LaneChgSupReason = 0
      if self.ADCDoorLockReq is None:
        self.ADCDoorLockReq = 0
      if self.DA_NOP_WTIs is None:
        self.DA_NOP_WTIs = 0
      if self.DA_iACC_WTIs is None:
        self.DA_iACC_WTIs = 0
      if self.DA_Pilot_WTIs is None:
        self.DA_Pilot_WTIs = 0
      if self.DA_SysFailSymbol is None:
        self.DA_SysFailSymbol = False
      if self.DA_SetSpeedAnimation is None:
        self.DA_SetSpeedAnimation = 0
      if self.DMSIntrvSnvtyReq is None:
        self.DMSIntrvSnvtyReq = 0
      if self.DMSFaultInfo is None:
        self.DMSFaultInfo = 0
      if self.ADBSysErrSts is None:
        self.ADBSysErrSts = 0
      if self.DA_NopWTI is None:
        self.DA_NopWTI = 0
    else:
      self.Textinfo = 0
      self.GoNotifyReq = 0
      self.LnAssiTyp = 0
      self.LnAssiSnvty = 0
      self.LnAstHptcOnOffSts = False
      self.LnAssistSts = 0
      self.DANADSts = 0
      self.AdasLeLine = 0
      self.AdasRiLine = 0
      self.TurnLightReq = 0
      self.TauGapSet = 0
      self.DisplaySetSpeedSwtch = False
      self.SetSpeedUnit = False
      self.DisplaySetSpd = 0
      self.DA_NAD_WTI = 0
      self.ALCSsts = 0
      self.LatCtrlTarLe = 0
      self.LatCtrlTarRi = 0
      self.LongCtrlTar = False
      self.TauGapChangeDisp = 0
      self.HODsymbol = 0
      self.ELKSts = 0
      self.ESFWarningSts = 0
      self.EASSts = 0
      self.EASWarningLevel = 0
      self.EcallReq = False
      self.DA_FreeSpaceIntrusion = False
      self.DA_NOP_ALC_Sts = 0
      self.DA_NOP_Avl = 0
      self.DA_LaneChgSupReason = 0
      self.ADCDoorLockReq = 0
      self.DA_NOP_WTIs = 0
      self.DA_iACC_WTIs = 0
      self.DA_Pilot_WTIs = 0
      self.DA_SysFailSymbol = False
      self.DA_SetSpeedAnimation = 0
      self.DMSIntrvSnvtyReq = 0
      self.DMSFaultInfo = 0
      self.ADBSysErrSts = 0
      self.DA_NopWTI = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI().pack(_x.Textinfo, _x.GoNotifyReq, _x.LnAssiTyp, _x.LnAssiSnvty, _x.LnAstHptcOnOffSts, _x.LnAssistSts, _x.DANADSts, _x.AdasLeLine, _x.AdasRiLine, _x.TurnLightReq, _x.TauGapSet, _x.DisplaySetSpeedSwtch, _x.SetSpeedUnit, _x.DisplaySetSpd, _x.DA_NAD_WTI, _x.ALCSsts, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.LongCtrlTar, _x.TauGapChangeDisp, _x.HODsymbol, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.EASWarningLevel, _x.EcallReq, _x.DA_FreeSpaceIntrusion, _x.DA_NOP_ALC_Sts, _x.DA_NOP_Avl, _x.DA_LaneChgSupReason, _x.ADCDoorLockReq, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol, _x.DA_SetSpeedAnimation, _x.DMSIntrvSnvtyReq, _x.DMSFaultInfo, _x.ADBSysErrSts, _x.DA_NopWTI))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 139
      (_x.Textinfo, _x.GoNotifyReq, _x.LnAssiTyp, _x.LnAssiSnvty, _x.LnAstHptcOnOffSts, _x.LnAssistSts, _x.DANADSts, _x.AdasLeLine, _x.AdasRiLine, _x.TurnLightReq, _x.TauGapSet, _x.DisplaySetSpeedSwtch, _x.SetSpeedUnit, _x.DisplaySetSpd, _x.DA_NAD_WTI, _x.ALCSsts, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.LongCtrlTar, _x.TauGapChangeDisp, _x.HODsymbol, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.EASWarningLevel, _x.EcallReq, _x.DA_FreeSpaceIntrusion, _x.DA_NOP_ALC_Sts, _x.DA_NOP_Avl, _x.DA_LaneChgSupReason, _x.ADCDoorLockReq, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol, _x.DA_SetSpeedAnimation, _x.DMSIntrvSnvtyReq, _x.DMSFaultInfo, _x.ADBSysErrSts, _x.DA_NopWTI,) = _get_struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI().unpack(str[start:end])
      self.LnAstHptcOnOffSts = bool(self.LnAstHptcOnOffSts)
      self.DisplaySetSpeedSwtch = bool(self.DisplaySetSpeedSwtch)
      self.SetSpeedUnit = bool(self.SetSpeedUnit)
      self.LongCtrlTar = bool(self.LongCtrlTar)
      self.EcallReq = bool(self.EcallReq)
      self.DA_FreeSpaceIntrusion = bool(self.DA_FreeSpaceIntrusion)
      self.DA_SysFailSymbol = bool(self.DA_SysFailSymbol)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI().pack(_x.Textinfo, _x.GoNotifyReq, _x.LnAssiTyp, _x.LnAssiSnvty, _x.LnAstHptcOnOffSts, _x.LnAssistSts, _x.DANADSts, _x.AdasLeLine, _x.AdasRiLine, _x.TurnLightReq, _x.TauGapSet, _x.DisplaySetSpeedSwtch, _x.SetSpeedUnit, _x.DisplaySetSpd, _x.DA_NAD_WTI, _x.ALCSsts, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.LongCtrlTar, _x.TauGapChangeDisp, _x.HODsymbol, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.EASWarningLevel, _x.EcallReq, _x.DA_FreeSpaceIntrusion, _x.DA_NOP_ALC_Sts, _x.DA_NOP_Avl, _x.DA_LaneChgSupReason, _x.ADCDoorLockReq, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol, _x.DA_SetSpeedAnimation, _x.DMSIntrvSnvtyReq, _x.DMSFaultInfo, _x.ADBSysErrSts, _x.DA_NopWTI))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 139
      (_x.Textinfo, _x.GoNotifyReq, _x.LnAssiTyp, _x.LnAssiSnvty, _x.LnAstHptcOnOffSts, _x.LnAssistSts, _x.DANADSts, _x.AdasLeLine, _x.AdasRiLine, _x.TurnLightReq, _x.TauGapSet, _x.DisplaySetSpeedSwtch, _x.SetSpeedUnit, _x.DisplaySetSpd, _x.DA_NAD_WTI, _x.ALCSsts, _x.LatCtrlTarLe, _x.LatCtrlTarRi, _x.LongCtrlTar, _x.TauGapChangeDisp, _x.HODsymbol, _x.ELKSts, _x.ESFWarningSts, _x.EASSts, _x.EASWarningLevel, _x.EcallReq, _x.DA_FreeSpaceIntrusion, _x.DA_NOP_ALC_Sts, _x.DA_NOP_Avl, _x.DA_LaneChgSupReason, _x.ADCDoorLockReq, _x.DA_NOP_WTIs, _x.DA_iACC_WTIs, _x.DA_Pilot_WTIs, _x.DA_SysFailSymbol, _x.DA_SetSpeedAnimation, _x.DMSIntrvSnvtyReq, _x.DMSFaultInfo, _x.ADBSysErrSts, _x.DA_NopWTI,) = _get_struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI().unpack(str[start:end])
      self.LnAstHptcOnOffSts = bool(self.LnAstHptcOnOffSts)
      self.DisplaySetSpeedSwtch = bool(self.DisplaySetSpeedSwtch)
      self.SetSpeedUnit = bool(self.SetSpeedUnit)
      self.LongCtrlTar = bool(self.LongCtrlTar)
      self.EcallReq = bool(self.EcallReq)
      self.DA_FreeSpaceIntrusion = bool(self.DA_FreeSpaceIntrusion)
      self.DA_SysFailSymbol = bool(self.DA_SysFailSymbol)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI = None
def _get_struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI():
    global _struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI
    if _struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI is None:
        _struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI = struct.Struct("<I3iB6i2B3I2iB6i2BIiIi3IB4iI")
    return _struct_I3iB6i2B3I2iB6i2BIiIi3IB4iI

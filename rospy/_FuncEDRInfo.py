# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FuncEDRInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FuncEDRInfo(genpy.Message):
  _md5sum = "04e7d17f03b075221a2e7d462da69411"
  _type = "rospy_message_converter/FuncEDRInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 LnAssistSts_EDR
int32 LnAssiTyp_EDR
int32 AdasLeLine_EDR
int32 ACSF_B1_Sts_EDR
int32 AdasRiLine_EDR
int32 ELKSts_EDR
int32 ACSF_D_Sts_EDR
int32 ACSF_B2_Sts_EDR
int32 ACSF_A_Sts_EDR
int32 ACSF_C_Sts_EDR
int32 ACSF_E_Sts_EDR
int32 ACCSts_EDR
int32 ESFWarningSts_EDR
"""
  __slots__ = ['LnAssistSts_EDR','LnAssiTyp_EDR','AdasLeLine_EDR','ACSF_B1_Sts_EDR','AdasRiLine_EDR','ELKSts_EDR','ACSF_D_Sts_EDR','ACSF_B2_Sts_EDR','ACSF_A_Sts_EDR','ACSF_C_Sts_EDR','ACSF_E_Sts_EDR','ACCSts_EDR','ESFWarningSts_EDR']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LnAssistSts_EDR,LnAssiTyp_EDR,AdasLeLine_EDR,ACSF_B1_Sts_EDR,AdasRiLine_EDR,ELKSts_EDR,ACSF_D_Sts_EDR,ACSF_B2_Sts_EDR,ACSF_A_Sts_EDR,ACSF_C_Sts_EDR,ACSF_E_Sts_EDR,ACCSts_EDR,ESFWarningSts_EDR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FuncEDRInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LnAssistSts_EDR is None:
        self.LnAssistSts_EDR = 0
      if self.LnAssiTyp_EDR is None:
        self.LnAssiTyp_EDR = 0
      if self.AdasLeLine_EDR is None:
        self.AdasLeLine_EDR = 0
      if self.ACSF_B1_Sts_EDR is None:
        self.ACSF_B1_Sts_EDR = 0
      if self.AdasRiLine_EDR is None:
        self.AdasRiLine_EDR = 0
      if self.ELKSts_EDR is None:
        self.ELKSts_EDR = 0
      if self.ACSF_D_Sts_EDR is None:
        self.ACSF_D_Sts_EDR = 0
      if self.ACSF_B2_Sts_EDR is None:
        self.ACSF_B2_Sts_EDR = 0
      if self.ACSF_A_Sts_EDR is None:
        self.ACSF_A_Sts_EDR = 0
      if self.ACSF_C_Sts_EDR is None:
        self.ACSF_C_Sts_EDR = 0
      if self.ACSF_E_Sts_EDR is None:
        self.ACSF_E_Sts_EDR = 0
      if self.ACCSts_EDR is None:
        self.ACCSts_EDR = 0
      if self.ESFWarningSts_EDR is None:
        self.ESFWarningSts_EDR = 0
    else:
      self.LnAssistSts_EDR = 0
      self.LnAssiTyp_EDR = 0
      self.AdasLeLine_EDR = 0
      self.ACSF_B1_Sts_EDR = 0
      self.AdasRiLine_EDR = 0
      self.ELKSts_EDR = 0
      self.ACSF_D_Sts_EDR = 0
      self.ACSF_B2_Sts_EDR = 0
      self.ACSF_A_Sts_EDR = 0
      self.ACSF_C_Sts_EDR = 0
      self.ACSF_E_Sts_EDR = 0
      self.ACCSts_EDR = 0
      self.ESFWarningSts_EDR = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13i().pack(_x.LnAssistSts_EDR, _x.LnAssiTyp_EDR, _x.AdasLeLine_EDR, _x.ACSF_B1_Sts_EDR, _x.AdasRiLine_EDR, _x.ELKSts_EDR, _x.ACSF_D_Sts_EDR, _x.ACSF_B2_Sts_EDR, _x.ACSF_A_Sts_EDR, _x.ACSF_C_Sts_EDR, _x.ACSF_E_Sts_EDR, _x.ACCSts_EDR, _x.ESFWarningSts_EDR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.LnAssistSts_EDR, _x.LnAssiTyp_EDR, _x.AdasLeLine_EDR, _x.ACSF_B1_Sts_EDR, _x.AdasRiLine_EDR, _x.ELKSts_EDR, _x.ACSF_D_Sts_EDR, _x.ACSF_B2_Sts_EDR, _x.ACSF_A_Sts_EDR, _x.ACSF_C_Sts_EDR, _x.ACSF_E_Sts_EDR, _x.ACCSts_EDR, _x.ESFWarningSts_EDR,) = _get_struct_13i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13i().pack(_x.LnAssistSts_EDR, _x.LnAssiTyp_EDR, _x.AdasLeLine_EDR, _x.ACSF_B1_Sts_EDR, _x.AdasRiLine_EDR, _x.ELKSts_EDR, _x.ACSF_D_Sts_EDR, _x.ACSF_B2_Sts_EDR, _x.ACSF_A_Sts_EDR, _x.ACSF_C_Sts_EDR, _x.ACSF_E_Sts_EDR, _x.ACCSts_EDR, _x.ESFWarningSts_EDR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.LnAssistSts_EDR, _x.LnAssiTyp_EDR, _x.AdasLeLine_EDR, _x.ACSF_B1_Sts_EDR, _x.AdasRiLine_EDR, _x.ELKSts_EDR, _x.ACSF_D_Sts_EDR, _x.ACSF_B2_Sts_EDR, _x.ACSF_A_Sts_EDR, _x.ACSF_C_Sts_EDR, _x.ACSF_E_Sts_EDR, _x.ACCSts_EDR, _x.ESFWarningSts_EDR,) = _get_struct_13i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13i = None
def _get_struct_13i():
    global _struct_13i
    if _struct_13i is None:
        _struct_13i = struct.Struct("<13i")
    return _struct_13i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VEH10ms.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VEH10ms(genpy.Message):
  _md5sum = "493ae9dfa6e70475f74594a81e1c7182"
  _type = "rospy_message_converter/VEH10ms"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """StrSysInfo StrSys
BrkSysInfo BrkSys
PtInfo PT
WhlInfos Whl
VehDynInfo VehDyn
VehCtrlIfInfo VehCtrlIf
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/StrSysInfo
int32 StrAgFailSts
int32 StrAgCalSts
float32 StrWhlAgSAE
float32 StrWhlAgSpdSAE
int32 PnnAgVld
float32 PnnAgSAE
float32 PnnAgOffsetSAE
int32 EstRackFrcVld
float32 EstRackFrcSae
int32 MtrTqVld
float32 MtrTqSAE
int32 TorsBarTqVld
float32 TorsBarTqSAE
int32 EPSSts
int32 DrvngMod
bool RampSts
int32 ACIMtrTqVld
float32 ACIMtrTqSAE
uint32 Temperature
uint32 SupInfo
uint32 VMCHVIAvl
uint32 EPSReqTyp
bool BCUCTIAvl
int32 WarnLampReq
bool SteerWhlAgAndSpdValid
int32 SWCFailSts
int32 SteerColTiltCtrlSts
uint32 SteerColTiltPos
int32 SteerColTeleCtrlSts
uint32 SteerColTelescopePos
bool HODErrSts
int32 HOSts
int32 OverRideDetn
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkSysInfo
BrkPdlInfo BrkPdl
BrkPrsInfos BrkPrsInfo
PrkBrkInfos PrkBrk
int32 BrkOverHeat
int32 BrkHAZReq
int32 BCUBrkLiReq
uint32 StstSts
int32 NoBrkF
int32 SupInfo
int32 BrkFldLvl
int32 BrkPadWearSts
BrkFunInfo BrkFunSt
bool ExtBrkActv
float32 ExtBrkCp
uint32 ExtBrkSts
float32 MbRegenFrntAxleTar
uint32 MbRegenFrntAxleTarQ
float32 MbRegenReAxleTar
uint32 MbRegenReAxleTarQ
uint32 StabyMagin
uint32 StabyMaginQ
int32 BrkFldWarnReq
int32 BrkPadWearWarnReq
uint32 FCC1_StandstillStatus

================================================================================
MSG: rospy_message_converter/BrkPdlInfo
int32 TrvlCalSts
float32 Trvl
int32 BrkPedlSts
bool BrkpedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkPrsInfos
int32 BrkPrsVld
float32 BrkPrs
int32 BrkPrsOffsetVld
float32 BrkPrsOffset
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/PrkBrkInfos
int32 EPBSwtSts
int32 EPBSts
int32 EPBMod
bool CDPReq
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/BrkFunInfo
bool BDWActv
bool ABAAvl
bool ABAActv
bool ABPAvl
bool ABPActv
bool ABSActv
int32 AVHSts
bool DTCActv
bool DWTActv
bool EBAAvl
bool EBAActv
bool EBDActv
bool HBAActv
int32 HDCSts
bool HHCAvl
bool HHCActv
bool TCSActv
bool TCSDeactv
bool VDCActv
bool VDCDeactv
bool EBDFailLampReq
bool VDCTCSLampInfo
bool VDCTCSFailLampReq
bool ABSFailLampReq
bool VDCTCSOnOfflampReq
bool AWBActv
bool AWBAvl
bool EBPActv
bool HBCActv
int32 ARPCfgSts
bool CDPActv
bool CDPAvail
bool ARPActv
bool DTCAvl
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/PtInfo
AccrPedalInfo AccrPedal
GearInfo Gear
MotorInfo[] Motor
bool VCURvsLampReq
bool VCUBrkLampReq
int32 CruiseStatus
int32 VCUEPBReq
float32 CruiseStoredSpeed
bool VCUPtWakeupReq
bool DCChrgrPluginSts
bool ACChrgrPluginSts
bool VCU_VehHldReq
bool VCU_BrkReqEna
bool VCU_ForceFctEna
float32 VCU_TarBrkFReq

================================================================================
MSG: rospy_message_converter/AccrPedalInfo
int32 EfcPosnVld
float32 EfcPosn
int32 ActPosnVld
float32 ActPosn
bool PedlOvrd
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/GearInfo
int32 SlctrPosnVld
int32 ActGearVld
int32 TrgtGearVld
int32 SlctrPosn
int32 ActGear
int32 TrgtGear
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/MotorInfo
int32 IntdMotTqVld
float32 IntdMotTq
int32 ActMotTqVld
float32 ActMotTq
int32 MotSpdVld
float32 MotSpd
uint32 SpdLimForFlt
int32 DampSts
int32 FailrSts
int32 HeatCap
int32 MotHoldSts
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlInfos
WhlDynInfo[] WhlDyn
WhlTpmsInfo[] WHlTpms
uint64 WhlDyn_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlDynInfo
int32 WhlSpdSts
int32 WhlSpdMovgDir
float32 WhlSpd
int32 WhlPlsCntrVld
uint32 WhlPlsCntr
uint64 WhlSpd_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/WhlTpmsInfo
float32 Press
int32 Temp
uint32 SnsrFailSts
uint32 BatSts
int32 PressSts
uint32 DeltaPressSts
uint32 TempSts

================================================================================
MSG: rospy_message_converter/VehDynInfo
VehSpdInfos VehSpd
int32 AxAyYrsCalSts
int32 LgtASts
float32 LgtSAEAg
float32 LgtSAEAmpss
int32 LatASts
float32 LatSAEAg
float32 LatSAEAmpss
int32 YawRateSts
float32 YawRateSAERps
float32 YawRateSAEDps
float32 VehOdom
uint64 YawRate_Timestamp
uint64 timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VehSpdInfos
int32 VehSpdSts
int32 VehMovgDir
float32 VehSpdkph
float32 VehSpdmps
float32 VehFiltLngAcc
int32 VehSpdASILDSts
float32 VehSpdASILD
float32 VehDispSpd
int32 VCUVehDispSpdSts
uint64[] timestamp_ptp_ns

================================================================================
MSG: rospy_message_converter/VehCtrlIfInfo
LngCtrlFun LngCtrlIf
StrCtrlInfo LatCtrlIf

================================================================================
MSG: rospy_message_converter/LngCtrlFun
bool VLCAvl
bool VLCActv
float32 VLCTarDecel
int32 LLCFctSt
int32 LLCIntrrptErrTyp
bool AutoBrkgAvl
bool AutoBrkgActv
int32 ADTSts
int32 HldLampReq
bool FCC1_ForceFctEna
bool FCC1_BrkReqEna
float32 FCC1_TarBrkFReq
bool FCC1_VehHldReq
bool FCC1_VLCActv
float32 RVMCLgtDecCp
uint32 RVMCLgtSts
int32 VCUCruiseCtrlMod
int32 VMCBrkOvrd
float32 VMCLgtAccCp
float32 VMCLgtDecCp
uint32 VMCLgtSts
uint64[] timestamp_ptp_ns
float32 FCC1_VLCTarDecel
bool FCC1_VMCBrkOvrd

================================================================================
MSG: rospy_message_converter/StrCtrlInfo
int32 ActvExtIf
bool HIAvl
bool TOIAvl
bool DAIAvl
bool PAIAvl
uint64 timestamp_ptp_ns
"""
  __slots__ = ['StrSys','BrkSys','PT','Whl','VehDyn','VehCtrlIf','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/StrSysInfo','rospy_message_converter/BrkSysInfo','rospy_message_converter/PtInfo','rospy_message_converter/WhlInfos','rospy_message_converter/VehDynInfo','rospy_message_converter/VehCtrlIfInfo','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       StrSys,BrkSys,PT,Whl,VehDyn,VehCtrlIf,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VEH10ms, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.StrSys is None:
        self.StrSys = rospy_message_converter.msg.StrSysInfo()
      if self.BrkSys is None:
        self.BrkSys = rospy_message_converter.msg.BrkSysInfo()
      if self.PT is None:
        self.PT = rospy_message_converter.msg.PtInfo()
      if self.Whl is None:
        self.Whl = rospy_message_converter.msg.WhlInfos()
      if self.VehDyn is None:
        self.VehDyn = rospy_message_converter.msg.VehDynInfo()
      if self.VehCtrlIf is None:
        self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.StrSys = rospy_message_converter.msg.StrSysInfo()
      self.BrkSys = rospy_message_converter.msg.BrkSysInfo()
      self.PT = rospy_message_converter.msg.PtInfo()
      self.Whl = rospy_message_converter.msg.WhlInfos()
      self.VehDyn = rospy_message_converter.msg.VehDynInfo()
      self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().pack(_x.StrSys.StrAgFailSts, _x.StrSys.StrAgCalSts, _x.StrSys.StrWhlAgSAE, _x.StrSys.StrWhlAgSpdSAE, _x.StrSys.PnnAgVld, _x.StrSys.PnnAgSAE, _x.StrSys.PnnAgOffsetSAE, _x.StrSys.EstRackFrcVld, _x.StrSys.EstRackFrcSae, _x.StrSys.MtrTqVld, _x.StrSys.MtrTqSAE, _x.StrSys.TorsBarTqVld, _x.StrSys.TorsBarTqSAE, _x.StrSys.EPSSts, _x.StrSys.DrvngMod, _x.StrSys.RampSts, _x.StrSys.ACIMtrTqVld, _x.StrSys.ACIMtrTqSAE, _x.StrSys.Temperature, _x.StrSys.SupInfo, _x.StrSys.VMCHVIAvl, _x.StrSys.EPSReqTyp, _x.StrSys.BCUCTIAvl, _x.StrSys.WarnLampReq, _x.StrSys.SteerWhlAgAndSpdValid, _x.StrSys.SWCFailSts, _x.StrSys.SteerColTiltCtrlSts, _x.StrSys.SteerColTiltPos, _x.StrSys.SteerColTeleCtrlSts, _x.StrSys.SteerColTelescopePos, _x.StrSys.HODErrSts, _x.StrSys.HOSts, _x.StrSys.OverRideDetn))
      length = len(self.StrSys.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.StrSys.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().pack(_x.BrkSys.BrkPdl.TrvlCalSts, _x.BrkSys.BrkPdl.Trvl, _x.BrkSys.BrkPdl.BrkPedlSts, _x.BrkSys.BrkPdl.BrkpedlOvrd, _x.BrkSys.BrkPdl.timestamp_ptp_ns, _x.BrkSys.BrkPrsInfo.BrkPrsVld, _x.BrkSys.BrkPrsInfo.BrkPrs, _x.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.BrkSys.PrkBrk.EPBSwtSts, _x.BrkSys.PrkBrk.EPBSts, _x.BrkSys.PrkBrk.EPBMod, _x.BrkSys.PrkBrk.CDPReq, _x.BrkSys.PrkBrk.timestamp_ptp_ns, _x.BrkSys.BrkOverHeat, _x.BrkSys.BrkHAZReq, _x.BrkSys.BCUBrkLiReq, _x.BrkSys.StstSts, _x.BrkSys.NoBrkF, _x.BrkSys.SupInfo, _x.BrkSys.BrkFldLvl, _x.BrkSys.BrkPadWearSts, _x.BrkSys.BrkFunSt.BDWActv, _x.BrkSys.BrkFunSt.ABAAvl, _x.BrkSys.BrkFunSt.ABAActv, _x.BrkSys.BrkFunSt.ABPAvl, _x.BrkSys.BrkFunSt.ABPActv, _x.BrkSys.BrkFunSt.ABSActv, _x.BrkSys.BrkFunSt.AVHSts, _x.BrkSys.BrkFunSt.DTCActv, _x.BrkSys.BrkFunSt.DWTActv, _x.BrkSys.BrkFunSt.EBAAvl, _x.BrkSys.BrkFunSt.EBAActv, _x.BrkSys.BrkFunSt.EBDActv, _x.BrkSys.BrkFunSt.HBAActv, _x.BrkSys.BrkFunSt.HDCSts, _x.BrkSys.BrkFunSt.HHCAvl, _x.BrkSys.BrkFunSt.HHCActv, _x.BrkSys.BrkFunSt.TCSActv, _x.BrkSys.BrkFunSt.TCSDeactv, _x.BrkSys.BrkFunSt.VDCActv, _x.BrkSys.BrkFunSt.VDCDeactv, _x.BrkSys.BrkFunSt.EBDFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.BrkSys.BrkFunSt.ABSFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkSys.BrkFunSt.AWBActv, _x.BrkSys.BrkFunSt.AWBAvl, _x.BrkSys.BrkFunSt.EBPActv, _x.BrkSys.BrkFunSt.HBCActv, _x.BrkSys.BrkFunSt.ARPCfgSts, _x.BrkSys.BrkFunSt.CDPActv, _x.BrkSys.BrkFunSt.CDPAvail, _x.BrkSys.BrkFunSt.ARPActv, _x.BrkSys.BrkFunSt.DTCAvl, _x.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.BrkSys.ExtBrkActv, _x.BrkSys.ExtBrkCp, _x.BrkSys.ExtBrkSts, _x.BrkSys.MbRegenFrntAxleTar, _x.BrkSys.MbRegenFrntAxleTarQ, _x.BrkSys.MbRegenReAxleTar, _x.BrkSys.MbRegenReAxleTarQ, _x.BrkSys.StabyMagin, _x.BrkSys.StabyMaginQ, _x.BrkSys.BrkFldWarnReq, _x.BrkSys.BrkPadWearWarnReq, _x.BrkSys.FCC1_StandstillStatus, _x.PT.AccrPedal.EfcPosnVld, _x.PT.AccrPedal.EfcPosn, _x.PT.AccrPedal.ActPosnVld, _x.PT.AccrPedal.ActPosn, _x.PT.AccrPedal.PedlOvrd, _x.PT.AccrPedal.timestamp_ptp_ns, _x.PT.Gear.SlctrPosnVld, _x.PT.Gear.ActGearVld, _x.PT.Gear.TrgtGearVld, _x.PT.Gear.SlctrPosn, _x.PT.Gear.ActGear, _x.PT.Gear.TrgtGear, _x.PT.Gear.timestamp_ptp_ns))
      length = len(self.PT.Motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.PT.Motor:
        _x = val1
        buff.write(_get_struct_ifififI4i().pack(_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts))
        length = len(val1.timestamp_ptp_ns)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(struct.Struct(pattern).pack(*val1.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2B2if6Bf().pack(_x.PT.VCURvsLampReq, _x.PT.VCUBrkLampReq, _x.PT.CruiseStatus, _x.PT.VCUEPBReq, _x.PT.CruiseStoredSpeed, _x.PT.VCUPtWakeupReq, _x.PT.DCChrgrPluginSts, _x.PT.ACChrgrPluginSts, _x.PT.VCU_VehHldReq, _x.PT.VCU_BrkReqEna, _x.PT.VCU_ForceFctEna, _x.PT.VCU_TarBrkFReq))
      length = len(self.Whl.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.Whl.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      length = len(self.Whl.WHlTpms)
      buff.write(_struct_I.pack(length))
      for val1 in self.Whl.WHlTpms:
        _x = val1
        buff.write(_get_struct_fi2Ii2I().pack(_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts))
      _x = self
      buff.write(_get_struct_2Q2i3fi2fi().pack(_x.Whl.WhlDyn_Timestamp, _x.Whl.timestamp_ptp_ns, _x.VehDyn.VehSpd.VehSpdSts, _x.VehDyn.VehSpd.VehMovgDir, _x.VehDyn.VehSpd.VehSpdkph, _x.VehDyn.VehSpd.VehSpdmps, _x.VehDyn.VehSpd.VehFiltLngAcc, _x.VehDyn.VehSpd.VehSpdASILDSts, _x.VehDyn.VehSpd.VehSpdASILD, _x.VehDyn.VehSpd.VehDispSpd, _x.VehDyn.VehSpd.VCUVehDispSpdSts))
      length = len(self.VehDyn.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.VehDyn.VehSpd.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.VehDyn.AxAyYrsCalSts, _x.VehDyn.LgtASts, _x.VehDyn.LgtSAEAg, _x.VehDyn.LgtSAEAmpss, _x.VehDyn.LatASts, _x.VehDyn.LatSAEAg, _x.VehDyn.LatSAEAmpss, _x.VehDyn.YawRateSts, _x.VehDyn.YawRateSAERps, _x.VehDyn.YawRateSAEDps, _x.VehDyn.VehOdom, _x.VehDyn.YawRate_Timestamp, _x.VehDyn.timestamp_ptp_ns, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts))
      length = len(self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_fBi4B2Q().pack(_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.StrSys is None:
        self.StrSys = rospy_message_converter.msg.StrSysInfo()
      if self.BrkSys is None:
        self.BrkSys = rospy_message_converter.msg.BrkSysInfo()
      if self.PT is None:
        self.PT = rospy_message_converter.msg.PtInfo()
      if self.Whl is None:
        self.Whl = rospy_message_converter.msg.WhlInfos()
      if self.VehDyn is None:
        self.VehDyn = rospy_message_converter.msg.VehDynInfo()
      if self.VehCtrlIf is None:
        self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      end = 0
      _x = self
      start = end
      end += 120
      (_x.StrSys.StrAgFailSts, _x.StrSys.StrAgCalSts, _x.StrSys.StrWhlAgSAE, _x.StrSys.StrWhlAgSpdSAE, _x.StrSys.PnnAgVld, _x.StrSys.PnnAgSAE, _x.StrSys.PnnAgOffsetSAE, _x.StrSys.EstRackFrcVld, _x.StrSys.EstRackFrcSae, _x.StrSys.MtrTqVld, _x.StrSys.MtrTqSAE, _x.StrSys.TorsBarTqVld, _x.StrSys.TorsBarTqSAE, _x.StrSys.EPSSts, _x.StrSys.DrvngMod, _x.StrSys.RampSts, _x.StrSys.ACIMtrTqVld, _x.StrSys.ACIMtrTqSAE, _x.StrSys.Temperature, _x.StrSys.SupInfo, _x.StrSys.VMCHVIAvl, _x.StrSys.EPSReqTyp, _x.StrSys.BCUCTIAvl, _x.StrSys.WarnLampReq, _x.StrSys.SteerWhlAgAndSpdValid, _x.StrSys.SWCFailSts, _x.StrSys.SteerColTiltCtrlSts, _x.StrSys.SteerColTiltPos, _x.StrSys.SteerColTeleCtrlSts, _x.StrSys.SteerColTelescopePos, _x.StrSys.HODErrSts, _x.StrSys.HOSts, _x.StrSys.OverRideDetn,) = _get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().unpack(str[start:end])
      self.StrSys.RampSts = bool(self.StrSys.RampSts)
      self.StrSys.BCUCTIAvl = bool(self.StrSys.BCUCTIAvl)
      self.StrSys.SteerWhlAgAndSpdValid = bool(self.StrSys.SteerWhlAgAndSpdValid)
      self.StrSys.HODErrSts = bool(self.StrSys.HODErrSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.StrSys.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 251
      (_x.BrkSys.BrkPdl.TrvlCalSts, _x.BrkSys.BrkPdl.Trvl, _x.BrkSys.BrkPdl.BrkPedlSts, _x.BrkSys.BrkPdl.BrkpedlOvrd, _x.BrkSys.BrkPdl.timestamp_ptp_ns, _x.BrkSys.BrkPrsInfo.BrkPrsVld, _x.BrkSys.BrkPrsInfo.BrkPrs, _x.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.BrkSys.PrkBrk.EPBSwtSts, _x.BrkSys.PrkBrk.EPBSts, _x.BrkSys.PrkBrk.EPBMod, _x.BrkSys.PrkBrk.CDPReq, _x.BrkSys.PrkBrk.timestamp_ptp_ns, _x.BrkSys.BrkOverHeat, _x.BrkSys.BrkHAZReq, _x.BrkSys.BCUBrkLiReq, _x.BrkSys.StstSts, _x.BrkSys.NoBrkF, _x.BrkSys.SupInfo, _x.BrkSys.BrkFldLvl, _x.BrkSys.BrkPadWearSts, _x.BrkSys.BrkFunSt.BDWActv, _x.BrkSys.BrkFunSt.ABAAvl, _x.BrkSys.BrkFunSt.ABAActv, _x.BrkSys.BrkFunSt.ABPAvl, _x.BrkSys.BrkFunSt.ABPActv, _x.BrkSys.BrkFunSt.ABSActv, _x.BrkSys.BrkFunSt.AVHSts, _x.BrkSys.BrkFunSt.DTCActv, _x.BrkSys.BrkFunSt.DWTActv, _x.BrkSys.BrkFunSt.EBAAvl, _x.BrkSys.BrkFunSt.EBAActv, _x.BrkSys.BrkFunSt.EBDActv, _x.BrkSys.BrkFunSt.HBAActv, _x.BrkSys.BrkFunSt.HDCSts, _x.BrkSys.BrkFunSt.HHCAvl, _x.BrkSys.BrkFunSt.HHCActv, _x.BrkSys.BrkFunSt.TCSActv, _x.BrkSys.BrkFunSt.TCSDeactv, _x.BrkSys.BrkFunSt.VDCActv, _x.BrkSys.BrkFunSt.VDCDeactv, _x.BrkSys.BrkFunSt.EBDFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.BrkSys.BrkFunSt.ABSFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkSys.BrkFunSt.AWBActv, _x.BrkSys.BrkFunSt.AWBAvl, _x.BrkSys.BrkFunSt.EBPActv, _x.BrkSys.BrkFunSt.HBCActv, _x.BrkSys.BrkFunSt.ARPCfgSts, _x.BrkSys.BrkFunSt.CDPActv, _x.BrkSys.BrkFunSt.CDPAvail, _x.BrkSys.BrkFunSt.ARPActv, _x.BrkSys.BrkFunSt.DTCAvl, _x.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.BrkSys.ExtBrkActv, _x.BrkSys.ExtBrkCp, _x.BrkSys.ExtBrkSts, _x.BrkSys.MbRegenFrntAxleTar, _x.BrkSys.MbRegenFrntAxleTarQ, _x.BrkSys.MbRegenReAxleTar, _x.BrkSys.MbRegenReAxleTarQ, _x.BrkSys.StabyMagin, _x.BrkSys.StabyMaginQ, _x.BrkSys.BrkFldWarnReq, _x.BrkSys.BrkPadWearWarnReq, _x.BrkSys.FCC1_StandstillStatus, _x.PT.AccrPedal.EfcPosnVld, _x.PT.AccrPedal.EfcPosn, _x.PT.AccrPedal.ActPosnVld, _x.PT.AccrPedal.ActPosn, _x.PT.AccrPedal.PedlOvrd, _x.PT.AccrPedal.timestamp_ptp_ns, _x.PT.Gear.SlctrPosnVld, _x.PT.Gear.ActGearVld, _x.PT.Gear.TrgtGearVld, _x.PT.Gear.SlctrPosn, _x.PT.Gear.ActGear, _x.PT.Gear.TrgtGear, _x.PT.Gear.timestamp_ptp_ns,) = _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().unpack(str[start:end])
      self.BrkSys.BrkPdl.BrkpedlOvrd = bool(self.BrkSys.BrkPdl.BrkpedlOvrd)
      self.BrkSys.PrkBrk.CDPReq = bool(self.BrkSys.PrkBrk.CDPReq)
      self.BrkSys.BrkFunSt.BDWActv = bool(self.BrkSys.BrkFunSt.BDWActv)
      self.BrkSys.BrkFunSt.ABAAvl = bool(self.BrkSys.BrkFunSt.ABAAvl)
      self.BrkSys.BrkFunSt.ABAActv = bool(self.BrkSys.BrkFunSt.ABAActv)
      self.BrkSys.BrkFunSt.ABPAvl = bool(self.BrkSys.BrkFunSt.ABPAvl)
      self.BrkSys.BrkFunSt.ABPActv = bool(self.BrkSys.BrkFunSt.ABPActv)
      self.BrkSys.BrkFunSt.ABSActv = bool(self.BrkSys.BrkFunSt.ABSActv)
      self.BrkSys.BrkFunSt.DTCActv = bool(self.BrkSys.BrkFunSt.DTCActv)
      self.BrkSys.BrkFunSt.DWTActv = bool(self.BrkSys.BrkFunSt.DWTActv)
      self.BrkSys.BrkFunSt.EBAAvl = bool(self.BrkSys.BrkFunSt.EBAAvl)
      self.BrkSys.BrkFunSt.EBAActv = bool(self.BrkSys.BrkFunSt.EBAActv)
      self.BrkSys.BrkFunSt.EBDActv = bool(self.BrkSys.BrkFunSt.EBDActv)
      self.BrkSys.BrkFunSt.HBAActv = bool(self.BrkSys.BrkFunSt.HBAActv)
      self.BrkSys.BrkFunSt.HHCAvl = bool(self.BrkSys.BrkFunSt.HHCAvl)
      self.BrkSys.BrkFunSt.HHCActv = bool(self.BrkSys.BrkFunSt.HHCActv)
      self.BrkSys.BrkFunSt.TCSActv = bool(self.BrkSys.BrkFunSt.TCSActv)
      self.BrkSys.BrkFunSt.TCSDeactv = bool(self.BrkSys.BrkFunSt.TCSDeactv)
      self.BrkSys.BrkFunSt.VDCActv = bool(self.BrkSys.BrkFunSt.VDCActv)
      self.BrkSys.BrkFunSt.VDCDeactv = bool(self.BrkSys.BrkFunSt.VDCDeactv)
      self.BrkSys.BrkFunSt.EBDFailLampReq = bool(self.BrkSys.BrkFunSt.EBDFailLampReq)
      self.BrkSys.BrkFunSt.VDCTCSLampInfo = bool(self.BrkSys.BrkFunSt.VDCTCSLampInfo)
      self.BrkSys.BrkFunSt.VDCTCSFailLampReq = bool(self.BrkSys.BrkFunSt.VDCTCSFailLampReq)
      self.BrkSys.BrkFunSt.ABSFailLampReq = bool(self.BrkSys.BrkFunSt.ABSFailLampReq)
      self.BrkSys.BrkFunSt.VDCTCSOnOfflampReq = bool(self.BrkSys.BrkFunSt.VDCTCSOnOfflampReq)
      self.BrkSys.BrkFunSt.AWBActv = bool(self.BrkSys.BrkFunSt.AWBActv)
      self.BrkSys.BrkFunSt.AWBAvl = bool(self.BrkSys.BrkFunSt.AWBAvl)
      self.BrkSys.BrkFunSt.EBPActv = bool(self.BrkSys.BrkFunSt.EBPActv)
      self.BrkSys.BrkFunSt.HBCActv = bool(self.BrkSys.BrkFunSt.HBCActv)
      self.BrkSys.BrkFunSt.CDPActv = bool(self.BrkSys.BrkFunSt.CDPActv)
      self.BrkSys.BrkFunSt.CDPAvail = bool(self.BrkSys.BrkFunSt.CDPAvail)
      self.BrkSys.BrkFunSt.ARPActv = bool(self.BrkSys.BrkFunSt.ARPActv)
      self.BrkSys.BrkFunSt.DTCAvl = bool(self.BrkSys.BrkFunSt.DTCAvl)
      self.BrkSys.ExtBrkActv = bool(self.BrkSys.ExtBrkActv)
      self.PT.AccrPedal.PedlOvrd = bool(self.PT.AccrPedal.PedlOvrd)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PT.Motor = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MotorInfo()
        _x = val1
        start = end
        end += 44
        (_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts,) = _get_struct_ifififI4i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.timestamp_ptp_ns = s.unpack(str[start:end])
        self.PT.Motor.append(val1)
      _x = self
      start = end
      end += 24
      (_x.PT.VCURvsLampReq, _x.PT.VCUBrkLampReq, _x.PT.CruiseStatus, _x.PT.VCUEPBReq, _x.PT.CruiseStoredSpeed, _x.PT.VCUPtWakeupReq, _x.PT.DCChrgrPluginSts, _x.PT.ACChrgrPluginSts, _x.PT.VCU_VehHldReq, _x.PT.VCU_BrkReqEna, _x.PT.VCU_ForceFctEna, _x.PT.VCU_TarBrkFReq,) = _get_struct_2B2if6Bf().unpack(str[start:end])
      self.PT.VCURvsLampReq = bool(self.PT.VCURvsLampReq)
      self.PT.VCUBrkLampReq = bool(self.PT.VCUBrkLampReq)
      self.PT.VCUPtWakeupReq = bool(self.PT.VCUPtWakeupReq)
      self.PT.DCChrgrPluginSts = bool(self.PT.DCChrgrPluginSts)
      self.PT.ACChrgrPluginSts = bool(self.PT.ACChrgrPluginSts)
      self.PT.VCU_VehHldReq = bool(self.PT.VCU_VehHldReq)
      self.PT.VCU_BrkReqEna = bool(self.PT.VCU_BrkReqEna)
      self.PT.VCU_ForceFctEna = bool(self.PT.VCU_ForceFctEna)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Whl.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.Whl.WhlDyn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Whl.WHlTpms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlTpmsInfo()
        _x = val1
        start = end
        end += 28
        (_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts,) = _get_struct_fi2Ii2I().unpack(str[start:end])
        self.Whl.WHlTpms.append(val1)
      _x = self
      start = end
      end += 52
      (_x.Whl.WhlDyn_Timestamp, _x.Whl.timestamp_ptp_ns, _x.VehDyn.VehSpd.VehSpdSts, _x.VehDyn.VehSpd.VehMovgDir, _x.VehDyn.VehSpd.VehSpdkph, _x.VehDyn.VehSpd.VehSpdmps, _x.VehDyn.VehSpd.VehFiltLngAcc, _x.VehDyn.VehSpd.VehSpdASILDSts, _x.VehDyn.VehSpd.VehSpdASILD, _x.VehDyn.VehSpd.VehDispSpd, _x.VehDyn.VehSpd.VCUVehDispSpdSts,) = _get_struct_2Q2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehDyn.VehSpd.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 120
      (_x.VehDyn.AxAyYrsCalSts, _x.VehDyn.LgtASts, _x.VehDyn.LgtSAEAg, _x.VehDyn.LgtSAEAmpss, _x.VehDyn.LatASts, _x.VehDyn.LatSAEAg, _x.VehDyn.LatSAEAmpss, _x.VehDyn.YawRateSts, _x.VehDyn.YawRateSAERps, _x.VehDyn.YawRateSAEDps, _x.VehDyn.VehOdom, _x.VehDyn.YawRate_Timestamp, _x.VehDyn.timestamp_ptp_ns, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts,) = _get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.VLCAvl = bool(self.VehCtrlIf.LngCtrlIf.VLCAvl)
      self.VehCtrlIf.LngCtrlIf.VLCActv = bool(self.VehCtrlIf.LngCtrlIf.VLCActv)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgActv = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgActv)
      self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq)
      self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 29
      (_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_fBi4B2Q().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.VehCtrlIf.LatCtrlIf.HIAvl = bool(self.VehCtrlIf.LatCtrlIf.HIAvl)
      self.VehCtrlIf.LatCtrlIf.TOIAvl = bool(self.VehCtrlIf.LatCtrlIf.TOIAvl)
      self.VehCtrlIf.LatCtrlIf.DAIAvl = bool(self.VehCtrlIf.LatCtrlIf.DAIAvl)
      self.VehCtrlIf.LatCtrlIf.PAIAvl = bool(self.VehCtrlIf.LatCtrlIf.PAIAvl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().pack(_x.StrSys.StrAgFailSts, _x.StrSys.StrAgCalSts, _x.StrSys.StrWhlAgSAE, _x.StrSys.StrWhlAgSpdSAE, _x.StrSys.PnnAgVld, _x.StrSys.PnnAgSAE, _x.StrSys.PnnAgOffsetSAE, _x.StrSys.EstRackFrcVld, _x.StrSys.EstRackFrcSae, _x.StrSys.MtrTqVld, _x.StrSys.MtrTqSAE, _x.StrSys.TorsBarTqVld, _x.StrSys.TorsBarTqSAE, _x.StrSys.EPSSts, _x.StrSys.DrvngMod, _x.StrSys.RampSts, _x.StrSys.ACIMtrTqVld, _x.StrSys.ACIMtrTqSAE, _x.StrSys.Temperature, _x.StrSys.SupInfo, _x.StrSys.VMCHVIAvl, _x.StrSys.EPSReqTyp, _x.StrSys.BCUCTIAvl, _x.StrSys.WarnLampReq, _x.StrSys.SteerWhlAgAndSpdValid, _x.StrSys.SWCFailSts, _x.StrSys.SteerColTiltCtrlSts, _x.StrSys.SteerColTiltPos, _x.StrSys.SteerColTeleCtrlSts, _x.StrSys.SteerColTelescopePos, _x.StrSys.HODErrSts, _x.StrSys.HOSts, _x.StrSys.OverRideDetn))
      length = len(self.StrSys.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.StrSys.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().pack(_x.BrkSys.BrkPdl.TrvlCalSts, _x.BrkSys.BrkPdl.Trvl, _x.BrkSys.BrkPdl.BrkPedlSts, _x.BrkSys.BrkPdl.BrkpedlOvrd, _x.BrkSys.BrkPdl.timestamp_ptp_ns, _x.BrkSys.BrkPrsInfo.BrkPrsVld, _x.BrkSys.BrkPrsInfo.BrkPrs, _x.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.BrkSys.PrkBrk.EPBSwtSts, _x.BrkSys.PrkBrk.EPBSts, _x.BrkSys.PrkBrk.EPBMod, _x.BrkSys.PrkBrk.CDPReq, _x.BrkSys.PrkBrk.timestamp_ptp_ns, _x.BrkSys.BrkOverHeat, _x.BrkSys.BrkHAZReq, _x.BrkSys.BCUBrkLiReq, _x.BrkSys.StstSts, _x.BrkSys.NoBrkF, _x.BrkSys.SupInfo, _x.BrkSys.BrkFldLvl, _x.BrkSys.BrkPadWearSts, _x.BrkSys.BrkFunSt.BDWActv, _x.BrkSys.BrkFunSt.ABAAvl, _x.BrkSys.BrkFunSt.ABAActv, _x.BrkSys.BrkFunSt.ABPAvl, _x.BrkSys.BrkFunSt.ABPActv, _x.BrkSys.BrkFunSt.ABSActv, _x.BrkSys.BrkFunSt.AVHSts, _x.BrkSys.BrkFunSt.DTCActv, _x.BrkSys.BrkFunSt.DWTActv, _x.BrkSys.BrkFunSt.EBAAvl, _x.BrkSys.BrkFunSt.EBAActv, _x.BrkSys.BrkFunSt.EBDActv, _x.BrkSys.BrkFunSt.HBAActv, _x.BrkSys.BrkFunSt.HDCSts, _x.BrkSys.BrkFunSt.HHCAvl, _x.BrkSys.BrkFunSt.HHCActv, _x.BrkSys.BrkFunSt.TCSActv, _x.BrkSys.BrkFunSt.TCSDeactv, _x.BrkSys.BrkFunSt.VDCActv, _x.BrkSys.BrkFunSt.VDCDeactv, _x.BrkSys.BrkFunSt.EBDFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.BrkSys.BrkFunSt.ABSFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkSys.BrkFunSt.AWBActv, _x.BrkSys.BrkFunSt.AWBAvl, _x.BrkSys.BrkFunSt.EBPActv, _x.BrkSys.BrkFunSt.HBCActv, _x.BrkSys.BrkFunSt.ARPCfgSts, _x.BrkSys.BrkFunSt.CDPActv, _x.BrkSys.BrkFunSt.CDPAvail, _x.BrkSys.BrkFunSt.ARPActv, _x.BrkSys.BrkFunSt.DTCAvl, _x.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.BrkSys.ExtBrkActv, _x.BrkSys.ExtBrkCp, _x.BrkSys.ExtBrkSts, _x.BrkSys.MbRegenFrntAxleTar, _x.BrkSys.MbRegenFrntAxleTarQ, _x.BrkSys.MbRegenReAxleTar, _x.BrkSys.MbRegenReAxleTarQ, _x.BrkSys.StabyMagin, _x.BrkSys.StabyMaginQ, _x.BrkSys.BrkFldWarnReq, _x.BrkSys.BrkPadWearWarnReq, _x.BrkSys.FCC1_StandstillStatus, _x.PT.AccrPedal.EfcPosnVld, _x.PT.AccrPedal.EfcPosn, _x.PT.AccrPedal.ActPosnVld, _x.PT.AccrPedal.ActPosn, _x.PT.AccrPedal.PedlOvrd, _x.PT.AccrPedal.timestamp_ptp_ns, _x.PT.Gear.SlctrPosnVld, _x.PT.Gear.ActGearVld, _x.PT.Gear.TrgtGearVld, _x.PT.Gear.SlctrPosn, _x.PT.Gear.ActGear, _x.PT.Gear.TrgtGear, _x.PT.Gear.timestamp_ptp_ns))
      length = len(self.PT.Motor)
      buff.write(_struct_I.pack(length))
      for val1 in self.PT.Motor:
        _x = val1
        buff.write(_get_struct_ifififI4i().pack(_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts))
        length = len(val1.timestamp_ptp_ns)
        buff.write(_struct_I.pack(length))
        pattern = '<%sQ'%length
        buff.write(val1.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_2B2if6Bf().pack(_x.PT.VCURvsLampReq, _x.PT.VCUBrkLampReq, _x.PT.CruiseStatus, _x.PT.VCUEPBReq, _x.PT.CruiseStoredSpeed, _x.PT.VCUPtWakeupReq, _x.PT.DCChrgrPluginSts, _x.PT.ACChrgrPluginSts, _x.PT.VCU_VehHldReq, _x.PT.VCU_BrkReqEna, _x.PT.VCU_ForceFctEna, _x.PT.VCU_TarBrkFReq))
      length = len(self.Whl.WhlDyn)
      buff.write(_struct_I.pack(length))
      for val1 in self.Whl.WhlDyn:
        _x = val1
        buff.write(_get_struct_2ifiI2Q().pack(_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns))
      length = len(self.Whl.WHlTpms)
      buff.write(_struct_I.pack(length))
      for val1 in self.Whl.WHlTpms:
        _x = val1
        buff.write(_get_struct_fi2Ii2I().pack(_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts))
      _x = self
      buff.write(_get_struct_2Q2i3fi2fi().pack(_x.Whl.WhlDyn_Timestamp, _x.Whl.timestamp_ptp_ns, _x.VehDyn.VehSpd.VehSpdSts, _x.VehDyn.VehSpd.VehMovgDir, _x.VehDyn.VehSpd.VehSpdkph, _x.VehDyn.VehSpd.VehSpdmps, _x.VehDyn.VehSpd.VehFiltLngAcc, _x.VehDyn.VehSpd.VehSpdASILDSts, _x.VehDyn.VehSpd.VehSpdASILD, _x.VehDyn.VehSpd.VehDispSpd, _x.VehDyn.VehSpd.VCUVehDispSpdSts))
      length = len(self.VehDyn.VehSpd.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.VehDyn.VehSpd.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.VehDyn.AxAyYrsCalSts, _x.VehDyn.LgtASts, _x.VehDyn.LgtSAEAg, _x.VehDyn.LgtSAEAmpss, _x.VehDyn.LatASts, _x.VehDyn.LatSAEAg, _x.VehDyn.LatSAEAmpss, _x.VehDyn.YawRateSts, _x.VehDyn.YawRateSAERps, _x.VehDyn.YawRateSAEDps, _x.VehDyn.VehOdom, _x.VehDyn.YawRate_Timestamp, _x.VehDyn.timestamp_ptp_ns, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts))
      length = len(self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_fBi4B2Q().pack(_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.StrSys is None:
        self.StrSys = rospy_message_converter.msg.StrSysInfo()
      if self.BrkSys is None:
        self.BrkSys = rospy_message_converter.msg.BrkSysInfo()
      if self.PT is None:
        self.PT = rospy_message_converter.msg.PtInfo()
      if self.Whl is None:
        self.Whl = rospy_message_converter.msg.WhlInfos()
      if self.VehDyn is None:
        self.VehDyn = rospy_message_converter.msg.VehDynInfo()
      if self.VehCtrlIf is None:
        self.VehCtrlIf = rospy_message_converter.msg.VehCtrlIfInfo()
      end = 0
      _x = self
      start = end
      end += 120
      (_x.StrSys.StrAgFailSts, _x.StrSys.StrAgCalSts, _x.StrSys.StrWhlAgSAE, _x.StrSys.StrWhlAgSpdSAE, _x.StrSys.PnnAgVld, _x.StrSys.PnnAgSAE, _x.StrSys.PnnAgOffsetSAE, _x.StrSys.EstRackFrcVld, _x.StrSys.EstRackFrcSae, _x.StrSys.MtrTqVld, _x.StrSys.MtrTqSAE, _x.StrSys.TorsBarTqVld, _x.StrSys.TorsBarTqSAE, _x.StrSys.EPSSts, _x.StrSys.DrvngMod, _x.StrSys.RampSts, _x.StrSys.ACIMtrTqVld, _x.StrSys.ACIMtrTqSAE, _x.StrSys.Temperature, _x.StrSys.SupInfo, _x.StrSys.VMCHVIAvl, _x.StrSys.EPSReqTyp, _x.StrSys.BCUCTIAvl, _x.StrSys.WarnLampReq, _x.StrSys.SteerWhlAgAndSpdValid, _x.StrSys.SWCFailSts, _x.StrSys.SteerColTiltCtrlSts, _x.StrSys.SteerColTiltPos, _x.StrSys.SteerColTeleCtrlSts, _x.StrSys.SteerColTelescopePos, _x.StrSys.HODErrSts, _x.StrSys.HOSts, _x.StrSys.OverRideDetn,) = _get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i().unpack(str[start:end])
      self.StrSys.RampSts = bool(self.StrSys.RampSts)
      self.StrSys.BCUCTIAvl = bool(self.StrSys.BCUCTIAvl)
      self.StrSys.SteerWhlAgAndSpdValid = bool(self.StrSys.SteerWhlAgAndSpdValid)
      self.StrSys.HODErrSts = bool(self.StrSys.HODErrSts)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.StrSys.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 251
      (_x.BrkSys.BrkPdl.TrvlCalSts, _x.BrkSys.BrkPdl.Trvl, _x.BrkSys.BrkPdl.BrkPedlSts, _x.BrkSys.BrkPdl.BrkpedlOvrd, _x.BrkSys.BrkPdl.timestamp_ptp_ns, _x.BrkSys.BrkPrsInfo.BrkPrsVld, _x.BrkSys.BrkPrsInfo.BrkPrs, _x.BrkSys.BrkPrsInfo.BrkPrsOffsetVld, _x.BrkSys.BrkPrsInfo.BrkPrsOffset, _x.BrkSys.BrkPrsInfo.timestamp_ptp_ns, _x.BrkSys.PrkBrk.EPBSwtSts, _x.BrkSys.PrkBrk.EPBSts, _x.BrkSys.PrkBrk.EPBMod, _x.BrkSys.PrkBrk.CDPReq, _x.BrkSys.PrkBrk.timestamp_ptp_ns, _x.BrkSys.BrkOverHeat, _x.BrkSys.BrkHAZReq, _x.BrkSys.BCUBrkLiReq, _x.BrkSys.StstSts, _x.BrkSys.NoBrkF, _x.BrkSys.SupInfo, _x.BrkSys.BrkFldLvl, _x.BrkSys.BrkPadWearSts, _x.BrkSys.BrkFunSt.BDWActv, _x.BrkSys.BrkFunSt.ABAAvl, _x.BrkSys.BrkFunSt.ABAActv, _x.BrkSys.BrkFunSt.ABPAvl, _x.BrkSys.BrkFunSt.ABPActv, _x.BrkSys.BrkFunSt.ABSActv, _x.BrkSys.BrkFunSt.AVHSts, _x.BrkSys.BrkFunSt.DTCActv, _x.BrkSys.BrkFunSt.DWTActv, _x.BrkSys.BrkFunSt.EBAAvl, _x.BrkSys.BrkFunSt.EBAActv, _x.BrkSys.BrkFunSt.EBDActv, _x.BrkSys.BrkFunSt.HBAActv, _x.BrkSys.BrkFunSt.HDCSts, _x.BrkSys.BrkFunSt.HHCAvl, _x.BrkSys.BrkFunSt.HHCActv, _x.BrkSys.BrkFunSt.TCSActv, _x.BrkSys.BrkFunSt.TCSDeactv, _x.BrkSys.BrkFunSt.VDCActv, _x.BrkSys.BrkFunSt.VDCDeactv, _x.BrkSys.BrkFunSt.EBDFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSLampInfo, _x.BrkSys.BrkFunSt.VDCTCSFailLampReq, _x.BrkSys.BrkFunSt.ABSFailLampReq, _x.BrkSys.BrkFunSt.VDCTCSOnOfflampReq, _x.BrkSys.BrkFunSt.AWBActv, _x.BrkSys.BrkFunSt.AWBAvl, _x.BrkSys.BrkFunSt.EBPActv, _x.BrkSys.BrkFunSt.HBCActv, _x.BrkSys.BrkFunSt.ARPCfgSts, _x.BrkSys.BrkFunSt.CDPActv, _x.BrkSys.BrkFunSt.CDPAvail, _x.BrkSys.BrkFunSt.ARPActv, _x.BrkSys.BrkFunSt.DTCAvl, _x.BrkSys.BrkFunSt.timestamp_ptp_ns, _x.BrkSys.ExtBrkActv, _x.BrkSys.ExtBrkCp, _x.BrkSys.ExtBrkSts, _x.BrkSys.MbRegenFrntAxleTar, _x.BrkSys.MbRegenFrntAxleTarQ, _x.BrkSys.MbRegenReAxleTar, _x.BrkSys.MbRegenReAxleTarQ, _x.BrkSys.StabyMagin, _x.BrkSys.StabyMaginQ, _x.BrkSys.BrkFldWarnReq, _x.BrkSys.BrkPadWearWarnReq, _x.BrkSys.FCC1_StandstillStatus, _x.PT.AccrPedal.EfcPosnVld, _x.PT.AccrPedal.EfcPosn, _x.PT.AccrPedal.ActPosnVld, _x.PT.AccrPedal.ActPosn, _x.PT.AccrPedal.PedlOvrd, _x.PT.AccrPedal.timestamp_ptp_ns, _x.PT.Gear.SlctrPosnVld, _x.PT.Gear.ActGearVld, _x.PT.Gear.TrgtGearVld, _x.PT.Gear.SlctrPosn, _x.PT.Gear.ActGear, _x.PT.Gear.TrgtGear, _x.PT.Gear.timestamp_ptp_ns,) = _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ().unpack(str[start:end])
      self.BrkSys.BrkPdl.BrkpedlOvrd = bool(self.BrkSys.BrkPdl.BrkpedlOvrd)
      self.BrkSys.PrkBrk.CDPReq = bool(self.BrkSys.PrkBrk.CDPReq)
      self.BrkSys.BrkFunSt.BDWActv = bool(self.BrkSys.BrkFunSt.BDWActv)
      self.BrkSys.BrkFunSt.ABAAvl = bool(self.BrkSys.BrkFunSt.ABAAvl)
      self.BrkSys.BrkFunSt.ABAActv = bool(self.BrkSys.BrkFunSt.ABAActv)
      self.BrkSys.BrkFunSt.ABPAvl = bool(self.BrkSys.BrkFunSt.ABPAvl)
      self.BrkSys.BrkFunSt.ABPActv = bool(self.BrkSys.BrkFunSt.ABPActv)
      self.BrkSys.BrkFunSt.ABSActv = bool(self.BrkSys.BrkFunSt.ABSActv)
      self.BrkSys.BrkFunSt.DTCActv = bool(self.BrkSys.BrkFunSt.DTCActv)
      self.BrkSys.BrkFunSt.DWTActv = bool(self.BrkSys.BrkFunSt.DWTActv)
      self.BrkSys.BrkFunSt.EBAAvl = bool(self.BrkSys.BrkFunSt.EBAAvl)
      self.BrkSys.BrkFunSt.EBAActv = bool(self.BrkSys.BrkFunSt.EBAActv)
      self.BrkSys.BrkFunSt.EBDActv = bool(self.BrkSys.BrkFunSt.EBDActv)
      self.BrkSys.BrkFunSt.HBAActv = bool(self.BrkSys.BrkFunSt.HBAActv)
      self.BrkSys.BrkFunSt.HHCAvl = bool(self.BrkSys.BrkFunSt.HHCAvl)
      self.BrkSys.BrkFunSt.HHCActv = bool(self.BrkSys.BrkFunSt.HHCActv)
      self.BrkSys.BrkFunSt.TCSActv = bool(self.BrkSys.BrkFunSt.TCSActv)
      self.BrkSys.BrkFunSt.TCSDeactv = bool(self.BrkSys.BrkFunSt.TCSDeactv)
      self.BrkSys.BrkFunSt.VDCActv = bool(self.BrkSys.BrkFunSt.VDCActv)
      self.BrkSys.BrkFunSt.VDCDeactv = bool(self.BrkSys.BrkFunSt.VDCDeactv)
      self.BrkSys.BrkFunSt.EBDFailLampReq = bool(self.BrkSys.BrkFunSt.EBDFailLampReq)
      self.BrkSys.BrkFunSt.VDCTCSLampInfo = bool(self.BrkSys.BrkFunSt.VDCTCSLampInfo)
      self.BrkSys.BrkFunSt.VDCTCSFailLampReq = bool(self.BrkSys.BrkFunSt.VDCTCSFailLampReq)
      self.BrkSys.BrkFunSt.ABSFailLampReq = bool(self.BrkSys.BrkFunSt.ABSFailLampReq)
      self.BrkSys.BrkFunSt.VDCTCSOnOfflampReq = bool(self.BrkSys.BrkFunSt.VDCTCSOnOfflampReq)
      self.BrkSys.BrkFunSt.AWBActv = bool(self.BrkSys.BrkFunSt.AWBActv)
      self.BrkSys.BrkFunSt.AWBAvl = bool(self.BrkSys.BrkFunSt.AWBAvl)
      self.BrkSys.BrkFunSt.EBPActv = bool(self.BrkSys.BrkFunSt.EBPActv)
      self.BrkSys.BrkFunSt.HBCActv = bool(self.BrkSys.BrkFunSt.HBCActv)
      self.BrkSys.BrkFunSt.CDPActv = bool(self.BrkSys.BrkFunSt.CDPActv)
      self.BrkSys.BrkFunSt.CDPAvail = bool(self.BrkSys.BrkFunSt.CDPAvail)
      self.BrkSys.BrkFunSt.ARPActv = bool(self.BrkSys.BrkFunSt.ARPActv)
      self.BrkSys.BrkFunSt.DTCAvl = bool(self.BrkSys.BrkFunSt.DTCAvl)
      self.BrkSys.ExtBrkActv = bool(self.BrkSys.ExtBrkActv)
      self.PT.AccrPedal.PedlOvrd = bool(self.PT.AccrPedal.PedlOvrd)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PT.Motor = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MotorInfo()
        _x = val1
        start = end
        end += 44
        (_x.IntdMotTqVld, _x.IntdMotTq, _x.ActMotTqVld, _x.ActMotTq, _x.MotSpdVld, _x.MotSpd, _x.SpdLimForFlt, _x.DampSts, _x.FailrSts, _x.HeatCap, _x.MotHoldSts,) = _get_struct_ifififI4i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sQ'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
        self.PT.Motor.append(val1)
      _x = self
      start = end
      end += 24
      (_x.PT.VCURvsLampReq, _x.PT.VCUBrkLampReq, _x.PT.CruiseStatus, _x.PT.VCUEPBReq, _x.PT.CruiseStoredSpeed, _x.PT.VCUPtWakeupReq, _x.PT.DCChrgrPluginSts, _x.PT.ACChrgrPluginSts, _x.PT.VCU_VehHldReq, _x.PT.VCU_BrkReqEna, _x.PT.VCU_ForceFctEna, _x.PT.VCU_TarBrkFReq,) = _get_struct_2B2if6Bf().unpack(str[start:end])
      self.PT.VCURvsLampReq = bool(self.PT.VCURvsLampReq)
      self.PT.VCUBrkLampReq = bool(self.PT.VCUBrkLampReq)
      self.PT.VCUPtWakeupReq = bool(self.PT.VCUPtWakeupReq)
      self.PT.DCChrgrPluginSts = bool(self.PT.DCChrgrPluginSts)
      self.PT.ACChrgrPluginSts = bool(self.PT.ACChrgrPluginSts)
      self.PT.VCU_VehHldReq = bool(self.PT.VCU_VehHldReq)
      self.PT.VCU_BrkReqEna = bool(self.PT.VCU_BrkReqEna)
      self.PT.VCU_ForceFctEna = bool(self.PT.VCU_ForceFctEna)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Whl.WhlDyn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlDynInfo()
        _x = val1
        start = end
        end += 36
        (_x.WhlSpdSts, _x.WhlSpdMovgDir, _x.WhlSpd, _x.WhlPlsCntrVld, _x.WhlPlsCntr, _x.WhlSpd_Timestamp, _x.timestamp_ptp_ns,) = _get_struct_2ifiI2Q().unpack(str[start:end])
        self.Whl.WhlDyn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Whl.WHlTpms = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.WhlTpmsInfo()
        _x = val1
        start = end
        end += 28
        (_x.Press, _x.Temp, _x.SnsrFailSts, _x.BatSts, _x.PressSts, _x.DeltaPressSts, _x.TempSts,) = _get_struct_fi2Ii2I().unpack(str[start:end])
        self.Whl.WHlTpms.append(val1)
      _x = self
      start = end
      end += 52
      (_x.Whl.WhlDyn_Timestamp, _x.Whl.timestamp_ptp_ns, _x.VehDyn.VehSpd.VehSpdSts, _x.VehDyn.VehSpd.VehMovgDir, _x.VehDyn.VehSpd.VehSpdkph, _x.VehDyn.VehSpd.VehSpdmps, _x.VehDyn.VehSpd.VehFiltLngAcc, _x.VehDyn.VehSpd.VehSpdASILDSts, _x.VehDyn.VehSpd.VehSpdASILD, _x.VehDyn.VehSpd.VehDispSpd, _x.VehDyn.VehSpd.VCUVehDispSpdSts,) = _get_struct_2Q2i3fi2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehDyn.VehSpd.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 120
      (_x.VehDyn.AxAyYrsCalSts, _x.VehDyn.LgtASts, _x.VehDyn.LgtSAEAg, _x.VehDyn.LgtSAEAmpss, _x.VehDyn.LatASts, _x.VehDyn.LatSAEAg, _x.VehDyn.LatSAEAmpss, _x.VehDyn.YawRateSts, _x.VehDyn.YawRateSAERps, _x.VehDyn.YawRateSAEDps, _x.VehDyn.VehOdom, _x.VehDyn.YawRate_Timestamp, _x.VehDyn.timestamp_ptp_ns, _x.VehCtrlIf.LngCtrlIf.VLCAvl, _x.VehCtrlIf.LngCtrlIf.VLCActv, _x.VehCtrlIf.LngCtrlIf.VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.LLCFctSt, _x.VehCtrlIf.LngCtrlIf.LLCIntrrptErrTyp, _x.VehCtrlIf.LngCtrlIf.AutoBrkgAvl, _x.VehCtrlIf.LngCtrlIf.AutoBrkgActv, _x.VehCtrlIf.LngCtrlIf.ADTSts, _x.VehCtrlIf.LngCtrlIf.HldLampReq, _x.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna, _x.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna, _x.VehCtrlIf.LngCtrlIf.FCC1_TarBrkFReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq, _x.VehCtrlIf.LngCtrlIf.FCC1_VLCActv, _x.VehCtrlIf.LngCtrlIf.RVMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.RVMCLgtSts, _x.VehCtrlIf.LngCtrlIf.VCUCruiseCtrlMod, _x.VehCtrlIf.LngCtrlIf.VMCBrkOvrd, _x.VehCtrlIf.LngCtrlIf.VMCLgtAccCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtDecCp, _x.VehCtrlIf.LngCtrlIf.VMCLgtSts,) = _get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.VLCAvl = bool(self.VehCtrlIf.LngCtrlIf.VLCAvl)
      self.VehCtrlIf.LngCtrlIf.VLCActv = bool(self.VehCtrlIf.LngCtrlIf.VLCActv)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgAvl)
      self.VehCtrlIf.LngCtrlIf.AutoBrkgActv = bool(self.VehCtrlIf.LngCtrlIf.AutoBrkgActv)
      self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_ForceFctEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna = bool(self.VehCtrlIf.LngCtrlIf.FCC1_BrkReqEna)
      self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VehHldReq)
      self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.VehCtrlIf.LngCtrlIf.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 29
      (_x.VehCtrlIf.LngCtrlIf.FCC1_VLCTarDecel, _x.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd, _x.VehCtrlIf.LatCtrlIf.ActvExtIf, _x.VehCtrlIf.LatCtrlIf.HIAvl, _x.VehCtrlIf.LatCtrlIf.TOIAvl, _x.VehCtrlIf.LatCtrlIf.DAIAvl, _x.VehCtrlIf.LatCtrlIf.PAIAvl, _x.VehCtrlIf.LatCtrlIf.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_fBi4B2Q().unpack(str[start:end])
      self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd = bool(self.VehCtrlIf.LngCtrlIf.FCC1_VMCBrkOvrd)
      self.VehCtrlIf.LatCtrlIf.HIAvl = bool(self.VehCtrlIf.LatCtrlIf.HIAvl)
      self.VehCtrlIf.LatCtrlIf.TOIAvl = bool(self.VehCtrlIf.LatCtrlIf.TOIAvl)
      self.VehCtrlIf.LatCtrlIf.DAIAvl = bool(self.VehCtrlIf.LatCtrlIf.DAIAvl)
      self.VehCtrlIf.LatCtrlIf.PAIAvl = bool(self.VehCtrlIf.LatCtrlIf.PAIAvl)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2if6Bf = None
def _get_struct_2B2if6Bf():
    global _struct_2B2if6Bf
    if _struct_2B2if6Bf is None:
        _struct_2B2if6Bf = struct.Struct("<2B2if6Bf")
    return _struct_2B2if6Bf
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2Q2i3fi2fi = None
def _get_struct_2Q2i3fi2fi():
    global _struct_2Q2i3fi2fi
    if _struct_2Q2i3fi2fi is None:
        _struct_2Q2i3fi2fi = struct.Struct("<2Q2i3fi2fi")
    return _struct_2Q2i3fi2fi
_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI = None
def _get_struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI():
    global _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI
    if _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI is None:
        _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI = struct.Struct("<2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI")
    return _struct_2i2fi2fi3f2Q2Bf2i2B2i2Bf2BfI2i2fI
_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i = None
def _get_struct_2i2fi2fififif2iBif4IBiB2iIiIB2i():
    global _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i
    if _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i is None:
        _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i = struct.Struct("<2i2fi2fififif2iBif4IBiB2iIiIB2i")
    return _struct_2i2fi2fififif2iBif4IBiB2iIiIB2i
_struct_2ifiI2Q = None
def _get_struct_2ifiI2Q():
    global _struct_2ifiI2Q
    if _struct_2ifiI2Q is None:
        _struct_2ifiI2Q = struct.Struct("<2ifiI2Q")
    return _struct_2ifiI2Q
_struct_fBi4B2Q = None
def _get_struct_fBi4B2Q():
    global _struct_fBi4B2Q
    if _struct_fBi4B2Q is None:
        _struct_fBi4B2Q = struct.Struct("<fBi4B2Q")
    return _struct_fBi4B2Q
_struct_fi2Ii2I = None
def _get_struct_fi2Ii2I():
    global _struct_fi2Ii2I
    if _struct_fi2Ii2I is None:
        _struct_fi2Ii2I = struct.Struct("<fi2Ii2I")
    return _struct_fi2Ii2I
_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ = None
def _get_struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ():
    global _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ
    if _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ is None:
        _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ = struct.Struct("<ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ")
    return _struct_ifiBQififQ3iBQ3iI4i6Bi6Bi15Bi4BQBfIfIf3I2iIififBQ6iQ
_struct_ifififI4i = None
def _get_struct_ifififI4i():
    global _struct_ifififI4i
    if _struct_ifififI4i is None:
        _struct_ifififI4i = struct.Struct("<ifififI4i")
    return _struct_ifififI4i

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AdasMapPathShape.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AdasMapPathShape(genpy.Message):
  _md5sum = "fde637b4eeeda5078b3b7dae74f82c99"
  _type = "rospy_message_converter/AdasMapPathShape"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 path_idx
bool is_main_path
AdasMapShapePoint[] shape_points_raw
AdasMapShapePoint[] shape_points_inter

================================================================================
MSG: rospy_message_converter/AdasMapShapePoint
uint64 offset
uint64 index
uint64 path_idx
bool is_control_point
AdasMapPoint2d shape_point

================================================================================
MSG: rospy_message_converter/AdasMapPoint2d
float64 longitude
float64 latitude
float64 utm_x
float64 utm_y
"""
  __slots__ = ['path_idx','is_main_path','shape_points_raw','shape_points_inter']
  _slot_types = ['uint64','bool','rospy_message_converter/AdasMapShapePoint[]','rospy_message_converter/AdasMapShapePoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_idx,is_main_path,shape_points_raw,shape_points_inter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdasMapPathShape, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path_idx is None:
        self.path_idx = 0
      if self.is_main_path is None:
        self.is_main_path = False
      if self.shape_points_raw is None:
        self.shape_points_raw = []
      if self.shape_points_inter is None:
        self.shape_points_inter = []
    else:
      self.path_idx = 0
      self.is_main_path = False
      self.shape_points_raw = []
      self.shape_points_inter = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QB().pack(_x.path_idx, _x.is_main_path))
      length = len(self.shape_points_raw)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_points_raw:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v1 = val1.shape_point
        _x = _v1
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.shape_points_inter)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_points_inter:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v2 = val1.shape_point
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.shape_points_raw is None:
        self.shape_points_raw = None
      if self.shape_points_inter is None:
        self.shape_points_inter = None
      end = 0
      _x = self
      start = end
      end += 9
      (_x.path_idx, _x.is_main_path,) = _get_struct_QB().unpack(str[start:end])
      self.is_main_path = bool(self.is_main_path)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_points_raw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v3 = val1.shape_point
        _x = _v3
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.shape_points_raw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_points_inter = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v4 = val1.shape_point
        _x = _v4
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.shape_points_inter.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QB().pack(_x.path_idx, _x.is_main_path))
      length = len(self.shape_points_raw)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_points_raw:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v5 = val1.shape_point
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
      length = len(self.shape_points_inter)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape_points_inter:
        _x = val1
        buff.write(_get_struct_3QB().pack(_x.offset, _x.index, _x.path_idx, _x.is_control_point))
        _v6 = val1.shape_point
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.longitude, _x.latitude, _x.utm_x, _x.utm_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.shape_points_raw is None:
        self.shape_points_raw = None
      if self.shape_points_inter is None:
        self.shape_points_inter = None
      end = 0
      _x = self
      start = end
      end += 9
      (_x.path_idx, _x.is_main_path,) = _get_struct_QB().unpack(str[start:end])
      self.is_main_path = bool(self.is_main_path)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_points_raw = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v7 = val1.shape_point
        _x = _v7
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.shape_points_raw.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape_points_inter = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.AdasMapShapePoint()
        _x = val1
        start = end
        end += 25
        (_x.offset, _x.index, _x.path_idx, _x.is_control_point,) = _get_struct_3QB().unpack(str[start:end])
        val1.is_control_point = bool(val1.is_control_point)
        _v8 = val1.shape_point
        _x = _v8
        start = end
        end += 32
        (_x.longitude, _x.latitude, _x.utm_x, _x.utm_y,) = _get_struct_4d().unpack(str[start:end])
        self.shape_points_inter.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3QB = None
def _get_struct_3QB():
    global _struct_3QB
    if _struct_3QB is None:
        _struct_3QB = struct.Struct("<3QB")
    return _struct_3QB
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_QB = None
def _get_struct_QB():
    global _struct_QB
    if _struct_QB is None:
        _struct_QB = struct.Struct("<QB")
    return _struct_QB

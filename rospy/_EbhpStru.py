# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EbhpStru.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EbhpStru(genpy.Message):
  _md5sum = "b5b0bb8f4bd489e51b9a0801872ea7bc"
  _type = "rospy_message_converter/EbhpStru"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EmncStru emncInfo
EtjpStru etjpInfo

================================================================================
MSG: rospy_message_converter/EmncStru
float32 maneuverProb
uint32 maneuver
float32 enterWeight
float32 exitWeight
float32 reserved

================================================================================
MSG: rospy_message_converter/EtjpStru
float32 curvature
float32 curvatureRate
float32 roc
TrajInfoStru trajCa
TrajInfoStru trajCv
float32[] reserved
float32 xEnd
float32 tEnd
Yx3CoefStru xyTrajRoc
Xt3CoefStru xtTraj
uint32 numSeg
float32[] xEndSegment
float32[] tEndSegment
Yx3CoefStru[] xyTrajSegment

================================================================================
MSG: rospy_message_converter/TrajInfoStru
float32 accel
TrajPointStru[] trajPoints
TrajPointStru endPoint
TrajPointStru validPoint
TrajPointStru stopPoint
float32[] reserved

================================================================================
MSG: rospy_message_converter/TrajPointStru
float32 x
float32 y
float32 s
float32 phi
float32 sinPhi
float32 cosPhi
float32 t
float32[] reserved

================================================================================
MSG: rospy_message_converter/Yx3CoefStru
float32 c0
float32 c1
float32 c2
float32 c3

================================================================================
MSG: rospy_message_converter/Xt3CoefStru
float32 a0
float32 a1
float32 a2
float32 a3
"""
  __slots__ = ['emncInfo','etjpInfo']
  _slot_types = ['rospy_message_converter/EmncStru','rospy_message_converter/EtjpStru']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       emncInfo,etjpInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EbhpStru, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.emncInfo is None:
        self.emncInfo = rospy_message_converter.msg.EmncStru()
      if self.etjpInfo is None:
        self.etjpInfo = rospy_message_converter.msg.EtjpStru()
    else:
      self.emncInfo = rospy_message_converter.msg.EmncStru()
      self.etjpInfo = rospy_message_converter.msg.EtjpStru()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fI7f().pack(_x.emncInfo.maneuverProb, _x.emncInfo.maneuver, _x.emncInfo.enterWeight, _x.emncInfo.exitWeight, _x.emncInfo.reserved, _x.etjpInfo.curvature, _x.etjpInfo.curvatureRate, _x.etjpInfo.roc, _x.etjpInfo.trajCa.accel))
      length = len(self.etjpInfo.trajCa.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.etjpInfo.trajCa.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCa.endPoint.x, _x.etjpInfo.trajCa.endPoint.y, _x.etjpInfo.trajCa.endPoint.s, _x.etjpInfo.trajCa.endPoint.phi, _x.etjpInfo.trajCa.endPoint.sinPhi, _x.etjpInfo.trajCa.endPoint.cosPhi, _x.etjpInfo.trajCa.endPoint.t))
      length = len(self.etjpInfo.trajCa.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCa.endPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCa.validPoint.x, _x.etjpInfo.trajCa.validPoint.y, _x.etjpInfo.trajCa.validPoint.s, _x.etjpInfo.trajCa.validPoint.phi, _x.etjpInfo.trajCa.validPoint.sinPhi, _x.etjpInfo.trajCa.validPoint.cosPhi, _x.etjpInfo.trajCa.validPoint.t))
      length = len(self.etjpInfo.trajCa.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCa.validPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCa.stopPoint.x, _x.etjpInfo.trajCa.stopPoint.y, _x.etjpInfo.trajCa.stopPoint.s, _x.etjpInfo.trajCa.stopPoint.phi, _x.etjpInfo.trajCa.stopPoint.sinPhi, _x.etjpInfo.trajCa.stopPoint.cosPhi, _x.etjpInfo.trajCa.stopPoint.t))
      length = len(self.etjpInfo.trajCa.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCa.stopPoint.reserved))
      length = len(self.etjpInfo.trajCa.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCa.reserved))
      _x = self.etjpInfo.trajCv.accel
      buff.write(_get_struct_f().pack(_x))
      length = len(self.etjpInfo.trajCv.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.etjpInfo.trajCv.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCv.endPoint.x, _x.etjpInfo.trajCv.endPoint.y, _x.etjpInfo.trajCv.endPoint.s, _x.etjpInfo.trajCv.endPoint.phi, _x.etjpInfo.trajCv.endPoint.sinPhi, _x.etjpInfo.trajCv.endPoint.cosPhi, _x.etjpInfo.trajCv.endPoint.t))
      length = len(self.etjpInfo.trajCv.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCv.endPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCv.validPoint.x, _x.etjpInfo.trajCv.validPoint.y, _x.etjpInfo.trajCv.validPoint.s, _x.etjpInfo.trajCv.validPoint.phi, _x.etjpInfo.trajCv.validPoint.sinPhi, _x.etjpInfo.trajCv.validPoint.cosPhi, _x.etjpInfo.trajCv.validPoint.t))
      length = len(self.etjpInfo.trajCv.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCv.validPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCv.stopPoint.x, _x.etjpInfo.trajCv.stopPoint.y, _x.etjpInfo.trajCv.stopPoint.s, _x.etjpInfo.trajCv.stopPoint.phi, _x.etjpInfo.trajCv.stopPoint.sinPhi, _x.etjpInfo.trajCv.stopPoint.cosPhi, _x.etjpInfo.trajCv.stopPoint.t))
      length = len(self.etjpInfo.trajCv.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCv.stopPoint.reserved))
      length = len(self.etjpInfo.trajCv.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.trajCv.reserved))
      length = len(self.etjpInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.reserved))
      _x = self
      buff.write(_get_struct_10fI().pack(_x.etjpInfo.xEnd, _x.etjpInfo.tEnd, _x.etjpInfo.xyTrajRoc.c0, _x.etjpInfo.xyTrajRoc.c1, _x.etjpInfo.xyTrajRoc.c2, _x.etjpInfo.xyTrajRoc.c3, _x.etjpInfo.xtTraj.a0, _x.etjpInfo.xtTraj.a1, _x.etjpInfo.xtTraj.a2, _x.etjpInfo.xtTraj.a3, _x.etjpInfo.numSeg))
      length = len(self.etjpInfo.xEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.xEndSegment))
      length = len(self.etjpInfo.tEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.etjpInfo.tEndSegment))
      length = len(self.etjpInfo.xyTrajSegment)
      buff.write(_struct_I.pack(length))
      for val1 in self.etjpInfo.xyTrajSegment:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.c0, _x.c1, _x.c2, _x.c3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.emncInfo is None:
        self.emncInfo = rospy_message_converter.msg.EmncStru()
      if self.etjpInfo is None:
        self.etjpInfo = rospy_message_converter.msg.EtjpStru()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.emncInfo.maneuverProb, _x.emncInfo.maneuver, _x.emncInfo.enterWeight, _x.emncInfo.exitWeight, _x.emncInfo.reserved, _x.etjpInfo.curvature, _x.etjpInfo.curvatureRate, _x.etjpInfo.roc, _x.etjpInfo.trajCa.accel,) = _get_struct_fI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.etjpInfo.trajCa.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.etjpInfo.trajCa.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCa.endPoint.x, _x.etjpInfo.trajCa.endPoint.y, _x.etjpInfo.trajCa.endPoint.s, _x.etjpInfo.trajCa.endPoint.phi, _x.etjpInfo.trajCa.endPoint.sinPhi, _x.etjpInfo.trajCa.endPoint.cosPhi, _x.etjpInfo.trajCa.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.endPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCa.validPoint.x, _x.etjpInfo.trajCa.validPoint.y, _x.etjpInfo.trajCa.validPoint.s, _x.etjpInfo.trajCa.validPoint.phi, _x.etjpInfo.trajCa.validPoint.sinPhi, _x.etjpInfo.trajCa.validPoint.cosPhi, _x.etjpInfo.trajCa.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.validPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCa.stopPoint.x, _x.etjpInfo.trajCa.stopPoint.y, _x.etjpInfo.trajCa.stopPoint.s, _x.etjpInfo.trajCa.stopPoint.phi, _x.etjpInfo.trajCa.stopPoint.sinPhi, _x.etjpInfo.trajCa.stopPoint.cosPhi, _x.etjpInfo.trajCa.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.stopPoint.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (self.etjpInfo.trajCv.accel,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.etjpInfo.trajCv.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.etjpInfo.trajCv.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCv.endPoint.x, _x.etjpInfo.trajCv.endPoint.y, _x.etjpInfo.trajCv.endPoint.s, _x.etjpInfo.trajCv.endPoint.phi, _x.etjpInfo.trajCv.endPoint.sinPhi, _x.etjpInfo.trajCv.endPoint.cosPhi, _x.etjpInfo.trajCv.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.endPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCv.validPoint.x, _x.etjpInfo.trajCv.validPoint.y, _x.etjpInfo.trajCv.validPoint.s, _x.etjpInfo.trajCv.validPoint.phi, _x.etjpInfo.trajCv.validPoint.sinPhi, _x.etjpInfo.trajCv.validPoint.cosPhi, _x.etjpInfo.trajCv.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.validPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCv.stopPoint.x, _x.etjpInfo.trajCv.stopPoint.y, _x.etjpInfo.trajCv.stopPoint.s, _x.etjpInfo.trajCv.stopPoint.phi, _x.etjpInfo.trajCv.stopPoint.sinPhi, _x.etjpInfo.trajCv.stopPoint.cosPhi, _x.etjpInfo.trajCv.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.stopPoint.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 44
      (_x.etjpInfo.xEnd, _x.etjpInfo.tEnd, _x.etjpInfo.xyTrajRoc.c0, _x.etjpInfo.xyTrajRoc.c1, _x.etjpInfo.xyTrajRoc.c2, _x.etjpInfo.xyTrajRoc.c3, _x.etjpInfo.xtTraj.a0, _x.etjpInfo.xtTraj.a1, _x.etjpInfo.xtTraj.a2, _x.etjpInfo.xtTraj.a3, _x.etjpInfo.numSeg,) = _get_struct_10fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.xEndSegment = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.tEndSegment = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.etjpInfo.xyTrajSegment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Yx3CoefStru()
        _x = val1
        start = end
        end += 16
        (_x.c0, _x.c1, _x.c2, _x.c3,) = _get_struct_4f().unpack(str[start:end])
        self.etjpInfo.xyTrajSegment.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fI7f().pack(_x.emncInfo.maneuverProb, _x.emncInfo.maneuver, _x.emncInfo.enterWeight, _x.emncInfo.exitWeight, _x.emncInfo.reserved, _x.etjpInfo.curvature, _x.etjpInfo.curvatureRate, _x.etjpInfo.roc, _x.etjpInfo.trajCa.accel))
      length = len(self.etjpInfo.trajCa.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.etjpInfo.trajCa.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCa.endPoint.x, _x.etjpInfo.trajCa.endPoint.y, _x.etjpInfo.trajCa.endPoint.s, _x.etjpInfo.trajCa.endPoint.phi, _x.etjpInfo.trajCa.endPoint.sinPhi, _x.etjpInfo.trajCa.endPoint.cosPhi, _x.etjpInfo.trajCa.endPoint.t))
      length = len(self.etjpInfo.trajCa.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCa.endPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCa.validPoint.x, _x.etjpInfo.trajCa.validPoint.y, _x.etjpInfo.trajCa.validPoint.s, _x.etjpInfo.trajCa.validPoint.phi, _x.etjpInfo.trajCa.validPoint.sinPhi, _x.etjpInfo.trajCa.validPoint.cosPhi, _x.etjpInfo.trajCa.validPoint.t))
      length = len(self.etjpInfo.trajCa.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCa.validPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCa.stopPoint.x, _x.etjpInfo.trajCa.stopPoint.y, _x.etjpInfo.trajCa.stopPoint.s, _x.etjpInfo.trajCa.stopPoint.phi, _x.etjpInfo.trajCa.stopPoint.sinPhi, _x.etjpInfo.trajCa.stopPoint.cosPhi, _x.etjpInfo.trajCa.stopPoint.t))
      length = len(self.etjpInfo.trajCa.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCa.stopPoint.reserved.tostring())
      length = len(self.etjpInfo.trajCa.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCa.reserved.tostring())
      _x = self.etjpInfo.trajCv.accel
      buff.write(_get_struct_f().pack(_x))
      length = len(self.etjpInfo.trajCv.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.etjpInfo.trajCv.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCv.endPoint.x, _x.etjpInfo.trajCv.endPoint.y, _x.etjpInfo.trajCv.endPoint.s, _x.etjpInfo.trajCv.endPoint.phi, _x.etjpInfo.trajCv.endPoint.sinPhi, _x.etjpInfo.trajCv.endPoint.cosPhi, _x.etjpInfo.trajCv.endPoint.t))
      length = len(self.etjpInfo.trajCv.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCv.endPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCv.validPoint.x, _x.etjpInfo.trajCv.validPoint.y, _x.etjpInfo.trajCv.validPoint.s, _x.etjpInfo.trajCv.validPoint.phi, _x.etjpInfo.trajCv.validPoint.sinPhi, _x.etjpInfo.trajCv.validPoint.cosPhi, _x.etjpInfo.trajCv.validPoint.t))
      length = len(self.etjpInfo.trajCv.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCv.validPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.etjpInfo.trajCv.stopPoint.x, _x.etjpInfo.trajCv.stopPoint.y, _x.etjpInfo.trajCv.stopPoint.s, _x.etjpInfo.trajCv.stopPoint.phi, _x.etjpInfo.trajCv.stopPoint.sinPhi, _x.etjpInfo.trajCv.stopPoint.cosPhi, _x.etjpInfo.trajCv.stopPoint.t))
      length = len(self.etjpInfo.trajCv.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCv.stopPoint.reserved.tostring())
      length = len(self.etjpInfo.trajCv.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.trajCv.reserved.tostring())
      length = len(self.etjpInfo.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.reserved.tostring())
      _x = self
      buff.write(_get_struct_10fI().pack(_x.etjpInfo.xEnd, _x.etjpInfo.tEnd, _x.etjpInfo.xyTrajRoc.c0, _x.etjpInfo.xyTrajRoc.c1, _x.etjpInfo.xyTrajRoc.c2, _x.etjpInfo.xyTrajRoc.c3, _x.etjpInfo.xtTraj.a0, _x.etjpInfo.xtTraj.a1, _x.etjpInfo.xtTraj.a2, _x.etjpInfo.xtTraj.a3, _x.etjpInfo.numSeg))
      length = len(self.etjpInfo.xEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.xEndSegment.tostring())
      length = len(self.etjpInfo.tEndSegment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.etjpInfo.tEndSegment.tostring())
      length = len(self.etjpInfo.xyTrajSegment)
      buff.write(_struct_I.pack(length))
      for val1 in self.etjpInfo.xyTrajSegment:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.c0, _x.c1, _x.c2, _x.c3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.emncInfo is None:
        self.emncInfo = rospy_message_converter.msg.EmncStru()
      if self.etjpInfo is None:
        self.etjpInfo = rospy_message_converter.msg.EtjpStru()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.emncInfo.maneuverProb, _x.emncInfo.maneuver, _x.emncInfo.enterWeight, _x.emncInfo.exitWeight, _x.emncInfo.reserved, _x.etjpInfo.curvature, _x.etjpInfo.curvatureRate, _x.etjpInfo.roc, _x.etjpInfo.trajCa.accel,) = _get_struct_fI7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.etjpInfo.trajCa.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.etjpInfo.trajCa.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCa.endPoint.x, _x.etjpInfo.trajCa.endPoint.y, _x.etjpInfo.trajCa.endPoint.s, _x.etjpInfo.trajCa.endPoint.phi, _x.etjpInfo.trajCa.endPoint.sinPhi, _x.etjpInfo.trajCa.endPoint.cosPhi, _x.etjpInfo.trajCa.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.endPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCa.validPoint.x, _x.etjpInfo.trajCa.validPoint.y, _x.etjpInfo.trajCa.validPoint.s, _x.etjpInfo.trajCa.validPoint.phi, _x.etjpInfo.trajCa.validPoint.sinPhi, _x.etjpInfo.trajCa.validPoint.cosPhi, _x.etjpInfo.trajCa.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.validPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCa.stopPoint.x, _x.etjpInfo.trajCa.stopPoint.y, _x.etjpInfo.trajCa.stopPoint.s, _x.etjpInfo.trajCa.stopPoint.phi, _x.etjpInfo.trajCa.stopPoint.sinPhi, _x.etjpInfo.trajCa.stopPoint.cosPhi, _x.etjpInfo.trajCa.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.stopPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCa.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.etjpInfo.trajCv.accel,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.etjpInfo.trajCv.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.etjpInfo.trajCv.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCv.endPoint.x, _x.etjpInfo.trajCv.endPoint.y, _x.etjpInfo.trajCv.endPoint.s, _x.etjpInfo.trajCv.endPoint.phi, _x.etjpInfo.trajCv.endPoint.sinPhi, _x.etjpInfo.trajCv.endPoint.cosPhi, _x.etjpInfo.trajCv.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.endPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCv.validPoint.x, _x.etjpInfo.trajCv.validPoint.y, _x.etjpInfo.trajCv.validPoint.s, _x.etjpInfo.trajCv.validPoint.phi, _x.etjpInfo.trajCv.validPoint.sinPhi, _x.etjpInfo.trajCv.validPoint.cosPhi, _x.etjpInfo.trajCv.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.validPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.etjpInfo.trajCv.stopPoint.x, _x.etjpInfo.trajCv.stopPoint.y, _x.etjpInfo.trajCv.stopPoint.s, _x.etjpInfo.trajCv.stopPoint.phi, _x.etjpInfo.trajCv.stopPoint.sinPhi, _x.etjpInfo.trajCv.stopPoint.cosPhi, _x.etjpInfo.trajCv.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.stopPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.trajCv.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 44
      (_x.etjpInfo.xEnd, _x.etjpInfo.tEnd, _x.etjpInfo.xyTrajRoc.c0, _x.etjpInfo.xyTrajRoc.c1, _x.etjpInfo.xyTrajRoc.c2, _x.etjpInfo.xyTrajRoc.c3, _x.etjpInfo.xtTraj.a0, _x.etjpInfo.xtTraj.a1, _x.etjpInfo.xtTraj.a2, _x.etjpInfo.xtTraj.a3, _x.etjpInfo.numSeg,) = _get_struct_10fI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.xEndSegment = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.etjpInfo.tEndSegment = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.etjpInfo.xyTrajSegment = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.Yx3CoefStru()
        _x = val1
        start = end
        end += 16
        (_x.c0, _x.c1, _x.c2, _x.c3,) = _get_struct_4f().unpack(str[start:end])
        self.etjpInfo.xyTrajSegment.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10fI = None
def _get_struct_10fI():
    global _struct_10fI
    if _struct_10fI is None:
        _struct_10fI = struct.Struct("<10fI")
    return _struct_10fI
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fI7f = None
def _get_struct_fI7f():
    global _struct_fI7f
    if _struct_fI7f is None:
        _struct_fI7f = struct.Struct("<fI7f")
    return _struct_fI7f

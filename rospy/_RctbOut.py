# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RctbOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RctbOut(genpy.Message):
  _md5sum = "a74fe528550d39b80dd27e411777f438"
  _type = "rospy_message_converter/RctbOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 vlc_driveoffreq
float32 vlc_maxjerka
float32 vlc_minjerka
uint32 vlc_mode
uint32 vlc_reqrctb
uint32 vlc_shutdownmodreq
float32 vlc_tara
uint32 vlc_deceltostopreq
uint32 rctbbrksts
"""
  __slots__ = ['vlc_driveoffreq','vlc_maxjerka','vlc_minjerka','vlc_mode','vlc_reqrctb','vlc_shutdownmodreq','vlc_tara','vlc_deceltostopreq','rctbbrksts']
  _slot_types = ['uint32','float32','float32','uint32','uint32','uint32','float32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vlc_driveoffreq,vlc_maxjerka,vlc_minjerka,vlc_mode,vlc_reqrctb,vlc_shutdownmodreq,vlc_tara,vlc_deceltostopreq,rctbbrksts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RctbOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vlc_driveoffreq is None:
        self.vlc_driveoffreq = 0
      if self.vlc_maxjerka is None:
        self.vlc_maxjerka = 0.
      if self.vlc_minjerka is None:
        self.vlc_minjerka = 0.
      if self.vlc_mode is None:
        self.vlc_mode = 0
      if self.vlc_reqrctb is None:
        self.vlc_reqrctb = 0
      if self.vlc_shutdownmodreq is None:
        self.vlc_shutdownmodreq = 0
      if self.vlc_tara is None:
        self.vlc_tara = 0.
      if self.vlc_deceltostopreq is None:
        self.vlc_deceltostopreq = 0
      if self.rctbbrksts is None:
        self.rctbbrksts = 0
    else:
      self.vlc_driveoffreq = 0
      self.vlc_maxjerka = 0.
      self.vlc_minjerka = 0.
      self.vlc_mode = 0
      self.vlc_reqrctb = 0
      self.vlc_shutdownmodreq = 0
      self.vlc_tara = 0.
      self.vlc_deceltostopreq = 0
      self.rctbbrksts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2f3If2I().pack(_x.vlc_driveoffreq, _x.vlc_maxjerka, _x.vlc_minjerka, _x.vlc_mode, _x.vlc_reqrctb, _x.vlc_shutdownmodreq, _x.vlc_tara, _x.vlc_deceltostopreq, _x.rctbbrksts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.vlc_driveoffreq, _x.vlc_maxjerka, _x.vlc_minjerka, _x.vlc_mode, _x.vlc_reqrctb, _x.vlc_shutdownmodreq, _x.vlc_tara, _x.vlc_deceltostopreq, _x.rctbbrksts,) = _get_struct_I2f3If2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2f3If2I().pack(_x.vlc_driveoffreq, _x.vlc_maxjerka, _x.vlc_minjerka, _x.vlc_mode, _x.vlc_reqrctb, _x.vlc_shutdownmodreq, _x.vlc_tara, _x.vlc_deceltostopreq, _x.rctbbrksts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.vlc_driveoffreq, _x.vlc_maxjerka, _x.vlc_minjerka, _x.vlc_mode, _x.vlc_reqrctb, _x.vlc_shutdownmodreq, _x.vlc_tara, _x.vlc_deceltostopreq, _x.rctbbrksts,) = _get_struct_I2f3If2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2f3If2I = None
def _get_struct_I2f3If2I():
    global _struct_I2f3If2I
    if _struct_I2f3If2I is None:
        _struct_I2f3If2I = struct.Struct("<I2f3If2I")
    return _struct_I2f3If2I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/RctbObjInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RctbObjInfo(genpy.Message):
  _md5sum = "e474f5644ea60f0c42329845b65dc386"
  _type = "rospy_message_converter/RctbObjInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 vcs_long_pos
float32 vcs_lat_pos
float32 vcs_long_rel_vel
float32 vcs_lat_rel_vel
float32 cta_ttc_long
float32 cta_ttc_lat
uint32 obj_id
"""
  __slots__ = ['vcs_long_pos','vcs_lat_pos','vcs_long_rel_vel','vcs_lat_rel_vel','cta_ttc_long','cta_ttc_lat','obj_id']
  _slot_types = ['float32','float32','float32','float32','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vcs_long_pos,vcs_lat_pos,vcs_long_rel_vel,vcs_lat_rel_vel,cta_ttc_long,cta_ttc_lat,obj_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RctbObjInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vcs_long_pos is None:
        self.vcs_long_pos = 0.
      if self.vcs_lat_pos is None:
        self.vcs_lat_pos = 0.
      if self.vcs_long_rel_vel is None:
        self.vcs_long_rel_vel = 0.
      if self.vcs_lat_rel_vel is None:
        self.vcs_lat_rel_vel = 0.
      if self.cta_ttc_long is None:
        self.cta_ttc_long = 0.
      if self.cta_ttc_lat is None:
        self.cta_ttc_lat = 0.
      if self.obj_id is None:
        self.obj_id = 0
    else:
      self.vcs_long_pos = 0.
      self.vcs_lat_pos = 0.
      self.vcs_long_rel_vel = 0.
      self.vcs_lat_rel_vel = 0.
      self.cta_ttc_long = 0.
      self.cta_ttc_lat = 0.
      self.obj_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6fI().pack(_x.vcs_long_pos, _x.vcs_lat_pos, _x.vcs_long_rel_vel, _x.vcs_lat_rel_vel, _x.cta_ttc_long, _x.cta_ttc_lat, _x.obj_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vcs_long_pos, _x.vcs_lat_pos, _x.vcs_long_rel_vel, _x.vcs_lat_rel_vel, _x.cta_ttc_long, _x.cta_ttc_lat, _x.obj_id,) = _get_struct_6fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6fI().pack(_x.vcs_long_pos, _x.vcs_lat_pos, _x.vcs_long_rel_vel, _x.vcs_lat_rel_vel, _x.cta_ttc_long, _x.cta_ttc_lat, _x.obj_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.vcs_long_pos, _x.vcs_lat_pos, _x.vcs_long_rel_vel, _x.vcs_lat_rel_vel, _x.cta_ttc_long, _x.cta_ttc_lat, _x.obj_id,) = _get_struct_6fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fI = None
def _get_struct_6fI():
    global _struct_6fI
    if _struct_6fI is None:
        _struct_6fI = struct.Struct("<6fI")
    return _struct_6fI

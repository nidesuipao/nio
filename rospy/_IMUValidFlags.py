# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/IMUValidFlags.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUValidFlags(genpy.Message):
  _md5sum = "675609bf399c3e0f60082090adb749d6"
  _type = "rospy_message_converter/IMUValidFlags"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool imu_heading
bool imu_roll
bool imu_pitch
bool imu_yaw
bool imu_quaternion_x
bool imu_quaternion_y
bool imu_quaternion_z
bool imu_quaternion_w
bool imu_roll_rate
bool imu_pitch_rate
bool imu_yaw_rate
bool imu_acceleration_x
bool imu_acceleration_y
bool imu_acceleration_z
bool imu_magnetometer_x
bool imu_magnetometer_y
bool imu_magnetometer_z
"""
  __slots__ = ['imu_heading','imu_roll','imu_pitch','imu_yaw','imu_quaternion_x','imu_quaternion_y','imu_quaternion_z','imu_quaternion_w','imu_roll_rate','imu_pitch_rate','imu_yaw_rate','imu_acceleration_x','imu_acceleration_y','imu_acceleration_z','imu_magnetometer_x','imu_magnetometer_y','imu_magnetometer_z']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imu_heading,imu_roll,imu_pitch,imu_yaw,imu_quaternion_x,imu_quaternion_y,imu_quaternion_z,imu_quaternion_w,imu_roll_rate,imu_pitch_rate,imu_yaw_rate,imu_acceleration_x,imu_acceleration_y,imu_acceleration_z,imu_magnetometer_x,imu_magnetometer_y,imu_magnetometer_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUValidFlags, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.imu_heading is None:
        self.imu_heading = False
      if self.imu_roll is None:
        self.imu_roll = False
      if self.imu_pitch is None:
        self.imu_pitch = False
      if self.imu_yaw is None:
        self.imu_yaw = False
      if self.imu_quaternion_x is None:
        self.imu_quaternion_x = False
      if self.imu_quaternion_y is None:
        self.imu_quaternion_y = False
      if self.imu_quaternion_z is None:
        self.imu_quaternion_z = False
      if self.imu_quaternion_w is None:
        self.imu_quaternion_w = False
      if self.imu_roll_rate is None:
        self.imu_roll_rate = False
      if self.imu_pitch_rate is None:
        self.imu_pitch_rate = False
      if self.imu_yaw_rate is None:
        self.imu_yaw_rate = False
      if self.imu_acceleration_x is None:
        self.imu_acceleration_x = False
      if self.imu_acceleration_y is None:
        self.imu_acceleration_y = False
      if self.imu_acceleration_z is None:
        self.imu_acceleration_z = False
      if self.imu_magnetometer_x is None:
        self.imu_magnetometer_x = False
      if self.imu_magnetometer_y is None:
        self.imu_magnetometer_y = False
      if self.imu_magnetometer_z is None:
        self.imu_magnetometer_z = False
    else:
      self.imu_heading = False
      self.imu_roll = False
      self.imu_pitch = False
      self.imu_yaw = False
      self.imu_quaternion_x = False
      self.imu_quaternion_y = False
      self.imu_quaternion_z = False
      self.imu_quaternion_w = False
      self.imu_roll_rate = False
      self.imu_pitch_rate = False
      self.imu_yaw_rate = False
      self.imu_acceleration_x = False
      self.imu_acceleration_y = False
      self.imu_acceleration_z = False
      self.imu_magnetometer_x = False
      self.imu_magnetometer_y = False
      self.imu_magnetometer_z = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17B().pack(_x.imu_heading, _x.imu_roll, _x.imu_pitch, _x.imu_yaw, _x.imu_quaternion_x, _x.imu_quaternion_y, _x.imu_quaternion_z, _x.imu_quaternion_w, _x.imu_roll_rate, _x.imu_pitch_rate, _x.imu_yaw_rate, _x.imu_acceleration_x, _x.imu_acceleration_y, _x.imu_acceleration_z, _x.imu_magnetometer_x, _x.imu_magnetometer_y, _x.imu_magnetometer_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.imu_heading, _x.imu_roll, _x.imu_pitch, _x.imu_yaw, _x.imu_quaternion_x, _x.imu_quaternion_y, _x.imu_quaternion_z, _x.imu_quaternion_w, _x.imu_roll_rate, _x.imu_pitch_rate, _x.imu_yaw_rate, _x.imu_acceleration_x, _x.imu_acceleration_y, _x.imu_acceleration_z, _x.imu_magnetometer_x, _x.imu_magnetometer_y, _x.imu_magnetometer_z,) = _get_struct_17B().unpack(str[start:end])
      self.imu_heading = bool(self.imu_heading)
      self.imu_roll = bool(self.imu_roll)
      self.imu_pitch = bool(self.imu_pitch)
      self.imu_yaw = bool(self.imu_yaw)
      self.imu_quaternion_x = bool(self.imu_quaternion_x)
      self.imu_quaternion_y = bool(self.imu_quaternion_y)
      self.imu_quaternion_z = bool(self.imu_quaternion_z)
      self.imu_quaternion_w = bool(self.imu_quaternion_w)
      self.imu_roll_rate = bool(self.imu_roll_rate)
      self.imu_pitch_rate = bool(self.imu_pitch_rate)
      self.imu_yaw_rate = bool(self.imu_yaw_rate)
      self.imu_acceleration_x = bool(self.imu_acceleration_x)
      self.imu_acceleration_y = bool(self.imu_acceleration_y)
      self.imu_acceleration_z = bool(self.imu_acceleration_z)
      self.imu_magnetometer_x = bool(self.imu_magnetometer_x)
      self.imu_magnetometer_y = bool(self.imu_magnetometer_y)
      self.imu_magnetometer_z = bool(self.imu_magnetometer_z)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17B().pack(_x.imu_heading, _x.imu_roll, _x.imu_pitch, _x.imu_yaw, _x.imu_quaternion_x, _x.imu_quaternion_y, _x.imu_quaternion_z, _x.imu_quaternion_w, _x.imu_roll_rate, _x.imu_pitch_rate, _x.imu_yaw_rate, _x.imu_acceleration_x, _x.imu_acceleration_y, _x.imu_acceleration_z, _x.imu_magnetometer_x, _x.imu_magnetometer_y, _x.imu_magnetometer_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.imu_heading, _x.imu_roll, _x.imu_pitch, _x.imu_yaw, _x.imu_quaternion_x, _x.imu_quaternion_y, _x.imu_quaternion_z, _x.imu_quaternion_w, _x.imu_roll_rate, _x.imu_pitch_rate, _x.imu_yaw_rate, _x.imu_acceleration_x, _x.imu_acceleration_y, _x.imu_acceleration_z, _x.imu_magnetometer_x, _x.imu_magnetometer_y, _x.imu_magnetometer_z,) = _get_struct_17B().unpack(str[start:end])
      self.imu_heading = bool(self.imu_heading)
      self.imu_roll = bool(self.imu_roll)
      self.imu_pitch = bool(self.imu_pitch)
      self.imu_yaw = bool(self.imu_yaw)
      self.imu_quaternion_x = bool(self.imu_quaternion_x)
      self.imu_quaternion_y = bool(self.imu_quaternion_y)
      self.imu_quaternion_z = bool(self.imu_quaternion_z)
      self.imu_quaternion_w = bool(self.imu_quaternion_w)
      self.imu_roll_rate = bool(self.imu_roll_rate)
      self.imu_pitch_rate = bool(self.imu_pitch_rate)
      self.imu_yaw_rate = bool(self.imu_yaw_rate)
      self.imu_acceleration_x = bool(self.imu_acceleration_x)
      self.imu_acceleration_y = bool(self.imu_acceleration_y)
      self.imu_acceleration_z = bool(self.imu_acceleration_z)
      self.imu_magnetometer_x = bool(self.imu_magnetometer_x)
      self.imu_magnetometer_y = bool(self.imu_magnetometer_y)
      self.imu_magnetometer_z = bool(self.imu_magnetometer_z)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B

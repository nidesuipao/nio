# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EHYEvdOutputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EHYEvdOutputs(genpy.Message):
  _md5sum = "76c52bcdc71500d287cf0b43924003d6"
  _type = "rospy_message_converter/EHYEvdOutputs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 decision
EvdParam parameters
EvdDecsLimit limitations
EvdGeofence gfp_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/EvdParam
EvdParamLaneChange lane_change
EvdParamPathSelect path_select
EvdParamLeading leading
EvdParamTakeover takeover
EvdParamHW2Ramp hw2ramp

================================================================================
MSG: rospy_message_converter/EvdParamLaneChange
int32 change_dir
int32 lane_change_reason

================================================================================
MSG: rospy_message_converter/EvdParamPathSelect
int32 path_dir

================================================================================
MSG: rospy_message_converter/EvdParamLeading
int32 leading_dir

================================================================================
MSG: rospy_message_converter/EvdParamTakeover
uint32 takeover_src

================================================================================
MSG: rospy_message_converter/EvdParamHW2Ramp
int32 ramp_dir
float32 dst2leading

================================================================================
MSG: rospy_message_converter/EvdDecsLimit
bool spd_valid
uint32 spd
uint32 distance_valid
float32 distance
uint32 deadline_valid
float32 deadline
EvdGLimit curr_limit
EvdGLimit[] tar_limit

================================================================================
MSG: rospy_message_converter/EvdGLimit
uint32 spd
float32 dist
uint32 valid
int32 source
uint32 regulation

================================================================================
MSG: rospy_message_converter/EvdGeofence
uint32 valid
int32 classification
float32 distance
uint32 type
"""
  __slots__ = ['decision','parameters','limitations','gfp_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['int32','rospy_message_converter/EvdParam','rospy_message_converter/EvdDecsLimit','rospy_message_converter/EvdGeofence','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       decision,parameters,limitations,gfp_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EHYEvdOutputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.decision is None:
        self.decision = 0
      if self.parameters is None:
        self.parameters = rospy_message_converter.msg.EvdParam()
      if self.limitations is None:
        self.limitations = rospy_message_converter.msg.EvdDecsLimit()
      if self.gfp_info is None:
        self.gfp_info = rospy_message_converter.msg.EvdGeofence()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.decision = 0
      self.parameters = rospy_message_converter.msg.EvdParam()
      self.limitations = rospy_message_converter.msg.EvdDecsLimit()
      self.gfp_info = rospy_message_converter.msg.EvdGeofence()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5iIifB2IfIfIfIiI().pack(_x.decision, _x.parameters.lane_change.change_dir, _x.parameters.lane_change.lane_change_reason, _x.parameters.path_select.path_dir, _x.parameters.leading.leading_dir, _x.parameters.takeover.takeover_src, _x.parameters.hw2ramp.ramp_dir, _x.parameters.hw2ramp.dst2leading, _x.limitations.spd_valid, _x.limitations.spd, _x.limitations.distance_valid, _x.limitations.distance, _x.limitations.deadline_valid, _x.limitations.deadline, _x.limitations.curr_limit.spd, _x.limitations.curr_limit.dist, _x.limitations.curr_limit.valid, _x.limitations.curr_limit.source, _x.limitations.curr_limit.regulation))
      length = len(self.limitations.tar_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.limitations.tar_limit:
        _x = val1
        buff.write(_get_struct_IfIiI().pack(_x.spd, _x.dist, _x.valid, _x.source, _x.regulation))
      _x = self
      buff.write(_get_struct_IifIQ().pack(_x.gfp_info.valid, _x.gfp_info.classification, _x.gfp_info.distance, _x.gfp_info.type, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = rospy_message_converter.msg.EvdParam()
      if self.limitations is None:
        self.limitations = rospy_message_converter.msg.EvdDecsLimit()
      if self.gfp_info is None:
        self.gfp_info = rospy_message_converter.msg.EvdGeofence()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.decision, _x.parameters.lane_change.change_dir, _x.parameters.lane_change.lane_change_reason, _x.parameters.path_select.path_dir, _x.parameters.leading.leading_dir, _x.parameters.takeover.takeover_src, _x.parameters.hw2ramp.ramp_dir, _x.parameters.hw2ramp.dst2leading, _x.limitations.spd_valid, _x.limitations.spd, _x.limitations.distance_valid, _x.limitations.distance, _x.limitations.deadline_valid, _x.limitations.deadline, _x.limitations.curr_limit.spd, _x.limitations.curr_limit.dist, _x.limitations.curr_limit.valid, _x.limitations.curr_limit.source, _x.limitations.curr_limit.regulation,) = _get_struct_5iIifB2IfIfIfIiI().unpack(str[start:end])
      self.limitations.spd_valid = bool(self.limitations.spd_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.limitations.tar_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.EvdGLimit()
        _x = val1
        start = end
        end += 20
        (_x.spd, _x.dist, _x.valid, _x.source, _x.regulation,) = _get_struct_IfIiI().unpack(str[start:end])
        self.limitations.tar_limit.append(val1)
      _x = self
      start = end
      end += 24
      (_x.gfp_info.valid, _x.gfp_info.classification, _x.gfp_info.distance, _x.gfp_info.type, _x.publish_ptp_ts,) = _get_struct_IifIQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5iIifB2IfIfIfIiI().pack(_x.decision, _x.parameters.lane_change.change_dir, _x.parameters.lane_change.lane_change_reason, _x.parameters.path_select.path_dir, _x.parameters.leading.leading_dir, _x.parameters.takeover.takeover_src, _x.parameters.hw2ramp.ramp_dir, _x.parameters.hw2ramp.dst2leading, _x.limitations.spd_valid, _x.limitations.spd, _x.limitations.distance_valid, _x.limitations.distance, _x.limitations.deadline_valid, _x.limitations.deadline, _x.limitations.curr_limit.spd, _x.limitations.curr_limit.dist, _x.limitations.curr_limit.valid, _x.limitations.curr_limit.source, _x.limitations.curr_limit.regulation))
      length = len(self.limitations.tar_limit)
      buff.write(_struct_I.pack(length))
      for val1 in self.limitations.tar_limit:
        _x = val1
        buff.write(_get_struct_IfIiI().pack(_x.spd, _x.dist, _x.valid, _x.source, _x.regulation))
      _x = self
      buff.write(_get_struct_IifIQ().pack(_x.gfp_info.valid, _x.gfp_info.classification, _x.gfp_info.distance, _x.gfp_info.type, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = rospy_message_converter.msg.EvdParam()
      if self.limitations is None:
        self.limitations = rospy_message_converter.msg.EvdDecsLimit()
      if self.gfp_info is None:
        self.gfp_info = rospy_message_converter.msg.EvdGeofence()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.decision, _x.parameters.lane_change.change_dir, _x.parameters.lane_change.lane_change_reason, _x.parameters.path_select.path_dir, _x.parameters.leading.leading_dir, _x.parameters.takeover.takeover_src, _x.parameters.hw2ramp.ramp_dir, _x.parameters.hw2ramp.dst2leading, _x.limitations.spd_valid, _x.limitations.spd, _x.limitations.distance_valid, _x.limitations.distance, _x.limitations.deadline_valid, _x.limitations.deadline, _x.limitations.curr_limit.spd, _x.limitations.curr_limit.dist, _x.limitations.curr_limit.valid, _x.limitations.curr_limit.source, _x.limitations.curr_limit.regulation,) = _get_struct_5iIifB2IfIfIfIiI().unpack(str[start:end])
      self.limitations.spd_valid = bool(self.limitations.spd_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.limitations.tar_limit = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.EvdGLimit()
        _x = val1
        start = end
        end += 20
        (_x.spd, _x.dist, _x.valid, _x.source, _x.regulation,) = _get_struct_IfIiI().unpack(str[start:end])
        self.limitations.tar_limit.append(val1)
      _x = self
      start = end
      end += 24
      (_x.gfp_info.valid, _x.gfp_info.classification, _x.gfp_info.distance, _x.gfp_info.type, _x.publish_ptp_ts,) = _get_struct_IifIQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_5iIifB2IfIfIfIiI = None
def _get_struct_5iIifB2IfIfIfIiI():
    global _struct_5iIifB2IfIfIfIiI
    if _struct_5iIifB2IfIfIfIiI is None:
        _struct_5iIifB2IfIfIfIiI = struct.Struct("<5iIifB2IfIfIfIiI")
    return _struct_5iIifB2IfIfIfIiI
_struct_IfIiI = None
def _get_struct_IfIiI():
    global _struct_IfIiI
    if _struct_IfIiI is None:
        _struct_IfIiI = struct.Struct("<IfIiI")
    return _struct_IfIiI
_struct_IifIQ = None
def _get_struct_IifIQ():
    global _struct_IifIQ
    if _struct_IifIQ is None:
        _struct_IifIQ = struct.Struct("<IifIQ")
    return _struct_IifIQ

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/GPSFrame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class GPSFrame(genpy.Message):
  _md5sum = "09bfeafa2c0dcf6927614c002e1216ad"
  _type = "rospy_message_converter/GPSFrame"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """GPSValidFlags valid_flags
int64 timestamp_us
float64 latitude
float64 longitude
float64 altitude
float64 course
float64 speed
float64 climb
string utcTime
string utcDate
float64 hdop
float64 vdop
float64 hacc
float64 vacc
int32 gdpr_status
uint64 timestamp_ptp_ns
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/GPSValidFlags
bool gps_lat
bool gps_lon
bool gps_alt
bool gps_course
bool gps_speed
bool gps_climb
bool gps_hdop
bool gps_vdop
bool gps_hacc
bool gps_vacc
"""
  __slots__ = ['valid_flags','timestamp_us','latitude','longitude','altitude','course','speed','climb','utcTime','utcDate','hdop','vdop','hacc','vacc','gdpr_status','timestamp_ptp_ns','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/GPSValidFlags','int64','float64','float64','float64','float64','float64','float64','string','string','float64','float64','float64','float64','int32','uint64','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid_flags,timestamp_us,latitude,longitude,altitude,course,speed,climb,utcTime,utcDate,hdop,vdop,hacc,vacc,gdpr_status,timestamp_ptp_ns,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPSFrame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid_flags is None:
        self.valid_flags = rospy_message_converter.msg.GPSValidFlags()
      if self.timestamp_us is None:
        self.timestamp_us = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.course is None:
        self.course = 0.
      if self.speed is None:
        self.speed = 0.
      if self.climb is None:
        self.climb = 0.
      if self.utcTime is None:
        self.utcTime = ''
      if self.utcDate is None:
        self.utcDate = ''
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.hacc is None:
        self.hacc = 0.
      if self.vacc is None:
        self.vacc = 0.
      if self.gdpr_status is None:
        self.gdpr_status = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = 0
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.valid_flags = rospy_message_converter.msg.GPSValidFlags()
      self.timestamp_us = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.course = 0.
      self.speed = 0.
      self.climb = 0.
      self.utcTime = ''
      self.utcDate = ''
      self.hdop = 0.
      self.vdop = 0.
      self.hacc = 0.
      self.vacc = 0.
      self.gdpr_status = 0
      self.timestamp_ptp_ns = 0
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10Bq6d().pack(_x.valid_flags.gps_lat, _x.valid_flags.gps_lon, _x.valid_flags.gps_alt, _x.valid_flags.gps_course, _x.valid_flags.gps_speed, _x.valid_flags.gps_climb, _x.valid_flags.gps_hdop, _x.valid_flags.gps_vdop, _x.valid_flags.gps_hacc, _x.valid_flags.gps_vacc, _x.timestamp_us, _x.latitude, _x.longitude, _x.altitude, _x.course, _x.speed, _x.climb))
      _x = self.utcTime
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.utcDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4di2Q().pack(_x.hdop, _x.vdop, _x.hacc, _x.vacc, _x.gdpr_status, _x.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.valid_flags is None:
        self.valid_flags = rospy_message_converter.msg.GPSValidFlags()
      end = 0
      _x = self
      start = end
      end += 66
      (_x.valid_flags.gps_lat, _x.valid_flags.gps_lon, _x.valid_flags.gps_alt, _x.valid_flags.gps_course, _x.valid_flags.gps_speed, _x.valid_flags.gps_climb, _x.valid_flags.gps_hdop, _x.valid_flags.gps_vdop, _x.valid_flags.gps_hacc, _x.valid_flags.gps_vacc, _x.timestamp_us, _x.latitude, _x.longitude, _x.altitude, _x.course, _x.speed, _x.climb,) = _get_struct_10Bq6d().unpack(str[start:end])
      self.valid_flags.gps_lat = bool(self.valid_flags.gps_lat)
      self.valid_flags.gps_lon = bool(self.valid_flags.gps_lon)
      self.valid_flags.gps_alt = bool(self.valid_flags.gps_alt)
      self.valid_flags.gps_course = bool(self.valid_flags.gps_course)
      self.valid_flags.gps_speed = bool(self.valid_flags.gps_speed)
      self.valid_flags.gps_climb = bool(self.valid_flags.gps_climb)
      self.valid_flags.gps_hdop = bool(self.valid_flags.gps_hdop)
      self.valid_flags.gps_vdop = bool(self.valid_flags.gps_vdop)
      self.valid_flags.gps_hacc = bool(self.valid_flags.gps_hacc)
      self.valid_flags.gps_vacc = bool(self.valid_flags.gps_vacc)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.utcTime = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.utcTime = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.utcDate = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.utcDate = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.hdop, _x.vdop, _x.hacc, _x.vacc, _x.gdpr_status, _x.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_4di2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10Bq6d().pack(_x.valid_flags.gps_lat, _x.valid_flags.gps_lon, _x.valid_flags.gps_alt, _x.valid_flags.gps_course, _x.valid_flags.gps_speed, _x.valid_flags.gps_climb, _x.valid_flags.gps_hdop, _x.valid_flags.gps_vdop, _x.valid_flags.gps_hacc, _x.valid_flags.gps_vacc, _x.timestamp_us, _x.latitude, _x.longitude, _x.altitude, _x.course, _x.speed, _x.climb))
      _x = self.utcTime
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.utcDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4di2Q().pack(_x.hdop, _x.vdop, _x.hacc, _x.vacc, _x.gdpr_status, _x.timestamp_ptp_ns, _x.publish_ptp_ts))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.valid_flags is None:
        self.valid_flags = rospy_message_converter.msg.GPSValidFlags()
      end = 0
      _x = self
      start = end
      end += 66
      (_x.valid_flags.gps_lat, _x.valid_flags.gps_lon, _x.valid_flags.gps_alt, _x.valid_flags.gps_course, _x.valid_flags.gps_speed, _x.valid_flags.gps_climb, _x.valid_flags.gps_hdop, _x.valid_flags.gps_vdop, _x.valid_flags.gps_hacc, _x.valid_flags.gps_vacc, _x.timestamp_us, _x.latitude, _x.longitude, _x.altitude, _x.course, _x.speed, _x.climb,) = _get_struct_10Bq6d().unpack(str[start:end])
      self.valid_flags.gps_lat = bool(self.valid_flags.gps_lat)
      self.valid_flags.gps_lon = bool(self.valid_flags.gps_lon)
      self.valid_flags.gps_alt = bool(self.valid_flags.gps_alt)
      self.valid_flags.gps_course = bool(self.valid_flags.gps_course)
      self.valid_flags.gps_speed = bool(self.valid_flags.gps_speed)
      self.valid_flags.gps_climb = bool(self.valid_flags.gps_climb)
      self.valid_flags.gps_hdop = bool(self.valid_flags.gps_hdop)
      self.valid_flags.gps_vdop = bool(self.valid_flags.gps_vdop)
      self.valid_flags.gps_hacc = bool(self.valid_flags.gps_hacc)
      self.valid_flags.gps_vacc = bool(self.valid_flags.gps_vacc)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.utcTime = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.utcTime = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.utcDate = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.utcDate = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.hdop, _x.vdop, _x.hacc, _x.vacc, _x.gdpr_status, _x.timestamp_ptp_ns, _x.publish_ptp_ts,) = _get_struct_4di2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10Bq6d = None
def _get_struct_10Bq6d():
    global _struct_10Bq6d
    if _struct_10Bq6d is None:
        _struct_10Bq6d = struct.Struct("<10Bq6d")
    return _struct_10Bq6d
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_4di2Q = None
def _get_struct_4di2Q():
    global _struct_4di2Q
    if _struct_4di2Q is None:
        _struct_4di2Q = struct.Struct("<4di2Q")
    return _struct_4di2Q

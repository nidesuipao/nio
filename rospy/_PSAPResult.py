# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PSAPResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class PSAPResult(genpy.Message):
  _md5sum = "f9aab9b51f9916455f21cc94f9244176"
  _type = "rospy_message_converter/PSAPResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
PSAPObject[] objects
SVCPoint veh_loc
float32 veh_loc_z
SVCOrientation veh_orientation
bool veh_loc_valid
PSAPSlot slot
int32 coordinate_type

================================================================================
MSG: rospy_message_converter/PSAPObject
int32 obj_type
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
int32 marker_id

================================================================================
MSG: rospy_message_converter/SVCPoint
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/SVCOrientation
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: rospy_message_converter/PSAPSlot
SVCPoint pt1
SVCPoint pt2
SVCPoint pt3
SVCPoint pt4
SVCPoint veh_pos
float32 veh_psi
int32 slot_status
"""
  __slots__ = ['timestamp','objects','veh_loc','veh_loc_z','veh_orientation','veh_loc_valid','slot','coordinate_type']
  _slot_types = ['uint64','rospy_message_converter/PSAPObject[]','rospy_message_converter/SVCPoint','float32','rospy_message_converter/SVCOrientation','bool','rospy_message_converter/PSAPSlot','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,objects,veh_loc,veh_loc_z,veh_orientation,veh_loc_valid,slot,coordinate_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PSAPResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.objects is None:
        self.objects = []
      if self.veh_loc is None:
        self.veh_loc = rospy_message_converter.msg.SVCPoint()
      if self.veh_loc_z is None:
        self.veh_loc_z = 0.
      if self.veh_orientation is None:
        self.veh_orientation = rospy_message_converter.msg.SVCOrientation()
      if self.veh_loc_valid is None:
        self.veh_loc_valid = False
      if self.slot is None:
        self.slot = rospy_message_converter.msg.PSAPSlot()
      if self.coordinate_type is None:
        self.coordinate_type = 0
    else:
      self.timestamp = 0
      self.objects = []
      self.veh_loc = rospy_message_converter.msg.SVCPoint()
      self.veh_loc_z = 0.
      self.veh_orientation = rospy_message_converter.msg.SVCOrientation()
      self.veh_loc_valid = False
      self.slot = rospy_message_converter.msg.PSAPSlot()
      self.coordinate_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.pt1
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v2 = val1.pt2
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v3 = val1.pt3
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.pt4
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2i().pack(_x.veh_loc.x, _x.veh_loc.y, _x.veh_loc_z, _x.veh_orientation.roll, _x.veh_orientation.pitch, _x.veh_orientation.yaw, _x.veh_loc_valid, _x.slot.pt1.x, _x.slot.pt1.y, _x.slot.pt2.x, _x.slot.pt2.y, _x.slot.pt3.x, _x.slot.pt3.y, _x.slot.pt4.x, _x.slot.pt4.y, _x.slot.veh_pos.x, _x.slot.veh_pos.y, _x.slot.veh_psi, _x.slot.slot_status, _x.coordinate_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      if self.veh_loc is None:
        self.veh_loc = rospy_message_converter.msg.SVCPoint()
      if self.veh_orientation is None:
        self.veh_orientation = rospy_message_converter.msg.SVCOrientation()
      if self.slot is None:
        self.slot = rospy_message_converter.msg.PSAPSlot()
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v5 = val1.pt1
        _x = _v5
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v6 = val1.pt2
        _x = _v6
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v7 = val1.pt3
        _x = _v7
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.pt4
        _x = _v8
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.objects.append(val1)
      _x = self
      start = end
      end += 77
      (_x.veh_loc.x, _x.veh_loc.y, _x.veh_loc_z, _x.veh_orientation.roll, _x.veh_orientation.pitch, _x.veh_orientation.yaw, _x.veh_loc_valid, _x.slot.pt1.x, _x.slot.pt1.y, _x.slot.pt2.x, _x.slot.pt2.y, _x.slot.pt3.x, _x.slot.pt3.y, _x.slot.pt4.x, _x.slot.pt4.y, _x.slot.veh_pos.x, _x.slot.veh_pos.y, _x.slot.veh_psi, _x.slot.slot_status, _x.coordinate_type,) = _get_struct_6fB11f2i().unpack(str[start:end])
      self.veh_loc_valid = bool(self.veh_loc_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1.obj_type
        buff.write(_get_struct_i().pack(_x))
        _v9 = val1.pt1
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v10 = val1.pt2
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v11 = val1.pt3
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v12 = val1.pt4
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.marker_id
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_6fB11f2i().pack(_x.veh_loc.x, _x.veh_loc.y, _x.veh_loc_z, _x.veh_orientation.roll, _x.veh_orientation.pitch, _x.veh_orientation.yaw, _x.veh_loc_valid, _x.slot.pt1.x, _x.slot.pt1.y, _x.slot.pt2.x, _x.slot.pt2.y, _x.slot.pt3.x, _x.slot.pt3.y, _x.slot.pt4.x, _x.slot.pt4.y, _x.slot.veh_pos.x, _x.slot.veh_pos.y, _x.slot.veh_psi, _x.slot.slot_status, _x.coordinate_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      if self.veh_loc is None:
        self.veh_loc = rospy_message_converter.msg.SVCPoint()
      if self.veh_orientation is None:
        self.veh_orientation = rospy_message_converter.msg.SVCOrientation()
      if self.slot is None:
        self.slot = rospy_message_converter.msg.PSAPSlot()
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PSAPObject()
        start = end
        end += 4
        (val1.obj_type,) = _get_struct_i().unpack(str[start:end])
        _v13 = val1.pt1
        _x = _v13
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v14 = val1.pt2
        _x = _v14
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v15 = val1.pt3
        _x = _v15
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.pt4
        _x = _v16
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (val1.marker_id,) = _get_struct_i().unpack(str[start:end])
        self.objects.append(val1)
      _x = self
      start = end
      end += 77
      (_x.veh_loc.x, _x.veh_loc.y, _x.veh_loc_z, _x.veh_orientation.roll, _x.veh_orientation.pitch, _x.veh_orientation.yaw, _x.veh_loc_valid, _x.slot.pt1.x, _x.slot.pt1.y, _x.slot.pt2.x, _x.slot.pt2.y, _x.slot.pt3.x, _x.slot.pt3.y, _x.slot.pt4.x, _x.slot.pt4.y, _x.slot.veh_pos.x, _x.slot.veh_pos.y, _x.slot.veh_psi, _x.slot.slot_status, _x.coordinate_type,) = _get_struct_6fB11f2i().unpack(str[start:end])
      self.veh_loc_valid = bool(self.veh_loc_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_6fB11f2i = None
def _get_struct_6fB11f2i():
    global _struct_6fB11f2i
    if _struct_6fB11f2i is None:
        _struct_6fB11f2i = struct.Struct("<6fB11f2i")
    return _struct_6fB11f2i
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

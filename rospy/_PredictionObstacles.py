# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/PredictionObstacles.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class PredictionObstacles(genpy.Message):
  _md5sum = "45aa6e37e6633f79aecf0d1fba624ecb"
  _type = "rospy_message_converter/PredictionObstacles"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """PredictionObstacle[] prediction_obstacles
uint64 publish_ptp_ts
string publisher_id
uint32 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/PredictionObstacle
int32 id
float64 timestamp
float32 predicted_period
PredictionTrajectory[] trajectory
ObstacleIntent intent
ObstaclePriority priority
ObstacleInteractiveTag interactive_tag
bool is_static

================================================================================
MSG: rospy_message_converter/PredictionTrajectory
PredictionPathPoint[] trajectory
float32 probability

================================================================================
MSG: rospy_message_converter/PredictionPathPoint
float32 x
float32 y
int32 time_delta
float32 speed
float32 heading

================================================================================
MSG: rospy_message_converter/ObstacleIntent
int32 type

================================================================================
MSG: rospy_message_converter/ObstaclePriority
int32 priority

================================================================================
MSG: rospy_message_converter/ObstacleInteractiveTag
int32 interactive_tag
"""
  __slots__ = ['prediction_obstacles','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['rospy_message_converter/PredictionObstacle[]','uint64','string','uint32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prediction_obstacles,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PredictionObstacles, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prediction_obstacles is None:
        self.prediction_obstacles = []
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.prediction_obstacles = []
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.prediction_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction_obstacles:
        _x = val1
        buff.write(_get_struct_idf().pack(_x.id, _x.timestamp, _x.predicted_period))
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          length = len(val2.trajectory)
          buff.write(_struct_I.pack(length))
          for val3 in val2.trajectory:
            _x = val3
            buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
          _x = val2.probability
          buff.write(_get_struct_f().pack(_x))
        _v1 = val1.intent
        _x = _v1.type
        buff.write(_get_struct_i().pack(_x))
        _v2 = val1.priority
        _x = _v2.priority
        buff.write(_get_struct_i().pack(_x))
        _v3 = val1.interactive_tag
        _x = _v3.interactive_tag
        buff.write(_get_struct_i().pack(_x))
        _x = val1.is_static
        buff.write(_get_struct_B().pack(_x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.prediction_obstacles is None:
        self.prediction_obstacles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction_obstacles = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionObstacle()
        _x = val1
        start = end
        end += 16
        (_x.id, _x.timestamp, _x.predicted_period,) = _get_struct_idf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionTrajectory()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.trajectory = []
          for i in range(0, length):
            val3 = rospy_message_converter.msg.PredictionPathPoint()
            _x = val3
            start = end
            end += 20
            (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
            val2.trajectory.append(val3)
          start = end
          end += 4
          (val2.probability,) = _get_struct_f().unpack(str[start:end])
          val1.trajectory.append(val2)
        _v4 = val1.intent
        start = end
        end += 4
        (_v4.type,) = _get_struct_i().unpack(str[start:end])
        _v5 = val1.priority
        start = end
        end += 4
        (_v5.priority,) = _get_struct_i().unpack(str[start:end])
        _v6 = val1.interactive_tag
        start = end
        end += 4
        (_v6.interactive_tag,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 1
        (val1.is_static,) = _get_struct_B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        self.prediction_obstacles.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.counter, _x.publish_ts,) = _get_struct_IQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.prediction_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction_obstacles:
        _x = val1
        buff.write(_get_struct_idf().pack(_x.id, _x.timestamp, _x.predicted_period))
        length = len(val1.trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory:
          length = len(val2.trajectory)
          buff.write(_struct_I.pack(length))
          for val3 in val2.trajectory:
            _x = val3
            buff.write(_get_struct_2fi2f().pack(_x.x, _x.y, _x.time_delta, _x.speed, _x.heading))
          _x = val2.probability
          buff.write(_get_struct_f().pack(_x))
        _v7 = val1.intent
        _x = _v7.type
        buff.write(_get_struct_i().pack(_x))
        _v8 = val1.priority
        _x = _v8.priority
        buff.write(_get_struct_i().pack(_x))
        _v9 = val1.interactive_tag
        _x = _v9.interactive_tag
        buff.write(_get_struct_i().pack(_x))
        _x = val1.is_static
        buff.write(_get_struct_B().pack(_x))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.prediction_obstacles is None:
        self.prediction_obstacles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction_obstacles = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.PredictionObstacle()
        _x = val1
        start = end
        end += 16
        (_x.id, _x.timestamp, _x.predicted_period,) = _get_struct_idf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory = []
        for i in range(0, length):
          val2 = rospy_message_converter.msg.PredictionTrajectory()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.trajectory = []
          for i in range(0, length):
            val3 = rospy_message_converter.msg.PredictionPathPoint()
            _x = val3
            start = end
            end += 20
            (_x.x, _x.y, _x.time_delta, _x.speed, _x.heading,) = _get_struct_2fi2f().unpack(str[start:end])
            val2.trajectory.append(val3)
          start = end
          end += 4
          (val2.probability,) = _get_struct_f().unpack(str[start:end])
          val1.trajectory.append(val2)
        _v10 = val1.intent
        start = end
        end += 4
        (_v10.type,) = _get_struct_i().unpack(str[start:end])
        _v11 = val1.priority
        start = end
        end += 4
        (_v11.priority,) = _get_struct_i().unpack(str[start:end])
        _v12 = val1.interactive_tag
        start = end
        end += 4
        (_v12.interactive_tag,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 1
        (val1.is_static,) = _get_struct_B().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        self.prediction_obstacles.append(val1)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.counter, _x.publish_ts,) = _get_struct_IQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fi2f = None
def _get_struct_2fi2f():
    global _struct_2fi2f
    if _struct_2fi2f is None:
        _struct_2fi2f = struct.Struct("<2fi2f")
    return _struct_2fi2f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_IQ = None
def _get_struct_IQ():
    global _struct_IQ
    if _struct_IQ is None:
        _struct_IQ = struct.Struct("<IQ")
    return _struct_IQ
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_idf = None
def _get_struct_idf():
    global _struct_idf
    if _struct_idf is None:
        _struct_idf = struct.Struct("<idf")
    return _struct_idf

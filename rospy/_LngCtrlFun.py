# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/LngCtrlFun.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LngCtrlFun(genpy.Message):
  _md5sum = "6679fc5bb7b362d6c25b0bbb1f426be8"
  _type = "rospy_message_converter/LngCtrlFun"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool VLCAvl
bool VLCActv
float32 VLCTarDecel
int32 LLCFctSt
int32 LLCIntrrptErrTyp
bool AutoBrkgAvl
bool AutoBrkgActv
int32 ADTSts
int32 HldLampReq
bool FCC1_ForceFctEna
bool FCC1_BrkReqEna
float32 FCC1_TarBrkFReq
bool FCC1_VehHldReq
bool FCC1_VLCActv
float32 RVMCLgtDecCp
uint32 RVMCLgtSts
int32 VCUCruiseCtrlMod
int32 VMCBrkOvrd
float32 VMCLgtAccCp
float32 VMCLgtDecCp
uint32 VMCLgtSts
uint64[] timestamp_ptp_ns
float32 FCC1_VLCTarDecel
bool FCC1_VMCBrkOvrd
"""
  __slots__ = ['VLCAvl','VLCActv','VLCTarDecel','LLCFctSt','LLCIntrrptErrTyp','AutoBrkgAvl','AutoBrkgActv','ADTSts','HldLampReq','FCC1_ForceFctEna','FCC1_BrkReqEna','FCC1_TarBrkFReq','FCC1_VehHldReq','FCC1_VLCActv','RVMCLgtDecCp','RVMCLgtSts','VCUCruiseCtrlMod','VMCBrkOvrd','VMCLgtAccCp','VMCLgtDecCp','VMCLgtSts','timestamp_ptp_ns','FCC1_VLCTarDecel','FCC1_VMCBrkOvrd']
  _slot_types = ['bool','bool','float32','int32','int32','bool','bool','int32','int32','bool','bool','float32','bool','bool','float32','uint32','int32','int32','float32','float32','uint32','uint64[]','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VLCAvl,VLCActv,VLCTarDecel,LLCFctSt,LLCIntrrptErrTyp,AutoBrkgAvl,AutoBrkgActv,ADTSts,HldLampReq,FCC1_ForceFctEna,FCC1_BrkReqEna,FCC1_TarBrkFReq,FCC1_VehHldReq,FCC1_VLCActv,RVMCLgtDecCp,RVMCLgtSts,VCUCruiseCtrlMod,VMCBrkOvrd,VMCLgtAccCp,VMCLgtDecCp,VMCLgtSts,timestamp_ptp_ns,FCC1_VLCTarDecel,FCC1_VMCBrkOvrd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LngCtrlFun, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.VLCAvl is None:
        self.VLCAvl = False
      if self.VLCActv is None:
        self.VLCActv = False
      if self.VLCTarDecel is None:
        self.VLCTarDecel = 0.
      if self.LLCFctSt is None:
        self.LLCFctSt = 0
      if self.LLCIntrrptErrTyp is None:
        self.LLCIntrrptErrTyp = 0
      if self.AutoBrkgAvl is None:
        self.AutoBrkgAvl = False
      if self.AutoBrkgActv is None:
        self.AutoBrkgActv = False
      if self.ADTSts is None:
        self.ADTSts = 0
      if self.HldLampReq is None:
        self.HldLampReq = 0
      if self.FCC1_ForceFctEna is None:
        self.FCC1_ForceFctEna = False
      if self.FCC1_BrkReqEna is None:
        self.FCC1_BrkReqEna = False
      if self.FCC1_TarBrkFReq is None:
        self.FCC1_TarBrkFReq = 0.
      if self.FCC1_VehHldReq is None:
        self.FCC1_VehHldReq = False
      if self.FCC1_VLCActv is None:
        self.FCC1_VLCActv = False
      if self.RVMCLgtDecCp is None:
        self.RVMCLgtDecCp = 0.
      if self.RVMCLgtSts is None:
        self.RVMCLgtSts = 0
      if self.VCUCruiseCtrlMod is None:
        self.VCUCruiseCtrlMod = 0
      if self.VMCBrkOvrd is None:
        self.VMCBrkOvrd = 0
      if self.VMCLgtAccCp is None:
        self.VMCLgtAccCp = 0.
      if self.VMCLgtDecCp is None:
        self.VMCLgtDecCp = 0.
      if self.VMCLgtSts is None:
        self.VMCLgtSts = 0
      if self.timestamp_ptp_ns is None:
        self.timestamp_ptp_ns = []
      if self.FCC1_VLCTarDecel is None:
        self.FCC1_VLCTarDecel = 0.
      if self.FCC1_VMCBrkOvrd is None:
        self.FCC1_VMCBrkOvrd = False
    else:
      self.VLCAvl = False
      self.VLCActv = False
      self.VLCTarDecel = 0.
      self.LLCFctSt = 0
      self.LLCIntrrptErrTyp = 0
      self.AutoBrkgAvl = False
      self.AutoBrkgActv = False
      self.ADTSts = 0
      self.HldLampReq = 0
      self.FCC1_ForceFctEna = False
      self.FCC1_BrkReqEna = False
      self.FCC1_TarBrkFReq = 0.
      self.FCC1_VehHldReq = False
      self.FCC1_VLCActv = False
      self.RVMCLgtDecCp = 0.
      self.RVMCLgtSts = 0
      self.VCUCruiseCtrlMod = 0
      self.VMCBrkOvrd = 0
      self.VMCLgtAccCp = 0.
      self.VMCLgtDecCp = 0.
      self.VMCLgtSts = 0
      self.timestamp_ptp_ns = []
      self.FCC1_VLCTarDecel = 0.
      self.FCC1_VMCBrkOvrd = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.VLCAvl, _x.VLCActv, _x.VLCTarDecel, _x.LLCFctSt, _x.LLCIntrrptErrTyp, _x.AutoBrkgAvl, _x.AutoBrkgActv, _x.ADTSts, _x.HldLampReq, _x.FCC1_ForceFctEna, _x.FCC1_BrkReqEna, _x.FCC1_TarBrkFReq, _x.FCC1_VehHldReq, _x.FCC1_VLCActv, _x.RVMCLgtDecCp, _x.RVMCLgtSts, _x.VCUCruiseCtrlMod, _x.VMCBrkOvrd, _x.VMCLgtAccCp, _x.VMCLgtDecCp, _x.VMCLgtSts))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.timestamp_ptp_ns))
      _x = self
      buff.write(_get_struct_fB().pack(_x.FCC1_VLCTarDecel, _x.FCC1_VMCBrkOvrd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.VLCAvl, _x.VLCActv, _x.VLCTarDecel, _x.LLCFctSt, _x.LLCIntrrptErrTyp, _x.AutoBrkgAvl, _x.AutoBrkgActv, _x.ADTSts, _x.HldLampReq, _x.FCC1_ForceFctEna, _x.FCC1_BrkReqEna, _x.FCC1_TarBrkFReq, _x.FCC1_VehHldReq, _x.FCC1_VLCActv, _x.RVMCLgtDecCp, _x.RVMCLgtSts, _x.VCUCruiseCtrlMod, _x.VMCBrkOvrd, _x.VMCLgtAccCp, _x.VMCLgtDecCp, _x.VMCLgtSts,) = _get_struct_2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.VLCAvl = bool(self.VLCAvl)
      self.VLCActv = bool(self.VLCActv)
      self.AutoBrkgAvl = bool(self.AutoBrkgAvl)
      self.AutoBrkgActv = bool(self.AutoBrkgActv)
      self.FCC1_ForceFctEna = bool(self.FCC1_ForceFctEna)
      self.FCC1_BrkReqEna = bool(self.FCC1_BrkReqEna)
      self.FCC1_VehHldReq = bool(self.FCC1_VehHldReq)
      self.FCC1_VLCActv = bool(self.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.FCC1_VLCTarDecel, _x.FCC1_VMCBrkOvrd,) = _get_struct_fB().unpack(str[start:end])
      self.FCC1_VMCBrkOvrd = bool(self.FCC1_VMCBrkOvrd)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2i2B2i2Bf2BfI2i2fI().pack(_x.VLCAvl, _x.VLCActv, _x.VLCTarDecel, _x.LLCFctSt, _x.LLCIntrrptErrTyp, _x.AutoBrkgAvl, _x.AutoBrkgActv, _x.ADTSts, _x.HldLampReq, _x.FCC1_ForceFctEna, _x.FCC1_BrkReqEna, _x.FCC1_TarBrkFReq, _x.FCC1_VehHldReq, _x.FCC1_VLCActv, _x.RVMCLgtDecCp, _x.RVMCLgtSts, _x.VCUCruiseCtrlMod, _x.VMCBrkOvrd, _x.VMCLgtAccCp, _x.VMCLgtDecCp, _x.VMCLgtSts))
      length = len(self.timestamp_ptp_ns)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.timestamp_ptp_ns.tostring())
      _x = self
      buff.write(_get_struct_fB().pack(_x.FCC1_VLCTarDecel, _x.FCC1_VMCBrkOvrd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.VLCAvl, _x.VLCActv, _x.VLCTarDecel, _x.LLCFctSt, _x.LLCIntrrptErrTyp, _x.AutoBrkgAvl, _x.AutoBrkgActv, _x.ADTSts, _x.HldLampReq, _x.FCC1_ForceFctEna, _x.FCC1_BrkReqEna, _x.FCC1_TarBrkFReq, _x.FCC1_VehHldReq, _x.FCC1_VLCActv, _x.RVMCLgtDecCp, _x.RVMCLgtSts, _x.VCUCruiseCtrlMod, _x.VMCBrkOvrd, _x.VMCLgtAccCp, _x.VMCLgtDecCp, _x.VMCLgtSts,) = _get_struct_2Bf2i2B2i2Bf2BfI2i2fI().unpack(str[start:end])
      self.VLCAvl = bool(self.VLCAvl)
      self.VLCActv = bool(self.VLCActv)
      self.AutoBrkgAvl = bool(self.AutoBrkgAvl)
      self.AutoBrkgActv = bool(self.AutoBrkgActv)
      self.FCC1_ForceFctEna = bool(self.FCC1_ForceFctEna)
      self.FCC1_BrkReqEna = bool(self.FCC1_BrkReqEna)
      self.FCC1_VehHldReq = bool(self.FCC1_VehHldReq)
      self.FCC1_VLCActv = bool(self.FCC1_VLCActv)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timestamp_ptp_ns = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      _x = self
      start = end
      end += 5
      (_x.FCC1_VLCTarDecel, _x.FCC1_VMCBrkOvrd,) = _get_struct_fB().unpack(str[start:end])
      self.FCC1_VMCBrkOvrd = bool(self.FCC1_VMCBrkOvrd)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf2i2B2i2Bf2BfI2i2fI = None
def _get_struct_2Bf2i2B2i2Bf2BfI2i2fI():
    global _struct_2Bf2i2B2i2Bf2BfI2i2fI
    if _struct_2Bf2i2B2i2Bf2BfI2i2fI is None:
        _struct_2Bf2i2B2i2Bf2BfI2i2fI = struct.Struct("<2Bf2i2B2i2Bf2BfI2i2fI")
    return _struct_2Bf2i2B2i2Bf2BfI2i2fI
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/VehicleInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class VehicleInfo(genpy.Message):
  _md5sum = "db20883886df03eba41b64e19add325b"
  _type = "rospy_message_converter/VehicleInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_vehicle_info_valid
FeatureVehInfo feature_vehicle_info
CalVehInfo cal_vehicle_info
uint64 publish_ptp_ts
string publisher_id
uint64 counter
uint64 publish_ts

================================================================================
MSG: rospy_message_converter/FeatureVehInfo
float32 wheel_base
float32 veh_overall_length
float32 veh_overall_width
float32 veh_width
float32 veh_height
float32 front_tread_width
float32 rear_tread_width
MartixPair2D[] steer_ratio_martix_left_turn
MartixPair2D[] steer_ratio_martix_right_turn
float32 front_bumper_to_rear_axle
float32 front_main_cam_to_front_bumper
float32 front_narrow_cam_to_front_bumper
RadarPosition radar_position

================================================================================
MSG: rospy_message_converter/MartixPair2D
float32 x
float32 y

================================================================================
MSG: rospy_message_converter/RadarPosition
float32 rad_fc_height_no_load
float32 rad_fl_height_no_load
float32 rad_fr_height_no_load
float32 rad_rl_height_no_load
float32 rad_rr_height_no_load
float32 rad_fc_mount_angle
float32 rad_fl_mount_angle
float32 rad_fr_mount_angle
float32 rad_rl_mount_angle
float32 rad_rr_mount_angle
float32 rad_fc_lat_dst_2_center
float32 rad_fl_lat_dst_2_center
float32 rad_fr_lat_dst_2_center
float32 rad_rl_lat_dst_2_center
float32 rad_rr_lat_dst_2_center
float32 rad_fc_long_dst_2_rear_axle
float32 rad_fl_long_dst_2_rear_axle
float32 rad_fr_long_dst_2_rear_axle
float32 rad_rl_long_dst_2_rear_axle
float32 rad_rr_long_dst_2_rear_axle

================================================================================
MSG: rospy_message_converter/CalVehInfo
float32 veh_calib_height
float32 veh_width
float32 veh_fwheel2head
float32 veh_rwheel2tail
float32 veh_wheel_base
CameraLocation camera_location
LidarLocation lidar_location

================================================================================
MSG: rospy_message_converter/CameraLocation
SensorLocation front_wide
SensorLocation front_narrow
SensorLocation front_right
SensorLocation front_left
SensorLocation rear_right
SensorLocation rear_left
SensorLocation rear_narrow
SensorLocation svc_front
SensorLocation svc_rear
SensorLocation svc_left
SensorLocation svc_right

================================================================================
MSG: rospy_message_converter/SensorLocation
float32[] angle
float32[] distance

================================================================================
MSG: rospy_message_converter/LidarLocation
SensorLocation lidar_front
"""
  __slots__ = ['is_vehicle_info_valid','feature_vehicle_info','cal_vehicle_info','publish_ptp_ts','publisher_id','counter','publish_ts']
  _slot_types = ['bool','rospy_message_converter/FeatureVehInfo','rospy_message_converter/CalVehInfo','uint64','string','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_vehicle_info_valid,feature_vehicle_info,cal_vehicle_info,publish_ptp_ts,publisher_id,counter,publish_ts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_vehicle_info_valid is None:
        self.is_vehicle_info_valid = False
      if self.feature_vehicle_info is None:
        self.feature_vehicle_info = rospy_message_converter.msg.FeatureVehInfo()
      if self.cal_vehicle_info is None:
        self.cal_vehicle_info = rospy_message_converter.msg.CalVehInfo()
      if self.publish_ptp_ts is None:
        self.publish_ptp_ts = 0
      if self.publisher_id is None:
        self.publisher_id = ''
      if self.counter is None:
        self.counter = 0
      if self.publish_ts is None:
        self.publish_ts = 0
    else:
      self.is_vehicle_info_valid = False
      self.feature_vehicle_info = rospy_message_converter.msg.FeatureVehInfo()
      self.cal_vehicle_info = rospy_message_converter.msg.CalVehInfo()
      self.publish_ptp_ts = 0
      self.publisher_id = ''
      self.counter = 0
      self.publish_ts = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7f().pack(_x.is_vehicle_info_valid, _x.feature_vehicle_info.wheel_base, _x.feature_vehicle_info.veh_overall_length, _x.feature_vehicle_info.veh_overall_width, _x.feature_vehicle_info.veh_width, _x.feature_vehicle_info.veh_height, _x.feature_vehicle_info.front_tread_width, _x.feature_vehicle_info.rear_tread_width))
      length = len(self.feature_vehicle_info.steer_ratio_martix_left_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_vehicle_info.steer_ratio_martix_left_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.feature_vehicle_info.steer_ratio_martix_right_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_vehicle_info.steer_ratio_martix_right_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_28f().pack(_x.feature_vehicle_info.front_bumper_to_rear_axle, _x.feature_vehicle_info.front_main_cam_to_front_bumper, _x.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.cal_vehicle_info.veh_calib_height, _x.cal_vehicle_info.veh_width, _x.cal_vehicle_info.veh_fwheel2head, _x.cal_vehicle_info.veh_rwheel2tail, _x.cal_vehicle_info.veh_wheel_base))
      length = len(self.cal_vehicle_info.camera_location.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_wide.angle))
      length = len(self.cal_vehicle_info.camera_location.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_wide.distance))
      length = len(self.cal_vehicle_info.camera_location.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_narrow.angle))
      length = len(self.cal_vehicle_info.camera_location.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_narrow.distance))
      length = len(self.cal_vehicle_info.camera_location.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_right.angle))
      length = len(self.cal_vehicle_info.camera_location.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_right.distance))
      length = len(self.cal_vehicle_info.camera_location.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_left.angle))
      length = len(self.cal_vehicle_info.camera_location.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.front_left.distance))
      length = len(self.cal_vehicle_info.camera_location.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.rear_right.angle))
      length = len(self.cal_vehicle_info.camera_location.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.rear_right.distance))
      length = len(self.cal_vehicle_info.camera_location.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.rear_left.angle))
      length = len(self.cal_vehicle_info.camera_location.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.rear_left.distance))
      length = len(self.cal_vehicle_info.camera_location.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.rear_narrow.angle))
      length = len(self.cal_vehicle_info.camera_location.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.rear_narrow.distance))
      length = len(self.cal_vehicle_info.camera_location.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_front.angle))
      length = len(self.cal_vehicle_info.camera_location.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_front.distance))
      length = len(self.cal_vehicle_info.camera_location.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_rear.angle))
      length = len(self.cal_vehicle_info.camera_location.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_rear.distance))
      length = len(self.cal_vehicle_info.camera_location.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_left.angle))
      length = len(self.cal_vehicle_info.camera_location.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_left.distance))
      length = len(self.cal_vehicle_info.camera_location.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_right.angle))
      length = len(self.cal_vehicle_info.camera_location.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.camera_location.svc_right.distance))
      length = len(self.cal_vehicle_info.lidar_location.lidar_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.lidar_location.lidar_front.angle))
      length = len(self.cal_vehicle_info.lidar_location.lidar_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.cal_vehicle_info.lidar_location.lidar_front.distance))
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.feature_vehicle_info is None:
        self.feature_vehicle_info = rospy_message_converter.msg.FeatureVehInfo()
      if self.cal_vehicle_info is None:
        self.cal_vehicle_info = rospy_message_converter.msg.CalVehInfo()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.is_vehicle_info_valid, _x.feature_vehicle_info.wheel_base, _x.feature_vehicle_info.veh_overall_length, _x.feature_vehicle_info.veh_overall_width, _x.feature_vehicle_info.veh_width, _x.feature_vehicle_info.veh_height, _x.feature_vehicle_info.front_tread_width, _x.feature_vehicle_info.rear_tread_width,) = _get_struct_B7f().unpack(str[start:end])
      self.is_vehicle_info_valid = bool(self.is_vehicle_info_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_vehicle_info.steer_ratio_martix_left_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.feature_vehicle_info.steer_ratio_martix_left_turn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_vehicle_info.steer_ratio_martix_right_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.feature_vehicle_info.steer_ratio_martix_right_turn.append(val1)
      _x = self
      start = end
      end += 112
      (_x.feature_vehicle_info.front_bumper_to_rear_axle, _x.feature_vehicle_info.front_main_cam_to_front_bumper, _x.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.cal_vehicle_info.veh_calib_height, _x.cal_vehicle_info.veh_width, _x.cal_vehicle_info.veh_fwheel2head, _x.cal_vehicle_info.veh_rwheel2tail, _x.cal_vehicle_info.veh_wheel_base,) = _get_struct_28f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_wide.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_wide.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_narrow.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_narrow.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_front.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_rear.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_rear.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_left.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_left.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_right.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_right.distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.lidar_location.lidar_front.angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.lidar_location.lidar_front.distance = s.unpack(str[start:end])
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7f().pack(_x.is_vehicle_info_valid, _x.feature_vehicle_info.wheel_base, _x.feature_vehicle_info.veh_overall_length, _x.feature_vehicle_info.veh_overall_width, _x.feature_vehicle_info.veh_width, _x.feature_vehicle_info.veh_height, _x.feature_vehicle_info.front_tread_width, _x.feature_vehicle_info.rear_tread_width))
      length = len(self.feature_vehicle_info.steer_ratio_martix_left_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_vehicle_info.steer_ratio_martix_left_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.feature_vehicle_info.steer_ratio_martix_right_turn)
      buff.write(_struct_I.pack(length))
      for val1 in self.feature_vehicle_info.steer_ratio_martix_right_turn:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_28f().pack(_x.feature_vehicle_info.front_bumper_to_rear_axle, _x.feature_vehicle_info.front_main_cam_to_front_bumper, _x.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.cal_vehicle_info.veh_calib_height, _x.cal_vehicle_info.veh_width, _x.cal_vehicle_info.veh_fwheel2head, _x.cal_vehicle_info.veh_rwheel2tail, _x.cal_vehicle_info.veh_wheel_base))
      length = len(self.cal_vehicle_info.camera_location.front_wide.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_wide.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_wide.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_wide.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_narrow.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_narrow.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_right.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_right.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_left.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.front_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.front_left.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.rear_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.rear_right.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.rear_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.rear_right.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.rear_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.rear_left.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.rear_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.rear_left.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.rear_narrow.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.rear_narrow.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.rear_narrow.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.rear_narrow.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_front.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_front.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_rear.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_rear.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_rear.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_rear.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_left.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_left.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_left.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_left.distance.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_right.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_right.angle.tostring())
      length = len(self.cal_vehicle_info.camera_location.svc_right.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.camera_location.svc_right.distance.tostring())
      length = len(self.cal_vehicle_info.lidar_location.lidar_front.angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.lidar_location.lidar_front.angle.tostring())
      length = len(self.cal_vehicle_info.lidar_location.lidar_front.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cal_vehicle_info.lidar_location.lidar_front.distance.tostring())
      _x = self.publish_ptp_ts
      buff.write(_get_struct_Q().pack(_x))
      _x = self.publisher_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.counter, _x.publish_ts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.feature_vehicle_info is None:
        self.feature_vehicle_info = rospy_message_converter.msg.FeatureVehInfo()
      if self.cal_vehicle_info is None:
        self.cal_vehicle_info = rospy_message_converter.msg.CalVehInfo()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.is_vehicle_info_valid, _x.feature_vehicle_info.wheel_base, _x.feature_vehicle_info.veh_overall_length, _x.feature_vehicle_info.veh_overall_width, _x.feature_vehicle_info.veh_width, _x.feature_vehicle_info.veh_height, _x.feature_vehicle_info.front_tread_width, _x.feature_vehicle_info.rear_tread_width,) = _get_struct_B7f().unpack(str[start:end])
      self.is_vehicle_info_valid = bool(self.is_vehicle_info_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_vehicle_info.steer_ratio_martix_left_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.feature_vehicle_info.steer_ratio_martix_left_turn.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.feature_vehicle_info.steer_ratio_martix_right_turn = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.MartixPair2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.feature_vehicle_info.steer_ratio_martix_right_turn.append(val1)
      _x = self
      start = end
      end += 112
      (_x.feature_vehicle_info.front_bumper_to_rear_axle, _x.feature_vehicle_info.front_main_cam_to_front_bumper, _x.feature_vehicle_info.front_narrow_cam_to_front_bumper, _x.feature_vehicle_info.radar_position.rad_fc_height_no_load, _x.feature_vehicle_info.radar_position.rad_fl_height_no_load, _x.feature_vehicle_info.radar_position.rad_fr_height_no_load, _x.feature_vehicle_info.radar_position.rad_rl_height_no_load, _x.feature_vehicle_info.radar_position.rad_rr_height_no_load, _x.feature_vehicle_info.radar_position.rad_fc_mount_angle, _x.feature_vehicle_info.radar_position.rad_fl_mount_angle, _x.feature_vehicle_info.radar_position.rad_fr_mount_angle, _x.feature_vehicle_info.radar_position.rad_rl_mount_angle, _x.feature_vehicle_info.radar_position.rad_rr_mount_angle, _x.feature_vehicle_info.radar_position.rad_fc_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rl_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_rr_lat_dst_2_center, _x.feature_vehicle_info.radar_position.rad_fc_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_fr_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rl_long_dst_2_rear_axle, _x.feature_vehicle_info.radar_position.rad_rr_long_dst_2_rear_axle, _x.cal_vehicle_info.veh_calib_height, _x.cal_vehicle_info.veh_width, _x.cal_vehicle_info.veh_fwheel2head, _x.cal_vehicle_info.veh_rwheel2tail, _x.cal_vehicle_info.veh_wheel_base,) = _get_struct_28f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_wide.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_wide.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.front_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_narrow.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.rear_narrow.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_rear.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_rear.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_left.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_left.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_right.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.camera_location.svc_right.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.lidar_location.lidar_front.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cal_vehicle_info.lidar_location.lidar_front.distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 8
      (self.publish_ptp_ts,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.publisher_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.publisher_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.counter, _x.publish_ts,) = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_28f = None
def _get_struct_28f():
    global _struct_28f
    if _struct_28f is None:
        _struct_28f = struct.Struct("<28f")
    return _struct_28f
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_B7f = None
def _get_struct_B7f():
    global _struct_B7f
    if _struct_B7f is None:
        _struct_B7f = struct.Struct("<B7f")
    return _struct_B7f
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q

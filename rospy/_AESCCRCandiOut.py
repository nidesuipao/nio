# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AESCCRCandiOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class AESCCRCandiOut(genpy.Message):
  _md5sum = "cd9c377546e73c522586e0f9e2eea08b"
  _type = "rospy_message_converter/AESCCRCandiOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 ID
uint32 VID
float32 range
float32 rangerate
float32 TTC
float32 TTB_tt
float32 TTB_valid
float32 TTT_left_tt
uint32 TTT_left_valid
float32 TTT_right_tt
uint32 TTT_right_valid
float32 closeleft_posx
float32 closeleft_posy
float32 closeleft_curx
float32 closeleft_cury
float32 closeleft_latest
float32 closeright_posx
float32 closeright_posy
float32 closeright_curx
float32 closeright_cury
float32 closeright_latest
float32 remoteleft_posx
float32 remoteleft_posy
float32 remoteleft_curx
float32 remoteleft_cury
float32 remoteleft_latest
float32 remoteright_posx
float32 remoteright_posy
float32 remoteright_curx
float32 remoteright_cury
float32 remoteright_latest
float32 center_posx
float32 center_posy
float32 center_curx
float32 center_cury
float32 center_latest
float32 longpos
float32 latpos
float32 XOLC
float32 latest
uint32 closest_corner
uint32 close_corner_est
uint32 inpath
uint32 inpathcur
uint32 inpathpre
uint32 inpathage
uint32 inpathcheck
uint32 isfusion
uint32 isvision
uint32 isradar
uint32 toi
uint32 isoncoming
uint32 AEBconf
uint32 steerflag
float32 steerdirection
RefPoint ref_pos

================================================================================
MSG: rospy_message_converter/RefPoint
uint32 ref_character
float64 pos_x
float64 pos_y
float64 range
float64 heading
"""
  __slots__ = ['ID','VID','range','rangerate','TTC','TTB_tt','TTB_valid','TTT_left_tt','TTT_left_valid','TTT_right_tt','TTT_right_valid','closeleft_posx','closeleft_posy','closeleft_curx','closeleft_cury','closeleft_latest','closeright_posx','closeright_posy','closeright_curx','closeright_cury','closeright_latest','remoteleft_posx','remoteleft_posy','remoteleft_curx','remoteleft_cury','remoteleft_latest','remoteright_posx','remoteright_posy','remoteright_curx','remoteright_cury','remoteright_latest','center_posx','center_posy','center_curx','center_cury','center_latest','longpos','latpos','XOLC','latest','closest_corner','close_corner_est','inpath','inpathcur','inpathpre','inpathage','inpathcheck','isfusion','isvision','isradar','toi','isoncoming','AEBconf','steerflag','steerdirection','ref_pos']
  _slot_types = ['uint32','uint32','float32','float32','float32','float32','float32','float32','uint32','float32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float32','rospy_message_converter/RefPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,VID,range,rangerate,TTC,TTB_tt,TTB_valid,TTT_left_tt,TTT_left_valid,TTT_right_tt,TTT_right_valid,closeleft_posx,closeleft_posy,closeleft_curx,closeleft_cury,closeleft_latest,closeright_posx,closeright_posy,closeright_curx,closeright_cury,closeright_latest,remoteleft_posx,remoteleft_posy,remoteleft_curx,remoteleft_cury,remoteleft_latest,remoteright_posx,remoteright_posy,remoteright_curx,remoteright_cury,remoteright_latest,center_posx,center_posy,center_curx,center_cury,center_latest,longpos,latpos,XOLC,latest,closest_corner,close_corner_est,inpath,inpathcur,inpathpre,inpathage,inpathcheck,isfusion,isvision,isradar,toi,isoncoming,AEBconf,steerflag,steerdirection,ref_pos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AESCCRCandiOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.VID is None:
        self.VID = 0
      if self.range is None:
        self.range = 0.
      if self.rangerate is None:
        self.rangerate = 0.
      if self.TTC is None:
        self.TTC = 0.
      if self.TTB_tt is None:
        self.TTB_tt = 0.
      if self.TTB_valid is None:
        self.TTB_valid = 0.
      if self.TTT_left_tt is None:
        self.TTT_left_tt = 0.
      if self.TTT_left_valid is None:
        self.TTT_left_valid = 0
      if self.TTT_right_tt is None:
        self.TTT_right_tt = 0.
      if self.TTT_right_valid is None:
        self.TTT_right_valid = 0
      if self.closeleft_posx is None:
        self.closeleft_posx = 0.
      if self.closeleft_posy is None:
        self.closeleft_posy = 0.
      if self.closeleft_curx is None:
        self.closeleft_curx = 0.
      if self.closeleft_cury is None:
        self.closeleft_cury = 0.
      if self.closeleft_latest is None:
        self.closeleft_latest = 0.
      if self.closeright_posx is None:
        self.closeright_posx = 0.
      if self.closeright_posy is None:
        self.closeright_posy = 0.
      if self.closeright_curx is None:
        self.closeright_curx = 0.
      if self.closeright_cury is None:
        self.closeright_cury = 0.
      if self.closeright_latest is None:
        self.closeright_latest = 0.
      if self.remoteleft_posx is None:
        self.remoteleft_posx = 0.
      if self.remoteleft_posy is None:
        self.remoteleft_posy = 0.
      if self.remoteleft_curx is None:
        self.remoteleft_curx = 0.
      if self.remoteleft_cury is None:
        self.remoteleft_cury = 0.
      if self.remoteleft_latest is None:
        self.remoteleft_latest = 0.
      if self.remoteright_posx is None:
        self.remoteright_posx = 0.
      if self.remoteright_posy is None:
        self.remoteright_posy = 0.
      if self.remoteright_curx is None:
        self.remoteright_curx = 0.
      if self.remoteright_cury is None:
        self.remoteright_cury = 0.
      if self.remoteright_latest is None:
        self.remoteright_latest = 0.
      if self.center_posx is None:
        self.center_posx = 0.
      if self.center_posy is None:
        self.center_posy = 0.
      if self.center_curx is None:
        self.center_curx = 0.
      if self.center_cury is None:
        self.center_cury = 0.
      if self.center_latest is None:
        self.center_latest = 0.
      if self.longpos is None:
        self.longpos = 0.
      if self.latpos is None:
        self.latpos = 0.
      if self.XOLC is None:
        self.XOLC = 0.
      if self.latest is None:
        self.latest = 0.
      if self.closest_corner is None:
        self.closest_corner = 0
      if self.close_corner_est is None:
        self.close_corner_est = 0
      if self.inpath is None:
        self.inpath = 0
      if self.inpathcur is None:
        self.inpathcur = 0
      if self.inpathpre is None:
        self.inpathpre = 0
      if self.inpathage is None:
        self.inpathage = 0
      if self.inpathcheck is None:
        self.inpathcheck = 0
      if self.isfusion is None:
        self.isfusion = 0
      if self.isvision is None:
        self.isvision = 0
      if self.isradar is None:
        self.isradar = 0
      if self.toi is None:
        self.toi = 0
      if self.isoncoming is None:
        self.isoncoming = 0
      if self.AEBconf is None:
        self.AEBconf = 0
      if self.steerflag is None:
        self.steerflag = 0
      if self.steerdirection is None:
        self.steerdirection = 0.
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
    else:
      self.ID = 0
      self.VID = 0
      self.range = 0.
      self.rangerate = 0.
      self.TTC = 0.
      self.TTB_tt = 0.
      self.TTB_valid = 0.
      self.TTT_left_tt = 0.
      self.TTT_left_valid = 0
      self.TTT_right_tt = 0.
      self.TTT_right_valid = 0
      self.closeleft_posx = 0.
      self.closeleft_posy = 0.
      self.closeleft_curx = 0.
      self.closeleft_cury = 0.
      self.closeleft_latest = 0.
      self.closeright_posx = 0.
      self.closeright_posy = 0.
      self.closeright_curx = 0.
      self.closeright_cury = 0.
      self.closeright_latest = 0.
      self.remoteleft_posx = 0.
      self.remoteleft_posy = 0.
      self.remoteleft_curx = 0.
      self.remoteleft_cury = 0.
      self.remoteleft_latest = 0.
      self.remoteright_posx = 0.
      self.remoteright_posy = 0.
      self.remoteright_curx = 0.
      self.remoteright_cury = 0.
      self.remoteright_latest = 0.
      self.center_posx = 0.
      self.center_posy = 0.
      self.center_curx = 0.
      self.center_cury = 0.
      self.center_latest = 0.
      self.longpos = 0.
      self.latpos = 0.
      self.XOLC = 0.
      self.latest = 0.
      self.closest_corner = 0
      self.close_corner_est = 0
      self.inpath = 0
      self.inpathcur = 0
      self.inpathpre = 0
      self.inpathage = 0
      self.inpathcheck = 0
      self.isfusion = 0
      self.isvision = 0
      self.isradar = 0
      self.toi = 0
      self.isoncoming = 0
      self.AEBconf = 0
      self.steerflag = 0
      self.steerdirection = 0.
      self.ref_pos = rospy_message_converter.msg.RefPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I6fIfI29f14IfI4d().pack(_x.ID, _x.VID, _x.range, _x.rangerate, _x.TTC, _x.TTB_tt, _x.TTB_valid, _x.TTT_left_tt, _x.TTT_left_valid, _x.TTT_right_tt, _x.TTT_right_valid, _x.closeleft_posx, _x.closeleft_posy, _x.closeleft_curx, _x.closeleft_cury, _x.closeleft_latest, _x.closeright_posx, _x.closeright_posy, _x.closeright_curx, _x.closeright_cury, _x.closeright_latest, _x.remoteleft_posx, _x.remoteleft_posy, _x.remoteleft_curx, _x.remoteleft_cury, _x.remoteleft_latest, _x.remoteright_posx, _x.remoteright_posy, _x.remoteright_curx, _x.remoteright_cury, _x.remoteright_latest, _x.center_posx, _x.center_posy, _x.center_curx, _x.center_cury, _x.center_latest, _x.longpos, _x.latpos, _x.XOLC, _x.latest, _x.closest_corner, _x.close_corner_est, _x.inpath, _x.inpathcur, _x.inpathpre, _x.inpathage, _x.inpathcheck, _x.isfusion, _x.isvision, _x.isradar, _x.toi, _x.isoncoming, _x.AEBconf, _x.steerflag, _x.steerdirection, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      end = 0
      _x = self
      start = end
      end += 256
      (_x.ID, _x.VID, _x.range, _x.rangerate, _x.TTC, _x.TTB_tt, _x.TTB_valid, _x.TTT_left_tt, _x.TTT_left_valid, _x.TTT_right_tt, _x.TTT_right_valid, _x.closeleft_posx, _x.closeleft_posy, _x.closeleft_curx, _x.closeleft_cury, _x.closeleft_latest, _x.closeright_posx, _x.closeright_posy, _x.closeright_curx, _x.closeright_cury, _x.closeright_latest, _x.remoteleft_posx, _x.remoteleft_posy, _x.remoteleft_curx, _x.remoteleft_cury, _x.remoteleft_latest, _x.remoteright_posx, _x.remoteright_posy, _x.remoteright_curx, _x.remoteright_cury, _x.remoteright_latest, _x.center_posx, _x.center_posy, _x.center_curx, _x.center_cury, _x.center_latest, _x.longpos, _x.latpos, _x.XOLC, _x.latest, _x.closest_corner, _x.close_corner_est, _x.inpath, _x.inpathcur, _x.inpathpre, _x.inpathage, _x.inpathcheck, _x.isfusion, _x.isvision, _x.isradar, _x.toi, _x.isoncoming, _x.AEBconf, _x.steerflag, _x.steerdirection, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading,) = _get_struct_2I6fIfI29f14IfI4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I6fIfI29f14IfI4d().pack(_x.ID, _x.VID, _x.range, _x.rangerate, _x.TTC, _x.TTB_tt, _x.TTB_valid, _x.TTT_left_tt, _x.TTT_left_valid, _x.TTT_right_tt, _x.TTT_right_valid, _x.closeleft_posx, _x.closeleft_posy, _x.closeleft_curx, _x.closeleft_cury, _x.closeleft_latest, _x.closeright_posx, _x.closeright_posy, _x.closeright_curx, _x.closeright_cury, _x.closeright_latest, _x.remoteleft_posx, _x.remoteleft_posy, _x.remoteleft_curx, _x.remoteleft_cury, _x.remoteleft_latest, _x.remoteright_posx, _x.remoteright_posy, _x.remoteright_curx, _x.remoteright_cury, _x.remoteright_latest, _x.center_posx, _x.center_posy, _x.center_curx, _x.center_cury, _x.center_latest, _x.longpos, _x.latpos, _x.XOLC, _x.latest, _x.closest_corner, _x.close_corner_est, _x.inpath, _x.inpathcur, _x.inpathpre, _x.inpathage, _x.inpathcheck, _x.isfusion, _x.isvision, _x.isradar, _x.toi, _x.isoncoming, _x.AEBconf, _x.steerflag, _x.steerdirection, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ref_pos is None:
        self.ref_pos = rospy_message_converter.msg.RefPoint()
      end = 0
      _x = self
      start = end
      end += 256
      (_x.ID, _x.VID, _x.range, _x.rangerate, _x.TTC, _x.TTB_tt, _x.TTB_valid, _x.TTT_left_tt, _x.TTT_left_valid, _x.TTT_right_tt, _x.TTT_right_valid, _x.closeleft_posx, _x.closeleft_posy, _x.closeleft_curx, _x.closeleft_cury, _x.closeleft_latest, _x.closeright_posx, _x.closeright_posy, _x.closeright_curx, _x.closeright_cury, _x.closeright_latest, _x.remoteleft_posx, _x.remoteleft_posy, _x.remoteleft_curx, _x.remoteleft_cury, _x.remoteleft_latest, _x.remoteright_posx, _x.remoteright_posy, _x.remoteright_curx, _x.remoteright_cury, _x.remoteright_latest, _x.center_posx, _x.center_posy, _x.center_curx, _x.center_cury, _x.center_latest, _x.longpos, _x.latpos, _x.XOLC, _x.latest, _x.closest_corner, _x.close_corner_est, _x.inpath, _x.inpathcur, _x.inpathpre, _x.inpathage, _x.inpathcheck, _x.isfusion, _x.isvision, _x.isradar, _x.toi, _x.isoncoming, _x.AEBconf, _x.steerflag, _x.steerdirection, _x.ref_pos.ref_character, _x.ref_pos.pos_x, _x.ref_pos.pos_y, _x.ref_pos.range, _x.ref_pos.heading,) = _get_struct_2I6fIfI29f14IfI4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I6fIfI29f14IfI4d = None
def _get_struct_2I6fIfI29f14IfI4d():
    global _struct_2I6fIfI29f14IfI4d
    if _struct_2I6fIfI29f14IfI4d is None:
        _struct_2I6fIfI29f14IfI4d = struct.Struct("<2I6fIfI29f14IfI4d")
    return _struct_2I6fIfI29f14IfI4d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/EbhpInnerInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class EbhpInnerInfo(genpy.Message):
  _md5sum = "be761f345706c0fe5f38d09f8b302253"
  _type = "rospy_message_converter/EbhpInnerInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """YawRateNoiseStru yawRateNoise
LearningCondStru learningCondInfo
uint32 yawRateLearnState
bool flgEsitmateEnable
float32[] modelConfidence
float32[] modelTransMatrix
float32[] statePriorHf
float32[] covPriorHf
float32[] statePostHf
float32[] covPostHf
float32[] statePriorCkv
float32[] covPriorCkv
float32[] statePostCkv
float32[] covPostCkv
float32[] residualCkv
float32[] sysUncertaintyCkv
float32[] procUncertaintyCkv
float32[] statePriorCka
float32[] covPriorCka
float32[] statePostCka
float32[] covPostCka
float32[] residualCka
float32[] sysUncertaintyCka
float32[] procUncertaintyCka
float32[] stateTransMatrix
float32[] measValues
float32[] measMatrix
float32[] measUncertainty
CurveCoeffStru curveCoeff

================================================================================
MSG: rospy_message_converter/YawRateNoiseStru
float32 bias
float32 std

================================================================================
MSG: rospy_message_converter/LearningCondStru
bool flgSwitch
bool flgFault
bool flgSuppress
bool flgActivate

================================================================================
MSG: rospy_message_converter/CurveCoeffStru
float32 curvature
float32 curvatureRate
"""
  __slots__ = ['yawRateNoise','learningCondInfo','yawRateLearnState','flgEsitmateEnable','modelConfidence','modelTransMatrix','statePriorHf','covPriorHf','statePostHf','covPostHf','statePriorCkv','covPriorCkv','statePostCkv','covPostCkv','residualCkv','sysUncertaintyCkv','procUncertaintyCkv','statePriorCka','covPriorCka','statePostCka','covPostCka','residualCka','sysUncertaintyCka','procUncertaintyCka','stateTransMatrix','measValues','measMatrix','measUncertainty','curveCoeff']
  _slot_types = ['rospy_message_converter/YawRateNoiseStru','rospy_message_converter/LearningCondStru','uint32','bool','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','rospy_message_converter/CurveCoeffStru']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       yawRateNoise,learningCondInfo,yawRateLearnState,flgEsitmateEnable,modelConfidence,modelTransMatrix,statePriorHf,covPriorHf,statePostHf,covPostHf,statePriorCkv,covPriorCkv,statePostCkv,covPostCkv,residualCkv,sysUncertaintyCkv,procUncertaintyCkv,statePriorCka,covPriorCka,statePostCka,covPostCka,residualCka,sysUncertaintyCka,procUncertaintyCka,stateTransMatrix,measValues,measMatrix,measUncertainty,curveCoeff

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EbhpInnerInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.yawRateNoise is None:
        self.yawRateNoise = rospy_message_converter.msg.YawRateNoiseStru()
      if self.learningCondInfo is None:
        self.learningCondInfo = rospy_message_converter.msg.LearningCondStru()
      if self.yawRateLearnState is None:
        self.yawRateLearnState = 0
      if self.flgEsitmateEnable is None:
        self.flgEsitmateEnable = False
      if self.modelConfidence is None:
        self.modelConfidence = []
      if self.modelTransMatrix is None:
        self.modelTransMatrix = []
      if self.statePriorHf is None:
        self.statePriorHf = []
      if self.covPriorHf is None:
        self.covPriorHf = []
      if self.statePostHf is None:
        self.statePostHf = []
      if self.covPostHf is None:
        self.covPostHf = []
      if self.statePriorCkv is None:
        self.statePriorCkv = []
      if self.covPriorCkv is None:
        self.covPriorCkv = []
      if self.statePostCkv is None:
        self.statePostCkv = []
      if self.covPostCkv is None:
        self.covPostCkv = []
      if self.residualCkv is None:
        self.residualCkv = []
      if self.sysUncertaintyCkv is None:
        self.sysUncertaintyCkv = []
      if self.procUncertaintyCkv is None:
        self.procUncertaintyCkv = []
      if self.statePriorCka is None:
        self.statePriorCka = []
      if self.covPriorCka is None:
        self.covPriorCka = []
      if self.statePostCka is None:
        self.statePostCka = []
      if self.covPostCka is None:
        self.covPostCka = []
      if self.residualCka is None:
        self.residualCka = []
      if self.sysUncertaintyCka is None:
        self.sysUncertaintyCka = []
      if self.procUncertaintyCka is None:
        self.procUncertaintyCka = []
      if self.stateTransMatrix is None:
        self.stateTransMatrix = []
      if self.measValues is None:
        self.measValues = []
      if self.measMatrix is None:
        self.measMatrix = []
      if self.measUncertainty is None:
        self.measUncertainty = []
      if self.curveCoeff is None:
        self.curveCoeff = rospy_message_converter.msg.CurveCoeffStru()
    else:
      self.yawRateNoise = rospy_message_converter.msg.YawRateNoiseStru()
      self.learningCondInfo = rospy_message_converter.msg.LearningCondStru()
      self.yawRateLearnState = 0
      self.flgEsitmateEnable = False
      self.modelConfidence = []
      self.modelTransMatrix = []
      self.statePriorHf = []
      self.covPriorHf = []
      self.statePostHf = []
      self.covPostHf = []
      self.statePriorCkv = []
      self.covPriorCkv = []
      self.statePostCkv = []
      self.covPostCkv = []
      self.residualCkv = []
      self.sysUncertaintyCkv = []
      self.procUncertaintyCkv = []
      self.statePriorCka = []
      self.covPriorCka = []
      self.statePostCka = []
      self.covPostCka = []
      self.residualCka = []
      self.sysUncertaintyCka = []
      self.procUncertaintyCka = []
      self.stateTransMatrix = []
      self.measValues = []
      self.measMatrix = []
      self.measUncertainty = []
      self.curveCoeff = rospy_message_converter.msg.CurveCoeffStru()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f4BIB().pack(_x.yawRateNoise.bias, _x.yawRateNoise.std, _x.learningCondInfo.flgSwitch, _x.learningCondInfo.flgFault, _x.learningCondInfo.flgSuppress, _x.learningCondInfo.flgActivate, _x.yawRateLearnState, _x.flgEsitmateEnable))
      length = len(self.modelConfidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.modelConfidence))
      length = len(self.modelTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.modelTransMatrix))
      length = len(self.statePriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statePriorHf))
      length = len(self.covPriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covPriorHf))
      length = len(self.statePostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statePostHf))
      length = len(self.covPostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covPostHf))
      length = len(self.statePriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statePriorCkv))
      length = len(self.covPriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covPriorCkv))
      length = len(self.statePostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statePostCkv))
      length = len(self.covPostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covPostCkv))
      length = len(self.residualCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.residualCkv))
      length = len(self.sysUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.sysUncertaintyCkv))
      length = len(self.procUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.procUncertaintyCkv))
      length = len(self.statePriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statePriorCka))
      length = len(self.covPriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covPriorCka))
      length = len(self.statePostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.statePostCka))
      length = len(self.covPostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covPostCka))
      length = len(self.residualCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.residualCka))
      length = len(self.sysUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.sysUncertaintyCka))
      length = len(self.procUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.procUncertaintyCka))
      length = len(self.stateTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.stateTransMatrix))
      length = len(self.measValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.measValues))
      length = len(self.measMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.measMatrix))
      length = len(self.measUncertainty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.measUncertainty))
      _x = self
      buff.write(_get_struct_2f().pack(_x.curveCoeff.curvature, _x.curveCoeff.curvatureRate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.yawRateNoise is None:
        self.yawRateNoise = rospy_message_converter.msg.YawRateNoiseStru()
      if self.learningCondInfo is None:
        self.learningCondInfo = rospy_message_converter.msg.LearningCondStru()
      if self.curveCoeff is None:
        self.curveCoeff = rospy_message_converter.msg.CurveCoeffStru()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.yawRateNoise.bias, _x.yawRateNoise.std, _x.learningCondInfo.flgSwitch, _x.learningCondInfo.flgFault, _x.learningCondInfo.flgSuppress, _x.learningCondInfo.flgActivate, _x.yawRateLearnState, _x.flgEsitmateEnable,) = _get_struct_2f4BIB().unpack(str[start:end])
      self.learningCondInfo.flgSwitch = bool(self.learningCondInfo.flgSwitch)
      self.learningCondInfo.flgFault = bool(self.learningCondInfo.flgFault)
      self.learningCondInfo.flgSuppress = bool(self.learningCondInfo.flgSuppress)
      self.learningCondInfo.flgActivate = bool(self.learningCondInfo.flgActivate)
      self.flgEsitmateEnable = bool(self.flgEsitmateEnable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modelConfidence = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modelTransMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePriorHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPriorHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePostHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPostHf = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePriorCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPriorCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePostCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPostCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.residualCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sysUncertaintyCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.procUncertaintyCkv = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePriorCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPriorCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePostCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPostCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.residualCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sysUncertaintyCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.procUncertaintyCka = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.stateTransMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.measValues = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.measMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.measUncertainty = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.curveCoeff.curvature, _x.curveCoeff.curvatureRate,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f4BIB().pack(_x.yawRateNoise.bias, _x.yawRateNoise.std, _x.learningCondInfo.flgSwitch, _x.learningCondInfo.flgFault, _x.learningCondInfo.flgSuppress, _x.learningCondInfo.flgActivate, _x.yawRateLearnState, _x.flgEsitmateEnable))
      length = len(self.modelConfidence)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.modelConfidence.tostring())
      length = len(self.modelTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.modelTransMatrix.tostring())
      length = len(self.statePriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statePriorHf.tostring())
      length = len(self.covPriorHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covPriorHf.tostring())
      length = len(self.statePostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statePostHf.tostring())
      length = len(self.covPostHf)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covPostHf.tostring())
      length = len(self.statePriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statePriorCkv.tostring())
      length = len(self.covPriorCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covPriorCkv.tostring())
      length = len(self.statePostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statePostCkv.tostring())
      length = len(self.covPostCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covPostCkv.tostring())
      length = len(self.residualCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.residualCkv.tostring())
      length = len(self.sysUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sysUncertaintyCkv.tostring())
      length = len(self.procUncertaintyCkv)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.procUncertaintyCkv.tostring())
      length = len(self.statePriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statePriorCka.tostring())
      length = len(self.covPriorCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covPriorCka.tostring())
      length = len(self.statePostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statePostCka.tostring())
      length = len(self.covPostCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covPostCka.tostring())
      length = len(self.residualCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.residualCka.tostring())
      length = len(self.sysUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sysUncertaintyCka.tostring())
      length = len(self.procUncertaintyCka)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.procUncertaintyCka.tostring())
      length = len(self.stateTransMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stateTransMatrix.tostring())
      length = len(self.measValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.measValues.tostring())
      length = len(self.measMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.measMatrix.tostring())
      length = len(self.measUncertainty)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.measUncertainty.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.curveCoeff.curvature, _x.curveCoeff.curvatureRate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.yawRateNoise is None:
        self.yawRateNoise = rospy_message_converter.msg.YawRateNoiseStru()
      if self.learningCondInfo is None:
        self.learningCondInfo = rospy_message_converter.msg.LearningCondStru()
      if self.curveCoeff is None:
        self.curveCoeff = rospy_message_converter.msg.CurveCoeffStru()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.yawRateNoise.bias, _x.yawRateNoise.std, _x.learningCondInfo.flgSwitch, _x.learningCondInfo.flgFault, _x.learningCondInfo.flgSuppress, _x.learningCondInfo.flgActivate, _x.yawRateLearnState, _x.flgEsitmateEnable,) = _get_struct_2f4BIB().unpack(str[start:end])
      self.learningCondInfo.flgSwitch = bool(self.learningCondInfo.flgSwitch)
      self.learningCondInfo.flgFault = bool(self.learningCondInfo.flgFault)
      self.learningCondInfo.flgSuppress = bool(self.learningCondInfo.flgSuppress)
      self.learningCondInfo.flgActivate = bool(self.learningCondInfo.flgActivate)
      self.flgEsitmateEnable = bool(self.flgEsitmateEnable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modelConfidence = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.modelTransMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePriorHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPriorHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePostHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPostHf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePriorCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPriorCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePostCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPostCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.residualCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sysUncertaintyCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.procUncertaintyCkv = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePriorCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPriorCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.statePostCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covPostCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.residualCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sysUncertaintyCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.procUncertaintyCka = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.stateTransMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.measValues = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.measMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.measUncertainty = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.curveCoeff.curvature, _x.curveCoeff.curvatureRate,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2f4BIB = None
def _get_struct_2f4BIB():
    global _struct_2f4BIB
    if _struct_2f4BIB is None:
        _struct_2f4BIB = struct.Struct("<2f4BIB")
    return _struct_2f4BIB

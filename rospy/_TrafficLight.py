# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TrafficLight.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrafficLight(genpy.Message):
  _md5sum = "e87e672e4f47e5ea1d6057ef83a25f81"
  _type = "rospy_message_converter/TrafficLight"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 TFL_Color
uint32 TFL_Object_ID
uint32 TFL_LightBox_ID
float32 TFL_Lat_Distance
float32 TFL_Long_Distance
float32 TFL_Height
int32 TFL_Mode
int32 TFL_Shape
int32 TFL_Structure_Orientation
uint32 TFL_Timer
"""
  __slots__ = ['TFL_Color','TFL_Object_ID','TFL_LightBox_ID','TFL_Lat_Distance','TFL_Long_Distance','TFL_Height','TFL_Mode','TFL_Shape','TFL_Structure_Orientation','TFL_Timer']
  _slot_types = ['int32','uint32','uint32','float32','float32','float32','int32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TFL_Color,TFL_Object_ID,TFL_LightBox_ID,TFL_Lat_Distance,TFL_Long_Distance,TFL_Height,TFL_Mode,TFL_Shape,TFL_Structure_Orientation,TFL_Timer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficLight, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.TFL_Color is None:
        self.TFL_Color = 0
      if self.TFL_Object_ID is None:
        self.TFL_Object_ID = 0
      if self.TFL_LightBox_ID is None:
        self.TFL_LightBox_ID = 0
      if self.TFL_Lat_Distance is None:
        self.TFL_Lat_Distance = 0.
      if self.TFL_Long_Distance is None:
        self.TFL_Long_Distance = 0.
      if self.TFL_Height is None:
        self.TFL_Height = 0.
      if self.TFL_Mode is None:
        self.TFL_Mode = 0
      if self.TFL_Shape is None:
        self.TFL_Shape = 0
      if self.TFL_Structure_Orientation is None:
        self.TFL_Structure_Orientation = 0
      if self.TFL_Timer is None:
        self.TFL_Timer = 0
    else:
      self.TFL_Color = 0
      self.TFL_Object_ID = 0
      self.TFL_LightBox_ID = 0
      self.TFL_Lat_Distance = 0.
      self.TFL_Long_Distance = 0.
      self.TFL_Height = 0.
      self.TFL_Mode = 0
      self.TFL_Shape = 0
      self.TFL_Structure_Orientation = 0
      self.TFL_Timer = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2I3f3iI().pack(_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer,) = _get_struct_i2I3f3iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2I3f3iI().pack(_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.TFL_Color, _x.TFL_Object_ID, _x.TFL_LightBox_ID, _x.TFL_Lat_Distance, _x.TFL_Long_Distance, _x.TFL_Height, _x.TFL_Mode, _x.TFL_Shape, _x.TFL_Structure_Orientation, _x.TFL_Timer,) = _get_struct_i2I3f3iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2I3f3iI = None
def _get_struct_i2I3f3iI():
    global _struct_i2I3f3iI
    if _struct_i2I3f3iI is None:
        _struct_i2I3f3iI = struct.Struct("<i2I3f3iI")
    return _struct_i2I3f3iI

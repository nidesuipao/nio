# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TgtObj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TgtObj(genpy.Message):
  _md5sum = "5407a159fed86346e8c02302c4e6ca12"
  _type = "rospy_message_converter/TgtObj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id
uint32 obj_index
uint32 confidence
float32 lon_pos_ccs
float32 lon_pos_vcs
float32 lon_pos_vcs_std
float32 lon_vel
float32 lon_vel_std
float32 lon_acc
float32 lat_pos_ccs
float32 lat_pos_vcs
float32 lat_pos_vcs_std
float32 lat_vel
float32 lat_vel_std
float32 lat_vel_ccs
float32 lat_acc
int32 status
int32 type
int32 valid
uint32 age
float32 width
float32 length
float32 height
float32 phi_angle
float32 dphi_angle_rate
int32 fusion_source
float32 ttc
int32 blinker_info
uint32 brake_lights
float32 prob_lane_change
int32 dirLaneChange
uint32 age_in_path
"""
  __slots__ = ['id','obj_index','confidence','lon_pos_ccs','lon_pos_vcs','lon_pos_vcs_std','lon_vel','lon_vel_std','lon_acc','lat_pos_ccs','lat_pos_vcs','lat_pos_vcs_std','lat_vel','lat_vel_std','lat_vel_ccs','lat_acc','status','type','valid','age','width','length','height','phi_angle','dphi_angle_rate','fusion_source','ttc','blinker_info','brake_lights','prob_lane_change','dirLaneChange','age_in_path']
  _slot_types = ['uint32','uint32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','uint32','float32','float32','float32','float32','float32','int32','float32','int32','uint32','float32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,obj_index,confidence,lon_pos_ccs,lon_pos_vcs,lon_pos_vcs_std,lon_vel,lon_vel_std,lon_acc,lat_pos_ccs,lat_pos_vcs,lat_pos_vcs_std,lat_vel,lat_vel_std,lat_vel_ccs,lat_acc,status,type,valid,age,width,length,height,phi_angle,dphi_angle_rate,fusion_source,ttc,blinker_info,brake_lights,prob_lane_change,dirLaneChange,age_in_path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TgtObj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.obj_index is None:
        self.obj_index = 0
      if self.confidence is None:
        self.confidence = 0
      if self.lon_pos_ccs is None:
        self.lon_pos_ccs = 0.
      if self.lon_pos_vcs is None:
        self.lon_pos_vcs = 0.
      if self.lon_pos_vcs_std is None:
        self.lon_pos_vcs_std = 0.
      if self.lon_vel is None:
        self.lon_vel = 0.
      if self.lon_vel_std is None:
        self.lon_vel_std = 0.
      if self.lon_acc is None:
        self.lon_acc = 0.
      if self.lat_pos_ccs is None:
        self.lat_pos_ccs = 0.
      if self.lat_pos_vcs is None:
        self.lat_pos_vcs = 0.
      if self.lat_pos_vcs_std is None:
        self.lat_pos_vcs_std = 0.
      if self.lat_vel is None:
        self.lat_vel = 0.
      if self.lat_vel_std is None:
        self.lat_vel_std = 0.
      if self.lat_vel_ccs is None:
        self.lat_vel_ccs = 0.
      if self.lat_acc is None:
        self.lat_acc = 0.
      if self.status is None:
        self.status = 0
      if self.type is None:
        self.type = 0
      if self.valid is None:
        self.valid = 0
      if self.age is None:
        self.age = 0
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.height is None:
        self.height = 0.
      if self.phi_angle is None:
        self.phi_angle = 0.
      if self.dphi_angle_rate is None:
        self.dphi_angle_rate = 0.
      if self.fusion_source is None:
        self.fusion_source = 0
      if self.ttc is None:
        self.ttc = 0.
      if self.blinker_info is None:
        self.blinker_info = 0
      if self.brake_lights is None:
        self.brake_lights = 0
      if self.prob_lane_change is None:
        self.prob_lane_change = 0.
      if self.dirLaneChange is None:
        self.dirLaneChange = 0
      if self.age_in_path is None:
        self.age_in_path = 0
    else:
      self.id = 0
      self.obj_index = 0
      self.confidence = 0
      self.lon_pos_ccs = 0.
      self.lon_pos_vcs = 0.
      self.lon_pos_vcs_std = 0.
      self.lon_vel = 0.
      self.lon_vel_std = 0.
      self.lon_acc = 0.
      self.lat_pos_ccs = 0.
      self.lat_pos_vcs = 0.
      self.lat_pos_vcs_std = 0.
      self.lat_vel = 0.
      self.lat_vel_std = 0.
      self.lat_vel_ccs = 0.
      self.lat_acc = 0.
      self.status = 0
      self.type = 0
      self.valid = 0
      self.age = 0
      self.width = 0.
      self.length = 0.
      self.height = 0.
      self.phi_angle = 0.
      self.dphi_angle_rate = 0.
      self.fusion_source = 0
      self.ttc = 0.
      self.blinker_info = 0
      self.brake_lights = 0
      self.prob_lane_change = 0.
      self.dirLaneChange = 0
      self.age_in_path = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I13f3iI5fifiIfiI().pack(_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.id, _x.obj_index, _x.confidence, _x.lon_pos_ccs, _x.lon_pos_vcs, _x.lon_pos_vcs_std, _x.lon_vel, _x.lon_vel_std, _x.lon_acc, _x.lat_pos_ccs, _x.lat_pos_vcs, _x.lat_pos_vcs_std, _x.lat_vel, _x.lat_vel_std, _x.lat_vel_ccs, _x.lat_acc, _x.status, _x.type, _x.valid, _x.age, _x.width, _x.length, _x.height, _x.phi_angle, _x.dphi_angle_rate, _x.fusion_source, _x.ttc, _x.blinker_info, _x.brake_lights, _x.prob_lane_change, _x.dirLaneChange, _x.age_in_path,) = _get_struct_3I13f3iI5fifiIfiI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I13f3iI5fifiIfiI = None
def _get_struct_3I13f3iI5fifiIfiI():
    global _struct_3I13f3iI5fifiIfiI
    if _struct_3I13f3iI5fifiIfiI is None:
        _struct_3I13f3iI5fifiIfiI = struct.Struct("<3I13f3iI5fifiIfiI")
    return _struct_3I13f3iI5fifiIfiI

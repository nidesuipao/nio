# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/TrajInfoStru.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class TrajInfoStru(genpy.Message):
  _md5sum = "006479f201306a5df812da080bc95a34"
  _type = "rospy_message_converter/TrajInfoStru"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 accel
TrajPointStru[] trajPoints
TrajPointStru endPoint
TrajPointStru validPoint
TrajPointStru stopPoint
float32[] reserved

================================================================================
MSG: rospy_message_converter/TrajPointStru
float32 x
float32 y
float32 s
float32 phi
float32 sinPhi
float32 cosPhi
float32 t
float32[] reserved
"""
  __slots__ = ['accel','trajPoints','endPoint','validPoint','stopPoint','reserved']
  _slot_types = ['float32','rospy_message_converter/TrajPointStru[]','rospy_message_converter/TrajPointStru','rospy_message_converter/TrajPointStru','rospy_message_converter/TrajPointStru','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       accel,trajPoints,endPoint,validPoint,stopPoint,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajInfoStru, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.accel is None:
        self.accel = 0.
      if self.trajPoints is None:
        self.trajPoints = []
      if self.endPoint is None:
        self.endPoint = rospy_message_converter.msg.TrajPointStru()
      if self.validPoint is None:
        self.validPoint = rospy_message_converter.msg.TrajPointStru()
      if self.stopPoint is None:
        self.stopPoint = rospy_message_converter.msg.TrajPointStru()
      if self.reserved is None:
        self.reserved = []
    else:
      self.accel = 0.
      self.trajPoints = []
      self.endPoint = rospy_message_converter.msg.TrajPointStru()
      self.validPoint = rospy_message_converter.msg.TrajPointStru()
      self.stopPoint = rospy_message_converter.msg.TrajPointStru()
      self.reserved = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.accel
      buff.write(_get_struct_f().pack(_x))
      length = len(self.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.endPoint.x, _x.endPoint.y, _x.endPoint.s, _x.endPoint.phi, _x.endPoint.sinPhi, _x.endPoint.cosPhi, _x.endPoint.t))
      length = len(self.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.endPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.validPoint.x, _x.validPoint.y, _x.validPoint.s, _x.validPoint.phi, _x.validPoint.sinPhi, _x.validPoint.cosPhi, _x.validPoint.t))
      length = len(self.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.validPoint.reserved))
      _x = self
      buff.write(_get_struct_7f().pack(_x.stopPoint.x, _x.stopPoint.y, _x.stopPoint.s, _x.stopPoint.phi, _x.stopPoint.sinPhi, _x.stopPoint.cosPhi, _x.stopPoint.t))
      length = len(self.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.stopPoint.reserved))
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajPoints is None:
        self.trajPoints = None
      if self.endPoint is None:
        self.endPoint = rospy_message_converter.msg.TrajPointStru()
      if self.validPoint is None:
        self.validPoint = rospy_message_converter.msg.TrajPointStru()
      if self.stopPoint is None:
        self.stopPoint = rospy_message_converter.msg.TrajPointStru()
      end = 0
      start = end
      end += 4
      (self.accel,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = s.unpack(str[start:end])
        self.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.endPoint.x, _x.endPoint.y, _x.endPoint.s, _x.endPoint.phi, _x.endPoint.sinPhi, _x.endPoint.cosPhi, _x.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.endPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.validPoint.x, _x.validPoint.y, _x.validPoint.s, _x.validPoint.phi, _x.validPoint.sinPhi, _x.validPoint.cosPhi, _x.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.validPoint.reserved = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.stopPoint.x, _x.stopPoint.y, _x.stopPoint.s, _x.stopPoint.phi, _x.stopPoint.sinPhi, _x.stopPoint.cosPhi, _x.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.stopPoint.reserved = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.accel
      buff.write(_get_struct_f().pack(_x))
      length = len(self.trajPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajPoints:
        _x = val1
        buff.write(_get_struct_7f().pack(_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t))
        length = len(val1.reserved)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.endPoint.x, _x.endPoint.y, _x.endPoint.s, _x.endPoint.phi, _x.endPoint.sinPhi, _x.endPoint.cosPhi, _x.endPoint.t))
      length = len(self.endPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.endPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.validPoint.x, _x.validPoint.y, _x.validPoint.s, _x.validPoint.phi, _x.validPoint.sinPhi, _x.validPoint.cosPhi, _x.validPoint.t))
      length = len(self.validPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.validPoint.reserved.tostring())
      _x = self
      buff.write(_get_struct_7f().pack(_x.stopPoint.x, _x.stopPoint.y, _x.stopPoint.s, _x.stopPoint.phi, _x.stopPoint.sinPhi, _x.stopPoint.cosPhi, _x.stopPoint.t))
      length = len(self.stopPoint.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.stopPoint.reserved.tostring())
      length = len(self.reserved)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajPoints is None:
        self.trajPoints = None
      if self.endPoint is None:
        self.endPoint = rospy_message_converter.msg.TrajPointStru()
      if self.validPoint is None:
        self.validPoint = rospy_message_converter.msg.TrajPointStru()
      if self.stopPoint is None:
        self.stopPoint = rospy_message_converter.msg.TrajPointStru()
      end = 0
      start = end
      end += 4
      (self.accel,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajPoints = []
      for i in range(0, length):
        val1 = rospy_message_converter.msg.TrajPointStru()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.s, _x.phi, _x.sinPhi, _x.cosPhi, _x.t,) = _get_struct_7f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.trajPoints.append(val1)
      _x = self
      start = end
      end += 28
      (_x.endPoint.x, _x.endPoint.y, _x.endPoint.s, _x.endPoint.phi, _x.endPoint.sinPhi, _x.endPoint.cosPhi, _x.endPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.endPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.validPoint.x, _x.validPoint.y, _x.validPoint.s, _x.validPoint.phi, _x.validPoint.sinPhi, _x.validPoint.cosPhi, _x.validPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.validPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 28
      (_x.stopPoint.x, _x.stopPoint.y, _x.stopPoint.s, _x.stopPoint.phi, _x.stopPoint.sinPhi, _x.stopPoint.cosPhi, _x.stopPoint.t,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.stopPoint.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

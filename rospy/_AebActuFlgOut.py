# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/AebActuFlgOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AebActuFlgOut(genpy.Message):
  _md5sum = "23a921b6abec410acca5326e13f4cf4b"
  _type = "rospy_message_converter/AebActuFlgOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool prewarn
bool latentwarn
bool prefill
bool warnbrk
bool softbrk
bool hardbrk
bool iba_req
uint32 warntype
bool hold_req
"""
  __slots__ = ['prewarn','latentwarn','prefill','warnbrk','softbrk','hardbrk','iba_req','warntype','hold_req']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prewarn,latentwarn,prefill,warnbrk,softbrk,hardbrk,iba_req,warntype,hold_req

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AebActuFlgOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.prewarn is None:
        self.prewarn = False
      if self.latentwarn is None:
        self.latentwarn = False
      if self.prefill is None:
        self.prefill = False
      if self.warnbrk is None:
        self.warnbrk = False
      if self.softbrk is None:
        self.softbrk = False
      if self.hardbrk is None:
        self.hardbrk = False
      if self.iba_req is None:
        self.iba_req = False
      if self.warntype is None:
        self.warntype = 0
      if self.hold_req is None:
        self.hold_req = False
    else:
      self.prewarn = False
      self.latentwarn = False
      self.prefill = False
      self.warnbrk = False
      self.softbrk = False
      self.hardbrk = False
      self.iba_req = False
      self.warntype = 0
      self.hold_req = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7BIB().pack(_x.prewarn, _x.latentwarn, _x.prefill, _x.warnbrk, _x.softbrk, _x.hardbrk, _x.iba_req, _x.warntype, _x.hold_req))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.prewarn, _x.latentwarn, _x.prefill, _x.warnbrk, _x.softbrk, _x.hardbrk, _x.iba_req, _x.warntype, _x.hold_req,) = _get_struct_7BIB().unpack(str[start:end])
      self.prewarn = bool(self.prewarn)
      self.latentwarn = bool(self.latentwarn)
      self.prefill = bool(self.prefill)
      self.warnbrk = bool(self.warnbrk)
      self.softbrk = bool(self.softbrk)
      self.hardbrk = bool(self.hardbrk)
      self.iba_req = bool(self.iba_req)
      self.hold_req = bool(self.hold_req)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7BIB().pack(_x.prewarn, _x.latentwarn, _x.prefill, _x.warnbrk, _x.softbrk, _x.hardbrk, _x.iba_req, _x.warntype, _x.hold_req))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.prewarn, _x.latentwarn, _x.prefill, _x.warnbrk, _x.softbrk, _x.hardbrk, _x.iba_req, _x.warntype, _x.hold_req,) = _get_struct_7BIB().unpack(str[start:end])
      self.prewarn = bool(self.prewarn)
      self.latentwarn = bool(self.latentwarn)
      self.prefill = bool(self.prefill)
      self.warnbrk = bool(self.warnbrk)
      self.softbrk = bool(self.softbrk)
      self.hardbrk = bool(self.hardbrk)
      self.iba_req = bool(self.iba_req)
      self.hold_req = bool(self.hold_req)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7BIB = None
def _get_struct_7BIB():
    global _struct_7BIB
    if _struct_7BIB is None:
        _struct_7BIB = struct.Struct("<7BIB")
    return _struct_7BIB

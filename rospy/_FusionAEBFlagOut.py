# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/FusionAEBFlagOut.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FusionAEBFlagOut(genpy.Message):
  _md5sum = "8723723c8a021dafe96568b9c4ddba15"
  _type = "rospy_message_converter/FusionAEBFlagOut"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 warning_flag
uint32 prefill_flage
uint32 lowbrake_flag
uint32 highbrake_flag
uint32 unconfirmed_flag
uint32 hold_flag
uint32 lowbrake_age
uint32 highbrake_hold_age
uint32 warnbrake_flag
bool readyforIBA
"""
  __slots__ = ['warning_flag','prefill_flage','lowbrake_flag','highbrake_flag','unconfirmed_flag','hold_flag','lowbrake_age','highbrake_hold_age','warnbrake_flag','readyforIBA']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       warning_flag,prefill_flage,lowbrake_flag,highbrake_flag,unconfirmed_flag,hold_flag,lowbrake_age,highbrake_hold_age,warnbrake_flag,readyforIBA

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionAEBFlagOut, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.warning_flag is None:
        self.warning_flag = 0
      if self.prefill_flage is None:
        self.prefill_flage = 0
      if self.lowbrake_flag is None:
        self.lowbrake_flag = 0
      if self.highbrake_flag is None:
        self.highbrake_flag = 0
      if self.unconfirmed_flag is None:
        self.unconfirmed_flag = 0
      if self.hold_flag is None:
        self.hold_flag = 0
      if self.lowbrake_age is None:
        self.lowbrake_age = 0
      if self.highbrake_hold_age is None:
        self.highbrake_hold_age = 0
      if self.warnbrake_flag is None:
        self.warnbrake_flag = 0
      if self.readyforIBA is None:
        self.readyforIBA = False
    else:
      self.warning_flag = 0
      self.prefill_flage = 0
      self.lowbrake_flag = 0
      self.highbrake_flag = 0
      self.unconfirmed_flag = 0
      self.hold_flag = 0
      self.lowbrake_age = 0
      self.highbrake_hold_age = 0
      self.warnbrake_flag = 0
      self.readyforIBA = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9IB().pack(_x.warning_flag, _x.prefill_flage, _x.lowbrake_flag, _x.highbrake_flag, _x.unconfirmed_flag, _x.hold_flag, _x.lowbrake_age, _x.highbrake_hold_age, _x.warnbrake_flag, _x.readyforIBA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.warning_flag, _x.prefill_flage, _x.lowbrake_flag, _x.highbrake_flag, _x.unconfirmed_flag, _x.hold_flag, _x.lowbrake_age, _x.highbrake_hold_age, _x.warnbrake_flag, _x.readyforIBA,) = _get_struct_9IB().unpack(str[start:end])
      self.readyforIBA = bool(self.readyforIBA)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9IB().pack(_x.warning_flag, _x.prefill_flage, _x.lowbrake_flag, _x.highbrake_flag, _x.unconfirmed_flag, _x.hold_flag, _x.lowbrake_age, _x.highbrake_hold_age, _x.warnbrake_flag, _x.readyforIBA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.warning_flag, _x.prefill_flage, _x.lowbrake_flag, _x.highbrake_flag, _x.unconfirmed_flag, _x.hold_flag, _x.lowbrake_age, _x.highbrake_hold_age, _x.warnbrake_flag, _x.readyforIBA,) = _get_struct_9IB().unpack(str[start:end])
      self.readyforIBA = bool(self.readyforIBA)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9IB = None
def _get_struct_9IB():
    global _struct_9IB
    if _struct_9IB is None:
        _struct_9IB = struct.Struct("<9IB")
    return _struct_9IB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rospy_message_converter/SimpleLateralDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rospy_message_converter.msg

class SimpleLateralDebug(genpy.Message):
  _md5sum = "ae5db192810e9e705aa2e2a3921cfda7"
  _type = "rospy_message_converter/SimpleLateralDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
float64 lateral_acceleration
float64 lateral_jerk
float64 ref_heading_rate
float64 heading_rate
float64 ref_heading_acceleration
float64 heading_acceleration
float64 heading_error_acceleration
float64 ref_heading_jerk
float64 heading_jerk
float64 heading_error_jerk
float64 lateral_error_feedback
float64 heading_error_feedback
TrajectoryPoint current_target_point
float64 steer_angle_feedback_augment

================================================================================
MSG: rospy_message_converter/TrajectoryPoint
PathPoint path_point
float64 v
float64 a
float64 relative_time
float64 da
float64 steer
GaussianInfo gaussian_info
int32 gear

================================================================================
MSG: rospy_message_converter/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string lane_id
float64 x_derivative
float64 y_derivative

================================================================================
MSG: rospy_message_converter/GaussianInfo
float64 sigma_x
float64 sigma_y
float64 correlation
float64 area_probability
float64 ellipse_a
float64 ellipse_b
float64 theta_a
"""
  __slots__ = ['lateral_error','ref_heading','heading','heading_error','heading_error_rate','lateral_error_rate','curvature','steer_angle','steer_angle_feedforward','steer_angle_lateral_contribution','steer_angle_lateral_rate_contribution','steer_angle_heading_contribution','steer_angle_heading_rate_contribution','steer_angle_feedback','steering_position','ref_speed','steer_angle_limited','lateral_acceleration','lateral_jerk','ref_heading_rate','heading_rate','ref_heading_acceleration','heading_acceleration','heading_error_acceleration','ref_heading_jerk','heading_jerk','heading_error_jerk','lateral_error_feedback','heading_error_feedback','current_target_point','steer_angle_feedback_augment']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','rospy_message_converter/TrajectoryPoint','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lateral_error,ref_heading,heading,heading_error,heading_error_rate,lateral_error_rate,curvature,steer_angle,steer_angle_feedforward,steer_angle_lateral_contribution,steer_angle_lateral_rate_contribution,steer_angle_heading_contribution,steer_angle_heading_rate_contribution,steer_angle_feedback,steering_position,ref_speed,steer_angle_limited,lateral_acceleration,lateral_jerk,ref_heading_rate,heading_rate,ref_heading_acceleration,heading_acceleration,heading_error_acceleration,ref_heading_jerk,heading_jerk,heading_error_jerk,lateral_error_feedback,heading_error_feedback,current_target_point,steer_angle_feedback_augment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleLateralDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lateral_error is None:
        self.lateral_error = 0.
      if self.ref_heading is None:
        self.ref_heading = 0.
      if self.heading is None:
        self.heading = 0.
      if self.heading_error is None:
        self.heading_error = 0.
      if self.heading_error_rate is None:
        self.heading_error_rate = 0.
      if self.lateral_error_rate is None:
        self.lateral_error_rate = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.steer_angle is None:
        self.steer_angle = 0.
      if self.steer_angle_feedforward is None:
        self.steer_angle_feedforward = 0.
      if self.steer_angle_lateral_contribution is None:
        self.steer_angle_lateral_contribution = 0.
      if self.steer_angle_lateral_rate_contribution is None:
        self.steer_angle_lateral_rate_contribution = 0.
      if self.steer_angle_heading_contribution is None:
        self.steer_angle_heading_contribution = 0.
      if self.steer_angle_heading_rate_contribution is None:
        self.steer_angle_heading_rate_contribution = 0.
      if self.steer_angle_feedback is None:
        self.steer_angle_feedback = 0.
      if self.steering_position is None:
        self.steering_position = 0.
      if self.ref_speed is None:
        self.ref_speed = 0.
      if self.steer_angle_limited is None:
        self.steer_angle_limited = 0.
      if self.lateral_acceleration is None:
        self.lateral_acceleration = 0.
      if self.lateral_jerk is None:
        self.lateral_jerk = 0.
      if self.ref_heading_rate is None:
        self.ref_heading_rate = 0.
      if self.heading_rate is None:
        self.heading_rate = 0.
      if self.ref_heading_acceleration is None:
        self.ref_heading_acceleration = 0.
      if self.heading_acceleration is None:
        self.heading_acceleration = 0.
      if self.heading_error_acceleration is None:
        self.heading_error_acceleration = 0.
      if self.ref_heading_jerk is None:
        self.ref_heading_jerk = 0.
      if self.heading_jerk is None:
        self.heading_jerk = 0.
      if self.heading_error_jerk is None:
        self.heading_error_jerk = 0.
      if self.lateral_error_feedback is None:
        self.lateral_error_feedback = 0.
      if self.heading_error_feedback is None:
        self.heading_error_feedback = 0.
      if self.current_target_point is None:
        self.current_target_point = rospy_message_converter.msg.TrajectoryPoint()
      if self.steer_angle_feedback_augment is None:
        self.steer_angle_feedback_augment = 0.
    else:
      self.lateral_error = 0.
      self.ref_heading = 0.
      self.heading = 0.
      self.heading_error = 0.
      self.heading_error_rate = 0.
      self.lateral_error_rate = 0.
      self.curvature = 0.
      self.steer_angle = 0.
      self.steer_angle_feedforward = 0.
      self.steer_angle_lateral_contribution = 0.
      self.steer_angle_lateral_rate_contribution = 0.
      self.steer_angle_heading_contribution = 0.
      self.steer_angle_heading_rate_contribution = 0.
      self.steer_angle_feedback = 0.
      self.steering_position = 0.
      self.ref_speed = 0.
      self.steer_angle_limited = 0.
      self.lateral_acceleration = 0.
      self.lateral_jerk = 0.
      self.ref_heading_rate = 0.
      self.heading_rate = 0.
      self.ref_heading_acceleration = 0.
      self.heading_acceleration = 0.
      self.heading_error_acceleration = 0.
      self.ref_heading_jerk = 0.
      self.heading_jerk = 0.
      self.heading_error_jerk = 0.
      self.lateral_error_feedback = 0.
      self.heading_error_feedback = 0.
      self.current_target_point = rospy_message_converter.msg.TrajectoryPoint()
      self.steer_angle_feedback_augment = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_37d().pack(_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.lateral_acceleration, _x.lateral_jerk, _x.ref_heading_rate, _x.heading_rate, _x.ref_heading_acceleration, _x.heading_acceleration, _x.heading_error_acceleration, _x.ref_heading_jerk, _x.heading_jerk, _x.heading_error_jerk, _x.lateral_error_feedback, _x.heading_error_feedback, _x.current_target_point.path_point.x, _x.current_target_point.path_point.y, _x.current_target_point.path_point.z, _x.current_target_point.path_point.theta, _x.current_target_point.path_point.kappa, _x.current_target_point.path_point.s, _x.current_target_point.path_point.dkappa, _x.current_target_point.path_point.ddkappa))
      _x = self.current_target_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14did().pack(_x.current_target_point.path_point.x_derivative, _x.current_target_point.path_point.y_derivative, _x.current_target_point.v, _x.current_target_point.a, _x.current_target_point.relative_time, _x.current_target_point.da, _x.current_target_point.steer, _x.current_target_point.gaussian_info.sigma_x, _x.current_target_point.gaussian_info.sigma_y, _x.current_target_point.gaussian_info.correlation, _x.current_target_point.gaussian_info.area_probability, _x.current_target_point.gaussian_info.ellipse_a, _x.current_target_point.gaussian_info.ellipse_b, _x.current_target_point.gaussian_info.theta_a, _x.current_target_point.gear, _x.steer_angle_feedback_augment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_target_point is None:
        self.current_target_point = rospy_message_converter.msg.TrajectoryPoint()
      end = 0
      _x = self
      start = end
      end += 296
      (_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.lateral_acceleration, _x.lateral_jerk, _x.ref_heading_rate, _x.heading_rate, _x.ref_heading_acceleration, _x.heading_acceleration, _x.heading_error_acceleration, _x.ref_heading_jerk, _x.heading_jerk, _x.heading_error_jerk, _x.lateral_error_feedback, _x.heading_error_feedback, _x.current_target_point.path_point.x, _x.current_target_point.path_point.y, _x.current_target_point.path_point.z, _x.current_target_point.path_point.theta, _x.current_target_point.path_point.kappa, _x.current_target_point.path_point.s, _x.current_target_point.path_point.dkappa, _x.current_target_point.path_point.ddkappa,) = _get_struct_37d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_target_point.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_target_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.current_target_point.path_point.x_derivative, _x.current_target_point.path_point.y_derivative, _x.current_target_point.v, _x.current_target_point.a, _x.current_target_point.relative_time, _x.current_target_point.da, _x.current_target_point.steer, _x.current_target_point.gaussian_info.sigma_x, _x.current_target_point.gaussian_info.sigma_y, _x.current_target_point.gaussian_info.correlation, _x.current_target_point.gaussian_info.area_probability, _x.current_target_point.gaussian_info.ellipse_a, _x.current_target_point.gaussian_info.ellipse_b, _x.current_target_point.gaussian_info.theta_a, _x.current_target_point.gear, _x.steer_angle_feedback_augment,) = _get_struct_14did().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_37d().pack(_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.lateral_acceleration, _x.lateral_jerk, _x.ref_heading_rate, _x.heading_rate, _x.ref_heading_acceleration, _x.heading_acceleration, _x.heading_error_acceleration, _x.ref_heading_jerk, _x.heading_jerk, _x.heading_error_jerk, _x.lateral_error_feedback, _x.heading_error_feedback, _x.current_target_point.path_point.x, _x.current_target_point.path_point.y, _x.current_target_point.path_point.z, _x.current_target_point.path_point.theta, _x.current_target_point.path_point.kappa, _x.current_target_point.path_point.s, _x.current_target_point.path_point.dkappa, _x.current_target_point.path_point.ddkappa))
      _x = self.current_target_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14did().pack(_x.current_target_point.path_point.x_derivative, _x.current_target_point.path_point.y_derivative, _x.current_target_point.v, _x.current_target_point.a, _x.current_target_point.relative_time, _x.current_target_point.da, _x.current_target_point.steer, _x.current_target_point.gaussian_info.sigma_x, _x.current_target_point.gaussian_info.sigma_y, _x.current_target_point.gaussian_info.correlation, _x.current_target_point.gaussian_info.area_probability, _x.current_target_point.gaussian_info.ellipse_a, _x.current_target_point.gaussian_info.ellipse_b, _x.current_target_point.gaussian_info.theta_a, _x.current_target_point.gear, _x.steer_angle_feedback_augment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_target_point is None:
        self.current_target_point = rospy_message_converter.msg.TrajectoryPoint()
      end = 0
      _x = self
      start = end
      end += 296
      (_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.lateral_acceleration, _x.lateral_jerk, _x.ref_heading_rate, _x.heading_rate, _x.ref_heading_acceleration, _x.heading_acceleration, _x.heading_error_acceleration, _x.ref_heading_jerk, _x.heading_jerk, _x.heading_error_jerk, _x.lateral_error_feedback, _x.heading_error_feedback, _x.current_target_point.path_point.x, _x.current_target_point.path_point.y, _x.current_target_point.path_point.z, _x.current_target_point.path_point.theta, _x.current_target_point.path_point.kappa, _x.current_target_point.path_point.s, _x.current_target_point.path_point.dkappa, _x.current_target_point.path_point.ddkappa,) = _get_struct_37d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_target_point.path_point.lane_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_target_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.current_target_point.path_point.x_derivative, _x.current_target_point.path_point.y_derivative, _x.current_target_point.v, _x.current_target_point.a, _x.current_target_point.relative_time, _x.current_target_point.da, _x.current_target_point.steer, _x.current_target_point.gaussian_info.sigma_x, _x.current_target_point.gaussian_info.sigma_y, _x.current_target_point.gaussian_info.correlation, _x.current_target_point.gaussian_info.area_probability, _x.current_target_point.gaussian_info.ellipse_a, _x.current_target_point.gaussian_info.ellipse_b, _x.current_target_point.gaussian_info.theta_a, _x.current_target_point.gear, _x.steer_angle_feedback_augment,) = _get_struct_14did().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14did = None
def _get_struct_14did():
    global _struct_14did
    if _struct_14did is None:
        _struct_14did = struct.Struct("<14did")
    return _struct_14did
_struct_37d = None
def _get_struct_37d():
    global _struct_37d
    if _struct_37d is None:
        _struct_37d = struct.Struct("<37d")
    return _struct_37d
